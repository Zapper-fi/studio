import fs from 'fs';
import path from 'path';
import util from 'util';

import { glob as globCb } from 'glob';
import { camelCase, upperFirst } from 'lodash';

const mkdir = util.promisify(fs.mkdir);
const rmdir = util.promisify(fs.rm);
const exists = util.promisify(fs.exists);
const writeFile = util.promisify(fs.writeFile);
const glob = util.promisify(globCb);

export const generateViemContract = async (location: string) => {
  const providerDir = path.join(location, `/contracts/viem`);
  const providerDirExists = await exists(providerDir);
  if (providerDirExists) await rmdir(providerDir, { recursive: true });
  await mkdir(providerDir, { recursive: true });

  const allFiles = await glob(path.join(location, '/contracts/abis/*.json'));
  if (!allFiles.length) return;

  await Promise.all(
    allFiles.map(async file => {
      const abi = JSON.parse(fs.readFileSync(file, 'utf8'));
      const className = upperFirst(camelCase(path.basename(file, '.json')));
      const abiVariableName = `${camelCase(path.basename(file, '.json'))}Abi`;
      const viemContractPath = path.join(location, `/contracts/viem/${className}.ts`);

      const content = `
      /* Autogenerated file. Do not edit manually. */
      /* tslint:disable */
      /* eslint-disable */
      import { getContract, GetContractReturnType, PublicClient } from 'viem';
      
      export const ${abiVariableName} = ${JSON.stringify(abi, null, 2)} as const;

      export type ${className} = typeof ${abiVariableName};
      export type ${className}Contract = GetContractReturnType<${className}, PublicClient>;

      export class ${className}__factory {
        static connect(address: string, client: PublicClient) {
          return getContract({ address, abi: ${abiVariableName}, publicClient: client });
        }
      }
      `;

      await writeFile(viemContractPath, content);
    }),
  );

  const indexContent = `
  /* Autogenerated file. Do not edit manually. */
  /* tslint:disable */
  /* eslint-disable */

  ${allFiles
    .map(file => {
      const className = upperFirst(camelCase(path.basename(file, '.json')));
      return `export type { ${className} } from './${className}';`;
    })
    .join('\n')}

  ${allFiles
    .map(file => {
      const className = upperFirst(camelCase(path.basename(file, '.json')));
      return `export { ${className}__factory } from './${className}';`;
    })
    .join('\n')}
  `;

  await writeFile(path.join(location, `/contracts/viem/index.ts`), indexContent);
};
