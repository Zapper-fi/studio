/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface LlamapayStreamInterface extends utils.Interface {
  functions: {
    'DECIMALS_DIVISOR()': FunctionFragment;
    'balances(address)': FunctionFragment;
    'batch(bytes[],bool)': FunctionFragment;
    'cancelStream(address,uint216)': FunctionFragment;
    'createStream(address,uint216)': FunctionFragment;
    'createStreamWithReason(address,uint216,string)': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'depositAndCreate(uint256,address,uint216)': FunctionFragment;
    'depositAndCreateWithReason(uint256,address,uint216,string)': FunctionFragment;
    'getPayerBalance(address)': FunctionFragment;
    'getStreamId(address,address,uint216)': FunctionFragment;
    'modifyStream(address,uint216,address,uint216)': FunctionFragment;
    'pauseStream(address,uint216)': FunctionFragment;
    'payers(address)': FunctionFragment;
    'permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'streamToStart(bytes32)': FunctionFragment;
    'token()': FunctionFragment;
    'withdraw(address,address,uint216)': FunctionFragment;
    'withdrawPayer(uint256)': FunctionFragment;
    'withdrawPayerAll()': FunctionFragment;
    'withdrawable(address,address,uint216)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DECIMALS_DIVISOR'
      | 'balances'
      | 'batch'
      | 'cancelStream'
      | 'createStream'
      | 'createStreamWithReason'
      | 'deposit'
      | 'depositAndCreate'
      | 'depositAndCreateWithReason'
      | 'getPayerBalance'
      | 'getStreamId'
      | 'modifyStream'
      | 'pauseStream'
      | 'payers'
      | 'permitToken'
      | 'streamToStart'
      | 'token'
      | 'withdraw'
      | 'withdrawPayer'
      | 'withdrawPayerAll'
      | 'withdrawable',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DECIMALS_DIVISOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balances', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'batch', values: [PromiseOrValue<BytesLike>[], PromiseOrValue<boolean>]): string;
  encodeFunctionData(
    functionFragment: 'cancelStream',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'createStream',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'createStreamWithReason',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'deposit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'depositAndCreate',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositAndCreateWithReason',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'getPayerBalance', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getStreamId',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'modifyStream',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'pauseStream',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'payers', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'permitToken',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'streamToStart', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'withdrawPayer', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'withdrawPayerAll', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdrawable',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'DECIMALS_DIVISOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'batch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancelStream', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createStream', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createStreamWithReason', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositAndCreate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositAndCreateWithReason', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPayerBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStreamId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'modifyStream', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pauseStream', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'payers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'permitToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'streamToStart', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawPayer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawPayerAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawable', data: BytesLike): Result;

  events: {
    'PayerDeposit(address,uint256)': EventFragment;
    'PayerWithdraw(address,uint256)': EventFragment;
    'StreamCancelled(address,address,uint216,bytes32)': EventFragment;
    'StreamCreated(address,address,uint216,bytes32)': EventFragment;
    'StreamCreatedWithReason(address,address,uint216,bytes32,string)': EventFragment;
    'StreamModified(address,address,uint216,bytes32,address,uint216,bytes32)': EventFragment;
    'StreamPaused(address,address,uint216,bytes32)': EventFragment;
    'Withdraw(address,address,uint216,bytes32,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'PayerDeposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PayerWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StreamCancelled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StreamCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StreamCreatedWithReason'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StreamModified'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StreamPaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface PayerDepositEventObject {
  from: string;
  amount: BigNumber;
}
export type PayerDepositEvent = TypedEvent<[string, BigNumber], PayerDepositEventObject>;

export type PayerDepositEventFilter = TypedEventFilter<PayerDepositEvent>;

export interface PayerWithdrawEventObject {
  from: string;
  amount: BigNumber;
}
export type PayerWithdrawEvent = TypedEvent<[string, BigNumber], PayerWithdrawEventObject>;

export type PayerWithdrawEventFilter = TypedEventFilter<PayerWithdrawEvent>;

export interface StreamCancelledEventObject {
  from: string;
  to: string;
  amountPerSec: BigNumber;
  streamId: string;
}
export type StreamCancelledEvent = TypedEvent<[string, string, BigNumber, string], StreamCancelledEventObject>;

export type StreamCancelledEventFilter = TypedEventFilter<StreamCancelledEvent>;

export interface StreamCreatedEventObject {
  from: string;
  to: string;
  amountPerSec: BigNumber;
  streamId: string;
}
export type StreamCreatedEvent = TypedEvent<[string, string, BigNumber, string], StreamCreatedEventObject>;

export type StreamCreatedEventFilter = TypedEventFilter<StreamCreatedEvent>;

export interface StreamCreatedWithReasonEventObject {
  from: string;
  to: string;
  amountPerSec: BigNumber;
  streamId: string;
  reason: string;
}
export type StreamCreatedWithReasonEvent = TypedEvent<
  [string, string, BigNumber, string, string],
  StreamCreatedWithReasonEventObject
>;

export type StreamCreatedWithReasonEventFilter = TypedEventFilter<StreamCreatedWithReasonEvent>;

export interface StreamModifiedEventObject {
  from: string;
  oldTo: string;
  oldAmountPerSec: BigNumber;
  oldStreamId: string;
  to: string;
  amountPerSec: BigNumber;
  newStreamId: string;
}
export type StreamModifiedEvent = TypedEvent<
  [string, string, BigNumber, string, string, BigNumber, string],
  StreamModifiedEventObject
>;

export type StreamModifiedEventFilter = TypedEventFilter<StreamModifiedEvent>;

export interface StreamPausedEventObject {
  from: string;
  to: string;
  amountPerSec: BigNumber;
  streamId: string;
}
export type StreamPausedEvent = TypedEvent<[string, string, BigNumber, string], StreamPausedEventObject>;

export type StreamPausedEventFilter = TypedEventFilter<StreamPausedEvent>;

export interface WithdrawEventObject {
  from: string;
  to: string;
  amountPerSec: BigNumber;
  streamId: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, string, BigNumber, string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface LlamapayStream extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LlamapayStreamInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DECIMALS_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    balances(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    batch(
      calls: PromiseOrValue<BytesLike>[],
      revertOnFail: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    cancelStream(
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createStream(
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createStreamWithReason(
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositAndCreate(
      amountToDeposit: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositAndCreateWithReason(
      amountToDeposit: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getPayerBalance(payerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getStreamId(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    modifyStream(
      oldTo: PromiseOrValue<string>,
      oldAmountPerSec: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    pauseStream(
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    payers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [number, BigNumber] & {
        lastPayerUpdate: number;
        totalPaidPerSec: BigNumber;
      }
    >;

    permitToken(
      token: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    streamToStart(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawPayer(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawPayerAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    withdrawable(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        withdrawableAmount: BigNumber;
        lastUpdate: BigNumber;
        owed: BigNumber;
      }
    >;
  };

  DECIMALS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  balances(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  batch(
    calls: PromiseOrValue<BytesLike>[],
    revertOnFail: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  cancelStream(
    to: PromiseOrValue<string>,
    amountPerSec: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createStream(
    to: PromiseOrValue<string>,
    amountPerSec: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createStreamWithReason(
    to: PromiseOrValue<string>,
    amountPerSec: PromiseOrValue<BigNumberish>,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositAndCreate(
    amountToDeposit: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    amountPerSec: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositAndCreateWithReason(
    amountToDeposit: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    amountPerSec: PromiseOrValue<BigNumberish>,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getPayerBalance(payerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getStreamId(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amountPerSec: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  modifyStream(
    oldTo: PromiseOrValue<string>,
    oldAmountPerSec: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    amountPerSec: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  pauseStream(
    to: PromiseOrValue<string>,
    amountPerSec: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  payers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [number, BigNumber] & {
      lastPayerUpdate: number;
      totalPaidPerSec: BigNumber;
    }
  >;

  permitToken(
    token: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  streamToStart(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  withdraw(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amountPerSec: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawPayer(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawPayerAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  withdrawable(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amountPerSec: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      withdrawableAmount: BigNumber;
      lastUpdate: BigNumber;
      owed: BigNumber;
    }
  >;

  callStatic: {
    DECIMALS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    balances(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    batch(
      calls: PromiseOrValue<BytesLike>[],
      revertOnFail: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    cancelStream(
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    createStream(
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    createStreamWithReason(
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    deposit(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    depositAndCreate(
      amountToDeposit: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositAndCreateWithReason(
      amountToDeposit: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getPayerBalance(payerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getStreamId(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    modifyStream(
      oldTo: PromiseOrValue<string>,
      oldAmountPerSec: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    pauseStream(
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    payers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [number, BigNumber] & {
        lastPayerUpdate: number;
        totalPaidPerSec: BigNumber;
      }
    >;

    permitToken(
      token: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    streamToStart(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    withdraw(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawPayer(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    withdrawPayerAll(overrides?: CallOverrides): Promise<void>;

    withdrawable(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        withdrawableAmount: BigNumber;
        lastUpdate: BigNumber;
        owed: BigNumber;
      }
    >;
  };

  filters: {
    'PayerDeposit(address,uint256)'(from?: PromiseOrValue<string> | null, amount?: null): PayerDepositEventFilter;
    PayerDeposit(from?: PromiseOrValue<string> | null, amount?: null): PayerDepositEventFilter;

    'PayerWithdraw(address,uint256)'(from?: PromiseOrValue<string> | null, amount?: null): PayerWithdrawEventFilter;
    PayerWithdraw(from?: PromiseOrValue<string> | null, amount?: null): PayerWithdrawEventFilter;

    'StreamCancelled(address,address,uint216,bytes32)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amountPerSec?: null,
      streamId?: null,
    ): StreamCancelledEventFilter;
    StreamCancelled(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amountPerSec?: null,
      streamId?: null,
    ): StreamCancelledEventFilter;

    'StreamCreated(address,address,uint216,bytes32)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amountPerSec?: null,
      streamId?: null,
    ): StreamCreatedEventFilter;
    StreamCreated(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amountPerSec?: null,
      streamId?: null,
    ): StreamCreatedEventFilter;

    'StreamCreatedWithReason(address,address,uint216,bytes32,string)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amountPerSec?: null,
      streamId?: null,
      reason?: null,
    ): StreamCreatedWithReasonEventFilter;
    StreamCreatedWithReason(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amountPerSec?: null,
      streamId?: null,
      reason?: null,
    ): StreamCreatedWithReasonEventFilter;

    'StreamModified(address,address,uint216,bytes32,address,uint216,bytes32)'(
      from?: PromiseOrValue<string> | null,
      oldTo?: PromiseOrValue<string> | null,
      oldAmountPerSec?: null,
      oldStreamId?: null,
      to?: PromiseOrValue<string> | null,
      amountPerSec?: null,
      newStreamId?: null,
    ): StreamModifiedEventFilter;
    StreamModified(
      from?: PromiseOrValue<string> | null,
      oldTo?: PromiseOrValue<string> | null,
      oldAmountPerSec?: null,
      oldStreamId?: null,
      to?: PromiseOrValue<string> | null,
      amountPerSec?: null,
      newStreamId?: null,
    ): StreamModifiedEventFilter;

    'StreamPaused(address,address,uint216,bytes32)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amountPerSec?: null,
      streamId?: null,
    ): StreamPausedEventFilter;
    StreamPaused(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amountPerSec?: null,
      streamId?: null,
    ): StreamPausedEventFilter;

    'Withdraw(address,address,uint216,bytes32,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amountPerSec?: null,
      streamId?: null,
      amount?: null,
    ): WithdrawEventFilter;
    Withdraw(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amountPerSec?: null,
      streamId?: null,
      amount?: null,
    ): WithdrawEventFilter;
  };

  estimateGas: {
    DECIMALS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    balances(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    batch(
      calls: PromiseOrValue<BytesLike>[],
      revertOnFail: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    cancelStream(
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createStream(
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createStreamWithReason(
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositAndCreate(
      amountToDeposit: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositAndCreateWithReason(
      amountToDeposit: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getPayerBalance(payerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getStreamId(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    modifyStream(
      oldTo: PromiseOrValue<string>,
      oldAmountPerSec: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    pauseStream(
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    payers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    permitToken(
      token: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    streamToStart(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawPayer(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawPayerAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    withdrawable(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DECIMALS_DIVISOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balances(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batch(
      calls: PromiseOrValue<BytesLike>[],
      revertOnFail: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    cancelStream(
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createStream(
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createStreamWithReason(
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositAndCreate(
      amountToDeposit: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositAndCreateWithReason(
      amountToDeposit: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getPayerBalance(payerAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStreamId(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    modifyStream(
      oldTo: PromiseOrValue<string>,
      oldAmountPerSec: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    pauseStream(
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    payers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permitToken(
      token: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    streamToStart(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawPayer(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawPayerAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    withdrawable(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amountPerSec: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
