/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface LlamapayFactoryInterface extends utils.Interface {
  functions: {
    'createLlamaPayContract(address)': FunctionFragment;
    'getLlamaPayContractByIndex(uint256)': FunctionFragment;
    'getLlamaPayContractByToken(address)': FunctionFragment;
    'getLlamaPayContractCount()': FunctionFragment;
    'parameter()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'createLlamaPayContract'
      | 'getLlamaPayContractByIndex'
      | 'getLlamaPayContractByToken'
      | 'getLlamaPayContractCount'
      | 'parameter',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'createLlamaPayContract', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getLlamaPayContractByIndex', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getLlamaPayContractByToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getLlamaPayContractCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'parameter', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'createLlamaPayContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLlamaPayContractByIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLlamaPayContractByToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLlamaPayContractCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'parameter', data: BytesLike): Result;

  events: {
    'LlamaPayCreated(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'LlamaPayCreated'): EventFragment;
}

export interface LlamaPayCreatedEventObject {
  token: string;
  llamaPay: string;
}
export type LlamaPayCreatedEvent = TypedEvent<[string, string], LlamaPayCreatedEventObject>;

export type LlamaPayCreatedEventFilter = TypedEventFilter<LlamaPayCreatedEvent>;

export interface LlamapayFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LlamapayFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createLlamaPayContract(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getLlamaPayContractByIndex(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    getLlamaPayContractByToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string, boolean] & { predictedAddress: string; isDeployed: boolean }>;

    getLlamaPayContractCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    parameter(overrides?: CallOverrides): Promise<[string]>;
  };

  createLlamaPayContract(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getLlamaPayContractByIndex(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  getLlamaPayContractByToken(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[string, boolean] & { predictedAddress: string; isDeployed: boolean }>;

  getLlamaPayContractCount(overrides?: CallOverrides): Promise<BigNumber>;

  parameter(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createLlamaPayContract(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    getLlamaPayContractByIndex(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    getLlamaPayContractByToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string, boolean] & { predictedAddress: string; isDeployed: boolean }>;

    getLlamaPayContractCount(overrides?: CallOverrides): Promise<BigNumber>;

    parameter(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'LlamaPayCreated(address,address)'(token?: null, llamaPay?: null): LlamaPayCreatedEventFilter;
    LlamaPayCreated(token?: null, llamaPay?: null): LlamaPayCreatedEventFilter;
  };

  estimateGas: {
    createLlamaPayContract(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getLlamaPayContractByIndex(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getLlamaPayContractByToken(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getLlamaPayContractCount(overrides?: CallOverrides): Promise<BigNumber>;

    parameter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createLlamaPayContract(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getLlamaPayContractByIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLlamaPayContractByToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLlamaPayContractCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parameter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
