/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface StargateAaInterface extends utils.Interface {
  functions: {
    'FIRST_AUCTION_DURATION()': FunctionFragment;
    'SECOND_AUCTION_DURATION()': FunctionFragment;
    'STARGATE_FOR_AUCTION()': FunctionFragment;
    'USD_AUCTION_CAP()': FunctionFragment;
    'VEST_DURATION()': FunctionFragment;
    'addAuctionAddresses(address[])': FunctionFragment;
    'addBondAddresses(address[])': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'astgDecimals()': FunctionFragment;
    'astgWhitelist(address)': FunctionFragment;
    'astgWhitelistMaxAlloc()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'bondingWhitelist(address)': FunctionFragment;
    'bondingWhitelistMaxAlloc()': FunctionFragment;
    'capStgAuctionAmount()': FunctionFragment;
    'countOfMaxAuction()': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'enterFirstAuction(uint256)': FunctionFragment;
    'enterSecondAuction(uint256)': FunctionFragment;
    'firstAuctionEndTime()': FunctionFragment;
    'firstAuctionStartTime()': FunctionFragment;
    'getFirstAuctionCapAmount(address)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'owner()': FunctionFragment;
    'ownerWithdrawn()': FunctionFragment;
    'redeem()': FunctionFragment;
    'redeemable(address)': FunctionFragment;
    'redeemedShares(address)': FunctionFragment;
    'remainingUsdQuota()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'secondAuctionAdditionalAllocCap()': FunctionFragment;
    'secondAuctionAllocCap()': FunctionFragment;
    'secondAuctionEndTime()': FunctionFragment;
    'secondAuctionInit()': FunctionFragment;
    'stableCoin()': FunctionFragment;
    'stargateToken()': FunctionFragment;
    'stargateTreasury()': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'vestStartTime()': FunctionFragment;
    'withdrawRemainingStargate(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'FIRST_AUCTION_DURATION'
      | 'SECOND_AUCTION_DURATION'
      | 'STARGATE_FOR_AUCTION'
      | 'USD_AUCTION_CAP'
      | 'VEST_DURATION'
      | 'addAuctionAddresses'
      | 'addBondAddresses'
      | 'allowance'
      | 'approve'
      | 'astgDecimals'
      | 'astgWhitelist'
      | 'astgWhitelistMaxAlloc'
      | 'balanceOf'
      | 'bondingWhitelist'
      | 'bondingWhitelistMaxAlloc'
      | 'capStgAuctionAmount'
      | 'countOfMaxAuction'
      | 'decimals'
      | 'decreaseAllowance'
      | 'enterFirstAuction'
      | 'enterSecondAuction'
      | 'firstAuctionEndTime'
      | 'firstAuctionStartTime'
      | 'getFirstAuctionCapAmount'
      | 'increaseAllowance'
      | 'name'
      | 'owner'
      | 'ownerWithdrawn'
      | 'redeem'
      | 'redeemable'
      | 'redeemedShares'
      | 'remainingUsdQuota'
      | 'renounceOwnership'
      | 'secondAuctionAdditionalAllocCap'
      | 'secondAuctionAllocCap'
      | 'secondAuctionEndTime'
      | 'secondAuctionInit'
      | 'stableCoin'
      | 'stargateToken'
      | 'stargateTreasury'
      | 'symbol'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'vestStartTime'
      | 'withdrawRemainingStargate',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'FIRST_AUCTION_DURATION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SECOND_AUCTION_DURATION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'STARGATE_FOR_AUCTION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'USD_AUCTION_CAP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'VEST_DURATION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addAuctionAddresses', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'addBondAddresses', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'astgDecimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'astgWhitelist', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'astgWhitelistMaxAlloc', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'bondingWhitelist', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'bondingWhitelistMaxAlloc', values?: undefined): string;
  encodeFunctionData(functionFragment: 'capStgAuctionAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'countOfMaxAuction', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'enterFirstAuction', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'enterSecondAuction', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'firstAuctionEndTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'firstAuctionStartTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getFirstAuctionCapAmount', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ownerWithdrawn', values?: undefined): string;
  encodeFunctionData(functionFragment: 'redeem', values?: undefined): string;
  encodeFunctionData(functionFragment: 'redeemable', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'redeemedShares', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'remainingUsdQuota', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'secondAuctionAdditionalAllocCap', values?: undefined): string;
  encodeFunctionData(functionFragment: 'secondAuctionAllocCap', values?: undefined): string;
  encodeFunctionData(functionFragment: 'secondAuctionEndTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'secondAuctionInit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stableCoin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stargateToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stargateTreasury', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'vestStartTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawRemainingStargate', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'FIRST_AUCTION_DURATION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SECOND_AUCTION_DURATION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'STARGATE_FOR_AUCTION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'USD_AUCTION_CAP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'VEST_DURATION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addAuctionAddresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addBondAddresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'astgDecimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'astgWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'astgWhitelistMaxAlloc', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bondingWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bondingWhitelistMaxAlloc', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'capStgAuctionAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'countOfMaxAuction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enterFirstAuction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enterSecondAuction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'firstAuctionEndTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'firstAuctionStartTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFirstAuctionCapAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerWithdrawn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemedShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'remainingUsdQuota', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'secondAuctionAdditionalAllocCap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'secondAuctionAllocCap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'secondAuctionEndTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'secondAuctionInit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stableCoin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stargateToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stargateTreasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vestStartTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawRemainingStargate', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'FinalWithdrawal(address,uint256,uint256)': EventFragment;
    'FirstAuctioned(address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Redeemed(address,uint256,uint256)': EventFragment;
    'SecondAuctioned(address,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FinalWithdrawal'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FirstAuctioned'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Redeemed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SecondAuctioned'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface FinalWithdrawalEventObject {
  _to: string;
  _remainingUSD: BigNumber;
  _remainingSTG: BigNumber;
}
export type FinalWithdrawalEvent = TypedEvent<[string, BigNumber, BigNumber], FinalWithdrawalEventObject>;

export type FinalWithdrawalEventFilter = TypedEventFilter<FinalWithdrawalEvent>;

export interface FirstAuctionedEventObject {
  _sender: string;
  _astgAmount: BigNumber;
}
export type FirstAuctionedEvent = TypedEvent<[string, BigNumber], FirstAuctionedEventObject>;

export type FirstAuctionedEventFilter = TypedEventFilter<FirstAuctionedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RedeemedEventObject {
  _sender: string;
  _astgAmount: BigNumber;
  _stgAmount: BigNumber;
}
export type RedeemedEvent = TypedEvent<[string, BigNumber, BigNumber], RedeemedEventObject>;

export type RedeemedEventFilter = TypedEventFilter<RedeemedEvent>;

export interface SecondAuctionedEventObject {
  _sender: string;
  _astgAmount: BigNumber;
}
export type SecondAuctionedEvent = TypedEvent<[string, BigNumber], SecondAuctionedEventObject>;

export type SecondAuctionedEventFilter = TypedEventFilter<SecondAuctionedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface StargateAa extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StargateAaInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FIRST_AUCTION_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    SECOND_AUCTION_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    STARGATE_FOR_AUCTION(overrides?: CallOverrides): Promise<[BigNumber]>;

    USD_AUCTION_CAP(overrides?: CallOverrides): Promise<[BigNumber]>;

    VEST_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    addAuctionAddresses(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addBondAddresses(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    astgDecimals(overrides?: CallOverrides): Promise<[number]>;

    astgWhitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    astgWhitelistMaxAlloc(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    bondingWhitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    bondingWhitelistMaxAlloc(overrides?: CallOverrides): Promise<[BigNumber]>;

    capStgAuctionAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    countOfMaxAuction(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    enterFirstAuction(
      _requestAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    enterSecondAuction(
      _requestAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    firstAuctionEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    firstAuctionStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFirstAuctionCapAmount(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerWithdrawn(overrides?: CallOverrides): Promise<[boolean]>;

    redeem(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    redeemable(_redeemer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    redeemedShares(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    remainingUsdQuota(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    secondAuctionAdditionalAllocCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    secondAuctionAllocCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    secondAuctionEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    secondAuctionInit(overrides?: CallOverrides): Promise<[boolean]>;

    stableCoin(overrides?: CallOverrides): Promise<[string]>;

    stargateToken(overrides?: CallOverrides): Promise<[string]>;

    stargateTreasury(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    vestStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawRemainingStargate(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  FIRST_AUCTION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  SECOND_AUCTION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  STARGATE_FOR_AUCTION(overrides?: CallOverrides): Promise<BigNumber>;

  USD_AUCTION_CAP(overrides?: CallOverrides): Promise<BigNumber>;

  VEST_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  addAuctionAddresses(
    addresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addBondAddresses(
    addresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  astgDecimals(overrides?: CallOverrides): Promise<number>;

  astgWhitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  astgWhitelistMaxAlloc(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  bondingWhitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  bondingWhitelistMaxAlloc(overrides?: CallOverrides): Promise<BigNumber>;

  capStgAuctionAmount(overrides?: CallOverrides): Promise<BigNumber>;

  countOfMaxAuction(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  enterFirstAuction(
    _requestAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  enterSecondAuction(
    _requestAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  firstAuctionEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  firstAuctionStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  getFirstAuctionCapAmount(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerWithdrawn(overrides?: CallOverrides): Promise<boolean>;

  redeem(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  redeemable(_redeemer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  redeemedShares(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  remainingUsdQuota(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  secondAuctionAdditionalAllocCap(overrides?: CallOverrides): Promise<BigNumber>;

  secondAuctionAllocCap(overrides?: CallOverrides): Promise<BigNumber>;

  secondAuctionEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  secondAuctionInit(overrides?: CallOverrides): Promise<boolean>;

  stableCoin(overrides?: CallOverrides): Promise<string>;

  stargateToken(overrides?: CallOverrides): Promise<string>;

  stargateTreasury(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  vestStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawRemainingStargate(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    FIRST_AUCTION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    SECOND_AUCTION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    STARGATE_FOR_AUCTION(overrides?: CallOverrides): Promise<BigNumber>;

    USD_AUCTION_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    VEST_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    addAuctionAddresses(addresses: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    addBondAddresses(addresses: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    astgDecimals(overrides?: CallOverrides): Promise<number>;

    astgWhitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    astgWhitelistMaxAlloc(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    bondingWhitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    bondingWhitelistMaxAlloc(overrides?: CallOverrides): Promise<BigNumber>;

    capStgAuctionAmount(overrides?: CallOverrides): Promise<BigNumber>;

    countOfMaxAuction(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    enterFirstAuction(_requestAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    enterSecondAuction(_requestAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    firstAuctionEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    firstAuctionStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    getFirstAuctionCapAmount(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerWithdrawn(overrides?: CallOverrides): Promise<boolean>;

    redeem(overrides?: CallOverrides): Promise<void>;

    redeemable(_redeemer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    redeemedShares(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    remainingUsdQuota(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    secondAuctionAdditionalAllocCap(overrides?: CallOverrides): Promise<BigNumber>;

    secondAuctionAllocCap(overrides?: CallOverrides): Promise<BigNumber>;

    secondAuctionEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    secondAuctionInit(overrides?: CallOverrides): Promise<boolean>;

    stableCoin(overrides?: CallOverrides): Promise<string>;

    stargateToken(overrides?: CallOverrides): Promise<string>;

    stargateTreasury(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    vestStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawRemainingStargate(_to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'FinalWithdrawal(address,uint256,uint256)'(
      _to?: null,
      _remainingUSD?: null,
      _remainingSTG?: null,
    ): FinalWithdrawalEventFilter;
    FinalWithdrawal(_to?: null, _remainingUSD?: null, _remainingSTG?: null): FinalWithdrawalEventFilter;

    'FirstAuctioned(address,uint256)'(_sender?: null, _astgAmount?: null): FirstAuctionedEventFilter;
    FirstAuctioned(_sender?: null, _astgAmount?: null): FirstAuctionedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'Redeemed(address,uint256,uint256)'(_sender?: null, _astgAmount?: null, _stgAmount?: null): RedeemedEventFilter;
    Redeemed(_sender?: null, _astgAmount?: null, _stgAmount?: null): RedeemedEventFilter;

    'SecondAuctioned(address,uint256)'(_sender?: null, _astgAmount?: null): SecondAuctionedEventFilter;
    SecondAuctioned(_sender?: null, _astgAmount?: null): SecondAuctionedEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
  };

  estimateGas: {
    FIRST_AUCTION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    SECOND_AUCTION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    STARGATE_FOR_AUCTION(overrides?: CallOverrides): Promise<BigNumber>;

    USD_AUCTION_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    VEST_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    addAuctionAddresses(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addBondAddresses(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    astgDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    astgWhitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    astgWhitelistMaxAlloc(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    bondingWhitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    bondingWhitelistMaxAlloc(overrides?: CallOverrides): Promise<BigNumber>;

    capStgAuctionAmount(overrides?: CallOverrides): Promise<BigNumber>;

    countOfMaxAuction(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    enterFirstAuction(
      _requestAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    enterSecondAuction(
      _requestAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    firstAuctionEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    firstAuctionStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    getFirstAuctionCapAmount(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerWithdrawn(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    redeemable(_redeemer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    redeemedShares(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    remainingUsdQuota(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    secondAuctionAdditionalAllocCap(overrides?: CallOverrides): Promise<BigNumber>;

    secondAuctionAllocCap(overrides?: CallOverrides): Promise<BigNumber>;

    secondAuctionEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    secondAuctionInit(overrides?: CallOverrides): Promise<BigNumber>;

    stableCoin(overrides?: CallOverrides): Promise<BigNumber>;

    stargateToken(overrides?: CallOverrides): Promise<BigNumber>;

    stargateTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    vestStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawRemainingStargate(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FIRST_AUCTION_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SECOND_AUCTION_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STARGATE_FOR_AUCTION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USD_AUCTION_CAP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VEST_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAuctionAddresses(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addBondAddresses(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    astgDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    astgWhitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    astgWhitelistMaxAlloc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondingWhitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondingWhitelistMaxAlloc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    capStgAuctionAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    countOfMaxAuction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    enterFirstAuction(
      _requestAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    enterSecondAuction(
      _requestAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    firstAuctionEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstAuctionStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFirstAuctionCapAmount(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerWithdrawn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    redeemable(_redeemer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemedShares(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remainingUsdQuota(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    secondAuctionAdditionalAllocCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    secondAuctionAllocCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    secondAuctionEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    secondAuctionInit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stableCoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stargateToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stargateTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    vestStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawRemainingStargate(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
