/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace Pool {
  export type CreditObjStruct = {
    credits: PromiseOrValue<BigNumberish>;
    idealBalance: PromiseOrValue<BigNumberish>;
  };

  export type CreditObjStructOutput = [BigNumber, BigNumber] & {
    credits: BigNumber;
    idealBalance: BigNumber;
  };

  export type ChainPathStruct = {
    ready: PromiseOrValue<boolean>;
    dstChainId: PromiseOrValue<BigNumberish>;
    dstPoolId: PromiseOrValue<BigNumberish>;
    weight: PromiseOrValue<BigNumberish>;
    balance: PromiseOrValue<BigNumberish>;
    lkb: PromiseOrValue<BigNumberish>;
    credits: PromiseOrValue<BigNumberish>;
    idealBalance: PromiseOrValue<BigNumberish>;
  };

  export type ChainPathStructOutput = [
    boolean,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    ready: boolean;
    dstChainId: number;
    dstPoolId: BigNumber;
    weight: BigNumber;
    balance: BigNumber;
    lkb: BigNumber;
    credits: BigNumber;
    idealBalance: BigNumber;
  };

  export type SwapObjStruct = {
    amount: PromiseOrValue<BigNumberish>;
    eqFee: PromiseOrValue<BigNumberish>;
    eqReward: PromiseOrValue<BigNumberish>;
    lpFee: PromiseOrValue<BigNumberish>;
    protocolFee: PromiseOrValue<BigNumberish>;
    lkbRemove: PromiseOrValue<BigNumberish>;
  };

  export type SwapObjStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    amount: BigNumber;
    eqFee: BigNumber;
    eqReward: BigNumber;
    lpFee: BigNumber;
    protocolFee: BigNumber;
    lkbRemove: BigNumber;
  };
}

export interface StargatePoolInterface extends utils.Interface {
  functions: {
    'BP_DENOMINATOR()': FunctionFragment;
    'DOMAIN_SEPARATOR()': FunctionFragment;
    'PERMIT_TYPEHASH()': FunctionFragment;
    'activateChainPath(uint16,uint256)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'amountLPtoLD(uint256)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'batched()': FunctionFragment;
    'callDelta(bool)': FunctionFragment;
    'chainPathIndexLookup(uint16,uint256)': FunctionFragment;
    'chainPaths(uint256)': FunctionFragment;
    'convertRate()': FunctionFragment;
    'createChainPath(uint16,uint256,uint256)': FunctionFragment;
    'creditChainPath(uint16,uint256,(uint256,uint256))': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'defaultLPMode()': FunctionFragment;
    'defaultSwapMode()': FunctionFragment;
    'deltaCredit()': FunctionFragment;
    'eqFeePool()': FunctionFragment;
    'feeLibrary()': FunctionFragment;
    'getChainPath(uint16,uint256)': FunctionFragment;
    'getChainPathsLength()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'instantRedeemLocal(address,uint256,address)': FunctionFragment;
    'localDecimals()': FunctionFragment;
    'lpDeltaBP()': FunctionFragment;
    'mint(address,uint256)': FunctionFragment;
    'mintFeeBP()': FunctionFragment;
    'mintFeeBalance()': FunctionFragment;
    'name()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'poolId()': FunctionFragment;
    'protocolFeeBalance()': FunctionFragment;
    'redeemLocal(address,uint256,uint16,uint256,bytes)': FunctionFragment;
    'redeemLocalCallback(uint16,uint256,address,uint256,uint256)': FunctionFragment;
    'redeemLocalCheckOnRemote(uint16,uint256,uint256)': FunctionFragment;
    'redeemRemote(uint16,uint256,address,uint256)': FunctionFragment;
    'router()': FunctionFragment;
    'sendCredits(uint16,uint256)': FunctionFragment;
    'setDeltaParam(bool,uint256,uint256,bool,bool)': FunctionFragment;
    'setFee(uint256)': FunctionFragment;
    'setFeeLibrary(address)': FunctionFragment;
    'setSwapStop(bool)': FunctionFragment;
    'setWeightForChainPath(uint16,uint256,uint16)': FunctionFragment;
    'sharedDecimals()': FunctionFragment;
    'stopSwap()': FunctionFragment;
    'swap(uint16,uint256,address,uint256,uint256,bool)': FunctionFragment;
    'swapDeltaBP()': FunctionFragment;
    'swapRemote(uint16,uint256,address,(uint256,uint256,uint256,uint256,uint256,uint256))': FunctionFragment;
    'symbol()': FunctionFragment;
    'token()': FunctionFragment;
    'totalLiquidity()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'totalWeight()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'withdrawMintFeeBalance(address)': FunctionFragment;
    'withdrawProtocolFeeBalance(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BP_DENOMINATOR'
      | 'DOMAIN_SEPARATOR'
      | 'PERMIT_TYPEHASH'
      | 'activateChainPath'
      | 'allowance'
      | 'amountLPtoLD'
      | 'approve'
      | 'balanceOf'
      | 'batched'
      | 'callDelta'
      | 'chainPathIndexLookup'
      | 'chainPaths'
      | 'convertRate'
      | 'createChainPath'
      | 'creditChainPath'
      | 'decimals'
      | 'decreaseAllowance'
      | 'defaultLPMode'
      | 'defaultSwapMode'
      | 'deltaCredit'
      | 'eqFeePool'
      | 'feeLibrary'
      | 'getChainPath'
      | 'getChainPathsLength'
      | 'increaseAllowance'
      | 'instantRedeemLocal'
      | 'localDecimals'
      | 'lpDeltaBP'
      | 'mint'
      | 'mintFeeBP'
      | 'mintFeeBalance'
      | 'name'
      | 'nonces'
      | 'permit'
      | 'poolId'
      | 'protocolFeeBalance'
      | 'redeemLocal'
      | 'redeemLocalCallback'
      | 'redeemLocalCheckOnRemote'
      | 'redeemRemote'
      | 'router'
      | 'sendCredits'
      | 'setDeltaParam'
      | 'setFee'
      | 'setFeeLibrary'
      | 'setSwapStop'
      | 'setWeightForChainPath'
      | 'sharedDecimals'
      | 'stopSwap'
      | 'swap'
      | 'swapDeltaBP'
      | 'swapRemote'
      | 'symbol'
      | 'token'
      | 'totalLiquidity'
      | 'totalSupply'
      | 'totalWeight'
      | 'transfer'
      | 'transferFrom'
      | 'withdrawMintFeeBalance'
      | 'withdrawProtocolFeeBalance',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BP_DENOMINATOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PERMIT_TYPEHASH', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'activateChainPath',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'amountLPtoLD', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'batched', values?: undefined): string;
  encodeFunctionData(functionFragment: 'callDelta', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(
    functionFragment: 'chainPathIndexLookup',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'chainPaths', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'convertRate', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'createChainPath',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'creditChainPath',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, Pool.CreditObjStruct],
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'defaultLPMode', values?: undefined): string;
  encodeFunctionData(functionFragment: 'defaultSwapMode', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deltaCredit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'eqFeePool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feeLibrary', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getChainPath',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getChainPathsLength', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'instantRedeemLocal',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'localDecimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lpDeltaBP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mint', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'mintFeeBP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mintFeeBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'permit',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'poolId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'protocolFeeBalance', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'redeemLocal',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'redeemLocalCallback',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'redeemLocalCheckOnRemote',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'redeemRemote',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'router', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'sendCredits',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDeltaParam',
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'setFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setFeeLibrary', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setSwapStop', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(
    functionFragment: 'setWeightForChainPath',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'sharedDecimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stopSwap', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'swap',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'swapDeltaBP', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'swapRemote',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>, Pool.SwapObjStruct],
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalLiquidity', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalWeight', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'withdrawMintFeeBalance', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'withdrawProtocolFeeBalance', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'BP_DENOMINATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PERMIT_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activateChainPath', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'amountLPtoLD', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'batched', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'callDelta', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'chainPathIndexLookup', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'chainPaths', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createChainPath', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'creditChainPath', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'defaultLPMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'defaultSwapMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deltaCredit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'eqFeePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeLibrary', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getChainPath', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getChainPathsLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'instantRedeemLocal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'localDecimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lpDeltaBP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintFeeBP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintFeeBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protocolFeeBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemLocal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemLocalCallback', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemLocalCheckOnRemote', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemRemote', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'router', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sendCredits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDeltaParam', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeLibrary', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSwapStop', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWeightForChainPath', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sharedDecimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stopSwap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapDeltaBP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapRemote', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalWeight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawMintFeeBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawProtocolFeeBalance', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Burn(address,uint256,uint256)': EventFragment;
    'ChainPathUpdate(uint16,uint256,uint256)': EventFragment;
    'CreditChainPath(uint16,uint256,uint256,uint256)': EventFragment;
    'DeltaParamUpdated(bool,uint256,uint256,bool,bool)': EventFragment;
    'FeeLibraryUpdated(address)': EventFragment;
    'FeesUpdated(uint256)': EventFragment;
    'InstantRedeemLocal(address,uint256,uint256,address)': EventFragment;
    'Mint(address,uint256,uint256,uint256)': EventFragment;
    'RedeemLocal(address,uint256,uint256,uint16,uint256,bytes)': EventFragment;
    'RedeemLocalCallback(address,uint256,uint256)': EventFragment;
    'RedeemRemote(uint16,uint256,address,uint256,uint256)': EventFragment;
    'SendCredits(uint16,uint256,uint256,uint256)': EventFragment;
    'StopSwapUpdated(bool)': EventFragment;
    'Swap(uint16,uint256,address,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'SwapRemote(address,uint256,uint256,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'WithdrawMintFeeBalance(address,uint256)': EventFragment;
    'WithdrawProtocolFeeBalance(address,uint256)': EventFragment;
    'WithdrawRemote(uint16,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Burn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ChainPathUpdate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreditChainPath'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DeltaParamUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeLibraryUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeesUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InstantRedeemLocal'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RedeemLocal'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RedeemLocalCallback'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RedeemRemote'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SendCredits'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StopSwapUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Swap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SwapRemote'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawMintFeeBalance'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawProtocolFeeBalance'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawRemote'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BurnEventObject {
  from: string;
  amountLP: BigNumber;
  amountSD: BigNumber;
}
export type BurnEvent = TypedEvent<[string, BigNumber, BigNumber], BurnEventObject>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export interface ChainPathUpdateEventObject {
  dstChainId: number;
  dstPoolId: BigNumber;
  weight: BigNumber;
}
export type ChainPathUpdateEvent = TypedEvent<[number, BigNumber, BigNumber], ChainPathUpdateEventObject>;

export type ChainPathUpdateEventFilter = TypedEventFilter<ChainPathUpdateEvent>;

export interface CreditChainPathEventObject {
  chainId: number;
  srcPoolId: BigNumber;
  amountSD: BigNumber;
  idealBalance: BigNumber;
}
export type CreditChainPathEvent = TypedEvent<[number, BigNumber, BigNumber, BigNumber], CreditChainPathEventObject>;

export type CreditChainPathEventFilter = TypedEventFilter<CreditChainPathEvent>;

export interface DeltaParamUpdatedEventObject {
  batched: boolean;
  swapDeltaBP: BigNumber;
  lpDeltaBP: BigNumber;
  defaultSwapMode: boolean;
  defaultLPMode: boolean;
}
export type DeltaParamUpdatedEvent = TypedEvent<
  [boolean, BigNumber, BigNumber, boolean, boolean],
  DeltaParamUpdatedEventObject
>;

export type DeltaParamUpdatedEventFilter = TypedEventFilter<DeltaParamUpdatedEvent>;

export interface FeeLibraryUpdatedEventObject {
  feeLibraryAddr: string;
}
export type FeeLibraryUpdatedEvent = TypedEvent<[string], FeeLibraryUpdatedEventObject>;

export type FeeLibraryUpdatedEventFilter = TypedEventFilter<FeeLibraryUpdatedEvent>;

export interface FeesUpdatedEventObject {
  mintFeeBP: BigNumber;
}
export type FeesUpdatedEvent = TypedEvent<[BigNumber], FeesUpdatedEventObject>;

export type FeesUpdatedEventFilter = TypedEventFilter<FeesUpdatedEvent>;

export interface InstantRedeemLocalEventObject {
  from: string;
  amountLP: BigNumber;
  amountSD: BigNumber;
  to: string;
}
export type InstantRedeemLocalEvent = TypedEvent<[string, BigNumber, BigNumber, string], InstantRedeemLocalEventObject>;

export type InstantRedeemLocalEventFilter = TypedEventFilter<InstantRedeemLocalEvent>;

export interface MintEventObject {
  to: string;
  amountLP: BigNumber;
  amountSD: BigNumber;
  mintFeeAmountSD: BigNumber;
}
export type MintEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], MintEventObject>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface RedeemLocalEventObject {
  from: string;
  amountLP: BigNumber;
  amountSD: BigNumber;
  chainId: number;
  dstPoolId: BigNumber;
  to: string;
}
export type RedeemLocalEvent = TypedEvent<
  [string, BigNumber, BigNumber, number, BigNumber, string],
  RedeemLocalEventObject
>;

export type RedeemLocalEventFilter = TypedEventFilter<RedeemLocalEvent>;

export interface RedeemLocalCallbackEventObject {
  _to: string;
  _amountSD: BigNumber;
  _amountToMintSD: BigNumber;
}
export type RedeemLocalCallbackEvent = TypedEvent<[string, BigNumber, BigNumber], RedeemLocalCallbackEventObject>;

export type RedeemLocalCallbackEventFilter = TypedEventFilter<RedeemLocalCallbackEvent>;

export interface RedeemRemoteEventObject {
  chainId: number;
  dstPoolId: BigNumber;
  from: string;
  amountLP: BigNumber;
  amountSD: BigNumber;
}
export type RedeemRemoteEvent = TypedEvent<[number, BigNumber, string, BigNumber, BigNumber], RedeemRemoteEventObject>;

export type RedeemRemoteEventFilter = TypedEventFilter<RedeemRemoteEvent>;

export interface SendCreditsEventObject {
  dstChainId: number;
  dstPoolId: BigNumber;
  credits: BigNumber;
  idealBalance: BigNumber;
}
export type SendCreditsEvent = TypedEvent<[number, BigNumber, BigNumber, BigNumber], SendCreditsEventObject>;

export type SendCreditsEventFilter = TypedEventFilter<SendCreditsEvent>;

export interface StopSwapUpdatedEventObject {
  swapStop: boolean;
}
export type StopSwapUpdatedEvent = TypedEvent<[boolean], StopSwapUpdatedEventObject>;

export type StopSwapUpdatedEventFilter = TypedEventFilter<StopSwapUpdatedEvent>;

export interface SwapEventObject {
  chainId: number;
  dstPoolId: BigNumber;
  from: string;
  amountSD: BigNumber;
  eqReward: BigNumber;
  eqFee: BigNumber;
  protocolFee: BigNumber;
  lpFee: BigNumber;
}
export type SwapEvent = TypedEvent<
  [number, BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  SwapEventObject
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface SwapRemoteEventObject {
  to: string;
  amountSD: BigNumber;
  protocolFee: BigNumber;
  dstFee: BigNumber;
}
export type SwapRemoteEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], SwapRemoteEventObject>;

export type SwapRemoteEventFilter = TypedEventFilter<SwapRemoteEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawMintFeeBalanceEventObject {
  to: string;
  amountSD: BigNumber;
}
export type WithdrawMintFeeBalanceEvent = TypedEvent<[string, BigNumber], WithdrawMintFeeBalanceEventObject>;

export type WithdrawMintFeeBalanceEventFilter = TypedEventFilter<WithdrawMintFeeBalanceEvent>;

export interface WithdrawProtocolFeeBalanceEventObject {
  to: string;
  amountSD: BigNumber;
}
export type WithdrawProtocolFeeBalanceEvent = TypedEvent<[string, BigNumber], WithdrawProtocolFeeBalanceEventObject>;

export type WithdrawProtocolFeeBalanceEventFilter = TypedEventFilter<WithdrawProtocolFeeBalanceEvent>;

export interface WithdrawRemoteEventObject {
  srcChainId: number;
  srcPoolId: BigNumber;
  swapAmount: BigNumber;
  mintAmount: BigNumber;
}
export type WithdrawRemoteEvent = TypedEvent<[number, BigNumber, BigNumber, BigNumber], WithdrawRemoteEventObject>;

export type WithdrawRemoteEventFilter = TypedEventFilter<WithdrawRemoteEvent>;

export interface StargatePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StargatePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BP_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    activateChainPath(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    amountLPtoLD(_amountLP: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    batched(overrides?: CallOverrides): Promise<[boolean]>;

    callDelta(
      _fullMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    chainPathIndexLookup(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    chainPaths(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, number, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        ready: boolean;
        dstChainId: number;
        dstPoolId: BigNumber;
        weight: BigNumber;
        balance: BigNumber;
        lkb: BigNumber;
        credits: BigNumber;
        idealBalance: BigNumber;
      }
    >;

    convertRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    createChainPath(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    creditChainPath(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _c: Pool.CreditObjStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    defaultLPMode(overrides?: CallOverrides): Promise<[boolean]>;

    defaultSwapMode(overrides?: CallOverrides): Promise<[boolean]>;

    deltaCredit(overrides?: CallOverrides): Promise<[BigNumber]>;

    eqFeePool(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeLibrary(overrides?: CallOverrides): Promise<[string]>;

    getChainPath(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[Pool.ChainPathStructOutput]>;

    getChainPathsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    instantRedeemLocal(
      _from: PromiseOrValue<string>,
      _amountLP: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    localDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    lpDeltaBP(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      _to: PromiseOrValue<string>,
      _amountLD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mintFeeBP(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintFeeBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    poolId(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolFeeBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeemLocal(
      _from: PromiseOrValue<string>,
      _amountLP: PromiseOrValue<BigNumberish>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    redeemLocalCallback(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _amountSD: PromiseOrValue<BigNumberish>,
      _amountToMintSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    redeemLocalCheckOnRemote(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _amountSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    redeemRemote(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _from: PromiseOrValue<string>,
      _amountLP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    sendCredits(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDeltaParam(
      _batched: PromiseOrValue<boolean>,
      _swapDeltaBP: PromiseOrValue<BigNumberish>,
      _lpDeltaBP: PromiseOrValue<BigNumberish>,
      _defaultSwapMode: PromiseOrValue<boolean>,
      _defaultLPMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFee(
      _mintFeeBP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFeeLibrary(
      _feeLibraryAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSwapStop(
      _swapStop: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setWeightForChainPath(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    sharedDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    stopSwap(overrides?: CallOverrides): Promise<[boolean]>;

    swap(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _from: PromiseOrValue<string>,
      _amountLD: PromiseOrValue<BigNumberish>,
      _minAmountLD: PromiseOrValue<BigNumberish>,
      newLiquidity: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swapDeltaBP(overrides?: CallOverrides): Promise<[BigNumber]>;

    swapRemote(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _s: Pool.SwapObjStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawMintFeeBalance(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawProtocolFeeBalance(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  BP_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  activateChainPath(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _dstPoolId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  allowance(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  amountLPtoLD(_amountLP: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  batched(overrides?: CallOverrides): Promise<boolean>;

  callDelta(
    _fullMode: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  chainPathIndexLookup(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  chainPaths(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [boolean, number, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      ready: boolean;
      dstChainId: number;
      dstPoolId: BigNumber;
      weight: BigNumber;
      balance: BigNumber;
      lkb: BigNumber;
      credits: BigNumber;
      idealBalance: BigNumber;
    }
  >;

  convertRate(overrides?: CallOverrides): Promise<BigNumber>;

  createChainPath(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _dstPoolId: PromiseOrValue<BigNumberish>,
    _weight: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  creditChainPath(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _dstPoolId: PromiseOrValue<BigNumberish>,
    _c: Pool.CreditObjStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  defaultLPMode(overrides?: CallOverrides): Promise<boolean>;

  defaultSwapMode(overrides?: CallOverrides): Promise<boolean>;

  deltaCredit(overrides?: CallOverrides): Promise<BigNumber>;

  eqFeePool(overrides?: CallOverrides): Promise<BigNumber>;

  feeLibrary(overrides?: CallOverrides): Promise<string>;

  getChainPath(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _dstPoolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<Pool.ChainPathStructOutput>;

  getChainPathsLength(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  instantRedeemLocal(
    _from: PromiseOrValue<string>,
    _amountLP: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  localDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  lpDeltaBP(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    _to: PromiseOrValue<string>,
    _amountLD: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mintFeeBP(overrides?: CallOverrides): Promise<BigNumber>;

  mintFeeBalance(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  permit(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  poolId(overrides?: CallOverrides): Promise<BigNumber>;

  protocolFeeBalance(overrides?: CallOverrides): Promise<BigNumber>;

  redeemLocal(
    _from: PromiseOrValue<string>,
    _amountLP: PromiseOrValue<BigNumberish>,
    _dstChainId: PromiseOrValue<BigNumberish>,
    _dstPoolId: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  redeemLocalCallback(
    _srcChainId: PromiseOrValue<BigNumberish>,
    _srcPoolId: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _amountSD: PromiseOrValue<BigNumberish>,
    _amountToMintSD: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  redeemLocalCheckOnRemote(
    _srcChainId: PromiseOrValue<BigNumberish>,
    _srcPoolId: PromiseOrValue<BigNumberish>,
    _amountSD: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  redeemRemote(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _dstPoolId: PromiseOrValue<BigNumberish>,
    _from: PromiseOrValue<string>,
    _amountLP: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  sendCredits(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _dstPoolId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDeltaParam(
    _batched: PromiseOrValue<boolean>,
    _swapDeltaBP: PromiseOrValue<BigNumberish>,
    _lpDeltaBP: PromiseOrValue<BigNumberish>,
    _defaultSwapMode: PromiseOrValue<boolean>,
    _defaultLPMode: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFee(
    _mintFeeBP: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFeeLibrary(
    _feeLibraryAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSwapStop(
    _swapStop: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setWeightForChainPath(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _dstPoolId: PromiseOrValue<BigNumberish>,
    _weight: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  sharedDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  stopSwap(overrides?: CallOverrides): Promise<boolean>;

  swap(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _dstPoolId: PromiseOrValue<BigNumberish>,
    _from: PromiseOrValue<string>,
    _amountLD: PromiseOrValue<BigNumberish>,
    _minAmountLD: PromiseOrValue<BigNumberish>,
    newLiquidity: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swapDeltaBP(overrides?: CallOverrides): Promise<BigNumber>;

  swapRemote(
    _srcChainId: PromiseOrValue<BigNumberish>,
    _srcPoolId: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _s: Pool.SwapObjStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  totalLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawMintFeeBalance(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawProtocolFeeBalance(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    BP_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    activateChainPath(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    amountLPtoLD(_amountLP: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    batched(overrides?: CallOverrides): Promise<boolean>;

    callDelta(_fullMode: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    chainPathIndexLookup(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    chainPaths(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, number, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        ready: boolean;
        dstChainId: number;
        dstPoolId: BigNumber;
        weight: BigNumber;
        balance: BigNumber;
        lkb: BigNumber;
        credits: BigNumber;
        idealBalance: BigNumber;
      }
    >;

    convertRate(overrides?: CallOverrides): Promise<BigNumber>;

    createChainPath(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    creditChainPath(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _c: Pool.CreditObjStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    defaultLPMode(overrides?: CallOverrides): Promise<boolean>;

    defaultSwapMode(overrides?: CallOverrides): Promise<boolean>;

    deltaCredit(overrides?: CallOverrides): Promise<BigNumber>;

    eqFeePool(overrides?: CallOverrides): Promise<BigNumber>;

    feeLibrary(overrides?: CallOverrides): Promise<string>;

    getChainPath(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<Pool.ChainPathStructOutput>;

    getChainPathsLength(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    instantRedeemLocal(
      _from: PromiseOrValue<string>,
      _amountLP: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    localDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    lpDeltaBP(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _to: PromiseOrValue<string>,
      _amountLD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mintFeeBP(overrides?: CallOverrides): Promise<BigNumber>;

    mintFeeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    poolId(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    redeemLocal(
      _from: PromiseOrValue<string>,
      _amountLP: PromiseOrValue<BigNumberish>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    redeemLocalCallback(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _amountSD: PromiseOrValue<BigNumberish>,
      _amountToMintSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    redeemLocalCheckOnRemote(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _amountSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { swapAmount: BigNumber; mintAmount: BigNumber }>;

    redeemRemote(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _from: PromiseOrValue<string>,
      _amountLP: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    sendCredits(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<Pool.CreditObjStructOutput>;

    setDeltaParam(
      _batched: PromiseOrValue<boolean>,
      _swapDeltaBP: PromiseOrValue<BigNumberish>,
      _lpDeltaBP: PromiseOrValue<BigNumberish>,
      _defaultSwapMode: PromiseOrValue<boolean>,
      _defaultLPMode: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setFee(_mintFeeBP: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setFeeLibrary(_feeLibraryAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setSwapStop(_swapStop: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setWeightForChainPath(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    sharedDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    stopSwap(overrides?: CallOverrides): Promise<boolean>;

    swap(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _from: PromiseOrValue<string>,
      _amountLD: PromiseOrValue<BigNumberish>,
      _minAmountLD: PromiseOrValue<BigNumberish>,
      newLiquidity: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<Pool.SwapObjStructOutput>;

    swapDeltaBP(overrides?: CallOverrides): Promise<BigNumber>;

    swapRemote(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _s: Pool.SwapObjStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    totalLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    withdrawMintFeeBalance(_to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    withdrawProtocolFeeBalance(_to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'Burn(address,uint256,uint256)'(from?: null, amountLP?: null, amountSD?: null): BurnEventFilter;
    Burn(from?: null, amountLP?: null, amountSD?: null): BurnEventFilter;

    'ChainPathUpdate(uint16,uint256,uint256)'(
      dstChainId?: null,
      dstPoolId?: null,
      weight?: null,
    ): ChainPathUpdateEventFilter;
    ChainPathUpdate(dstChainId?: null, dstPoolId?: null, weight?: null): ChainPathUpdateEventFilter;

    'CreditChainPath(uint16,uint256,uint256,uint256)'(
      chainId?: null,
      srcPoolId?: null,
      amountSD?: null,
      idealBalance?: null,
    ): CreditChainPathEventFilter;
    CreditChainPath(chainId?: null, srcPoolId?: null, amountSD?: null, idealBalance?: null): CreditChainPathEventFilter;

    'DeltaParamUpdated(bool,uint256,uint256,bool,bool)'(
      batched?: null,
      swapDeltaBP?: null,
      lpDeltaBP?: null,
      defaultSwapMode?: null,
      defaultLPMode?: null,
    ): DeltaParamUpdatedEventFilter;
    DeltaParamUpdated(
      batched?: null,
      swapDeltaBP?: null,
      lpDeltaBP?: null,
      defaultSwapMode?: null,
      defaultLPMode?: null,
    ): DeltaParamUpdatedEventFilter;

    'FeeLibraryUpdated(address)'(feeLibraryAddr?: null): FeeLibraryUpdatedEventFilter;
    FeeLibraryUpdated(feeLibraryAddr?: null): FeeLibraryUpdatedEventFilter;

    'FeesUpdated(uint256)'(mintFeeBP?: null): FeesUpdatedEventFilter;
    FeesUpdated(mintFeeBP?: null): FeesUpdatedEventFilter;

    'InstantRedeemLocal(address,uint256,uint256,address)'(
      from?: null,
      amountLP?: null,
      amountSD?: null,
      to?: null,
    ): InstantRedeemLocalEventFilter;
    InstantRedeemLocal(from?: null, amountLP?: null, amountSD?: null, to?: null): InstantRedeemLocalEventFilter;

    'Mint(address,uint256,uint256,uint256)'(
      to?: null,
      amountLP?: null,
      amountSD?: null,
      mintFeeAmountSD?: null,
    ): MintEventFilter;
    Mint(to?: null, amountLP?: null, amountSD?: null, mintFeeAmountSD?: null): MintEventFilter;

    'RedeemLocal(address,uint256,uint256,uint16,uint256,bytes)'(
      from?: null,
      amountLP?: null,
      amountSD?: null,
      chainId?: null,
      dstPoolId?: null,
      to?: null,
    ): RedeemLocalEventFilter;
    RedeemLocal(
      from?: null,
      amountLP?: null,
      amountSD?: null,
      chainId?: null,
      dstPoolId?: null,
      to?: null,
    ): RedeemLocalEventFilter;

    'RedeemLocalCallback(address,uint256,uint256)'(
      _to?: null,
      _amountSD?: null,
      _amountToMintSD?: null,
    ): RedeemLocalCallbackEventFilter;
    RedeemLocalCallback(_to?: null, _amountSD?: null, _amountToMintSD?: null): RedeemLocalCallbackEventFilter;

    'RedeemRemote(uint16,uint256,address,uint256,uint256)'(
      chainId?: null,
      dstPoolId?: null,
      from?: null,
      amountLP?: null,
      amountSD?: null,
    ): RedeemRemoteEventFilter;
    RedeemRemote(
      chainId?: null,
      dstPoolId?: null,
      from?: null,
      amountLP?: null,
      amountSD?: null,
    ): RedeemRemoteEventFilter;

    'SendCredits(uint16,uint256,uint256,uint256)'(
      dstChainId?: null,
      dstPoolId?: null,
      credits?: null,
      idealBalance?: null,
    ): SendCreditsEventFilter;
    SendCredits(dstChainId?: null, dstPoolId?: null, credits?: null, idealBalance?: null): SendCreditsEventFilter;

    'StopSwapUpdated(bool)'(swapStop?: null): StopSwapUpdatedEventFilter;
    StopSwapUpdated(swapStop?: null): StopSwapUpdatedEventFilter;

    'Swap(uint16,uint256,address,uint256,uint256,uint256,uint256,uint256)'(
      chainId?: null,
      dstPoolId?: null,
      from?: null,
      amountSD?: null,
      eqReward?: null,
      eqFee?: null,
      protocolFee?: null,
      lpFee?: null,
    ): SwapEventFilter;
    Swap(
      chainId?: null,
      dstPoolId?: null,
      from?: null,
      amountSD?: null,
      eqReward?: null,
      eqFee?: null,
      protocolFee?: null,
      lpFee?: null,
    ): SwapEventFilter;

    'SwapRemote(address,uint256,uint256,uint256)'(
      to?: null,
      amountSD?: null,
      protocolFee?: null,
      dstFee?: null,
    ): SwapRemoteEventFilter;
    SwapRemote(to?: null, amountSD?: null, protocolFee?: null, dstFee?: null): SwapRemoteEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;

    'WithdrawMintFeeBalance(address,uint256)'(to?: null, amountSD?: null): WithdrawMintFeeBalanceEventFilter;
    WithdrawMintFeeBalance(to?: null, amountSD?: null): WithdrawMintFeeBalanceEventFilter;

    'WithdrawProtocolFeeBalance(address,uint256)'(to?: null, amountSD?: null): WithdrawProtocolFeeBalanceEventFilter;
    WithdrawProtocolFeeBalance(to?: null, amountSD?: null): WithdrawProtocolFeeBalanceEventFilter;

    'WithdrawRemote(uint16,uint256,uint256,uint256)'(
      srcChainId?: null,
      srcPoolId?: null,
      swapAmount?: null,
      mintAmount?: null,
    ): WithdrawRemoteEventFilter;
    WithdrawRemote(
      srcChainId?: null,
      srcPoolId?: null,
      swapAmount?: null,
      mintAmount?: null,
    ): WithdrawRemoteEventFilter;
  };

  estimateGas: {
    BP_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    activateChainPath(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    amountLPtoLD(_amountLP: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    batched(overrides?: CallOverrides): Promise<BigNumber>;

    callDelta(
      _fullMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    chainPathIndexLookup(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    chainPaths(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    convertRate(overrides?: CallOverrides): Promise<BigNumber>;

    createChainPath(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    creditChainPath(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _c: Pool.CreditObjStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    defaultLPMode(overrides?: CallOverrides): Promise<BigNumber>;

    defaultSwapMode(overrides?: CallOverrides): Promise<BigNumber>;

    deltaCredit(overrides?: CallOverrides): Promise<BigNumber>;

    eqFeePool(overrides?: CallOverrides): Promise<BigNumber>;

    feeLibrary(overrides?: CallOverrides): Promise<BigNumber>;

    getChainPath(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getChainPathsLength(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    instantRedeemLocal(
      _from: PromiseOrValue<string>,
      _amountLP: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    localDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    lpDeltaBP(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _to: PromiseOrValue<string>,
      _amountLD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mintFeeBP(overrides?: CallOverrides): Promise<BigNumber>;

    mintFeeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    poolId(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    redeemLocal(
      _from: PromiseOrValue<string>,
      _amountLP: PromiseOrValue<BigNumberish>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    redeemLocalCallback(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _amountSD: PromiseOrValue<BigNumberish>,
      _amountToMintSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    redeemLocalCheckOnRemote(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _amountSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    redeemRemote(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _from: PromiseOrValue<string>,
      _amountLP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    sendCredits(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDeltaParam(
      _batched: PromiseOrValue<boolean>,
      _swapDeltaBP: PromiseOrValue<BigNumberish>,
      _lpDeltaBP: PromiseOrValue<BigNumberish>,
      _defaultSwapMode: PromiseOrValue<boolean>,
      _defaultLPMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFee(
      _mintFeeBP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFeeLibrary(
      _feeLibraryAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSwapStop(
      _swapStop: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setWeightForChainPath(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    sharedDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    stopSwap(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _from: PromiseOrValue<string>,
      _amountLD: PromiseOrValue<BigNumberish>,
      _minAmountLD: PromiseOrValue<BigNumberish>,
      newLiquidity: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swapDeltaBP(overrides?: CallOverrides): Promise<BigNumber>;

    swapRemote(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _s: Pool.SwapObjStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawMintFeeBalance(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawProtocolFeeBalance(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BP_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activateChainPath(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    amountLPtoLD(_amountLP: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batched(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callDelta(
      _fullMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    chainPathIndexLookup(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    chainPaths(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createChainPath(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    creditChainPath(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _c: Pool.CreditObjStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    defaultLPMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultSwapMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deltaCredit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eqFeePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeLibrary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChainPath(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getChainPathsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    instantRedeemLocal(
      _from: PromiseOrValue<string>,
      _amountLP: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    localDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpDeltaBP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _to: PromiseOrValue<string>,
      _amountLD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mintFeeBP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintFeeBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    poolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemLocal(
      _from: PromiseOrValue<string>,
      _amountLP: PromiseOrValue<BigNumberish>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    redeemLocalCallback(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _amountSD: PromiseOrValue<BigNumberish>,
      _amountToMintSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    redeemLocalCheckOnRemote(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _amountSD: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    redeemRemote(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _from: PromiseOrValue<string>,
      _amountLP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendCredits(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDeltaParam(
      _batched: PromiseOrValue<boolean>,
      _swapDeltaBP: PromiseOrValue<BigNumberish>,
      _lpDeltaBP: PromiseOrValue<BigNumberish>,
      _defaultSwapMode: PromiseOrValue<boolean>,
      _defaultLPMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFee(
      _mintFeeBP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFeeLibrary(
      _feeLibraryAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSwapStop(
      _swapStop: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setWeightForChainPath(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    sharedDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stopSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _from: PromiseOrValue<string>,
      _amountLD: PromiseOrValue<BigNumberish>,
      _minAmountLD: PromiseOrValue<BigNumberish>,
      newLiquidity: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swapDeltaBP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapRemote(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _s: Pool.SwapObjStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawMintFeeBalance(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawProtocolFeeBalance(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
