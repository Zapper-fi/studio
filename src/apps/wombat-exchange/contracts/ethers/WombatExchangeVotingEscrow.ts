/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace IVeWom {
  export type BreedingStruct = {
    unlockTime: PromiseOrValue<BigNumberish>;
    womAmount: PromiseOrValue<BigNumberish>;
    veWomAmount: PromiseOrValue<BigNumberish>;
  };

  export type BreedingStructOutput = [number, BigNumber, BigNumber] & {
    unlockTime: number;
    womAmount: BigNumber;
    veWomAmount: BigNumber;
  };

  export type UserInfoStruct = {
    reserved: PromiseOrValue<BigNumberish>[];
    breedings: IVeWom.BreedingStruct[];
  };

  export type UserInfoStructOutput = [BigNumber[], IVeWom.BreedingStructOutput[]] & {
    reserved: BigNumber[];
    breedings: IVeWom.BreedingStructOutput[];
  };
}

export interface WombatExchangeVotingEscrowInterface extends utils.Interface {
  functions: {
    'balanceOf(address)': FunctionFragment;
    'burn(uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'getUserInfo(address)': FunctionFragment;
    'initialize(address,address)': FunctionFragment;
    'isUser(address)': FunctionFragment;
    'masterWombat()': FunctionFragment;
    'mint(uint256,uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setMasterWombat(address)': FunctionFragment;
    'setMaxBreedingLength(uint256)': FunctionFragment;
    'setWhitelist(address)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unpause()': FunctionFragment;
    'whitelist()': FunctionFragment;
    'wom()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'balanceOf'
      | 'burn'
      | 'decimals'
      | 'getUserInfo'
      | 'initialize'
      | 'isUser'
      | 'masterWombat'
      | 'mint'
      | 'name'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'renounceOwnership'
      | 'setMasterWombat'
      | 'setMaxBreedingLength'
      | 'setWhitelist'
      | 'symbol'
      | 'totalSupply'
      | 'transferOwnership'
      | 'unpause'
      | 'whitelist'
      | 'wom',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'burn', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getUserInfo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'initialize', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isUser', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'masterWombat', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setMasterWombat', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setMaxBreedingLength', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setWhitelist', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'whitelist', values?: undefined): string;
  encodeFunctionData(functionFragment: 'wom', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isUser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'masterWombat', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMasterWombat', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxBreedingLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'wom', data: BytesLike): Result;

  events: {
    'Burn(address,uint256)': EventFragment;
    'Enter(address,uint256,uint256,uint256)': EventFragment;
    'Exit(address,uint256,uint256,uint256)': EventFragment;
    'Mint(address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'SetMasterWombat(address)': EventFragment;
    'SetMaxBreedingLength(uint256)': EventFragment;
    'SetWhiteList(address)': EventFragment;
    'Unpaused(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Burn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Enter'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Exit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetMasterWombat'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetMaxBreedingLength'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetWhiteList'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export interface BurnEventObject {
  account: string;
  value: BigNumber;
}
export type BurnEvent = TypedEvent<[string, BigNumber], BurnEventObject>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export interface EnterEventObject {
  addr: string;
  unlockTime: BigNumber;
  womAmount: BigNumber;
  veWomAmount: BigNumber;
}
export type EnterEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], EnterEventObject>;

export type EnterEventFilter = TypedEventFilter<EnterEvent>;

export interface ExitEventObject {
  addr: string;
  unlockTime: BigNumber;
  womAmount: BigNumber;
  veWomAmount: BigNumber;
}
export type ExitEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], ExitEventObject>;

export type ExitEventFilter = TypedEventFilter<ExitEvent>;

export interface MintEventObject {
  beneficiary: string;
  value: BigNumber;
}
export type MintEvent = TypedEvent<[string, BigNumber], MintEventObject>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SetMasterWombatEventObject {
  addr: string;
}
export type SetMasterWombatEvent = TypedEvent<[string], SetMasterWombatEventObject>;

export type SetMasterWombatEventFilter = TypedEventFilter<SetMasterWombatEvent>;

export interface SetMaxBreedingLengthEventObject {
  len: BigNumber;
}
export type SetMaxBreedingLengthEvent = TypedEvent<[BigNumber], SetMaxBreedingLengthEventObject>;

export type SetMaxBreedingLengthEventFilter = TypedEventFilter<SetMaxBreedingLengthEvent>;

export interface SetWhiteListEventObject {
  addr: string;
}
export type SetWhiteListEvent = TypedEvent<[string], SetWhiteListEventObject>;

export type SetWhiteListEventFilter = TypedEventFilter<SetWhiteListEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WombatExchangeVotingEscrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WombatExchangeVotingEscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      slot: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    getUserInfo(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[IVeWom.UserInfoStructOutput]>;

    initialize(
      _wom: PromiseOrValue<string>,
      _masterWombat: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isUser(_addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    masterWombat(overrides?: CallOverrides): Promise<[string]>;

    mint(
      amount: PromiseOrValue<BigNumberish>,
      lockDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setMasterWombat(
      _masterWombat: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxBreedingLength(
      _maxBreedingLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setWhitelist(
      _whitelist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    whitelist(overrides?: CallOverrides): Promise<[string]>;

    wom(overrides?: CallOverrides): Promise<[string]>;
  };

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    slot: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  getUserInfo(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<IVeWom.UserInfoStructOutput>;

  initialize(
    _wom: PromiseOrValue<string>,
    _masterWombat: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isUser(_addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  masterWombat(overrides?: CallOverrides): Promise<string>;

  mint(
    amount: PromiseOrValue<BigNumberish>,
    lockDays: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setMasterWombat(
    _masterWombat: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxBreedingLength(
    _maxBreedingLength: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setWhitelist(
    _whitelist: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  whitelist(overrides?: CallOverrides): Promise<string>;

  wom(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    burn(slot: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    getUserInfo(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<IVeWom.UserInfoStructOutput>;

    initialize(
      _wom: PromiseOrValue<string>,
      _masterWombat: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    isUser(_addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    masterWombat(overrides?: CallOverrides): Promise<string>;

    mint(
      amount: PromiseOrValue<BigNumberish>,
      lockDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMasterWombat(_masterWombat: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setMaxBreedingLength(_maxBreedingLength: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setWhitelist(_whitelist: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    whitelist(overrides?: CallOverrides): Promise<string>;

    wom(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'Burn(address,uint256)'(account?: PromiseOrValue<string> | null, value?: null): BurnEventFilter;
    Burn(account?: PromiseOrValue<string> | null, value?: null): BurnEventFilter;

    'Enter(address,uint256,uint256,uint256)'(
      addr?: null,
      unlockTime?: null,
      womAmount?: null,
      veWomAmount?: null,
    ): EnterEventFilter;
    Enter(addr?: null, unlockTime?: null, womAmount?: null, veWomAmount?: null): EnterEventFilter;

    'Exit(address,uint256,uint256,uint256)'(
      addr?: null,
      unlockTime?: null,
      womAmount?: null,
      veWomAmount?: null,
    ): ExitEventFilter;
    Exit(addr?: null, unlockTime?: null, womAmount?: null, veWomAmount?: null): ExitEventFilter;

    'Mint(address,uint256)'(beneficiary?: PromiseOrValue<string> | null, value?: null): MintEventFilter;
    Mint(beneficiary?: PromiseOrValue<string> | null, value?: null): MintEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'SetMasterWombat(address)'(addr?: null): SetMasterWombatEventFilter;
    SetMasterWombat(addr?: null): SetMasterWombatEventFilter;

    'SetMaxBreedingLength(uint256)'(len?: null): SetMaxBreedingLengthEventFilter;
    SetMaxBreedingLength(len?: null): SetMaxBreedingLengthEventFilter;

    'SetWhiteList(address)'(addr?: null): SetWhiteListEventFilter;
    SetWhiteList(addr?: null): SetWhiteListEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      slot: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    getUserInfo(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _wom: PromiseOrValue<string>,
      _masterWombat: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isUser(_addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    masterWombat(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      amount: PromiseOrValue<BigNumberish>,
      lockDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setMasterWombat(
      _masterWombat: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxBreedingLength(
      _maxBreedingLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setWhitelist(
      _whitelist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    whitelist(overrides?: CallOverrides): Promise<BigNumber>;

    wom(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      slot: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserInfo(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _wom: PromiseOrValue<string>,
      _masterWombat: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isUser(_addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    masterWombat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      amount: PromiseOrValue<BigNumberish>,
      lockDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setMasterWombat(
      _masterWombat: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxBreedingLength(
      _maxBreedingLength: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setWhitelist(
      _whitelist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    whitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wom(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
