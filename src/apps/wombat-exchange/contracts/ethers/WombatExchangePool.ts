/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface WombatExchangePoolInterface extends utils.Interface {
  functions: {
    'addAsset(address,address)': FunctionFragment;
    'addressOfAsset(address)': FunctionFragment;
    'ampFactor()': FunctionFragment;
    'deposit(address,uint256,uint256,address,uint256,bool)': FunctionFragment;
    'dev()': FunctionFragment;
    'exchangeRate(address)': FunctionFragment;
    'feeTo()': FunctionFragment;
    'fillPool(address,uint256)': FunctionFragment;
    'getTokens()': FunctionFragment;
    'globalEquilCovRatio()': FunctionFragment;
    'haircutRate()': FunctionFragment;
    'initialize(uint256,uint256)': FunctionFragment;
    'lpDividendRatio()': FunctionFragment;
    'masterWombat()': FunctionFragment;
    'mintFee(address)': FunctionFragment;
    'mintFeeThreshold()': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'pauseAsset(address)': FunctionFragment;
    'paused()': FunctionFragment;
    'quoteAmountIn(address,address,int256)': FunctionFragment;
    'quotePotentialDeposit(address,uint256)': FunctionFragment;
    'quotePotentialSwap(address,address,int256)': FunctionFragment;
    'quotePotentialWithdraw(address,uint256)': FunctionFragment;
    'quotePotentialWithdrawFromOtherAsset(address,address,uint256)': FunctionFragment;
    'removeAsset(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'retentionRatio()': FunctionFragment;
    'setAmpFactor(uint256)': FunctionFragment;
    'setDev(address)': FunctionFragment;
    'setFee(uint256,uint256)': FunctionFragment;
    'setFeeTo(address)': FunctionFragment;
    'setHaircutRate(uint256)': FunctionFragment;
    'setMasterWombat(address)': FunctionFragment;
    'setMintFeeThreshold(uint256)': FunctionFragment;
    'swap(address,address,uint256,uint256,address,uint256)': FunctionFragment;
    'tipBucketBalance(address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'transferTipBucket(address,uint256,address)': FunctionFragment;
    'unpause()': FunctionFragment;
    'unpauseAsset(address)': FunctionFragment;
    'withdraw(address,uint256,uint256,address,uint256)': FunctionFragment;
    'withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addAsset'
      | 'addressOfAsset'
      | 'ampFactor'
      | 'deposit'
      | 'dev'
      | 'exchangeRate'
      | 'feeTo'
      | 'fillPool'
      | 'getTokens'
      | 'globalEquilCovRatio'
      | 'haircutRate'
      | 'initialize'
      | 'lpDividendRatio'
      | 'masterWombat'
      | 'mintFee'
      | 'mintFeeThreshold'
      | 'owner'
      | 'pause'
      | 'pauseAsset'
      | 'paused'
      | 'quoteAmountIn'
      | 'quotePotentialDeposit'
      | 'quotePotentialSwap'
      | 'quotePotentialWithdraw'
      | 'quotePotentialWithdrawFromOtherAsset'
      | 'removeAsset'
      | 'renounceOwnership'
      | 'retentionRatio'
      | 'setAmpFactor'
      | 'setDev'
      | 'setFee'
      | 'setFeeTo'
      | 'setHaircutRate'
      | 'setMasterWombat'
      | 'setMintFeeThreshold'
      | 'swap'
      | 'tipBucketBalance'
      | 'transferOwnership'
      | 'transferTipBucket'
      | 'unpause'
      | 'unpauseAsset'
      | 'withdraw'
      | 'withdrawFromOtherAsset',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'addAsset', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'addressOfAsset', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'ampFactor', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'dev', values?: undefined): string;
  encodeFunctionData(functionFragment: 'exchangeRate', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'feeTo', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'fillPool',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getTokens', values?: undefined): string;
  encodeFunctionData(functionFragment: 'globalEquilCovRatio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'haircutRate', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'lpDividendRatio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'masterWombat', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mintFee', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'mintFeeThreshold', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pauseAsset', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'quoteAmountIn',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'quotePotentialDeposit',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'quotePotentialSwap',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'quotePotentialWithdraw',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'quotePotentialWithdrawFromOtherAsset',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'removeAsset', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'retentionRatio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setAmpFactor', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setDev', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setFee',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setFeeTo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setHaircutRate', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setMasterWombat', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setMintFeeThreshold', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'swap',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'tipBucketBalance', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'transferTipBucket',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unpauseAsset', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawFromOtherAsset',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;

  decodeFunctionResult(functionFragment: 'addAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addressOfAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ampFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dev', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exchangeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fillPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'globalEquilCovRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'haircutRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lpDividendRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'masterWombat', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintFeeThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pauseAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'quoteAmountIn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'quotePotentialDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'quotePotentialSwap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'quotePotentialWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'quotePotentialWithdrawFromOtherAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'retentionRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAmpFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDev', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setHaircutRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMasterWombat', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMintFeeThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tipBucketBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferTipBucket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpauseAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawFromOtherAsset', data: BytesLike): Result;

  events: {
    'AssetAdded(address,address)': EventFragment;
    'AssetRemoved(address,address)': EventFragment;
    'Deposit(address,address,uint256,uint256,address)': EventFragment;
    'FillPool(address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'PausedAsset(address,address)': EventFragment;
    'SetAmpFactor(uint256)': EventFragment;
    'SetDev(address)': EventFragment;
    'SetFee(uint256,uint256)': EventFragment;
    'SetFeeTo(address)': EventFragment;
    'SetHaircutRate(uint256)': EventFragment;
    'SetMasterWombat(address)': EventFragment;
    'SetMintFeeThreshold(uint256)': EventFragment;
    'Swap(address,address,address,uint256,uint256,address)': EventFragment;
    'TransferTipBucket(address,uint256,address)': EventFragment;
    'Unpaused(address)': EventFragment;
    'UnpausedAsset(address,address)': EventFragment;
    'Withdraw(address,address,uint256,uint256,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AssetAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AssetRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FillPool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PausedAsset'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetAmpFactor'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetDev'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetFeeTo'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetHaircutRate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetMasterWombat'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetMintFeeThreshold'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Swap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferTipBucket'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UnpausedAsset'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface AssetAddedEventObject {
  token: string;
  asset: string;
}
export type AssetAddedEvent = TypedEvent<[string, string], AssetAddedEventObject>;

export type AssetAddedEventFilter = TypedEventFilter<AssetAddedEvent>;

export interface AssetRemovedEventObject {
  token: string;
  asset: string;
}
export type AssetRemovedEvent = TypedEvent<[string, string], AssetRemovedEventObject>;

export type AssetRemovedEventFilter = TypedEventFilter<AssetRemovedEvent>;

export interface DepositEventObject {
  sender: string;
  token: string;
  amount: BigNumber;
  liquidity: BigNumber;
  to: string;
}
export type DepositEvent = TypedEvent<[string, string, BigNumber, BigNumber, string], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface FillPoolEventObject {
  token: string;
  amount: BigNumber;
}
export type FillPoolEvent = TypedEvent<[string, BigNumber], FillPoolEventObject>;

export type FillPoolEventFilter = TypedEventFilter<FillPoolEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PausedAssetEventObject {
  asset: string;
  account: string;
}
export type PausedAssetEvent = TypedEvent<[string, string], PausedAssetEventObject>;

export type PausedAssetEventFilter = TypedEventFilter<PausedAssetEvent>;

export interface SetAmpFactorEventObject {
  value: BigNumber;
}
export type SetAmpFactorEvent = TypedEvent<[BigNumber], SetAmpFactorEventObject>;

export type SetAmpFactorEventFilter = TypedEventFilter<SetAmpFactorEvent>;

export interface SetDevEventObject {
  addr: string;
}
export type SetDevEvent = TypedEvent<[string], SetDevEventObject>;

export type SetDevEventFilter = TypedEventFilter<SetDevEvent>;

export interface SetFeeEventObject {
  lpDividendRatio: BigNumber;
  retentionRatio: BigNumber;
}
export type SetFeeEvent = TypedEvent<[BigNumber, BigNumber], SetFeeEventObject>;

export type SetFeeEventFilter = TypedEventFilter<SetFeeEvent>;

export interface SetFeeToEventObject {
  addr: string;
}
export type SetFeeToEvent = TypedEvent<[string], SetFeeToEventObject>;

export type SetFeeToEventFilter = TypedEventFilter<SetFeeToEvent>;

export interface SetHaircutRateEventObject {
  value: BigNumber;
}
export type SetHaircutRateEvent = TypedEvent<[BigNumber], SetHaircutRateEventObject>;

export type SetHaircutRateEventFilter = TypedEventFilter<SetHaircutRateEvent>;

export interface SetMasterWombatEventObject {
  addr: string;
}
export type SetMasterWombatEvent = TypedEvent<[string], SetMasterWombatEventObject>;

export type SetMasterWombatEventFilter = TypedEventFilter<SetMasterWombatEvent>;

export interface SetMintFeeThresholdEventObject {
  value: BigNumber;
}
export type SetMintFeeThresholdEvent = TypedEvent<[BigNumber], SetMintFeeThresholdEventObject>;

export type SetMintFeeThresholdEventFilter = TypedEventFilter<SetMintFeeThresholdEvent>;

export interface SwapEventObject {
  sender: string;
  fromToken: string;
  toToken: string;
  fromAmount: BigNumber;
  toAmount: BigNumber;
  to: string;
}
export type SwapEvent = TypedEvent<[string, string, string, BigNumber, BigNumber, string], SwapEventObject>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface TransferTipBucketEventObject {
  token: string;
  amount: BigNumber;
  to: string;
}
export type TransferTipBucketEvent = TypedEvent<[string, BigNumber, string], TransferTipBucketEventObject>;

export type TransferTipBucketEventFilter = TypedEventFilter<TransferTipBucketEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UnpausedAssetEventObject {
  asset: string;
  account: string;
}
export type UnpausedAssetEvent = TypedEvent<[string, string], UnpausedAssetEventObject>;

export type UnpausedAssetEventFilter = TypedEventFilter<UnpausedAssetEvent>;

export interface WithdrawEventObject {
  sender: string;
  token: string;
  amount: BigNumber;
  liquidity: BigNumber;
  to: string;
}
export type WithdrawEvent = TypedEvent<[string, string, BigNumber, BigNumber, string], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WombatExchangePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WombatExchangePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAsset(
      token: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addressOfAsset(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    ampFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      minimumLiquidity: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      shouldStake: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    dev(overrides?: CallOverrides): Promise<[string]>;

    exchangeRate(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber] & { xr: BigNumber }>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    fillPool(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getTokens(overrides?: CallOverrides): Promise<[string[]]>;

    globalEquilCovRatio(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        equilCovRatio: BigNumber;
        invariantInUint: BigNumber;
      }
    >;

    haircutRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      ampFactor_: PromiseOrValue<BigNumberish>,
      haircutRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    lpDividendRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    masterWombat(overrides?: CallOverrides): Promise<[string]>;

    mintFee(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mintFeeThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    pauseAsset(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    quoteAmountIn(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      toAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amountIn: BigNumber; haircut: BigNumber }>;

    quotePotentialDeposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { liquidity: BigNumber; reward: BigNumber }>;

    quotePotentialSwap(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      fromAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        potentialOutcome: BigNumber;
        haircut: BigNumber;
      }
    >;

    quotePotentialWithdraw(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; fee: BigNumber }>;

    quotePotentialWithdrawFromOtherAsset(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; withdrewAmount: BigNumber }>;

    removeAsset(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    retentionRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAmpFactor(
      ampFactor_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDev(
      dev_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFee(
      lpDividendRatio_: PromiseOrValue<BigNumberish>,
      retentionRatio_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFeeTo(
      feeTo_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setHaircutRate(
      haircutRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMasterWombat(
      masterWombat_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMintFeeThreshold(
      mintFeeThreshold_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swap(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      fromAmount: PromiseOrValue<BigNumberish>,
      minimumToAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    tipBucketBalance(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferTipBucket(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    unpauseAsset(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      minimumAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawFromOtherAsset(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      minimumAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  addAsset(
    token: PromiseOrValue<string>,
    asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addressOfAsset(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  ampFactor(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    minimumLiquidity: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    shouldStake: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  dev(overrides?: CallOverrides): Promise<string>;

  exchangeRate(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  fillPool(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getTokens(overrides?: CallOverrides): Promise<string[]>;

  globalEquilCovRatio(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber] & {
      equilCovRatio: BigNumber;
      invariantInUint: BigNumber;
    }
  >;

  haircutRate(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    ampFactor_: PromiseOrValue<BigNumberish>,
    haircutRate_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  lpDividendRatio(overrides?: CallOverrides): Promise<BigNumber>;

  masterWombat(overrides?: CallOverrides): Promise<string>;

  mintFee(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mintFeeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  pauseAsset(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  quoteAmountIn(
    fromToken: PromiseOrValue<string>,
    toToken: PromiseOrValue<string>,
    toAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { amountIn: BigNumber; haircut: BigNumber }>;

  quotePotentialDeposit(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { liquidity: BigNumber; reward: BigNumber }>;

  quotePotentialSwap(
    fromToken: PromiseOrValue<string>,
    toToken: PromiseOrValue<string>,
    fromAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { potentialOutcome: BigNumber; haircut: BigNumber }>;

  quotePotentialWithdraw(
    token: PromiseOrValue<string>,
    liquidity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; fee: BigNumber }>;

  quotePotentialWithdrawFromOtherAsset(
    fromToken: PromiseOrValue<string>,
    toToken: PromiseOrValue<string>,
    liquidity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; withdrewAmount: BigNumber }>;

  removeAsset(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  retentionRatio(overrides?: CallOverrides): Promise<BigNumber>;

  setAmpFactor(
    ampFactor_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDev(
    dev_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFee(
    lpDividendRatio_: PromiseOrValue<BigNumberish>,
    retentionRatio_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFeeTo(
    feeTo_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setHaircutRate(
    haircutRate_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMasterWombat(
    masterWombat_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMintFeeThreshold(
    mintFeeThreshold_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swap(
    fromToken: PromiseOrValue<string>,
    toToken: PromiseOrValue<string>,
    fromAmount: PromiseOrValue<BigNumberish>,
    minimumToAmount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  tipBucketBalance(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferTipBucket(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  unpauseAsset(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    token: PromiseOrValue<string>,
    liquidity: PromiseOrValue<BigNumberish>,
    minimumAmount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawFromOtherAsset(
    fromToken: PromiseOrValue<string>,
    toToken: PromiseOrValue<string>,
    liquidity: PromiseOrValue<BigNumberish>,
    minimumAmount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    addAsset(token: PromiseOrValue<string>, asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    addressOfAsset(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    ampFactor(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      minimumLiquidity: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      shouldStake: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    dev(overrides?: CallOverrides): Promise<string>;

    exchangeRate(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    fillPool(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getTokens(overrides?: CallOverrides): Promise<string[]>;

    globalEquilCovRatio(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        equilCovRatio: BigNumber;
        invariantInUint: BigNumber;
      }
    >;

    haircutRate(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      ampFactor_: PromiseOrValue<BigNumberish>,
      haircutRate_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    lpDividendRatio(overrides?: CallOverrides): Promise<BigNumber>;

    masterWombat(overrides?: CallOverrides): Promise<string>;

    mintFee(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    mintFeeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    pauseAsset(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    quoteAmountIn(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      toAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amountIn: BigNumber; haircut: BigNumber }>;

    quotePotentialDeposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { liquidity: BigNumber; reward: BigNumber }>;

    quotePotentialSwap(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      fromAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        potentialOutcome: BigNumber;
        haircut: BigNumber;
      }
    >;

    quotePotentialWithdraw(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; fee: BigNumber }>;

    quotePotentialWithdrawFromOtherAsset(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; withdrewAmount: BigNumber }>;

    removeAsset(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    retentionRatio(overrides?: CallOverrides): Promise<BigNumber>;

    setAmpFactor(ampFactor_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setDev(dev_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setFee(
      lpDividendRatio_: PromiseOrValue<BigNumberish>,
      retentionRatio_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setFeeTo(feeTo_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setHaircutRate(haircutRate_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setMasterWombat(masterWombat_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setMintFeeThreshold(mintFeeThreshold_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    swap(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      fromAmount: PromiseOrValue<BigNumberish>,
      minimumToAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { actualToAmount: BigNumber; haircut: BigNumber }>;

    tipBucketBalance(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    transferTipBucket(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unpauseAsset(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    withdraw(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      minimumAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    withdrawFromOtherAsset(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      minimumAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {
    'AssetAdded(address,address)'(
      token?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
    ): AssetAddedEventFilter;
    AssetAdded(token?: PromiseOrValue<string> | null, asset?: PromiseOrValue<string> | null): AssetAddedEventFilter;

    'AssetRemoved(address,address)'(
      token?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
    ): AssetRemovedEventFilter;
    AssetRemoved(token?: PromiseOrValue<string> | null, asset?: PromiseOrValue<string> | null): AssetRemovedEventFilter;

    'Deposit(address,address,uint256,uint256,address)'(
      sender?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null,
      liquidity?: null,
      to?: PromiseOrValue<string> | null,
    ): DepositEventFilter;
    Deposit(
      sender?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null,
      liquidity?: null,
      to?: PromiseOrValue<string> | null,
    ): DepositEventFilter;

    'FillPool(address,uint256)'(token?: null, amount?: null): FillPoolEventFilter;
    FillPool(token?: null, amount?: null): FillPoolEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'PausedAsset(address,address)'(asset?: null, account?: null): PausedAssetEventFilter;
    PausedAsset(asset?: null, account?: null): PausedAssetEventFilter;

    'SetAmpFactor(uint256)'(value?: null): SetAmpFactorEventFilter;
    SetAmpFactor(value?: null): SetAmpFactorEventFilter;

    'SetDev(address)'(addr?: null): SetDevEventFilter;
    SetDev(addr?: null): SetDevEventFilter;

    'SetFee(uint256,uint256)'(lpDividendRatio?: null, retentionRatio?: null): SetFeeEventFilter;
    SetFee(lpDividendRatio?: null, retentionRatio?: null): SetFeeEventFilter;

    'SetFeeTo(address)'(addr?: null): SetFeeToEventFilter;
    SetFeeTo(addr?: null): SetFeeToEventFilter;

    'SetHaircutRate(uint256)'(value?: null): SetHaircutRateEventFilter;
    SetHaircutRate(value?: null): SetHaircutRateEventFilter;

    'SetMasterWombat(address)'(addr?: null): SetMasterWombatEventFilter;
    SetMasterWombat(addr?: null): SetMasterWombatEventFilter;

    'SetMintFeeThreshold(uint256)'(value?: null): SetMintFeeThresholdEventFilter;
    SetMintFeeThreshold(value?: null): SetMintFeeThresholdEventFilter;

    'Swap(address,address,address,uint256,uint256,address)'(
      sender?: PromiseOrValue<string> | null,
      fromToken?: null,
      toToken?: null,
      fromAmount?: null,
      toAmount?: null,
      to?: PromiseOrValue<string> | null,
    ): SwapEventFilter;
    Swap(
      sender?: PromiseOrValue<string> | null,
      fromToken?: null,
      toToken?: null,
      fromAmount?: null,
      toAmount?: null,
      to?: PromiseOrValue<string> | null,
    ): SwapEventFilter;

    'TransferTipBucket(address,uint256,address)'(token?: null, amount?: null, to?: null): TransferTipBucketEventFilter;
    TransferTipBucket(token?: null, amount?: null, to?: null): TransferTipBucketEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'UnpausedAsset(address,address)'(asset?: null, account?: null): UnpausedAssetEventFilter;
    UnpausedAsset(asset?: null, account?: null): UnpausedAssetEventFilter;

    'Withdraw(address,address,uint256,uint256,address)'(
      sender?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null,
      liquidity?: null,
      to?: PromiseOrValue<string> | null,
    ): WithdrawEventFilter;
    Withdraw(
      sender?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null,
      liquidity?: null,
      to?: PromiseOrValue<string> | null,
    ): WithdrawEventFilter;
  };

  estimateGas: {
    addAsset(
      token: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addressOfAsset(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    ampFactor(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      minimumLiquidity: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      shouldStake: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    dev(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRate(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    fillPool(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getTokens(overrides?: CallOverrides): Promise<BigNumber>;

    globalEquilCovRatio(overrides?: CallOverrides): Promise<BigNumber>;

    haircutRate(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      ampFactor_: PromiseOrValue<BigNumberish>,
      haircutRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    lpDividendRatio(overrides?: CallOverrides): Promise<BigNumber>;

    masterWombat(overrides?: CallOverrides): Promise<BigNumber>;

    mintFee(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mintFeeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    pauseAsset(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    quoteAmountIn(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      toAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    quotePotentialDeposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    quotePotentialSwap(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      fromAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    quotePotentialWithdraw(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    quotePotentialWithdrawFromOtherAsset(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    removeAsset(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    retentionRatio(overrides?: CallOverrides): Promise<BigNumber>;

    setAmpFactor(
      ampFactor_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDev(dev_: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setFee(
      lpDividendRatio_: PromiseOrValue<BigNumberish>,
      retentionRatio_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFeeTo(
      feeTo_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setHaircutRate(
      haircutRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMasterWombat(
      masterWombat_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMintFeeThreshold(
      mintFeeThreshold_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swap(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      fromAmount: PromiseOrValue<BigNumberish>,
      minimumToAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    tipBucketBalance(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferTipBucket(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    unpauseAsset(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdraw(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      minimumAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawFromOtherAsset(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      minimumAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAsset(
      token: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addressOfAsset(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ampFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      minimumLiquidity: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      shouldStake: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    dev(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeRate(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fillPool(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    globalEquilCovRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    haircutRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      ampFactor_: PromiseOrValue<BigNumberish>,
      haircutRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    lpDividendRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    masterWombat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintFee(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mintFeeThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    pauseAsset(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteAmountIn(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      toAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    quotePotentialDeposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    quotePotentialSwap(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      fromAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    quotePotentialWithdraw(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    quotePotentialWithdrawFromOtherAsset(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    removeAsset(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    retentionRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAmpFactor(
      ampFactor_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDev(
      dev_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFee(
      lpDividendRatio_: PromiseOrValue<BigNumberish>,
      retentionRatio_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFeeTo(
      feeTo_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setHaircutRate(
      haircutRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMasterWombat(
      masterWombat_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMintFeeThreshold(
      mintFeeThreshold_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swap(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      fromAmount: PromiseOrValue<BigNumberish>,
      minimumToAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    tipBucketBalance(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferTipBucket(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    unpauseAsset(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      minimumAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawFromOtherAsset(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      minimumAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
