/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace PikaPerpV3 {
  export type ProductStruct = {
    productToken: PromiseOrValue<string>;
    maxLeverage: PromiseOrValue<BigNumberish>;
    fee: PromiseOrValue<BigNumberish>;
    isActive: PromiseOrValue<boolean>;
    openInterestLong: PromiseOrValue<BigNumberish>;
    openInterestShort: PromiseOrValue<BigNumberish>;
    minPriceChange: PromiseOrValue<BigNumberish>;
    weight: PromiseOrValue<BigNumberish>;
    reserve: PromiseOrValue<BigNumberish>;
  };

  export type ProductStructOutput = [
    string,
    BigNumber,
    number,
    boolean,
    BigNumber,
    BigNumber,
    number,
    number,
    BigNumber,
  ] & {
    productToken: string;
    maxLeverage: BigNumber;
    fee: number;
    isActive: boolean;
    openInterestLong: BigNumber;
    openInterestShort: BigNumber;
    minPriceChange: number;
    weight: number;
    reserve: BigNumber;
  };

  export type VaultStruct = {
    cap: PromiseOrValue<BigNumberish>;
    balance: PromiseOrValue<BigNumberish>;
    staked: PromiseOrValue<BigNumberish>;
    shares: PromiseOrValue<BigNumberish>;
    stakingPeriod: PromiseOrValue<BigNumberish>;
  };

  export type VaultStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    cap: BigNumber;
    balance: BigNumber;
    staked: BigNumber;
    shares: BigNumber;
    stakingPeriod: BigNumber;
  };

  export type PositionStruct = {
    productId: PromiseOrValue<BigNumberish>;
    leverage: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
    oraclePrice: PromiseOrValue<BigNumberish>;
    margin: PromiseOrValue<BigNumberish>;
    funding: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    isLong: PromiseOrValue<boolean>;
    isNextPrice: PromiseOrValue<boolean>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type PositionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    boolean,
    boolean,
    BigNumber,
  ] & {
    productId: BigNumber;
    leverage: BigNumber;
    price: BigNumber;
    oraclePrice: BigNumber;
    margin: BigNumber;
    funding: BigNumber;
    owner: string;
    isLong: boolean;
    isNextPrice: boolean;
    timestamp: BigNumber;
  };
}

export interface PikaProtocolV3VaultInterface extends utils.Interface {
  functions: {
    'addMargin(uint256,uint256)': FunctionFragment;
    'addProduct(uint256,(address,uint72,uint16,bool,uint64,uint64,uint32,uint32,uint64))': FunctionFragment;
    'approvedManagers(address,address)': FunctionFragment;
    'closePosition(address,uint256,uint256,bool)': FunctionFragment;
    'closePositionWithId(uint256,uint256)': FunctionFragment;
    'distributePikaReward()': FunctionFragment;
    'distributeProtocolReward()': FunctionFragment;
    'distributeVaultReward()': FunctionFragment;
    'exposureMultiplier()': FunctionFragment;
    'feeCalculator()': FunctionFragment;
    'fundingManager()': FunctionFragment;
    'getMaxExposure(uint256)': FunctionFragment;
    'getPendingPikaReward()': FunctionFragment;
    'getPendingProtocolReward()': FunctionFragment;
    'getPendingVaultReward()': FunctionFragment;
    'getPosition(address,uint256,bool)': FunctionFragment;
    'getPositionId(address,uint256,bool)': FunctionFragment;
    'getPositions(uint256[])': FunctionFragment;
    'getProduct(uint256)': FunctionFragment;
    'getShare(address)': FunctionFragment;
    'getStake(address)': FunctionFragment;
    'getTotalShare()': FunctionFragment;
    'getVault()': FunctionFragment;
    'gov()': FunctionFragment;
    'guardian()': FunctionFragment;
    'liquidatePositions(uint256[])': FunctionFragment;
    'liquidationThreshold()': FunctionFragment;
    'liquidators(address)': FunctionFragment;
    'managers(address)': FunctionFragment;
    'maxExposureMultiplier()': FunctionFragment;
    'maxShift()': FunctionFragment;
    'minMargin()': FunctionFragment;
    'minProfitTime()': FunctionFragment;
    'nextPriceManagers(address)': FunctionFragment;
    'openPosition(address,uint256,uint256,bool,uint256)': FunctionFragment;
    'oracle()': FunctionFragment;
    'owner()': FunctionFragment;
    'pauseTrading()': FunctionFragment;
    'pikaRewardDistributor()': FunctionFragment;
    'pikaRewardRatio()': FunctionFragment;
    'protocolRewardDistributor()': FunctionFragment;
    'protocolRewardRatio()': FunctionFragment;
    'redeem(address,uint256,address)': FunctionFragment;
    'setAccountManager(address,bool)': FunctionFragment;
    'setAddresses(address,address,address)': FunctionFragment;
    'setDistributors(address,address,address,address)': FunctionFragment;
    'setGov(address)': FunctionFragment;
    'setGuardian(address)': FunctionFragment;
    'setLiquidator(address,bool)': FunctionFragment;
    'setManager(address,bool)': FunctionFragment;
    'setMinMargin(uint256)': FunctionFragment;
    'setNextPriceManager(address,bool)': FunctionFragment;
    'setOwner(address)': FunctionFragment;
    'setParameters(uint256,uint256,bool,bool,bool,bool,uint256,uint256,uint256,uint256,uint256,uint256)': FunctionFragment;
    'setRewardRatio(uint256,uint256)': FunctionFragment;
    'setTradeEnabled(bool)': FunctionFragment;
    'shiftDivider()': FunctionFragment;
    'stake(uint256,address)': FunctionFragment;
    'totalOpenInterest()': FunctionFragment;
    'totalWeight()': FunctionFragment;
    'updateProduct(uint256,(address,uint72,uint16,bool,uint64,uint64,uint32,uint32,uint64))': FunctionFragment;
    'updateVault((uint128,uint128,uint96,uint96,uint64))': FunctionFragment;
    'utilizationMultiplier()': FunctionFragment;
    'vaultRewardDistributor()': FunctionFragment;
    'vaultTokenReward()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addMargin'
      | 'addProduct'
      | 'approvedManagers'
      | 'closePosition'
      | 'closePositionWithId'
      | 'distributePikaReward'
      | 'distributeProtocolReward'
      | 'distributeVaultReward'
      | 'exposureMultiplier'
      | 'feeCalculator'
      | 'fundingManager'
      | 'getMaxExposure'
      | 'getPendingPikaReward'
      | 'getPendingProtocolReward'
      | 'getPendingVaultReward'
      | 'getPosition'
      | 'getPositionId'
      | 'getPositions'
      | 'getProduct'
      | 'getShare'
      | 'getStake'
      | 'getTotalShare'
      | 'getVault'
      | 'gov'
      | 'guardian'
      | 'liquidatePositions'
      | 'liquidationThreshold'
      | 'liquidators'
      | 'managers'
      | 'maxExposureMultiplier'
      | 'maxShift'
      | 'minMargin'
      | 'minProfitTime'
      | 'nextPriceManagers'
      | 'openPosition'
      | 'oracle'
      | 'owner'
      | 'pauseTrading'
      | 'pikaRewardDistributor'
      | 'pikaRewardRatio'
      | 'protocolRewardDistributor'
      | 'protocolRewardRatio'
      | 'redeem'
      | 'setAccountManager'
      | 'setAddresses'
      | 'setDistributors'
      | 'setGov'
      | 'setGuardian'
      | 'setLiquidator'
      | 'setManager'
      | 'setMinMargin'
      | 'setNextPriceManager'
      | 'setOwner'
      | 'setParameters'
      | 'setRewardRatio'
      | 'setTradeEnabled'
      | 'shiftDivider'
      | 'stake'
      | 'totalOpenInterest'
      | 'totalWeight'
      | 'updateProduct'
      | 'updateVault'
      | 'utilizationMultiplier'
      | 'vaultRewardDistributor'
      | 'vaultTokenReward',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addMargin',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'addProduct',
    values: [PromiseOrValue<BigNumberish>, PikaPerpV3.ProductStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'approvedManagers',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'closePosition',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'closePositionWithId',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'distributePikaReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'distributeProtocolReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'distributeVaultReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'exposureMultiplier', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feeCalculator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fundingManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMaxExposure', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getPendingPikaReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPendingProtocolReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPendingVaultReward', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getPosition',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getPositionId',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'getPositions', values: [PromiseOrValue<BigNumberish>[]]): string;
  encodeFunctionData(functionFragment: 'getProduct', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getShare', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getStake', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getTotalShare', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getVault', values?: undefined): string;
  encodeFunctionData(functionFragment: 'gov', values?: undefined): string;
  encodeFunctionData(functionFragment: 'guardian', values?: undefined): string;
  encodeFunctionData(functionFragment: 'liquidatePositions', values: [PromiseOrValue<BigNumberish>[]]): string;
  encodeFunctionData(functionFragment: 'liquidationThreshold', values?: undefined): string;
  encodeFunctionData(functionFragment: 'liquidators', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'managers', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maxExposureMultiplier', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxShift', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minMargin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minProfitTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nextPriceManagers', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'openPosition',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'oracle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pauseTrading', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pikaRewardDistributor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pikaRewardRatio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'protocolRewardDistributor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'protocolRewardRatio', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'redeem',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setAccountManager',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setAddresses',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDistributors',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'setGov', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setGuardian', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setLiquidator',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setManager', values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'setMinMargin', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setNextPriceManager',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setOwner', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setParameters',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'setRewardRatio',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setTradeEnabled', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'shiftDivider', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stake', values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'totalOpenInterest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalWeight', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'updateProduct',
    values: [PromiseOrValue<BigNumberish>, PikaPerpV3.ProductStruct],
  ): string;
  encodeFunctionData(functionFragment: 'updateVault', values: [PikaPerpV3.VaultStruct]): string;
  encodeFunctionData(functionFragment: 'utilizationMultiplier', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vaultRewardDistributor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vaultTokenReward', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'addMargin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addProduct', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approvedManagers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closePosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closePositionWithId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distributePikaReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distributeProtocolReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distributeVaultReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exposureMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeCalculator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fundingManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMaxExposure', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPendingPikaReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPendingProtocolReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPendingVaultReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPositionId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPositions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProduct', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gov', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'guardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidatePositions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidationThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidators', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'managers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxExposureMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxShift', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minMargin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minProfitTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nextPriceManagers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'openPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'oracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pauseTrading', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pikaRewardDistributor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pikaRewardRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protocolRewardDistributor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protocolRewardRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAccountManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAddresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDistributors', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGov', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLiquidator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMinMargin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setNextPriceManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setParameters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewardRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTradeEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'shiftDivider', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalOpenInterest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalWeight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateProduct', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'utilizationMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaultRewardDistributor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaultTokenReward', data: BytesLike): Result;

  events: {
    'AddMargin(uint256,address,address,uint256,uint256,uint256)': EventFragment;
    'AddressesSet(address,address,address)': EventFragment;
    'ClosePosition(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,bool)': EventFragment;
    'GovUpdated(address)': EventFragment;
    'GuardianUpdated(address)': EventFragment;
    'NewPosition(uint256,address,uint256,bool,uint256,uint256,uint256,uint256,uint256,bool,int256)': EventFragment;
    'OwnerUpdated(address)': EventFragment;
    'PikaRewardDistributed(address,uint256)': EventFragment;
    'PositionLiquidated(uint256,address,uint256,uint256)': EventFragment;
    'ProductAdded(uint256,tuple)': EventFragment;
    'ProductUpdated(uint256,tuple)': EventFragment;
    'ProtocolRewardDistributed(address,uint256)': EventFragment;
    'Redeemed(address,address,uint256,uint256,uint256,bool)': EventFragment;
    'Staked(address,uint256,uint256)': EventFragment;
    'VaultRewardDistributed(address,uint256)': EventFragment;
    'VaultUpdated(tuple)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddMargin'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AddressesSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ClosePosition'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GovUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GuardianUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewPosition'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PikaRewardDistributed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PositionLiquidated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProductAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProductUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolRewardDistributed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Redeemed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Staked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VaultRewardDistributed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VaultUpdated'): EventFragment;
}

export interface AddMarginEventObject {
  positionId: BigNumber;
  sender: string;
  user: string;
  margin: BigNumber;
  newMargin: BigNumber;
  newLeverage: BigNumber;
}
export type AddMarginEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber],
  AddMarginEventObject
>;

export type AddMarginEventFilter = TypedEventFilter<AddMarginEvent>;

export interface AddressesSetEventObject {
  oracle: string;
  feeCalculator: string;
  fundingManager: string;
}
export type AddressesSetEvent = TypedEvent<[string, string, string], AddressesSetEventObject>;

export type AddressesSetEventFilter = TypedEventFilter<AddressesSetEvent>;

export interface ClosePositionEventObject {
  positionId: BigNumber;
  user: string;
  productId: BigNumber;
  price: BigNumber;
  entryPrice: BigNumber;
  margin: BigNumber;
  leverage: BigNumber;
  fee: BigNumber;
  pnl: BigNumber;
  fundingPayment: BigNumber;
  wasLiquidated: boolean;
}
export type ClosePositionEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean],
  ClosePositionEventObject
>;

export type ClosePositionEventFilter = TypedEventFilter<ClosePositionEvent>;

export interface GovUpdatedEventObject {
  newGov: string;
}
export type GovUpdatedEvent = TypedEvent<[string], GovUpdatedEventObject>;

export type GovUpdatedEventFilter = TypedEventFilter<GovUpdatedEvent>;

export interface GuardianUpdatedEventObject {
  newGuardian: string;
}
export type GuardianUpdatedEvent = TypedEvent<[string], GuardianUpdatedEventObject>;

export type GuardianUpdatedEventFilter = TypedEventFilter<GuardianUpdatedEvent>;

export interface NewPositionEventObject {
  positionId: BigNumber;
  user: string;
  productId: BigNumber;
  isLong: boolean;
  price: BigNumber;
  oraclePrice: BigNumber;
  margin: BigNumber;
  leverage: BigNumber;
  fee: BigNumber;
  isNextPrice: boolean;
  funding: BigNumber;
}
export type NewPositionEvent = TypedEvent<
  [BigNumber, string, BigNumber, boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber],
  NewPositionEventObject
>;

export type NewPositionEventFilter = TypedEventFilter<NewPositionEvent>;

export interface OwnerUpdatedEventObject {
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<[string], OwnerUpdatedEventObject>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface PikaRewardDistributedEventObject {
  to: string;
  amount: BigNumber;
}
export type PikaRewardDistributedEvent = TypedEvent<[string, BigNumber], PikaRewardDistributedEventObject>;

export type PikaRewardDistributedEventFilter = TypedEventFilter<PikaRewardDistributedEvent>;

export interface PositionLiquidatedEventObject {
  positionId: BigNumber;
  liquidator: string;
  liquidatorReward: BigNumber;
  remainingReward: BigNumber;
}
export type PositionLiquidatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  PositionLiquidatedEventObject
>;

export type PositionLiquidatedEventFilter = TypedEventFilter<PositionLiquidatedEvent>;

export interface ProductAddedEventObject {
  productId: BigNumber;
  product: PikaPerpV3.ProductStructOutput;
}
export type ProductAddedEvent = TypedEvent<[BigNumber, PikaPerpV3.ProductStructOutput], ProductAddedEventObject>;

export type ProductAddedEventFilter = TypedEventFilter<ProductAddedEvent>;

export interface ProductUpdatedEventObject {
  productId: BigNumber;
  product: PikaPerpV3.ProductStructOutput;
}
export type ProductUpdatedEvent = TypedEvent<[BigNumber, PikaPerpV3.ProductStructOutput], ProductUpdatedEventObject>;

export type ProductUpdatedEventFilter = TypedEventFilter<ProductUpdatedEvent>;

export interface ProtocolRewardDistributedEventObject {
  to: string;
  amount: BigNumber;
}
export type ProtocolRewardDistributedEvent = TypedEvent<[string, BigNumber], ProtocolRewardDistributedEventObject>;

export type ProtocolRewardDistributedEventFilter = TypedEventFilter<ProtocolRewardDistributedEvent>;

export interface RedeemedEventObject {
  user: string;
  receiver: string;
  amount: BigNumber;
  shares: BigNumber;
  shareBalance: BigNumber;
  isFullRedeem: boolean;
}
export type RedeemedEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber, boolean], RedeemedEventObject>;

export type RedeemedEventFilter = TypedEventFilter<RedeemedEvent>;

export interface StakedEventObject {
  user: string;
  amount: BigNumber;
  shares: BigNumber;
}
export type StakedEvent = TypedEvent<[string, BigNumber, BigNumber], StakedEventObject>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface VaultRewardDistributedEventObject {
  to: string;
  amount: BigNumber;
}
export type VaultRewardDistributedEvent = TypedEvent<[string, BigNumber], VaultRewardDistributedEventObject>;

export type VaultRewardDistributedEventFilter = TypedEventFilter<VaultRewardDistributedEvent>;

export interface VaultUpdatedEventObject {
  vault: PikaPerpV3.VaultStructOutput;
}
export type VaultUpdatedEvent = TypedEvent<[PikaPerpV3.VaultStructOutput], VaultUpdatedEventObject>;

export type VaultUpdatedEventFilter = TypedEventFilter<VaultUpdatedEvent>;

export interface PikaProtocolV3Vault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PikaProtocolV3VaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addMargin(
      positionId: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addProduct(
      productId: PromiseOrValue<BigNumberish>,
      _product: PikaPerpV3.ProductStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    approvedManagers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    closePosition(
      user: PromiseOrValue<string>,
      productId: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    closePositionWithId(
      positionId: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    distributePikaReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    distributeProtocolReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    distributeVaultReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    exposureMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeCalculator(overrides?: CallOverrides): Promise<[string]>;

    fundingManager(overrides?: CallOverrides): Promise<[string]>;

    getMaxExposure(productWeight: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPendingPikaReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPendingProtocolReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPendingVaultReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPosition(
      account: PromiseOrValue<string>,
      productId: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber, boolean, BigNumber]>;

    getPositionId(
      account: PromiseOrValue<string>,
      productId: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getPositions(
      positionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<
      [PikaPerpV3.PositionStructOutput[]] & {
        _positions: PikaPerpV3.PositionStructOutput[];
      }
    >;

    getProduct(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string, BigNumber, BigNumber, boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getShare(stakeOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getStake(stakeOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVault(overrides?: CallOverrides): Promise<[PikaPerpV3.VaultStructOutput]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    guardian(overrides?: CallOverrides): Promise<[string]>;

    liquidatePositions(
      positionIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    liquidationThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidators(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    managers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    maxExposureMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxShift(overrides?: CallOverrides): Promise<[BigNumber]>;

    minMargin(overrides?: CallOverrides): Promise<[BigNumber]>;

    minProfitTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextPriceManagers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    openPosition(
      user: PromiseOrValue<string>,
      productId: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseTrading(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    pikaRewardDistributor(overrides?: CallOverrides): Promise<[string]>;

    pikaRewardRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolRewardDistributor(overrides?: CallOverrides): Promise<[string]>;

    protocolRewardRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeem(
      user: PromiseOrValue<string>,
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setAccountManager(
      _manager: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setAddresses(
      _oracle: PromiseOrValue<string>,
      _feeCalculator: PromiseOrValue<string>,
      _fundingManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDistributors(
      _protocolRewardDistributor: PromiseOrValue<string>,
      _pikaRewardDistributor: PromiseOrValue<string>,
      _vaultRewardDistributor: PromiseOrValue<string>,
      _vaultTokenReward: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLiquidator(
      _liquidator: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setManager(
      _manager: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMinMargin(
      _minMargin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setNextPriceManager(
      _nextPriceManager: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setParameters(
      _maxShift: PromiseOrValue<BigNumberish>,
      _minProfitTime: PromiseOrValue<BigNumberish>,
      _canUserStake: PromiseOrValue<boolean>,
      _allowPublicLiquidator: PromiseOrValue<boolean>,
      _isManagerOnlyForOpen: PromiseOrValue<boolean>,
      _isManagerOnlyForClose: PromiseOrValue<boolean>,
      _exposureMultiplier: PromiseOrValue<BigNumberish>,
      _utilizationMultiplier: PromiseOrValue<BigNumberish>,
      _maxExposureMultiplier: PromiseOrValue<BigNumberish>,
      _liquidationBounty: PromiseOrValue<BigNumberish>,
      _liquidationThreshold: PromiseOrValue<BigNumberish>,
      _shiftDivider: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRewardRatio(
      _protocolRewardRatio: PromiseOrValue<BigNumberish>,
      _pikaRewardRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTradeEnabled(
      _isTradeEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    shiftDivider(overrides?: CallOverrides): Promise<[BigNumber]>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    totalOpenInterest(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateProduct(
      productId: PromiseOrValue<BigNumberish>,
      _product: PikaPerpV3.ProductStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateVault(
      _vault: PikaPerpV3.VaultStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    utilizationMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    vaultRewardDistributor(overrides?: CallOverrides): Promise<[string]>;

    vaultTokenReward(overrides?: CallOverrides): Promise<[string]>;
  };

  addMargin(
    positionId: PromiseOrValue<BigNumberish>,
    margin: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addProduct(
    productId: PromiseOrValue<BigNumberish>,
    _product: PikaPerpV3.ProductStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  approvedManagers(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  closePosition(
    user: PromiseOrValue<string>,
    productId: PromiseOrValue<BigNumberish>,
    margin: PromiseOrValue<BigNumberish>,
    isLong: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  closePositionWithId(
    positionId: PromiseOrValue<BigNumberish>,
    margin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  distributePikaReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  distributeProtocolReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  distributeVaultReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  exposureMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  feeCalculator(overrides?: CallOverrides): Promise<string>;

  fundingManager(overrides?: CallOverrides): Promise<string>;

  getMaxExposure(productWeight: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getPendingPikaReward(overrides?: CallOverrides): Promise<BigNumber>;

  getPendingProtocolReward(overrides?: CallOverrides): Promise<BigNumber>;

  getPendingVaultReward(overrides?: CallOverrides): Promise<BigNumber>;

  getPosition(
    account: PromiseOrValue<string>,
    productId: PromiseOrValue<BigNumberish>,
    isLong: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber, boolean, BigNumber]>;

  getPositionId(
    account: PromiseOrValue<string>,
    productId: PromiseOrValue<BigNumberish>,
    isLong: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getPositions(
    positionIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides,
  ): Promise<PikaPerpV3.PositionStructOutput[]>;

  getProduct(
    productId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[string, BigNumber, BigNumber, boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  getShare(stakeOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getStake(stakeOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getTotalShare(overrides?: CallOverrides): Promise<BigNumber>;

  getVault(overrides?: CallOverrides): Promise<PikaPerpV3.VaultStructOutput>;

  gov(overrides?: CallOverrides): Promise<string>;

  guardian(overrides?: CallOverrides): Promise<string>;

  liquidatePositions(
    positionIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  liquidationThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  liquidators(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  managers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  maxExposureMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  maxShift(overrides?: CallOverrides): Promise<BigNumber>;

  minMargin(overrides?: CallOverrides): Promise<BigNumber>;

  minProfitTime(overrides?: CallOverrides): Promise<BigNumber>;

  nextPriceManagers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  openPosition(
    user: PromiseOrValue<string>,
    productId: PromiseOrValue<BigNumberish>,
    margin: PromiseOrValue<BigNumberish>,
    isLong: PromiseOrValue<boolean>,
    leverage: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  oracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseTrading(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  pikaRewardDistributor(overrides?: CallOverrides): Promise<string>;

  pikaRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

  protocolRewardDistributor(overrides?: CallOverrides): Promise<string>;

  protocolRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    user: PromiseOrValue<string>,
    shares: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setAccountManager(
    _manager: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setAddresses(
    _oracle: PromiseOrValue<string>,
    _feeCalculator: PromiseOrValue<string>,
    _fundingManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDistributors(
    _protocolRewardDistributor: PromiseOrValue<string>,
    _pikaRewardDistributor: PromiseOrValue<string>,
    _vaultRewardDistributor: PromiseOrValue<string>,
    _vaultTokenReward: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setGov(
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setGuardian(
    _guardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLiquidator(
    _liquidator: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setManager(
    _manager: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMinMargin(
    _minMargin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setNextPriceManager(
    _nextPriceManager: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setParameters(
    _maxShift: PromiseOrValue<BigNumberish>,
    _minProfitTime: PromiseOrValue<BigNumberish>,
    _canUserStake: PromiseOrValue<boolean>,
    _allowPublicLiquidator: PromiseOrValue<boolean>,
    _isManagerOnlyForOpen: PromiseOrValue<boolean>,
    _isManagerOnlyForClose: PromiseOrValue<boolean>,
    _exposureMultiplier: PromiseOrValue<BigNumberish>,
    _utilizationMultiplier: PromiseOrValue<BigNumberish>,
    _maxExposureMultiplier: PromiseOrValue<BigNumberish>,
    _liquidationBounty: PromiseOrValue<BigNumberish>,
    _liquidationThreshold: PromiseOrValue<BigNumberish>,
    _shiftDivider: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRewardRatio(
    _protocolRewardRatio: PromiseOrValue<BigNumberish>,
    _pikaRewardRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTradeEnabled(
    _isTradeEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  shiftDivider(overrides?: CallOverrides): Promise<BigNumber>;

  stake(
    amount: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  totalOpenInterest(overrides?: CallOverrides): Promise<BigNumber>;

  totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

  updateProduct(
    productId: PromiseOrValue<BigNumberish>,
    _product: PikaPerpV3.ProductStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateVault(
    _vault: PikaPerpV3.VaultStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  utilizationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  vaultRewardDistributor(overrides?: CallOverrides): Promise<string>;

  vaultTokenReward(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addMargin(
      positionId: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    addProduct(
      productId: PromiseOrValue<BigNumberish>,
      _product: PikaPerpV3.ProductStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    approvedManagers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    closePosition(
      user: PromiseOrValue<string>,
      productId: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    closePositionWithId(
      positionId: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    distributePikaReward(overrides?: CallOverrides): Promise<BigNumber>;

    distributeProtocolReward(overrides?: CallOverrides): Promise<BigNumber>;

    distributeVaultReward(overrides?: CallOverrides): Promise<BigNumber>;

    exposureMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    feeCalculator(overrides?: CallOverrides): Promise<string>;

    fundingManager(overrides?: CallOverrides): Promise<string>;

    getMaxExposure(productWeight: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getPendingPikaReward(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingProtocolReward(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingVaultReward(overrides?: CallOverrides): Promise<BigNumber>;

    getPosition(
      account: PromiseOrValue<string>,
      productId: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber, boolean, BigNumber]>;

    getPositionId(
      account: PromiseOrValue<string>,
      productId: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPositions(
      positionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<PikaPerpV3.PositionStructOutput[]>;

    getProduct(
      productId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string, BigNumber, BigNumber, boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getShare(stakeOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getStake(stakeOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalShare(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<PikaPerpV3.VaultStructOutput>;

    gov(overrides?: CallOverrides): Promise<string>;

    guardian(overrides?: CallOverrides): Promise<string>;

    liquidatePositions(positionIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;

    liquidationThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    liquidators(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    managers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    maxExposureMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    maxShift(overrides?: CallOverrides): Promise<BigNumber>;

    minMargin(overrides?: CallOverrides): Promise<BigNumber>;

    minProfitTime(overrides?: CallOverrides): Promise<BigNumber>;

    nextPriceManagers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    openPosition(
      user: PromiseOrValue<string>,
      productId: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    oracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseTrading(overrides?: CallOverrides): Promise<void>;

    pikaRewardDistributor(overrides?: CallOverrides): Promise<string>;

    pikaRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

    protocolRewardDistributor(overrides?: CallOverrides): Promise<string>;

    protocolRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      user: PromiseOrValue<string>,
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setAccountManager(
      _manager: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setAddresses(
      _oracle: PromiseOrValue<string>,
      _feeCalculator: PromiseOrValue<string>,
      _fundingManager: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDistributors(
      _protocolRewardDistributor: PromiseOrValue<string>,
      _pikaRewardDistributor: PromiseOrValue<string>,
      _vaultRewardDistributor: PromiseOrValue<string>,
      _vaultTokenReward: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setGov(_gov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setGuardian(_guardian: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setLiquidator(
      _liquidator: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setManager(
      _manager: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMinMargin(_minMargin: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setNextPriceManager(
      _nextPriceManager: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setOwner(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setParameters(
      _maxShift: PromiseOrValue<BigNumberish>,
      _minProfitTime: PromiseOrValue<BigNumberish>,
      _canUserStake: PromiseOrValue<boolean>,
      _allowPublicLiquidator: PromiseOrValue<boolean>,
      _isManagerOnlyForOpen: PromiseOrValue<boolean>,
      _isManagerOnlyForClose: PromiseOrValue<boolean>,
      _exposureMultiplier: PromiseOrValue<BigNumberish>,
      _utilizationMultiplier: PromiseOrValue<BigNumberish>,
      _maxExposureMultiplier: PromiseOrValue<BigNumberish>,
      _liquidationBounty: PromiseOrValue<BigNumberish>,
      _liquidationThreshold: PromiseOrValue<BigNumberish>,
      _shiftDivider: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setRewardRatio(
      _protocolRewardRatio: PromiseOrValue<BigNumberish>,
      _pikaRewardRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setTradeEnabled(_isTradeEnabled: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    shiftDivider(overrides?: CallOverrides): Promise<BigNumber>;

    stake(amount: PromiseOrValue<BigNumberish>, user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    totalOpenInterest(overrides?: CallOverrides): Promise<BigNumber>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    updateProduct(
      productId: PromiseOrValue<BigNumberish>,
      _product: PikaPerpV3.ProductStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateVault(_vault: PikaPerpV3.VaultStruct, overrides?: CallOverrides): Promise<void>;

    utilizationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    vaultRewardDistributor(overrides?: CallOverrides): Promise<string>;

    vaultTokenReward(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'AddMargin(uint256,address,address,uint256,uint256,uint256)'(
      positionId?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      margin?: null,
      newMargin?: null,
      newLeverage?: null,
    ): AddMarginEventFilter;
    AddMargin(
      positionId?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      margin?: null,
      newMargin?: null,
      newLeverage?: null,
    ): AddMarginEventFilter;

    'AddressesSet(address,address,address)'(
      oracle?: null,
      feeCalculator?: null,
      fundingManager?: null,
    ): AddressesSetEventFilter;
    AddressesSet(oracle?: null, feeCalculator?: null, fundingManager?: null): AddressesSetEventFilter;

    'ClosePosition(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,bool)'(
      positionId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      productId?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      entryPrice?: null,
      margin?: null,
      leverage?: null,
      fee?: null,
      pnl?: null,
      fundingPayment?: null,
      wasLiquidated?: null,
    ): ClosePositionEventFilter;
    ClosePosition(
      positionId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      productId?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      entryPrice?: null,
      margin?: null,
      leverage?: null,
      fee?: null,
      pnl?: null,
      fundingPayment?: null,
      wasLiquidated?: null,
    ): ClosePositionEventFilter;

    'GovUpdated(address)'(newGov?: null): GovUpdatedEventFilter;
    GovUpdated(newGov?: null): GovUpdatedEventFilter;

    'GuardianUpdated(address)'(newGuardian?: null): GuardianUpdatedEventFilter;
    GuardianUpdated(newGuardian?: null): GuardianUpdatedEventFilter;

    'NewPosition(uint256,address,uint256,bool,uint256,uint256,uint256,uint256,uint256,bool,int256)'(
      positionId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      productId?: PromiseOrValue<BigNumberish> | null,
      isLong?: null,
      price?: null,
      oraclePrice?: null,
      margin?: null,
      leverage?: null,
      fee?: null,
      isNextPrice?: null,
      funding?: null,
    ): NewPositionEventFilter;
    NewPosition(
      positionId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      productId?: PromiseOrValue<BigNumberish> | null,
      isLong?: null,
      price?: null,
      oraclePrice?: null,
      margin?: null,
      leverage?: null,
      fee?: null,
      isNextPrice?: null,
      funding?: null,
    ): NewPositionEventFilter;

    'OwnerUpdated(address)'(newOwner?: null): OwnerUpdatedEventFilter;
    OwnerUpdated(newOwner?: null): OwnerUpdatedEventFilter;

    'PikaRewardDistributed(address,uint256)'(to?: null, amount?: null): PikaRewardDistributedEventFilter;
    PikaRewardDistributed(to?: null, amount?: null): PikaRewardDistributedEventFilter;

    'PositionLiquidated(uint256,address,uint256,uint256)'(
      positionId?: PromiseOrValue<BigNumberish> | null,
      liquidator?: PromiseOrValue<string> | null,
      liquidatorReward?: null,
      remainingReward?: null,
    ): PositionLiquidatedEventFilter;
    PositionLiquidated(
      positionId?: PromiseOrValue<BigNumberish> | null,
      liquidator?: PromiseOrValue<string> | null,
      liquidatorReward?: null,
      remainingReward?: null,
    ): PositionLiquidatedEventFilter;

    'ProductAdded(uint256,tuple)'(productId?: null, product?: null): ProductAddedEventFilter;
    ProductAdded(productId?: null, product?: null): ProductAddedEventFilter;

    'ProductUpdated(uint256,tuple)'(productId?: null, product?: null): ProductUpdatedEventFilter;
    ProductUpdated(productId?: null, product?: null): ProductUpdatedEventFilter;

    'ProtocolRewardDistributed(address,uint256)'(to?: null, amount?: null): ProtocolRewardDistributedEventFilter;
    ProtocolRewardDistributed(to?: null, amount?: null): ProtocolRewardDistributedEventFilter;

    'Redeemed(address,address,uint256,uint256,uint256,bool)'(
      user?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null,
      shares?: null,
      shareBalance?: null,
      isFullRedeem?: null,
    ): RedeemedEventFilter;
    Redeemed(
      user?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null,
      shares?: null,
      shareBalance?: null,
      isFullRedeem?: null,
    ): RedeemedEventFilter;

    'Staked(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      shares?: null,
    ): StakedEventFilter;
    Staked(user?: PromiseOrValue<string> | null, amount?: null, shares?: null): StakedEventFilter;

    'VaultRewardDistributed(address,uint256)'(to?: null, amount?: null): VaultRewardDistributedEventFilter;
    VaultRewardDistributed(to?: null, amount?: null): VaultRewardDistributedEventFilter;

    'VaultUpdated(tuple)'(vault?: null): VaultUpdatedEventFilter;
    VaultUpdated(vault?: null): VaultUpdatedEventFilter;
  };

  estimateGas: {
    addMargin(
      positionId: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addProduct(
      productId: PromiseOrValue<BigNumberish>,
      _product: PikaPerpV3.ProductStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    approvedManagers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    closePosition(
      user: PromiseOrValue<string>,
      productId: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    closePositionWithId(
      positionId: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    distributePikaReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    distributeProtocolReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    distributeVaultReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    exposureMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    feeCalculator(overrides?: CallOverrides): Promise<BigNumber>;

    fundingManager(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxExposure(productWeight: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getPendingPikaReward(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingProtocolReward(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingVaultReward(overrides?: CallOverrides): Promise<BigNumber>;

    getPosition(
      account: PromiseOrValue<string>,
      productId: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPositionId(
      account: PromiseOrValue<string>,
      productId: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPositions(positionIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber>;

    getProduct(productId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getShare(stakeOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getStake(stakeOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalShare(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    liquidatePositions(
      positionIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    liquidationThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    liquidators(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    managers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxExposureMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    maxShift(overrides?: CallOverrides): Promise<BigNumber>;

    minMargin(overrides?: CallOverrides): Promise<BigNumber>;

    minProfitTime(overrides?: CallOverrides): Promise<BigNumber>;

    nextPriceManagers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    openPosition(
      user: PromiseOrValue<string>,
      productId: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseTrading(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    pikaRewardDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    pikaRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

    protocolRewardDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    protocolRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      user: PromiseOrValue<string>,
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setAccountManager(
      _manager: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setAddresses(
      _oracle: PromiseOrValue<string>,
      _feeCalculator: PromiseOrValue<string>,
      _fundingManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDistributors(
      _protocolRewardDistributor: PromiseOrValue<string>,
      _pikaRewardDistributor: PromiseOrValue<string>,
      _vaultRewardDistributor: PromiseOrValue<string>,
      _vaultTokenReward: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setGov(_gov: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLiquidator(
      _liquidator: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setManager(
      _manager: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMinMargin(
      _minMargin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setNextPriceManager(
      _nextPriceManager: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setParameters(
      _maxShift: PromiseOrValue<BigNumberish>,
      _minProfitTime: PromiseOrValue<BigNumberish>,
      _canUserStake: PromiseOrValue<boolean>,
      _allowPublicLiquidator: PromiseOrValue<boolean>,
      _isManagerOnlyForOpen: PromiseOrValue<boolean>,
      _isManagerOnlyForClose: PromiseOrValue<boolean>,
      _exposureMultiplier: PromiseOrValue<BigNumberish>,
      _utilizationMultiplier: PromiseOrValue<BigNumberish>,
      _maxExposureMultiplier: PromiseOrValue<BigNumberish>,
      _liquidationBounty: PromiseOrValue<BigNumberish>,
      _liquidationThreshold: PromiseOrValue<BigNumberish>,
      _shiftDivider: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRewardRatio(
      _protocolRewardRatio: PromiseOrValue<BigNumberish>,
      _pikaRewardRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTradeEnabled(
      _isTradeEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    shiftDivider(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    totalOpenInterest(overrides?: CallOverrides): Promise<BigNumber>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    updateProduct(
      productId: PromiseOrValue<BigNumberish>,
      _product: PikaPerpV3.ProductStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateVault(
      _vault: PikaPerpV3.VaultStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    utilizationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    vaultRewardDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    vaultTokenReward(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addMargin(
      positionId: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addProduct(
      productId: PromiseOrValue<BigNumberish>,
      _product: PikaPerpV3.ProductStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    approvedManagers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    closePosition(
      user: PromiseOrValue<string>,
      productId: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    closePositionWithId(
      positionId: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    distributePikaReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    distributeProtocolReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    distributeVaultReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    exposureMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeCalculator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundingManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxExposure(
      productWeight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPendingPikaReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingProtocolReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingVaultReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPosition(
      account: PromiseOrValue<string>,
      productId: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPositionId(
      account: PromiseOrValue<string>,
      productId: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPositions(positionIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProduct(productId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getShare(stakeOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStake(stakeOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidatePositions(
      positionIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    liquidationThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidators(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxExposureMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxShift(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minMargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minProfitTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextPriceManagers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openPosition(
      user: PromiseOrValue<string>,
      productId: PromiseOrValue<BigNumberish>,
      margin: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      leverage: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseTrading(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    pikaRewardDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pikaRewardRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolRewardDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolRewardRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      user: PromiseOrValue<string>,
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setAccountManager(
      _manager: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _oracle: PromiseOrValue<string>,
      _feeCalculator: PromiseOrValue<string>,
      _fundingManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDistributors(
      _protocolRewardDistributor: PromiseOrValue<string>,
      _pikaRewardDistributor: PromiseOrValue<string>,
      _vaultRewardDistributor: PromiseOrValue<string>,
      _vaultTokenReward: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setGuardian(
      _guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLiquidator(
      _liquidator: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setManager(
      _manager: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMinMargin(
      _minMargin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setNextPriceManager(
      _nextPriceManager: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setParameters(
      _maxShift: PromiseOrValue<BigNumberish>,
      _minProfitTime: PromiseOrValue<BigNumberish>,
      _canUserStake: PromiseOrValue<boolean>,
      _allowPublicLiquidator: PromiseOrValue<boolean>,
      _isManagerOnlyForOpen: PromiseOrValue<boolean>,
      _isManagerOnlyForClose: PromiseOrValue<boolean>,
      _exposureMultiplier: PromiseOrValue<BigNumberish>,
      _utilizationMultiplier: PromiseOrValue<BigNumberish>,
      _maxExposureMultiplier: PromiseOrValue<BigNumberish>,
      _liquidationBounty: PromiseOrValue<BigNumberish>,
      _liquidationThreshold: PromiseOrValue<BigNumberish>,
      _shiftDivider: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRewardRatio(
      _protocolRewardRatio: PromiseOrValue<BigNumberish>,
      _pikaRewardRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTradeEnabled(
      _isTradeEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    shiftDivider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    totalOpenInterest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateProduct(
      productId: PromiseOrValue<BigNumberish>,
      _product: PikaPerpV3.ProductStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateVault(
      _vault: PikaPerpV3.VaultStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    utilizationMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultRewardDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultTokenReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
