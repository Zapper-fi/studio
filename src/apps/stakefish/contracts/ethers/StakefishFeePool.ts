/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace IStakefishTransactionFeePool {
  export type ComputationCacheStruct = {
    lastCacheUpdateTime: PromiseOrValue<BigNumberish>;
    totalValidatorUptime: PromiseOrValue<BigNumberish>;
    totalUncollectedCommission: PromiseOrValue<BigNumberish>;
    totalUncollectedUserBalance: PromiseOrValue<BigNumberish>;
    totalUnsentUserRewards: PromiseOrValue<BigNumberish>;
  };

  export type ComputationCacheStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    lastCacheUpdateTime: BigNumber;
    totalValidatorUptime: BigNumber;
    totalUncollectedCommission: BigNumber;
    totalUncollectedUserBalance: BigNumber;
    totalUnsentUserRewards: BigNumber;
  };
}

export interface StakefishFeePoolInterface extends utils.Interface {
  functions: {
    'bulkJoinPool(bytes,address[],uint256)': FunctionFragment;
    'bulkPartPool(bytes,uint256)': FunctionFragment;
    'changeOperator(address)': FunctionFragment;
    'closePoolForWithdrawal()': FunctionFragment;
    'collectPoolCommission(address,uint256)': FunctionFragment;
    'collectReward(address,uint256)': FunctionFragment;
    'emergencyWithdraw(address[],address[],uint256)': FunctionFragment;
    'getPoolState()': FunctionFragment;
    'initialize(address,address,address)': FunctionFragment;
    'joinPool(bytes,address,uint256)': FunctionFragment;
    'openPoolForWithdrawal()': FunctionFragment;
    'partPool(bytes,uint256)': FunctionFragment;
    'pendingReward(address)': FunctionFragment;
    'proxiableUUID()': FunctionFragment;
    'setCommissionRate(uint256)': FunctionFragment;
    'stakefishCommissionRateBasisPoints()': FunctionFragment;
    'totalValidators()': FunctionFragment;
    'upgradeTo(address)': FunctionFragment;
    'upgradeToAndCall(address,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'bulkJoinPool'
      | 'bulkPartPool'
      | 'changeOperator'
      | 'closePoolForWithdrawal'
      | 'collectPoolCommission'
      | 'collectReward'
      | 'emergencyWithdraw'
      | 'getPoolState'
      | 'initialize'
      | 'joinPool'
      | 'openPoolForWithdrawal'
      | 'partPool'
      | 'pendingReward'
      | 'proxiableUUID'
      | 'setCommissionRate'
      | 'stakefishCommissionRateBasisPoints'
      | 'totalValidators'
      | 'upgradeTo'
      | 'upgradeToAndCall',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'bulkJoinPool',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>[], PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'bulkPartPool',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'changeOperator', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'closePoolForWithdrawal', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'collectPoolCommission',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'collectReward',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'emergencyWithdraw',
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[], PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getPoolState', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'joinPool',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'openPoolForWithdrawal', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'partPool',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'pendingReward', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'proxiableUUID', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setCommissionRate', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'stakefishCommissionRateBasisPoints', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalValidators', values?: undefined): string;
  encodeFunctionData(functionFragment: 'upgradeTo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;

  decodeFunctionResult(functionFragment: 'bulkJoinPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bulkPartPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closePoolForWithdrawal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collectPoolCommission', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collectReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'joinPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'openPoolForWithdrawal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'partPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proxiableUUID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCommissionRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakefishCommissionRateBasisPoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalValidators', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeToAndCall', data: BytesLike): Result;

  events: {
    'AdminChanged(address,address)': EventFragment;
    'BeaconUpgraded(address)': EventFragment;
    'CommissionRateChanged(uint256)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'OperatorChanged(address)': EventFragment;
    'Upgraded(address)': EventFragment;
    'ValidatorBulkJoined(bytes,address[],uint256)': EventFragment;
    'ValidatorBulkParted(bytes,address[],uint256)': EventFragment;
    'ValidatorJoined(bytes,address,uint256)': EventFragment;
    'ValidatorParted(bytes,address,uint256)': EventFragment;
    'ValidatorRewardCollected(address,address,uint256,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CommissionRateChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OperatorChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ValidatorBulkJoined'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ValidatorBulkParted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ValidatorJoined'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ValidatorParted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ValidatorRewardCollected'): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<[string, string], AdminChangedEventObject>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<[string], BeaconUpgradedEventObject>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface CommissionRateChangedEventObject {
  newRate: BigNumber;
}
export type CommissionRateChangedEvent = TypedEvent<[BigNumber], CommissionRateChangedEventObject>;

export type CommissionRateChangedEventFilter = TypedEventFilter<CommissionRateChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OperatorChangedEventObject {
  newOperator: string;
}
export type OperatorChangedEvent = TypedEvent<[string], OperatorChangedEventObject>;

export type OperatorChangedEventFilter = TypedEventFilter<OperatorChangedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface ValidatorBulkJoinedEventObject {
  validatorPubkeyArray: string;
  depositorAddress: string[];
  time: BigNumber;
}
export type ValidatorBulkJoinedEvent = TypedEvent<[string, string[], BigNumber], ValidatorBulkJoinedEventObject>;

export type ValidatorBulkJoinedEventFilter = TypedEventFilter<ValidatorBulkJoinedEvent>;

export interface ValidatorBulkPartedEventObject {
  validatorPubkeyArray: string;
  depositorAddress: string[];
  time: BigNumber;
}
export type ValidatorBulkPartedEvent = TypedEvent<[string, string[], BigNumber], ValidatorBulkPartedEventObject>;

export type ValidatorBulkPartedEventFilter = TypedEventFilter<ValidatorBulkPartedEvent>;

export interface ValidatorJoinedEventObject {
  validatorPubkey: string;
  depositorAddress: string;
  ts: BigNumber;
}
export type ValidatorJoinedEvent = TypedEvent<[string, string, BigNumber], ValidatorJoinedEventObject>;

export type ValidatorJoinedEventFilter = TypedEventFilter<ValidatorJoinedEvent>;

export interface ValidatorPartedEventObject {
  validatorPubkey: string;
  depositorAddress: string;
  ts: BigNumber;
}
export type ValidatorPartedEvent = TypedEvent<[string, string, BigNumber], ValidatorPartedEventObject>;

export type ValidatorPartedEventFilter = TypedEventFilter<ValidatorPartedEvent>;

export interface ValidatorRewardCollectedEventObject {
  depositorAddress: string;
  beneficiary: string;
  rewardAmount: BigNumber;
  requester: string;
}
export type ValidatorRewardCollectedEvent = TypedEvent<
  [string, string, BigNumber, string],
  ValidatorRewardCollectedEventObject
>;

export type ValidatorRewardCollectedEventFilter = TypedEventFilter<ValidatorRewardCollectedEvent>;

export interface StakefishFeePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakefishFeePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bulkJoinPool(
      validatorPubkeyArray: PromiseOrValue<BytesLike>,
      depositorAddresses: PromiseOrValue<string>[],
      ts: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    bulkPartPool(
      validatorPubkeyArray: PromiseOrValue<BytesLike>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeOperator(
      newOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    closePoolForWithdrawal(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    collectPoolCommission(
      beneficiary: PromiseOrValue<string>,
      amountRequested: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    collectReward(
      beneficiary: PromiseOrValue<string>,
      amountRequested: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      depositorAddresses: PromiseOrValue<string>[],
      beneficiaries: PromiseOrValue<string>[],
      maxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getPoolState(overrides?: CallOverrides): Promise<[IStakefishTransactionFeePool.ComputationCacheStructOutput]>;

    initialize(
      operatorAddress_: PromiseOrValue<string>,
      adminAddress_: PromiseOrValue<string>,
      devAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    joinPool(
      validatorPubKey: PromiseOrValue<BytesLike>,
      depositor: PromiseOrValue<string>,
      joinTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    openPoolForWithdrawal(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    partPool(
      validatorPubKey: PromiseOrValue<BytesLike>,
      leaveTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    pendingReward(depositorAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    setCommissionRate(
      commissionRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stakefishCommissionRateBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalValidators(overrides?: CallOverrides): Promise<[BigNumber]>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  bulkJoinPool(
    validatorPubkeyArray: PromiseOrValue<BytesLike>,
    depositorAddresses: PromiseOrValue<string>[],
    ts: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  bulkPartPool(
    validatorPubkeyArray: PromiseOrValue<BytesLike>,
    ts: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeOperator(
    newOperator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  closePoolForWithdrawal(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  collectPoolCommission(
    beneficiary: PromiseOrValue<string>,
    amountRequested: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  collectReward(
    beneficiary: PromiseOrValue<string>,
    amountRequested: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    depositorAddresses: PromiseOrValue<string>[],
    beneficiaries: PromiseOrValue<string>[],
    maxAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getPoolState(overrides?: CallOverrides): Promise<IStakefishTransactionFeePool.ComputationCacheStructOutput>;

  initialize(
    operatorAddress_: PromiseOrValue<string>,
    adminAddress_: PromiseOrValue<string>,
    devAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  joinPool(
    validatorPubKey: PromiseOrValue<BytesLike>,
    depositor: PromiseOrValue<string>,
    joinTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  openPoolForWithdrawal(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  partPool(
    validatorPubKey: PromiseOrValue<BytesLike>,
    leaveTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  pendingReward(depositorAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  setCommissionRate(
    commissionRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stakefishCommissionRateBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  totalValidators(overrides?: CallOverrides): Promise<BigNumber>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    bulkJoinPool(
      validatorPubkeyArray: PromiseOrValue<BytesLike>,
      depositorAddresses: PromiseOrValue<string>[],
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    bulkPartPool(
      validatorPubkeyArray: PromiseOrValue<BytesLike>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    changeOperator(newOperator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    closePoolForWithdrawal(overrides?: CallOverrides): Promise<void>;

    collectPoolCommission(
      beneficiary: PromiseOrValue<string>,
      amountRequested: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    collectReward(
      beneficiary: PromiseOrValue<string>,
      amountRequested: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    emergencyWithdraw(
      depositorAddresses: PromiseOrValue<string>[],
      beneficiaries: PromiseOrValue<string>[],
      maxAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getPoolState(overrides?: CallOverrides): Promise<IStakefishTransactionFeePool.ComputationCacheStructOutput>;

    initialize(
      operatorAddress_: PromiseOrValue<string>,
      adminAddress_: PromiseOrValue<string>,
      devAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    joinPool(
      validatorPubKey: PromiseOrValue<BytesLike>,
      depositor: PromiseOrValue<string>,
      joinTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    openPoolForWithdrawal(overrides?: CallOverrides): Promise<void>;

    partPool(
      validatorPubKey: PromiseOrValue<BytesLike>,
      leaveTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    pendingReward(depositorAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    setCommissionRate(commissionRate: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    stakefishCommissionRateBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    totalValidators(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'AdminChanged(address,address)'(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
    AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;

    'BeaconUpgraded(address)'(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;

    'CommissionRateChanged(uint256)'(newRate?: null): CommissionRateChangedEventFilter;
    CommissionRateChanged(newRate?: null): CommissionRateChangedEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'OperatorChanged(address)'(newOperator?: null): OperatorChangedEventFilter;
    OperatorChanged(newOperator?: null): OperatorChangedEventFilter;

    'Upgraded(address)'(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
    Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;

    'ValidatorBulkJoined(bytes,address[],uint256)'(
      validatorPubkeyArray?: null,
      depositorAddress?: null,
      time?: null,
    ): ValidatorBulkJoinedEventFilter;
    ValidatorBulkJoined(
      validatorPubkeyArray?: null,
      depositorAddress?: null,
      time?: null,
    ): ValidatorBulkJoinedEventFilter;

    'ValidatorBulkParted(bytes,address[],uint256)'(
      validatorPubkeyArray?: null,
      depositorAddress?: null,
      time?: null,
    ): ValidatorBulkPartedEventFilter;
    ValidatorBulkParted(
      validatorPubkeyArray?: null,
      depositorAddress?: null,
      time?: null,
    ): ValidatorBulkPartedEventFilter;

    'ValidatorJoined(bytes,address,uint256)'(
      validatorPubkey?: PromiseOrValue<BytesLike> | null,
      depositorAddress?: PromiseOrValue<string> | null,
      ts?: null,
    ): ValidatorJoinedEventFilter;
    ValidatorJoined(
      validatorPubkey?: PromiseOrValue<BytesLike> | null,
      depositorAddress?: PromiseOrValue<string> | null,
      ts?: null,
    ): ValidatorJoinedEventFilter;

    'ValidatorParted(bytes,address,uint256)'(
      validatorPubkey?: PromiseOrValue<BytesLike> | null,
      depositorAddress?: PromiseOrValue<string> | null,
      ts?: null,
    ): ValidatorPartedEventFilter;
    ValidatorParted(
      validatorPubkey?: PromiseOrValue<BytesLike> | null,
      depositorAddress?: PromiseOrValue<string> | null,
      ts?: null,
    ): ValidatorPartedEventFilter;

    'ValidatorRewardCollected(address,address,uint256,address)'(
      depositorAddress?: PromiseOrValue<string> | null,
      beneficiary?: null,
      rewardAmount?: null,
      requester?: null,
    ): ValidatorRewardCollectedEventFilter;
    ValidatorRewardCollected(
      depositorAddress?: PromiseOrValue<string> | null,
      beneficiary?: null,
      rewardAmount?: null,
      requester?: null,
    ): ValidatorRewardCollectedEventFilter;
  };

  estimateGas: {
    bulkJoinPool(
      validatorPubkeyArray: PromiseOrValue<BytesLike>,
      depositorAddresses: PromiseOrValue<string>[],
      ts: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    bulkPartPool(
      validatorPubkeyArray: PromiseOrValue<BytesLike>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeOperator(
      newOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    closePoolForWithdrawal(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    collectPoolCommission(
      beneficiary: PromiseOrValue<string>,
      amountRequested: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    collectReward(
      beneficiary: PromiseOrValue<string>,
      amountRequested: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    emergencyWithdraw(
      depositorAddresses: PromiseOrValue<string>[],
      beneficiaries: PromiseOrValue<string>[],
      maxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getPoolState(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      operatorAddress_: PromiseOrValue<string>,
      adminAddress_: PromiseOrValue<string>,
      devAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    joinPool(
      validatorPubKey: PromiseOrValue<BytesLike>,
      depositor: PromiseOrValue<string>,
      joinTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    openPoolForWithdrawal(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    partPool(
      validatorPubKey: PromiseOrValue<BytesLike>,
      leaveTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    pendingReward(depositorAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    setCommissionRate(
      commissionRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stakefishCommissionRateBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    totalValidators(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bulkJoinPool(
      validatorPubkeyArray: PromiseOrValue<BytesLike>,
      depositorAddresses: PromiseOrValue<string>[],
      ts: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    bulkPartPool(
      validatorPubkeyArray: PromiseOrValue<BytesLike>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeOperator(
      newOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    closePoolForWithdrawal(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    collectPoolCommission(
      beneficiary: PromiseOrValue<string>,
      amountRequested: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    collectReward(
      beneficiary: PromiseOrValue<string>,
      amountRequested: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      depositorAddresses: PromiseOrValue<string>[],
      beneficiaries: PromiseOrValue<string>[],
      maxAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getPoolState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      operatorAddress_: PromiseOrValue<string>,
      adminAddress_: PromiseOrValue<string>,
      devAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    joinPool(
      validatorPubKey: PromiseOrValue<BytesLike>,
      depositor: PromiseOrValue<string>,
      joinTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    openPoolForWithdrawal(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    partPool(
      validatorPubKey: PromiseOrValue<BytesLike>,
      leaveTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    pendingReward(depositorAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCommissionRate(
      commissionRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stakefishCommissionRateBasisPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
