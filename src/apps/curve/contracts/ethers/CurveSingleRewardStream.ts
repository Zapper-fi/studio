/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface CurveSingleRewardStreamInterface extends utils.Interface {
  functions: {
    'add_receiver(address)': FunctionFragment;
    'remove_receiver(address)': FunctionFragment;
    'get_reward()': FunctionFragment;
    'notify_reward_amount(uint256)': FunctionFragment;
    'set_reward_duration(uint256)': FunctionFragment;
    'set_reward_distributor(address)': FunctionFragment;
    'commit_transfer_ownership(address)': FunctionFragment;
    'accept_transfer_ownership()': FunctionFragment;
    'owner()': FunctionFragment;
    'future_owner()': FunctionFragment;
    'distributor()': FunctionFragment;
    'reward_token()': FunctionFragment;
    'period_finish()': FunctionFragment;
    'reward_rate()': FunctionFragment;
    'reward_duration()': FunctionFragment;
    'last_update_time()': FunctionFragment;
    'reward_per_receiver_total()': FunctionFragment;
    'receiver_count()': FunctionFragment;
    'reward_receivers(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'add_receiver'
      | 'remove_receiver'
      | 'get_reward'
      | 'notify_reward_amount'
      | 'set_reward_duration'
      | 'set_reward_distributor'
      | 'commit_transfer_ownership'
      | 'accept_transfer_ownership'
      | 'owner'
      | 'future_owner'
      | 'distributor'
      | 'reward_token'
      | 'period_finish'
      | 'reward_rate'
      | 'reward_duration'
      | 'last_update_time'
      | 'reward_per_receiver_total'
      | 'receiver_count'
      | 'reward_receivers',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'add_receiver', values: [string]): string;
  encodeFunctionData(functionFragment: 'remove_receiver', values: [string]): string;
  encodeFunctionData(functionFragment: 'get_reward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'notify_reward_amount', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'set_reward_duration', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'set_reward_distributor', values: [string]): string;
  encodeFunctionData(functionFragment: 'commit_transfer_ownership', values: [string]): string;
  encodeFunctionData(functionFragment: 'accept_transfer_ownership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'future_owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'distributor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reward_token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'period_finish', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reward_rate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reward_duration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'last_update_time', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reward_per_receiver_total', values?: undefined): string;
  encodeFunctionData(functionFragment: 'receiver_count', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reward_receivers', values: [string]): string;

  decodeFunctionResult(functionFragment: 'add_receiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'remove_receiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'get_reward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'notify_reward_amount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_reward_duration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_reward_distributor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'commit_transfer_ownership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accept_transfer_ownership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'future_owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distributor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward_token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'period_finish', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward_rate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward_duration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'last_update_time', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward_per_receiver_total', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'receiver_count', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward_receivers', data: BytesLike): Result;

  events: {};
}

export interface CurveSingleRewardStream extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CurveSingleRewardStreamInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add_receiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    remove_receiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    get_reward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    notify_reward_amount(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    set_reward_duration(
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    set_reward_distributor(
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    commit_transfer_ownership(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    accept_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    future_owner(overrides?: CallOverrides): Promise<[string]>;

    distributor(overrides?: CallOverrides): Promise<[string]>;

    reward_token(overrides?: CallOverrides): Promise<[string]>;

    period_finish(overrides?: CallOverrides): Promise<[BigNumber]>;

    reward_rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    reward_duration(overrides?: CallOverrides): Promise<[BigNumber]>;

    last_update_time(overrides?: CallOverrides): Promise<[BigNumber]>;

    reward_per_receiver_total(overrides?: CallOverrides): Promise<[BigNumber]>;

    receiver_count(overrides?: CallOverrides): Promise<[BigNumber]>;

    reward_receivers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  add_receiver(
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  remove_receiver(
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  get_reward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  notify_reward_amount(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  set_reward_duration(
    _duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  set_reward_distributor(
    _distributor: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  commit_transfer_ownership(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  accept_transfer_ownership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  future_owner(overrides?: CallOverrides): Promise<string>;

  distributor(overrides?: CallOverrides): Promise<string>;

  reward_token(overrides?: CallOverrides): Promise<string>;

  period_finish(overrides?: CallOverrides): Promise<BigNumber>;

  reward_rate(overrides?: CallOverrides): Promise<BigNumber>;

  reward_duration(overrides?: CallOverrides): Promise<BigNumber>;

  last_update_time(overrides?: CallOverrides): Promise<BigNumber>;

  reward_per_receiver_total(overrides?: CallOverrides): Promise<BigNumber>;

  receiver_count(overrides?: CallOverrides): Promise<BigNumber>;

  reward_receivers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    add_receiver(_receiver: string, overrides?: CallOverrides): Promise<void>;

    remove_receiver(_receiver: string, overrides?: CallOverrides): Promise<void>;

    get_reward(overrides?: CallOverrides): Promise<void>;

    notify_reward_amount(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    set_reward_duration(_duration: BigNumberish, overrides?: CallOverrides): Promise<void>;

    set_reward_distributor(_distributor: string, overrides?: CallOverrides): Promise<void>;

    commit_transfer_ownership(_owner: string, overrides?: CallOverrides): Promise<void>;

    accept_transfer_ownership(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    future_owner(overrides?: CallOverrides): Promise<string>;

    distributor(overrides?: CallOverrides): Promise<string>;

    reward_token(overrides?: CallOverrides): Promise<string>;

    period_finish(overrides?: CallOverrides): Promise<BigNumber>;

    reward_rate(overrides?: CallOverrides): Promise<BigNumber>;

    reward_duration(overrides?: CallOverrides): Promise<BigNumber>;

    last_update_time(overrides?: CallOverrides): Promise<BigNumber>;

    reward_per_receiver_total(overrides?: CallOverrides): Promise<BigNumber>;

    receiver_count(overrides?: CallOverrides): Promise<BigNumber>;

    reward_receivers(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    add_receiver(_receiver: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    remove_receiver(_receiver: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    get_reward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    notify_reward_amount(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    set_reward_duration(
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    set_reward_distributor(
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    commit_transfer_ownership(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    accept_transfer_ownership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    future_owner(overrides?: CallOverrides): Promise<BigNumber>;

    distributor(overrides?: CallOverrides): Promise<BigNumber>;

    reward_token(overrides?: CallOverrides): Promise<BigNumber>;

    period_finish(overrides?: CallOverrides): Promise<BigNumber>;

    reward_rate(overrides?: CallOverrides): Promise<BigNumber>;

    reward_duration(overrides?: CallOverrides): Promise<BigNumber>;

    last_update_time(overrides?: CallOverrides): Promise<BigNumber>;

    reward_per_receiver_total(overrides?: CallOverrides): Promise<BigNumber>;

    receiver_count(overrides?: CallOverrides): Promise<BigNumber>;

    reward_receivers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    add_receiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    remove_receiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    get_reward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    notify_reward_amount(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    set_reward_duration(
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    set_reward_distributor(
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    commit_transfer_ownership(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    accept_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    period_finish(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    last_update_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_per_receiver_total(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiver_count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_receivers(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
