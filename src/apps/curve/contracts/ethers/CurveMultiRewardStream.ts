/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface CurveMultiRewardStreamInterface extends utils.Interface {
  functions: {
    'add_reward(address,address,uint256)': FunctionFragment;
    'remove_reward(address)': FunctionFragment;
    'set_receiver(address)': FunctionFragment;
    'get_reward()': FunctionFragment;
    'notify_reward_amount(address)': FunctionFragment;
    'set_reward_duration(address,uint256)': FunctionFragment;
    'set_reward_distributor(address,address)': FunctionFragment;
    'commit_transfer_ownership(address)': FunctionFragment;
    'accept_transfer_ownership()': FunctionFragment;
    'owner()': FunctionFragment;
    'future_owner()': FunctionFragment;
    'reward_receiver()': FunctionFragment;
    'reward_tokens(uint256)': FunctionFragment;
    'reward_count()': FunctionFragment;
    'reward_data(address)': FunctionFragment;
    'last_update_time()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'add_reward'
      | 'remove_reward'
      | 'set_receiver'
      | 'get_reward'
      | 'notify_reward_amount'
      | 'set_reward_duration'
      | 'set_reward_distributor'
      | 'commit_transfer_ownership'
      | 'accept_transfer_ownership'
      | 'owner'
      | 'future_owner'
      | 'reward_receiver'
      | 'reward_tokens'
      | 'reward_count'
      | 'reward_data'
      | 'last_update_time',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'add_reward',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'remove_reward', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'set_receiver', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'get_reward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'notify_reward_amount', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'set_reward_duration',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'set_reward_distributor',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'commit_transfer_ownership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'accept_transfer_ownership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'future_owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reward_receiver', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reward_tokens', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'reward_count', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reward_data', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'last_update_time', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'add_reward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'remove_reward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_receiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'get_reward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'notify_reward_amount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_reward_duration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_reward_distributor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'commit_transfer_ownership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accept_transfer_ownership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'future_owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward_receiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward_tokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward_count', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward_data', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'last_update_time', data: BytesLike): Result;

  events: {};
}

export interface CurveMultiRewardStream extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CurveMultiRewardStreamInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add_reward(
      _token: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    remove_reward(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    set_receiver(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    get_reward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    notify_reward_amount(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    set_reward_duration(
      _token: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    set_reward_distributor(
      _token: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    commit_transfer_ownership(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    accept_transfer_ownership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    future_owner(overrides?: CallOverrides): Promise<[string]>;

    reward_receiver(overrides?: CallOverrides): Promise<[string]>;

    reward_tokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    reward_count(overrides?: CallOverrides): Promise<[BigNumber]>;

    reward_data(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        distributor: string;
        period_finish: BigNumber;
        rate: BigNumber;
        duration: BigNumber;
        received: BigNumber;
        paid: BigNumber;
      }
    >;

    last_update_time(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  add_reward(
    _token: PromiseOrValue<string>,
    _distributor: PromiseOrValue<string>,
    _duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  remove_reward(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  set_receiver(
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  get_reward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  notify_reward_amount(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  set_reward_duration(
    _token: PromiseOrValue<string>,
    _duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  set_reward_distributor(
    _token: PromiseOrValue<string>,
    _distributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  commit_transfer_ownership(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  accept_transfer_ownership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  future_owner(overrides?: CallOverrides): Promise<string>;

  reward_receiver(overrides?: CallOverrides): Promise<string>;

  reward_tokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  reward_count(overrides?: CallOverrides): Promise<BigNumber>;

  reward_data(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      distributor: string;
      period_finish: BigNumber;
      rate: BigNumber;
      duration: BigNumber;
      received: BigNumber;
      paid: BigNumber;
    }
  >;

  last_update_time(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    add_reward(
      _token: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    remove_reward(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    set_receiver(_receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    get_reward(overrides?: CallOverrides): Promise<void>;

    notify_reward_amount(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    set_reward_duration(
      _token: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    set_reward_distributor(
      _token: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    commit_transfer_ownership(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    accept_transfer_ownership(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    future_owner(overrides?: CallOverrides): Promise<string>;

    reward_receiver(overrides?: CallOverrides): Promise<string>;

    reward_tokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    reward_count(overrides?: CallOverrides): Promise<BigNumber>;

    reward_data(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        distributor: string;
        period_finish: BigNumber;
        rate: BigNumber;
        duration: BigNumber;
        received: BigNumber;
        paid: BigNumber;
      }
    >;

    last_update_time(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    add_reward(
      _token: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    remove_reward(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    set_receiver(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    get_reward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    notify_reward_amount(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    set_reward_duration(
      _token: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    set_reward_distributor(
      _token: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    commit_transfer_ownership(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    accept_transfer_ownership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    future_owner(overrides?: CallOverrides): Promise<BigNumber>;

    reward_receiver(overrides?: CallOverrides): Promise<BigNumber>;

    reward_tokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    reward_count(overrides?: CallOverrides): Promise<BigNumber>;

    reward_data(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    last_update_time(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    add_reward(
      _token: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    remove_reward(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    set_receiver(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    get_reward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    notify_reward_amount(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    set_reward_duration(
      _token: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    set_reward_distributor(
      _token: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    commit_transfer_ownership(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    accept_transfer_ownership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_receiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_tokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_data(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    last_update_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
