/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface CurveMinterInterface extends utils.Interface {
  functions: {
    'mint(address)': FunctionFragment;
    'mint_many(address[8])': FunctionFragment;
    'mint_for(address,address)': FunctionFragment;
    'toggle_approve_mint(address)': FunctionFragment;
    'token()': FunctionFragment;
    'controller()': FunctionFragment;
    'minted(address,address)': FunctionFragment;
    'allowed_to_mint_for(address,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'mint'
      | 'mint_many'
      | 'mint_for'
      | 'toggle_approve_mint'
      | 'token'
      | 'controller'
      | 'minted'
      | 'allowed_to_mint_for',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'mint', values: [string]): string;
  encodeFunctionData(functionFragment: 'mint_many', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'mint_for', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'toggle_approve_mint', values: [string]): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'controller', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minted', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'allowed_to_mint_for', values: [string, string]): string;

  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint_many', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint_for', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'toggle_approve_mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'controller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowed_to_mint_for', data: BytesLike): Result;

  events: {
    'Minted(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Minted'): EventFragment;
}

export interface MintedEventObject {
  recipient: string;
  gauge: string;
  minted: BigNumber;
}
export type MintedEvent = TypedEvent<[string, string, BigNumber], MintedEventObject>;

export type MintedEventFilter = TypedEventFilter<MintedEvent>;

export interface CurveMinter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CurveMinterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    mint(gauge_addr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    mint_many(
      gauge_addrs: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    mint_for(
      gauge_addr: string,
      _for: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    toggle_approve_mint(
      minting_user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    minted(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    allowed_to_mint_for(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  mint(gauge_addr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  mint_many(
    gauge_addrs: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  mint_for(
    gauge_addr: string,
    _for: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  toggle_approve_mint(
    minting_user: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  controller(overrides?: CallOverrides): Promise<string>;

  minted(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  allowed_to_mint_for(arg0: string, arg1: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    mint(gauge_addr: string, overrides?: CallOverrides): Promise<void>;

    mint_many(gauge_addrs: string[], overrides?: CallOverrides): Promise<void>;

    mint_for(gauge_addr: string, _for: string, overrides?: CallOverrides): Promise<void>;

    toggle_approve_mint(minting_user: string, overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    controller(overrides?: CallOverrides): Promise<string>;

    minted(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowed_to_mint_for(arg0: string, arg1: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    'Minted(address,address,uint256)'(recipient?: string | null, gauge?: null, minted?: null): MintedEventFilter;
    Minted(recipient?: string | null, gauge?: null, minted?: null): MintedEventFilter;
  };

  estimateGas: {
    mint(gauge_addr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    mint_many(gauge_addrs: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    mint_for(
      gauge_addr: string,
      _for: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    toggle_approve_mint(
      minting_user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    minted(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowed_to_mint_for(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    mint(
      gauge_addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    mint_many(
      gauge_addrs: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    mint_for(
      gauge_addr: string,
      _for: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    toggle_approve_mint(
      minting_user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minted(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowed_to_mint_for(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
