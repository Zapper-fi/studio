/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface CurveCryptoFactoryInterface extends utils.Interface {
  functions: {
    'deploy_pool(string,string,address[2],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)': FunctionFragment;
    'deploy_gauge(address)': FunctionFragment;
    'set_fee_receiver(address)': FunctionFragment;
    'set_pool_implementation(address)': FunctionFragment;
    'set_token_implementation(address)': FunctionFragment;
    'set_gauge_implementation(address)': FunctionFragment;
    'commit_transfer_ownership(address)': FunctionFragment;
    'accept_transfer_ownership()': FunctionFragment;
    'find_pool_for_coins(address,address)': FunctionFragment;
    'find_pool_for_coins(address,address,uint256)': FunctionFragment;
    'get_coins(address)': FunctionFragment;
    'get_decimals(address)': FunctionFragment;
    'get_balances(address)': FunctionFragment;
    'get_coin_indices(address,address,address)': FunctionFragment;
    'get_gauge(address)': FunctionFragment;
    'get_eth_index(address)': FunctionFragment;
    'get_token(address)': FunctionFragment;
    'admin()': FunctionFragment;
    'future_admin()': FunctionFragment;
    'fee_receiver()': FunctionFragment;
    'pool_implementation()': FunctionFragment;
    'token_implementation()': FunctionFragment;
    'gauge_implementation()': FunctionFragment;
    'pool_count()': FunctionFragment;
    'pool_list(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'deploy_pool'
      | 'deploy_gauge'
      | 'set_fee_receiver'
      | 'set_pool_implementation'
      | 'set_token_implementation'
      | 'set_gauge_implementation'
      | 'commit_transfer_ownership'
      | 'accept_transfer_ownership'
      | 'find_pool_for_coins(address,address)'
      | 'find_pool_for_coins(address,address,uint256)'
      | 'get_coins'
      | 'get_decimals'
      | 'get_balances'
      | 'get_coin_indices'
      | 'get_gauge'
      | 'get_eth_index'
      | 'get_token'
      | 'admin'
      | 'future_admin'
      | 'fee_receiver'
      | 'pool_implementation'
      | 'token_implementation'
      | 'gauge_implementation'
      | 'pool_count'
      | 'pool_list',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'deploy_pool',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      [PromiseOrValue<string>, PromiseOrValue<string>],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'deploy_gauge', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'set_fee_receiver', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'set_pool_implementation', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'set_token_implementation', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'set_gauge_implementation', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'commit_transfer_ownership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'accept_transfer_ownership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'find_pool_for_coins(address,address)',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'find_pool_for_coins(address,address,uint256)',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'get_coins', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'get_decimals', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'get_balances', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'get_coin_indices',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'get_gauge', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'get_eth_index', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'get_token', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'future_admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fee_receiver', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pool_implementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token_implementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'gauge_implementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pool_count', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pool_list', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'deploy_pool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deploy_gauge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_fee_receiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_pool_implementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_token_implementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_gauge_implementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'commit_transfer_ownership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accept_transfer_ownership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'find_pool_for_coins(address,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'find_pool_for_coins(address,address,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'get_coins', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'get_decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'get_balances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'get_coin_indices', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'get_gauge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'get_eth_index', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'get_token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'future_admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fee_receiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pool_implementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token_implementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gauge_implementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pool_count', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pool_list', data: BytesLike): Result;

  events: {
    'CryptoPoolDeployed(address,address[2],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)': EventFragment;
    'LiquidityGaugeDeployed(address,address,address)': EventFragment;
    'UpdateFeeReceiver(address,address)': EventFragment;
    'UpdatePoolImplementation(address,address)': EventFragment;
    'UpdateTokenImplementation(address,address)': EventFragment;
    'UpdateGaugeImplementation(address,address)': EventFragment;
    'TransferOwnership(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CryptoPoolDeployed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidityGaugeDeployed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateFeeReceiver'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatePoolImplementation'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateTokenImplementation'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateGaugeImplementation'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferOwnership'): EventFragment;
}

export interface CryptoPoolDeployedEventObject {
  token: string;
  coins: [string, string];
  A: BigNumber;
  gamma: BigNumber;
  mid_fee: BigNumber;
  out_fee: BigNumber;
  allowed_extra_profit: BigNumber;
  fee_gamma: BigNumber;
  adjustment_step: BigNumber;
  admin_fee: BigNumber;
  ma_half_time: BigNumber;
  initial_price: BigNumber;
  deployer: string;
}
export type CryptoPoolDeployedEvent = TypedEvent<
  [
    string,
    [string, string],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
  ],
  CryptoPoolDeployedEventObject
>;

export type CryptoPoolDeployedEventFilter = TypedEventFilter<CryptoPoolDeployedEvent>;

export interface LiquidityGaugeDeployedEventObject {
  pool: string;
  token: string;
  gauge: string;
}
export type LiquidityGaugeDeployedEvent = TypedEvent<[string, string, string], LiquidityGaugeDeployedEventObject>;

export type LiquidityGaugeDeployedEventFilter = TypedEventFilter<LiquidityGaugeDeployedEvent>;

export interface UpdateFeeReceiverEventObject {
  _old_fee_receiver: string;
  _new_fee_receiver: string;
}
export type UpdateFeeReceiverEvent = TypedEvent<[string, string], UpdateFeeReceiverEventObject>;

export type UpdateFeeReceiverEventFilter = TypedEventFilter<UpdateFeeReceiverEvent>;

export interface UpdatePoolImplementationEventObject {
  _old_pool_implementation: string;
  _new_pool_implementation: string;
}
export type UpdatePoolImplementationEvent = TypedEvent<[string, string], UpdatePoolImplementationEventObject>;

export type UpdatePoolImplementationEventFilter = TypedEventFilter<UpdatePoolImplementationEvent>;

export interface UpdateTokenImplementationEventObject {
  _old_token_implementation: string;
  _new_token_implementation: string;
}
export type UpdateTokenImplementationEvent = TypedEvent<[string, string], UpdateTokenImplementationEventObject>;

export type UpdateTokenImplementationEventFilter = TypedEventFilter<UpdateTokenImplementationEvent>;

export interface UpdateGaugeImplementationEventObject {
  _old_gauge_implementation: string;
  _new_gauge_implementation: string;
}
export type UpdateGaugeImplementationEvent = TypedEvent<[string, string], UpdateGaugeImplementationEventObject>;

export type UpdateGaugeImplementationEventFilter = TypedEventFilter<UpdateGaugeImplementationEvent>;

export interface TransferOwnershipEventObject {
  _old_owner: string;
  _new_owner: string;
}
export type TransferOwnershipEvent = TypedEvent<[string, string], TransferOwnershipEventObject>;

export type TransferOwnershipEventFilter = TypedEventFilter<TransferOwnershipEvent>;

export interface CurveCryptoFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CurveCryptoFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deploy_pool(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _coins: [PromiseOrValue<string>, PromiseOrValue<string>],
      A: PromiseOrValue<BigNumberish>,
      gamma: PromiseOrValue<BigNumberish>,
      mid_fee: PromiseOrValue<BigNumberish>,
      out_fee: PromiseOrValue<BigNumberish>,
      allowed_extra_profit: PromiseOrValue<BigNumberish>,
      fee_gamma: PromiseOrValue<BigNumberish>,
      adjustment_step: PromiseOrValue<BigNumberish>,
      admin_fee: PromiseOrValue<BigNumberish>,
      ma_half_time: PromiseOrValue<BigNumberish>,
      initial_price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deploy_gauge(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    set_fee_receiver(
      _fee_receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    set_pool_implementation(
      _pool_implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    set_token_implementation(
      _token_implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    set_gauge_implementation(
      _gauge_implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    commit_transfer_ownership(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    accept_transfer_ownership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    'find_pool_for_coins(address,address)'(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'find_pool_for_coins(address,address,uint256)'(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    get_coins(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[[string, string]]>;

    get_decimals(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[[BigNumber, BigNumber]]>;

    get_balances(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[[BigNumber, BigNumber]]>;

    get_coin_indices(
      _pool: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    get_gauge(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    get_eth_index(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    get_token(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    future_admin(overrides?: CallOverrides): Promise<[string]>;

    fee_receiver(overrides?: CallOverrides): Promise<[string]>;

    pool_implementation(overrides?: CallOverrides): Promise<[string]>;

    token_implementation(overrides?: CallOverrides): Promise<[string]>;

    gauge_implementation(overrides?: CallOverrides): Promise<[string]>;

    pool_count(overrides?: CallOverrides): Promise<[BigNumber]>;

    pool_list(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
  };

  deploy_pool(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _coins: [PromiseOrValue<string>, PromiseOrValue<string>],
    A: PromiseOrValue<BigNumberish>,
    gamma: PromiseOrValue<BigNumberish>,
    mid_fee: PromiseOrValue<BigNumberish>,
    out_fee: PromiseOrValue<BigNumberish>,
    allowed_extra_profit: PromiseOrValue<BigNumberish>,
    fee_gamma: PromiseOrValue<BigNumberish>,
    adjustment_step: PromiseOrValue<BigNumberish>,
    admin_fee: PromiseOrValue<BigNumberish>,
    ma_half_time: PromiseOrValue<BigNumberish>,
    initial_price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deploy_gauge(
    _pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  set_fee_receiver(
    _fee_receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  set_pool_implementation(
    _pool_implementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  set_token_implementation(
    _token_implementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  set_gauge_implementation(
    _gauge_implementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  commit_transfer_ownership(
    _addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  accept_transfer_ownership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  'find_pool_for_coins(address,address)'(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<string>;

  'find_pool_for_coins(address,address,uint256)'(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    i: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  get_coins(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string, string]>;

  get_decimals(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  get_balances(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  get_coin_indices(
    _pool: PromiseOrValue<string>,
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>;

  get_gauge(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  get_eth_index(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  get_token(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  future_admin(overrides?: CallOverrides): Promise<string>;

  fee_receiver(overrides?: CallOverrides): Promise<string>;

  pool_implementation(overrides?: CallOverrides): Promise<string>;

  token_implementation(overrides?: CallOverrides): Promise<string>;

  gauge_implementation(overrides?: CallOverrides): Promise<string>;

  pool_count(overrides?: CallOverrides): Promise<BigNumber>;

  pool_list(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    deploy_pool(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _coins: [PromiseOrValue<string>, PromiseOrValue<string>],
      A: PromiseOrValue<BigNumberish>,
      gamma: PromiseOrValue<BigNumberish>,
      mid_fee: PromiseOrValue<BigNumberish>,
      out_fee: PromiseOrValue<BigNumberish>,
      allowed_extra_profit: PromiseOrValue<BigNumberish>,
      fee_gamma: PromiseOrValue<BigNumberish>,
      adjustment_step: PromiseOrValue<BigNumberish>,
      admin_fee: PromiseOrValue<BigNumberish>,
      ma_half_time: PromiseOrValue<BigNumberish>,
      initial_price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    deploy_gauge(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    set_fee_receiver(_fee_receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    set_pool_implementation(_pool_implementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    set_token_implementation(_token_implementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    set_gauge_implementation(_gauge_implementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    commit_transfer_ownership(_addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    accept_transfer_ownership(overrides?: CallOverrides): Promise<void>;

    'find_pool_for_coins(address,address)'(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>;

    'find_pool_for_coins(address,address,uint256)'(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    get_coins(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string, string]>;

    get_decimals(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    get_balances(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    get_coin_indices(
      _pool: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    get_gauge(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    get_eth_index(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    get_token(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    future_admin(overrides?: CallOverrides): Promise<string>;

    fee_receiver(overrides?: CallOverrides): Promise<string>;

    pool_implementation(overrides?: CallOverrides): Promise<string>;

    token_implementation(overrides?: CallOverrides): Promise<string>;

    gauge_implementation(overrides?: CallOverrides): Promise<string>;

    pool_count(overrides?: CallOverrides): Promise<BigNumber>;

    pool_list(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'CryptoPoolDeployed(address,address[2],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)'(
      token?: null,
      coins?: null,
      A?: null,
      gamma?: null,
      mid_fee?: null,
      out_fee?: null,
      allowed_extra_profit?: null,
      fee_gamma?: null,
      adjustment_step?: null,
      admin_fee?: null,
      ma_half_time?: null,
      initial_price?: null,
      deployer?: null,
    ): CryptoPoolDeployedEventFilter;
    CryptoPoolDeployed(
      token?: null,
      coins?: null,
      A?: null,
      gamma?: null,
      mid_fee?: null,
      out_fee?: null,
      allowed_extra_profit?: null,
      fee_gamma?: null,
      adjustment_step?: null,
      admin_fee?: null,
      ma_half_time?: null,
      initial_price?: null,
      deployer?: null,
    ): CryptoPoolDeployedEventFilter;

    'LiquidityGaugeDeployed(address,address,address)'(
      pool?: null,
      token?: null,
      gauge?: null,
    ): LiquidityGaugeDeployedEventFilter;
    LiquidityGaugeDeployed(pool?: null, token?: null, gauge?: null): LiquidityGaugeDeployedEventFilter;

    'UpdateFeeReceiver(address,address)'(
      _old_fee_receiver?: null,
      _new_fee_receiver?: null,
    ): UpdateFeeReceiverEventFilter;
    UpdateFeeReceiver(_old_fee_receiver?: null, _new_fee_receiver?: null): UpdateFeeReceiverEventFilter;

    'UpdatePoolImplementation(address,address)'(
      _old_pool_implementation?: null,
      _new_pool_implementation?: null,
    ): UpdatePoolImplementationEventFilter;
    UpdatePoolImplementation(
      _old_pool_implementation?: null,
      _new_pool_implementation?: null,
    ): UpdatePoolImplementationEventFilter;

    'UpdateTokenImplementation(address,address)'(
      _old_token_implementation?: null,
      _new_token_implementation?: null,
    ): UpdateTokenImplementationEventFilter;
    UpdateTokenImplementation(
      _old_token_implementation?: null,
      _new_token_implementation?: null,
    ): UpdateTokenImplementationEventFilter;

    'UpdateGaugeImplementation(address,address)'(
      _old_gauge_implementation?: null,
      _new_gauge_implementation?: null,
    ): UpdateGaugeImplementationEventFilter;
    UpdateGaugeImplementation(
      _old_gauge_implementation?: null,
      _new_gauge_implementation?: null,
    ): UpdateGaugeImplementationEventFilter;

    'TransferOwnership(address,address)'(_old_owner?: null, _new_owner?: null): TransferOwnershipEventFilter;
    TransferOwnership(_old_owner?: null, _new_owner?: null): TransferOwnershipEventFilter;
  };

  estimateGas: {
    deploy_pool(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _coins: [PromiseOrValue<string>, PromiseOrValue<string>],
      A: PromiseOrValue<BigNumberish>,
      gamma: PromiseOrValue<BigNumberish>,
      mid_fee: PromiseOrValue<BigNumberish>,
      out_fee: PromiseOrValue<BigNumberish>,
      allowed_extra_profit: PromiseOrValue<BigNumberish>,
      fee_gamma: PromiseOrValue<BigNumberish>,
      adjustment_step: PromiseOrValue<BigNumberish>,
      admin_fee: PromiseOrValue<BigNumberish>,
      ma_half_time: PromiseOrValue<BigNumberish>,
      initial_price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deploy_gauge(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    set_fee_receiver(
      _fee_receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    set_pool_implementation(
      _pool_implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    set_token_implementation(
      _token_implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    set_gauge_implementation(
      _gauge_implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    commit_transfer_ownership(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    accept_transfer_ownership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    'find_pool_for_coins(address,address)'(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'find_pool_for_coins(address,address,uint256)'(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    get_coins(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    get_decimals(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    get_balances(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    get_coin_indices(
      _pool: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    get_gauge(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    get_eth_index(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    get_token(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    future_admin(overrides?: CallOverrides): Promise<BigNumber>;

    fee_receiver(overrides?: CallOverrides): Promise<BigNumber>;

    pool_implementation(overrides?: CallOverrides): Promise<BigNumber>;

    token_implementation(overrides?: CallOverrides): Promise<BigNumber>;

    gauge_implementation(overrides?: CallOverrides): Promise<BigNumber>;

    pool_count(overrides?: CallOverrides): Promise<BigNumber>;

    pool_list(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deploy_pool(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _coins: [PromiseOrValue<string>, PromiseOrValue<string>],
      A: PromiseOrValue<BigNumberish>,
      gamma: PromiseOrValue<BigNumberish>,
      mid_fee: PromiseOrValue<BigNumberish>,
      out_fee: PromiseOrValue<BigNumberish>,
      allowed_extra_profit: PromiseOrValue<BigNumberish>,
      fee_gamma: PromiseOrValue<BigNumberish>,
      adjustment_step: PromiseOrValue<BigNumberish>,
      admin_fee: PromiseOrValue<BigNumberish>,
      ma_half_time: PromiseOrValue<BigNumberish>,
      initial_price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deploy_gauge(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    set_fee_receiver(
      _fee_receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    set_pool_implementation(
      _pool_implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    set_token_implementation(
      _token_implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    set_gauge_implementation(
      _gauge_implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    commit_transfer_ownership(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    accept_transfer_ownership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    'find_pool_for_coins(address,address)'(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'find_pool_for_coins(address,address,uint256)'(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    get_coins(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_decimals(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_balances(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_coin_indices(
      _pool: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    get_gauge(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_eth_index(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_token(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee_receiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool_implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token_implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gauge_implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool_count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool_list(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
