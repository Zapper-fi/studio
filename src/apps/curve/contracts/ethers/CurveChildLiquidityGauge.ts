/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface CurveChildLiquidityGaugeInterface extends utils.Interface {
  functions: {
    'deposit(uint256)': FunctionFragment;
    'deposit(uint256,address)': FunctionFragment;
    'deposit(uint256,address,bool)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdraw(uint256,address)': FunctionFragment;
    'withdraw(uint256,address,bool)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'user_checkpoint(address)': FunctionFragment;
    'claimable_tokens(address)': FunctionFragment;
    'claimed_reward(address,address)': FunctionFragment;
    'claimable_reward(address,address)': FunctionFragment;
    'set_rewards_receiver(address)': FunctionFragment;
    'claim_rewards()': FunctionFragment;
    'claim_rewards(address)': FunctionFragment;
    'claim_rewards(address,address)': FunctionFragment;
    'add_reward(address,address)': FunctionFragment;
    'set_reward_distributor(address,address)': FunctionFragment;
    'deposit_reward_token(address,uint256)': FunctionFragment;
    'set_manager(address)': FunctionFragment;
    'update_voting_escrow()': FunctionFragment;
    'set_killed(bool)': FunctionFragment;
    'decimals()': FunctionFragment;
    'integrate_checkpoint()': FunctionFragment;
    'version()': FunctionFragment;
    'factory()': FunctionFragment;
    'initialize(address,address)': FunctionFragment;
    'DOMAIN_SEPARATOR()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'name()': FunctionFragment;
    'symbol()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'lp_token()': FunctionFragment;
    'manager()': FunctionFragment;
    'voting_escrow()': FunctionFragment;
    'working_balances(address)': FunctionFragment;
    'working_supply()': FunctionFragment;
    'period()': FunctionFragment;
    'period_timestamp(uint256)': FunctionFragment;
    'integrate_checkpoint_of(address)': FunctionFragment;
    'integrate_fraction(address)': FunctionFragment;
    'integrate_inv_supply(uint256)': FunctionFragment;
    'integrate_inv_supply_of(address)': FunctionFragment;
    'reward_count()': FunctionFragment;
    'reward_tokens(uint256)': FunctionFragment;
    'reward_data(address)': FunctionFragment;
    'rewards_receiver(address)': FunctionFragment;
    'reward_integral_for(address,address)': FunctionFragment;
    'is_killed()': FunctionFragment;
    'inflation_rate(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'deposit(uint256)'
      | 'deposit(uint256,address)'
      | 'deposit(uint256,address,bool)'
      | 'withdraw(uint256)'
      | 'withdraw(uint256,address)'
      | 'withdraw(uint256,address,bool)'
      | 'transferFrom'
      | 'approve'
      | 'permit'
      | 'transfer'
      | 'increaseAllowance'
      | 'decreaseAllowance'
      | 'user_checkpoint'
      | 'claimable_tokens'
      | 'claimed_reward'
      | 'claimable_reward'
      | 'set_rewards_receiver'
      | 'claim_rewards()'
      | 'claim_rewards(address)'
      | 'claim_rewards(address,address)'
      | 'add_reward'
      | 'set_reward_distributor'
      | 'deposit_reward_token'
      | 'set_manager'
      | 'update_voting_escrow'
      | 'set_killed'
      | 'decimals'
      | 'integrate_checkpoint'
      | 'version'
      | 'factory'
      | 'initialize'
      | 'DOMAIN_SEPARATOR'
      | 'nonces'
      | 'name'
      | 'symbol'
      | 'allowance'
      | 'balanceOf'
      | 'totalSupply'
      | 'lp_token'
      | 'manager'
      | 'voting_escrow'
      | 'working_balances'
      | 'working_supply'
      | 'period'
      | 'period_timestamp'
      | 'integrate_checkpoint_of'
      | 'integrate_fraction'
      | 'integrate_inv_supply'
      | 'integrate_inv_supply_of'
      | 'reward_count'
      | 'reward_tokens'
      | 'reward_data'
      | 'rewards_receiver'
      | 'reward_integral_for'
      | 'is_killed'
      | 'inflation_rate',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'deposit(uint256)', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'deposit(uint256,address)', values: [BigNumberish, string]): string;
  encodeFunctionData(
    functionFragment: 'deposit(uint256,address,bool)',
    values: [BigNumberish, string, boolean],
  ): string;
  encodeFunctionData(functionFragment: 'withdraw(uint256)', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdraw(uint256,address)', values: [BigNumberish, string]): string;
  encodeFunctionData(
    functionFragment: 'withdraw(uint256,address,bool)',
    values: [BigNumberish, string, boolean],
  ): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'permit',
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'user_checkpoint', values: [string]): string;
  encodeFunctionData(functionFragment: 'claimable_tokens', values: [string]): string;
  encodeFunctionData(functionFragment: 'claimed_reward', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'claimable_reward', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'set_rewards_receiver', values: [string]): string;
  encodeFunctionData(functionFragment: 'claim_rewards()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claim_rewards(address)', values: [string]): string;
  encodeFunctionData(functionFragment: 'claim_rewards(address,address)', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'add_reward', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'set_reward_distributor', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'deposit_reward_token', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'set_manager', values: [string]): string;
  encodeFunctionData(functionFragment: 'update_voting_escrow', values?: undefined): string;
  encodeFunctionData(functionFragment: 'set_killed', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'integrate_checkpoint', values?: undefined): string;
  encodeFunctionData(functionFragment: 'version', values?: undefined): string;
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [string]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lp_token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'manager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'voting_escrow', values?: undefined): string;
  encodeFunctionData(functionFragment: 'working_balances', values: [string]): string;
  encodeFunctionData(functionFragment: 'working_supply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'period', values?: undefined): string;
  encodeFunctionData(functionFragment: 'period_timestamp', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'integrate_checkpoint_of', values: [string]): string;
  encodeFunctionData(functionFragment: 'integrate_fraction', values: [string]): string;
  encodeFunctionData(functionFragment: 'integrate_inv_supply', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'integrate_inv_supply_of', values: [string]): string;
  encodeFunctionData(functionFragment: 'reward_count', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reward_tokens', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'reward_data', values: [string]): string;
  encodeFunctionData(functionFragment: 'rewards_receiver', values: [string]): string;
  encodeFunctionData(functionFragment: 'reward_integral_for', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'is_killed', values?: undefined): string;
  encodeFunctionData(functionFragment: 'inflation_rate', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'deposit(uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit(uint256,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit(uint256,address,bool)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw(uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw(uint256,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw(uint256,address,bool)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'user_checkpoint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimable_tokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimed_reward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimable_reward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_rewards_receiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim_rewards()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim_rewards(address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim_rewards(address,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'add_reward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_reward_distributor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit_reward_token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_manager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'update_voting_escrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_killed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'integrate_checkpoint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lp_token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'manager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'voting_escrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'working_balances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'working_supply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'period', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'period_timestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'integrate_checkpoint_of', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'integrate_fraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'integrate_inv_supply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'integrate_inv_supply_of', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward_count', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward_tokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward_data', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewards_receiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward_integral_for', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'is_killed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'inflation_rate', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Deposit(address,uint256)': EventFragment;
    'Withdraw(address,uint256)': EventFragment;
    'UpdateLiquidityLimit(address,uint256,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateLiquidityLimit'): EventFragment;
}

export interface ApprovalEventObject {
  _owner: string;
  _spender: string;
  _value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface TransferEventObject {
  _from: string;
  _to: string;
  _value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface DepositEventObject {
  _user: string;
  _value: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface WithdrawEventObject {
  _user: string;
  _value: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface UpdateLiquidityLimitEventObject {
  _user: string;
  _original_balance: BigNumber;
  _original_supply: BigNumber;
  _working_balance: BigNumber;
  _working_supply: BigNumber;
}
export type UpdateLiquidityLimitEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  UpdateLiquidityLimitEventObject
>;

export type UpdateLiquidityLimitEventFilter = TypedEventFilter<UpdateLiquidityLimitEvent>;

export interface CurveChildLiquidityGauge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CurveChildLiquidityGaugeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    'deposit(uint256)'(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'deposit(uint256,address)'(
      _value: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'deposit(uint256,address,bool)'(
      _value: BigNumberish,
      _user: string,
      _claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'withdraw(uint256)'(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'withdraw(uint256,address)'(
      _value: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'withdraw(uint256,address,bool)'(
      _value: BigNumberish,
      _user: string,
      _claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    permit(
      _owner: string,
      _spender: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    increaseAllowance(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    decreaseAllowance(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    user_checkpoint(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claimable_tokens(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claimed_reward(_addr: string, _token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    claimable_reward(_user: string, _reward_token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    set_rewards_receiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'claim_rewards()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'claim_rewards(address)'(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'claim_rewards(address,address)'(
      _addr: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    add_reward(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    set_reward_distributor(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deposit_reward_token(
      _reward_token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    set_manager(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    update_voting_escrow(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    set_killed(
      _is_killed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    integrate_checkpoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _lp_token: string,
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    lp_token(overrides?: CallOverrides): Promise<[string]>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    voting_escrow(overrides?: CallOverrides): Promise<[string]>;

    working_balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    working_supply(overrides?: CallOverrides): Promise<[BigNumber]>;

    period(overrides?: CallOverrides): Promise<[BigNumber]>;

    period_timestamp(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    integrate_checkpoint_of(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    integrate_fraction(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    integrate_inv_supply(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    integrate_inv_supply_of(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    reward_count(overrides?: CallOverrides): Promise<[BigNumber]>;

    reward_tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    reward_data(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          distributor: string;
          period_finish: BigNumber;
          rate: BigNumber;
          last_update: BigNumber;
          integral: BigNumber;
        },
      ]
    >;

    rewards_receiver(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    reward_integral_for(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    is_killed(overrides?: CallOverrides): Promise<[boolean]>;

    inflation_rate(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  'deposit(uint256)'(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'deposit(uint256,address)'(
    _value: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'deposit(uint256,address,bool)'(
    _value: BigNumberish,
    _user: string,
    _claim_rewards: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'withdraw(uint256)'(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'withdraw(uint256,address)'(
    _value: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'withdraw(uint256,address,bool)'(
    _value: BigNumberish,
    _user: string,
    _claim_rewards: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  approve(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  permit(
    _owner: string,
    _spender: string,
    _value: BigNumberish,
    _deadline: BigNumberish,
    _v: BigNumberish,
    _r: BytesLike,
    _s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transfer(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  increaseAllowance(
    _spender: string,
    _added_value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  decreaseAllowance(
    _spender: string,
    _subtracted_value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  user_checkpoint(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claimable_tokens(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claimed_reward(_addr: string, _token: string, overrides?: CallOverrides): Promise<BigNumber>;

  claimable_reward(_user: string, _reward_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  set_rewards_receiver(
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'claim_rewards()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'claim_rewards(address)'(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'claim_rewards(address,address)'(
    _addr: string,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  add_reward(
    _reward_token: string,
    _distributor: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  set_reward_distributor(
    _reward_token: string,
    _distributor: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  deposit_reward_token(
    _reward_token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  set_manager(
    _manager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  update_voting_escrow(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  set_killed(
    _is_killed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  integrate_checkpoint(overrides?: CallOverrides): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  initialize(
    _lp_token: string,
    _manager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  lp_token(overrides?: CallOverrides): Promise<string>;

  manager(overrides?: CallOverrides): Promise<string>;

  voting_escrow(overrides?: CallOverrides): Promise<string>;

  working_balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  working_supply(overrides?: CallOverrides): Promise<BigNumber>;

  period(overrides?: CallOverrides): Promise<BigNumber>;

  period_timestamp(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  integrate_checkpoint_of(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  integrate_fraction(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  integrate_inv_supply(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  integrate_inv_supply_of(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  reward_count(overrides?: CallOverrides): Promise<BigNumber>;

  reward_tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  reward_data(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      distributor: string;
      period_finish: BigNumber;
      rate: BigNumber;
      last_update: BigNumber;
      integral: BigNumber;
    }
  >;

  rewards_receiver(arg0: string, overrides?: CallOverrides): Promise<string>;

  reward_integral_for(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  is_killed(overrides?: CallOverrides): Promise<boolean>;

  inflation_rate(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    'deposit(uint256)'(_value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'deposit(uint256,address)'(_value: BigNumberish, _user: string, overrides?: CallOverrides): Promise<void>;

    'deposit(uint256,address,bool)'(
      _value: BigNumberish,
      _user: string,
      _claim_rewards: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    'withdraw(uint256)'(_value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'withdraw(uint256,address)'(_value: BigNumberish, _user: string, overrides?: CallOverrides): Promise<void>;

    'withdraw(uint256,address,bool)'(
      _value: BigNumberish,
      _user: string,
      _claim_rewards: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferFrom(_from: string, _to: string, _value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    approve(_spender: string, _value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    permit(
      _owner: string,
      _spender: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transfer(_to: string, _value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    increaseAllowance(_spender: string, _added_value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    decreaseAllowance(_spender: string, _subtracted_value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    user_checkpoint(addr: string, overrides?: CallOverrides): Promise<boolean>;

    claimable_tokens(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimed_reward(_addr: string, _token: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimable_reward(_user: string, _reward_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    set_rewards_receiver(_receiver: string, overrides?: CallOverrides): Promise<void>;

    'claim_rewards()'(overrides?: CallOverrides): Promise<void>;

    'claim_rewards(address)'(_addr: string, overrides?: CallOverrides): Promise<void>;

    'claim_rewards(address,address)'(_addr: string, _receiver: string, overrides?: CallOverrides): Promise<void>;

    add_reward(_reward_token: string, _distributor: string, overrides?: CallOverrides): Promise<void>;

    set_reward_distributor(_reward_token: string, _distributor: string, overrides?: CallOverrides): Promise<void>;

    deposit_reward_token(_reward_token: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    set_manager(_manager: string, overrides?: CallOverrides): Promise<void>;

    update_voting_escrow(overrides?: CallOverrides): Promise<void>;

    set_killed(_is_killed: boolean, overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    integrate_checkpoint(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    initialize(_lp_token: string, _manager: string, overrides?: CallOverrides): Promise<void>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    lp_token(overrides?: CallOverrides): Promise<string>;

    manager(overrides?: CallOverrides): Promise<string>;

    voting_escrow(overrides?: CallOverrides): Promise<string>;

    working_balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    working_supply(overrides?: CallOverrides): Promise<BigNumber>;

    period(overrides?: CallOverrides): Promise<BigNumber>;

    period_timestamp(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    integrate_checkpoint_of(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    integrate_fraction(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    integrate_inv_supply(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    integrate_inv_supply_of(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    reward_count(overrides?: CallOverrides): Promise<BigNumber>;

    reward_tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    reward_data(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        distributor: string;
        period_finish: BigNumber;
        rate: BigNumber;
        last_update: BigNumber;
        integral: BigNumber;
      }
    >;

    rewards_receiver(arg0: string, overrides?: CallOverrides): Promise<string>;

    reward_integral_for(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    is_killed(overrides?: CallOverrides): Promise<boolean>;

    inflation_rate(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      _owner?: string | null,
      _spender?: string | null,
      _value?: null,
    ): ApprovalEventFilter;
    Approval(_owner?: string | null, _spender?: string | null, _value?: null): ApprovalEventFilter;

    'Transfer(address,address,uint256)'(_from?: string | null, _to?: string | null, _value?: null): TransferEventFilter;
    Transfer(_from?: string | null, _to?: string | null, _value?: null): TransferEventFilter;

    'Deposit(address,uint256)'(_user?: string | null, _value?: null): DepositEventFilter;
    Deposit(_user?: string | null, _value?: null): DepositEventFilter;

    'Withdraw(address,uint256)'(_user?: string | null, _value?: null): WithdrawEventFilter;
    Withdraw(_user?: string | null, _value?: null): WithdrawEventFilter;

    'UpdateLiquidityLimit(address,uint256,uint256,uint256,uint256)'(
      _user?: string | null,
      _original_balance?: null,
      _original_supply?: null,
      _working_balance?: null,
      _working_supply?: null,
    ): UpdateLiquidityLimitEventFilter;
    UpdateLiquidityLimit(
      _user?: string | null,
      _original_balance?: null,
      _original_supply?: null,
      _working_balance?: null,
      _working_supply?: null,
    ): UpdateLiquidityLimitEventFilter;
  };

  estimateGas: {
    'deposit(uint256)'(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'deposit(uint256,address)'(
      _value: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'deposit(uint256,address,bool)'(
      _value: BigNumberish,
      _user: string,
      _claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'withdraw(uint256)'(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'withdraw(uint256,address)'(
      _value: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'withdraw(uint256,address,bool)'(
      _value: BigNumberish,
      _user: string,
      _claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    permit(
      _owner: string,
      _spender: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    increaseAllowance(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    decreaseAllowance(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    user_checkpoint(addr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    claimable_tokens(addr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    claimed_reward(_addr: string, _token: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimable_reward(_user: string, _reward_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    set_rewards_receiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'claim_rewards()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'claim_rewards(address)'(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'claim_rewards(address,address)'(
      _addr: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    add_reward(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    set_reward_distributor(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    deposit_reward_token(
      _reward_token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    set_manager(_manager: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    update_voting_escrow(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    set_killed(_is_killed: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    integrate_checkpoint(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _lp_token: string,
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    lp_token(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    voting_escrow(overrides?: CallOverrides): Promise<BigNumber>;

    working_balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    working_supply(overrides?: CallOverrides): Promise<BigNumber>;

    period(overrides?: CallOverrides): Promise<BigNumber>;

    period_timestamp(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    integrate_checkpoint_of(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    integrate_fraction(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    integrate_inv_supply(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    integrate_inv_supply_of(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    reward_count(overrides?: CallOverrides): Promise<BigNumber>;

    reward_tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    reward_data(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewards_receiver(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    reward_integral_for(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    is_killed(overrides?: CallOverrides): Promise<BigNumber>;

    inflation_rate(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    'deposit(uint256)'(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'deposit(uint256,address)'(
      _value: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'deposit(uint256,address,bool)'(
      _value: BigNumberish,
      _user: string,
      _claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'withdraw(uint256)'(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'withdraw(uint256,address)'(
      _value: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'withdraw(uint256,address,bool)'(
      _value: BigNumberish,
      _user: string,
      _claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    permit(
      _owner: string,
      _spender: string,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    decreaseAllowance(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    user_checkpoint(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claimable_tokens(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claimed_reward(_addr: string, _token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimable_reward(_user: string, _reward_token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    set_rewards_receiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'claim_rewards()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'claim_rewards(address)'(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'claim_rewards(address,address)'(
      _addr: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    add_reward(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    set_reward_distributor(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    deposit_reward_token(
      _reward_token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    set_manager(
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    update_voting_escrow(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    set_killed(
      _is_killed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    integrate_checkpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _lp_token: string,
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lp_token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voting_escrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    working_balances(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    working_supply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    period(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    period_timestamp(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    integrate_checkpoint_of(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    integrate_fraction(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    integrate_inv_supply(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    integrate_inv_supply_of(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_data(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewards_receiver(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_integral_for(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    is_killed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inflation_rate(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
