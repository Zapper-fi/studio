/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface CurvePassthroughRewardsInterface extends utils.Interface {
  functions: {
    'get_reward()': FunctionFragment;
    'set_reward_data(uint256,address,address)': FunctionFragment;
    'commit_transfer_ownership(address)': FunctionFragment;
    'accept_transfer_ownership()': FunctionFragment;
    'owner()': FunctionFragment;
    'future_owner()': FunctionFragment;
    'reward_receiver()': FunctionFragment;
    'reward_data(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'get_reward'
      | 'set_reward_data'
      | 'commit_transfer_ownership'
      | 'accept_transfer_ownership'
      | 'owner'
      | 'future_owner'
      | 'reward_receiver'
      | 'reward_data',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'get_reward', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'set_reward_data',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'commit_transfer_ownership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'accept_transfer_ownership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'future_owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reward_receiver', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reward_data', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'get_reward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_reward_data', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'commit_transfer_ownership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accept_transfer_ownership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'future_owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward_receiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward_data', data: BytesLike): Result;

  events: {};
}

export interface CurvePassthroughRewards extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CurvePassthroughRewardsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    get_reward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    set_reward_data(
      _idx: PromiseOrValue<BigNumberish>,
      _claim: PromiseOrValue<string>,
      _reward: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    commit_transfer_ownership(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    accept_transfer_ownership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    future_owner(overrides?: CallOverrides): Promise<[string]>;

    reward_receiver(overrides?: CallOverrides): Promise<[string]>;

    reward_data(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string, string] & { claim: string; reward: string }>;
  };

  get_reward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  set_reward_data(
    _idx: PromiseOrValue<BigNumberish>,
    _claim: PromiseOrValue<string>,
    _reward: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  commit_transfer_ownership(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  accept_transfer_ownership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  future_owner(overrides?: CallOverrides): Promise<string>;

  reward_receiver(overrides?: CallOverrides): Promise<string>;

  reward_data(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[string, string] & { claim: string; reward: string }>;

  callStatic: {
    get_reward(overrides?: CallOverrides): Promise<void>;

    set_reward_data(
      _idx: PromiseOrValue<BigNumberish>,
      _claim: PromiseOrValue<string>,
      _reward: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    commit_transfer_ownership(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    accept_transfer_ownership(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    future_owner(overrides?: CallOverrides): Promise<string>;

    reward_receiver(overrides?: CallOverrides): Promise<string>;

    reward_data(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string, string] & { claim: string; reward: string }>;
  };

  filters: {};

  estimateGas: {
    get_reward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    set_reward_data(
      _idx: PromiseOrValue<BigNumberish>,
      _claim: PromiseOrValue<string>,
      _reward: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    commit_transfer_ownership(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    accept_transfer_ownership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    future_owner(overrides?: CallOverrides): Promise<BigNumber>;

    reward_receiver(overrides?: CallOverrides): Promise<BigNumber>;

    reward_data(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    get_reward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    set_reward_data(
      _idx: PromiseOrValue<BigNumberish>,
      _claim: PromiseOrValue<string>,
      _reward: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    commit_transfer_ownership(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    accept_transfer_ownership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_receiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_data(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
