/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface CurveVestingEscrowInterface extends utils.Interface {
  functions: {
    'add_tokens(uint256)': FunctionFragment;
    'fund(address[100],uint256[100])': FunctionFragment;
    'toggle_disable(address)': FunctionFragment;
    'disable_can_disable()': FunctionFragment;
    'disable_fund_admins()': FunctionFragment;
    'vestedSupply()': FunctionFragment;
    'lockedSupply()': FunctionFragment;
    'vestedOf(address)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'lockedOf(address)': FunctionFragment;
    'claim()': FunctionFragment;
    'claim(address)': FunctionFragment;
    'commit_transfer_ownership(address)': FunctionFragment;
    'apply_transfer_ownership()': FunctionFragment;
    'token()': FunctionFragment;
    'start_time()': FunctionFragment;
    'end_time()': FunctionFragment;
    'initial_locked(address)': FunctionFragment;
    'total_claimed(address)': FunctionFragment;
    'initial_locked_supply()': FunctionFragment;
    'unallocated_supply()': FunctionFragment;
    'can_disable()': FunctionFragment;
    'disabled_at(address)': FunctionFragment;
    'admin()': FunctionFragment;
    'future_admin()': FunctionFragment;
    'fund_admins_enabled()': FunctionFragment;
    'fund_admins(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'add_tokens'
      | 'fund'
      | 'toggle_disable'
      | 'disable_can_disable'
      | 'disable_fund_admins'
      | 'vestedSupply'
      | 'lockedSupply'
      | 'vestedOf'
      | 'balanceOf'
      | 'lockedOf'
      | 'claim()'
      | 'claim(address)'
      | 'commit_transfer_ownership'
      | 'apply_transfer_ownership'
      | 'token'
      | 'start_time'
      | 'end_time'
      | 'initial_locked'
      | 'total_claimed'
      | 'initial_locked_supply'
      | 'unallocated_supply'
      | 'can_disable'
      | 'disabled_at'
      | 'admin'
      | 'future_admin'
      | 'fund_admins_enabled'
      | 'fund_admins',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'add_tokens', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'fund', values: [string[], BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'toggle_disable', values: [string]): string;
  encodeFunctionData(functionFragment: 'disable_can_disable', values?: undefined): string;
  encodeFunctionData(functionFragment: 'disable_fund_admins', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vestedSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lockedSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vestedOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'lockedOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'claim()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claim(address)', values: [string]): string;
  encodeFunctionData(functionFragment: 'commit_transfer_ownership', values: [string]): string;
  encodeFunctionData(functionFragment: 'apply_transfer_ownership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'start_time', values?: undefined): string;
  encodeFunctionData(functionFragment: 'end_time', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initial_locked', values: [string]): string;
  encodeFunctionData(functionFragment: 'total_claimed', values: [string]): string;
  encodeFunctionData(functionFragment: 'initial_locked_supply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unallocated_supply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'can_disable', values?: undefined): string;
  encodeFunctionData(functionFragment: 'disabled_at', values: [string]): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'future_admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fund_admins_enabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fund_admins', values: [string]): string;

  decodeFunctionResult(functionFragment: 'add_tokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fund', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'toggle_disable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disable_can_disable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disable_fund_admins', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vestedSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockedSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vestedOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockedOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim(address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'commit_transfer_ownership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'apply_transfer_ownership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'start_time', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'end_time', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initial_locked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'total_claimed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initial_locked_supply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unallocated_supply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'can_disable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disabled_at', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'future_admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fund_admins_enabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fund_admins', data: BytesLike): Result;

  events: {
    'Fund(address,uint256)': EventFragment;
    'Claim(address,uint256)': EventFragment;
    'ToggleDisable(address,bool)': EventFragment;
    'CommitOwnership(address)': EventFragment;
    'ApplyOwnership(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Fund'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Claim'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ToggleDisable'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CommitOwnership'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ApplyOwnership'): EventFragment;
}

export interface FundEventObject {
  recipient: string;
  amount: BigNumber;
}
export type FundEvent = TypedEvent<[string, BigNumber], FundEventObject>;

export type FundEventFilter = TypedEventFilter<FundEvent>;

export interface ClaimEventObject {
  recipient: string;
  claimed: BigNumber;
}
export type ClaimEvent = TypedEvent<[string, BigNumber], ClaimEventObject>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface ToggleDisableEventObject {
  recipient: string;
  disabled: boolean;
}
export type ToggleDisableEvent = TypedEvent<[string, boolean], ToggleDisableEventObject>;

export type ToggleDisableEventFilter = TypedEventFilter<ToggleDisableEvent>;

export interface CommitOwnershipEventObject {
  admin: string;
}
export type CommitOwnershipEvent = TypedEvent<[string], CommitOwnershipEventObject>;

export type CommitOwnershipEventFilter = TypedEventFilter<CommitOwnershipEvent>;

export interface ApplyOwnershipEventObject {
  admin: string;
}
export type ApplyOwnershipEvent = TypedEvent<[string], ApplyOwnershipEventObject>;

export type ApplyOwnershipEventFilter = TypedEventFilter<ApplyOwnershipEvent>;

export interface CurveVestingEscrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CurveVestingEscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add_tokens(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    fund(
      _recipients: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    toggle_disable(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    disable_can_disable(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    disable_fund_admins(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    vestedSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    vestedOf(_recipient: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(_recipient: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedOf(_recipient: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'claim()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'claim(address)'(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    commit_transfer_ownership(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    apply_transfer_ownership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    start_time(overrides?: CallOverrides): Promise<[BigNumber]>;

    end_time(overrides?: CallOverrides): Promise<[BigNumber]>;

    initial_locked(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    total_claimed(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    initial_locked_supply(overrides?: CallOverrides): Promise<[BigNumber]>;

    unallocated_supply(overrides?: CallOverrides): Promise<[BigNumber]>;

    can_disable(overrides?: CallOverrides): Promise<[boolean]>;

    disabled_at(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    future_admin(overrides?: CallOverrides): Promise<[string]>;

    fund_admins_enabled(overrides?: CallOverrides): Promise<[boolean]>;

    fund_admins(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  add_tokens(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  fund(
    _recipients: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  toggle_disable(
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  disable_can_disable(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  disable_fund_admins(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  vestedSupply(overrides?: CallOverrides): Promise<BigNumber>;

  lockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

  vestedOf(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

  lockedOf(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

  'claim()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'claim(address)'(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  commit_transfer_ownership(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  apply_transfer_ownership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  start_time(overrides?: CallOverrides): Promise<BigNumber>;

  end_time(overrides?: CallOverrides): Promise<BigNumber>;

  initial_locked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  total_claimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  initial_locked_supply(overrides?: CallOverrides): Promise<BigNumber>;

  unallocated_supply(overrides?: CallOverrides): Promise<BigNumber>;

  can_disable(overrides?: CallOverrides): Promise<boolean>;

  disabled_at(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  future_admin(overrides?: CallOverrides): Promise<string>;

  fund_admins_enabled(overrides?: CallOverrides): Promise<boolean>;

  fund_admins(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    add_tokens(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    fund(_recipients: string[], _amounts: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    toggle_disable(_recipient: string, overrides?: CallOverrides): Promise<void>;

    disable_can_disable(overrides?: CallOverrides): Promise<void>;

    disable_fund_admins(overrides?: CallOverrides): Promise<void>;

    vestedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    lockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    vestedOf(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

    lockedOf(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

    'claim()'(overrides?: CallOverrides): Promise<void>;

    'claim(address)'(addr: string, overrides?: CallOverrides): Promise<void>;

    commit_transfer_ownership(addr: string, overrides?: CallOverrides): Promise<boolean>;

    apply_transfer_ownership(overrides?: CallOverrides): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;

    start_time(overrides?: CallOverrides): Promise<BigNumber>;

    end_time(overrides?: CallOverrides): Promise<BigNumber>;

    initial_locked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    total_claimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    initial_locked_supply(overrides?: CallOverrides): Promise<BigNumber>;

    unallocated_supply(overrides?: CallOverrides): Promise<BigNumber>;

    can_disable(overrides?: CallOverrides): Promise<boolean>;

    disabled_at(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    future_admin(overrides?: CallOverrides): Promise<string>;

    fund_admins_enabled(overrides?: CallOverrides): Promise<boolean>;

    fund_admins(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    'Fund(address,uint256)'(recipient?: string | null, amount?: null): FundEventFilter;
    Fund(recipient?: string | null, amount?: null): FundEventFilter;

    'Claim(address,uint256)'(recipient?: string | null, claimed?: null): ClaimEventFilter;
    Claim(recipient?: string | null, claimed?: null): ClaimEventFilter;

    'ToggleDisable(address,bool)'(recipient?: null, disabled?: null): ToggleDisableEventFilter;
    ToggleDisable(recipient?: null, disabled?: null): ToggleDisableEventFilter;

    'CommitOwnership(address)'(admin?: null): CommitOwnershipEventFilter;
    CommitOwnership(admin?: null): CommitOwnershipEventFilter;

    'ApplyOwnership(address)'(admin?: null): ApplyOwnershipEventFilter;
    ApplyOwnership(admin?: null): ApplyOwnershipEventFilter;
  };

  estimateGas: {
    add_tokens(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    fund(
      _recipients: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    toggle_disable(_recipient: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    disable_can_disable(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    disable_fund_admins(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    vestedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    lockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    vestedOf(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

    lockedOf(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

    'claim()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'claim(address)'(addr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    commit_transfer_ownership(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    apply_transfer_ownership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    start_time(overrides?: CallOverrides): Promise<BigNumber>;

    end_time(overrides?: CallOverrides): Promise<BigNumber>;

    initial_locked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    total_claimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    initial_locked_supply(overrides?: CallOverrides): Promise<BigNumber>;

    unallocated_supply(overrides?: CallOverrides): Promise<BigNumber>;

    can_disable(overrides?: CallOverrides): Promise<BigNumber>;

    disabled_at(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    future_admin(overrides?: CallOverrides): Promise<BigNumber>;

    fund_admins_enabled(overrides?: CallOverrides): Promise<BigNumber>;

    fund_admins(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    add_tokens(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    fund(
      _recipients: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    toggle_disable(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    disable_can_disable(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    disable_fund_admins(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    vestedSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestedOf(_recipient: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(_recipient: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedOf(_recipient: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'claim()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'claim(address)'(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    commit_transfer_ownership(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    apply_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    start_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    end_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initial_locked(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    total_claimed(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initial_locked_supply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unallocated_supply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    can_disable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disabled_at(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fund_admins_enabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fund_admins(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
