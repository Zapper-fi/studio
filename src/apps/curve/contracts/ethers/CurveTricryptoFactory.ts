/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface CurveTricryptoFactoryInterface extends utils.Interface {
  functions: {
    'deploy_pool(string,string,address[3],address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[2])': FunctionFragment;
    'deploy_gauge(address)': FunctionFragment;
    'set_fee_receiver(address)': FunctionFragment;
    'set_pool_implementation(address,uint256)': FunctionFragment;
    'set_gauge_implementation(address)': FunctionFragment;
    'set_views_implementation(address)': FunctionFragment;
    'set_math_implementation(address)': FunctionFragment;
    'commit_transfer_ownership(address)': FunctionFragment;
    'accept_transfer_ownership()': FunctionFragment;
    'find_pool_for_coins(address,address)': FunctionFragment;
    'find_pool_for_coins(address,address,uint256)': FunctionFragment;
    'get_coins(address)': FunctionFragment;
    'get_decimals(address)': FunctionFragment;
    'get_balances(address)': FunctionFragment;
    'get_coin_indices(address,address,address)': FunctionFragment;
    'get_gauge(address)': FunctionFragment;
    'get_market_counts(address,address)': FunctionFragment;
    'admin()': FunctionFragment;
    'future_admin()': FunctionFragment;
    'fee_receiver()': FunctionFragment;
    'pool_implementations(uint256)': FunctionFragment;
    'gauge_implementation()': FunctionFragment;
    'views_implementation()': FunctionFragment;
    'math_implementation()': FunctionFragment;
    'pool_count()': FunctionFragment;
    'pool_list(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'deploy_pool'
      | 'deploy_gauge'
      | 'set_fee_receiver'
      | 'set_pool_implementation'
      | 'set_gauge_implementation'
      | 'set_views_implementation'
      | 'set_math_implementation'
      | 'commit_transfer_ownership'
      | 'accept_transfer_ownership'
      | 'find_pool_for_coins(address,address)'
      | 'find_pool_for_coins(address,address,uint256)'
      | 'get_coins'
      | 'get_decimals'
      | 'get_balances'
      | 'get_coin_indices'
      | 'get_gauge'
      | 'get_market_counts'
      | 'admin'
      | 'future_admin'
      | 'fee_receiver'
      | 'pool_implementations'
      | 'gauge_implementation'
      | 'views_implementation'
      | 'math_implementation'
      | 'pool_count'
      | 'pool_list',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'deploy_pool',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    ],
  ): string;
  encodeFunctionData(functionFragment: 'deploy_gauge', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'set_fee_receiver', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'set_pool_implementation',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'set_gauge_implementation', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'set_views_implementation', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'set_math_implementation', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'commit_transfer_ownership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'accept_transfer_ownership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'find_pool_for_coins(address,address)',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'find_pool_for_coins(address,address,uint256)',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'get_coins', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'get_decimals', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'get_balances', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'get_coin_indices',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'get_gauge', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'get_market_counts',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'future_admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fee_receiver', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pool_implementations', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'gauge_implementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'views_implementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'math_implementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pool_count', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pool_list', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'deploy_pool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deploy_gauge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_fee_receiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_pool_implementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_gauge_implementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_views_implementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_math_implementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'commit_transfer_ownership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accept_transfer_ownership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'find_pool_for_coins(address,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'find_pool_for_coins(address,address,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'get_coins', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'get_decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'get_balances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'get_coin_indices', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'get_gauge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'get_market_counts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'future_admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fee_receiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pool_implementations', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gauge_implementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'views_implementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'math_implementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pool_count', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pool_list', data: BytesLike): Result;

  events: {
    'TricryptoPoolDeployed(address,string,string,address,address[3],address,bytes32,uint256,uint256,uint256,uint256,uint256,address)': EventFragment;
    'LiquidityGaugeDeployed(address,address)': EventFragment;
    'UpdateFeeReceiver(address,address)': EventFragment;
    'UpdatePoolImplementation(uint256,address,address)': EventFragment;
    'UpdateGaugeImplementation(address,address)': EventFragment;
    'UpdateMathImplementation(address,address)': EventFragment;
    'UpdateViewsImplementation(address,address)': EventFragment;
    'TransferOwnership(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'TricryptoPoolDeployed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidityGaugeDeployed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateFeeReceiver'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatePoolImplementation'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateGaugeImplementation'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateMathImplementation'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateViewsImplementation'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferOwnership'): EventFragment;
}

export interface TricryptoPoolDeployedEventObject {
  pool: string;
  name: string;
  symbol: string;
  weth: string;
  coins: [string, string, string];
  math: string;
  salt: string;
  packed_precisions: BigNumber;
  packed_A_gamma: BigNumber;
  packed_fee_params: BigNumber;
  packed_rebalancing_params: BigNumber;
  packed_prices: BigNumber;
  deployer: string;
}
export type TricryptoPoolDeployedEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    [string, string, string],
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
  ],
  TricryptoPoolDeployedEventObject
>;

export type TricryptoPoolDeployedEventFilter = TypedEventFilter<TricryptoPoolDeployedEvent>;

export interface LiquidityGaugeDeployedEventObject {
  pool: string;
  gauge: string;
}
export type LiquidityGaugeDeployedEvent = TypedEvent<[string, string], LiquidityGaugeDeployedEventObject>;

export type LiquidityGaugeDeployedEventFilter = TypedEventFilter<LiquidityGaugeDeployedEvent>;

export interface UpdateFeeReceiverEventObject {
  _old_fee_receiver: string;
  _new_fee_receiver: string;
}
export type UpdateFeeReceiverEvent = TypedEvent<[string, string], UpdateFeeReceiverEventObject>;

export type UpdateFeeReceiverEventFilter = TypedEventFilter<UpdateFeeReceiverEvent>;

export interface UpdatePoolImplementationEventObject {
  _implemention_id: BigNumber;
  _old_pool_implementation: string;
  _new_pool_implementation: string;
}
export type UpdatePoolImplementationEvent = TypedEvent<
  [BigNumber, string, string],
  UpdatePoolImplementationEventObject
>;

export type UpdatePoolImplementationEventFilter = TypedEventFilter<UpdatePoolImplementationEvent>;

export interface UpdateGaugeImplementationEventObject {
  _old_gauge_implementation: string;
  _new_gauge_implementation: string;
}
export type UpdateGaugeImplementationEvent = TypedEvent<[string, string], UpdateGaugeImplementationEventObject>;

export type UpdateGaugeImplementationEventFilter = TypedEventFilter<UpdateGaugeImplementationEvent>;

export interface UpdateMathImplementationEventObject {
  _old_math_implementation: string;
  _new_math_implementation: string;
}
export type UpdateMathImplementationEvent = TypedEvent<[string, string], UpdateMathImplementationEventObject>;

export type UpdateMathImplementationEventFilter = TypedEventFilter<UpdateMathImplementationEvent>;

export interface UpdateViewsImplementationEventObject {
  _old_views_implementation: string;
  _new_views_implementation: string;
}
export type UpdateViewsImplementationEvent = TypedEvent<[string, string], UpdateViewsImplementationEventObject>;

export type UpdateViewsImplementationEventFilter = TypedEventFilter<UpdateViewsImplementationEvent>;

export interface TransferOwnershipEventObject {
  _old_owner: string;
  _new_owner: string;
}
export type TransferOwnershipEvent = TypedEvent<[string, string], TransferOwnershipEventObject>;

export type TransferOwnershipEventFilter = TypedEventFilter<TransferOwnershipEvent>;

export interface CurveTricryptoFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CurveTricryptoFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deploy_pool(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _coins: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
      _weth: PromiseOrValue<string>,
      implementation_id: PromiseOrValue<BigNumberish>,
      A: PromiseOrValue<BigNumberish>,
      gamma: PromiseOrValue<BigNumberish>,
      mid_fee: PromiseOrValue<BigNumberish>,
      out_fee: PromiseOrValue<BigNumberish>,
      fee_gamma: PromiseOrValue<BigNumberish>,
      allowed_extra_profit: PromiseOrValue<BigNumberish>,
      adjustment_step: PromiseOrValue<BigNumberish>,
      ma_exp_time: PromiseOrValue<BigNumberish>,
      initial_prices: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deploy_gauge(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    set_fee_receiver(
      _fee_receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    set_pool_implementation(
      _pool_implementation: PromiseOrValue<string>,
      _implementation_index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    set_gauge_implementation(
      _gauge_implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    set_views_implementation(
      _views_implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    set_math_implementation(
      _math_implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    commit_transfer_ownership(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    accept_transfer_ownership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    'find_pool_for_coins(address,address)'(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'find_pool_for_coins(address,address,uint256)'(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    get_coins(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[[string, string, string]]>;

    get_decimals(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[[BigNumber, BigNumber, BigNumber]]>;

    get_balances(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[[BigNumber, BigNumber, BigNumber]]>;

    get_coin_indices(
      _pool: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    get_gauge(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    get_market_counts(
      coin_a: PromiseOrValue<string>,
      coin_b: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    future_admin(overrides?: CallOverrides): Promise<[string]>;

    fee_receiver(overrides?: CallOverrides): Promise<[string]>;

    pool_implementations(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    gauge_implementation(overrides?: CallOverrides): Promise<[string]>;

    views_implementation(overrides?: CallOverrides): Promise<[string]>;

    math_implementation(overrides?: CallOverrides): Promise<[string]>;

    pool_count(overrides?: CallOverrides): Promise<[BigNumber]>;

    pool_list(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
  };

  deploy_pool(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _coins: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
    _weth: PromiseOrValue<string>,
    implementation_id: PromiseOrValue<BigNumberish>,
    A: PromiseOrValue<BigNumberish>,
    gamma: PromiseOrValue<BigNumberish>,
    mid_fee: PromiseOrValue<BigNumberish>,
    out_fee: PromiseOrValue<BigNumberish>,
    fee_gamma: PromiseOrValue<BigNumberish>,
    allowed_extra_profit: PromiseOrValue<BigNumberish>,
    adjustment_step: PromiseOrValue<BigNumberish>,
    ma_exp_time: PromiseOrValue<BigNumberish>,
    initial_prices: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deploy_gauge(
    _pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  set_fee_receiver(
    _fee_receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  set_pool_implementation(
    _pool_implementation: PromiseOrValue<string>,
    _implementation_index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  set_gauge_implementation(
    _gauge_implementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  set_views_implementation(
    _views_implementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  set_math_implementation(
    _math_implementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  commit_transfer_ownership(
    _addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  accept_transfer_ownership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  'find_pool_for_coins(address,address)'(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<string>;

  'find_pool_for_coins(address,address,uint256)'(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    i: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  get_coins(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string, string, string]>;

  get_decimals(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber]>;

  get_balances(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber]>;

  get_coin_indices(
    _pool: PromiseOrValue<string>,
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>;

  get_gauge(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  get_market_counts(
    coin_a: PromiseOrValue<string>,
    coin_b: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  future_admin(overrides?: CallOverrides): Promise<string>;

  fee_receiver(overrides?: CallOverrides): Promise<string>;

  pool_implementations(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  gauge_implementation(overrides?: CallOverrides): Promise<string>;

  views_implementation(overrides?: CallOverrides): Promise<string>;

  math_implementation(overrides?: CallOverrides): Promise<string>;

  pool_count(overrides?: CallOverrides): Promise<BigNumber>;

  pool_list(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    deploy_pool(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _coins: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
      _weth: PromiseOrValue<string>,
      implementation_id: PromiseOrValue<BigNumberish>,
      A: PromiseOrValue<BigNumberish>,
      gamma: PromiseOrValue<BigNumberish>,
      mid_fee: PromiseOrValue<BigNumberish>,
      out_fee: PromiseOrValue<BigNumberish>,
      fee_gamma: PromiseOrValue<BigNumberish>,
      allowed_extra_profit: PromiseOrValue<BigNumberish>,
      adjustment_step: PromiseOrValue<BigNumberish>,
      ma_exp_time: PromiseOrValue<BigNumberish>,
      initial_prices: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides,
    ): Promise<string>;

    deploy_gauge(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    set_fee_receiver(_fee_receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    set_pool_implementation(
      _pool_implementation: PromiseOrValue<string>,
      _implementation_index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    set_gauge_implementation(_gauge_implementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    set_views_implementation(_views_implementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    set_math_implementation(_math_implementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    commit_transfer_ownership(_addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    accept_transfer_ownership(overrides?: CallOverrides): Promise<void>;

    'find_pool_for_coins(address,address)'(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>;

    'find_pool_for_coins(address,address,uint256)'(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    get_coins(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string, string, string]>;

    get_decimals(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber]>;

    get_balances(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber]>;

    get_coin_indices(
      _pool: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    get_gauge(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    get_market_counts(
      coin_a: PromiseOrValue<string>,
      coin_b: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    future_admin(overrides?: CallOverrides): Promise<string>;

    fee_receiver(overrides?: CallOverrides): Promise<string>;

    pool_implementations(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    gauge_implementation(overrides?: CallOverrides): Promise<string>;

    views_implementation(overrides?: CallOverrides): Promise<string>;

    math_implementation(overrides?: CallOverrides): Promise<string>;

    pool_count(overrides?: CallOverrides): Promise<BigNumber>;

    pool_list(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'TricryptoPoolDeployed(address,string,string,address,address[3],address,bytes32,uint256,uint256,uint256,uint256,uint256,address)'(
      pool?: null,
      name?: null,
      symbol?: null,
      weth?: null,
      coins?: null,
      math?: null,
      salt?: null,
      packed_precisions?: null,
      packed_A_gamma?: null,
      packed_fee_params?: null,
      packed_rebalancing_params?: null,
      packed_prices?: null,
      deployer?: null,
    ): TricryptoPoolDeployedEventFilter;
    TricryptoPoolDeployed(
      pool?: null,
      name?: null,
      symbol?: null,
      weth?: null,
      coins?: null,
      math?: null,
      salt?: null,
      packed_precisions?: null,
      packed_A_gamma?: null,
      packed_fee_params?: null,
      packed_rebalancing_params?: null,
      packed_prices?: null,
      deployer?: null,
    ): TricryptoPoolDeployedEventFilter;

    'LiquidityGaugeDeployed(address,address)'(pool?: null, gauge?: null): LiquidityGaugeDeployedEventFilter;
    LiquidityGaugeDeployed(pool?: null, gauge?: null): LiquidityGaugeDeployedEventFilter;

    'UpdateFeeReceiver(address,address)'(
      _old_fee_receiver?: null,
      _new_fee_receiver?: null,
    ): UpdateFeeReceiverEventFilter;
    UpdateFeeReceiver(_old_fee_receiver?: null, _new_fee_receiver?: null): UpdateFeeReceiverEventFilter;

    'UpdatePoolImplementation(uint256,address,address)'(
      _implemention_id?: null,
      _old_pool_implementation?: null,
      _new_pool_implementation?: null,
    ): UpdatePoolImplementationEventFilter;
    UpdatePoolImplementation(
      _implemention_id?: null,
      _old_pool_implementation?: null,
      _new_pool_implementation?: null,
    ): UpdatePoolImplementationEventFilter;

    'UpdateGaugeImplementation(address,address)'(
      _old_gauge_implementation?: null,
      _new_gauge_implementation?: null,
    ): UpdateGaugeImplementationEventFilter;
    UpdateGaugeImplementation(
      _old_gauge_implementation?: null,
      _new_gauge_implementation?: null,
    ): UpdateGaugeImplementationEventFilter;

    'UpdateMathImplementation(address,address)'(
      _old_math_implementation?: null,
      _new_math_implementation?: null,
    ): UpdateMathImplementationEventFilter;
    UpdateMathImplementation(
      _old_math_implementation?: null,
      _new_math_implementation?: null,
    ): UpdateMathImplementationEventFilter;

    'UpdateViewsImplementation(address,address)'(
      _old_views_implementation?: null,
      _new_views_implementation?: null,
    ): UpdateViewsImplementationEventFilter;
    UpdateViewsImplementation(
      _old_views_implementation?: null,
      _new_views_implementation?: null,
    ): UpdateViewsImplementationEventFilter;

    'TransferOwnership(address,address)'(_old_owner?: null, _new_owner?: null): TransferOwnershipEventFilter;
    TransferOwnership(_old_owner?: null, _new_owner?: null): TransferOwnershipEventFilter;
  };

  estimateGas: {
    deploy_pool(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _coins: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
      _weth: PromiseOrValue<string>,
      implementation_id: PromiseOrValue<BigNumberish>,
      A: PromiseOrValue<BigNumberish>,
      gamma: PromiseOrValue<BigNumberish>,
      mid_fee: PromiseOrValue<BigNumberish>,
      out_fee: PromiseOrValue<BigNumberish>,
      fee_gamma: PromiseOrValue<BigNumberish>,
      allowed_extra_profit: PromiseOrValue<BigNumberish>,
      adjustment_step: PromiseOrValue<BigNumberish>,
      ma_exp_time: PromiseOrValue<BigNumberish>,
      initial_prices: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deploy_gauge(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    set_fee_receiver(
      _fee_receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    set_pool_implementation(
      _pool_implementation: PromiseOrValue<string>,
      _implementation_index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    set_gauge_implementation(
      _gauge_implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    set_views_implementation(
      _views_implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    set_math_implementation(
      _math_implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    commit_transfer_ownership(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    accept_transfer_ownership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    'find_pool_for_coins(address,address)'(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'find_pool_for_coins(address,address,uint256)'(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    get_coins(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    get_decimals(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    get_balances(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    get_coin_indices(
      _pool: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    get_gauge(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    get_market_counts(
      coin_a: PromiseOrValue<string>,
      coin_b: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    future_admin(overrides?: CallOverrides): Promise<BigNumber>;

    fee_receiver(overrides?: CallOverrides): Promise<BigNumber>;

    pool_implementations(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    gauge_implementation(overrides?: CallOverrides): Promise<BigNumber>;

    views_implementation(overrides?: CallOverrides): Promise<BigNumber>;

    math_implementation(overrides?: CallOverrides): Promise<BigNumber>;

    pool_count(overrides?: CallOverrides): Promise<BigNumber>;

    pool_list(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deploy_pool(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _coins: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
      _weth: PromiseOrValue<string>,
      implementation_id: PromiseOrValue<BigNumberish>,
      A: PromiseOrValue<BigNumberish>,
      gamma: PromiseOrValue<BigNumberish>,
      mid_fee: PromiseOrValue<BigNumberish>,
      out_fee: PromiseOrValue<BigNumberish>,
      fee_gamma: PromiseOrValue<BigNumberish>,
      allowed_extra_profit: PromiseOrValue<BigNumberish>,
      adjustment_step: PromiseOrValue<BigNumberish>,
      ma_exp_time: PromiseOrValue<BigNumberish>,
      initial_prices: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deploy_gauge(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    set_fee_receiver(
      _fee_receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    set_pool_implementation(
      _pool_implementation: PromiseOrValue<string>,
      _implementation_index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    set_gauge_implementation(
      _gauge_implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    set_views_implementation(
      _views_implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    set_math_implementation(
      _math_implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    commit_transfer_ownership(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    accept_transfer_ownership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    'find_pool_for_coins(address,address)'(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'find_pool_for_coins(address,address,uint256)'(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    get_coins(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_decimals(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_balances(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_coin_indices(
      _pool: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    get_gauge(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_market_counts(
      coin_a: PromiseOrValue<string>,
      coin_b: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee_receiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool_implementations(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gauge_implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    views_implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    math_implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool_count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool_list(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
