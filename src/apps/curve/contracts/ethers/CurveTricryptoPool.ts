/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface CurveTricryptoPoolInterface extends utils.Interface {
  functions: {
    'exchange(uint256,uint256,uint256,uint256)': FunctionFragment;
    'exchange(uint256,uint256,uint256,uint256,bool)': FunctionFragment;
    'exchange(uint256,uint256,uint256,uint256,bool,address)': FunctionFragment;
    'exchange_underlying(uint256,uint256,uint256,uint256)': FunctionFragment;
    'exchange_underlying(uint256,uint256,uint256,uint256,address)': FunctionFragment;
    'exchange_extended(uint256,uint256,uint256,uint256,bool,address,address,bytes32)': FunctionFragment;
    'add_liquidity(uint256[3],uint256)': FunctionFragment;
    'add_liquidity(uint256[3],uint256,bool)': FunctionFragment;
    'add_liquidity(uint256[3],uint256,bool,address)': FunctionFragment;
    'remove_liquidity(uint256,uint256[3])': FunctionFragment;
    'remove_liquidity(uint256,uint256[3],bool)': FunctionFragment;
    'remove_liquidity(uint256,uint256[3],bool,address)': FunctionFragment;
    'remove_liquidity(uint256,uint256[3],bool,address,bool)': FunctionFragment;
    'remove_liquidity_one_coin(uint256,uint256,uint256)': FunctionFragment;
    'remove_liquidity_one_coin(uint256,uint256,uint256,bool)': FunctionFragment;
    'remove_liquidity_one_coin(uint256,uint256,uint256,bool,address)': FunctionFragment;
    'claim_admin_fees()': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'fee_receiver()': FunctionFragment;
    'calc_token_amount(uint256[3],bool)': FunctionFragment;
    'get_dy(uint256,uint256,uint256)': FunctionFragment;
    'get_dx(uint256,uint256,uint256)': FunctionFragment;
    'lp_price()': FunctionFragment;
    'get_virtual_price()': FunctionFragment;
    'price_oracle(uint256)': FunctionFragment;
    'last_prices(uint256)': FunctionFragment;
    'price_scale(uint256)': FunctionFragment;
    'fee()': FunctionFragment;
    'calc_withdraw_one_coin(uint256,uint256)': FunctionFragment;
    'calc_token_fee(uint256[3],uint256[3])': FunctionFragment;
    'A()': FunctionFragment;
    'gamma()': FunctionFragment;
    'mid_fee()': FunctionFragment;
    'out_fee()': FunctionFragment;
    'fee_gamma()': FunctionFragment;
    'allowed_extra_profit()': FunctionFragment;
    'adjustment_step()': FunctionFragment;
    'ma_time()': FunctionFragment;
    'precisions()': FunctionFragment;
    'fee_calc(uint256[3])': FunctionFragment;
    'DOMAIN_SEPARATOR()': FunctionFragment;
    'ramp_A_gamma(uint256,uint256,uint256)': FunctionFragment;
    'stop_ramp_A_gamma()': FunctionFragment;
    'commit_new_parameters(uint256,uint256,uint256,uint256,uint256,uint256)': FunctionFragment;
    'apply_new_parameters()': FunctionFragment;
    'revert_new_parameters()': FunctionFragment;
    'WETH20()': FunctionFragment;
    'MATH()': FunctionFragment;
    'coins(uint256)': FunctionFragment;
    'factory()': FunctionFragment;
    'last_prices_timestamp()': FunctionFragment;
    'initial_A_gamma()': FunctionFragment;
    'initial_A_gamma_time()': FunctionFragment;
    'future_A_gamma()': FunctionFragment;
    'future_A_gamma_time()': FunctionFragment;
    'balances(uint256)': FunctionFragment;
    'D()': FunctionFragment;
    'xcp_profit()': FunctionFragment;
    'xcp_profit_a()': FunctionFragment;
    'virtual_price()': FunctionFragment;
    'packed_rebalancing_params()': FunctionFragment;
    'packed_fee_params()': FunctionFragment;
    'ADMIN_FEE()': FunctionFragment;
    'admin_actions_deadline()': FunctionFragment;
    'name()': FunctionFragment;
    'symbol()': FunctionFragment;
    'decimals()': FunctionFragment;
    'version()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'salt()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'exchange(uint256,uint256,uint256,uint256)'
      | 'exchange(uint256,uint256,uint256,uint256,bool)'
      | 'exchange(uint256,uint256,uint256,uint256,bool,address)'
      | 'exchange_underlying(uint256,uint256,uint256,uint256)'
      | 'exchange_underlying(uint256,uint256,uint256,uint256,address)'
      | 'exchange_extended'
      | 'add_liquidity(uint256[3],uint256)'
      | 'add_liquidity(uint256[3],uint256,bool)'
      | 'add_liquidity(uint256[3],uint256,bool,address)'
      | 'remove_liquidity(uint256,uint256[3])'
      | 'remove_liquidity(uint256,uint256[3],bool)'
      | 'remove_liquidity(uint256,uint256[3],bool,address)'
      | 'remove_liquidity(uint256,uint256[3],bool,address,bool)'
      | 'remove_liquidity_one_coin(uint256,uint256,uint256)'
      | 'remove_liquidity_one_coin(uint256,uint256,uint256,bool)'
      | 'remove_liquidity_one_coin(uint256,uint256,uint256,bool,address)'
      | 'claim_admin_fees'
      | 'transferFrom'
      | 'transfer'
      | 'approve'
      | 'increaseAllowance'
      | 'decreaseAllowance'
      | 'permit'
      | 'fee_receiver'
      | 'calc_token_amount'
      | 'get_dy'
      | 'get_dx'
      | 'lp_price'
      | 'get_virtual_price'
      | 'price_oracle'
      | 'last_prices'
      | 'price_scale'
      | 'fee'
      | 'calc_withdraw_one_coin'
      | 'calc_token_fee'
      | 'A'
      | 'gamma'
      | 'mid_fee'
      | 'out_fee'
      | 'fee_gamma'
      | 'allowed_extra_profit'
      | 'adjustment_step'
      | 'ma_time'
      | 'precisions'
      | 'fee_calc'
      | 'DOMAIN_SEPARATOR'
      | 'ramp_A_gamma'
      | 'stop_ramp_A_gamma'
      | 'commit_new_parameters'
      | 'apply_new_parameters'
      | 'revert_new_parameters'
      | 'WETH20'
      | 'MATH'
      | 'coins'
      | 'factory'
      | 'last_prices_timestamp'
      | 'initial_A_gamma'
      | 'initial_A_gamma_time'
      | 'future_A_gamma'
      | 'future_A_gamma_time'
      | 'balances'
      | 'D'
      | 'xcp_profit'
      | 'xcp_profit_a'
      | 'virtual_price'
      | 'packed_rebalancing_params'
      | 'packed_fee_params'
      | 'ADMIN_FEE'
      | 'admin_actions_deadline'
      | 'name'
      | 'symbol'
      | 'decimals'
      | 'version'
      | 'balanceOf'
      | 'allowance'
      | 'totalSupply'
      | 'nonces'
      | 'salt',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'exchange(uint256,uint256,uint256,uint256)',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'exchange(uint256,uint256,uint256,uint256,bool)',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'exchange(uint256,uint256,uint256,uint256,bool,address)',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'exchange_underlying(uint256,uint256,uint256,uint256)',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'exchange_underlying(uint256,uint256,uint256,uint256,address)',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'exchange_extended',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'add_liquidity(uint256[3],uint256)',
    values: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'add_liquidity(uint256[3],uint256,bool)',
    values: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'add_liquidity(uint256[3],uint256,bool,address)',
    values: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'remove_liquidity(uint256,uint256[3])',
    values: [
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'remove_liquidity(uint256,uint256[3],bool)',
    values: [
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'remove_liquidity(uint256,uint256[3],bool,address)',
    values: [
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'remove_liquidity(uint256,uint256[3],bool,address,bool)',
    values: [
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'remove_liquidity_one_coin(uint256,uint256,uint256)',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'remove_liquidity_one_coin(uint256,uint256,uint256,bool)',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'remove_liquidity_one_coin(uint256,uint256,uint256,bool,address)',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'claim_admin_fees', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'permit',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'fee_receiver', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'calc_token_amount',
    values: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'get_dy',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'get_dx',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'lp_price', values?: undefined): string;
  encodeFunctionData(functionFragment: 'get_virtual_price', values?: undefined): string;
  encodeFunctionData(functionFragment: 'price_oracle', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'last_prices', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'price_scale', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'fee', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'calc_withdraw_one_coin',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'calc_token_fee',
    values: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    ],
  ): string;
  encodeFunctionData(functionFragment: 'A', values?: undefined): string;
  encodeFunctionData(functionFragment: 'gamma', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mid_fee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'out_fee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fee_gamma', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowed_extra_profit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'adjustment_step', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ma_time', values?: undefined): string;
  encodeFunctionData(functionFragment: 'precisions', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'fee_calc',
    values: [[PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]],
  ): string;
  encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'ramp_A_gamma',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'stop_ramp_A_gamma', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'commit_new_parameters',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'apply_new_parameters', values?: undefined): string;
  encodeFunctionData(functionFragment: 'revert_new_parameters', values?: undefined): string;
  encodeFunctionData(functionFragment: 'WETH20', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MATH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'coins', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string;
  encodeFunctionData(functionFragment: 'last_prices_timestamp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initial_A_gamma', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initial_A_gamma_time', values?: undefined): string;
  encodeFunctionData(functionFragment: 'future_A_gamma', values?: undefined): string;
  encodeFunctionData(functionFragment: 'future_A_gamma_time', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balances', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'D', values?: undefined): string;
  encodeFunctionData(functionFragment: 'xcp_profit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'xcp_profit_a', values?: undefined): string;
  encodeFunctionData(functionFragment: 'virtual_price', values?: undefined): string;
  encodeFunctionData(functionFragment: 'packed_rebalancing_params', values?: undefined): string;
  encodeFunctionData(functionFragment: 'packed_fee_params', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ADMIN_FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'admin_actions_deadline', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'version', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'salt', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'exchange(uint256,uint256,uint256,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exchange(uint256,uint256,uint256,uint256,bool)', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'exchange(uint256,uint256,uint256,uint256,bool,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'exchange_underlying(uint256,uint256,uint256,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'exchange_underlying(uint256,uint256,uint256,uint256,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'exchange_extended', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'add_liquidity(uint256[3],uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'add_liquidity(uint256[3],uint256,bool)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'add_liquidity(uint256[3],uint256,bool,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'remove_liquidity(uint256,uint256[3])', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'remove_liquidity(uint256,uint256[3],bool)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'remove_liquidity(uint256,uint256[3],bool,address)', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'remove_liquidity(uint256,uint256[3],bool,address,bool)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'remove_liquidity_one_coin(uint256,uint256,uint256)', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'remove_liquidity_one_coin(uint256,uint256,uint256,bool)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'remove_liquidity_one_coin(uint256,uint256,uint256,bool,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'claim_admin_fees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fee_receiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calc_token_amount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'get_dy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'get_dx', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lp_price', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'get_virtual_price', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'price_oracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'last_prices', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'price_scale', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calc_withdraw_one_coin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calc_token_fee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'A', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gamma', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mid_fee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'out_fee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fee_gamma', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowed_extra_profit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adjustment_step', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ma_time', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'precisions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fee_calc', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ramp_A_gamma', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stop_ramp_A_gamma', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'commit_new_parameters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'apply_new_parameters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revert_new_parameters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'WETH20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MATH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'coins', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'last_prices_timestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initial_A_gamma', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initial_A_gamma_time', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'future_A_gamma', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'future_A_gamma_time', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'D', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xcp_profit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xcp_profit_a', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'virtual_price', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'packed_rebalancing_params', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'packed_fee_params', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ADMIN_FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin_actions_deadline', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'salt', data: BytesLike): Result;

  events: {
    'Transfer(address,address,uint256)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'TokenExchange(address,uint256,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'AddLiquidity(address,uint256[3],uint256,uint256,uint256)': EventFragment;
    'RemoveLiquidity(address,uint256[3],uint256)': EventFragment;
    'RemoveLiquidityOne(address,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'CommitNewParameters(uint256,uint256,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'NewParameters(uint256,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'RampAgamma(uint256,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'StopRampA(uint256,uint256,uint256)': EventFragment;
    'ClaimAdminFee(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenExchange'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AddLiquidity'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RemoveLiquidity'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RemoveLiquidityOne'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CommitNewParameters'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewParameters'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RampAgamma'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StopRampA'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ClaimAdminFee'): EventFragment;
}

export interface TransferEventObject {
  sender: string;
  receiver: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface TokenExchangeEventObject {
  buyer: string;
  sold_id: BigNumber;
  tokens_sold: BigNumber;
  bought_id: BigNumber;
  tokens_bought: BigNumber;
  fee: BigNumber;
  packed_price_scale: BigNumber;
}
export type TokenExchangeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  TokenExchangeEventObject
>;

export type TokenExchangeEventFilter = TypedEventFilter<TokenExchangeEvent>;

export interface AddLiquidityEventObject {
  provider: string;
  token_amounts: [BigNumber, BigNumber, BigNumber];
  fee: BigNumber;
  token_supply: BigNumber;
  packed_price_scale: BigNumber;
}
export type AddLiquidityEvent = TypedEvent<
  [string, [BigNumber, BigNumber, BigNumber], BigNumber, BigNumber, BigNumber],
  AddLiquidityEventObject
>;

export type AddLiquidityEventFilter = TypedEventFilter<AddLiquidityEvent>;

export interface RemoveLiquidityEventObject {
  provider: string;
  token_amounts: [BigNumber, BigNumber, BigNumber];
  token_supply: BigNumber;
}
export type RemoveLiquidityEvent = TypedEvent<
  [string, [BigNumber, BigNumber, BigNumber], BigNumber],
  RemoveLiquidityEventObject
>;

export type RemoveLiquidityEventFilter = TypedEventFilter<RemoveLiquidityEvent>;

export interface RemoveLiquidityOneEventObject {
  provider: string;
  token_amount: BigNumber;
  coin_index: BigNumber;
  coin_amount: BigNumber;
  approx_fee: BigNumber;
  packed_price_scale: BigNumber;
}
export type RemoveLiquidityOneEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  RemoveLiquidityOneEventObject
>;

export type RemoveLiquidityOneEventFilter = TypedEventFilter<RemoveLiquidityOneEvent>;

export interface CommitNewParametersEventObject {
  deadline: BigNumber;
  mid_fee: BigNumber;
  out_fee: BigNumber;
  fee_gamma: BigNumber;
  allowed_extra_profit: BigNumber;
  adjustment_step: BigNumber;
  ma_time: BigNumber;
}
export type CommitNewParametersEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  CommitNewParametersEventObject
>;

export type CommitNewParametersEventFilter = TypedEventFilter<CommitNewParametersEvent>;

export interface NewParametersEventObject {
  mid_fee: BigNumber;
  out_fee: BigNumber;
  fee_gamma: BigNumber;
  allowed_extra_profit: BigNumber;
  adjustment_step: BigNumber;
  ma_time: BigNumber;
}
export type NewParametersEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  NewParametersEventObject
>;

export type NewParametersEventFilter = TypedEventFilter<NewParametersEvent>;

export interface RampAgammaEventObject {
  initial_A: BigNumber;
  future_A: BigNumber;
  initial_gamma: BigNumber;
  future_gamma: BigNumber;
  initial_time: BigNumber;
  future_time: BigNumber;
}
export type RampAgammaEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  RampAgammaEventObject
>;

export type RampAgammaEventFilter = TypedEventFilter<RampAgammaEvent>;

export interface StopRampAEventObject {
  current_A: BigNumber;
  current_gamma: BigNumber;
  time: BigNumber;
}
export type StopRampAEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], StopRampAEventObject>;

export type StopRampAEventFilter = TypedEventFilter<StopRampAEvent>;

export interface ClaimAdminFeeEventObject {
  admin: string;
  tokens: BigNumber;
}
export type ClaimAdminFeeEvent = TypedEvent<[string, BigNumber], ClaimAdminFeeEventObject>;

export type ClaimAdminFeeEventFilter = TypedEventFilter<ClaimAdminFeeEvent>;

export interface CurveTricryptoPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CurveTricryptoPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    'exchange(uint256,uint256,uint256,uint256)'(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'exchange(uint256,uint256,uint256,uint256,bool)'(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'exchange(uint256,uint256,uint256,uint256,bool,address)'(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'exchange_underlying(uint256,uint256,uint256,uint256)'(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'exchange_underlying(uint256,uint256,uint256,uint256,address)'(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    exchange_extended(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      cb: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'add_liquidity(uint256[3],uint256)'(
      amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      min_mint_amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'add_liquidity(uint256[3],uint256,bool)'(
      amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      min_mint_amount: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'add_liquidity(uint256[3],uint256,bool,address)'(
      amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      min_mint_amount: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'remove_liquidity(uint256,uint256[3])'(
      _amount: PromiseOrValue<BigNumberish>,
      min_amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'remove_liquidity(uint256,uint256[3],bool)'(
      _amount: PromiseOrValue<BigNumberish>,
      min_amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      use_eth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'remove_liquidity(uint256,uint256[3],bool,address)'(
      _amount: PromiseOrValue<BigNumberish>,
      min_amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      use_eth: PromiseOrValue<boolean>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'remove_liquidity(uint256,uint256[3],bool,address,bool)'(
      _amount: PromiseOrValue<BigNumberish>,
      min_amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      use_eth: PromiseOrValue<boolean>,
      receiver: PromiseOrValue<string>,
      claim_admin_fees: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'remove_liquidity_one_coin(uint256,uint256,uint256)'(
      token_amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      min_amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'remove_liquidity_one_coin(uint256,uint256,uint256,bool)'(
      token_amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      min_amount: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'remove_liquidity_one_coin(uint256,uint256,uint256,bool,address)'(
      token_amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      min_amount: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claim_admin_fees(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transfer(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    approve(
      _spender: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    increaseAllowance(
      _spender: PromiseOrValue<string>,
      _add_value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    decreaseAllowance(
      _spender: PromiseOrValue<string>,
      _sub_value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    permit(
      _owner: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    fee_receiver(overrides?: CallOverrides): Promise<[string]>;

    calc_token_amount(
      amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      deposit: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    get_dy(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    get_dx(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    lp_price(overrides?: CallOverrides): Promise<[BigNumber]>;

    get_virtual_price(overrides?: CallOverrides): Promise<[BigNumber]>;

    price_oracle(k: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    last_prices(k: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    price_scale(k: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    calc_withdraw_one_coin(
      token_amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    calc_token_fee(
      amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      xp: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    A(overrides?: CallOverrides): Promise<[BigNumber]>;

    gamma(overrides?: CallOverrides): Promise<[BigNumber]>;

    mid_fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    out_fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    fee_gamma(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowed_extra_profit(overrides?: CallOverrides): Promise<[BigNumber]>;

    adjustment_step(overrides?: CallOverrides): Promise<[BigNumber]>;

    ma_time(overrides?: CallOverrides): Promise<[BigNumber]>;

    precisions(overrides?: CallOverrides): Promise<[[BigNumber, BigNumber, BigNumber]]>;

    fee_calc(
      xp: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    ramp_A_gamma(
      future_A: PromiseOrValue<BigNumberish>,
      future_gamma: PromiseOrValue<BigNumberish>,
      future_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stop_ramp_A_gamma(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    commit_new_parameters(
      _new_mid_fee: PromiseOrValue<BigNumberish>,
      _new_out_fee: PromiseOrValue<BigNumberish>,
      _new_fee_gamma: PromiseOrValue<BigNumberish>,
      _new_allowed_extra_profit: PromiseOrValue<BigNumberish>,
      _new_adjustment_step: PromiseOrValue<BigNumberish>,
      _new_ma_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    apply_new_parameters(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    revert_new_parameters(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    WETH20(overrides?: CallOverrides): Promise<[string]>;

    MATH(overrides?: CallOverrides): Promise<[string]>;

    coins(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    last_prices_timestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    initial_A_gamma(overrides?: CallOverrides): Promise<[BigNumber]>;

    initial_A_gamma_time(overrides?: CallOverrides): Promise<[BigNumber]>;

    future_A_gamma(overrides?: CallOverrides): Promise<[BigNumber]>;

    future_A_gamma_time(overrides?: CallOverrides): Promise<[BigNumber]>;

    balances(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    D(overrides?: CallOverrides): Promise<[BigNumber]>;

    xcp_profit(overrides?: CallOverrides): Promise<[BigNumber]>;

    xcp_profit_a(overrides?: CallOverrides): Promise<[BigNumber]>;

    virtual_price(overrides?: CallOverrides): Promise<[BigNumber]>;

    packed_rebalancing_params(overrides?: CallOverrides): Promise<[BigNumber]>;

    packed_fee_params(overrides?: CallOverrides): Promise<[BigNumber]>;

    ADMIN_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    admin_actions_deadline(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    salt(overrides?: CallOverrides): Promise<[string]>;
  };

  'exchange(uint256,uint256,uint256,uint256)'(
    i: PromiseOrValue<BigNumberish>,
    j: PromiseOrValue<BigNumberish>,
    dx: PromiseOrValue<BigNumberish>,
    min_dy: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'exchange(uint256,uint256,uint256,uint256,bool)'(
    i: PromiseOrValue<BigNumberish>,
    j: PromiseOrValue<BigNumberish>,
    dx: PromiseOrValue<BigNumberish>,
    min_dy: PromiseOrValue<BigNumberish>,
    use_eth: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'exchange(uint256,uint256,uint256,uint256,bool,address)'(
    i: PromiseOrValue<BigNumberish>,
    j: PromiseOrValue<BigNumberish>,
    dx: PromiseOrValue<BigNumberish>,
    min_dy: PromiseOrValue<BigNumberish>,
    use_eth: PromiseOrValue<boolean>,
    receiver: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'exchange_underlying(uint256,uint256,uint256,uint256)'(
    i: PromiseOrValue<BigNumberish>,
    j: PromiseOrValue<BigNumberish>,
    dx: PromiseOrValue<BigNumberish>,
    min_dy: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'exchange_underlying(uint256,uint256,uint256,uint256,address)'(
    i: PromiseOrValue<BigNumberish>,
    j: PromiseOrValue<BigNumberish>,
    dx: PromiseOrValue<BigNumberish>,
    min_dy: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  exchange_extended(
    i: PromiseOrValue<BigNumberish>,
    j: PromiseOrValue<BigNumberish>,
    dx: PromiseOrValue<BigNumberish>,
    min_dy: PromiseOrValue<BigNumberish>,
    use_eth: PromiseOrValue<boolean>,
    sender: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    cb: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'add_liquidity(uint256[3],uint256)'(
    amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    min_mint_amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'add_liquidity(uint256[3],uint256,bool)'(
    amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    min_mint_amount: PromiseOrValue<BigNumberish>,
    use_eth: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'add_liquidity(uint256[3],uint256,bool,address)'(
    amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    min_mint_amount: PromiseOrValue<BigNumberish>,
    use_eth: PromiseOrValue<boolean>,
    receiver: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'remove_liquidity(uint256,uint256[3])'(
    _amount: PromiseOrValue<BigNumberish>,
    min_amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'remove_liquidity(uint256,uint256[3],bool)'(
    _amount: PromiseOrValue<BigNumberish>,
    min_amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    use_eth: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'remove_liquidity(uint256,uint256[3],bool,address)'(
    _amount: PromiseOrValue<BigNumberish>,
    min_amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    use_eth: PromiseOrValue<boolean>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'remove_liquidity(uint256,uint256[3],bool,address,bool)'(
    _amount: PromiseOrValue<BigNumberish>,
    min_amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    use_eth: PromiseOrValue<boolean>,
    receiver: PromiseOrValue<string>,
    claim_admin_fees: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'remove_liquidity_one_coin(uint256,uint256,uint256)'(
    token_amount: PromiseOrValue<BigNumberish>,
    i: PromiseOrValue<BigNumberish>,
    min_amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'remove_liquidity_one_coin(uint256,uint256,uint256,bool)'(
    token_amount: PromiseOrValue<BigNumberish>,
    i: PromiseOrValue<BigNumberish>,
    min_amount: PromiseOrValue<BigNumberish>,
    use_eth: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'remove_liquidity_one_coin(uint256,uint256,uint256,bool,address)'(
    token_amount: PromiseOrValue<BigNumberish>,
    i: PromiseOrValue<BigNumberish>,
    min_amount: PromiseOrValue<BigNumberish>,
    use_eth: PromiseOrValue<boolean>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claim_admin_fees(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  transferFrom(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transfer(
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  approve(
    _spender: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  increaseAllowance(
    _spender: PromiseOrValue<string>,
    _add_value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  decreaseAllowance(
    _spender: PromiseOrValue<string>,
    _sub_value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  permit(
    _owner: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    _deadline: PromiseOrValue<BigNumberish>,
    _v: PromiseOrValue<BigNumberish>,
    _r: PromiseOrValue<BytesLike>,
    _s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  fee_receiver(overrides?: CallOverrides): Promise<string>;

  calc_token_amount(
    amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    deposit: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  get_dy(
    i: PromiseOrValue<BigNumberish>,
    j: PromiseOrValue<BigNumberish>,
    dx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  get_dx(
    i: PromiseOrValue<BigNumberish>,
    j: PromiseOrValue<BigNumberish>,
    dy: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  lp_price(overrides?: CallOverrides): Promise<BigNumber>;

  get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

  price_oracle(k: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  last_prices(k: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  price_scale(k: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  calc_withdraw_one_coin(
    token_amount: PromiseOrValue<BigNumberish>,
    i: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  calc_token_fee(
    amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    xp: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  A(overrides?: CallOverrides): Promise<BigNumber>;

  gamma(overrides?: CallOverrides): Promise<BigNumber>;

  mid_fee(overrides?: CallOverrides): Promise<BigNumber>;

  out_fee(overrides?: CallOverrides): Promise<BigNumber>;

  fee_gamma(overrides?: CallOverrides): Promise<BigNumber>;

  allowed_extra_profit(overrides?: CallOverrides): Promise<BigNumber>;

  adjustment_step(overrides?: CallOverrides): Promise<BigNumber>;

  ma_time(overrides?: CallOverrides): Promise<BigNumber>;

  precisions(overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber]>;

  fee_calc(
    xp: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  ramp_A_gamma(
    future_A: PromiseOrValue<BigNumberish>,
    future_gamma: PromiseOrValue<BigNumberish>,
    future_time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stop_ramp_A_gamma(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  commit_new_parameters(
    _new_mid_fee: PromiseOrValue<BigNumberish>,
    _new_out_fee: PromiseOrValue<BigNumberish>,
    _new_fee_gamma: PromiseOrValue<BigNumberish>,
    _new_allowed_extra_profit: PromiseOrValue<BigNumberish>,
    _new_adjustment_step: PromiseOrValue<BigNumberish>,
    _new_ma_time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  apply_new_parameters(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  revert_new_parameters(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  WETH20(overrides?: CallOverrides): Promise<string>;

  MATH(overrides?: CallOverrides): Promise<string>;

  coins(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  last_prices_timestamp(overrides?: CallOverrides): Promise<BigNumber>;

  initial_A_gamma(overrides?: CallOverrides): Promise<BigNumber>;

  initial_A_gamma_time(overrides?: CallOverrides): Promise<BigNumber>;

  future_A_gamma(overrides?: CallOverrides): Promise<BigNumber>;

  future_A_gamma_time(overrides?: CallOverrides): Promise<BigNumber>;

  balances(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  D(overrides?: CallOverrides): Promise<BigNumber>;

  xcp_profit(overrides?: CallOverrides): Promise<BigNumber>;

  xcp_profit_a(overrides?: CallOverrides): Promise<BigNumber>;

  virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

  packed_rebalancing_params(overrides?: CallOverrides): Promise<BigNumber>;

  packed_fee_params(overrides?: CallOverrides): Promise<BigNumber>;

  ADMIN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  admin_actions_deadline(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  version(overrides?: CallOverrides): Promise<string>;

  balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  allowance(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  salt(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    'exchange(uint256,uint256,uint256,uint256)'(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'exchange(uint256,uint256,uint256,uint256,bool)'(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'exchange(uint256,uint256,uint256,uint256,bool,address)'(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'exchange_underlying(uint256,uint256,uint256,uint256)'(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'exchange_underlying(uint256,uint256,uint256,uint256,address)'(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    exchange_extended(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      cb: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'add_liquidity(uint256[3],uint256)'(
      amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      min_mint_amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'add_liquidity(uint256[3],uint256,bool)'(
      amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      min_mint_amount: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'add_liquidity(uint256[3],uint256,bool,address)'(
      amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      min_mint_amount: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'remove_liquidity(uint256,uint256[3])'(
      _amount: PromiseOrValue<BigNumberish>,
      min_amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    'remove_liquidity(uint256,uint256[3],bool)'(
      _amount: PromiseOrValue<BigNumberish>,
      min_amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      use_eth: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    'remove_liquidity(uint256,uint256[3],bool,address)'(
      _amount: PromiseOrValue<BigNumberish>,
      min_amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      use_eth: PromiseOrValue<boolean>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    'remove_liquidity(uint256,uint256[3],bool,address,bool)'(
      _amount: PromiseOrValue<BigNumberish>,
      min_amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      use_eth: PromiseOrValue<boolean>,
      receiver: PromiseOrValue<string>,
      claim_admin_fees: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    'remove_liquidity_one_coin(uint256,uint256,uint256)'(
      token_amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      min_amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'remove_liquidity_one_coin(uint256,uint256,uint256,bool)'(
      token_amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      min_amount: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'remove_liquidity_one_coin(uint256,uint256,uint256,bool,address)'(
      token_amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      min_amount: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    claim_admin_fees(overrides?: CallOverrides): Promise<void>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transfer(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    approve(
      _spender: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    increaseAllowance(
      _spender: PromiseOrValue<string>,
      _add_value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    decreaseAllowance(
      _spender: PromiseOrValue<string>,
      _sub_value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    permit(
      _owner: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    fee_receiver(overrides?: CallOverrides): Promise<string>;

    calc_token_amount(
      amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      deposit: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    get_dy(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    get_dx(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lp_price(overrides?: CallOverrides): Promise<BigNumber>;

    get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

    price_oracle(k: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    last_prices(k: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    price_scale(k: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    calc_withdraw_one_coin(
      token_amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calc_token_fee(
      amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      xp: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    A(overrides?: CallOverrides): Promise<BigNumber>;

    gamma(overrides?: CallOverrides): Promise<BigNumber>;

    mid_fee(overrides?: CallOverrides): Promise<BigNumber>;

    out_fee(overrides?: CallOverrides): Promise<BigNumber>;

    fee_gamma(overrides?: CallOverrides): Promise<BigNumber>;

    allowed_extra_profit(overrides?: CallOverrides): Promise<BigNumber>;

    adjustment_step(overrides?: CallOverrides): Promise<BigNumber>;

    ma_time(overrides?: CallOverrides): Promise<BigNumber>;

    precisions(overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber]>;

    fee_calc(
      xp: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    ramp_A_gamma(
      future_A: PromiseOrValue<BigNumberish>,
      future_gamma: PromiseOrValue<BigNumberish>,
      future_time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    stop_ramp_A_gamma(overrides?: CallOverrides): Promise<void>;

    commit_new_parameters(
      _new_mid_fee: PromiseOrValue<BigNumberish>,
      _new_out_fee: PromiseOrValue<BigNumberish>,
      _new_fee_gamma: PromiseOrValue<BigNumberish>,
      _new_allowed_extra_profit: PromiseOrValue<BigNumberish>,
      _new_adjustment_step: PromiseOrValue<BigNumberish>,
      _new_ma_time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    apply_new_parameters(overrides?: CallOverrides): Promise<void>;

    revert_new_parameters(overrides?: CallOverrides): Promise<void>;

    WETH20(overrides?: CallOverrides): Promise<string>;

    MATH(overrides?: CallOverrides): Promise<string>;

    coins(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    last_prices_timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    initial_A_gamma(overrides?: CallOverrides): Promise<BigNumber>;

    initial_A_gamma_time(overrides?: CallOverrides): Promise<BigNumber>;

    future_A_gamma(overrides?: CallOverrides): Promise<BigNumber>;

    future_A_gamma_time(overrides?: CallOverrides): Promise<BigNumber>;

    balances(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    D(overrides?: CallOverrides): Promise<BigNumber>;

    xcp_profit(overrides?: CallOverrides): Promise<BigNumber>;

    xcp_profit_a(overrides?: CallOverrides): Promise<BigNumber>;

    virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

    packed_rebalancing_params(overrides?: CallOverrides): Promise<BigNumber>;

    packed_fee_params(overrides?: CallOverrides): Promise<BigNumber>;

    ADMIN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    admin_actions_deadline(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    version(overrides?: CallOverrides): Promise<string>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    salt(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'Transfer(address,address,uint256)'(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;

    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'TokenExchange(address,uint256,uint256,uint256,uint256,uint256,uint256)'(
      buyer?: PromiseOrValue<string> | null,
      sold_id?: null,
      tokens_sold?: null,
      bought_id?: null,
      tokens_bought?: null,
      fee?: null,
      packed_price_scale?: null,
    ): TokenExchangeEventFilter;
    TokenExchange(
      buyer?: PromiseOrValue<string> | null,
      sold_id?: null,
      tokens_sold?: null,
      bought_id?: null,
      tokens_bought?: null,
      fee?: null,
      packed_price_scale?: null,
    ): TokenExchangeEventFilter;

    'AddLiquidity(address,uint256[3],uint256,uint256,uint256)'(
      provider?: PromiseOrValue<string> | null,
      token_amounts?: null,
      fee?: null,
      token_supply?: null,
      packed_price_scale?: null,
    ): AddLiquidityEventFilter;
    AddLiquidity(
      provider?: PromiseOrValue<string> | null,
      token_amounts?: null,
      fee?: null,
      token_supply?: null,
      packed_price_scale?: null,
    ): AddLiquidityEventFilter;

    'RemoveLiquidity(address,uint256[3],uint256)'(
      provider?: PromiseOrValue<string> | null,
      token_amounts?: null,
      token_supply?: null,
    ): RemoveLiquidityEventFilter;
    RemoveLiquidity(
      provider?: PromiseOrValue<string> | null,
      token_amounts?: null,
      token_supply?: null,
    ): RemoveLiquidityEventFilter;

    'RemoveLiquidityOne(address,uint256,uint256,uint256,uint256,uint256)'(
      provider?: PromiseOrValue<string> | null,
      token_amount?: null,
      coin_index?: null,
      coin_amount?: null,
      approx_fee?: null,
      packed_price_scale?: null,
    ): RemoveLiquidityOneEventFilter;
    RemoveLiquidityOne(
      provider?: PromiseOrValue<string> | null,
      token_amount?: null,
      coin_index?: null,
      coin_amount?: null,
      approx_fee?: null,
      packed_price_scale?: null,
    ): RemoveLiquidityOneEventFilter;

    'CommitNewParameters(uint256,uint256,uint256,uint256,uint256,uint256,uint256)'(
      deadline?: PromiseOrValue<BigNumberish> | null,
      mid_fee?: null,
      out_fee?: null,
      fee_gamma?: null,
      allowed_extra_profit?: null,
      adjustment_step?: null,
      ma_time?: null,
    ): CommitNewParametersEventFilter;
    CommitNewParameters(
      deadline?: PromiseOrValue<BigNumberish> | null,
      mid_fee?: null,
      out_fee?: null,
      fee_gamma?: null,
      allowed_extra_profit?: null,
      adjustment_step?: null,
      ma_time?: null,
    ): CommitNewParametersEventFilter;

    'NewParameters(uint256,uint256,uint256,uint256,uint256,uint256)'(
      mid_fee?: null,
      out_fee?: null,
      fee_gamma?: null,
      allowed_extra_profit?: null,
      adjustment_step?: null,
      ma_time?: null,
    ): NewParametersEventFilter;
    NewParameters(
      mid_fee?: null,
      out_fee?: null,
      fee_gamma?: null,
      allowed_extra_profit?: null,
      adjustment_step?: null,
      ma_time?: null,
    ): NewParametersEventFilter;

    'RampAgamma(uint256,uint256,uint256,uint256,uint256,uint256)'(
      initial_A?: null,
      future_A?: null,
      initial_gamma?: null,
      future_gamma?: null,
      initial_time?: null,
      future_time?: null,
    ): RampAgammaEventFilter;
    RampAgamma(
      initial_A?: null,
      future_A?: null,
      initial_gamma?: null,
      future_gamma?: null,
      initial_time?: null,
      future_time?: null,
    ): RampAgammaEventFilter;

    'StopRampA(uint256,uint256,uint256)'(current_A?: null, current_gamma?: null, time?: null): StopRampAEventFilter;
    StopRampA(current_A?: null, current_gamma?: null, time?: null): StopRampAEventFilter;

    'ClaimAdminFee(address,uint256)'(admin?: PromiseOrValue<string> | null, tokens?: null): ClaimAdminFeeEventFilter;
    ClaimAdminFee(admin?: PromiseOrValue<string> | null, tokens?: null): ClaimAdminFeeEventFilter;
  };

  estimateGas: {
    'exchange(uint256,uint256,uint256,uint256)'(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'exchange(uint256,uint256,uint256,uint256,bool)'(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'exchange(uint256,uint256,uint256,uint256,bool,address)'(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'exchange_underlying(uint256,uint256,uint256,uint256)'(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'exchange_underlying(uint256,uint256,uint256,uint256,address)'(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    exchange_extended(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      cb: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'add_liquidity(uint256[3],uint256)'(
      amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      min_mint_amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'add_liquidity(uint256[3],uint256,bool)'(
      amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      min_mint_amount: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'add_liquidity(uint256[3],uint256,bool,address)'(
      amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      min_mint_amount: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'remove_liquidity(uint256,uint256[3])'(
      _amount: PromiseOrValue<BigNumberish>,
      min_amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'remove_liquidity(uint256,uint256[3],bool)'(
      _amount: PromiseOrValue<BigNumberish>,
      min_amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      use_eth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'remove_liquidity(uint256,uint256[3],bool,address)'(
      _amount: PromiseOrValue<BigNumberish>,
      min_amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      use_eth: PromiseOrValue<boolean>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'remove_liquidity(uint256,uint256[3],bool,address,bool)'(
      _amount: PromiseOrValue<BigNumberish>,
      min_amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      use_eth: PromiseOrValue<boolean>,
      receiver: PromiseOrValue<string>,
      claim_admin_fees: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'remove_liquidity_one_coin(uint256,uint256,uint256)'(
      token_amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      min_amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'remove_liquidity_one_coin(uint256,uint256,uint256,bool)'(
      token_amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      min_amount: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'remove_liquidity_one_coin(uint256,uint256,uint256,bool,address)'(
      token_amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      min_amount: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claim_admin_fees(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transfer(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    approve(
      _spender: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    increaseAllowance(
      _spender: PromiseOrValue<string>,
      _add_value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    decreaseAllowance(
      _spender: PromiseOrValue<string>,
      _sub_value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    permit(
      _owner: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    fee_receiver(overrides?: CallOverrides): Promise<BigNumber>;

    calc_token_amount(
      amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      deposit: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    get_dy(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    get_dx(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lp_price(overrides?: CallOverrides): Promise<BigNumber>;

    get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

    price_oracle(k: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    last_prices(k: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    price_scale(k: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    calc_withdraw_one_coin(
      token_amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calc_token_fee(
      amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      xp: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    A(overrides?: CallOverrides): Promise<BigNumber>;

    gamma(overrides?: CallOverrides): Promise<BigNumber>;

    mid_fee(overrides?: CallOverrides): Promise<BigNumber>;

    out_fee(overrides?: CallOverrides): Promise<BigNumber>;

    fee_gamma(overrides?: CallOverrides): Promise<BigNumber>;

    allowed_extra_profit(overrides?: CallOverrides): Promise<BigNumber>;

    adjustment_step(overrides?: CallOverrides): Promise<BigNumber>;

    ma_time(overrides?: CallOverrides): Promise<BigNumber>;

    precisions(overrides?: CallOverrides): Promise<BigNumber>;

    fee_calc(
      xp: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    ramp_A_gamma(
      future_A: PromiseOrValue<BigNumberish>,
      future_gamma: PromiseOrValue<BigNumberish>,
      future_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stop_ramp_A_gamma(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    commit_new_parameters(
      _new_mid_fee: PromiseOrValue<BigNumberish>,
      _new_out_fee: PromiseOrValue<BigNumberish>,
      _new_fee_gamma: PromiseOrValue<BigNumberish>,
      _new_allowed_extra_profit: PromiseOrValue<BigNumberish>,
      _new_adjustment_step: PromiseOrValue<BigNumberish>,
      _new_ma_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    apply_new_parameters(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    revert_new_parameters(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    WETH20(overrides?: CallOverrides): Promise<BigNumber>;

    MATH(overrides?: CallOverrides): Promise<BigNumber>;

    coins(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    last_prices_timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    initial_A_gamma(overrides?: CallOverrides): Promise<BigNumber>;

    initial_A_gamma_time(overrides?: CallOverrides): Promise<BigNumber>;

    future_A_gamma(overrides?: CallOverrides): Promise<BigNumber>;

    future_A_gamma_time(overrides?: CallOverrides): Promise<BigNumber>;

    balances(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    D(overrides?: CallOverrides): Promise<BigNumber>;

    xcp_profit(overrides?: CallOverrides): Promise<BigNumber>;

    xcp_profit_a(overrides?: CallOverrides): Promise<BigNumber>;

    virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

    packed_rebalancing_params(overrides?: CallOverrides): Promise<BigNumber>;

    packed_fee_params(overrides?: CallOverrides): Promise<BigNumber>;

    ADMIN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    admin_actions_deadline(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    salt(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    'exchange(uint256,uint256,uint256,uint256)'(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'exchange(uint256,uint256,uint256,uint256,bool)'(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'exchange(uint256,uint256,uint256,uint256,bool,address)'(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'exchange_underlying(uint256,uint256,uint256,uint256)'(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'exchange_underlying(uint256,uint256,uint256,uint256,address)'(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    exchange_extended(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      min_dy: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      cb: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'add_liquidity(uint256[3],uint256)'(
      amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      min_mint_amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'add_liquidity(uint256[3],uint256,bool)'(
      amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      min_mint_amount: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'add_liquidity(uint256[3],uint256,bool,address)'(
      amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      min_mint_amount: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'remove_liquidity(uint256,uint256[3])'(
      _amount: PromiseOrValue<BigNumberish>,
      min_amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'remove_liquidity(uint256,uint256[3],bool)'(
      _amount: PromiseOrValue<BigNumberish>,
      min_amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      use_eth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'remove_liquidity(uint256,uint256[3],bool,address)'(
      _amount: PromiseOrValue<BigNumberish>,
      min_amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      use_eth: PromiseOrValue<boolean>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'remove_liquidity(uint256,uint256[3],bool,address,bool)'(
      _amount: PromiseOrValue<BigNumberish>,
      min_amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      use_eth: PromiseOrValue<boolean>,
      receiver: PromiseOrValue<string>,
      claim_admin_fees: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'remove_liquidity_one_coin(uint256,uint256,uint256)'(
      token_amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      min_amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'remove_liquidity_one_coin(uint256,uint256,uint256,bool)'(
      token_amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      min_amount: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'remove_liquidity_one_coin(uint256,uint256,uint256,bool,address)'(
      token_amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      min_amount: PromiseOrValue<BigNumberish>,
      use_eth: PromiseOrValue<boolean>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claim_admin_fees(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transfer(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      _spender: PromiseOrValue<string>,
      _add_value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    decreaseAllowance(
      _spender: PromiseOrValue<string>,
      _sub_value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    permit(
      _owner: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    fee_receiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calc_token_amount(
      amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      deposit: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    get_dy(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    get_dx(
      i: PromiseOrValue<BigNumberish>,
      j: PromiseOrValue<BigNumberish>,
      dy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lp_price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_virtual_price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price_oracle(k: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    last_prices(k: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price_scale(k: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calc_withdraw_one_coin(
      token_amount: PromiseOrValue<BigNumberish>,
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    calc_token_fee(
      amounts: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      xp: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    A(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gamma(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mid_fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    out_fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee_gamma(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowed_extra_profit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adjustment_step(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ma_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    precisions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee_calc(
      xp: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ramp_A_gamma(
      future_A: PromiseOrValue<BigNumberish>,
      future_gamma: PromiseOrValue<BigNumberish>,
      future_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stop_ramp_A_gamma(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    commit_new_parameters(
      _new_mid_fee: PromiseOrValue<BigNumberish>,
      _new_out_fee: PromiseOrValue<BigNumberish>,
      _new_fee_gamma: PromiseOrValue<BigNumberish>,
      _new_allowed_extra_profit: PromiseOrValue<BigNumberish>,
      _new_adjustment_step: PromiseOrValue<BigNumberish>,
      _new_ma_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    apply_new_parameters(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    revert_new_parameters(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    WETH20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MATH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coins(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    last_prices_timestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initial_A_gamma(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initial_A_gamma_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_A_gamma(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_A_gamma_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balances(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    D(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xcp_profit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xcp_profit_a(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    virtual_price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    packed_rebalancing_params(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    packed_fee_params(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ADMIN_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin_actions_deadline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    salt(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
