/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace Storage {
  export type AssetConfigStruct = {
    eTokenAddress: PromiseOrValue<string>;
    borrowIsolated: PromiseOrValue<boolean>;
    collateralFactor: PromiseOrValue<BigNumberish>;
    borrowFactor: PromiseOrValue<BigNumberish>;
    twapWindow: PromiseOrValue<BigNumberish>;
  };

  export type AssetConfigStructOutput = [string, boolean, number, number, number] & {
    eTokenAddress: string;
    borrowIsolated: boolean;
    collateralFactor: number;
    borrowFactor: number;
    twapWindow: number;
  };
}

export interface EulerDtokenContractInterface extends utils.Interface {
  functions: {
    'approveDebt(uint256,address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'balanceOfExact(address)': FunctionFragment;
    'borrow(uint256,uint256)': FunctionFragment;
    'debtAllowance(address,address)': FunctionFragment;
    'decimals()': FunctionFragment;
    'moduleGitCommit()': FunctionFragment;
    'moduleId()': FunctionFragment;
    'name()': FunctionFragment;
    'repay(uint256,uint256)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'totalSupplyExact()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'approveDebt'
      | 'balanceOf'
      | 'balanceOfExact'
      | 'borrow'
      | 'debtAllowance'
      | 'decimals'
      | 'moduleGitCommit'
      | 'moduleId'
      | 'name'
      | 'repay'
      | 'symbol'
      | 'totalSupply'
      | 'totalSupplyExact'
      | 'transfer'
      | 'transferFrom',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'approveDebt',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'balanceOfExact', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'borrow',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'debtAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'moduleGitCommit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'moduleId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'repay',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupplyExact', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'approveDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfExact', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'debtAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'moduleGitCommit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'moduleId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupplyExact', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'AssetStatus(address,uint256,uint256,uint96,uint256,uint256,int96,uint256)': EventFragment;
    'Borrow(address,address,uint256)': EventFragment;
    'DelegateAverageLiquidity(address,address)': EventFragment;
    'Deposit(address,address,uint256)': EventFragment;
    'EnterMarket(address,address)': EventFragment;
    'ExitMarket(address,address)': EventFragment;
    'Genesis()': EventFragment;
    'GovConvertReserves(address,address,uint256)': EventFragment;
    'GovSetAssetConfig(address,tuple)': EventFragment;
    'GovSetIRM(address,uint256,bytes)': EventFragment;
    'GovSetPricingConfig(address,uint16,uint32)': EventFragment;
    'GovSetReserveFee(address,uint32)': EventFragment;
    'InstallerInstallModule(uint256,address,bytes32)': EventFragment;
    'InstallerSetGovernorAdmin(address)': EventFragment;
    'InstallerSetUpgradeAdmin(address)': EventFragment;
    'Liquidation(address,address,address,address,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'MarketActivated(address,address,address)': EventFragment;
    'PTokenActivated(address,address)': EventFragment;
    'PTokenUnWrap(address,address,uint256)': EventFragment;
    'PTokenWrap(address,address,uint256)': EventFragment;
    'ProxyCreated(address,uint256)': EventFragment;
    'Repay(address,address,uint256)': EventFragment;
    'RequestBorrow(address,uint256)': EventFragment;
    'RequestBurn(address,uint256)': EventFragment;
    'RequestDeposit(address,uint256)': EventFragment;
    'RequestLiquidate(address,address,address,address,uint256,uint256)': EventFragment;
    'RequestMint(address,uint256)': EventFragment;
    'RequestRepay(address,uint256)': EventFragment;
    'RequestSwap(address,address,address,address,uint256,uint256)': EventFragment;
    'RequestTransferDToken(address,address,uint256)': EventFragment;
    'RequestTransferEToken(address,address,uint256)': EventFragment;
    'RequestWithdraw(address,uint256)': EventFragment;
    'TrackAverageLiquidity(address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'UnTrackAverageLiquidity(address)': EventFragment;
    'Withdraw(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AssetStatus'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Borrow'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DelegateAverageLiquidity'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EnterMarket'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExitMarket'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Genesis'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GovConvertReserves'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GovSetAssetConfig'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GovSetIRM'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GovSetPricingConfig'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GovSetReserveFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InstallerInstallModule'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InstallerSetGovernorAdmin'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InstallerSetUpgradeAdmin'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Liquidation'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketActivated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PTokenActivated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PTokenUnWrap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PTokenWrap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProxyCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Repay'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RequestBorrow'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RequestBurn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RequestDeposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RequestLiquidate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RequestMint'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RequestRepay'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RequestSwap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RequestTransferDToken'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RequestTransferEToken'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RequestWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TrackAverageLiquidity'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UnTrackAverageLiquidity'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface AssetStatusEventObject {
  underlying: string;
  totalBalances: BigNumber;
  totalBorrows: BigNumber;
  reserveBalance: BigNumber;
  poolSize: BigNumber;
  interestAccumulator: BigNumber;
  interestRate: BigNumber;
  timestamp: BigNumber;
}
export type AssetStatusEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  AssetStatusEventObject
>;

export type AssetStatusEventFilter = TypedEventFilter<AssetStatusEvent>;

export interface BorrowEventObject {
  underlying: string;
  account: string;
  amount: BigNumber;
}
export type BorrowEvent = TypedEvent<[string, string, BigNumber], BorrowEventObject>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface DelegateAverageLiquidityEventObject {
  account: string;
  delegate: string;
}
export type DelegateAverageLiquidityEvent = TypedEvent<[string, string], DelegateAverageLiquidityEventObject>;

export type DelegateAverageLiquidityEventFilter = TypedEventFilter<DelegateAverageLiquidityEvent>;

export interface DepositEventObject {
  underlying: string;
  account: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EnterMarketEventObject {
  underlying: string;
  account: string;
}
export type EnterMarketEvent = TypedEvent<[string, string], EnterMarketEventObject>;

export type EnterMarketEventFilter = TypedEventFilter<EnterMarketEvent>;

export interface ExitMarketEventObject {
  underlying: string;
  account: string;
}
export type ExitMarketEvent = TypedEvent<[string, string], ExitMarketEventObject>;

export type ExitMarketEventFilter = TypedEventFilter<ExitMarketEvent>;

export interface GenesisEventObject {}
export type GenesisEvent = TypedEvent<[], GenesisEventObject>;

export type GenesisEventFilter = TypedEventFilter<GenesisEvent>;

export interface GovConvertReservesEventObject {
  underlying: string;
  recipient: string;
  amount: BigNumber;
}
export type GovConvertReservesEvent = TypedEvent<[string, string, BigNumber], GovConvertReservesEventObject>;

export type GovConvertReservesEventFilter = TypedEventFilter<GovConvertReservesEvent>;

export interface GovSetAssetConfigEventObject {
  underlying: string;
  newConfig: Storage.AssetConfigStructOutput;
}
export type GovSetAssetConfigEvent = TypedEvent<
  [string, Storage.AssetConfigStructOutput],
  GovSetAssetConfigEventObject
>;

export type GovSetAssetConfigEventFilter = TypedEventFilter<GovSetAssetConfigEvent>;

export interface GovSetIRMEventObject {
  underlying: string;
  interestRateModel: BigNumber;
  resetParams: string;
}
export type GovSetIRMEvent = TypedEvent<[string, BigNumber, string], GovSetIRMEventObject>;

export type GovSetIRMEventFilter = TypedEventFilter<GovSetIRMEvent>;

export interface GovSetPricingConfigEventObject {
  underlying: string;
  newPricingType: number;
  newPricingParameter: number;
}
export type GovSetPricingConfigEvent = TypedEvent<[string, number, number], GovSetPricingConfigEventObject>;

export type GovSetPricingConfigEventFilter = TypedEventFilter<GovSetPricingConfigEvent>;

export interface GovSetReserveFeeEventObject {
  underlying: string;
  newReserveFee: number;
}
export type GovSetReserveFeeEvent = TypedEvent<[string, number], GovSetReserveFeeEventObject>;

export type GovSetReserveFeeEventFilter = TypedEventFilter<GovSetReserveFeeEvent>;

export interface InstallerInstallModuleEventObject {
  moduleId: BigNumber;
  moduleImpl: string;
  moduleGitCommit: string;
}
export type InstallerInstallModuleEvent = TypedEvent<[BigNumber, string, string], InstallerInstallModuleEventObject>;

export type InstallerInstallModuleEventFilter = TypedEventFilter<InstallerInstallModuleEvent>;

export interface InstallerSetGovernorAdminEventObject {
  newGovernorAdmin: string;
}
export type InstallerSetGovernorAdminEvent = TypedEvent<[string], InstallerSetGovernorAdminEventObject>;

export type InstallerSetGovernorAdminEventFilter = TypedEventFilter<InstallerSetGovernorAdminEvent>;

export interface InstallerSetUpgradeAdminEventObject {
  newUpgradeAdmin: string;
}
export type InstallerSetUpgradeAdminEvent = TypedEvent<[string], InstallerSetUpgradeAdminEventObject>;

export type InstallerSetUpgradeAdminEventFilter = TypedEventFilter<InstallerSetUpgradeAdminEvent>;

export interface LiquidationEventObject {
  liquidator: string;
  violator: string;
  underlying: string;
  collateral: string;
  repay: BigNumber;
  yield: BigNumber;
  healthScore: BigNumber;
  baseDiscount: BigNumber;
  discount: BigNumber;
}
export type LiquidationEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LiquidationEventObject
>;

export type LiquidationEventFilter = TypedEventFilter<LiquidationEvent>;

export interface MarketActivatedEventObject {
  underlying: string;
  eToken: string;
  dToken: string;
}
export type MarketActivatedEvent = TypedEvent<[string, string, string], MarketActivatedEventObject>;

export type MarketActivatedEventFilter = TypedEventFilter<MarketActivatedEvent>;

export interface PTokenActivatedEventObject {
  underlying: string;
  pToken: string;
}
export type PTokenActivatedEvent = TypedEvent<[string, string], PTokenActivatedEventObject>;

export type PTokenActivatedEventFilter = TypedEventFilter<PTokenActivatedEvent>;

export interface PTokenUnWrapEventObject {
  underlying: string;
  account: string;
  amount: BigNumber;
}
export type PTokenUnWrapEvent = TypedEvent<[string, string, BigNumber], PTokenUnWrapEventObject>;

export type PTokenUnWrapEventFilter = TypedEventFilter<PTokenUnWrapEvent>;

export interface PTokenWrapEventObject {
  underlying: string;
  account: string;
  amount: BigNumber;
}
export type PTokenWrapEvent = TypedEvent<[string, string, BigNumber], PTokenWrapEventObject>;

export type PTokenWrapEventFilter = TypedEventFilter<PTokenWrapEvent>;

export interface ProxyCreatedEventObject {
  proxy: string;
  moduleId: BigNumber;
}
export type ProxyCreatedEvent = TypedEvent<[string, BigNumber], ProxyCreatedEventObject>;

export type ProxyCreatedEventFilter = TypedEventFilter<ProxyCreatedEvent>;

export interface RepayEventObject {
  underlying: string;
  account: string;
  amount: BigNumber;
}
export type RepayEvent = TypedEvent<[string, string, BigNumber], RepayEventObject>;

export type RepayEventFilter = TypedEventFilter<RepayEvent>;

export interface RequestBorrowEventObject {
  account: string;
  amount: BigNumber;
}
export type RequestBorrowEvent = TypedEvent<[string, BigNumber], RequestBorrowEventObject>;

export type RequestBorrowEventFilter = TypedEventFilter<RequestBorrowEvent>;

export interface RequestBurnEventObject {
  account: string;
  amount: BigNumber;
}
export type RequestBurnEvent = TypedEvent<[string, BigNumber], RequestBurnEventObject>;

export type RequestBurnEventFilter = TypedEventFilter<RequestBurnEvent>;

export interface RequestDepositEventObject {
  account: string;
  amount: BigNumber;
}
export type RequestDepositEvent = TypedEvent<[string, BigNumber], RequestDepositEventObject>;

export type RequestDepositEventFilter = TypedEventFilter<RequestDepositEvent>;

export interface RequestLiquidateEventObject {
  liquidator: string;
  violator: string;
  underlying: string;
  collateral: string;
  repay: BigNumber;
  minYield: BigNumber;
}
export type RequestLiquidateEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber],
  RequestLiquidateEventObject
>;

export type RequestLiquidateEventFilter = TypedEventFilter<RequestLiquidateEvent>;

export interface RequestMintEventObject {
  account: string;
  amount: BigNumber;
}
export type RequestMintEvent = TypedEvent<[string, BigNumber], RequestMintEventObject>;

export type RequestMintEventFilter = TypedEventFilter<RequestMintEvent>;

export interface RequestRepayEventObject {
  account: string;
  amount: BigNumber;
}
export type RequestRepayEvent = TypedEvent<[string, BigNumber], RequestRepayEventObject>;

export type RequestRepayEventFilter = TypedEventFilter<RequestRepayEvent>;

export interface RequestSwapEventObject {
  accountIn: string;
  accountOut: string;
  underlyingIn: string;
  underlyingOut: string;
  amount: BigNumber;
  swapType: BigNumber;
}
export type RequestSwapEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber],
  RequestSwapEventObject
>;

export type RequestSwapEventFilter = TypedEventFilter<RequestSwapEvent>;

export interface RequestTransferDTokenEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type RequestTransferDTokenEvent = TypedEvent<[string, string, BigNumber], RequestTransferDTokenEventObject>;

export type RequestTransferDTokenEventFilter = TypedEventFilter<RequestTransferDTokenEvent>;

export interface RequestTransferETokenEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type RequestTransferETokenEvent = TypedEvent<[string, string, BigNumber], RequestTransferETokenEventObject>;

export type RequestTransferETokenEventFilter = TypedEventFilter<RequestTransferETokenEvent>;

export interface RequestWithdrawEventObject {
  account: string;
  amount: BigNumber;
}
export type RequestWithdrawEvent = TypedEvent<[string, BigNumber], RequestWithdrawEventObject>;

export type RequestWithdrawEventFilter = TypedEventFilter<RequestWithdrawEvent>;

export interface TrackAverageLiquidityEventObject {
  account: string;
}
export type TrackAverageLiquidityEvent = TypedEvent<[string], TrackAverageLiquidityEventObject>;

export type TrackAverageLiquidityEventFilter = TypedEventFilter<TrackAverageLiquidityEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnTrackAverageLiquidityEventObject {
  account: string;
}
export type UnTrackAverageLiquidityEvent = TypedEvent<[string], UnTrackAverageLiquidityEventObject>;

export type UnTrackAverageLiquidityEventFilter = TypedEventFilter<UnTrackAverageLiquidityEvent>;

export interface WithdrawEventObject {
  underlying: string;
  account: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface EulerDtokenContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EulerDtokenContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveDebt(
      subAccountId: PromiseOrValue<BigNumberish>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfExact(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrow(
      subAccountId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    debtAllowance(
      holder: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    moduleGitCommit(overrides?: CallOverrides): Promise<[string]>;

    moduleId(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    repay(
      subAccountId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyExact(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  approveDebt(
    subAccountId: PromiseOrValue<BigNumberish>,
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfExact(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  borrow(
    subAccountId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  debtAllowance(
    holder: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  moduleGitCommit(overrides?: CallOverrides): Promise<string>;

  moduleId(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  repay(
    subAccountId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyExact(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    approveDebt(
      subAccountId: PromiseOrValue<BigNumberish>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfExact(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      subAccountId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    debtAllowance(
      holder: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    moduleGitCommit(overrides?: CallOverrides): Promise<string>;

    moduleId(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    repay(
      subAccountId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyExact(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'AssetStatus(address,uint256,uint256,uint96,uint256,uint256,int96,uint256)'(
      underlying?: PromiseOrValue<string> | null,
      totalBalances?: null,
      totalBorrows?: null,
      reserveBalance?: null,
      poolSize?: null,
      interestAccumulator?: null,
      interestRate?: null,
      timestamp?: null,
    ): AssetStatusEventFilter;
    AssetStatus(
      underlying?: PromiseOrValue<string> | null,
      totalBalances?: null,
      totalBorrows?: null,
      reserveBalance?: null,
      poolSize?: null,
      interestAccumulator?: null,
      interestRate?: null,
      timestamp?: null,
    ): AssetStatusEventFilter;

    'Borrow(address,address,uint256)'(
      underlying?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      amount?: null,
    ): BorrowEventFilter;
    Borrow(
      underlying?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      amount?: null,
    ): BorrowEventFilter;

    'DelegateAverageLiquidity(address,address)'(
      account?: PromiseOrValue<string> | null,
      delegate?: PromiseOrValue<string> | null,
    ): DelegateAverageLiquidityEventFilter;
    DelegateAverageLiquidity(
      account?: PromiseOrValue<string> | null,
      delegate?: PromiseOrValue<string> | null,
    ): DelegateAverageLiquidityEventFilter;

    'Deposit(address,address,uint256)'(
      underlying?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      amount?: null,
    ): DepositEventFilter;
    Deposit(
      underlying?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      amount?: null,
    ): DepositEventFilter;

    'EnterMarket(address,address)'(
      underlying?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
    ): EnterMarketEventFilter;
    EnterMarket(
      underlying?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
    ): EnterMarketEventFilter;

    'ExitMarket(address,address)'(
      underlying?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
    ): ExitMarketEventFilter;
    ExitMarket(
      underlying?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
    ): ExitMarketEventFilter;

    'Genesis()'(): GenesisEventFilter;
    Genesis(): GenesisEventFilter;

    'GovConvertReserves(address,address,uint256)'(
      underlying?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
    ): GovConvertReservesEventFilter;
    GovConvertReserves(
      underlying?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
    ): GovConvertReservesEventFilter;

    'GovSetAssetConfig(address,tuple)'(
      underlying?: PromiseOrValue<string> | null,
      newConfig?: null,
    ): GovSetAssetConfigEventFilter;
    GovSetAssetConfig(underlying?: PromiseOrValue<string> | null, newConfig?: null): GovSetAssetConfigEventFilter;

    'GovSetIRM(address,uint256,bytes)'(
      underlying?: PromiseOrValue<string> | null,
      interestRateModel?: null,
      resetParams?: null,
    ): GovSetIRMEventFilter;
    GovSetIRM(
      underlying?: PromiseOrValue<string> | null,
      interestRateModel?: null,
      resetParams?: null,
    ): GovSetIRMEventFilter;

    'GovSetPricingConfig(address,uint16,uint32)'(
      underlying?: PromiseOrValue<string> | null,
      newPricingType?: null,
      newPricingParameter?: null,
    ): GovSetPricingConfigEventFilter;
    GovSetPricingConfig(
      underlying?: PromiseOrValue<string> | null,
      newPricingType?: null,
      newPricingParameter?: null,
    ): GovSetPricingConfigEventFilter;

    'GovSetReserveFee(address,uint32)'(
      underlying?: PromiseOrValue<string> | null,
      newReserveFee?: null,
    ): GovSetReserveFeeEventFilter;
    GovSetReserveFee(underlying?: PromiseOrValue<string> | null, newReserveFee?: null): GovSetReserveFeeEventFilter;

    'InstallerInstallModule(uint256,address,bytes32)'(
      moduleId?: PromiseOrValue<BigNumberish> | null,
      moduleImpl?: PromiseOrValue<string> | null,
      moduleGitCommit?: null,
    ): InstallerInstallModuleEventFilter;
    InstallerInstallModule(
      moduleId?: PromiseOrValue<BigNumberish> | null,
      moduleImpl?: PromiseOrValue<string> | null,
      moduleGitCommit?: null,
    ): InstallerInstallModuleEventFilter;

    'InstallerSetGovernorAdmin(address)'(
      newGovernorAdmin?: PromiseOrValue<string> | null,
    ): InstallerSetGovernorAdminEventFilter;
    InstallerSetGovernorAdmin(newGovernorAdmin?: PromiseOrValue<string> | null): InstallerSetGovernorAdminEventFilter;

    'InstallerSetUpgradeAdmin(address)'(
      newUpgradeAdmin?: PromiseOrValue<string> | null,
    ): InstallerSetUpgradeAdminEventFilter;
    InstallerSetUpgradeAdmin(newUpgradeAdmin?: PromiseOrValue<string> | null): InstallerSetUpgradeAdminEventFilter;

    'Liquidation(address,address,address,address,uint256,uint256,uint256,uint256,uint256)'(
      liquidator?: PromiseOrValue<string> | null,
      violator?: PromiseOrValue<string> | null,
      underlying?: PromiseOrValue<string> | null,
      collateral?: null,
      repay?: null,
      _yield?: null,
      healthScore?: null,
      baseDiscount?: null,
      discount?: null,
    ): LiquidationEventFilter;
    Liquidation(
      liquidator?: PromiseOrValue<string> | null,
      violator?: PromiseOrValue<string> | null,
      underlying?: PromiseOrValue<string> | null,
      collateral?: null,
      repay?: null,
      _yield?: null,
      healthScore?: null,
      baseDiscount?: null,
      discount?: null,
    ): LiquidationEventFilter;

    'MarketActivated(address,address,address)'(
      underlying?: PromiseOrValue<string> | null,
      eToken?: PromiseOrValue<string> | null,
      dToken?: PromiseOrValue<string> | null,
    ): MarketActivatedEventFilter;
    MarketActivated(
      underlying?: PromiseOrValue<string> | null,
      eToken?: PromiseOrValue<string> | null,
      dToken?: PromiseOrValue<string> | null,
    ): MarketActivatedEventFilter;

    'PTokenActivated(address,address)'(
      underlying?: PromiseOrValue<string> | null,
      pToken?: PromiseOrValue<string> | null,
    ): PTokenActivatedEventFilter;
    PTokenActivated(
      underlying?: PromiseOrValue<string> | null,
      pToken?: PromiseOrValue<string> | null,
    ): PTokenActivatedEventFilter;

    'PTokenUnWrap(address,address,uint256)'(
      underlying?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      amount?: null,
    ): PTokenUnWrapEventFilter;
    PTokenUnWrap(
      underlying?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      amount?: null,
    ): PTokenUnWrapEventFilter;

    'PTokenWrap(address,address,uint256)'(
      underlying?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      amount?: null,
    ): PTokenWrapEventFilter;
    PTokenWrap(
      underlying?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      amount?: null,
    ): PTokenWrapEventFilter;

    'ProxyCreated(address,uint256)'(proxy?: PromiseOrValue<string> | null, moduleId?: null): ProxyCreatedEventFilter;
    ProxyCreated(proxy?: PromiseOrValue<string> | null, moduleId?: null): ProxyCreatedEventFilter;

    'Repay(address,address,uint256)'(
      underlying?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      amount?: null,
    ): RepayEventFilter;
    Repay(
      underlying?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      amount?: null,
    ): RepayEventFilter;

    'RequestBorrow(address,uint256)'(account?: PromiseOrValue<string> | null, amount?: null): RequestBorrowEventFilter;
    RequestBorrow(account?: PromiseOrValue<string> | null, amount?: null): RequestBorrowEventFilter;

    'RequestBurn(address,uint256)'(account?: PromiseOrValue<string> | null, amount?: null): RequestBurnEventFilter;
    RequestBurn(account?: PromiseOrValue<string> | null, amount?: null): RequestBurnEventFilter;

    'RequestDeposit(address,uint256)'(
      account?: PromiseOrValue<string> | null,
      amount?: null,
    ): RequestDepositEventFilter;
    RequestDeposit(account?: PromiseOrValue<string> | null, amount?: null): RequestDepositEventFilter;

    'RequestLiquidate(address,address,address,address,uint256,uint256)'(
      liquidator?: PromiseOrValue<string> | null,
      violator?: PromiseOrValue<string> | null,
      underlying?: PromiseOrValue<string> | null,
      collateral?: null,
      repay?: null,
      minYield?: null,
    ): RequestLiquidateEventFilter;
    RequestLiquidate(
      liquidator?: PromiseOrValue<string> | null,
      violator?: PromiseOrValue<string> | null,
      underlying?: PromiseOrValue<string> | null,
      collateral?: null,
      repay?: null,
      minYield?: null,
    ): RequestLiquidateEventFilter;

    'RequestMint(address,uint256)'(account?: PromiseOrValue<string> | null, amount?: null): RequestMintEventFilter;
    RequestMint(account?: PromiseOrValue<string> | null, amount?: null): RequestMintEventFilter;

    'RequestRepay(address,uint256)'(account?: PromiseOrValue<string> | null, amount?: null): RequestRepayEventFilter;
    RequestRepay(account?: PromiseOrValue<string> | null, amount?: null): RequestRepayEventFilter;

    'RequestSwap(address,address,address,address,uint256,uint256)'(
      accountIn?: PromiseOrValue<string> | null,
      accountOut?: PromiseOrValue<string> | null,
      underlyingIn?: PromiseOrValue<string> | null,
      underlyingOut?: null,
      amount?: null,
      swapType?: null,
    ): RequestSwapEventFilter;
    RequestSwap(
      accountIn?: PromiseOrValue<string> | null,
      accountOut?: PromiseOrValue<string> | null,
      underlyingIn?: PromiseOrValue<string> | null,
      underlyingOut?: null,
      amount?: null,
      swapType?: null,
    ): RequestSwapEventFilter;

    'RequestTransferDToken(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
    ): RequestTransferDTokenEventFilter;
    RequestTransferDToken(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
    ): RequestTransferDTokenEventFilter;

    'RequestTransferEToken(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
    ): RequestTransferETokenEventFilter;
    RequestTransferEToken(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
    ): RequestTransferETokenEventFilter;

    'RequestWithdraw(address,uint256)'(
      account?: PromiseOrValue<string> | null,
      amount?: null,
    ): RequestWithdrawEventFilter;
    RequestWithdraw(account?: PromiseOrValue<string> | null, amount?: null): RequestWithdrawEventFilter;

    'TrackAverageLiquidity(address)'(account?: PromiseOrValue<string> | null): TrackAverageLiquidityEventFilter;
    TrackAverageLiquidity(account?: PromiseOrValue<string> | null): TrackAverageLiquidityEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;

    'UnTrackAverageLiquidity(address)'(account?: PromiseOrValue<string> | null): UnTrackAverageLiquidityEventFilter;
    UnTrackAverageLiquidity(account?: PromiseOrValue<string> | null): UnTrackAverageLiquidityEventFilter;

    'Withdraw(address,address,uint256)'(
      underlying?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      amount?: null,
    ): WithdrawEventFilter;
    Withdraw(
      underlying?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      amount?: null,
    ): WithdrawEventFilter;
  };

  estimateGas: {
    approveDebt(
      subAccountId: PromiseOrValue<BigNumberish>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfExact(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      subAccountId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    debtAllowance(
      holder: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    moduleGitCommit(overrides?: CallOverrides): Promise<BigNumber>;

    moduleId(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    repay(
      subAccountId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyExact(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveDebt(
      subAccountId: PromiseOrValue<BigNumberish>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfExact(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      subAccountId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    debtAllowance(
      holder: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moduleGitCommit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moduleId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repay(
      subAccountId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyExact(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
