/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface SynthetixAddressResolverInterface extends utils.Interface {
  functions: {
    'acceptOwnership()': FunctionFragment;
    'areAddressesImported(bytes32[],address[])': FunctionFragment;
    'getAddress(bytes32)': FunctionFragment;
    'getSynth(bytes32)': FunctionFragment;
    'importAddresses(bytes32[],address[])': FunctionFragment;
    'nominateNewOwner(address)': FunctionFragment;
    'nominatedOwner()': FunctionFragment;
    'owner()': FunctionFragment;
    'rebuildCaches(address[])': FunctionFragment;
    'repository(bytes32)': FunctionFragment;
    'requireAndGetAddress(bytes32,string)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptOwnership'
      | 'areAddressesImported'
      | 'getAddress'
      | 'getSynth'
      | 'importAddresses'
      | 'nominateNewOwner'
      | 'nominatedOwner'
      | 'owner'
      | 'rebuildCaches'
      | 'repository'
      | 'requireAndGetAddress',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'areAddressesImported', values: [BytesLike[], string[]]): string;
  encodeFunctionData(functionFragment: 'getAddress', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'getSynth', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'importAddresses', values: [BytesLike[], string[]]): string;
  encodeFunctionData(functionFragment: 'nominateNewOwner', values: [string]): string;
  encodeFunctionData(functionFragment: 'nominatedOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rebuildCaches', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'repository', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'requireAndGetAddress', values: [BytesLike, string]): string;

  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'areAddressesImported', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSynth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'importAddresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominateNewOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominatedOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rebuildCaches', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repository', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requireAndGetAddress', data: BytesLike): Result;

  events: {
    'AddressImported(bytes32,address)': EventFragment;
    'OwnerChanged(address,address)': EventFragment;
    'OwnerNominated(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddressImported'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerNominated'): EventFragment;
}

export interface AddressImportedEventObject {
  name: string;
  destination: string;
}
export type AddressImportedEvent = TypedEvent<[string, string], AddressImportedEventObject>;

export type AddressImportedEventFilter = TypedEventFilter<AddressImportedEvent>;

export interface OwnerChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<[string, string], OwnerChangedEventObject>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface OwnerNominatedEventObject {
  newOwner: string;
}
export type OwnerNominatedEvent = TypedEvent<[string], OwnerNominatedEventObject>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export interface SynthetixAddressResolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SynthetixAddressResolverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    areAddressesImported(names: BytesLike[], destinations: string[], overrides?: CallOverrides): Promise<[boolean]>;

    getAddress(name: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getSynth(key: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    importAddresses(
      names: BytesLike[],
      destinations: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rebuildCaches(
      destinations: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    repository(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    requireAndGetAddress(name: BytesLike, reason: string, overrides?: CallOverrides): Promise<[string]>;
  };

  acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  areAddressesImported(names: BytesLike[], destinations: string[], overrides?: CallOverrides): Promise<boolean>;

  getAddress(name: BytesLike, overrides?: CallOverrides): Promise<string>;

  getSynth(key: BytesLike, overrides?: CallOverrides): Promise<string>;

  importAddresses(
    names: BytesLike[],
    destinations: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  nominateNewOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  rebuildCaches(
    destinations: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  repository(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  requireAndGetAddress(name: BytesLike, reason: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    areAddressesImported(names: BytesLike[], destinations: string[], overrides?: CallOverrides): Promise<boolean>;

    getAddress(name: BytesLike, overrides?: CallOverrides): Promise<string>;

    getSynth(key: BytesLike, overrides?: CallOverrides): Promise<string>;

    importAddresses(names: BytesLike[], destinations: string[], overrides?: CallOverrides): Promise<void>;

    nominateNewOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    rebuildCaches(destinations: string[], overrides?: CallOverrides): Promise<void>;

    repository(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    requireAndGetAddress(name: BytesLike, reason: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'AddressImported(bytes32,address)'(name?: null, destination?: null): AddressImportedEventFilter;
    AddressImported(name?: null, destination?: null): AddressImportedEventFilter;

    'OwnerChanged(address,address)'(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;

    'OwnerNominated(address)'(newOwner?: null): OwnerNominatedEventFilter;
    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;
  };

  estimateGas: {
    acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    areAddressesImported(names: BytesLike[], destinations: string[], overrides?: CallOverrides): Promise<BigNumber>;

    getAddress(name: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getSynth(key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    importAddresses(
      names: BytesLike[],
      destinations: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    nominateNewOwner(_owner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rebuildCaches(
      destinations: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    repository(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    requireAndGetAddress(name: BytesLike, reason: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    areAddressesImported(
      names: BytesLike[],
      destinations: string[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAddress(name: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSynth(key: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    importAddresses(
      names: BytesLike[],
      destinations: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebuildCaches(
      destinations: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    repository(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requireAndGetAddress(name: BytesLike, reason: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
