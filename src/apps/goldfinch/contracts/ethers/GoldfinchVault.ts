/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export type CapitalDepositStruct = {
  assetAddress: PromiseOrValue<string>;
  id: PromiseOrValue<BigNumberish>;
};

export type CapitalDepositStructOutput = [string, BigNumber] & {
  assetAddress: string;
  id: BigNumber;
};

export type DepositStruct = {
  gfi: PromiseOrValue<BigNumberish>;
  capitalDeposits: CapitalDepositStruct[];
};

export type DepositStructOutput = [BigNumber, CapitalDepositStructOutput[]] & {
  gfi: BigNumber;
  capitalDeposits: CapitalDepositStructOutput[];
};

export type DepositResultStruct = {
  membershipId: PromiseOrValue<BigNumberish>;
  gfiPositionId: PromiseOrValue<BigNumberish>;
  capitalPositionIds: PromiseOrValue<BigNumberish>[];
};

export type DepositResultStructOutput = [BigNumber, BigNumber, BigNumber[]] & {
  membershipId: BigNumber;
  gfiPositionId: BigNumber;
  capitalPositionIds: BigNumber[];
};

export type ERC20WithdrawalStruct = {
  id: PromiseOrValue<BigNumberish>;
  amount: PromiseOrValue<BigNumberish>;
};

export type ERC20WithdrawalStructOutput = [BigNumber, BigNumber] & {
  id: BigNumber;
  amount: BigNumber;
};

export type WithdrawalStruct = {
  gfiPositions: ERC20WithdrawalStruct[];
  capitalPositions: PromiseOrValue<BigNumberish>[];
};

export type WithdrawalStructOutput = [ERC20WithdrawalStructOutput[], BigNumber[]] & {
  gfiPositions: ERC20WithdrawalStructOutput[];
  capitalPositions: BigNumber[];
};

export interface GoldfinchVaultInterface extends utils.Interface {
  functions: {
    'calculateMemberScore(uint256,uint256)': FunctionFragment;
    'claimableRewards(address)': FunctionFragment;
    'collectRewards()': FunctionFragment;
    'deposit((uint256,(address,uint256)[]))': FunctionFragment;
    'estimateMemberScore(address,int256,int256)': FunctionFragment;
    'estimateRewardsFor(uint256)': FunctionFragment;
    'finalizeEpochs()': FunctionFragment;
    'initialize()': FunctionFragment;
    'memberScoreOf(address)': FunctionFragment;
    'onERC721Received(address,address,uint256,bytes)': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'totalCapitalHeldBy(address)': FunctionFragment;
    'totalGFIHeldBy(address)': FunctionFragment;
    'totalMemberScores()': FunctionFragment;
    'unpause()': FunctionFragment;
    'votingPower(address)': FunctionFragment;
    'withdraw(((uint256,uint256)[],uint256[]))': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'calculateMemberScore'
      | 'claimableRewards'
      | 'collectRewards'
      | 'deposit'
      | 'estimateMemberScore'
      | 'estimateRewardsFor'
      | 'finalizeEpochs'
      | 'initialize'
      | 'memberScoreOf'
      | 'onERC721Received'
      | 'pause'
      | 'paused'
      | 'totalCapitalHeldBy'
      | 'totalGFIHeldBy'
      | 'totalMemberScores'
      | 'unpause'
      | 'votingPower'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'calculateMemberScore',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'claimableRewards', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'collectRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit', values: [DepositStruct]): string;
  encodeFunctionData(
    functionFragment: 'estimateMemberScore',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'estimateRewardsFor', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'finalizeEpochs', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values?: undefined): string;
  encodeFunctionData(functionFragment: 'memberScoreOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'onERC721Received',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalCapitalHeldBy', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'totalGFIHeldBy', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'totalMemberScores', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'votingPower', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [WithdrawalStruct]): string;

  decodeFunctionResult(functionFragment: 'calculateMemberScore', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimableRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collectRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'estimateMemberScore', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'estimateRewardsFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'finalizeEpochs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'memberScoreOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onERC721Received', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalCapitalHeldBy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalGFIHeldBy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalMemberScores', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'votingPower', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Paused(address)': EventFragment;
    'Unpaused(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface GoldfinchVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GoldfinchVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateMemberScore(
      gfi: PromiseOrValue<BigNumberish>,
      capital: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    claimableRewards(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    collectRewards(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    deposit(
      depositData: DepositStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    estimateMemberScore(
      memberAddress: PromiseOrValue<string>,
      gfi: PromiseOrValue<BigNumberish>,
      capital: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { score: BigNumber }>;

    estimateRewardsFor(epoch: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    finalizeEpochs(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    memberScoreOf(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        eligibleScore: BigNumber;
        totalScore: BigNumber;
      }
    >;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    totalCapitalHeldBy(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        eligibleAmount: BigNumber;
        totalAmount: BigNumber;
      }
    >;

    totalGFIHeldBy(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        eligibleAmount: BigNumber;
        totalAmount: BigNumber;
      }
    >;

    totalMemberScores(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        eligibleTotal: BigNumber;
        nextEpochTotal: BigNumber;
      }
    >;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    votingPower(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      withdrawal: WithdrawalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  calculateMemberScore(
    gfi: PromiseOrValue<BigNumberish>,
    capital: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  claimableRewards(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  collectRewards(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  deposit(
    depositData: DepositStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  estimateMemberScore(
    memberAddress: PromiseOrValue<string>,
    gfi: PromiseOrValue<BigNumberish>,
    capital: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  estimateRewardsFor(epoch: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  finalizeEpochs(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  memberScoreOf(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { eligibleScore: BigNumber; totalScore: BigNumber }>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<string>;

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  totalCapitalHeldBy(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      eligibleAmount: BigNumber;
      totalAmount: BigNumber;
    }
  >;

  totalGFIHeldBy(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      eligibleAmount: BigNumber;
      totalAmount: BigNumber;
    }
  >;

  totalMemberScores(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber] & {
      eligibleTotal: BigNumber;
      nextEpochTotal: BigNumber;
    }
  >;

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  votingPower(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    withdrawal: WithdrawalStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateMemberScore(
      gfi: PromiseOrValue<BigNumberish>,
      capital: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    claimableRewards(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    collectRewards(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(depositData: DepositStruct, overrides?: CallOverrides): Promise<DepositResultStructOutput>;

    estimateMemberScore(
      memberAddress: PromiseOrValue<string>,
      gfi: PromiseOrValue<BigNumberish>,
      capital: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    estimateRewardsFor(epoch: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    finalizeEpochs(overrides?: CallOverrides): Promise<void>;

    initialize(overrides?: CallOverrides): Promise<void>;

    memberScoreOf(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        eligibleScore: BigNumber;
        totalScore: BigNumber;
      }
    >;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    totalCapitalHeldBy(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        eligibleAmount: BigNumber;
        totalAmount: BigNumber;
      }
    >;

    totalGFIHeldBy(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        eligibleAmount: BigNumber;
        totalAmount: BigNumber;
      }
    >;

    totalMemberScores(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        eligibleTotal: BigNumber;
        nextEpochTotal: BigNumber;
      }
    >;

    unpause(overrides?: CallOverrides): Promise<void>;

    votingPower(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(withdrawal: WithdrawalStruct, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    calculateMemberScore(
      gfi: PromiseOrValue<BigNumberish>,
      capital: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    claimableRewards(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    collectRewards(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    deposit(depositData: DepositStruct, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    estimateMemberScore(
      memberAddress: PromiseOrValue<string>,
      gfi: PromiseOrValue<BigNumberish>,
      capital: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    estimateRewardsFor(epoch: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    finalizeEpochs(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    memberScoreOf(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    totalCapitalHeldBy(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    totalGFIHeldBy(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    totalMemberScores(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    votingPower(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      withdrawal: WithdrawalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateMemberScore(
      gfi: PromiseOrValue<BigNumberish>,
      capital: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    claimableRewards(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectRewards(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    deposit(
      depositData: DepositStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    estimateMemberScore(
      memberAddress: PromiseOrValue<string>,
      gfi: PromiseOrValue<BigNumberish>,
      capital: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    estimateRewardsFor(epoch: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalizeEpochs(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    memberScoreOf(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCapitalHeldBy(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalGFIHeldBy(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalMemberScores(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    votingPower(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      withdrawal: WithdrawalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
