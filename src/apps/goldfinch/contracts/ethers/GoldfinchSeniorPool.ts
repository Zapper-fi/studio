/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface GoldfinchSeniorPoolInterface extends utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'OWNER_ROLE()': FunctionFragment;
    'PAUSER_ROLE()': FunctionFragment;
    'ZAPPER_ROLE()': FunctionFragment;
    '__BaseUpgradeablePausable__init(address)': FunctionFragment;
    '__PauserPausable__init()': FunctionFragment;
    'assets()': FunctionFragment;
    'calculateWritedown(uint256)': FunctionFragment;
    'compoundBalance()': FunctionFragment;
    'config()': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'estimateInvestment(address)': FunctionFragment;
    'getNumShares(uint256)': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'getRoleMember(bytes32,uint256)': FunctionFragment;
    'getRoleMemberCount(bytes32)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'initZapperRole()': FunctionFragment;
    'initialize(address,address)': FunctionFragment;
    'invest(address)': FunctionFragment;
    'isAdmin()': FunctionFragment;
    'isZapper()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'redeem(uint256)': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'sharePrice()': FunctionFragment;
    'sweepFromCompound()': FunctionFragment;
    'sweepToCompound()': FunctionFragment;
    'totalLoansOutstanding()': FunctionFragment;
    'totalWritedowns()': FunctionFragment;
    'unpause()': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdrawInFidu(uint256)': FunctionFragment;
    'writedown(uint256)': FunctionFragment;
    'writedowns(address)': FunctionFragment;
    'writedownsByPoolToken(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DEFAULT_ADMIN_ROLE'
      | 'OWNER_ROLE'
      | 'PAUSER_ROLE'
      | 'ZAPPER_ROLE'
      | '__BaseUpgradeablePausable__init'
      | '__PauserPausable__init'
      | 'assets'
      | 'calculateWritedown'
      | 'compoundBalance'
      | 'config'
      | 'deposit'
      | 'depositWithPermit'
      | 'estimateInvestment'
      | 'getNumShares'
      | 'getRoleAdmin'
      | 'getRoleMember'
      | 'getRoleMemberCount'
      | 'grantRole'
      | 'hasRole'
      | 'initZapperRole'
      | 'initialize'
      | 'invest'
      | 'isAdmin'
      | 'isZapper'
      | 'pause'
      | 'paused'
      | 'redeem'
      | 'renounceRole'
      | 'revokeRole'
      | 'sharePrice'
      | 'sweepFromCompound'
      | 'sweepToCompound'
      | 'totalLoansOutstanding'
      | 'totalWritedowns'
      | 'unpause'
      | 'withdraw'
      | 'withdrawInFidu'
      | 'writedown'
      | 'writedowns'
      | 'writedownsByPoolToken',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'OWNER_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PAUSER_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ZAPPER_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: '__BaseUpgradeablePausable__init', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: '__PauserPausable__init', values?: undefined): string;
  encodeFunctionData(functionFragment: 'assets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'calculateWritedown', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'compoundBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'config', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'depositWithPermit',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'estimateInvestment', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getNumShares', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'getRoleMember',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getRoleMemberCount', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'initZapperRole', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'invest', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isAdmin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isZapper', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'redeem', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'sharePrice', values?: undefined): string;
  encodeFunctionData(functionFragment: 'sweepFromCompound', values?: undefined): string;
  encodeFunctionData(functionFragment: 'sweepToCompound', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalLoansOutstanding', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalWritedowns', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'withdrawInFidu', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'writedown', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'writedowns', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'writedownsByPoolToken', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'OWNER_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PAUSER_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ZAPPER_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '__BaseUpgradeablePausable__init', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '__PauserPausable__init', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'assets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateWritedown', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'compoundBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'config', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositWithPermit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'estimateInvestment', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNumShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleMember', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleMemberCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initZapperRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'invest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isZapper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sharePrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sweepFromCompound', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sweepToCompound', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalLoansOutstanding', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalWritedowns', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawInFidu', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'writedown', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'writedowns', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'writedownsByPoolToken', data: BytesLike): Result;

  events: {
    'DepositMade(address,uint256,uint256)': EventFragment;
    'GoldfinchConfigUpdated(address,address)': EventFragment;
    'InterestCollected(address,uint256)': EventFragment;
    'InvestmentMadeInJunior(address,uint256)': EventFragment;
    'InvestmentMadeInSenior(address,uint256)': EventFragment;
    'Paused(address)': EventFragment;
    'PrincipalCollected(address,uint256)': EventFragment;
    'PrincipalWrittenDown(address,int256)': EventFragment;
    'ReserveFundsCollected(address,uint256)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'Unpaused(address)': EventFragment;
    'WithdrawalMade(address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'DepositMade'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GoldfinchConfigUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InterestCollected'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InvestmentMadeInJunior'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InvestmentMadeInSenior'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PrincipalCollected'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PrincipalWrittenDown'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReserveFundsCollected'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawalMade'): EventFragment;
}

export interface DepositMadeEventObject {
  capitalProvider: string;
  amount: BigNumber;
  shares: BigNumber;
}
export type DepositMadeEvent = TypedEvent<[string, BigNumber, BigNumber], DepositMadeEventObject>;

export type DepositMadeEventFilter = TypedEventFilter<DepositMadeEvent>;

export interface GoldfinchConfigUpdatedEventObject {
  who: string;
  configAddress: string;
}
export type GoldfinchConfigUpdatedEvent = TypedEvent<[string, string], GoldfinchConfigUpdatedEventObject>;

export type GoldfinchConfigUpdatedEventFilter = TypedEventFilter<GoldfinchConfigUpdatedEvent>;

export interface InterestCollectedEventObject {
  payer: string;
  amount: BigNumber;
}
export type InterestCollectedEvent = TypedEvent<[string, BigNumber], InterestCollectedEventObject>;

export type InterestCollectedEventFilter = TypedEventFilter<InterestCollectedEvent>;

export interface InvestmentMadeInJuniorEventObject {
  tranchedPool: string;
  amount: BigNumber;
}
export type InvestmentMadeInJuniorEvent = TypedEvent<[string, BigNumber], InvestmentMadeInJuniorEventObject>;

export type InvestmentMadeInJuniorEventFilter = TypedEventFilter<InvestmentMadeInJuniorEvent>;

export interface InvestmentMadeInSeniorEventObject {
  tranchedPool: string;
  amount: BigNumber;
}
export type InvestmentMadeInSeniorEvent = TypedEvent<[string, BigNumber], InvestmentMadeInSeniorEventObject>;

export type InvestmentMadeInSeniorEventFilter = TypedEventFilter<InvestmentMadeInSeniorEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PrincipalCollectedEventObject {
  payer: string;
  amount: BigNumber;
}
export type PrincipalCollectedEvent = TypedEvent<[string, BigNumber], PrincipalCollectedEventObject>;

export type PrincipalCollectedEventFilter = TypedEventFilter<PrincipalCollectedEvent>;

export interface PrincipalWrittenDownEventObject {
  tranchedPool: string;
  amount: BigNumber;
}
export type PrincipalWrittenDownEvent = TypedEvent<[string, BigNumber], PrincipalWrittenDownEventObject>;

export type PrincipalWrittenDownEventFilter = TypedEventFilter<PrincipalWrittenDownEvent>;

export interface ReserveFundsCollectedEventObject {
  user: string;
  amount: BigNumber;
}
export type ReserveFundsCollectedEvent = TypedEvent<[string, BigNumber], ReserveFundsCollectedEventObject>;

export type ReserveFundsCollectedEventFilter = TypedEventFilter<ReserveFundsCollectedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawalMadeEventObject {
  capitalProvider: string;
  userAmount: BigNumber;
  reserveAmount: BigNumber;
}
export type WithdrawalMadeEvent = TypedEvent<[string, BigNumber, BigNumber], WithdrawalMadeEventObject>;

export type WithdrawalMadeEventFilter = TypedEventFilter<WithdrawalMadeEvent>;

export interface GoldfinchSeniorPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GoldfinchSeniorPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ZAPPER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    __BaseUpgradeablePausable__init(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    __PauserPausable__init(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    assets(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateWritedown(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    compoundBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    config(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositWithPermit(
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    estimateInvestment(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getNumShares(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    initZapperRole(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    initialize(
      owner: PromiseOrValue<string>,
      _config: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    invest(
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isAdmin(overrides?: CallOverrides): Promise<[boolean]>;

    isZapper(overrides?: CallOverrides): Promise<[boolean]>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    redeem(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    sharePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    sweepFromCompound(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    sweepToCompound(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    totalLoansOutstanding(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalWritedowns(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    withdraw(
      usdcAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawInFidu(
      fiduAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    writedown(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    writedowns(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    writedownsByPoolToken(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  OWNER_ROLE(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  ZAPPER_ROLE(overrides?: CallOverrides): Promise<string>;

  __BaseUpgradeablePausable__init(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  __PauserPausable__init(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  assets(overrides?: CallOverrides): Promise<BigNumber>;

  calculateWritedown(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  compoundBalance(overrides?: CallOverrides): Promise<BigNumber>;

  config(overrides?: CallOverrides): Promise<string>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositWithPermit(
    amount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  estimateInvestment(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getNumShares(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  initZapperRole(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  initialize(
    owner: PromiseOrValue<string>,
    _config: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  invest(
    pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isAdmin(overrides?: CallOverrides): Promise<boolean>;

  isZapper(overrides?: CallOverrides): Promise<boolean>;

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  redeem(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  sharePrice(overrides?: CallOverrides): Promise<BigNumber>;

  sweepFromCompound(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  sweepToCompound(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  totalLoansOutstanding(overrides?: CallOverrides): Promise<BigNumber>;

  totalWritedowns(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  withdraw(
    usdcAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawInFidu(
    fiduAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  writedown(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  writedowns(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  writedownsByPoolToken(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    ZAPPER_ROLE(overrides?: CallOverrides): Promise<string>;

    __BaseUpgradeablePausable__init(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    __PauserPausable__init(overrides?: CallOverrides): Promise<void>;

    assets(overrides?: CallOverrides): Promise<BigNumber>;

    calculateWritedown(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    compoundBalance(overrides?: CallOverrides): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<string>;

    deposit(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    depositWithPermit(
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    estimateInvestment(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getNumShares(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    initZapperRole(overrides?: CallOverrides): Promise<void>;

    initialize(
      owner: PromiseOrValue<string>,
      _config: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    invest(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    isAdmin(overrides?: CallOverrides): Promise<boolean>;

    isZapper(overrides?: CallOverrides): Promise<boolean>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    redeem(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    sharePrice(overrides?: CallOverrides): Promise<BigNumber>;

    sweepFromCompound(overrides?: CallOverrides): Promise<void>;

    sweepToCompound(overrides?: CallOverrides): Promise<void>;

    totalLoansOutstanding(overrides?: CallOverrides): Promise<BigNumber>;

    totalWritedowns(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdraw(usdcAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawInFidu(fiduAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    writedown(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    writedowns(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    writedownsByPoolToken(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'DepositMade(address,uint256,uint256)'(
      capitalProvider?: PromiseOrValue<string> | null,
      amount?: null,
      shares?: null,
    ): DepositMadeEventFilter;
    DepositMade(capitalProvider?: PromiseOrValue<string> | null, amount?: null, shares?: null): DepositMadeEventFilter;

    'GoldfinchConfigUpdated(address,address)'(
      who?: PromiseOrValue<string> | null,
      configAddress?: null,
    ): GoldfinchConfigUpdatedEventFilter;
    GoldfinchConfigUpdated(
      who?: PromiseOrValue<string> | null,
      configAddress?: null,
    ): GoldfinchConfigUpdatedEventFilter;

    'InterestCollected(address,uint256)'(
      payer?: PromiseOrValue<string> | null,
      amount?: null,
    ): InterestCollectedEventFilter;
    InterestCollected(payer?: PromiseOrValue<string> | null, amount?: null): InterestCollectedEventFilter;

    'InvestmentMadeInJunior(address,uint256)'(
      tranchedPool?: PromiseOrValue<string> | null,
      amount?: null,
    ): InvestmentMadeInJuniorEventFilter;
    InvestmentMadeInJunior(
      tranchedPool?: PromiseOrValue<string> | null,
      amount?: null,
    ): InvestmentMadeInJuniorEventFilter;

    'InvestmentMadeInSenior(address,uint256)'(
      tranchedPool?: PromiseOrValue<string> | null,
      amount?: null,
    ): InvestmentMadeInSeniorEventFilter;
    InvestmentMadeInSenior(
      tranchedPool?: PromiseOrValue<string> | null,
      amount?: null,
    ): InvestmentMadeInSeniorEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'PrincipalCollected(address,uint256)'(
      payer?: PromiseOrValue<string> | null,
      amount?: null,
    ): PrincipalCollectedEventFilter;
    PrincipalCollected(payer?: PromiseOrValue<string> | null, amount?: null): PrincipalCollectedEventFilter;

    'PrincipalWrittenDown(address,int256)'(
      tranchedPool?: PromiseOrValue<string> | null,
      amount?: null,
    ): PrincipalWrittenDownEventFilter;
    PrincipalWrittenDown(tranchedPool?: PromiseOrValue<string> | null, amount?: null): PrincipalWrittenDownEventFilter;

    'ReserveFundsCollected(address,uint256)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
    ): ReserveFundsCollectedEventFilter;
    ReserveFundsCollected(user?: PromiseOrValue<string> | null, amount?: null): ReserveFundsCollectedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'WithdrawalMade(address,uint256,uint256)'(
      capitalProvider?: PromiseOrValue<string> | null,
      userAmount?: null,
      reserveAmount?: null,
    ): WithdrawalMadeEventFilter;
    WithdrawalMade(
      capitalProvider?: PromiseOrValue<string> | null,
      userAmount?: null,
      reserveAmount?: null,
    ): WithdrawalMadeEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ZAPPER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    __BaseUpgradeablePausable__init(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    __PauserPausable__init(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    assets(overrides?: CallOverrides): Promise<BigNumber>;

    calculateWritedown(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    compoundBalance(overrides?: CallOverrides): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositWithPermit(
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    estimateInvestment(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getNumShares(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initZapperRole(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    initialize(
      owner: PromiseOrValue<string>,
      _config: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    invest(pool: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    isAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    isZapper(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    sharePrice(overrides?: CallOverrides): Promise<BigNumber>;

    sweepFromCompound(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    sweepToCompound(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    totalLoansOutstanding(overrides?: CallOverrides): Promise<BigNumber>;

    totalWritedowns(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    withdraw(
      usdcAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawInFidu(
      fiduAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    writedown(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    writedowns(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    writedownsByPoolToken(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZAPPER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __BaseUpgradeablePausable__init(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    __PauserPausable__init(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    assets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateWritedown(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    compoundBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositWithPermit(
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    estimateInvestment(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumShares(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initZapperRole(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    initialize(
      owner: PromiseOrValue<string>,
      _config: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    invest(
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isZapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    sharePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sweepFromCompound(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    sweepToCompound(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    totalLoansOutstanding(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalWritedowns(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    withdraw(
      usdcAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawInFidu(
      fiduAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    writedown(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    writedowns(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    writedownsByPoolToken(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
