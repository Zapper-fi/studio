/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface MidasComptrollerInterface extends utils.Interface {
  functions: {
    '_addRewardsDistributor(address)': FunctionFragment;
    '_afterNonReentrant()': FunctionFragment;
    '_become(address)': FunctionFragment;
    '_becomeImplementation()': FunctionFragment;
    '_beforeNonReentrant()': FunctionFragment;
    '_borrowGuardianPaused()': FunctionFragment;
    '_deployMarket(bool,bytes,uint256)': FunctionFragment;
    '_mintGuardianPaused()': FunctionFragment;
    '_setBorrowCapGuardian(address)': FunctionFragment;
    '_setBorrowPaused(address,bool)': FunctionFragment;
    '_setCloseFactor(uint256)': FunctionFragment;
    '_setCollateralFactor(address,uint256)': FunctionFragment;
    '_setLiquidationIncentive(uint256)': FunctionFragment;
    '_setMarketBorrowCaps(address[],uint256[])': FunctionFragment;
    '_setMarketSupplyCaps(address[],uint256[])': FunctionFragment;
    '_setMintPaused(address,bool)': FunctionFragment;
    '_setPauseGuardian(address)': FunctionFragment;
    '_setPriceOracle(address)': FunctionFragment;
    '_setSeizePaused(bool)': FunctionFragment;
    '_setTransferPaused(bool)': FunctionFragment;
    '_setWhitelistEnforcement(bool)': FunctionFragment;
    '_setWhitelistStatuses(address[],bool[])': FunctionFragment;
    '_toggleAutoImplementations(bool)': FunctionFragment;
    '_unsupportMarket(address)': FunctionFragment;
    'accountAssets(address,uint256)': FunctionFragment;
    'addNonAccruingFlywheel(address)': FunctionFragment;
    'admin()': FunctionFragment;
    'adminHasRights()': FunctionFragment;
    'allBorrowers(uint256)': FunctionFragment;
    'allMarkets(uint256)': FunctionFragment;
    'autoImplementation()': FunctionFragment;
    'borrowAllowed(address,address,uint256)': FunctionFragment;
    'borrowCapGuardian()': FunctionFragment;
    'borrowCaps(address)': FunctionFragment;
    'borrowGuardianPaused(address)': FunctionFragment;
    'borrowWithinLimits(address,uint256)': FunctionFragment;
    'cTokensByUnderlying(address)': FunctionFragment;
    'checkMembership(address,address)': FunctionFragment;
    'closeFactorMantissa()': FunctionFragment;
    'comptrollerImplementation()': FunctionFragment;
    'enforceWhitelist()': FunctionFragment;
    'enterMarkets(address[])': FunctionFragment;
    'exitMarket(address)': FunctionFragment;
    'fuseAdmin()': FunctionFragment;
    'fuseAdminHasRights()': FunctionFragment;
    'getAllBorrowers()': FunctionFragment;
    'getAllMarkets()': FunctionFragment;
    'getAssetsIn(address)': FunctionFragment;
    'getHypotheticalAccountLiquidity(address,address,uint256,uint256)': FunctionFragment;
    'getMaxRedeemOrBorrow(address,address,bool)': FunctionFragment;
    'getRewardsDistributors()': FunctionFragment;
    'getWhitelist()': FunctionFragment;
    'isComptroller()': FunctionFragment;
    'isDeprecated(address)': FunctionFragment;
    'isUserOfPool(address)': FunctionFragment;
    'liquidateBorrowAllowed(address,address,address,address,uint256)': FunctionFragment;
    'liquidateCalculateSeizeTokens(address,address,uint256)': FunctionFragment;
    'liquidationIncentiveMantissa()': FunctionFragment;
    'markets(address)': FunctionFragment;
    'mintAllowed(address,address,uint256)': FunctionFragment;
    'mintGuardianPaused(address)': FunctionFragment;
    'nonAccruingRewardsDistributors(uint256)': FunctionFragment;
    'oracle()': FunctionFragment;
    'pauseGuardian()': FunctionFragment;
    'pendingAdmin()': FunctionFragment;
    'pendingComptrollerImplementation()': FunctionFragment;
    'redeemAllowed(address,address,uint256)': FunctionFragment;
    'redeemVerify(address,address,uint256,uint256)': FunctionFragment;
    'repayBorrowAllowed(address,address,address,uint256)': FunctionFragment;
    'rewardsDistributors(uint256)': FunctionFragment;
    'seizeAllowed(address,address,address,address,uint256)': FunctionFragment;
    'seizeGuardianPaused()': FunctionFragment;
    'suppliers(address)': FunctionFragment;
    'supplyCaps(address)': FunctionFragment;
    'transferAllowed(address,address,address,uint256)': FunctionFragment;
    'transferGuardianPaused()': FunctionFragment;
    'whitelist(address)': FunctionFragment;
    'whitelistArray(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | '_addRewardsDistributor'
      | '_afterNonReentrant'
      | '_become'
      | '_becomeImplementation'
      | '_beforeNonReentrant'
      | '_borrowGuardianPaused'
      | '_deployMarket'
      | '_mintGuardianPaused'
      | '_setBorrowCapGuardian'
      | '_setBorrowPaused'
      | '_setCloseFactor'
      | '_setCollateralFactor'
      | '_setLiquidationIncentive'
      | '_setMarketBorrowCaps'
      | '_setMarketSupplyCaps'
      | '_setMintPaused'
      | '_setPauseGuardian'
      | '_setPriceOracle'
      | '_setSeizePaused'
      | '_setTransferPaused'
      | '_setWhitelistEnforcement'
      | '_setWhitelistStatuses'
      | '_toggleAutoImplementations'
      | '_unsupportMarket'
      | 'accountAssets'
      | 'addNonAccruingFlywheel'
      | 'admin'
      | 'adminHasRights'
      | 'allBorrowers'
      | 'allMarkets'
      | 'autoImplementation'
      | 'borrowAllowed'
      | 'borrowCapGuardian'
      | 'borrowCaps'
      | 'borrowGuardianPaused'
      | 'borrowWithinLimits'
      | 'cTokensByUnderlying'
      | 'checkMembership'
      | 'closeFactorMantissa'
      | 'comptrollerImplementation'
      | 'enforceWhitelist'
      | 'enterMarkets'
      | 'exitMarket'
      | 'fuseAdmin'
      | 'fuseAdminHasRights'
      | 'getAllBorrowers'
      | 'getAllMarkets'
      | 'getAssetsIn'
      | 'getHypotheticalAccountLiquidity'
      | 'getMaxRedeemOrBorrow'
      | 'getRewardsDistributors'
      | 'getWhitelist'
      | 'isComptroller'
      | 'isDeprecated'
      | 'isUserOfPool'
      | 'liquidateBorrowAllowed'
      | 'liquidateCalculateSeizeTokens'
      | 'liquidationIncentiveMantissa'
      | 'markets'
      | 'mintAllowed'
      | 'mintGuardianPaused'
      | 'nonAccruingRewardsDistributors'
      | 'oracle'
      | 'pauseGuardian'
      | 'pendingAdmin'
      | 'pendingComptrollerImplementation'
      | 'redeemAllowed'
      | 'redeemVerify'
      | 'repayBorrowAllowed'
      | 'rewardsDistributors'
      | 'seizeAllowed'
      | 'seizeGuardianPaused'
      | 'suppliers'
      | 'supplyCaps'
      | 'transferAllowed'
      | 'transferGuardianPaused'
      | 'whitelist'
      | 'whitelistArray',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: '_addRewardsDistributor', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: '_afterNonReentrant', values?: undefined): string;
  encodeFunctionData(functionFragment: '_become', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: '_becomeImplementation', values?: undefined): string;
  encodeFunctionData(functionFragment: '_beforeNonReentrant', values?: undefined): string;
  encodeFunctionData(functionFragment: '_borrowGuardianPaused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: '_deployMarket',
    values: [PromiseOrValue<boolean>, PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: '_mintGuardianPaused', values?: undefined): string;
  encodeFunctionData(functionFragment: '_setBorrowCapGuardian', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: '_setBorrowPaused',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: '_setCloseFactor', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: '_setCollateralFactor',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: '_setLiquidationIncentive', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: '_setMarketBorrowCaps',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(
    functionFragment: '_setMarketSupplyCaps',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(
    functionFragment: '_setMintPaused',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: '_setPauseGuardian', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: '_setPriceOracle', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: '_setSeizePaused', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: '_setTransferPaused', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: '_setWhitelistEnforcement', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(
    functionFragment: '_setWhitelistStatuses',
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>[]],
  ): string;
  encodeFunctionData(functionFragment: '_toggleAutoImplementations', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: '_unsupportMarket', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'accountAssets',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'addNonAccruingFlywheel', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'adminHasRights', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allBorrowers', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'allMarkets', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'autoImplementation', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'borrowAllowed',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'borrowCapGuardian', values?: undefined): string;
  encodeFunctionData(functionFragment: 'borrowCaps', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'borrowGuardianPaused', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'borrowWithinLimits',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'cTokensByUnderlying', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'checkMembership',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'closeFactorMantissa', values?: undefined): string;
  encodeFunctionData(functionFragment: 'comptrollerImplementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'enforceWhitelist', values?: undefined): string;
  encodeFunctionData(functionFragment: 'enterMarkets', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'exitMarket', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'fuseAdmin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fuseAdminHasRights', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAllBorrowers', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAllMarkets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAssetsIn', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getHypotheticalAccountLiquidity',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getMaxRedeemOrBorrow',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'getRewardsDistributors', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getWhitelist', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isComptroller', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isDeprecated', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isUserOfPool', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'liquidateBorrowAllowed',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateCalculateSeizeTokens',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'liquidationIncentiveMantissa', values?: undefined): string;
  encodeFunctionData(functionFragment: 'markets', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'mintAllowed',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'mintGuardianPaused', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'nonAccruingRewardsDistributors',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'oracle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pauseGuardian', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingAdmin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingComptrollerImplementation', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'redeemAllowed',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'redeemVerify',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'repayBorrowAllowed',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'rewardsDistributors', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'seizeAllowed',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'seizeGuardianPaused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'suppliers', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'supplyCaps', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'transferAllowed',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'transferGuardianPaused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'whitelist', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'whitelistArray', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: '_addRewardsDistributor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_afterNonReentrant', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_become', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_becomeImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_beforeNonReentrant', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_borrowGuardianPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_deployMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_mintGuardianPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setBorrowCapGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setBorrowPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setCloseFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setCollateralFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setLiquidationIncentive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setMarketBorrowCaps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setMarketSupplyCaps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setMintPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setPauseGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setPriceOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setSeizePaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setTransferPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setWhitelistEnforcement', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setWhitelistStatuses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_toggleAutoImplementations', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_unsupportMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addNonAccruingFlywheel', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adminHasRights', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allBorrowers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'autoImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowCapGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowCaps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowGuardianPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowWithinLimits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cTokensByUnderlying', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkMembership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeFactorMantissa', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'comptrollerImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enforceWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enterMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exitMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fuseAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fuseAdminHasRights', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllBorrowers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAssetsIn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getHypotheticalAccountLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMaxRedeemOrBorrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardsDistributors', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isComptroller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isDeprecated', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isUserOfPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateBorrowAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateCalculateSeizeTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidationIncentiveMantissa', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'markets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintGuardianPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonAccruingRewardsDistributors', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'oracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pauseGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingComptrollerImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayBorrowAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsDistributors', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'seizeAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'seizeGuardianPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'suppliers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supplyCaps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferGuardianPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistArray', data: BytesLike): Result;

  events: {
    'ActionPaused(string,bool)': EventFragment;
    'AddedRewardsDistributor(address)': EventFragment;
    'AutoImplementationsToggled(bool)': EventFragment;
    'Failure(uint256,uint256,uint256)': EventFragment;
    'MarketActionPaused(address,string,bool)': EventFragment;
    'MarketEntered(address,address)': EventFragment;
    'MarketExited(address,address)': EventFragment;
    'MarketListed(address)': EventFragment;
    'MarketUnlisted(address)': EventFragment;
    'NewBorrowCap(address,uint256)': EventFragment;
    'NewBorrowCapGuardian(address,address)': EventFragment;
    'NewCloseFactor(uint256,uint256)': EventFragment;
    'NewCollateralFactor(address,uint256,uint256)': EventFragment;
    'NewLiquidationIncentive(uint256,uint256)': EventFragment;
    'NewPauseGuardian(address,address)': EventFragment;
    'NewPriceOracle(address,address)': EventFragment;
    'NewSupplyCap(address,uint256)': EventFragment;
    'WhitelistEnforcementChanged(bool)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ActionPaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AddedRewardsDistributor'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AutoImplementationsToggled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Failure'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketActionPaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketEntered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketExited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketListed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketUnlisted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewBorrowCap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewBorrowCapGuardian'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewCloseFactor'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewCollateralFactor'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewLiquidationIncentive'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewPauseGuardian'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewPriceOracle'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewSupplyCap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WhitelistEnforcementChanged'): EventFragment;
}

export interface ActionPausedEventObject {
  action: string;
  pauseState: boolean;
}
export type ActionPausedEvent = TypedEvent<[string, boolean], ActionPausedEventObject>;

export type ActionPausedEventFilter = TypedEventFilter<ActionPausedEvent>;

export interface AddedRewardsDistributorEventObject {
  rewardsDistributor: string;
}
export type AddedRewardsDistributorEvent = TypedEvent<[string], AddedRewardsDistributorEventObject>;

export type AddedRewardsDistributorEventFilter = TypedEventFilter<AddedRewardsDistributorEvent>;

export interface AutoImplementationsToggledEventObject {
  enabled: boolean;
}
export type AutoImplementationsToggledEvent = TypedEvent<[boolean], AutoImplementationsToggledEventObject>;

export type AutoImplementationsToggledEventFilter = TypedEventFilter<AutoImplementationsToggledEvent>;

export interface FailureEventObject {
  error: BigNumber;
  info: BigNumber;
  detail: BigNumber;
}
export type FailureEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], FailureEventObject>;

export type FailureEventFilter = TypedEventFilter<FailureEvent>;

export interface MarketActionPausedEventObject {
  cToken: string;
  action: string;
  pauseState: boolean;
}
export type MarketActionPausedEvent = TypedEvent<[string, string, boolean], MarketActionPausedEventObject>;

export type MarketActionPausedEventFilter = TypedEventFilter<MarketActionPausedEvent>;

export interface MarketEnteredEventObject {
  cToken: string;
  account: string;
}
export type MarketEnteredEvent = TypedEvent<[string, string], MarketEnteredEventObject>;

export type MarketEnteredEventFilter = TypedEventFilter<MarketEnteredEvent>;

export interface MarketExitedEventObject {
  cToken: string;
  account: string;
}
export type MarketExitedEvent = TypedEvent<[string, string], MarketExitedEventObject>;

export type MarketExitedEventFilter = TypedEventFilter<MarketExitedEvent>;

export interface MarketListedEventObject {
  cToken: string;
}
export type MarketListedEvent = TypedEvent<[string], MarketListedEventObject>;

export type MarketListedEventFilter = TypedEventFilter<MarketListedEvent>;

export interface MarketUnlistedEventObject {
  cToken: string;
}
export type MarketUnlistedEvent = TypedEvent<[string], MarketUnlistedEventObject>;

export type MarketUnlistedEventFilter = TypedEventFilter<MarketUnlistedEvent>;

export interface NewBorrowCapEventObject {
  cToken: string;
  newBorrowCap: BigNumber;
}
export type NewBorrowCapEvent = TypedEvent<[string, BigNumber], NewBorrowCapEventObject>;

export type NewBorrowCapEventFilter = TypedEventFilter<NewBorrowCapEvent>;

export interface NewBorrowCapGuardianEventObject {
  oldBorrowCapGuardian: string;
  newBorrowCapGuardian: string;
}
export type NewBorrowCapGuardianEvent = TypedEvent<[string, string], NewBorrowCapGuardianEventObject>;

export type NewBorrowCapGuardianEventFilter = TypedEventFilter<NewBorrowCapGuardianEvent>;

export interface NewCloseFactorEventObject {
  oldCloseFactorMantissa: BigNumber;
  newCloseFactorMantissa: BigNumber;
}
export type NewCloseFactorEvent = TypedEvent<[BigNumber, BigNumber], NewCloseFactorEventObject>;

export type NewCloseFactorEventFilter = TypedEventFilter<NewCloseFactorEvent>;

export interface NewCollateralFactorEventObject {
  cToken: string;
  oldCollateralFactorMantissa: BigNumber;
  newCollateralFactorMantissa: BigNumber;
}
export type NewCollateralFactorEvent = TypedEvent<[string, BigNumber, BigNumber], NewCollateralFactorEventObject>;

export type NewCollateralFactorEventFilter = TypedEventFilter<NewCollateralFactorEvent>;

export interface NewLiquidationIncentiveEventObject {
  oldLiquidationIncentiveMantissa: BigNumber;
  newLiquidationIncentiveMantissa: BigNumber;
}
export type NewLiquidationIncentiveEvent = TypedEvent<[BigNumber, BigNumber], NewLiquidationIncentiveEventObject>;

export type NewLiquidationIncentiveEventFilter = TypedEventFilter<NewLiquidationIncentiveEvent>;

export interface NewPauseGuardianEventObject {
  oldPauseGuardian: string;
  newPauseGuardian: string;
}
export type NewPauseGuardianEvent = TypedEvent<[string, string], NewPauseGuardianEventObject>;

export type NewPauseGuardianEventFilter = TypedEventFilter<NewPauseGuardianEvent>;

export interface NewPriceOracleEventObject {
  oldPriceOracle: string;
  newPriceOracle: string;
}
export type NewPriceOracleEvent = TypedEvent<[string, string], NewPriceOracleEventObject>;

export type NewPriceOracleEventFilter = TypedEventFilter<NewPriceOracleEvent>;

export interface NewSupplyCapEventObject {
  cToken: string;
  newSupplyCap: BigNumber;
}
export type NewSupplyCapEvent = TypedEvent<[string, BigNumber], NewSupplyCapEventObject>;

export type NewSupplyCapEventFilter = TypedEventFilter<NewSupplyCapEvent>;

export interface WhitelistEnforcementChangedEventObject {
  enforce: boolean;
}
export type WhitelistEnforcementChangedEvent = TypedEvent<[boolean], WhitelistEnforcementChangedEventObject>;

export type WhitelistEnforcementChangedEventFilter = TypedEventFilter<WhitelistEnforcementChangedEvent>;

export interface MidasComptroller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MidasComptrollerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _addRewardsDistributor(
      distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _afterNonReentrant(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    _become(
      unitroller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _becomeImplementation(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    _beforeNonReentrant(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    _borrowGuardianPaused(overrides?: CallOverrides): Promise<[boolean]>;

    _deployMarket(
      isCEther: PromiseOrValue<boolean>,
      constructorData: PromiseOrValue<BytesLike>,
      collateralFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _mintGuardianPaused(overrides?: CallOverrides): Promise<[boolean]>;

    _setBorrowCapGuardian(
      newBorrowCapGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setBorrowPaused(
      cToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setCloseFactor(
      newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setCollateralFactor(
      cToken: PromiseOrValue<string>,
      newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setMarketBorrowCaps(
      cTokens: PromiseOrValue<string>[],
      newBorrowCaps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setMarketSupplyCaps(
      cTokens: PromiseOrValue<string>[],
      newSupplyCaps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setMintPaused(
      cToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setPauseGuardian(
      newPauseGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setPriceOracle(
      newOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setSeizePaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setTransferPaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setWhitelistEnforcement(
      enforce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setWhitelistStatuses(
      suppliers: PromiseOrValue<string>[],
      statuses: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _toggleAutoImplementations(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _unsupportMarket(
      cToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    accountAssets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    addNonAccruingFlywheel(
      flywheelAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    adminHasRights(overrides?: CallOverrides): Promise<[boolean]>;

    allBorrowers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    autoImplementation(overrides?: CallOverrides): Promise<[boolean]>;

    borrowAllowed(
      cToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    borrowCapGuardian(overrides?: CallOverrides): Promise<[string]>;

    borrowCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    borrowWithinLimits(
      cToken: PromiseOrValue<string>,
      accountBorrowsNew: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    cTokensByUnderlying(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    checkMembership(
      account: PromiseOrValue<string>,
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<[string]>;

    enforceWhitelist(overrides?: CallOverrides): Promise<[boolean]>;

    enterMarkets(
      cTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    exitMarket(
      cTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    fuseAdmin(overrides?: CallOverrides): Promise<[string]>;

    fuseAdminHasRights(overrides?: CallOverrides): Promise<[boolean]>;

    getAllBorrowers(overrides?: CallOverrides): Promise<[string[]]>;

    getAllMarkets(overrides?: CallOverrides): Promise<[string[]]>;

    getAssetsIn(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string[]]>;

    getHypotheticalAccountLiquidity(
      account: PromiseOrValue<string>,
      cTokenModify: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getMaxRedeemOrBorrow(
      account: PromiseOrValue<string>,
      cToken: PromiseOrValue<string>,
      isBorrow: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getRewardsDistributors(overrides?: CallOverrides): Promise<[string[]]>;

    getWhitelist(overrides?: CallOverrides): Promise<[string[]]>;

    isComptroller(overrides?: CallOverrides): Promise<[boolean]>;

    isDeprecated(cToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isUserOfPool(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    liquidateBorrowAllowed(
      cTokenBorrowed: PromiseOrValue<string>,
      cTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    liquidateCalculateSeizeTokens(
      cTokenBorrowed: PromiseOrValue<string>,
      cTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    markets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, BigNumber] & {
        isListed: boolean;
        collateralFactorMantissa: BigNumber;
      }
    >;

    mintAllowed(
      cToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mintGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    nonAccruingRewardsDistributors(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    pauseGuardian(overrides?: CallOverrides): Promise<[string]>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    pendingComptrollerImplementation(overrides?: CallOverrides): Promise<[string]>;

    redeemAllowed(
      cToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    redeemVerify(
      cToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemAmount: PromiseOrValue<BigNumberish>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    repayBorrowAllowed(
      cToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    rewardsDistributors(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    seizeAllowed(
      cTokenCollateral: PromiseOrValue<string>,
      cTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    seizeGuardianPaused(overrides?: CallOverrides): Promise<[boolean]>;

    suppliers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    supplyCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    transferAllowed(
      cToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferGuardianPaused(overrides?: CallOverrides): Promise<[boolean]>;

    whitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    whitelistArray(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
  };

  _addRewardsDistributor(
    distributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _afterNonReentrant(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  _become(
    unitroller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _becomeImplementation(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  _beforeNonReentrant(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  _borrowGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

  _deployMarket(
    isCEther: PromiseOrValue<boolean>,
    constructorData: PromiseOrValue<BytesLike>,
    collateralFactorMantissa: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _mintGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

  _setBorrowCapGuardian(
    newBorrowCapGuardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setBorrowPaused(
    cToken: PromiseOrValue<string>,
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setCloseFactor(
    newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setCollateralFactor(
    cToken: PromiseOrValue<string>,
    newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setLiquidationIncentive(
    newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setMarketBorrowCaps(
    cTokens: PromiseOrValue<string>[],
    newBorrowCaps: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setMarketSupplyCaps(
    cTokens: PromiseOrValue<string>[],
    newSupplyCaps: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setMintPaused(
    cToken: PromiseOrValue<string>,
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setPauseGuardian(
    newPauseGuardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setPriceOracle(
    newOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setSeizePaused(
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setTransferPaused(
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setWhitelistEnforcement(
    enforce: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setWhitelistStatuses(
    suppliers: PromiseOrValue<string>[],
    statuses: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _toggleAutoImplementations(
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _unsupportMarket(
    cToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  accountAssets(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  addNonAccruingFlywheel(
    flywheelAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  adminHasRights(overrides?: CallOverrides): Promise<boolean>;

  allBorrowers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  autoImplementation(overrides?: CallOverrides): Promise<boolean>;

  borrowAllowed(
    cToken: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  borrowCapGuardian(overrides?: CallOverrides): Promise<string>;

  borrowCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  borrowGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  borrowWithinLimits(
    cToken: PromiseOrValue<string>,
    accountBorrowsNew: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  cTokensByUnderlying(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  checkMembership(
    account: PromiseOrValue<string>,
    cToken: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  comptrollerImplementation(overrides?: CallOverrides): Promise<string>;

  enforceWhitelist(overrides?: CallOverrides): Promise<boolean>;

  enterMarkets(
    cTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  exitMarket(
    cTokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  fuseAdmin(overrides?: CallOverrides): Promise<string>;

  fuseAdminHasRights(overrides?: CallOverrides): Promise<boolean>;

  getAllBorrowers(overrides?: CallOverrides): Promise<string[]>;

  getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

  getAssetsIn(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

  getHypotheticalAccountLiquidity(
    account: PromiseOrValue<string>,
    cTokenModify: PromiseOrValue<string>,
    redeemTokens: PromiseOrValue<BigNumberish>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getMaxRedeemOrBorrow(
    account: PromiseOrValue<string>,
    cToken: PromiseOrValue<string>,
    isBorrow: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getRewardsDistributors(overrides?: CallOverrides): Promise<string[]>;

  getWhitelist(overrides?: CallOverrides): Promise<string[]>;

  isComptroller(overrides?: CallOverrides): Promise<boolean>;

  isDeprecated(cToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isUserOfPool(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  liquidateBorrowAllowed(
    cTokenBorrowed: PromiseOrValue<string>,
    cTokenCollateral: PromiseOrValue<string>,
    liquidator: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    repayAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  liquidateCalculateSeizeTokens(
    cTokenBorrowed: PromiseOrValue<string>,
    cTokenCollateral: PromiseOrValue<string>,
    actualRepayAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>;

  liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  markets(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [boolean, BigNumber] & {
      isListed: boolean;
      collateralFactorMantissa: BigNumber;
    }
  >;

  mintAllowed(
    cToken: PromiseOrValue<string>,
    minter: PromiseOrValue<string>,
    mintAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mintGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  nonAccruingRewardsDistributors(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  pauseGuardian(overrides?: CallOverrides): Promise<string>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  pendingComptrollerImplementation(overrides?: CallOverrides): Promise<string>;

  redeemAllowed(
    cToken: PromiseOrValue<string>,
    redeemer: PromiseOrValue<string>,
    redeemTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  redeemVerify(
    cToken: PromiseOrValue<string>,
    redeemer: PromiseOrValue<string>,
    redeemAmount: PromiseOrValue<BigNumberish>,
    redeemTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  repayBorrowAllowed(
    cToken: PromiseOrValue<string>,
    payer: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    repayAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  rewardsDistributors(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  seizeAllowed(
    cTokenCollateral: PromiseOrValue<string>,
    cTokenBorrowed: PromiseOrValue<string>,
    liquidator: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    seizeTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  seizeGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

  suppliers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  supplyCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  transferAllowed(
    cToken: PromiseOrValue<string>,
    src: PromiseOrValue<string>,
    dst: PromiseOrValue<string>,
    transferTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

  whitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  whitelistArray(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _addRewardsDistributor(distributor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    _afterNonReentrant(overrides?: CallOverrides): Promise<void>;

    _become(unitroller: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    _becomeImplementation(overrides?: CallOverrides): Promise<void>;

    _beforeNonReentrant(overrides?: CallOverrides): Promise<void>;

    _borrowGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

    _deployMarket(
      isCEther: PromiseOrValue<boolean>,
      constructorData: PromiseOrValue<BytesLike>,
      collateralFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    _mintGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

    _setBorrowCapGuardian(newBorrowCapGuardian: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    _setBorrowPaused(
      cToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    _setCloseFactor(
      newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    _setCollateralFactor(
      cToken: PromiseOrValue<string>,
      newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    _setMarketBorrowCaps(
      cTokens: PromiseOrValue<string>[],
      newBorrowCaps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    _setMarketSupplyCaps(
      cTokens: PromiseOrValue<string>[],
      newSupplyCaps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    _setMintPaused(
      cToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    _setPauseGuardian(newPauseGuardian: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    _setPriceOracle(newOracle: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    _setSeizePaused(state: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<boolean>;

    _setTransferPaused(state: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<boolean>;

    _setWhitelistEnforcement(enforce: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

    _setWhitelistStatuses(
      suppliers: PromiseOrValue<string>[],
      statuses: PromiseOrValue<boolean>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    _toggleAutoImplementations(enabled: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

    _unsupportMarket(cToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    accountAssets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    addNonAccruingFlywheel(flywheelAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    admin(overrides?: CallOverrides): Promise<string>;

    adminHasRights(overrides?: CallOverrides): Promise<boolean>;

    allBorrowers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    autoImplementation(overrides?: CallOverrides): Promise<boolean>;

    borrowAllowed(
      cToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    borrowCapGuardian(overrides?: CallOverrides): Promise<string>;

    borrowCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    borrowWithinLimits(
      cToken: PromiseOrValue<string>,
      accountBorrowsNew: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    cTokensByUnderlying(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    checkMembership(
      account: PromiseOrValue<string>,
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<string>;

    enforceWhitelist(overrides?: CallOverrides): Promise<boolean>;

    enterMarkets(cTokens: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<BigNumber[]>;

    exitMarket(cTokenAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    fuseAdmin(overrides?: CallOverrides): Promise<string>;

    fuseAdminHasRights(overrides?: CallOverrides): Promise<boolean>;

    getAllBorrowers(overrides?: CallOverrides): Promise<string[]>;

    getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

    getAssetsIn(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

    getHypotheticalAccountLiquidity(
      account: PromiseOrValue<string>,
      cTokenModify: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getMaxRedeemOrBorrow(
      account: PromiseOrValue<string>,
      cToken: PromiseOrValue<string>,
      isBorrow: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRewardsDistributors(overrides?: CallOverrides): Promise<string[]>;

    getWhitelist(overrides?: CallOverrides): Promise<string[]>;

    isComptroller(overrides?: CallOverrides): Promise<boolean>;

    isDeprecated(cToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isUserOfPool(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    liquidateBorrowAllowed(
      cTokenBorrowed: PromiseOrValue<string>,
      cTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    liquidateCalculateSeizeTokens(
      cTokenBorrowed: PromiseOrValue<string>,
      cTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    markets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, BigNumber] & {
        isListed: boolean;
        collateralFactorMantissa: BigNumber;
      }
    >;

    mintAllowed(
      cToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mintGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    nonAccruingRewardsDistributors(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    pauseGuardian(overrides?: CallOverrides): Promise<string>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    pendingComptrollerImplementation(overrides?: CallOverrides): Promise<string>;

    redeemAllowed(
      cToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    redeemVerify(
      cToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemAmount: PromiseOrValue<BigNumberish>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    repayBorrowAllowed(
      cToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    rewardsDistributors(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    seizeAllowed(
      cTokenCollateral: PromiseOrValue<string>,
      cTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    seizeGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

    suppliers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    supplyCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    transferAllowed(
      cToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transferGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

    whitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    whitelistArray(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'ActionPaused(string,bool)'(action?: null, pauseState?: null): ActionPausedEventFilter;
    ActionPaused(action?: null, pauseState?: null): ActionPausedEventFilter;

    'AddedRewardsDistributor(address)'(rewardsDistributor?: null): AddedRewardsDistributorEventFilter;
    AddedRewardsDistributor(rewardsDistributor?: null): AddedRewardsDistributorEventFilter;

    'AutoImplementationsToggled(bool)'(enabled?: null): AutoImplementationsToggledEventFilter;
    AutoImplementationsToggled(enabled?: null): AutoImplementationsToggledEventFilter;

    'Failure(uint256,uint256,uint256)'(error?: null, info?: null, detail?: null): FailureEventFilter;
    Failure(error?: null, info?: null, detail?: null): FailureEventFilter;

    'MarketActionPaused(address,string,bool)'(
      cToken?: null,
      action?: null,
      pauseState?: null,
    ): MarketActionPausedEventFilter;
    MarketActionPaused(cToken?: null, action?: null, pauseState?: null): MarketActionPausedEventFilter;

    'MarketEntered(address,address)'(cToken?: null, account?: null): MarketEnteredEventFilter;
    MarketEntered(cToken?: null, account?: null): MarketEnteredEventFilter;

    'MarketExited(address,address)'(cToken?: null, account?: null): MarketExitedEventFilter;
    MarketExited(cToken?: null, account?: null): MarketExitedEventFilter;

    'MarketListed(address)'(cToken?: null): MarketListedEventFilter;
    MarketListed(cToken?: null): MarketListedEventFilter;

    'MarketUnlisted(address)'(cToken?: null): MarketUnlistedEventFilter;
    MarketUnlisted(cToken?: null): MarketUnlistedEventFilter;

    'NewBorrowCap(address,uint256)'(
      cToken?: PromiseOrValue<string> | null,
      newBorrowCap?: null,
    ): NewBorrowCapEventFilter;
    NewBorrowCap(cToken?: PromiseOrValue<string> | null, newBorrowCap?: null): NewBorrowCapEventFilter;

    'NewBorrowCapGuardian(address,address)'(
      oldBorrowCapGuardian?: null,
      newBorrowCapGuardian?: null,
    ): NewBorrowCapGuardianEventFilter;
    NewBorrowCapGuardian(oldBorrowCapGuardian?: null, newBorrowCapGuardian?: null): NewBorrowCapGuardianEventFilter;

    'NewCloseFactor(uint256,uint256)'(
      oldCloseFactorMantissa?: null,
      newCloseFactorMantissa?: null,
    ): NewCloseFactorEventFilter;
    NewCloseFactor(oldCloseFactorMantissa?: null, newCloseFactorMantissa?: null): NewCloseFactorEventFilter;

    'NewCollateralFactor(address,uint256,uint256)'(
      cToken?: null,
      oldCollateralFactorMantissa?: null,
      newCollateralFactorMantissa?: null,
    ): NewCollateralFactorEventFilter;
    NewCollateralFactor(
      cToken?: null,
      oldCollateralFactorMantissa?: null,
      newCollateralFactorMantissa?: null,
    ): NewCollateralFactorEventFilter;

    'NewLiquidationIncentive(uint256,uint256)'(
      oldLiquidationIncentiveMantissa?: null,
      newLiquidationIncentiveMantissa?: null,
    ): NewLiquidationIncentiveEventFilter;
    NewLiquidationIncentive(
      oldLiquidationIncentiveMantissa?: null,
      newLiquidationIncentiveMantissa?: null,
    ): NewLiquidationIncentiveEventFilter;

    'NewPauseGuardian(address,address)'(oldPauseGuardian?: null, newPauseGuardian?: null): NewPauseGuardianEventFilter;
    NewPauseGuardian(oldPauseGuardian?: null, newPauseGuardian?: null): NewPauseGuardianEventFilter;

    'NewPriceOracle(address,address)'(oldPriceOracle?: null, newPriceOracle?: null): NewPriceOracleEventFilter;
    NewPriceOracle(oldPriceOracle?: null, newPriceOracle?: null): NewPriceOracleEventFilter;

    'NewSupplyCap(address,uint256)'(
      cToken?: PromiseOrValue<string> | null,
      newSupplyCap?: null,
    ): NewSupplyCapEventFilter;
    NewSupplyCap(cToken?: PromiseOrValue<string> | null, newSupplyCap?: null): NewSupplyCapEventFilter;

    'WhitelistEnforcementChanged(bool)'(enforce?: null): WhitelistEnforcementChangedEventFilter;
    WhitelistEnforcementChanged(enforce?: null): WhitelistEnforcementChangedEventFilter;
  };

  estimateGas: {
    _addRewardsDistributor(
      distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _afterNonReentrant(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    _become(
      unitroller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _becomeImplementation(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    _beforeNonReentrant(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    _borrowGuardianPaused(overrides?: CallOverrides): Promise<BigNumber>;

    _deployMarket(
      isCEther: PromiseOrValue<boolean>,
      constructorData: PromiseOrValue<BytesLike>,
      collateralFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _mintGuardianPaused(overrides?: CallOverrides): Promise<BigNumber>;

    _setBorrowCapGuardian(
      newBorrowCapGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setBorrowPaused(
      cToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setCloseFactor(
      newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setCollateralFactor(
      cToken: PromiseOrValue<string>,
      newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setMarketBorrowCaps(
      cTokens: PromiseOrValue<string>[],
      newBorrowCaps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setMarketSupplyCaps(
      cTokens: PromiseOrValue<string>[],
      newSupplyCaps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setMintPaused(
      cToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setPauseGuardian(
      newPauseGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setPriceOracle(
      newOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setSeizePaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setTransferPaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setWhitelistEnforcement(
      enforce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setWhitelistStatuses(
      suppliers: PromiseOrValue<string>[],
      statuses: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _toggleAutoImplementations(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _unsupportMarket(
      cToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    accountAssets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    addNonAccruingFlywheel(
      flywheelAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    adminHasRights(overrides?: CallOverrides): Promise<BigNumber>;

    allBorrowers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    autoImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    borrowAllowed(
      cToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    borrowCapGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    borrowCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowWithinLimits(
      cToken: PromiseOrValue<string>,
      accountBorrowsNew: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    cTokensByUnderlying(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    checkMembership(
      account: PromiseOrValue<string>,
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    enforceWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    enterMarkets(
      cTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    exitMarket(
      cTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    fuseAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    fuseAdminHasRights(overrides?: CallOverrides): Promise<BigNumber>;

    getAllBorrowers(overrides?: CallOverrides): Promise<BigNumber>;

    getAllMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetsIn(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getHypotheticalAccountLiquidity(
      account: PromiseOrValue<string>,
      cTokenModify: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getMaxRedeemOrBorrow(
      account: PromiseOrValue<string>,
      cToken: PromiseOrValue<string>,
      isBorrow: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getRewardsDistributors(overrides?: CallOverrides): Promise<BigNumber>;

    getWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    isComptroller(overrides?: CallOverrides): Promise<BigNumber>;

    isDeprecated(cToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isUserOfPool(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    liquidateBorrowAllowed(
      cTokenBorrowed: PromiseOrValue<string>,
      cTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    liquidateCalculateSeizeTokens(
      cTokenBorrowed: PromiseOrValue<string>,
      cTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    markets(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    mintAllowed(
      cToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mintGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    nonAccruingRewardsDistributors(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    pauseGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    pendingComptrollerImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    redeemAllowed(
      cToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    redeemVerify(
      cToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemAmount: PromiseOrValue<BigNumberish>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    repayBorrowAllowed(
      cToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    rewardsDistributors(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    seizeAllowed(
      cTokenCollateral: PromiseOrValue<string>,
      cTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    seizeGuardianPaused(overrides?: CallOverrides): Promise<BigNumber>;

    suppliers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    supplyCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    transferAllowed(
      cToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferGuardianPaused(overrides?: CallOverrides): Promise<BigNumber>;

    whitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    whitelistArray(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _addRewardsDistributor(
      distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _afterNonReentrant(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    _become(
      unitroller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _becomeImplementation(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    _beforeNonReentrant(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    _borrowGuardianPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _deployMarket(
      isCEther: PromiseOrValue<boolean>,
      constructorData: PromiseOrValue<BytesLike>,
      collateralFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _mintGuardianPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _setBorrowCapGuardian(
      newBorrowCapGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setBorrowPaused(
      cToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setCloseFactor(
      newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setCollateralFactor(
      cToken: PromiseOrValue<string>,
      newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setMarketBorrowCaps(
      cTokens: PromiseOrValue<string>[],
      newBorrowCaps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setMarketSupplyCaps(
      cTokens: PromiseOrValue<string>[],
      newSupplyCaps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setMintPaused(
      cToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setPauseGuardian(
      newPauseGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setPriceOracle(
      newOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setSeizePaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setTransferPaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setWhitelistEnforcement(
      enforce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setWhitelistStatuses(
      suppliers: PromiseOrValue<string>[],
      statuses: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _toggleAutoImplementations(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _unsupportMarket(
      cToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    accountAssets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    addNonAccruingFlywheel(
      flywheelAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminHasRights(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allBorrowers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    autoImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowAllowed(
      cToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    borrowCapGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowWithinLimits(
      cToken: PromiseOrValue<string>,
      accountBorrowsNew: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    cTokensByUnderlying(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkMembership(
      account: PromiseOrValue<string>,
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enforceWhitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enterMarkets(
      cTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    exitMarket(
      cTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    fuseAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fuseAdminHasRights(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllBorrowers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetsIn(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHypotheticalAccountLiquidity(
      account: PromiseOrValue<string>,
      cTokenModify: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getMaxRedeemOrBorrow(
      account: PromiseOrValue<string>,
      cToken: PromiseOrValue<string>,
      isBorrow: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getRewardsDistributors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWhitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isComptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDeprecated(cToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isUserOfPool(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateBorrowAllowed(
      cTokenBorrowed: PromiseOrValue<string>,
      cTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    liquidateCalculateSeizeTokens(
      cTokenBorrowed: PromiseOrValue<string>,
      cTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    markets(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintAllowed(
      cToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mintGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonAccruingRewardsDistributors(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingComptrollerImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemAllowed(
      cToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    redeemVerify(
      cToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemAmount: PromiseOrValue<BigNumberish>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    repayBorrowAllowed(
      cToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    rewardsDistributors(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seizeAllowed(
      cTokenCollateral: PromiseOrValue<string>,
      cTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    seizeGuardianPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    suppliers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supplyCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferAllowed(
      cToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferGuardianPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistArray(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
