/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface MidasCErc20TokenInterface extends utils.Interface {
  functions: {
    'admin()': FunctionFragment;
    'adminFeeMantissa()': FunctionFragment;
    'adminHasRights()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'balanceOfUnderlying(address)': FunctionFragment;
    'borrow(uint256)': FunctionFragment;
    'borrowBalanceStored(address)': FunctionFragment;
    'borrowRatePerBlock()': FunctionFragment;
    'comptroller()': FunctionFragment;
    'exchangeRateCurrent()': FunctionFragment;
    'exchangeRateStored()': FunctionFragment;
    'feeSeizeShareMantissa()': FunctionFragment;
    'fuseAdminHasRights()': FunctionFragment;
    'fuseFeeMantissa()': FunctionFragment;
    'getCash()': FunctionFragment;
    'isCEther()': FunctionFragment;
    'isCToken()': FunctionFragment;
    'liquidateBorrow(address,uint256,address)': FunctionFragment;
    'mint(uint256)': FunctionFragment;
    'protocolSeizeShareMantissa()': FunctionFragment;
    'redeem(uint256)': FunctionFragment;
    'redeemUnderlying(uint256)': FunctionFragment;
    'reserveFactorMantissa()': FunctionFragment;
    'supplyRatePerBlock()': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalAdminFees()': FunctionFragment;
    'totalBorrowsCurrent()': FunctionFragment;
    'totalFuseFees()': FunctionFragment;
    'totalReserves()': FunctionFragment;
    'underlying()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'admin'
      | 'adminFeeMantissa'
      | 'adminHasRights'
      | 'balanceOf'
      | 'balanceOfUnderlying'
      | 'borrow'
      | 'borrowBalanceStored'
      | 'borrowRatePerBlock'
      | 'comptroller'
      | 'exchangeRateCurrent'
      | 'exchangeRateStored'
      | 'feeSeizeShareMantissa'
      | 'fuseAdminHasRights'
      | 'fuseFeeMantissa'
      | 'getCash'
      | 'isCEther'
      | 'isCToken'
      | 'liquidateBorrow'
      | 'mint'
      | 'protocolSeizeShareMantissa'
      | 'redeem'
      | 'redeemUnderlying'
      | 'reserveFactorMantissa'
      | 'supplyRatePerBlock'
      | 'symbol'
      | 'totalAdminFees'
      | 'totalBorrowsCurrent'
      | 'totalFuseFees'
      | 'totalReserves'
      | 'underlying',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'adminFeeMantissa', values?: undefined): string;
  encodeFunctionData(functionFragment: 'adminHasRights', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'balanceOfUnderlying', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'borrow', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'borrowBalanceStored', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'borrowRatePerBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'comptroller', values?: undefined): string;
  encodeFunctionData(functionFragment: 'exchangeRateCurrent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'exchangeRateStored', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feeSeizeShareMantissa', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fuseAdminHasRights', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fuseFeeMantissa', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getCash', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isCEther', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isCToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'liquidateBorrow',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'mint', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'protocolSeizeShareMantissa', values?: undefined): string;
  encodeFunctionData(functionFragment: 'redeem', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'redeemUnderlying', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'reserveFactorMantissa', values?: undefined): string;
  encodeFunctionData(functionFragment: 'supplyRatePerBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalAdminFees', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalBorrowsCurrent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalFuseFees', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalReserves', values?: undefined): string;
  encodeFunctionData(functionFragment: 'underlying', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adminFeeMantissa', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adminHasRights', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfUnderlying', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowBalanceStored', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowRatePerBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'comptroller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exchangeRateCurrent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exchangeRateStored', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeSeizeShareMantissa', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fuseAdminHasRights', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fuseFeeMantissa', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCash', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isCEther', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isCToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateBorrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protocolSeizeShareMantissa', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemUnderlying', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reserveFactorMantissa', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supplyRatePerBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAdminFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalBorrowsCurrent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalFuseFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalReserves', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'underlying', data: BytesLike): Result;

  events: {};
}

export interface MidasCErc20Token extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MidasCErc20TokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    adminFeeMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    adminHasRights(overrides?: CallOverrides): Promise<[boolean]>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfUnderlying(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    borrow(
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    borrowBalanceStored(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowRatePerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    comptroller(overrides?: CallOverrides): Promise<[string]>;

    exchangeRateCurrent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    exchangeRateStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeSeizeShareMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    fuseAdminHasRights(overrides?: CallOverrides): Promise<[boolean]>;

    fuseFeeMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCash(overrides?: CallOverrides): Promise<[BigNumber]>;

    isCEther(overrides?: CallOverrides): Promise<[boolean]>;

    isCToken(overrides?: CallOverrides): Promise<[boolean]>;

    liquidateBorrow(
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      cTokenCollateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mint(
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    protocolSeizeShareMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeem(
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    redeemUnderlying(
      redeemAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    reserveFactorMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    supplyRatePerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalAdminFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalBorrowsCurrent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    totalFuseFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    underlying(overrides?: CallOverrides): Promise<[string]>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  adminFeeMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  adminHasRights(overrides?: CallOverrides): Promise<boolean>;

  balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfUnderlying(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  borrow(
    borrowAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  borrowBalanceStored(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  borrowRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  comptroller(overrides?: CallOverrides): Promise<string>;

  exchangeRateCurrent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  exchangeRateStored(overrides?: CallOverrides): Promise<BigNumber>;

  feeSeizeShareMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  fuseAdminHasRights(overrides?: CallOverrides): Promise<boolean>;

  fuseFeeMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  getCash(overrides?: CallOverrides): Promise<BigNumber>;

  isCEther(overrides?: CallOverrides): Promise<boolean>;

  isCToken(overrides?: CallOverrides): Promise<boolean>;

  liquidateBorrow(
    borrower: PromiseOrValue<string>,
    repayAmount: PromiseOrValue<BigNumberish>,
    cTokenCollateral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mint(
    mintAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  protocolSeizeShareMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    redeemTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  redeemUnderlying(
    redeemAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  reserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  supplyRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalAdminFees(overrides?: CallOverrides): Promise<BigNumber>;

  totalBorrowsCurrent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  totalFuseFees(overrides?: CallOverrides): Promise<BigNumber>;

  totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

  underlying(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    adminFeeMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    adminHasRights(overrides?: CallOverrides): Promise<boolean>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfUnderlying(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrow(borrowAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowBalanceStored(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    comptroller(overrides?: CallOverrides): Promise<string>;

    exchangeRateCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRateStored(overrides?: CallOverrides): Promise<BigNumber>;

    feeSeizeShareMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    fuseAdminHasRights(overrides?: CallOverrides): Promise<boolean>;

    fuseFeeMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    getCash(overrides?: CallOverrides): Promise<BigNumber>;

    isCEther(overrides?: CallOverrides): Promise<boolean>;

    isCToken(overrides?: CallOverrides): Promise<boolean>;

    liquidateBorrow(
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      cTokenCollateral: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mint(mintAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    protocolSeizeShareMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(redeemTokens: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    redeemUnderlying(redeemAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    reserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    supplyRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalAdminFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrowsCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    totalFuseFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    adminFeeMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    adminHasRights(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfUnderlying(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    borrow(
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    borrowBalanceStored(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    comptroller(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRateCurrent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    exchangeRateStored(overrides?: CallOverrides): Promise<BigNumber>;

    feeSeizeShareMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    fuseAdminHasRights(overrides?: CallOverrides): Promise<BigNumber>;

    fuseFeeMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    getCash(overrides?: CallOverrides): Promise<BigNumber>;

    isCEther(overrides?: CallOverrides): Promise<BigNumber>;

    isCToken(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateBorrow(
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      cTokenCollateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mint(
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    protocolSeizeShareMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    redeemUnderlying(
      redeemAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    reserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    supplyRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalAdminFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrowsCurrent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    totalFuseFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminFeeMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminHasRights(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfUnderlying(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    borrow(
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    borrowBalanceStored(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowRatePerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    comptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeRateCurrent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    exchangeRateStored(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeSeizeShareMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fuseAdminHasRights(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fuseFeeMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isCEther(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isCToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateBorrow(
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      cTokenCollateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mint(
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    protocolSeizeShareMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    redeemUnderlying(
      redeemAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    reserveFactorMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supplyRatePerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAdminFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBorrowsCurrent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    totalFuseFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
