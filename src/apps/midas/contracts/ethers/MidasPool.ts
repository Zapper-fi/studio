/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface MidasPoolInterface extends utils.Interface {
  functions: {
    '_acceptAdmin()': FunctionFragment;
    '_acceptImplementation()': FunctionFragment;
    '_setPendingAdmin(address)': FunctionFragment;
    '_setPendingImplementation(address)': FunctionFragment;
    '_toggleAdminRights(bool)': FunctionFragment;
    '_toggleFuseAdminRights(bool)': FunctionFragment;
    'admin()': FunctionFragment;
    'adminHasRights()': FunctionFragment;
    'comptrollerImplementation()': FunctionFragment;
    'fuseAdmin()': FunctionFragment;
    'fuseAdminHasRights()': FunctionFragment;
    'pendingAdmin()': FunctionFragment;
    'pendingComptrollerImplementation()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | '_acceptAdmin'
      | '_acceptImplementation'
      | '_setPendingAdmin'
      | '_setPendingImplementation'
      | '_toggleAdminRights'
      | '_toggleFuseAdminRights'
      | 'admin'
      | 'adminHasRights'
      | 'comptrollerImplementation'
      | 'fuseAdmin'
      | 'fuseAdminHasRights'
      | 'pendingAdmin'
      | 'pendingComptrollerImplementation',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: '_acceptAdmin', values?: undefined): string;
  encodeFunctionData(functionFragment: '_acceptImplementation', values?: undefined): string;
  encodeFunctionData(functionFragment: '_setPendingAdmin', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: '_setPendingImplementation', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: '_toggleAdminRights', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: '_toggleFuseAdminRights', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'adminHasRights', values?: undefined): string;
  encodeFunctionData(functionFragment: 'comptrollerImplementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fuseAdmin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fuseAdminHasRights', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingAdmin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingComptrollerImplementation', values?: undefined): string;

  decodeFunctionResult(functionFragment: '_acceptAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_acceptImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setPendingAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setPendingImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_toggleAdminRights', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_toggleFuseAdminRights', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adminHasRights', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'comptrollerImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fuseAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fuseAdminHasRights', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingComptrollerImplementation', data: BytesLike): Result;

  events: {
    'AdminRightsToggled(bool)': EventFragment;
    'Failure(uint256,uint256,uint256)': EventFragment;
    'FuseAdminRightsToggled(bool)': EventFragment;
    'NewAdmin(address,address)': EventFragment;
    'NewImplementation(address,address)': EventFragment;
    'NewPendingAdmin(address,address)': EventFragment;
    'NewPendingImplementation(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminRightsToggled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Failure'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FuseAdminRightsToggled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewAdmin'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewImplementation'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewPendingAdmin'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewPendingImplementation'): EventFragment;
}

export interface AdminRightsToggledEventObject {
  hasRights: boolean;
}
export type AdminRightsToggledEvent = TypedEvent<[boolean], AdminRightsToggledEventObject>;

export type AdminRightsToggledEventFilter = TypedEventFilter<AdminRightsToggledEvent>;

export interface FailureEventObject {
  error: BigNumber;
  info: BigNumber;
  detail: BigNumber;
}
export type FailureEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], FailureEventObject>;

export type FailureEventFilter = TypedEventFilter<FailureEvent>;

export interface FuseAdminRightsToggledEventObject {
  hasRights: boolean;
}
export type FuseAdminRightsToggledEvent = TypedEvent<[boolean], FuseAdminRightsToggledEventObject>;

export type FuseAdminRightsToggledEventFilter = TypedEventFilter<FuseAdminRightsToggledEvent>;

export interface NewAdminEventObject {
  oldAdmin: string;
  newAdmin: string;
}
export type NewAdminEvent = TypedEvent<[string, string], NewAdminEventObject>;

export type NewAdminEventFilter = TypedEventFilter<NewAdminEvent>;

export interface NewImplementationEventObject {
  oldImplementation: string;
  newImplementation: string;
}
export type NewImplementationEvent = TypedEvent<[string, string], NewImplementationEventObject>;

export type NewImplementationEventFilter = TypedEventFilter<NewImplementationEvent>;

export interface NewPendingAdminEventObject {
  oldPendingAdmin: string;
  newPendingAdmin: string;
}
export type NewPendingAdminEvent = TypedEvent<[string, string], NewPendingAdminEventObject>;

export type NewPendingAdminEventFilter = TypedEventFilter<NewPendingAdminEvent>;

export interface NewPendingImplementationEventObject {
  oldPendingImplementation: string;
  newPendingImplementation: string;
}
export type NewPendingImplementationEvent = TypedEvent<[string, string], NewPendingImplementationEventObject>;

export type NewPendingImplementationEventFilter = TypedEventFilter<NewPendingImplementationEvent>;

export interface MidasPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MidasPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _acceptAdmin(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    _acceptImplementation(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    _setPendingAdmin(
      newPendingAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setPendingImplementation(
      newPendingImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _toggleAdminRights(
      hasRights: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _toggleFuseAdminRights(
      hasRights: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    adminHasRights(overrides?: CallOverrides): Promise<[boolean]>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<[string]>;

    fuseAdmin(overrides?: CallOverrides): Promise<[string]>;

    fuseAdminHasRights(overrides?: CallOverrides): Promise<[boolean]>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    pendingComptrollerImplementation(overrides?: CallOverrides): Promise<[string]>;
  };

  _acceptAdmin(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  _acceptImplementation(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  _setPendingAdmin(
    newPendingAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setPendingImplementation(
    newPendingImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _toggleAdminRights(
    hasRights: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _toggleFuseAdminRights(
    hasRights: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  adminHasRights(overrides?: CallOverrides): Promise<boolean>;

  comptrollerImplementation(overrides?: CallOverrides): Promise<string>;

  fuseAdmin(overrides?: CallOverrides): Promise<string>;

  fuseAdminHasRights(overrides?: CallOverrides): Promise<boolean>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  pendingComptrollerImplementation(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _acceptAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    _acceptImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    _setPendingAdmin(newPendingAdmin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    _setPendingImplementation(
      newPendingImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    _toggleAdminRights(hasRights: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

    _toggleFuseAdminRights(hasRights: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    adminHasRights(overrides?: CallOverrides): Promise<boolean>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<string>;

    fuseAdmin(overrides?: CallOverrides): Promise<string>;

    fuseAdminHasRights(overrides?: CallOverrides): Promise<boolean>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    pendingComptrollerImplementation(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'AdminRightsToggled(bool)'(hasRights?: null): AdminRightsToggledEventFilter;
    AdminRightsToggled(hasRights?: null): AdminRightsToggledEventFilter;

    'Failure(uint256,uint256,uint256)'(error?: null, info?: null, detail?: null): FailureEventFilter;
    Failure(error?: null, info?: null, detail?: null): FailureEventFilter;

    'FuseAdminRightsToggled(bool)'(hasRights?: null): FuseAdminRightsToggledEventFilter;
    FuseAdminRightsToggled(hasRights?: null): FuseAdminRightsToggledEventFilter;

    'NewAdmin(address,address)'(oldAdmin?: null, newAdmin?: null): NewAdminEventFilter;
    NewAdmin(oldAdmin?: null, newAdmin?: null): NewAdminEventFilter;

    'NewImplementation(address,address)'(
      oldImplementation?: null,
      newImplementation?: null,
    ): NewImplementationEventFilter;
    NewImplementation(oldImplementation?: null, newImplementation?: null): NewImplementationEventFilter;

    'NewPendingAdmin(address,address)'(oldPendingAdmin?: null, newPendingAdmin?: null): NewPendingAdminEventFilter;
    NewPendingAdmin(oldPendingAdmin?: null, newPendingAdmin?: null): NewPendingAdminEventFilter;

    'NewPendingImplementation(address,address)'(
      oldPendingImplementation?: null,
      newPendingImplementation?: null,
    ): NewPendingImplementationEventFilter;
    NewPendingImplementation(
      oldPendingImplementation?: null,
      newPendingImplementation?: null,
    ): NewPendingImplementationEventFilter;
  };

  estimateGas: {
    _acceptAdmin(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    _acceptImplementation(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    _setPendingAdmin(
      newPendingAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setPendingImplementation(
      newPendingImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _toggleAdminRights(
      hasRights: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _toggleFuseAdminRights(
      hasRights: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    adminHasRights(overrides?: CallOverrides): Promise<BigNumber>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    fuseAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    fuseAdminHasRights(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    pendingComptrollerImplementation(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _acceptAdmin(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    _acceptImplementation(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    _setPendingAdmin(
      newPendingAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setPendingImplementation(
      newPendingImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _toggleAdminRights(
      hasRights: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _toggleFuseAdminRights(
      hasRights: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminHasRights(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fuseAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fuseAdminHasRights(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingComptrollerImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
