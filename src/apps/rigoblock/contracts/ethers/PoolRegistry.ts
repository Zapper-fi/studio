/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface PoolRegistryInterface extends utils.Interface {
  functions: {
    'authority()': FunctionFragment;
    'getMeta(address,bytes32)': FunctionFragment;
    'getPoolIdFromAddress(address)': FunctionFragment;
    'register(address,string,string,bytes32)': FunctionFragment;
    'rigoblockDao()': FunctionFragment;
    'setAuthority(address)': FunctionFragment;
    'setMeta(address,bytes32,bytes32)': FunctionFragment;
    'setRigoblockDao(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'authority'
      | 'getMeta'
      | 'getPoolIdFromAddress'
      | 'register'
      | 'rigoblockDao'
      | 'setAuthority'
      | 'setMeta'
      | 'setRigoblockDao',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'authority', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMeta', values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'getPoolIdFromAddress', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'register',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'rigoblockDao', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setAuthority', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setMeta',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'setRigoblockDao', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'authority', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMeta', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolIdFromAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'register', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rigoblockDao', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAuthority', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMeta', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRigoblockDao', data: BytesLike): Result;

  events: {
    'AuthorityChanged(address)': EventFragment;
    'MetaChanged(address,bytes32,bytes32)': EventFragment;
    'Registered(address,address,bytes32,bytes32,bytes32)': EventFragment;
    'RigoblockDaoChanged(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AuthorityChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MetaChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Registered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RigoblockDaoChanged'): EventFragment;
}

export interface AuthorityChangedEventObject {
  authority: string;
}
export type AuthorityChangedEvent = TypedEvent<[string], AuthorityChangedEventObject>;

export type AuthorityChangedEventFilter = TypedEventFilter<AuthorityChangedEvent>;

export interface MetaChangedEventObject {
  pool: string;
  key: string;
  value: string;
}
export type MetaChangedEvent = TypedEvent<[string, string, string], MetaChangedEventObject>;

export type MetaChangedEventFilter = TypedEventFilter<MetaChangedEvent>;

export interface RegisteredEventObject {
  group: string;
  pool: string;
  name: string;
  symbol: string;
  id: string;
}
export type RegisteredEvent = TypedEvent<[string, string, string, string, string], RegisteredEventObject>;

export type RegisteredEventFilter = TypedEventFilter<RegisteredEvent>;

export interface RigoblockDaoChangedEventObject {
  rigoblockDao: string;
}
export type RigoblockDaoChangedEvent = TypedEvent<[string], RigoblockDaoChangedEventObject>;

export type RigoblockDaoChangedEventFilter = TypedEventFilter<RigoblockDaoChangedEvent>;

export interface PoolRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authority(overrides?: CallOverrides): Promise<[string]>;

    getMeta(
      pool: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[string] & { poolMeta: string }>;

    getPoolIdFromAddress(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string] & { poolId: string }>;

    register(
      pool: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      poolId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    rigoblockDao(overrides?: CallOverrides): Promise<[string]>;

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMeta(
      pool: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRigoblockDao(
      newRigoblockDao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  authority(overrides?: CallOverrides): Promise<string>;

  getMeta(pool: PromiseOrValue<string>, key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  getPoolIdFromAddress(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  register(
    pool: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    poolId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  rigoblockDao(overrides?: CallOverrides): Promise<string>;

  setAuthority(
    newAuthority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMeta(
    pool: PromiseOrValue<string>,
    key: PromiseOrValue<BytesLike>,
    value: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRigoblockDao(
    newRigoblockDao: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    authority(overrides?: CallOverrides): Promise<string>;

    getMeta(pool: PromiseOrValue<string>, key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    getPoolIdFromAddress(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    register(
      pool: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      poolId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    rigoblockDao(overrides?: CallOverrides): Promise<string>;

    setAuthority(newAuthority: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setMeta(
      pool: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setRigoblockDao(newRigoblockDao: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'AuthorityChanged(address)'(authority?: PromiseOrValue<string> | null): AuthorityChangedEventFilter;
    AuthorityChanged(authority?: PromiseOrValue<string> | null): AuthorityChangedEventFilter;

    'MetaChanged(address,bytes32,bytes32)'(
      pool?: PromiseOrValue<string> | null,
      key?: PromiseOrValue<BytesLike> | null,
      value?: null,
    ): MetaChangedEventFilter;
    MetaChanged(
      pool?: PromiseOrValue<string> | null,
      key?: PromiseOrValue<BytesLike> | null,
      value?: null,
    ): MetaChangedEventFilter;

    'Registered(address,address,bytes32,bytes32,bytes32)'(
      group?: PromiseOrValue<string> | null,
      pool?: null,
      name?: PromiseOrValue<BytesLike> | null,
      symbol?: PromiseOrValue<BytesLike> | null,
      id?: null,
    ): RegisteredEventFilter;
    Registered(
      group?: PromiseOrValue<string> | null,
      pool?: null,
      name?: PromiseOrValue<BytesLike> | null,
      symbol?: PromiseOrValue<BytesLike> | null,
      id?: null,
    ): RegisteredEventFilter;

    'RigoblockDaoChanged(address)'(rigoblockDao?: PromiseOrValue<string> | null): RigoblockDaoChangedEventFilter;
    RigoblockDaoChanged(rigoblockDao?: PromiseOrValue<string> | null): RigoblockDaoChangedEventFilter;
  };

  estimateGas: {
    authority(overrides?: CallOverrides): Promise<BigNumber>;

    getMeta(
      pool: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPoolIdFromAddress(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    register(
      pool: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      poolId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    rigoblockDao(overrides?: CallOverrides): Promise<BigNumber>;

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMeta(
      pool: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRigoblockDao(
      newRigoblockDao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMeta(
      pool: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPoolIdFromAddress(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    register(
      pool: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      poolId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    rigoblockDao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMeta(
      pool: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRigoblockDao(
      newRigoblockDao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
