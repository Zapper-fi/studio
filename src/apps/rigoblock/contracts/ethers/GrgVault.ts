/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface GrgVaultInterface extends utils.Interface {
  functions: {
    'addAuthorizedAddress(address)': FunctionFragment;
    'authorities(uint256)': FunctionFragment;
    'authorized(address)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'balanceOfGrgVault()': FunctionFragment;
    'depositFrom(address,uint256)': FunctionFragment;
    'enterCatastrophicFailure()': FunctionFragment;
    'getAuthorizedAddresses()': FunctionFragment;
    'grgAssetProxy()': FunctionFragment;
    'isInCatastrophicFailure()': FunctionFragment;
    'owner()': FunctionFragment;
    'removeAuthorizedAddress(address)': FunctionFragment;
    'removeAuthorizedAddressAtIndex(address,uint256)': FunctionFragment;
    'setGrgProxy(address)': FunctionFragment;
    'setStakingProxy(address)': FunctionFragment;
    'stakingProxyAddress()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'withdrawAllFrom(address)': FunctionFragment;
    'withdrawFrom(address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addAuthorizedAddress'
      | 'authorities'
      | 'authorized'
      | 'balanceOf'
      | 'balanceOfGrgVault'
      | 'depositFrom'
      | 'enterCatastrophicFailure'
      | 'getAuthorizedAddresses'
      | 'grgAssetProxy'
      | 'isInCatastrophicFailure'
      | 'owner'
      | 'removeAuthorizedAddress'
      | 'removeAuthorizedAddressAtIndex'
      | 'setGrgProxy'
      | 'setStakingProxy'
      | 'stakingProxyAddress'
      | 'transferOwnership'
      | 'withdrawAllFrom'
      | 'withdrawFrom',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'addAuthorizedAddress', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'authorities', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'authorized', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'balanceOfGrgVault', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'depositFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'enterCatastrophicFailure', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAuthorizedAddresses', values?: undefined): string;
  encodeFunctionData(functionFragment: 'grgAssetProxy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isInCatastrophicFailure', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'removeAuthorizedAddress', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'removeAuthorizedAddressAtIndex',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setGrgProxy', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setStakingProxy', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'stakingProxyAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'withdrawAllFrom', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'withdrawFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'addAuthorizedAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'authorities', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'authorized', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfGrgVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enterCatastrophicFailure', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAuthorizedAddresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grgAssetProxy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isInCatastrophicFailure', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeAuthorizedAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeAuthorizedAddressAtIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGrgProxy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setStakingProxy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakingProxyAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAllFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawFrom', data: BytesLike): Result;

  events: {
    'AuthorizedAddressAdded(address,address)': EventFragment;
    'AuthorizedAddressRemoved(address,address)': EventFragment;
    'Deposit(address,uint256)': EventFragment;
    'GrgProxySet(address)': EventFragment;
    'InCatastrophicFailureMode(address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'StakingProxySet(address)': EventFragment;
    'Withdraw(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AuthorizedAddressAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AuthorizedAddressRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GrgProxySet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InCatastrophicFailureMode'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StakingProxySet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface AuthorizedAddressAddedEventObject {
  target: string;
  caller: string;
}
export type AuthorizedAddressAddedEvent = TypedEvent<[string, string], AuthorizedAddressAddedEventObject>;

export type AuthorizedAddressAddedEventFilter = TypedEventFilter<AuthorizedAddressAddedEvent>;

export interface AuthorizedAddressRemovedEventObject {
  target: string;
  caller: string;
}
export type AuthorizedAddressRemovedEvent = TypedEvent<[string, string], AuthorizedAddressRemovedEventObject>;

export type AuthorizedAddressRemovedEventFilter = TypedEventFilter<AuthorizedAddressRemovedEvent>;

export interface DepositEventObject {
  staker: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface GrgProxySetEventObject {
  grgProxyAddress: string;
}
export type GrgProxySetEvent = TypedEvent<[string], GrgProxySetEventObject>;

export type GrgProxySetEventFilter = TypedEventFilter<GrgProxySetEvent>;

export interface InCatastrophicFailureModeEventObject {
  sender: string;
}
export type InCatastrophicFailureModeEvent = TypedEvent<[string], InCatastrophicFailureModeEventObject>;

export type InCatastrophicFailureModeEventFilter = TypedEventFilter<InCatastrophicFailureModeEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface StakingProxySetEventObject {
  stakingProxyAddress: string;
}
export type StakingProxySetEvent = TypedEvent<[string], StakingProxySetEventObject>;

export type StakingProxySetEventFilter = TypedEventFilter<StakingProxySetEvent>;

export interface WithdrawEventObject {
  staker: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface GrgVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GrgVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAuthorizedAddress(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    authorities(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    authorized(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    balanceOf(staker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfGrgVault(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositFrom(
      staker: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    enterCatastrophicFailure(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    getAuthorizedAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    grgAssetProxy(overrides?: CallOverrides): Promise<[string]>;

    isInCatastrophicFailure(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeAuthorizedAddress(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeAuthorizedAddressAtIndex(
      target: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setGrgProxy(
      _grgProxyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setStakingProxy(
      _stakingProxyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stakingProxyAddress(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawAllFrom(
      staker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawFrom(
      staker: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  addAuthorizedAddress(
    target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  authorities(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  authorized(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  balanceOf(staker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfGrgVault(overrides?: CallOverrides): Promise<BigNumber>;

  depositFrom(
    staker: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  enterCatastrophicFailure(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  getAuthorizedAddresses(overrides?: CallOverrides): Promise<string[]>;

  grgAssetProxy(overrides?: CallOverrides): Promise<string>;

  isInCatastrophicFailure(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeAuthorizedAddress(
    target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeAuthorizedAddressAtIndex(
    target: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setGrgProxy(
    _grgProxyAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setStakingProxy(
    _stakingProxyAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stakingProxyAddress(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawAllFrom(
    staker: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawFrom(
    staker: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    addAuthorizedAddress(target: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    authorities(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    authorized(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(staker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfGrgVault(overrides?: CallOverrides): Promise<BigNumber>;

    depositFrom(
      staker: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    enterCatastrophicFailure(overrides?: CallOverrides): Promise<void>;

    getAuthorizedAddresses(overrides?: CallOverrides): Promise<string[]>;

    grgAssetProxy(overrides?: CallOverrides): Promise<string>;

    isInCatastrophicFailure(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeAuthorizedAddress(target: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    removeAuthorizedAddressAtIndex(
      target: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setGrgProxy(_grgProxyAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setStakingProxy(_stakingProxyAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    stakingProxyAddress(overrides?: CallOverrides): Promise<string>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    withdrawAllFrom(staker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFrom(
      staker: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'AuthorizedAddressAdded(address,address)'(
      target?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
    ): AuthorizedAddressAddedEventFilter;
    AuthorizedAddressAdded(
      target?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
    ): AuthorizedAddressAddedEventFilter;

    'AuthorizedAddressRemoved(address,address)'(
      target?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
    ): AuthorizedAddressRemovedEventFilter;
    AuthorizedAddressRemoved(
      target?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
    ): AuthorizedAddressRemovedEventFilter;

    'Deposit(address,uint256)'(staker?: PromiseOrValue<string> | null, amount?: null): DepositEventFilter;
    Deposit(staker?: PromiseOrValue<string> | null, amount?: null): DepositEventFilter;

    'GrgProxySet(address)'(grgProxyAddress?: null): GrgProxySetEventFilter;
    GrgProxySet(grgProxyAddress?: null): GrgProxySetEventFilter;

    'InCatastrophicFailureMode(address)'(sender?: null): InCatastrophicFailureModeEventFilter;
    InCatastrophicFailureMode(sender?: null): InCatastrophicFailureModeEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'StakingProxySet(address)'(stakingProxyAddress?: null): StakingProxySetEventFilter;
    StakingProxySet(stakingProxyAddress?: null): StakingProxySetEventFilter;

    'Withdraw(address,uint256)'(staker?: PromiseOrValue<string> | null, amount?: null): WithdrawEventFilter;
    Withdraw(staker?: PromiseOrValue<string> | null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    addAuthorizedAddress(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    authorities(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    authorized(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(staker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfGrgVault(overrides?: CallOverrides): Promise<BigNumber>;

    depositFrom(
      staker: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    enterCatastrophicFailure(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    getAuthorizedAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    grgAssetProxy(overrides?: CallOverrides): Promise<BigNumber>;

    isInCatastrophicFailure(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeAuthorizedAddress(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeAuthorizedAddressAtIndex(
      target: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setGrgProxy(
      _grgProxyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setStakingProxy(
      _stakingProxyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stakingProxyAddress(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawAllFrom(
      staker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawFrom(
      staker: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAuthorizedAddress(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    authorities(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authorized(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(staker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfGrgVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositFrom(
      staker: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    enterCatastrophicFailure(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    getAuthorizedAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grgAssetProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInCatastrophicFailure(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAuthorizedAddress(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeAuthorizedAddressAtIndex(
      target: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setGrgProxy(
      _grgProxyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setStakingProxy(
      _stakingProxyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stakingProxyAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawAllFrom(
      staker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawFrom(
      staker: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
