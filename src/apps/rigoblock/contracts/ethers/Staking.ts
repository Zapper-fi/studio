/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace IStructs {
  export type StoredBalanceStruct = {
    currentEpoch: PromiseOrValue<BigNumberish>;
    currentEpochBalance: PromiseOrValue<BigNumberish>;
    nextEpochBalance: PromiseOrValue<BigNumberish>;
  };

  export type StoredBalanceStructOutput = [BigNumber, BigNumber, BigNumber] & {
    currentEpoch: BigNumber;
    currentEpochBalance: BigNumber;
    nextEpochBalance: BigNumber;
  };

  export type PoolStruct = {
    operator: PromiseOrValue<string>;
    stakingPal: PromiseOrValue<string>;
    operatorShare: PromiseOrValue<BigNumberish>;
    stakingPalShare: PromiseOrValue<BigNumberish>;
  };

  export type PoolStructOutput = [string, string, number, number] & {
    operator: string;
    stakingPal: string;
    operatorShare: number;
    stakingPalShare: number;
  };

  export type PoolStatsStruct = {
    feesCollected: PromiseOrValue<BigNumberish>;
    weightedStake: PromiseOrValue<BigNumberish>;
    membersStake: PromiseOrValue<BigNumberish>;
  };

  export type PoolStatsStructOutput = [BigNumber, BigNumber, BigNumber] & {
    feesCollected: BigNumber;
    weightedStake: BigNumber;
    membersStake: BigNumber;
  };

  export type StakeInfoStruct = {
    status: PromiseOrValue<BigNumberish>;
    poolId: PromiseOrValue<BytesLike>;
  };

  export type StakeInfoStructOutput = [number, string] & {
    status: number;
    poolId: string;
  };
}

export interface StakingInterface extends utils.Interface {
  functions: {
    'addAuthorizedAddress(address)': FunctionFragment;
    'addPopAddress(address)': FunctionFragment;
    'aggregatedStatsByEpoch(uint256)': FunctionFragment;
    'authorities(uint256)': FunctionFragment;
    'authorized(address)': FunctionFragment;
    'cobbDouglasAlphaDenominator()': FunctionFragment;
    'cobbDouglasAlphaNumerator()': FunctionFragment;
    'computeRewardBalanceOfDelegator(bytes32,address)': FunctionFragment;
    'computeRewardBalanceOfOperator(bytes32)': FunctionFragment;
    'createStakingPool(address)': FunctionFragment;
    'creditPopReward(address,uint256)': FunctionFragment;
    'currentEpoch()': FunctionFragment;
    'currentEpochStartTimeInSeconds()': FunctionFragment;
    'decreaseStakingPoolOperatorShare(bytes32,uint32)': FunctionFragment;
    'endEpoch()': FunctionFragment;
    'epochDurationInSeconds()': FunctionFragment;
    'finalizePool(bytes32)': FunctionFragment;
    'getAuthorizedAddresses()': FunctionFragment;
    'getCurrentEpochEarliestEndTimeInSeconds()': FunctionFragment;
    'getGlobalStakeByStatus(uint8)': FunctionFragment;
    'getGrgContract()': FunctionFragment;
    'getGrgVault()': FunctionFragment;
    'getOwnerStakeByStatus(address,uint8)': FunctionFragment;
    'getParams()': FunctionFragment;
    'getPoolRegistry()': FunctionFragment;
    'getStakeDelegatedToPoolByOwner(address,bytes32)': FunctionFragment;
    'getStakingPool(bytes32)': FunctionFragment;
    'getStakingPoolStatsThisEpoch(bytes32)': FunctionFragment;
    'getTotalStake(address)': FunctionFragment;
    'getTotalStakeDelegatedToPool(bytes32)': FunctionFragment;
    'grgReservedForPoolRewards()': FunctionFragment;
    'init()': FunctionFragment;
    'minimumPoolStake()': FunctionFragment;
    'moveStake((uint8,bytes32),(uint8,bytes32),uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'poolIdByRbPoolAccount(address)': FunctionFragment;
    'poolStatsByEpoch(bytes32,uint256)': FunctionFragment;
    'removeAuthorizedAddress(address)': FunctionFragment;
    'removeAuthorizedAddressAtIndex(address,uint256)': FunctionFragment;
    'removePopAddress(address)': FunctionFragment;
    'rewardDelegatedStakeWeight()': FunctionFragment;
    'rewardsByPoolId(bytes32)': FunctionFragment;
    'setParams(uint256,uint32,uint256,uint32,uint32)': FunctionFragment;
    'setStakingPalAddress(bytes32,address)': FunctionFragment;
    'stake(uint256)': FunctionFragment;
    'stakingContract()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unstake(uint256)': FunctionFragment;
    'validPops(address)': FunctionFragment;
    'withdrawDelegatorRewards(bytes32)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addAuthorizedAddress'
      | 'addPopAddress'
      | 'aggregatedStatsByEpoch'
      | 'authorities'
      | 'authorized'
      | 'cobbDouglasAlphaDenominator'
      | 'cobbDouglasAlphaNumerator'
      | 'computeRewardBalanceOfDelegator'
      | 'computeRewardBalanceOfOperator'
      | 'createStakingPool'
      | 'creditPopReward'
      | 'currentEpoch'
      | 'currentEpochStartTimeInSeconds'
      | 'decreaseStakingPoolOperatorShare'
      | 'endEpoch'
      | 'epochDurationInSeconds'
      | 'finalizePool'
      | 'getAuthorizedAddresses'
      | 'getCurrentEpochEarliestEndTimeInSeconds'
      | 'getGlobalStakeByStatus'
      | 'getGrgContract'
      | 'getGrgVault'
      | 'getOwnerStakeByStatus'
      | 'getParams'
      | 'getPoolRegistry'
      | 'getStakeDelegatedToPoolByOwner'
      | 'getStakingPool'
      | 'getStakingPoolStatsThisEpoch'
      | 'getTotalStake'
      | 'getTotalStakeDelegatedToPool'
      | 'grgReservedForPoolRewards'
      | 'init'
      | 'minimumPoolStake'
      | 'moveStake'
      | 'owner'
      | 'poolIdByRbPoolAccount'
      | 'poolStatsByEpoch'
      | 'removeAuthorizedAddress'
      | 'removeAuthorizedAddressAtIndex'
      | 'removePopAddress'
      | 'rewardDelegatedStakeWeight'
      | 'rewardsByPoolId'
      | 'setParams'
      | 'setStakingPalAddress'
      | 'stake'
      | 'stakingContract'
      | 'transferOwnership'
      | 'unstake'
      | 'validPops'
      | 'withdrawDelegatorRewards',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'addAuthorizedAddress', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'addPopAddress', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'aggregatedStatsByEpoch', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'authorities', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'authorized', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'cobbDouglasAlphaDenominator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'cobbDouglasAlphaNumerator', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'computeRewardBalanceOfDelegator',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'computeRewardBalanceOfOperator', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'createStakingPool', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'creditPopReward',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'currentEpoch', values?: undefined): string;
  encodeFunctionData(functionFragment: 'currentEpochStartTimeInSeconds', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseStakingPoolOperatorShare',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'endEpoch', values?: undefined): string;
  encodeFunctionData(functionFragment: 'epochDurationInSeconds', values?: undefined): string;
  encodeFunctionData(functionFragment: 'finalizePool', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'getAuthorizedAddresses', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getCurrentEpochEarliestEndTimeInSeconds', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getGlobalStakeByStatus', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getGrgContract', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getGrgVault', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getOwnerStakeByStatus',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getParams', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPoolRegistry', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getStakeDelegatedToPoolByOwner',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'getStakingPool', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'getStakingPoolStatsThisEpoch', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'getTotalStake', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getTotalStakeDelegatedToPool', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'grgReservedForPoolRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'init', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minimumPoolStake', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'moveStake',
    values: [IStructs.StakeInfoStruct, IStructs.StakeInfoStruct, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolIdByRbPoolAccount', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'poolStatsByEpoch',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'removeAuthorizedAddress', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'removeAuthorizedAddressAtIndex',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'removePopAddress', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'rewardDelegatedStakeWeight', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardsByPoolId', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'setParams',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'setStakingPalAddress',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'stake', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'stakingContract', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'unstake', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'validPops', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'withdrawDelegatorRewards', values: [PromiseOrValue<BytesLike>]): string;

  decodeFunctionResult(functionFragment: 'addAuthorizedAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addPopAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'aggregatedStatsByEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'authorities', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'authorized', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cobbDouglasAlphaDenominator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cobbDouglasAlphaNumerator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'computeRewardBalanceOfDelegator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'computeRewardBalanceOfOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createStakingPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'creditPopReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentEpochStartTimeInSeconds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseStakingPoolOperatorShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'endEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'epochDurationInSeconds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'finalizePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAuthorizedAddresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCurrentEpochEarliestEndTimeInSeconds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getGlobalStakeByStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getGrgContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getGrgVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getOwnerStakeByStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getParams', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStakeDelegatedToPoolByOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStakingPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStakingPoolStatsThisEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalStakeDelegatedToPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grgReservedForPoolRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'init', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minimumPoolStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'moveStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolIdByRbPoolAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolStatsByEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeAuthorizedAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeAuthorizedAddressAtIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removePopAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardDelegatedStakeWeight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsByPoolId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setParams', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setStakingPalAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakingContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'validPops', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawDelegatorRewards', data: BytesLike): Result;

  events: {
    'AuthorizedAddressAdded(address,address)': EventFragment;
    'AuthorizedAddressRemoved(address,address)': EventFragment;
    'CatchStringEvent(string)': EventFragment;
    'EpochEnded(uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'EpochFinalized(uint256,uint256,uint256)': EventFragment;
    'GrgMintEvent(uint256)': EventFragment;
    'MoveStake(address,uint256,uint8,bytes32,uint8,bytes32)': EventFragment;
    'OperatorShareDecreased(bytes32,uint32,uint32)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'ParamsSet(uint256,uint32,uint256,uint256,uint256)': EventFragment;
    'PopAdded(address)': EventFragment;
    'PopRemoved(address)': EventFragment;
    'RbPoolStakingPoolSet(address,bytes32)': EventFragment;
    'ReturnDataEvent(bytes)': EventFragment;
    'RewardsPaid(uint256,bytes32,uint256,uint256)': EventFragment;
    'Stake(address,uint256)': EventFragment;
    'StakingPoolCreated(bytes32,address,uint32)': EventFragment;
    'StakingPoolEarnedRewardsInEpoch(uint256,bytes32)': EventFragment;
    'Unstake(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AuthorizedAddressAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AuthorizedAddressRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CatchStringEvent'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EpochEnded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EpochFinalized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GrgMintEvent'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MoveStake'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OperatorShareDecreased'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ParamsSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PopAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PopRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RbPoolStakingPoolSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReturnDataEvent'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardsPaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Stake'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StakingPoolCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StakingPoolEarnedRewardsInEpoch'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unstake'): EventFragment;
}

export interface AuthorizedAddressAddedEventObject {
  target: string;
  caller: string;
}
export type AuthorizedAddressAddedEvent = TypedEvent<[string, string], AuthorizedAddressAddedEventObject>;

export type AuthorizedAddressAddedEventFilter = TypedEventFilter<AuthorizedAddressAddedEvent>;

export interface AuthorizedAddressRemovedEventObject {
  target: string;
  caller: string;
}
export type AuthorizedAddressRemovedEvent = TypedEvent<[string, string], AuthorizedAddressRemovedEventObject>;

export type AuthorizedAddressRemovedEventFilter = TypedEventFilter<AuthorizedAddressRemovedEvent>;

export interface CatchStringEventEventObject {
  reason: string;
}
export type CatchStringEventEvent = TypedEvent<[string], CatchStringEventEventObject>;

export type CatchStringEventEventFilter = TypedEventFilter<CatchStringEventEvent>;

export interface EpochEndedEventObject {
  epoch: BigNumber;
  numPoolsToFinalize: BigNumber;
  rewardsAvailable: BigNumber;
  totalFeesCollected: BigNumber;
  totalWeightedStake: BigNumber;
}
export type EpochEndedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  EpochEndedEventObject
>;

export type EpochEndedEventFilter = TypedEventFilter<EpochEndedEvent>;

export interface EpochFinalizedEventObject {
  epoch: BigNumber;
  rewardsPaid: BigNumber;
  rewardsRemaining: BigNumber;
}
export type EpochFinalizedEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], EpochFinalizedEventObject>;

export type EpochFinalizedEventFilter = TypedEventFilter<EpochFinalizedEvent>;

export interface GrgMintEventEventObject {
  grgAmount: BigNumber;
}
export type GrgMintEventEvent = TypedEvent<[BigNumber], GrgMintEventEventObject>;

export type GrgMintEventEventFilter = TypedEventFilter<GrgMintEventEvent>;

export interface MoveStakeEventObject {
  staker: string;
  amount: BigNumber;
  fromStatus: number;
  fromPool: string;
  toStatus: number;
  toPool: string;
}
export type MoveStakeEvent = TypedEvent<[string, BigNumber, number, string, number, string], MoveStakeEventObject>;

export type MoveStakeEventFilter = TypedEventFilter<MoveStakeEvent>;

export interface OperatorShareDecreasedEventObject {
  poolId: string;
  oldOperatorShare: number;
  newOperatorShare: number;
}
export type OperatorShareDecreasedEvent = TypedEvent<[string, number, number], OperatorShareDecreasedEventObject>;

export type OperatorShareDecreasedEventFilter = TypedEventFilter<OperatorShareDecreasedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface ParamsSetEventObject {
  epochDurationInSeconds: BigNumber;
  rewardDelegatedStakeWeight: number;
  minimumPoolStake: BigNumber;
  cobbDouglasAlphaNumerator: BigNumber;
  cobbDouglasAlphaDenominator: BigNumber;
}
export type ParamsSetEvent = TypedEvent<[BigNumber, number, BigNumber, BigNumber, BigNumber], ParamsSetEventObject>;

export type ParamsSetEventFilter = TypedEventFilter<ParamsSetEvent>;

export interface PopAddedEventObject {
  exchangeAddress: string;
}
export type PopAddedEvent = TypedEvent<[string], PopAddedEventObject>;

export type PopAddedEventFilter = TypedEventFilter<PopAddedEvent>;

export interface PopRemovedEventObject {
  exchangeAddress: string;
}
export type PopRemovedEvent = TypedEvent<[string], PopRemovedEventObject>;

export type PopRemovedEventFilter = TypedEventFilter<PopRemovedEvent>;

export interface RbPoolStakingPoolSetEventObject {
  rbPoolAddress: string;
  poolId: string;
}
export type RbPoolStakingPoolSetEvent = TypedEvent<[string, string], RbPoolStakingPoolSetEventObject>;

export type RbPoolStakingPoolSetEventFilter = TypedEventFilter<RbPoolStakingPoolSetEvent>;

export interface ReturnDataEventEventObject {
  reason: string;
}
export type ReturnDataEventEvent = TypedEvent<[string], ReturnDataEventEventObject>;

export type ReturnDataEventEventFilter = TypedEventFilter<ReturnDataEventEvent>;

export interface RewardsPaidEventObject {
  epoch: BigNumber;
  poolId: string;
  operatorReward: BigNumber;
  membersReward: BigNumber;
}
export type RewardsPaidEvent = TypedEvent<[BigNumber, string, BigNumber, BigNumber], RewardsPaidEventObject>;

export type RewardsPaidEventFilter = TypedEventFilter<RewardsPaidEvent>;

export interface StakeEventObject {
  staker: string;
  amount: BigNumber;
}
export type StakeEvent = TypedEvent<[string, BigNumber], StakeEventObject>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface StakingPoolCreatedEventObject {
  poolId: string;
  operator: string;
  operatorShare: number;
}
export type StakingPoolCreatedEvent = TypedEvent<[string, string, number], StakingPoolCreatedEventObject>;

export type StakingPoolCreatedEventFilter = TypedEventFilter<StakingPoolCreatedEvent>;

export interface StakingPoolEarnedRewardsInEpochEventObject {
  epoch: BigNumber;
  poolId: string;
}
export type StakingPoolEarnedRewardsInEpochEvent = TypedEvent<
  [BigNumber, string],
  StakingPoolEarnedRewardsInEpochEventObject
>;

export type StakingPoolEarnedRewardsInEpochEventFilter = TypedEventFilter<StakingPoolEarnedRewardsInEpochEvent>;

export interface UnstakeEventObject {
  staker: string;
  amount: BigNumber;
}
export type UnstakeEvent = TypedEvent<[string, BigNumber], UnstakeEventObject>;

export type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;

export interface Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAuthorizedAddress(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addPopAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    aggregatedStatsByEpoch(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardsAvailable: BigNumber;
        numPoolsToFinalize: BigNumber;
        totalFeesCollected: BigNumber;
        totalWeightedStake: BigNumber;
        totalRewardsFinalized: BigNumber;
      }
    >;

    authorities(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    authorized(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    cobbDouglasAlphaDenominator(overrides?: CallOverrides): Promise<[number]>;

    cobbDouglasAlphaNumerator(overrides?: CallOverrides): Promise<[number]>;

    computeRewardBalanceOfDelegator(
      poolId: PromiseOrValue<BytesLike>,
      member: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { reward: BigNumber }>;

    computeRewardBalanceOfOperator(
      poolId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { reward: BigNumber }>;

    createStakingPool(
      rigoblockPoolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    creditPopReward(
      poolAccount: PromiseOrValue<string>,
      popReward: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentEpochStartTimeInSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    decreaseStakingPoolOperatorShare(
      poolId: PromiseOrValue<BytesLike>,
      newOperatorShare: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    endEpoch(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    epochDurationInSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    finalizePool(
      poolId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getAuthorizedAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    getCurrentEpochEarliestEndTimeInSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    getGlobalStakeByStatus(
      stakeStatus: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [IStructs.StoredBalanceStructOutput] & {
        balance: IStructs.StoredBalanceStructOutput;
      }
    >;

    getGrgContract(overrides?: CallOverrides): Promise<[string]>;

    getGrgVault(overrides?: CallOverrides): Promise<[string]>;

    getOwnerStakeByStatus(
      staker: PromiseOrValue<string>,
      stakeStatus: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [IStructs.StoredBalanceStructOutput] & {
        balance: IStructs.StoredBalanceStructOutput;
      }
    >;

    getParams(overrides?: CallOverrides): Promise<
      [BigNumber, number, BigNumber, number, number] & {
        _epochDurationInSeconds: BigNumber;
        _rewardDelegatedStakeWeight: number;
        _minimumPoolStake: BigNumber;
        _cobbDouglasAlphaNumerator: number;
        _cobbDouglasAlphaDenominator: number;
      }
    >;

    getPoolRegistry(overrides?: CallOverrides): Promise<[string]>;

    getStakeDelegatedToPoolByOwner(
      staker: PromiseOrValue<string>,
      poolId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [IStructs.StoredBalanceStructOutput] & {
        balance: IStructs.StoredBalanceStructOutput;
      }
    >;

    getStakingPool(poolId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[IStructs.PoolStructOutput]>;

    getStakingPoolStatsThisEpoch(
      poolId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[IStructs.PoolStatsStructOutput]>;

    getTotalStake(staker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalStakeDelegatedToPool(
      poolId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [IStructs.StoredBalanceStructOutput] & {
        balance: IStructs.StoredBalanceStructOutput;
      }
    >;

    grgReservedForPoolRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    init(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    minimumPoolStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    moveStake(
      from: IStructs.StakeInfoStruct,
      to: IStructs.StakeInfoStruct,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolIdByRbPoolAccount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    poolStatsByEpoch(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        feesCollected: BigNumber;
        weightedStake: BigNumber;
        membersStake: BigNumber;
      }
    >;

    removeAuthorizedAddress(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeAuthorizedAddressAtIndex(
      target: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removePopAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    rewardDelegatedStakeWeight(overrides?: CallOverrides): Promise<[number]>;

    rewardsByPoolId(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;

    setParams(
      _epochDurationInSeconds: PromiseOrValue<BigNumberish>,
      _rewardDelegatedStakeWeight: PromiseOrValue<BigNumberish>,
      _minimumPoolStake: PromiseOrValue<BigNumberish>,
      _cobbDouglasAlphaNumerator: PromiseOrValue<BigNumberish>,
      _cobbDouglasAlphaDenominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setStakingPalAddress(
      poolId: PromiseOrValue<BytesLike>,
      newStakingPalAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stakingContract(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unstake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    validPops(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    withdrawDelegatorRewards(
      poolId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  addAuthorizedAddress(
    target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addPopAddress(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  aggregatedStatsByEpoch(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      rewardsAvailable: BigNumber;
      numPoolsToFinalize: BigNumber;
      totalFeesCollected: BigNumber;
      totalWeightedStake: BigNumber;
      totalRewardsFinalized: BigNumber;
    }
  >;

  authorities(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  authorized(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  cobbDouglasAlphaDenominator(overrides?: CallOverrides): Promise<number>;

  cobbDouglasAlphaNumerator(overrides?: CallOverrides): Promise<number>;

  computeRewardBalanceOfDelegator(
    poolId: PromiseOrValue<BytesLike>,
    member: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  computeRewardBalanceOfOperator(poolId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

  createStakingPool(
    rigoblockPoolAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  creditPopReward(
    poolAccount: PromiseOrValue<string>,
    popReward: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  currentEpochStartTimeInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  decreaseStakingPoolOperatorShare(
    poolId: PromiseOrValue<BytesLike>,
    newOperatorShare: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  endEpoch(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  epochDurationInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  finalizePool(
    poolId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getAuthorizedAddresses(overrides?: CallOverrides): Promise<string[]>;

  getCurrentEpochEarliestEndTimeInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  getGlobalStakeByStatus(
    stakeStatus: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<IStructs.StoredBalanceStructOutput>;

  getGrgContract(overrides?: CallOverrides): Promise<string>;

  getGrgVault(overrides?: CallOverrides): Promise<string>;

  getOwnerStakeByStatus(
    staker: PromiseOrValue<string>,
    stakeStatus: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<IStructs.StoredBalanceStructOutput>;

  getParams(overrides?: CallOverrides): Promise<
    [BigNumber, number, BigNumber, number, number] & {
      _epochDurationInSeconds: BigNumber;
      _rewardDelegatedStakeWeight: number;
      _minimumPoolStake: BigNumber;
      _cobbDouglasAlphaNumerator: number;
      _cobbDouglasAlphaDenominator: number;
    }
  >;

  getPoolRegistry(overrides?: CallOverrides): Promise<string>;

  getStakeDelegatedToPoolByOwner(
    staker: PromiseOrValue<string>,
    poolId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<IStructs.StoredBalanceStructOutput>;

  getStakingPool(poolId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<IStructs.PoolStructOutput>;

  getStakingPoolStatsThisEpoch(
    poolId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<IStructs.PoolStatsStructOutput>;

  getTotalStake(staker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getTotalStakeDelegatedToPool(
    poolId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<IStructs.StoredBalanceStructOutput>;

  grgReservedForPoolRewards(overrides?: CallOverrides): Promise<BigNumber>;

  init(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  minimumPoolStake(overrides?: CallOverrides): Promise<BigNumber>;

  moveStake(
    from: IStructs.StakeInfoStruct,
    to: IStructs.StakeInfoStruct,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolIdByRbPoolAccount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  poolStatsByEpoch(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      feesCollected: BigNumber;
      weightedStake: BigNumber;
      membersStake: BigNumber;
    }
  >;

  removeAuthorizedAddress(
    target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeAuthorizedAddressAtIndex(
    target: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removePopAddress(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  rewardDelegatedStakeWeight(overrides?: CallOverrides): Promise<number>;

  rewardsByPoolId(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

  setParams(
    _epochDurationInSeconds: PromiseOrValue<BigNumberish>,
    _rewardDelegatedStakeWeight: PromiseOrValue<BigNumberish>,
    _minimumPoolStake: PromiseOrValue<BigNumberish>,
    _cobbDouglasAlphaNumerator: PromiseOrValue<BigNumberish>,
    _cobbDouglasAlphaDenominator: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setStakingPalAddress(
    poolId: PromiseOrValue<BytesLike>,
    newStakingPalAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stake(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stakingContract(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unstake(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  validPops(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  withdrawDelegatorRewards(
    poolId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    addAuthorizedAddress(target: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    addPopAddress(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    aggregatedStatsByEpoch(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardsAvailable: BigNumber;
        numPoolsToFinalize: BigNumber;
        totalFeesCollected: BigNumber;
        totalWeightedStake: BigNumber;
        totalRewardsFinalized: BigNumber;
      }
    >;

    authorities(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    authorized(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    cobbDouglasAlphaDenominator(overrides?: CallOverrides): Promise<number>;

    cobbDouglasAlphaNumerator(overrides?: CallOverrides): Promise<number>;

    computeRewardBalanceOfDelegator(
      poolId: PromiseOrValue<BytesLike>,
      member: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    computeRewardBalanceOfOperator(poolId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    createStakingPool(rigoblockPoolAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    creditPopReward(
      poolAccount: PromiseOrValue<string>,
      popReward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpochStartTimeInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseStakingPoolOperatorShare(
      poolId: PromiseOrValue<BytesLike>,
      newOperatorShare: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    endEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    epochDurationInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    finalizePool(poolId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    getAuthorizedAddresses(overrides?: CallOverrides): Promise<string[]>;

    getCurrentEpochEarliestEndTimeInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    getGlobalStakeByStatus(
      stakeStatus: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<IStructs.StoredBalanceStructOutput>;

    getGrgContract(overrides?: CallOverrides): Promise<string>;

    getGrgVault(overrides?: CallOverrides): Promise<string>;

    getOwnerStakeByStatus(
      staker: PromiseOrValue<string>,
      stakeStatus: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<IStructs.StoredBalanceStructOutput>;

    getParams(overrides?: CallOverrides): Promise<
      [BigNumber, number, BigNumber, number, number] & {
        _epochDurationInSeconds: BigNumber;
        _rewardDelegatedStakeWeight: number;
        _minimumPoolStake: BigNumber;
        _cobbDouglasAlphaNumerator: number;
        _cobbDouglasAlphaDenominator: number;
      }
    >;

    getPoolRegistry(overrides?: CallOverrides): Promise<string>;

    getStakeDelegatedToPoolByOwner(
      staker: PromiseOrValue<string>,
      poolId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<IStructs.StoredBalanceStructOutput>;

    getStakingPool(poolId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<IStructs.PoolStructOutput>;

    getStakingPoolStatsThisEpoch(
      poolId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<IStructs.PoolStatsStructOutput>;

    getTotalStake(staker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalStakeDelegatedToPool(
      poolId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<IStructs.StoredBalanceStructOutput>;

    grgReservedForPoolRewards(overrides?: CallOverrides): Promise<BigNumber>;

    init(overrides?: CallOverrides): Promise<void>;

    minimumPoolStake(overrides?: CallOverrides): Promise<BigNumber>;

    moveStake(
      from: IStructs.StakeInfoStruct,
      to: IStructs.StakeInfoStruct,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolIdByRbPoolAccount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    poolStatsByEpoch(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        feesCollected: BigNumber;
        weightedStake: BigNumber;
        membersStake: BigNumber;
      }
    >;

    removeAuthorizedAddress(target: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    removeAuthorizedAddressAtIndex(
      target: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    removePopAddress(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    rewardDelegatedStakeWeight(overrides?: CallOverrides): Promise<number>;

    rewardsByPoolId(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    setParams(
      _epochDurationInSeconds: PromiseOrValue<BigNumberish>,
      _rewardDelegatedStakeWeight: PromiseOrValue<BigNumberish>,
      _minimumPoolStake: PromiseOrValue<BigNumberish>,
      _cobbDouglasAlphaNumerator: PromiseOrValue<BigNumberish>,
      _cobbDouglasAlphaDenominator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setStakingPalAddress(
      poolId: PromiseOrValue<BytesLike>,
      newStakingPalAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    stake(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    stakingContract(overrides?: CallOverrides): Promise<string>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    unstake(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    validPops(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    withdrawDelegatorRewards(poolId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'AuthorizedAddressAdded(address,address)'(
      target?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
    ): AuthorizedAddressAddedEventFilter;
    AuthorizedAddressAdded(
      target?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
    ): AuthorizedAddressAddedEventFilter;

    'AuthorizedAddressRemoved(address,address)'(
      target?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
    ): AuthorizedAddressRemovedEventFilter;
    AuthorizedAddressRemoved(
      target?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
    ): AuthorizedAddressRemovedEventFilter;

    'CatchStringEvent(string)'(reason?: null): CatchStringEventEventFilter;
    CatchStringEvent(reason?: null): CatchStringEventEventFilter;

    'EpochEnded(uint256,uint256,uint256,uint256,uint256)'(
      epoch?: PromiseOrValue<BigNumberish> | null,
      numPoolsToFinalize?: null,
      rewardsAvailable?: null,
      totalFeesCollected?: null,
      totalWeightedStake?: null,
    ): EpochEndedEventFilter;
    EpochEnded(
      epoch?: PromiseOrValue<BigNumberish> | null,
      numPoolsToFinalize?: null,
      rewardsAvailable?: null,
      totalFeesCollected?: null,
      totalWeightedStake?: null,
    ): EpochEndedEventFilter;

    'EpochFinalized(uint256,uint256,uint256)'(
      epoch?: PromiseOrValue<BigNumberish> | null,
      rewardsPaid?: null,
      rewardsRemaining?: null,
    ): EpochFinalizedEventFilter;
    EpochFinalized(
      epoch?: PromiseOrValue<BigNumberish> | null,
      rewardsPaid?: null,
      rewardsRemaining?: null,
    ): EpochFinalizedEventFilter;

    'GrgMintEvent(uint256)'(grgAmount?: null): GrgMintEventEventFilter;
    GrgMintEvent(grgAmount?: null): GrgMintEventEventFilter;

    'MoveStake(address,uint256,uint8,bytes32,uint8,bytes32)'(
      staker?: PromiseOrValue<string> | null,
      amount?: null,
      fromStatus?: null,
      fromPool?: PromiseOrValue<BytesLike> | null,
      toStatus?: null,
      toPool?: PromiseOrValue<BytesLike> | null,
    ): MoveStakeEventFilter;
    MoveStake(
      staker?: PromiseOrValue<string> | null,
      amount?: null,
      fromStatus?: null,
      fromPool?: PromiseOrValue<BytesLike> | null,
      toStatus?: null,
      toPool?: PromiseOrValue<BytesLike> | null,
    ): MoveStakeEventFilter;

    'OperatorShareDecreased(bytes32,uint32,uint32)'(
      poolId?: PromiseOrValue<BytesLike> | null,
      oldOperatorShare?: null,
      newOperatorShare?: null,
    ): OperatorShareDecreasedEventFilter;
    OperatorShareDecreased(
      poolId?: PromiseOrValue<BytesLike> | null,
      oldOperatorShare?: null,
      newOperatorShare?: null,
    ): OperatorShareDecreasedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'ParamsSet(uint256,uint32,uint256,uint256,uint256)'(
      epochDurationInSeconds?: null,
      rewardDelegatedStakeWeight?: null,
      minimumPoolStake?: null,
      cobbDouglasAlphaNumerator?: null,
      cobbDouglasAlphaDenominator?: null,
    ): ParamsSetEventFilter;
    ParamsSet(
      epochDurationInSeconds?: null,
      rewardDelegatedStakeWeight?: null,
      minimumPoolStake?: null,
      cobbDouglasAlphaNumerator?: null,
      cobbDouglasAlphaDenominator?: null,
    ): ParamsSetEventFilter;

    'PopAdded(address)'(exchangeAddress?: null): PopAddedEventFilter;
    PopAdded(exchangeAddress?: null): PopAddedEventFilter;

    'PopRemoved(address)'(exchangeAddress?: null): PopRemovedEventFilter;
    PopRemoved(exchangeAddress?: null): PopRemovedEventFilter;

    'RbPoolStakingPoolSet(address,bytes32)'(
      rbPoolAddress?: PromiseOrValue<string> | null,
      poolId?: PromiseOrValue<BytesLike> | null,
    ): RbPoolStakingPoolSetEventFilter;
    RbPoolStakingPoolSet(
      rbPoolAddress?: PromiseOrValue<string> | null,
      poolId?: PromiseOrValue<BytesLike> | null,
    ): RbPoolStakingPoolSetEventFilter;

    'ReturnDataEvent(bytes)'(reason?: null): ReturnDataEventEventFilter;
    ReturnDataEvent(reason?: null): ReturnDataEventEventFilter;

    'RewardsPaid(uint256,bytes32,uint256,uint256)'(
      epoch?: PromiseOrValue<BigNumberish> | null,
      poolId?: PromiseOrValue<BytesLike> | null,
      operatorReward?: null,
      membersReward?: null,
    ): RewardsPaidEventFilter;
    RewardsPaid(
      epoch?: PromiseOrValue<BigNumberish> | null,
      poolId?: PromiseOrValue<BytesLike> | null,
      operatorReward?: null,
      membersReward?: null,
    ): RewardsPaidEventFilter;

    'Stake(address,uint256)'(staker?: PromiseOrValue<string> | null, amount?: null): StakeEventFilter;
    Stake(staker?: PromiseOrValue<string> | null, amount?: null): StakeEventFilter;

    'StakingPoolCreated(bytes32,address,uint32)'(
      poolId?: null,
      operator?: null,
      operatorShare?: null,
    ): StakingPoolCreatedEventFilter;
    StakingPoolCreated(poolId?: null, operator?: null, operatorShare?: null): StakingPoolCreatedEventFilter;

    'StakingPoolEarnedRewardsInEpoch(uint256,bytes32)'(
      epoch?: PromiseOrValue<BigNumberish> | null,
      poolId?: PromiseOrValue<BytesLike> | null,
    ): StakingPoolEarnedRewardsInEpochEventFilter;
    StakingPoolEarnedRewardsInEpoch(
      epoch?: PromiseOrValue<BigNumberish> | null,
      poolId?: PromiseOrValue<BytesLike> | null,
    ): StakingPoolEarnedRewardsInEpochEventFilter;

    'Unstake(address,uint256)'(staker?: PromiseOrValue<string> | null, amount?: null): UnstakeEventFilter;
    Unstake(staker?: PromiseOrValue<string> | null, amount?: null): UnstakeEventFilter;
  };

  estimateGas: {
    addAuthorizedAddress(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addPopAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    aggregatedStatsByEpoch(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    authorities(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    authorized(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    cobbDouglasAlphaDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    cobbDouglasAlphaNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    computeRewardBalanceOfDelegator(
      poolId: PromiseOrValue<BytesLike>,
      member: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    computeRewardBalanceOfOperator(poolId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    createStakingPool(
      rigoblockPoolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    creditPopReward(
      poolAccount: PromiseOrValue<string>,
      popReward: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpochStartTimeInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseStakingPoolOperatorShare(
      poolId: PromiseOrValue<BytesLike>,
      newOperatorShare: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    endEpoch(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    epochDurationInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    finalizePool(
      poolId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getAuthorizedAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentEpochEarliestEndTimeInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    getGlobalStakeByStatus(stakeStatus: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getGrgContract(overrides?: CallOverrides): Promise<BigNumber>;

    getGrgVault(overrides?: CallOverrides): Promise<BigNumber>;

    getOwnerStakeByStatus(
      staker: PromiseOrValue<string>,
      stakeStatus: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getParams(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeDelegatedToPoolByOwner(
      staker: PromiseOrValue<string>,
      poolId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getStakingPool(poolId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getStakingPoolStatsThisEpoch(poolId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalStake(staker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalStakeDelegatedToPool(poolId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    grgReservedForPoolRewards(overrides?: CallOverrides): Promise<BigNumber>;

    init(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    minimumPoolStake(overrides?: CallOverrides): Promise<BigNumber>;

    moveStake(
      from: IStructs.StakeInfoStruct,
      to: IStructs.StakeInfoStruct,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolIdByRbPoolAccount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    poolStatsByEpoch(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    removeAuthorizedAddress(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeAuthorizedAddressAtIndex(
      target: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removePopAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    rewardDelegatedStakeWeight(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsByPoolId(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    setParams(
      _epochDurationInSeconds: PromiseOrValue<BigNumberish>,
      _rewardDelegatedStakeWeight: PromiseOrValue<BigNumberish>,
      _minimumPoolStake: PromiseOrValue<BigNumberish>,
      _cobbDouglasAlphaNumerator: PromiseOrValue<BigNumberish>,
      _cobbDouglasAlphaDenominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setStakingPalAddress(
      poolId: PromiseOrValue<BytesLike>,
      newStakingPalAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stakingContract(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unstake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    validPops(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawDelegatorRewards(
      poolId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAuthorizedAddress(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addPopAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    aggregatedStatsByEpoch(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    authorities(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authorized(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cobbDouglasAlphaDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cobbDouglasAlphaNumerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    computeRewardBalanceOfDelegator(
      poolId: PromiseOrValue<BytesLike>,
      member: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    computeRewardBalanceOfOperator(
      poolId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    createStakingPool(
      rigoblockPoolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    creditPopReward(
      poolAccount: PromiseOrValue<string>,
      popReward: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentEpochStartTimeInSeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseStakingPoolOperatorShare(
      poolId: PromiseOrValue<BytesLike>,
      newOperatorShare: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    endEpoch(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    epochDurationInSeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalizePool(
      poolId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getAuthorizedAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentEpochEarliestEndTimeInSeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGlobalStakeByStatus(
      stakeStatus: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getGrgContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGrgVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwnerStakeByStatus(
      staker: PromiseOrValue<string>,
      stakeStatus: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakeDelegatedToPoolByOwner(
      staker: PromiseOrValue<string>,
      poolId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getStakingPool(poolId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakingPoolStatsThisEpoch(
      poolId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTotalStake(staker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalStakeDelegatedToPool(
      poolId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    grgReservedForPoolRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    minimumPoolStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moveStake(
      from: IStructs.StakeInfoStruct,
      to: IStructs.StakeInfoStruct,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolIdByRbPoolAccount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolStatsByEpoch(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    removeAuthorizedAddress(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeAuthorizedAddressAtIndex(
      target: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removePopAddress(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    rewardDelegatedStakeWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsByPoolId(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setParams(
      _epochDurationInSeconds: PromiseOrValue<BigNumberish>,
      _rewardDelegatedStakeWeight: PromiseOrValue<BigNumberish>,
      _minimumPoolStake: PromiseOrValue<BigNumberish>,
      _cobbDouglasAlphaNumerator: PromiseOrValue<BigNumberish>,
      _cobbDouglasAlphaDenominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setStakingPalAddress(
      poolId: PromiseOrValue<BytesLike>,
      newStakingPalAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stakingContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unstake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    validPops(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawDelegatorRewards(
      poolId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
