/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace IRigoblockV3PoolState {
  export type ReturnedPoolStruct = {
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    decimals: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    baseToken: PromiseOrValue<string>;
  };

  export type ReturnedPoolStructOutput = [string, string, number, string, string] & {
    name: string;
    symbol: string;
    decimals: number;
    owner: string;
    baseToken: string;
  };

  export type PoolParamsStruct = {
    minPeriod: PromiseOrValue<BigNumberish>;
    spread: PromiseOrValue<BigNumberish>;
    transactionFee: PromiseOrValue<BigNumberish>;
    feeCollector: PromiseOrValue<string>;
    kycProvider: PromiseOrValue<string>;
  };

  export type PoolParamsStructOutput = [number, number, number, string, string] & {
    minPeriod: number;
    spread: number;
    transactionFee: number;
    feeCollector: string;
    kycProvider: string;
  };

  export type PoolTokensStruct = {
    unitaryValue: PromiseOrValue<BigNumberish>;
    totalSupply: PromiseOrValue<BigNumberish>;
  };

  export type PoolTokensStructOutput = [BigNumber, BigNumber] & {
    unitaryValue: BigNumber;
    totalSupply: BigNumber;
  };

  export type UserAccountStruct = {
    userBalance: PromiseOrValue<BigNumberish>;
    activation: PromiseOrValue<BigNumberish>;
  };

  export type UserAccountStructOutput = [BigNumber, number] & {
    userBalance: BigNumber;
    activation: number;
  };
}

export interface SmartPoolInterface extends utils.Interface {
  functions: {
    'VERSION()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'authority()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'burn(uint256,uint256)': FunctionFragment;
    'changeFeeCollector(address)': FunctionFragment;
    'changeMinPeriod(uint48)': FunctionFragment;
    'changeSpread(uint16)': FunctionFragment;
    'decimals()': FunctionFragment;
    'getPool()': FunctionFragment;
    'getPoolParams()': FunctionFragment;
    'getPoolStorage()': FunctionFragment;
    'getPoolTokens()': FunctionFragment;
    'getStorageAt(uint256,uint256)': FunctionFragment;
    'getStorageSlotsAt(uint256[])': FunctionFragment;
    'getUserAccount(address)': FunctionFragment;
    'initializePool()': FunctionFragment;
    'mint(address,uint256,uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'owner()': FunctionFragment;
    'setKycProvider(address)': FunctionFragment;
    'setOwner(address)': FunctionFragment;
    'setTransactionFee(uint16)': FunctionFragment;
    'setUnitaryValue(uint256)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'VERSION'
      | 'allowance'
      | 'approve'
      | 'authority'
      | 'balanceOf'
      | 'burn'
      | 'changeFeeCollector'
      | 'changeMinPeriod'
      | 'changeSpread'
      | 'decimals'
      | 'getPool'
      | 'getPoolParams'
      | 'getPoolStorage'
      | 'getPoolTokens'
      | 'getStorageAt'
      | 'getStorageSlotsAt'
      | 'getUserAccount'
      | 'initializePool'
      | 'mint'
      | 'name'
      | 'owner'
      | 'setKycProvider'
      | 'setOwner'
      | 'setTransactionFee'
      | 'setUnitaryValue'
      | 'symbol'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'VERSION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'authority', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'burn',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'changeFeeCollector', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'changeMinPeriod', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'changeSpread', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPoolParams', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPoolStorage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPoolTokens', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getStorageAt',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getStorageSlotsAt', values: [PromiseOrValue<BigNumberish>[]]): string;
  encodeFunctionData(functionFragment: 'getUserAccount', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'initializePool', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setKycProvider', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setOwner', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setTransactionFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setUnitaryValue', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'VERSION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'authority', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeFeeCollector', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeMinPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeSpread', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolParams', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolStorage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStorageAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStorageSlotsAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initializePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setKycProvider', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTransactionFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUnitaryValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'KycProviderSet(address,address)': EventFragment;
    'MinimumPeriodChanged(address,uint48)': EventFragment;
    'NewCollector(address,address,address)': EventFragment;
    'NewFee(address,address,uint16)': EventFragment;
    'NewNav(address,address,uint256)': EventFragment;
    'NewOwner(address,address)': EventFragment;
    'PoolInitialized(address,address,address,string,bytes8)': EventFragment;
    'SpreadChanged(address,uint16)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'KycProviderSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MinimumPeriodChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewCollector'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewNav'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewOwner'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolInitialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SpreadChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface KycProviderSetEventObject {
  pool: string;
  kycProvider: string;
}
export type KycProviderSetEvent = TypedEvent<[string, string], KycProviderSetEventObject>;

export type KycProviderSetEventFilter = TypedEventFilter<KycProviderSetEvent>;

export interface MinimumPeriodChangedEventObject {
  pool: string;
  minimumPeriod: number;
}
export type MinimumPeriodChangedEvent = TypedEvent<[string, number], MinimumPeriodChangedEventObject>;

export type MinimumPeriodChangedEventFilter = TypedEventFilter<MinimumPeriodChangedEvent>;

export interface NewCollectorEventObject {
  pool: string;
  who: string;
  feeCollector: string;
}
export type NewCollectorEvent = TypedEvent<[string, string, string], NewCollectorEventObject>;

export type NewCollectorEventFilter = TypedEventFilter<NewCollectorEvent>;

export interface NewFeeEventObject {
  pool: string;
  who: string;
  transactionFee: number;
}
export type NewFeeEvent = TypedEvent<[string, string, number], NewFeeEventObject>;

export type NewFeeEventFilter = TypedEventFilter<NewFeeEvent>;

export interface NewNavEventObject {
  poolOperator: string;
  pool: string;
  unitaryValue: BigNumber;
}
export type NewNavEvent = TypedEvent<[string, string, BigNumber], NewNavEventObject>;

export type NewNavEventFilter = TypedEventFilter<NewNavEvent>;

export interface NewOwnerEventObject {
  old: string;
  current: string;
}
export type NewOwnerEvent = TypedEvent<[string, string], NewOwnerEventObject>;

export type NewOwnerEventFilter = TypedEventFilter<NewOwnerEvent>;

export interface PoolInitializedEventObject {
  group: string;
  owner: string;
  baseToken: string;
  name: string;
  symbol: string;
}
export type PoolInitializedEvent = TypedEvent<[string, string, string, string, string], PoolInitializedEventObject>;

export type PoolInitializedEventFilter = TypedEventFilter<PoolInitializedEvent>;

export interface SpreadChangedEventObject {
  pool: string;
  spread: number;
}
export type SpreadChangedEvent = TypedEvent<[string, number], SpreadChangedEventObject>;

export type SpreadChangedEventFilter = TypedEventFilter<SpreadChangedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface SmartPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SmartPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(who: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeFeeCollector(
      feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeMinPeriod(
      minPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeSpread(
      newSpread: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    getPool(overrides?: CallOverrides): Promise<[IRigoblockV3PoolState.ReturnedPoolStructOutput]>;

    getPoolParams(overrides?: CallOverrides): Promise<[IRigoblockV3PoolState.PoolParamsStructOutput]>;

    getPoolStorage(overrides?: CallOverrides): Promise<
      [
        IRigoblockV3PoolState.ReturnedPoolStructOutput,
        IRigoblockV3PoolState.PoolParamsStructOutput,
        IRigoblockV3PoolState.PoolTokensStructOutput,
      ] & {
        poolInitParams: IRigoblockV3PoolState.ReturnedPoolStructOutput;
        poolVariables: IRigoblockV3PoolState.PoolParamsStructOutput;
        poolTokensInfo: IRigoblockV3PoolState.PoolTokensStructOutput;
      }
    >;

    getPoolTokens(overrides?: CallOverrides): Promise<[IRigoblockV3PoolState.PoolTokensStructOutput]>;

    getStorageAt(
      offset: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getStorageSlotsAt(slots: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<[string]>;

    getUserAccount(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[IRigoblockV3PoolState.UserAccountStructOutput]>;

    initializePool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    mint(
      recipient: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setKycProvider(
      kycProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTransactionFee(
      transactionFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setUnitaryValue(
      unitaryValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  authority(overrides?: CallOverrides): Promise<string>;

  balanceOf(who: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    amountIn: PromiseOrValue<BigNumberish>,
    amountOutMin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeFeeCollector(
    feeCollector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeMinPeriod(
    minPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeSpread(
    newSpread: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  getPool(overrides?: CallOverrides): Promise<IRigoblockV3PoolState.ReturnedPoolStructOutput>;

  getPoolParams(overrides?: CallOverrides): Promise<IRigoblockV3PoolState.PoolParamsStructOutput>;

  getPoolStorage(overrides?: CallOverrides): Promise<
    [
      IRigoblockV3PoolState.ReturnedPoolStructOutput,
      IRigoblockV3PoolState.PoolParamsStructOutput,
      IRigoblockV3PoolState.PoolTokensStructOutput,
    ] & {
      poolInitParams: IRigoblockV3PoolState.ReturnedPoolStructOutput;
      poolVariables: IRigoblockV3PoolState.PoolParamsStructOutput;
      poolTokensInfo: IRigoblockV3PoolState.PoolTokensStructOutput;
    }
  >;

  getPoolTokens(overrides?: CallOverrides): Promise<IRigoblockV3PoolState.PoolTokensStructOutput>;

  getStorageAt(
    offset: PromiseOrValue<BigNumberish>,
    length: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  getStorageSlotsAt(slots: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<string>;

  getUserAccount(
    who: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<IRigoblockV3PoolState.UserAccountStructOutput>;

  initializePool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  mint(
    recipient: PromiseOrValue<string>,
    amountIn: PromiseOrValue<BigNumberish>,
    amountOutMin: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  setKycProvider(
    kycProvider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTransactionFee(
    transactionFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setUnitaryValue(
    unitaryValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    authority(overrides?: CallOverrides): Promise<string>;

    balanceOf(who: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    changeFeeCollector(feeCollector: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    changeMinPeriod(minPeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    changeSpread(newSpread: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    getPool(overrides?: CallOverrides): Promise<IRigoblockV3PoolState.ReturnedPoolStructOutput>;

    getPoolParams(overrides?: CallOverrides): Promise<IRigoblockV3PoolState.PoolParamsStructOutput>;

    getPoolStorage(overrides?: CallOverrides): Promise<
      [
        IRigoblockV3PoolState.ReturnedPoolStructOutput,
        IRigoblockV3PoolState.PoolParamsStructOutput,
        IRigoblockV3PoolState.PoolTokensStructOutput,
      ] & {
        poolInitParams: IRigoblockV3PoolState.ReturnedPoolStructOutput;
        poolVariables: IRigoblockV3PoolState.PoolParamsStructOutput;
        poolTokensInfo: IRigoblockV3PoolState.PoolTokensStructOutput;
      }
    >;

    getPoolTokens(overrides?: CallOverrides): Promise<IRigoblockV3PoolState.PoolTokensStructOutput>;

    getStorageAt(
      offset: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getStorageSlotsAt(slots: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<string>;

    getUserAccount(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<IRigoblockV3PoolState.UserAccountStructOutput>;

    initializePool(overrides?: CallOverrides): Promise<void>;

    mint(
      recipient: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    setKycProvider(kycProvider: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setOwner(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setTransactionFee(transactionFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setUnitaryValue(unitaryValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'KycProviderSet(address,address)'(
      pool?: PromiseOrValue<string> | null,
      kycProvider?: PromiseOrValue<string> | null,
    ): KycProviderSetEventFilter;
    KycProviderSet(
      pool?: PromiseOrValue<string> | null,
      kycProvider?: PromiseOrValue<string> | null,
    ): KycProviderSetEventFilter;

    'MinimumPeriodChanged(address,uint48)'(
      pool?: PromiseOrValue<string> | null,
      minimumPeriod?: null,
    ): MinimumPeriodChangedEventFilter;
    MinimumPeriodChanged(pool?: PromiseOrValue<string> | null, minimumPeriod?: null): MinimumPeriodChangedEventFilter;

    'NewCollector(address,address,address)'(
      pool?: PromiseOrValue<string> | null,
      who?: PromiseOrValue<string> | null,
      feeCollector?: null,
    ): NewCollectorEventFilter;
    NewCollector(
      pool?: PromiseOrValue<string> | null,
      who?: PromiseOrValue<string> | null,
      feeCollector?: null,
    ): NewCollectorEventFilter;

    'NewFee(address,address,uint16)'(
      pool?: PromiseOrValue<string> | null,
      who?: PromiseOrValue<string> | null,
      transactionFee?: null,
    ): NewFeeEventFilter;
    NewFee(
      pool?: PromiseOrValue<string> | null,
      who?: PromiseOrValue<string> | null,
      transactionFee?: null,
    ): NewFeeEventFilter;

    'NewNav(address,address,uint256)'(
      poolOperator?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      unitaryValue?: null,
    ): NewNavEventFilter;
    NewNav(
      poolOperator?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      unitaryValue?: null,
    ): NewNavEventFilter;

    'NewOwner(address,address)'(
      old?: PromiseOrValue<string> | null,
      current?: PromiseOrValue<string> | null,
    ): NewOwnerEventFilter;
    NewOwner(old?: PromiseOrValue<string> | null, current?: PromiseOrValue<string> | null): NewOwnerEventFilter;

    'PoolInitialized(address,address,address,string,bytes8)'(
      group?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null,
    ): PoolInitializedEventFilter;
    PoolInitialized(
      group?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      baseToken?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null,
    ): PoolInitializedEventFilter;

    'SpreadChanged(address,uint16)'(pool?: PromiseOrValue<string> | null, spread?: null): SpreadChangedEventFilter;
    SpreadChanged(pool?: PromiseOrValue<string> | null, spread?: null): SpreadChangedEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(who: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeFeeCollector(
      feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeMinPeriod(
      minPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeSpread(
      newSpread: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    getPool(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolParams(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolStorage(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getStorageAt(
      offset: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getStorageSlotsAt(slots: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber>;

    getUserAccount(who: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    initializePool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    mint(
      recipient: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setKycProvider(
      kycProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTransactionFee(
      transactionFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setUnitaryValue(
      unitaryValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(who: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeFeeCollector(
      feeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeMinPeriod(
      minPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeSpread(
      newSpread: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStorageAt(
      offset: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getStorageSlotsAt(slots: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserAccount(who: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initializePool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    mint(
      recipient: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setKycProvider(
      kycProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTransactionFee(
      transactionFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setUnitaryValue(
      unitaryValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
