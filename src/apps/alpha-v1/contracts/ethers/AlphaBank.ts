/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface AlphaBankInterface extends utils.Interface {
  functions: {
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'config()': FunctionFragment;
    'debtShareToVal(uint256)': FunctionFragment;
    'debtValToShare(uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'deposit()': FunctionFragment;
    'glbDebtShare()': FunctionFragment;
    'glbDebtVal()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'isOwner()': FunctionFragment;
    'kill(uint256)': FunctionFragment;
    'lastAccrueTime()': FunctionFragment;
    'name()': FunctionFragment;
    'nextPositionID()': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingInterest(uint256)': FunctionFragment;
    'positionInfo(uint256)': FunctionFragment;
    'positions(uint256)': FunctionFragment;
    'recover(address,address,uint256)': FunctionFragment;
    'reduceReserve(uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'reservePool()': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalETH()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateConfig(address)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdrawReserve(address,uint256)': FunctionFragment;
    'work(uint256,address,uint256,uint256,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'config'
      | 'debtShareToVal'
      | 'debtValToShare'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit'
      | 'glbDebtShare'
      | 'glbDebtVal'
      | 'increaseAllowance'
      | 'isOwner'
      | 'kill'
      | 'lastAccrueTime'
      | 'name'
      | 'nextPositionID'
      | 'owner'
      | 'pendingInterest'
      | 'positionInfo'
      | 'positions'
      | 'recover'
      | 'reduceReserve'
      | 'renounceOwnership'
      | 'reservePool'
      | 'symbol'
      | 'totalETH'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'updateConfig'
      | 'withdraw'
      | 'withdrawReserve'
      | 'work',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'config', values?: undefined): string;
  encodeFunctionData(functionFragment: 'debtShareToVal', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'debtValToShare', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'deposit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'glbDebtShare', values?: undefined): string;
  encodeFunctionData(functionFragment: 'glbDebtVal', values?: undefined): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'isOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'kill', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'lastAccrueTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nextPositionID', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingInterest', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'positionInfo', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'positions', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'recover', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'reduceReserve', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reservePool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalETH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateConfig', values: [string]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawReserve', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'work',
    values: [BigNumberish, string, BigNumberish, BigNumberish, BytesLike],
  ): string;

  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'config', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'debtShareToVal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'debtValToShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'glbDebtShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'glbDebtVal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'kill', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastAccrueTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nextPositionID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingInterest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'positionInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'positions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recover', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reduceReserve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reservePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawReserve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'work', data: BytesLike): Result;

  events: {
    'AddDebt(uint256,uint256)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'Kill(uint256,address,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'RemoveDebt(uint256,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Work(uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddDebt'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Kill'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RemoveDebt'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Work'): EventFragment;
}

export interface AddDebtEventObject {
  id: BigNumber;
  debtShare: BigNumber;
}
export type AddDebtEvent = TypedEvent<[BigNumber, BigNumber], AddDebtEventObject>;

export type AddDebtEventFilter = TypedEventFilter<AddDebtEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface KillEventObject {
  id: BigNumber;
  killer: string;
  prize: BigNumber;
  left: BigNumber;
}
export type KillEvent = TypedEvent<[BigNumber, string, BigNumber, BigNumber], KillEventObject>;

export type KillEventFilter = TypedEventFilter<KillEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RemoveDebtEventObject {
  id: BigNumber;
  debtShare: BigNumber;
}
export type RemoveDebtEvent = TypedEvent<[BigNumber, BigNumber], RemoveDebtEventObject>;

export type RemoveDebtEventFilter = TypedEventFilter<RemoveDebtEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WorkEventObject {
  id: BigNumber;
  loan: BigNumber;
}
export type WorkEvent = TypedEvent<[BigNumber, BigNumber], WorkEventObject>;

export type WorkEventFilter = TypedEventFilter<WorkEvent>;

export interface AlphaBank extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AlphaBankInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    config(overrides?: CallOverrides): Promise<[string]>;

    debtShareToVal(debtShare: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    debtValToShare(debtVal: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deposit(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    glbDebtShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    glbDebtVal(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    kill(id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    lastAccrueTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextPositionID(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingInterest(msgValue: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    positionInfo(id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    positions(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber] & {
        goblin: string;
        owner: string;
        debtShare: BigNumber;
      }
    >;

    recover(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    reduceReserve(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    reservePool(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalETH(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateConfig(
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawReserve(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    work(
      id: BigNumberish,
      goblin: string,
      loan: BigNumberish,
      maxReturn: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  config(overrides?: CallOverrides): Promise<string>;

  debtShareToVal(debtShare: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  debtValToShare(debtVal: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  deposit(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  glbDebtShare(overrides?: CallOverrides): Promise<BigNumber>;

  glbDebtVal(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  kill(id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  lastAccrueTime(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nextPositionID(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingInterest(msgValue: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  positionInfo(id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  positions(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, BigNumber] & {
      goblin: string;
      owner: string;
      debtShare: BigNumber;
    }
  >;

  recover(
    token: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  reduceReserve(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  reservePool(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalETH(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateConfig(
    _config: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawReserve(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  work(
    id: BigNumberish,
    goblin: string,
    loan: BigNumberish,
    maxReturn: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<string>;

    debtShareToVal(debtShare: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    debtValToShare(debtVal: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    deposit(overrides?: CallOverrides): Promise<void>;

    glbDebtShare(overrides?: CallOverrides): Promise<BigNumber>;

    glbDebtVal(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    kill(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    lastAccrueTime(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nextPositionID(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingInterest(msgValue: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    positionInfo(id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    positions(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber] & {
        goblin: string;
        owner: string;
        debtShare: BigNumber;
      }
    >;

    recover(token: string, to: string, value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    reduceReserve(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reservePool(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalETH(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(sender: string, recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    updateConfig(_config: string, overrides?: CallOverrides): Promise<void>;

    withdraw(share: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawReserve(to: string, value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    work(
      id: BigNumberish,
      goblin: string,
      loan: BigNumberish,
      maxReturn: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'AddDebt(uint256,uint256)'(id?: BigNumberish | null, debtShare?: null): AddDebtEventFilter;
    AddDebt(id?: BigNumberish | null, debtShare?: null): AddDebtEventFilter;

    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;

    'Kill(uint256,address,uint256,uint256)'(
      id?: BigNumberish | null,
      killer?: string | null,
      prize?: null,
      left?: null,
    ): KillEventFilter;
    Kill(id?: BigNumberish | null, killer?: string | null, prize?: null, left?: null): KillEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    'RemoveDebt(uint256,uint256)'(id?: BigNumberish | null, debtShare?: null): RemoveDebtEventFilter;
    RemoveDebt(id?: BigNumberish | null, debtShare?: null): RemoveDebtEventFilter;

    'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;

    'Work(uint256,uint256)'(id?: BigNumberish | null, loan?: null): WorkEventFilter;
    Work(id?: BigNumberish | null, loan?: null): WorkEventFilter;
  };

  estimateGas: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    debtShareToVal(debtShare: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    debtValToShare(debtVal: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    deposit(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    glbDebtShare(overrides?: CallOverrides): Promise<BigNumber>;

    glbDebtVal(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    kill(id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    lastAccrueTime(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextPositionID(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingInterest(msgValue: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    positionInfo(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    positions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    recover(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    reduceReserve(value: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    reservePool(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalETH(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateConfig(_config: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdraw(share: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdrawReserve(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    work(
      id: BigNumberish,
      goblin: string,
      loan: BigNumberish,
      maxReturn: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtShareToVal(debtShare: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtValToShare(debtVal: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    deposit(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    glbDebtShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    glbDebtVal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kill(id: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    lastAccrueTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextPositionID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingInterest(msgValue: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positionInfo(id: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positions(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recover(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    reduceReserve(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    reservePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateConfig(
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawReserve(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    work(
      id: BigNumberish,
      goblin: string,
      loan: BigNumberish,
      maxReturn: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
