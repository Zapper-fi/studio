/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface PancakeswapFarmBoosterInterface extends utils.Interface {
  functions: {
    'BOOSTER_FACTORY()': FunctionFragment;
    'BOOST_PRECISION()': FunctionFragment;
    'BOOST_RATIO_PRECISION()': FunctionFragment;
    'BOOST_WEIGHT_PRECISION()': FunctionFragment;
    'CAKE()': FunctionFragment;
    'CAKE_POOL()': FunctionFragment;
    'CA_PRECISION()': FunctionFragment;
    'MASTER_CHEF()': FunctionFragment;
    'MAX_BOOST_POOL()': FunctionFragment;
    'MAX_BOOST_PRECISION()': FunctionFragment;
    'MAX_CA()': FunctionFragment;
    'MAX_CB()': FunctionFragment;
    'MIN_CA()': FunctionFragment;
    'MIN_CB()': FunctionFragment;
    'activate(uint256)': FunctionFragment;
    'activedPools(address)': FunctionFragment;
    'avgLockDuration()': FunctionFragment;
    'cA()': FunctionFragment;
    'cB()': FunctionFragment;
    'deactive(uint256)': FunctionFragment;
    'getUserMultiplier(address,uint256)': FunctionFragment;
    'isBoostedPool(address,uint256)': FunctionFragment;
    'onCakePoolUpdate(address,uint256,uint256,uint256,uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'proxyContract(address)': FunctionFragment;
    'refresh(address,uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setBoostFactory(address)': FunctionFragment;
    'setBoosterFarms(uint256,bool)': FunctionFragment;
    'setCA(uint256)': FunctionFragment;
    'setCB(uint256)': FunctionFragment;
    'setMaxBoostPool(uint256)': FunctionFragment;
    'setProxy(address,address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updatePoolBoostMultiplier(address,uint256)': FunctionFragment;
    'userInfo(address)': FunctionFragment;
    'whiteList(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BOOSTER_FACTORY'
      | 'BOOST_PRECISION'
      | 'BOOST_RATIO_PRECISION'
      | 'BOOST_WEIGHT_PRECISION'
      | 'CAKE'
      | 'CAKE_POOL'
      | 'CA_PRECISION'
      | 'MASTER_CHEF'
      | 'MAX_BOOST_POOL'
      | 'MAX_BOOST_PRECISION'
      | 'MAX_CA'
      | 'MAX_CB'
      | 'MIN_CA'
      | 'MIN_CB'
      | 'activate'
      | 'activedPools'
      | 'avgLockDuration'
      | 'cA'
      | 'cB'
      | 'deactive'
      | 'getUserMultiplier'
      | 'isBoostedPool'
      | 'onCakePoolUpdate'
      | 'owner'
      | 'proxyContract'
      | 'refresh'
      | 'renounceOwnership'
      | 'setBoostFactory'
      | 'setBoosterFarms'
      | 'setCA'
      | 'setCB'
      | 'setMaxBoostPool'
      | 'setProxy'
      | 'transferOwnership'
      | 'updatePoolBoostMultiplier'
      | 'userInfo'
      | 'whiteList',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BOOSTER_FACTORY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'BOOST_PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'BOOST_RATIO_PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'BOOST_WEIGHT_PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'CAKE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'CAKE_POOL', values?: undefined): string;
  encodeFunctionData(functionFragment: 'CA_PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MASTER_CHEF', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_BOOST_POOL', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_BOOST_PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_CA', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_CB', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MIN_CA', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MIN_CB', values?: undefined): string;
  encodeFunctionData(functionFragment: 'activate', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'activedPools', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'avgLockDuration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'cA', values?: undefined): string;
  encodeFunctionData(functionFragment: 'cB', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deactive', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getUserMultiplier',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'isBoostedPool',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'onCakePoolUpdate',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'proxyContract', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'refresh',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setBoostFactory', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setBoosterFarms',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setCA', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setCB', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setMaxBoostPool', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setProxy', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'updatePoolBoostMultiplier',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'userInfo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'whiteList', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'BOOSTER_FACTORY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'BOOST_PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'BOOST_RATIO_PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'BOOST_WEIGHT_PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'CAKE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'CAKE_POOL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'CA_PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MASTER_CHEF', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_BOOST_POOL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_BOOST_PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_CA', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_CB', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MIN_CA', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MIN_CB', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activedPools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'avgLockDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cA', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cB', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deactive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isBoostedPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onCakePoolUpdate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proxyContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'refresh', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBoostFactory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBoosterFarms', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCA', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCB', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxBoostPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setProxy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePoolBoostMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whiteList', data: BytesLike): Result;

  events: {
    'ActiveFarmPool(address,address,uint256)': EventFragment;
    'DeactiveFarmPool(address,address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Refresh(address,address,uint256)': EventFragment;
    'UpdateBoostFactory(address)': EventFragment;
    'UpdateBoostFarms(uint256,bool)': EventFragment;
    'UpdateBoostProxy(address,address)': EventFragment;
    'UpdateCA(uint256,uint256)': EventFragment;
    'UpdateCB(uint256,uint256)': EventFragment;
    'UpdateCakePool(address,uint256,uint256,uint256,uint256)': EventFragment;
    'UpdateMaxBoostPool(uint256)': EventFragment;
    'UpdatePoolBoostMultiplier(address,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ActiveFarmPool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DeactiveFarmPool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Refresh'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateBoostFactory'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateBoostFarms'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateBoostProxy'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateCA'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateCB'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateCakePool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateMaxBoostPool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatePoolBoostMultiplier'): EventFragment;
}

export interface ActiveFarmPoolEventObject {
  user: string;
  proxy: string;
  pid: BigNumber;
}
export type ActiveFarmPoolEvent = TypedEvent<[string, string, BigNumber], ActiveFarmPoolEventObject>;

export type ActiveFarmPoolEventFilter = TypedEventFilter<ActiveFarmPoolEvent>;

export interface DeactiveFarmPoolEventObject {
  user: string;
  proxy: string;
  pid: BigNumber;
}
export type DeactiveFarmPoolEvent = TypedEvent<[string, string, BigNumber], DeactiveFarmPoolEventObject>;

export type DeactiveFarmPoolEventFilter = TypedEventFilter<DeactiveFarmPoolEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RefreshEventObject {
  user: string;
  proxy: string;
  pid: BigNumber;
}
export type RefreshEvent = TypedEvent<[string, string, BigNumber], RefreshEventObject>;

export type RefreshEventFilter = TypedEventFilter<RefreshEvent>;

export interface UpdateBoostFactoryEventObject {
  factory: string;
}
export type UpdateBoostFactoryEvent = TypedEvent<[string], UpdateBoostFactoryEventObject>;

export type UpdateBoostFactoryEventFilter = TypedEventFilter<UpdateBoostFactoryEvent>;

export interface UpdateBoostFarmsEventObject {
  pid: BigNumber;
  status: boolean;
}
export type UpdateBoostFarmsEvent = TypedEvent<[BigNumber, boolean], UpdateBoostFarmsEventObject>;

export type UpdateBoostFarmsEventFilter = TypedEventFilter<UpdateBoostFarmsEvent>;

export interface UpdateBoostProxyEventObject {
  user: string;
  proxy: string;
}
export type UpdateBoostProxyEvent = TypedEvent<[string, string], UpdateBoostProxyEventObject>;

export type UpdateBoostProxyEventFilter = TypedEventFilter<UpdateBoostProxyEvent>;

export interface UpdateCAEventObject {
  oldCA: BigNumber;
  newCA: BigNumber;
}
export type UpdateCAEvent = TypedEvent<[BigNumber, BigNumber], UpdateCAEventObject>;

export type UpdateCAEventFilter = TypedEventFilter<UpdateCAEvent>;

export interface UpdateCBEventObject {
  oldCB: BigNumber;
  newCB: BigNumber;
}
export type UpdateCBEvent = TypedEvent<[BigNumber, BigNumber], UpdateCBEventObject>;

export type UpdateCBEventFilter = TypedEventFilter<UpdateCBEvent>;

export interface UpdateCakePoolEventObject {
  user: string;
  lockedAmount: BigNumber;
  lockedDuration: BigNumber;
  totalLockedAmount: BigNumber;
  maxLockDuration: BigNumber;
}
export type UpdateCakePoolEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  UpdateCakePoolEventObject
>;

export type UpdateCakePoolEventFilter = TypedEventFilter<UpdateCakePoolEvent>;

export interface UpdateMaxBoostPoolEventObject {
  factory: BigNumber;
}
export type UpdateMaxBoostPoolEvent = TypedEvent<[BigNumber], UpdateMaxBoostPoolEventObject>;

export type UpdateMaxBoostPoolEventFilter = TypedEventFilter<UpdateMaxBoostPoolEvent>;

export interface UpdatePoolBoostMultiplierEventObject {
  user: string;
  pid: BigNumber;
  oldMultiplier: BigNumber;
  newMultiplier: BigNumber;
}
export type UpdatePoolBoostMultiplierEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  UpdatePoolBoostMultiplierEventObject
>;

export type UpdatePoolBoostMultiplierEventFilter = TypedEventFilter<UpdatePoolBoostMultiplierEvent>;

export interface PancakeswapFarmBooster extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PancakeswapFarmBoosterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BOOSTER_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    BOOST_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    BOOST_RATIO_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    BOOST_WEIGHT_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    CAKE(overrides?: CallOverrides): Promise<[string]>;

    CAKE_POOL(overrides?: CallOverrides): Promise<[string]>;

    CA_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MASTER_CHEF(overrides?: CallOverrides): Promise<[string]>;

    MAX_BOOST_POOL(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_BOOST_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_CA(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_CB(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_CA(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_CB(overrides?: CallOverrides): Promise<[BigNumber]>;

    activate(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    activedPools(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]] & { pools: BigNumber[] }>;

    avgLockDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    cA(overrides?: CallOverrides): Promise<[BigNumber]>;

    cB(overrides?: CallOverrides): Promise<[BigNumber]>;

    deactive(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getUserMultiplier(
      _user: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    isBoostedPool(
      _user: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    onCakePoolUpdate(
      _user: PromiseOrValue<string>,
      _lockedAmount: PromiseOrValue<BigNumberish>,
      _lockedDuration: PromiseOrValue<BigNumberish>,
      _totalLockedAmount: PromiseOrValue<BigNumberish>,
      _maxLockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxyContract(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    refresh(
      _user: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setBoostFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setBoosterFarms(
      _pid: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setCA(
      _cA: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setCB(
      _cB: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxBoostPool(
      _max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setProxy(
      _user: PromiseOrValue<string>,
      _proxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updatePoolBoostMultiplier(
      _user: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    userInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber] & { size: BigNumber }>;

    whiteList(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
  };

  BOOSTER_FACTORY(overrides?: CallOverrides): Promise<string>;

  BOOST_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  BOOST_RATIO_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  BOOST_WEIGHT_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  CAKE(overrides?: CallOverrides): Promise<string>;

  CAKE_POOL(overrides?: CallOverrides): Promise<string>;

  CA_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  MASTER_CHEF(overrides?: CallOverrides): Promise<string>;

  MAX_BOOST_POOL(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_BOOST_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_CA(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_CB(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_CA(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_CB(overrides?: CallOverrides): Promise<BigNumber>;

  activate(
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  activedPools(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;

  avgLockDuration(overrides?: CallOverrides): Promise<BigNumber>;

  cA(overrides?: CallOverrides): Promise<BigNumber>;

  cB(overrides?: CallOverrides): Promise<BigNumber>;

  deactive(
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getUserMultiplier(
    _user: PromiseOrValue<string>,
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  isBoostedPool(
    _user: PromiseOrValue<string>,
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  onCakePoolUpdate(
    _user: PromiseOrValue<string>,
    _lockedAmount: PromiseOrValue<BigNumberish>,
    _lockedDuration: PromiseOrValue<BigNumberish>,
    _totalLockedAmount: PromiseOrValue<BigNumberish>,
    _maxLockDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxyContract(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  refresh(
    _user: PromiseOrValue<string>,
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setBoostFactory(
    _factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setBoosterFarms(
    _pid: PromiseOrValue<BigNumberish>,
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setCA(
    _cA: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setCB(
    _cB: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxBoostPool(
    _max: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setProxy(
    _user: PromiseOrValue<string>,
    _proxy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updatePoolBoostMultiplier(
    _user: PromiseOrValue<string>,
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  userInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  whiteList(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    BOOSTER_FACTORY(overrides?: CallOverrides): Promise<string>;

    BOOST_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    BOOST_RATIO_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    BOOST_WEIGHT_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    CAKE(overrides?: CallOverrides): Promise<string>;

    CAKE_POOL(overrides?: CallOverrides): Promise<string>;

    CA_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MASTER_CHEF(overrides?: CallOverrides): Promise<string>;

    MAX_BOOST_POOL(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BOOST_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_CA(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_CB(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_CA(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_CB(overrides?: CallOverrides): Promise<BigNumber>;

    activate(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    activedPools(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;

    avgLockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    cA(overrides?: CallOverrides): Promise<BigNumber>;

    cB(overrides?: CallOverrides): Promise<BigNumber>;

    deactive(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    getUserMultiplier(
      _user: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isBoostedPool(
      _user: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    onCakePoolUpdate(
      _user: PromiseOrValue<string>,
      _lockedAmount: PromiseOrValue<BigNumberish>,
      _lockedDuration: PromiseOrValue<BigNumberish>,
      _totalLockedAmount: PromiseOrValue<BigNumberish>,
      _maxLockDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxyContract(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    refresh(
      _user: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBoostFactory(_factory: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setBoosterFarms(
      _pid: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setCA(_cA: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setCB(_cB: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setMaxBoostPool(_max: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setProxy(_user: PromiseOrValue<string>, _proxy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updatePoolBoostMultiplier(
      _user: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    userInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    whiteList(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    'ActiveFarmPool(address,address,uint256)'(
      user?: PromiseOrValue<string> | null,
      proxy?: null,
      pid?: null,
    ): ActiveFarmPoolEventFilter;
    ActiveFarmPool(user?: PromiseOrValue<string> | null, proxy?: null, pid?: null): ActiveFarmPoolEventFilter;

    'DeactiveFarmPool(address,address,uint256)'(
      user?: PromiseOrValue<string> | null,
      proxy?: null,
      pid?: null,
    ): DeactiveFarmPoolEventFilter;
    DeactiveFarmPool(user?: PromiseOrValue<string> | null, proxy?: null, pid?: null): DeactiveFarmPoolEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'Refresh(address,address,uint256)'(
      user?: PromiseOrValue<string> | null,
      proxy?: null,
      pid?: null,
    ): RefreshEventFilter;
    Refresh(user?: PromiseOrValue<string> | null, proxy?: null, pid?: null): RefreshEventFilter;

    'UpdateBoostFactory(address)'(factory?: null): UpdateBoostFactoryEventFilter;
    UpdateBoostFactory(factory?: null): UpdateBoostFactoryEventFilter;

    'UpdateBoostFarms(uint256,bool)'(pid?: null, status?: null): UpdateBoostFarmsEventFilter;
    UpdateBoostFarms(pid?: null, status?: null): UpdateBoostFarmsEventFilter;

    'UpdateBoostProxy(address,address)'(
      user?: PromiseOrValue<string> | null,
      proxy?: null,
    ): UpdateBoostProxyEventFilter;
    UpdateBoostProxy(user?: PromiseOrValue<string> | null, proxy?: null): UpdateBoostProxyEventFilter;

    'UpdateCA(uint256,uint256)'(oldCA?: null, newCA?: null): UpdateCAEventFilter;
    UpdateCA(oldCA?: null, newCA?: null): UpdateCAEventFilter;

    'UpdateCB(uint256,uint256)'(oldCB?: null, newCB?: null): UpdateCBEventFilter;
    UpdateCB(oldCB?: null, newCB?: null): UpdateCBEventFilter;

    'UpdateCakePool(address,uint256,uint256,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      lockedAmount?: null,
      lockedDuration?: null,
      totalLockedAmount?: null,
      maxLockDuration?: null,
    ): UpdateCakePoolEventFilter;
    UpdateCakePool(
      user?: PromiseOrValue<string> | null,
      lockedAmount?: null,
      lockedDuration?: null,
      totalLockedAmount?: null,
      maxLockDuration?: null,
    ): UpdateCakePoolEventFilter;

    'UpdateMaxBoostPool(uint256)'(factory?: null): UpdateMaxBoostPoolEventFilter;
    UpdateMaxBoostPool(factory?: null): UpdateMaxBoostPoolEventFilter;

    'UpdatePoolBoostMultiplier(address,uint256,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      pid?: null,
      oldMultiplier?: null,
      newMultiplier?: null,
    ): UpdatePoolBoostMultiplierEventFilter;
    UpdatePoolBoostMultiplier(
      user?: PromiseOrValue<string> | null,
      pid?: null,
      oldMultiplier?: null,
      newMultiplier?: null,
    ): UpdatePoolBoostMultiplierEventFilter;
  };

  estimateGas: {
    BOOSTER_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    BOOST_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    BOOST_RATIO_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    BOOST_WEIGHT_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    CAKE(overrides?: CallOverrides): Promise<BigNumber>;

    CAKE_POOL(overrides?: CallOverrides): Promise<BigNumber>;

    CA_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MASTER_CHEF(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BOOST_POOL(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BOOST_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_CA(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_CB(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_CA(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_CB(overrides?: CallOverrides): Promise<BigNumber>;

    activate(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    activedPools(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    avgLockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    cA(overrides?: CallOverrides): Promise<BigNumber>;

    cB(overrides?: CallOverrides): Promise<BigNumber>;

    deactive(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getUserMultiplier(
      _user: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isBoostedPool(
      _user: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    onCakePoolUpdate(
      _user: PromiseOrValue<string>,
      _lockedAmount: PromiseOrValue<BigNumberish>,
      _lockedDuration: PromiseOrValue<BigNumberish>,
      _totalLockedAmount: PromiseOrValue<BigNumberish>,
      _maxLockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxyContract(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    refresh(
      _user: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setBoostFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setBoosterFarms(
      _pid: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setCA(
      _cA: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setCB(
      _cB: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxBoostPool(
      _max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setProxy(
      _user: PromiseOrValue<string>,
      _proxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updatePoolBoostMultiplier(
      _user: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    userInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    whiteList(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BOOSTER_FACTORY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BOOST_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BOOST_RATIO_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BOOST_WEIGHT_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CAKE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CAKE_POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CA_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MASTER_CHEF(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BOOST_POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BOOST_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_CA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_CB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_CA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_CB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activate(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    activedPools(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    avgLockDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deactive(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getUserMultiplier(
      _user: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isBoostedPool(
      _user: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    onCakePoolUpdate(
      _user: PromiseOrValue<string>,
      _lockedAmount: PromiseOrValue<BigNumberish>,
      _lockedDuration: PromiseOrValue<BigNumberish>,
      _totalLockedAmount: PromiseOrValue<BigNumberish>,
      _maxLockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxyContract(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refresh(
      _user: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setBoostFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setBoosterFarms(
      _pid: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setCA(
      _cA: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setCB(
      _cB: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxBoostPool(
      _max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setProxy(
      _user: PromiseOrValue<string>,
      _proxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updatePoolBoostMultiplier(
      _user: PromiseOrValue<string>,
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    userInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whiteList(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
