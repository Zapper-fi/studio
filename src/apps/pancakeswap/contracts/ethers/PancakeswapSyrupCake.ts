/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface PancakeswapSyrupCakeInterface extends utils.Interface {
  functions: {
    'BOOST_WEIGHT()': FunctionFragment;
    'BOOST_WEIGHT_LIMIT()': FunctionFragment;
    'DURATION_FACTOR()': FunctionFragment;
    'DURATION_FACTOR_OVERDUE()': FunctionFragment;
    'MAX_LOCK_DURATION()': FunctionFragment;
    'MAX_LOCK_DURATION_LIMIT()': FunctionFragment;
    'MAX_OVERDUE_FEE()': FunctionFragment;
    'MAX_PERFORMANCE_FEE()': FunctionFragment;
    'MAX_WITHDRAW_FEE()': FunctionFragment;
    'MAX_WITHDRAW_FEE_PERIOD()': FunctionFragment;
    'MIN_DEPOSIT_AMOUNT()': FunctionFragment;
    'MIN_LOCK_DURATION()': FunctionFragment;
    'MIN_WITHDRAW_AMOUNT()': FunctionFragment;
    'PRECISION_FACTOR()': FunctionFragment;
    'PRECISION_FACTOR_SHARE()': FunctionFragment;
    'UNLOCK_FREE_DURATION()': FunctionFragment;
    'VCake()': FunctionFragment;
    'admin()': FunctionFragment;
    'available()': FunctionFragment;
    'balanceOf()': FunctionFragment;
    'boostContract()': FunctionFragment;
    'cakePoolPID()': FunctionFragment;
    'calculateOverdueFee(address)': FunctionFragment;
    'calculatePerformanceFee(address)': FunctionFragment;
    'calculateTotalPendingCakeRewards()': FunctionFragment;
    'calculateWithdrawFee(address,uint256)': FunctionFragment;
    'deposit(uint256,uint256)': FunctionFragment;
    'freeOverdueFeeUsers(address)': FunctionFragment;
    'freePerformanceFeeUsers(address)': FunctionFragment;
    'freeWithdrawFeeUsers(address)': FunctionFragment;
    'getPricePerFullShare()': FunctionFragment;
    'inCaseTokensGetStuck(address)': FunctionFragment;
    'init(address)': FunctionFragment;
    'masterchefV2()': FunctionFragment;
    'operator()': FunctionFragment;
    'overdueFee()': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'performanceFee()': FunctionFragment;
    'performanceFeeContract()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setAdmin(address)': FunctionFragment;
    'setBoostContract(address)': FunctionFragment;
    'setBoostWeight(uint256)': FunctionFragment;
    'setDurationFactor(uint256)': FunctionFragment;
    'setDurationFactorOverdue(uint256)': FunctionFragment;
    'setFreePerformanceFeeUser(address,bool)': FunctionFragment;
    'setMaxLockDuration(uint256)': FunctionFragment;
    'setOperator(address)': FunctionFragment;
    'setOverdueFee(uint256)': FunctionFragment;
    'setOverdueFeeUser(address,bool)': FunctionFragment;
    'setPerformanceFee(uint256)': FunctionFragment;
    'setPerformanceFeeContract(uint256)': FunctionFragment;
    'setTreasury(address)': FunctionFragment;
    'setUnlockFreeDuration(uint256)': FunctionFragment;
    'setVCakeContract(address)': FunctionFragment;
    'setWithdrawFee(uint256)': FunctionFragment;
    'setWithdrawFeeContract(uint256)': FunctionFragment;
    'setWithdrawFeePeriod(uint256)': FunctionFragment;
    'setWithdrawFeeUser(address,bool)': FunctionFragment;
    'token()': FunctionFragment;
    'totalBoostDebt()': FunctionFragment;
    'totalLockedAmount()': FunctionFragment;
    'totalShares()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'treasury()': FunctionFragment;
    'unlock(address)': FunctionFragment;
    'unpause()': FunctionFragment;
    'userInfo(address)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdrawAll()': FunctionFragment;
    'withdrawByAmount(uint256)': FunctionFragment;
    'withdrawFee()': FunctionFragment;
    'withdrawFeeContract()': FunctionFragment;
    'withdrawFeePeriod()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BOOST_WEIGHT'
      | 'BOOST_WEIGHT_LIMIT'
      | 'DURATION_FACTOR'
      | 'DURATION_FACTOR_OVERDUE'
      | 'MAX_LOCK_DURATION'
      | 'MAX_LOCK_DURATION_LIMIT'
      | 'MAX_OVERDUE_FEE'
      | 'MAX_PERFORMANCE_FEE'
      | 'MAX_WITHDRAW_FEE'
      | 'MAX_WITHDRAW_FEE_PERIOD'
      | 'MIN_DEPOSIT_AMOUNT'
      | 'MIN_LOCK_DURATION'
      | 'MIN_WITHDRAW_AMOUNT'
      | 'PRECISION_FACTOR'
      | 'PRECISION_FACTOR_SHARE'
      | 'UNLOCK_FREE_DURATION'
      | 'VCake'
      | 'admin'
      | 'available'
      | 'balanceOf'
      | 'boostContract'
      | 'cakePoolPID'
      | 'calculateOverdueFee'
      | 'calculatePerformanceFee'
      | 'calculateTotalPendingCakeRewards'
      | 'calculateWithdrawFee'
      | 'deposit'
      | 'freeOverdueFeeUsers'
      | 'freePerformanceFeeUsers'
      | 'freeWithdrawFeeUsers'
      | 'getPricePerFullShare'
      | 'inCaseTokensGetStuck'
      | 'init'
      | 'masterchefV2'
      | 'operator'
      | 'overdueFee'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'performanceFee'
      | 'performanceFeeContract'
      | 'renounceOwnership'
      | 'setAdmin'
      | 'setBoostContract'
      | 'setBoostWeight'
      | 'setDurationFactor'
      | 'setDurationFactorOverdue'
      | 'setFreePerformanceFeeUser'
      | 'setMaxLockDuration'
      | 'setOperator'
      | 'setOverdueFee'
      | 'setOverdueFeeUser'
      | 'setPerformanceFee'
      | 'setPerformanceFeeContract'
      | 'setTreasury'
      | 'setUnlockFreeDuration'
      | 'setVCakeContract'
      | 'setWithdrawFee'
      | 'setWithdrawFeeContract'
      | 'setWithdrawFeePeriod'
      | 'setWithdrawFeeUser'
      | 'token'
      | 'totalBoostDebt'
      | 'totalLockedAmount'
      | 'totalShares'
      | 'transferOwnership'
      | 'treasury'
      | 'unlock'
      | 'unpause'
      | 'userInfo'
      | 'withdraw'
      | 'withdrawAll'
      | 'withdrawByAmount'
      | 'withdrawFee'
      | 'withdrawFeeContract'
      | 'withdrawFeePeriod',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BOOST_WEIGHT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'BOOST_WEIGHT_LIMIT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DURATION_FACTOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DURATION_FACTOR_OVERDUE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_LOCK_DURATION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_LOCK_DURATION_LIMIT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_OVERDUE_FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_PERFORMANCE_FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_WITHDRAW_FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_WITHDRAW_FEE_PERIOD', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MIN_DEPOSIT_AMOUNT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MIN_LOCK_DURATION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MIN_WITHDRAW_AMOUNT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PRECISION_FACTOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PRECISION_FACTOR_SHARE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'UNLOCK_FREE_DURATION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'VCake', values?: undefined): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'available', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values?: undefined): string;
  encodeFunctionData(functionFragment: 'boostContract', values?: undefined): string;
  encodeFunctionData(functionFragment: 'cakePoolPID', values?: undefined): string;
  encodeFunctionData(functionFragment: 'calculateOverdueFee', values: [string]): string;
  encodeFunctionData(functionFragment: 'calculatePerformanceFee', values: [string]): string;
  encodeFunctionData(functionFragment: 'calculateTotalPendingCakeRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'calculateWithdrawFee', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'freeOverdueFeeUsers', values: [string]): string;
  encodeFunctionData(functionFragment: 'freePerformanceFeeUsers', values: [string]): string;
  encodeFunctionData(functionFragment: 'freeWithdrawFeeUsers', values: [string]): string;
  encodeFunctionData(functionFragment: 'getPricePerFullShare', values?: undefined): string;
  encodeFunctionData(functionFragment: 'inCaseTokensGetStuck', values: [string]): string;
  encodeFunctionData(functionFragment: 'init', values: [string]): string;
  encodeFunctionData(functionFragment: 'masterchefV2', values?: undefined): string;
  encodeFunctionData(functionFragment: 'operator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'overdueFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'performanceFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'performanceFeeContract', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setAdmin', values: [string]): string;
  encodeFunctionData(functionFragment: 'setBoostContract', values: [string]): string;
  encodeFunctionData(functionFragment: 'setBoostWeight', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setDurationFactor', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setDurationFactorOverdue', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setFreePerformanceFeeUser', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'setMaxLockDuration', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setOperator', values: [string]): string;
  encodeFunctionData(functionFragment: 'setOverdueFee', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setOverdueFeeUser', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'setPerformanceFee', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setPerformanceFeeContract', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setTreasury', values: [string]): string;
  encodeFunctionData(functionFragment: 'setUnlockFreeDuration', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setVCakeContract', values: [string]): string;
  encodeFunctionData(functionFragment: 'setWithdrawFee', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setWithdrawFeeContract', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setWithdrawFeePeriod', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setWithdrawFeeUser', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalBoostDebt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalLockedAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalShares', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'treasury', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unlock', values: [string]): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'userInfo', values: [string]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawAll', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawByAmount', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawFeeContract', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawFeePeriod', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'BOOST_WEIGHT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'BOOST_WEIGHT_LIMIT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DURATION_FACTOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DURATION_FACTOR_OVERDUE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_LOCK_DURATION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_LOCK_DURATION_LIMIT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_OVERDUE_FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_PERFORMANCE_FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_WITHDRAW_FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_WITHDRAW_FEE_PERIOD', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MIN_DEPOSIT_AMOUNT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MIN_LOCK_DURATION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MIN_WITHDRAW_AMOUNT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PRECISION_FACTOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PRECISION_FACTOR_SHARE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'UNLOCK_FREE_DURATION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'VCake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'available', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'boostContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cakePoolPID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateOverdueFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculatePerformanceFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateTotalPendingCakeRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateWithdrawFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'freeOverdueFeeUsers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'freePerformanceFeeUsers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'freeWithdrawFeeUsers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPricePerFullShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'inCaseTokensGetStuck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'init', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'masterchefV2', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'operator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'overdueFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'performanceFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'performanceFeeContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBoostContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBoostWeight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDurationFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDurationFactorOverdue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFreePerformanceFeeUser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxLockDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOverdueFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOverdueFeeUser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPerformanceFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPerformanceFeeContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTreasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUnlockFreeDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setVCakeContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWithdrawFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWithdrawFeeContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWithdrawFeePeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWithdrawFeeUser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalBoostDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalLockedAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawByAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawFeeContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawFeePeriod', data: BytesLike): Result;

  events: {
    'Deposit(address,uint256,uint256,uint256,uint256)': EventFragment;
    'FreeFeeUser(address,bool)': EventFragment;
    'Harvest(address,uint256)': EventFragment;
    'Init()': EventFragment;
    'Lock(address,uint256,uint256,uint256,uint256)': EventFragment;
    'NewAdmin(address)': EventFragment;
    'NewBoostContract(address)': EventFragment;
    'NewBoostWeight(uint256)': EventFragment;
    'NewDurationFactor(uint256)': EventFragment;
    'NewDurationFactorOverdue(uint256)': EventFragment;
    'NewMaxLockDuration(uint256)': EventFragment;
    'NewOperator(address)': EventFragment;
    'NewOverdueFee(uint256)': EventFragment;
    'NewPerformanceFee(uint256)': EventFragment;
    'NewPerformanceFeeContract(uint256)': EventFragment;
    'NewTreasury(address)': EventFragment;
    'NewUnlockFreeDuration(uint256)': EventFragment;
    'NewVCakeContract(address)': EventFragment;
    'NewWithdrawFee(uint256)': EventFragment;
    'NewWithdrawFeeContract(uint256)': EventFragment;
    'NewWithdrawFeePeriod(uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Pause()': EventFragment;
    'Paused(address)': EventFragment;
    'Unlock(address,uint256,uint256)': EventFragment;
    'Unpause()': EventFragment;
    'Unpaused(address)': EventFragment;
    'Withdraw(address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FreeFeeUser'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Harvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Init'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Lock'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewAdmin'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewBoostContract'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewBoostWeight'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewDurationFactor'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewDurationFactorOverdue'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewMaxLockDuration'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewOperator'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewOverdueFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewPerformanceFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewPerformanceFeeContract'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewTreasury'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewUnlockFreeDuration'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewVCakeContract'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewWithdrawFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewWithdrawFeeContract'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewWithdrawFeePeriod'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Pause'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unlock'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpause'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface DepositEventObject {
  sender: string;
  amount: BigNumber;
  shares: BigNumber;
  duration: BigNumber;
  lastDepositedTime: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface FreeFeeUserEventObject {
  user: string;
  free: boolean;
}
export type FreeFeeUserEvent = TypedEvent<[string, boolean], FreeFeeUserEventObject>;

export type FreeFeeUserEventFilter = TypedEventFilter<FreeFeeUserEvent>;

export interface HarvestEventObject {
  sender: string;
  amount: BigNumber;
}
export type HarvestEvent = TypedEvent<[string, BigNumber], HarvestEventObject>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export interface InitEventObject {}
export type InitEvent = TypedEvent<[], InitEventObject>;

export type InitEventFilter = TypedEventFilter<InitEvent>;

export interface LockEventObject {
  sender: string;
  lockedAmount: BigNumber;
  shares: BigNumber;
  lockedDuration: BigNumber;
  blockTimestamp: BigNumber;
}
export type LockEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber, BigNumber], LockEventObject>;

export type LockEventFilter = TypedEventFilter<LockEvent>;

export interface NewAdminEventObject {
  admin: string;
}
export type NewAdminEvent = TypedEvent<[string], NewAdminEventObject>;

export type NewAdminEventFilter = TypedEventFilter<NewAdminEvent>;

export interface NewBoostContractEventObject {
  boostContract: string;
}
export type NewBoostContractEvent = TypedEvent<[string], NewBoostContractEventObject>;

export type NewBoostContractEventFilter = TypedEventFilter<NewBoostContractEvent>;

export interface NewBoostWeightEventObject {
  boostWeight: BigNumber;
}
export type NewBoostWeightEvent = TypedEvent<[BigNumber], NewBoostWeightEventObject>;

export type NewBoostWeightEventFilter = TypedEventFilter<NewBoostWeightEvent>;

export interface NewDurationFactorEventObject {
  durationFactor: BigNumber;
}
export type NewDurationFactorEvent = TypedEvent<[BigNumber], NewDurationFactorEventObject>;

export type NewDurationFactorEventFilter = TypedEventFilter<NewDurationFactorEvent>;

export interface NewDurationFactorOverdueEventObject {
  durationFactorOverdue: BigNumber;
}
export type NewDurationFactorOverdueEvent = TypedEvent<[BigNumber], NewDurationFactorOverdueEventObject>;

export type NewDurationFactorOverdueEventFilter = TypedEventFilter<NewDurationFactorOverdueEvent>;

export interface NewMaxLockDurationEventObject {
  maxLockDuration: BigNumber;
}
export type NewMaxLockDurationEvent = TypedEvent<[BigNumber], NewMaxLockDurationEventObject>;

export type NewMaxLockDurationEventFilter = TypedEventFilter<NewMaxLockDurationEvent>;

export interface NewOperatorEventObject {
  operator: string;
}
export type NewOperatorEvent = TypedEvent<[string], NewOperatorEventObject>;

export type NewOperatorEventFilter = TypedEventFilter<NewOperatorEvent>;

export interface NewOverdueFeeEventObject {
  overdueFee: BigNumber;
}
export type NewOverdueFeeEvent = TypedEvent<[BigNumber], NewOverdueFeeEventObject>;

export type NewOverdueFeeEventFilter = TypedEventFilter<NewOverdueFeeEvent>;

export interface NewPerformanceFeeEventObject {
  performanceFee: BigNumber;
}
export type NewPerformanceFeeEvent = TypedEvent<[BigNumber], NewPerformanceFeeEventObject>;

export type NewPerformanceFeeEventFilter = TypedEventFilter<NewPerformanceFeeEvent>;

export interface NewPerformanceFeeContractEventObject {
  performanceFeeContract: BigNumber;
}
export type NewPerformanceFeeContractEvent = TypedEvent<[BigNumber], NewPerformanceFeeContractEventObject>;

export type NewPerformanceFeeContractEventFilter = TypedEventFilter<NewPerformanceFeeContractEvent>;

export interface NewTreasuryEventObject {
  treasury: string;
}
export type NewTreasuryEvent = TypedEvent<[string], NewTreasuryEventObject>;

export type NewTreasuryEventFilter = TypedEventFilter<NewTreasuryEvent>;

export interface NewUnlockFreeDurationEventObject {
  unlockFreeDuration: BigNumber;
}
export type NewUnlockFreeDurationEvent = TypedEvent<[BigNumber], NewUnlockFreeDurationEventObject>;

export type NewUnlockFreeDurationEventFilter = TypedEventFilter<NewUnlockFreeDurationEvent>;

export interface NewVCakeContractEventObject {
  VCake: string;
}
export type NewVCakeContractEvent = TypedEvent<[string], NewVCakeContractEventObject>;

export type NewVCakeContractEventFilter = TypedEventFilter<NewVCakeContractEvent>;

export interface NewWithdrawFeeEventObject {
  withdrawFee: BigNumber;
}
export type NewWithdrawFeeEvent = TypedEvent<[BigNumber], NewWithdrawFeeEventObject>;

export type NewWithdrawFeeEventFilter = TypedEventFilter<NewWithdrawFeeEvent>;

export interface NewWithdrawFeeContractEventObject {
  withdrawFeeContract: BigNumber;
}
export type NewWithdrawFeeContractEvent = TypedEvent<[BigNumber], NewWithdrawFeeContractEventObject>;

export type NewWithdrawFeeContractEventFilter = TypedEventFilter<NewWithdrawFeeContractEvent>;

export interface NewWithdrawFeePeriodEventObject {
  withdrawFeePeriod: BigNumber;
}
export type NewWithdrawFeePeriodEvent = TypedEvent<[BigNumber], NewWithdrawFeePeriodEventObject>;

export type NewWithdrawFeePeriodEventFilter = TypedEventFilter<NewWithdrawFeePeriodEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PauseEventObject {}
export type PauseEvent = TypedEvent<[], PauseEventObject>;

export type PauseEventFilter = TypedEventFilter<PauseEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnlockEventObject {
  sender: string;
  amount: BigNumber;
  blockTimestamp: BigNumber;
}
export type UnlockEvent = TypedEvent<[string, BigNumber, BigNumber], UnlockEventObject>;

export type UnlockEventFilter = TypedEventFilter<UnlockEvent>;

export interface UnpauseEventObject {}
export type UnpauseEvent = TypedEvent<[], UnpauseEventObject>;

export type UnpauseEventFilter = TypedEventFilter<UnpauseEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawEventObject {
  sender: string;
  amount: BigNumber;
  shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface PancakeswapSyrupCake extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PancakeswapSyrupCakeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BOOST_WEIGHT(overrides?: CallOverrides): Promise<[BigNumber]>;

    BOOST_WEIGHT_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    DURATION_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    DURATION_FACTOR_OVERDUE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_LOCK_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_LOCK_DURATION_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_OVERDUE_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PERFORMANCE_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_WITHDRAW_FEE_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_DEPOSIT_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_LOCK_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_WITHDRAW_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION_FACTOR_SHARE(overrides?: CallOverrides): Promise<[BigNumber]>;

    UNLOCK_FREE_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    VCake(overrides?: CallOverrides): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    available(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(overrides?: CallOverrides): Promise<[BigNumber]>;

    boostContract(overrides?: CallOverrides): Promise<[string]>;

    cakePoolPID(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateOverdueFee(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    calculatePerformanceFee(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateTotalPendingCakeRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateWithdrawFee(_user: string, _shares: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _amount: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    freeOverdueFeeUsers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    freePerformanceFeeUsers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    freeWithdrawFeeUsers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    inCaseTokensGetStuck(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    init(dummyToken: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    masterchefV2(overrides?: CallOverrides): Promise<[string]>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    overdueFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    performanceFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    performanceFeeContract(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setAdmin(_admin: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setBoostContract(
      _boostContract: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setBoostWeight(
      _boostWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDurationFactor(
      _durationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDurationFactorOverdue(
      _durationFactorOverdue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setFreePerformanceFeeUser(
      _user: string,
      _free: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMaxLockDuration(
      _maxLockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setOverdueFee(
      _overdueFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setOverdueFeeUser(
      _user: string,
      _free: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPerformanceFee(
      _performanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPerformanceFeeContract(
      _performanceFeeContract: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setUnlockFreeDuration(
      _unlockFreeDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setVCakeContract(
      _VCake: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setWithdrawFee(
      _withdrawFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setWithdrawFeeContract(
      _withdrawFeeContract: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setWithdrawFeePeriod(
      _withdrawFeePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setWithdrawFeeUser(
      _user: string,
      _free: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalBoostDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLockedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    unlock(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        shares: BigNumber;
        lastDepositedTime: BigNumber;
        cakeAtLastUserAction: BigNumber;
        lastUserActionTime: BigNumber;
        lockStartTime: BigNumber;
        lockEndTime: BigNumber;
        userBoostedShare: BigNumber;
        locked: boolean;
        lockedAmount: BigNumber;
      }
    >;

    withdraw(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    withdrawByAmount(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFeeContract(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFeePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  BOOST_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

  BOOST_WEIGHT_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  DURATION_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  DURATION_FACTOR_OVERDUE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_LOCK_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_LOCK_DURATION_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_OVERDUE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PERFORMANCE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_WITHDRAW_FEE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_DEPOSIT_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_LOCK_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_WITHDRAW_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION_FACTOR_SHARE(overrides?: CallOverrides): Promise<BigNumber>;

  UNLOCK_FREE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  VCake(overrides?: CallOverrides): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  available(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

  boostContract(overrides?: CallOverrides): Promise<string>;

  cakePoolPID(overrides?: CallOverrides): Promise<BigNumber>;

  calculateOverdueFee(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  calculatePerformanceFee(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  calculateTotalPendingCakeRewards(overrides?: CallOverrides): Promise<BigNumber>;

  calculateWithdrawFee(_user: string, _shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _amount: BigNumberish,
    _lockDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  freeOverdueFeeUsers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  freePerformanceFeeUsers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  freeWithdrawFeeUsers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

  inCaseTokensGetStuck(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  init(dummyToken: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  masterchefV2(overrides?: CallOverrides): Promise<string>;

  operator(overrides?: CallOverrides): Promise<string>;

  overdueFee(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

  performanceFeeContract(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setAdmin(_admin: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setBoostContract(
    _boostContract: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setBoostWeight(
    _boostWeight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setDurationFactor(
    _durationFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setDurationFactorOverdue(
    _durationFactorOverdue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setFreePerformanceFeeUser(
    _user: string,
    _free: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMaxLockDuration(
    _maxLockDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setOperator(
    _operator: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setOverdueFee(
    _overdueFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setOverdueFeeUser(
    _user: string,
    _free: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPerformanceFee(
    _performanceFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPerformanceFeeContract(
    _performanceFeeContract: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setUnlockFreeDuration(
    _unlockFreeDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setVCakeContract(
    _VCake: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setWithdrawFee(
    _withdrawFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setWithdrawFeeContract(
    _withdrawFeeContract: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setWithdrawFeePeriod(
    _withdrawFeePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setWithdrawFeeUser(
    _user: string,
    _free: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  totalBoostDebt(overrides?: CallOverrides): Promise<BigNumber>;

  totalLockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  unlock(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  userInfo(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
      shares: BigNumber;
      lastDepositedTime: BigNumber;
      cakeAtLastUserAction: BigNumber;
      lastUserActionTime: BigNumber;
      lockStartTime: BigNumber;
      lockEndTime: BigNumber;
      userBoostedShare: BigNumber;
      locked: boolean;
      lockedAmount: BigNumber;
    }
  >;

  withdraw(
    _shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  withdrawByAmount(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFeeContract(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFeePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BOOST_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    BOOST_WEIGHT_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    DURATION_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    DURATION_FACTOR_OVERDUE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LOCK_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LOCK_DURATION_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_OVERDUE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PERFORMANCE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAW_FEE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DEPOSIT_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LOCK_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_WITHDRAW_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_FACTOR_SHARE(overrides?: CallOverrides): Promise<BigNumber>;

    UNLOCK_FREE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    VCake(overrides?: CallOverrides): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    available(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    boostContract(overrides?: CallOverrides): Promise<string>;

    cakePoolPID(overrides?: CallOverrides): Promise<BigNumber>;

    calculateOverdueFee(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    calculatePerformanceFee(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    calculateTotalPendingCakeRewards(overrides?: CallOverrides): Promise<BigNumber>;

    calculateWithdrawFee(_user: string, _shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(_amount: BigNumberish, _lockDuration: BigNumberish, overrides?: CallOverrides): Promise<void>;

    freeOverdueFeeUsers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    freePerformanceFeeUsers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    freeWithdrawFeeUsers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

    inCaseTokensGetStuck(_token: string, overrides?: CallOverrides): Promise<void>;

    init(dummyToken: string, overrides?: CallOverrides): Promise<void>;

    masterchefV2(overrides?: CallOverrides): Promise<string>;

    operator(overrides?: CallOverrides): Promise<string>;

    overdueFee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFeeContract(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    setBoostContract(_boostContract: string, overrides?: CallOverrides): Promise<void>;

    setBoostWeight(_boostWeight: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setDurationFactor(_durationFactor: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setDurationFactorOverdue(_durationFactorOverdue: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFreePerformanceFeeUser(_user: string, _free: boolean, overrides?: CallOverrides): Promise<void>;

    setMaxLockDuration(_maxLockDuration: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setOperator(_operator: string, overrides?: CallOverrides): Promise<void>;

    setOverdueFee(_overdueFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setOverdueFeeUser(_user: string, _free: boolean, overrides?: CallOverrides): Promise<void>;

    setPerformanceFee(_performanceFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setPerformanceFeeContract(_performanceFeeContract: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setTreasury(_treasury: string, overrides?: CallOverrides): Promise<void>;

    setUnlockFreeDuration(_unlockFreeDuration: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setVCakeContract(_VCake: string, overrides?: CallOverrides): Promise<void>;

    setWithdrawFee(_withdrawFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setWithdrawFeeContract(_withdrawFeeContract: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setWithdrawFeePeriod(_withdrawFeePeriod: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setWithdrawFeeUser(_user: string, _free: boolean, overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    totalBoostDebt(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    unlock(_user: string, overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        shares: BigNumber;
        lastDepositedTime: BigNumber;
        cakeAtLastUserAction: BigNumber;
        lastUserActionTime: BigNumber;
        lockStartTime: BigNumber;
        lockEndTime: BigNumber;
        userBoostedShare: BigNumber;
        locked: boolean;
        lockedAmount: BigNumber;
      }
    >;

    withdraw(_shares: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;

    withdrawByAmount(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeeContract(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeePeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'Deposit(address,uint256,uint256,uint256,uint256)'(
      sender?: string | null,
      amount?: null,
      shares?: null,
      duration?: null,
      lastDepositedTime?: null,
    ): DepositEventFilter;
    Deposit(
      sender?: string | null,
      amount?: null,
      shares?: null,
      duration?: null,
      lastDepositedTime?: null,
    ): DepositEventFilter;

    'FreeFeeUser(address,bool)'(user?: string | null, free?: boolean | null): FreeFeeUserEventFilter;
    FreeFeeUser(user?: string | null, free?: boolean | null): FreeFeeUserEventFilter;

    'Harvest(address,uint256)'(sender?: string | null, amount?: null): HarvestEventFilter;
    Harvest(sender?: string | null, amount?: null): HarvestEventFilter;

    'Init()'(): InitEventFilter;
    Init(): InitEventFilter;

    'Lock(address,uint256,uint256,uint256,uint256)'(
      sender?: string | null,
      lockedAmount?: null,
      shares?: null,
      lockedDuration?: null,
      blockTimestamp?: null,
    ): LockEventFilter;
    Lock(
      sender?: string | null,
      lockedAmount?: null,
      shares?: null,
      lockedDuration?: null,
      blockTimestamp?: null,
    ): LockEventFilter;

    'NewAdmin(address)'(admin?: null): NewAdminEventFilter;
    NewAdmin(admin?: null): NewAdminEventFilter;

    'NewBoostContract(address)'(boostContract?: null): NewBoostContractEventFilter;
    NewBoostContract(boostContract?: null): NewBoostContractEventFilter;

    'NewBoostWeight(uint256)'(boostWeight?: null): NewBoostWeightEventFilter;
    NewBoostWeight(boostWeight?: null): NewBoostWeightEventFilter;

    'NewDurationFactor(uint256)'(durationFactor?: null): NewDurationFactorEventFilter;
    NewDurationFactor(durationFactor?: null): NewDurationFactorEventFilter;

    'NewDurationFactorOverdue(uint256)'(durationFactorOverdue?: null): NewDurationFactorOverdueEventFilter;
    NewDurationFactorOverdue(durationFactorOverdue?: null): NewDurationFactorOverdueEventFilter;

    'NewMaxLockDuration(uint256)'(maxLockDuration?: null): NewMaxLockDurationEventFilter;
    NewMaxLockDuration(maxLockDuration?: null): NewMaxLockDurationEventFilter;

    'NewOperator(address)'(operator?: null): NewOperatorEventFilter;
    NewOperator(operator?: null): NewOperatorEventFilter;

    'NewOverdueFee(uint256)'(overdueFee?: null): NewOverdueFeeEventFilter;
    NewOverdueFee(overdueFee?: null): NewOverdueFeeEventFilter;

    'NewPerformanceFee(uint256)'(performanceFee?: null): NewPerformanceFeeEventFilter;
    NewPerformanceFee(performanceFee?: null): NewPerformanceFeeEventFilter;

    'NewPerformanceFeeContract(uint256)'(performanceFeeContract?: null): NewPerformanceFeeContractEventFilter;
    NewPerformanceFeeContract(performanceFeeContract?: null): NewPerformanceFeeContractEventFilter;

    'NewTreasury(address)'(treasury?: null): NewTreasuryEventFilter;
    NewTreasury(treasury?: null): NewTreasuryEventFilter;

    'NewUnlockFreeDuration(uint256)'(unlockFreeDuration?: null): NewUnlockFreeDurationEventFilter;
    NewUnlockFreeDuration(unlockFreeDuration?: null): NewUnlockFreeDurationEventFilter;

    'NewVCakeContract(address)'(VCake?: null): NewVCakeContractEventFilter;
    NewVCakeContract(VCake?: null): NewVCakeContractEventFilter;

    'NewWithdrawFee(uint256)'(withdrawFee?: null): NewWithdrawFeeEventFilter;
    NewWithdrawFee(withdrawFee?: null): NewWithdrawFeeEventFilter;

    'NewWithdrawFeeContract(uint256)'(withdrawFeeContract?: null): NewWithdrawFeeContractEventFilter;
    NewWithdrawFeeContract(withdrawFeeContract?: null): NewWithdrawFeeContractEventFilter;

    'NewWithdrawFeePeriod(uint256)'(withdrawFeePeriod?: null): NewWithdrawFeePeriodEventFilter;
    NewWithdrawFeePeriod(withdrawFeePeriod?: null): NewWithdrawFeePeriodEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    'Pause()'(): PauseEventFilter;
    Pause(): PauseEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'Unlock(address,uint256,uint256)'(sender?: string | null, amount?: null, blockTimestamp?: null): UnlockEventFilter;
    Unlock(sender?: string | null, amount?: null, blockTimestamp?: null): UnlockEventFilter;

    'Unpause()'(): UnpauseEventFilter;
    Unpause(): UnpauseEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'Withdraw(address,uint256,uint256)'(sender?: string | null, amount?: null, shares?: null): WithdrawEventFilter;
    Withdraw(sender?: string | null, amount?: null, shares?: null): WithdrawEventFilter;
  };

  estimateGas: {
    BOOST_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    BOOST_WEIGHT_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    DURATION_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    DURATION_FACTOR_OVERDUE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LOCK_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LOCK_DURATION_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_OVERDUE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PERFORMANCE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAW_FEE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DEPOSIT_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LOCK_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_WITHDRAW_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_FACTOR_SHARE(overrides?: CallOverrides): Promise<BigNumber>;

    UNLOCK_FREE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    VCake(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    available(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    boostContract(overrides?: CallOverrides): Promise<BigNumber>;

    cakePoolPID(overrides?: CallOverrides): Promise<BigNumber>;

    calculateOverdueFee(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    calculatePerformanceFee(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    calculateTotalPendingCakeRewards(overrides?: CallOverrides): Promise<BigNumber>;

    calculateWithdrawFee(_user: string, _shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    freeOverdueFeeUsers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    freePerformanceFeeUsers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    freeWithdrawFeeUsers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

    inCaseTokensGetStuck(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    init(dummyToken: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    masterchefV2(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    overdueFee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFeeContract(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setAdmin(_admin: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setBoostContract(
      _boostContract: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setBoostWeight(
      _boostWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setDurationFactor(
      _durationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setDurationFactorOverdue(
      _durationFactorOverdue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setFreePerformanceFeeUser(
      _user: string,
      _free: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMaxLockDuration(
      _maxLockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setOperator(_operator: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setOverdueFee(
      _overdueFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setOverdueFeeUser(
      _user: string,
      _free: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setPerformanceFee(
      _performanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setPerformanceFeeContract(
      _performanceFeeContract: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setTreasury(_treasury: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setUnlockFreeDuration(
      _unlockFreeDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setVCakeContract(_VCake: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setWithdrawFee(
      _withdrawFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setWithdrawFeeContract(
      _withdrawFeeContract: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setWithdrawFeePeriod(
      _withdrawFeePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setWithdrawFeeUser(
      _user: string,
      _free: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalBoostDebt(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    unlock(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(_shares: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdrawAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdrawByAmount(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeeContract(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeePeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BOOST_WEIGHT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BOOST_WEIGHT_LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DURATION_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DURATION_FACTOR_OVERDUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_LOCK_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_LOCK_DURATION_LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_OVERDUE_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_PERFORMANCE_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_WITHDRAW_FEE_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_DEPOSIT_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_LOCK_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_WITHDRAW_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION_FACTOR_SHARE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNLOCK_FREE_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VCake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    available(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boostContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cakePoolPID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateOverdueFee(_user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculatePerformanceFee(_user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateTotalPendingCakeRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateWithdrawFee(
      _user: string,
      _shares: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    freeOverdueFeeUsers(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    freePerformanceFeeUsers(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    freeWithdrawFeeUsers(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inCaseTokensGetStuck(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    init(
      dummyToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    masterchefV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    overdueFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performanceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performanceFeeContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setBoostContract(
      _boostContract: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setBoostWeight(
      _boostWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setDurationFactor(
      _durationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setDurationFactorOverdue(
      _durationFactorOverdue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setFreePerformanceFeeUser(
      _user: string,
      _free: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMaxLockDuration(
      _maxLockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setOverdueFee(
      _overdueFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setOverdueFeeUser(
      _user: string,
      _free: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPerformanceFee(
      _performanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPerformanceFeeContract(
      _performanceFeeContract: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setUnlockFreeDuration(
      _unlockFreeDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setVCakeContract(
      _VCake: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setWithdrawFee(
      _withdrawFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setWithdrawFeeContract(
      _withdrawFeeContract: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setWithdrawFeePeriod(
      _withdrawFeePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setWithdrawFeeUser(
      _user: string,
      _free: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBoostDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLockedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlock(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawAll(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    withdrawByAmount(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFeeContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFeePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
