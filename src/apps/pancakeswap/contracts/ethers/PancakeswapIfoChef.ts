/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface PancakeswapIfoChefInterface extends utils.Interface {
  functions: {
    'MAX_CALL_FEE()': FunctionFragment;
    'MAX_PERFORMANCE_FEE()': FunctionFragment;
    'MAX_WITHDRAW_FEE()': FunctionFragment;
    'MAX_WITHDRAW_FEE_PERIOD()': FunctionFragment;
    'admin()': FunctionFragment;
    'available()': FunctionFragment;
    'balanceOf()': FunctionFragment;
    'calculateHarvestCakeRewards()': FunctionFragment;
    'calculateTotalPendingCakeRewards()': FunctionFragment;
    'callFee()': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'emergencyWithdraw()': FunctionFragment;
    'emergencyWithdrawAll()': FunctionFragment;
    'endBlock()': FunctionFragment;
    'getPricePerFullShare()': FunctionFragment;
    'getUserCredit(address)': FunctionFragment;
    'harvest()': FunctionFragment;
    'inCaseTokensGetStuck(address)': FunctionFragment;
    'lastHarvestedTime()': FunctionFragment;
    'masterchef()': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'performanceFee()': FunctionFragment;
    'receiptToken()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setAdmin(address)': FunctionFragment;
    'setCallFee(uint256)': FunctionFragment;
    'setPerformanceFee(uint256)': FunctionFragment;
    'setTreasury(address)': FunctionFragment;
    'setWithdrawFee(uint256)': FunctionFragment;
    'setWithdrawFeePeriod(uint256)': FunctionFragment;
    'startBlock()': FunctionFragment;
    'token()': FunctionFragment;
    'totalShares()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'treasury()': FunctionFragment;
    'unpause()': FunctionFragment;
    'updateEndBlock(uint256)': FunctionFragment;
    'updateStartAndEndBlocks(uint256,uint256)': FunctionFragment;
    'userIFOInfo(address)': FunctionFragment;
    'userInfo(address)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdrawAll()': FunctionFragment;
    'withdrawFee()': FunctionFragment;
    'withdrawFeePeriod()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'MAX_CALL_FEE'
      | 'MAX_PERFORMANCE_FEE'
      | 'MAX_WITHDRAW_FEE'
      | 'MAX_WITHDRAW_FEE_PERIOD'
      | 'admin'
      | 'available'
      | 'balanceOf'
      | 'calculateHarvestCakeRewards'
      | 'calculateTotalPendingCakeRewards'
      | 'callFee'
      | 'deposit'
      | 'emergencyWithdraw'
      | 'emergencyWithdrawAll'
      | 'endBlock'
      | 'getPricePerFullShare'
      | 'getUserCredit'
      | 'harvest'
      | 'inCaseTokensGetStuck'
      | 'lastHarvestedTime'
      | 'masterchef'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'performanceFee'
      | 'receiptToken'
      | 'renounceOwnership'
      | 'setAdmin'
      | 'setCallFee'
      | 'setPerformanceFee'
      | 'setTreasury'
      | 'setWithdrawFee'
      | 'setWithdrawFeePeriod'
      | 'startBlock'
      | 'token'
      | 'totalShares'
      | 'transferOwnership'
      | 'treasury'
      | 'unpause'
      | 'updateEndBlock'
      | 'updateStartAndEndBlocks'
      | 'userIFOInfo'
      | 'userInfo'
      | 'withdraw'
      | 'withdrawAll'
      | 'withdrawFee'
      | 'withdrawFeePeriod',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'MAX_CALL_FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_PERFORMANCE_FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_WITHDRAW_FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_WITHDRAW_FEE_PERIOD', values?: undefined): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'available', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values?: undefined): string;
  encodeFunctionData(functionFragment: 'calculateHarvestCakeRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'calculateTotalPendingCakeRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'callFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'emergencyWithdraw', values?: undefined): string;
  encodeFunctionData(functionFragment: 'emergencyWithdrawAll', values?: undefined): string;
  encodeFunctionData(functionFragment: 'endBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPricePerFullShare', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getUserCredit', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'harvest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'inCaseTokensGetStuck', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lastHarvestedTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'masterchef', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'performanceFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'receiptToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setAdmin', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setCallFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setPerformanceFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setTreasury', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setWithdrawFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setWithdrawFeePeriod', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'startBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalShares', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'treasury', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateEndBlock', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'updateStartAndEndBlocks',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'userIFOInfo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'userInfo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'withdrawAll', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawFeePeriod', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'MAX_CALL_FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_PERFORMANCE_FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_WITHDRAW_FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_WITHDRAW_FEE_PERIOD', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'available', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateHarvestCakeRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateTotalPendingCakeRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'callFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdrawAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'endBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPricePerFullShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserCredit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'inCaseTokensGetStuck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastHarvestedTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'masterchef', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'performanceFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'receiptToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCallFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPerformanceFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTreasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWithdrawFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWithdrawFeePeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateEndBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateStartAndEndBlocks', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userIFOInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawFeePeriod', data: BytesLike): Result;

  events: {
    'Deposit(address,uint256,uint256,uint256)': EventFragment;
    'Harvest(address,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Pause()': EventFragment;
    'Paused(address)': EventFragment;
    'Unpause()': EventFragment;
    'Unpaused(address)': EventFragment;
    'UpdateEndBlock(uint256)': EventFragment;
    'UpdateStartAndEndBlocks(uint256,uint256)': EventFragment;
    'UpdateUserIFO(address,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'Withdraw(address,uint256,uint256)': EventFragment;
    'ZeroFreeIFO(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Harvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Pause'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpause'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateEndBlock'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateStartAndEndBlocks'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateUserIFO'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ZeroFreeIFO'): EventFragment;
}

export interface DepositEventObject {
  sender: string;
  amount: BigNumber;
  shares: BigNumber;
  lastDepositedTime: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface HarvestEventObject {
  sender: string;
  performanceFee: BigNumber;
  callFee: BigNumber;
}
export type HarvestEvent = TypedEvent<[string, BigNumber, BigNumber], HarvestEventObject>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PauseEventObject {}
export type PauseEvent = TypedEvent<[], PauseEventObject>;

export type PauseEventFilter = TypedEventFilter<PauseEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpauseEventObject {}
export type UnpauseEvent = TypedEvent<[], UnpauseEventObject>;

export type UnpauseEventFilter = TypedEventFilter<UnpauseEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpdateEndBlockEventObject {
  endBlock: BigNumber;
}
export type UpdateEndBlockEvent = TypedEvent<[BigNumber], UpdateEndBlockEventObject>;

export type UpdateEndBlockEventFilter = TypedEventFilter<UpdateEndBlockEvent>;

export interface UpdateStartAndEndBlocksEventObject {
  startBlock: BigNumber;
  endBlock: BigNumber;
}
export type UpdateStartAndEndBlocksEvent = TypedEvent<[BigNumber, BigNumber], UpdateStartAndEndBlocksEventObject>;

export type UpdateStartAndEndBlocksEventFilter = TypedEventFilter<UpdateStartAndEndBlocksEvent>;

export interface UpdateUserIFOEventObject {
  sender: string;
  lastAvgBalance: BigNumber;
  lastActionBalance: BigNumber;
  lastValidActionBalance: BigNumber;
  lastActionBlock: BigNumber;
  lastValidActionBlock: BigNumber;
}
export type UpdateUserIFOEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  UpdateUserIFOEventObject
>;

export type UpdateUserIFOEventFilter = TypedEventFilter<UpdateUserIFOEvent>;

export interface WithdrawEventObject {
  sender: string;
  amount: BigNumber;
  shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface ZeroFreeIFOEventObject {
  sender: string;
  currentBlock: BigNumber;
}
export type ZeroFreeIFOEvent = TypedEvent<[string, BigNumber], ZeroFreeIFOEventObject>;

export type ZeroFreeIFOEventFilter = TypedEventFilter<ZeroFreeIFOEvent>;

export interface PancakeswapIfoChef extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PancakeswapIfoChefInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_CALL_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PERFORMANCE_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_WITHDRAW_FEE_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    available(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateHarvestCakeRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateTotalPendingCakeRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    callFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    emergencyWithdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    emergencyWithdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    endBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserCredit(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { avgBalance: BigNumber }>;

    harvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    inCaseTokensGetStuck(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    lastHarvestedTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    masterchef(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    performanceFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    receiptToken(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setCallFee(
      _callFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPerformanceFee(
      _performanceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setWithdrawFee(
      _withdrawFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setWithdrawFeePeriod(
      _withdrawFeePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    updateEndBlock(
      _endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateStartAndEndBlocks(
      _startBlock: PromiseOrValue<BigNumberish>,
      _endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    userIFOInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        lastActionBalance: BigNumber;
        lastValidActionBalance: BigNumber;
        lastActionBlock: BigNumber;
        lastValidActionBlock: BigNumber;
        lastAvgBalance: BigNumber;
      }
    >;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        shares: BigNumber;
        lastDepositedTime: BigNumber;
        cakeAtLastUserAction: BigNumber;
        lastUserActionTime: BigNumber;
      }
    >;

    withdraw(
      _shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    withdrawFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFeePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  MAX_CALL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PERFORMANCE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_WITHDRAW_FEE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  available(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

  calculateHarvestCakeRewards(overrides?: CallOverrides): Promise<BigNumber>;

  calculateTotalPendingCakeRewards(overrides?: CallOverrides): Promise<BigNumber>;

  callFee(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  emergencyWithdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  emergencyWithdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  endBlock(overrides?: CallOverrides): Promise<BigNumber>;

  getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

  getUserCredit(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  harvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  inCaseTokensGetStuck(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  lastHarvestedTime(overrides?: CallOverrides): Promise<BigNumber>;

  masterchef(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

  receiptToken(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setCallFee(
    _callFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPerformanceFee(
    _performanceFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setWithdrawFee(
    _withdrawFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setWithdrawFeePeriod(
    _withdrawFeePeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  updateEndBlock(
    _endBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateStartAndEndBlocks(
    _startBlock: PromiseOrValue<BigNumberish>,
    _endBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  userIFOInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      lastActionBalance: BigNumber;
      lastValidActionBalance: BigNumber;
      lastActionBlock: BigNumber;
      lastValidActionBlock: BigNumber;
      lastAvgBalance: BigNumber;
    }
  >;

  userInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      shares: BigNumber;
      lastDepositedTime: BigNumber;
      cakeAtLastUserAction: BigNumber;
      lastUserActionTime: BigNumber;
    }
  >;

  withdraw(
    _shares: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFeePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    MAX_CALL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PERFORMANCE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAW_FEE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    available(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    calculateHarvestCakeRewards(overrides?: CallOverrides): Promise<BigNumber>;

    calculateTotalPendingCakeRewards(overrides?: CallOverrides): Promise<BigNumber>;

    callFee(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    emergencyWithdraw(overrides?: CallOverrides): Promise<void>;

    emergencyWithdrawAll(overrides?: CallOverrides): Promise<void>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

    getUserCredit(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    harvest(overrides?: CallOverrides): Promise<void>;

    inCaseTokensGetStuck(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    lastHarvestedTime(overrides?: CallOverrides): Promise<BigNumber>;

    masterchef(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    receiptToken(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdmin(_admin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setCallFee(_callFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setPerformanceFee(_performanceFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setWithdrawFee(_withdrawFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setWithdrawFeePeriod(_withdrawFeePeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateEndBlock(_endBlock: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateStartAndEndBlocks(
      _startBlock: PromiseOrValue<BigNumberish>,
      _endBlock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    userIFOInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        lastActionBalance: BigNumber;
        lastValidActionBalance: BigNumber;
        lastActionBlock: BigNumber;
        lastValidActionBlock: BigNumber;
        lastAvgBalance: BigNumber;
      }
    >;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        shares: BigNumber;
        lastDepositedTime: BigNumber;
        cakeAtLastUserAction: BigNumber;
        lastUserActionTime: BigNumber;
      }
    >;

    withdraw(_shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeePeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'Deposit(address,uint256,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      amount?: null,
      shares?: null,
      lastDepositedTime?: null,
    ): DepositEventFilter;
    Deposit(
      sender?: PromiseOrValue<string> | null,
      amount?: null,
      shares?: null,
      lastDepositedTime?: null,
    ): DepositEventFilter;

    'Harvest(address,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      performanceFee?: null,
      callFee?: null,
    ): HarvestEventFilter;
    Harvest(sender?: PromiseOrValue<string> | null, performanceFee?: null, callFee?: null): HarvestEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'Pause()'(): PauseEventFilter;
    Pause(): PauseEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'Unpause()'(): UnpauseEventFilter;
    Unpause(): UnpauseEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'UpdateEndBlock(uint256)'(endBlock?: null): UpdateEndBlockEventFilter;
    UpdateEndBlock(endBlock?: null): UpdateEndBlockEventFilter;

    'UpdateStartAndEndBlocks(uint256,uint256)'(startBlock?: null, endBlock?: null): UpdateStartAndEndBlocksEventFilter;
    UpdateStartAndEndBlocks(startBlock?: null, endBlock?: null): UpdateStartAndEndBlocksEventFilter;

    'UpdateUserIFO(address,uint256,uint256,uint256,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      lastAvgBalance?: null,
      lastActionBalance?: null,
      lastValidActionBalance?: null,
      lastActionBlock?: null,
      lastValidActionBlock?: null,
    ): UpdateUserIFOEventFilter;
    UpdateUserIFO(
      sender?: PromiseOrValue<string> | null,
      lastAvgBalance?: null,
      lastActionBalance?: null,
      lastValidActionBalance?: null,
      lastActionBlock?: null,
      lastValidActionBlock?: null,
    ): UpdateUserIFOEventFilter;

    'Withdraw(address,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      amount?: null,
      shares?: null,
    ): WithdrawEventFilter;
    Withdraw(sender?: PromiseOrValue<string> | null, amount?: null, shares?: null): WithdrawEventFilter;

    'ZeroFreeIFO(address,uint256)'(sender?: PromiseOrValue<string> | null, currentBlock?: null): ZeroFreeIFOEventFilter;
    ZeroFreeIFO(sender?: PromiseOrValue<string> | null, currentBlock?: null): ZeroFreeIFOEventFilter;
  };

  estimateGas: {
    MAX_CALL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PERFORMANCE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAW_FEE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    available(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    calculateHarvestCakeRewards(overrides?: CallOverrides): Promise<BigNumber>;

    calculateTotalPendingCakeRewards(overrides?: CallOverrides): Promise<BigNumber>;

    callFee(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    emergencyWithdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    emergencyWithdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<BigNumber>;

    getUserCredit(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    harvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    inCaseTokensGetStuck(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    lastHarvestedTime(overrides?: CallOverrides): Promise<BigNumber>;

    masterchef(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    receiptToken(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setCallFee(
      _callFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPerformanceFee(
      _performanceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setWithdrawFee(
      _withdrawFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setWithdrawFeePeriod(
      _withdrawFeePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    updateEndBlock(
      _endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateStartAndEndBlocks(
      _startBlock: PromiseOrValue<BigNumberish>,
      _endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    userIFOInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeePeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_CALL_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_PERFORMANCE_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_WITHDRAW_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_WITHDRAW_FEE_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    available(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateHarvestCakeRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateTotalPendingCakeRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    emergencyWithdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    endBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPricePerFullShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserCredit(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    inCaseTokensGetStuck(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    lastHarvestedTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    masterchef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performanceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiptToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setCallFee(
      _callFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPerformanceFee(
      _performanceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setWithdrawFee(
      _withdrawFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setWithdrawFeePeriod(
      _withdrawFeePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    updateEndBlock(
      _endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateStartAndEndBlocks(
      _startBlock: PromiseOrValue<BigNumberish>,
      _endBlock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    userIFOInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    withdrawFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFeePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
