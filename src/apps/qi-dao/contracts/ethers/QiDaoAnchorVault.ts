/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface QiDaoAnchorVaultInterface extends utils.Interface {
  functions: {
    'getReserves()': FunctionFragment;
    'transferToken(address,uint256)': FunctionFragment;
    'swapTo(uint256)': FunctionFragment;
    'usdcRate()': FunctionFragment;
    'mimaticRate()': FunctionFragment;
    'setAdmin(address)': FunctionFragment;
    'setUSDCRatePerMimatic(uint256)': FunctionFragment;
    'swapFrom(uint256)': FunctionFragment;
    'setMimaticRatePerUSDC(uint256)': FunctionFragment;
    'admin()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'getReserves'
      | 'transferToken'
      | 'swapTo'
      | 'usdcRate'
      | 'mimaticRate'
      | 'setAdmin'
      | 'setUSDCRatePerMimatic'
      | 'swapFrom'
      | 'setMimaticRatePerUSDC'
      | 'admin',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'getReserves', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transferToken',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'swapTo', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'usdcRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mimaticRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setAdmin', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setUSDCRatePerMimatic', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'swapFrom', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setMimaticRatePerUSDC', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'getReserves', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'usdcRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mimaticRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUSDCRatePerMimatic', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMimaticRatePerUSDC', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;

  events: {};
}

export interface QiDaoAnchorVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QiDaoAnchorVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    transferToken(
      token: PromiseOrValue<string>,
      amountToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swapTo(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    usdcRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    mimaticRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setUSDCRatePerMimatic(
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swapFrom(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMimaticRatePerUSDC(
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;
  };

  getReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  transferToken(
    token: PromiseOrValue<string>,
    amountToken: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swapTo(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  usdcRate(overrides?: CallOverrides): Promise<BigNumber>;

  mimaticRate(overrides?: CallOverrides): Promise<BigNumber>;

  setAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setUSDCRatePerMimatic(
    _rate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swapFrom(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMimaticRatePerUSDC(
    _rate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    transferToken(
      token: PromiseOrValue<string>,
      amountToken: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapTo(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    usdcRate(overrides?: CallOverrides): Promise<BigNumber>;

    mimaticRate(overrides?: CallOverrides): Promise<BigNumber>;

    setAdmin(_admin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setUSDCRatePerMimatic(_rate: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    swapFrom(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setMimaticRatePerUSDC(_rate: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    transferToken(
      token: PromiseOrValue<string>,
      amountToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swapTo(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    usdcRate(overrides?: CallOverrides): Promise<BigNumber>;

    mimaticRate(overrides?: CallOverrides): Promise<BigNumber>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setUSDCRatePerMimatic(
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swapFrom(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMimaticRatePerUSDC(
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferToken(
      token: PromiseOrValue<string>,
      amountToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swapTo(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    usdcRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mimaticRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setUSDCRatePerMimatic(
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swapFrom(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMimaticRatePerUSDC(
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
