/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface EvmoswapMasterchefInterface extends utils.Interface {
  functions: {
    'BONUS_MULTIPLIER()': FunctionFragment;
    'MAX_DEPOSIT_FEE_PERCENT()': FunctionFragment;
    'TOKENLESS_PRODUCTION()': FunctionFragment;
    'add(uint256,uint256,address,address,bool,bool)': FunctionFragment;
    'daoAddr()': FunctionFragment;
    'daoPercent()': FunctionFragment;
    'deposit(uint256,uint256)': FunctionFragment;
    'depositFor(address,uint256,uint256)': FunctionFragment;
    'emergencyWithdraw(uint256)': FunctionFragment;
    'emo()': FunctionFragment;
    'emoPerSecond()': FunctionFragment;
    'enterStaking(uint256)': FunctionFragment;
    'feeAddr()': FunctionFragment;
    'getMultiplier(uint256,uint256)': FunctionFragment;
    'harvestAllRewards(address)': FunctionFragment;
    'lastTimeDaoWithdraw()': FunctionFragment;
    'leaveStaking(uint256)': FunctionFragment;
    'massUpdatePools()': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingTokens(uint256,address)': FunctionFragment;
    'percentDec()': FunctionFragment;
    'poolExistence(address)': FunctionFragment;
    'poolInfo(uint256)': FunctionFragment;
    'poolLength()': FunctionFragment;
    'refAddr()': FunctionFragment;
    'refPercent()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardMinter()': FunctionFragment;
    'safuAddr()': FunctionFragment;
    'safuPercent()': FunctionFragment;
    'set(uint256,uint256,uint256,address,bool)': FunctionFragment;
    'setDaoAddress(address)': FunctionFragment;
    'setEmoPerSecond(uint256)': FunctionFragment;
    'setFeeAddress(address)': FunctionFragment;
    'setPool0Staker(address[],bool)': FunctionFragment;
    'setRefAddress(address)': FunctionFragment;
    'setSafuAddress(address)': FunctionFragment;
    'setStartTime(uint256)': FunctionFragment;
    'setWhitelist(address[],bool)': FunctionFragment;
    'stakingPercent()': FunctionFragment;
    'startTime()': FunctionFragment;
    'toggleWhitelistable()': FunctionFragment;
    'totalAllocPoint()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateMultiplier(uint256)': FunctionFragment;
    'updatePool(uint256)': FunctionFragment;
    'userInfo(uint256,address)': FunctionFragment;
    'votingEscrow()': FunctionFragment;
    'whitelist(address)': FunctionFragment;
    'whitelistable()': FunctionFragment;
    'withdraw(uint256,uint256)': FunctionFragment;
    'withdrawDevAndRefFee()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BONUS_MULTIPLIER'
      | 'MAX_DEPOSIT_FEE_PERCENT'
      | 'TOKENLESS_PRODUCTION'
      | 'add'
      | 'daoAddr'
      | 'daoPercent'
      | 'deposit'
      | 'depositFor'
      | 'emergencyWithdraw'
      | 'emo'
      | 'emoPerSecond'
      | 'enterStaking'
      | 'feeAddr'
      | 'getMultiplier'
      | 'harvestAllRewards'
      | 'lastTimeDaoWithdraw'
      | 'leaveStaking'
      | 'massUpdatePools'
      | 'owner'
      | 'pendingTokens'
      | 'percentDec'
      | 'poolExistence'
      | 'poolInfo'
      | 'poolLength'
      | 'refAddr'
      | 'refPercent'
      | 'renounceOwnership'
      | 'rewardMinter'
      | 'safuAddr'
      | 'safuPercent'
      | 'set'
      | 'setDaoAddress'
      | 'setEmoPerSecond'
      | 'setFeeAddress'
      | 'setPool0Staker'
      | 'setRefAddress'
      | 'setSafuAddress'
      | 'setStartTime'
      | 'setWhitelist'
      | 'stakingPercent'
      | 'startTime'
      | 'toggleWhitelistable'
      | 'totalAllocPoint'
      | 'transferOwnership'
      | 'updateMultiplier'
      | 'updatePool'
      | 'userInfo'
      | 'votingEscrow'
      | 'whitelist'
      | 'whitelistable'
      | 'withdraw'
      | 'withdrawDevAndRefFee',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BONUS_MULTIPLIER', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_DEPOSIT_FEE_PERCENT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'TOKENLESS_PRODUCTION', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'add',
    values: [BigNumberish, BigNumberish, string, string, boolean, boolean],
  ): string;
  encodeFunctionData(functionFragment: 'daoAddr', values?: undefined): string;
  encodeFunctionData(functionFragment: 'daoPercent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'depositFor', values: [string, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'emergencyWithdraw', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'emo', values?: undefined): string;
  encodeFunctionData(functionFragment: 'emoPerSecond', values?: undefined): string;
  encodeFunctionData(functionFragment: 'enterStaking', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'feeAddr', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMultiplier', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'harvestAllRewards', values: [string]): string;
  encodeFunctionData(functionFragment: 'lastTimeDaoWithdraw', values?: undefined): string;
  encodeFunctionData(functionFragment: 'leaveStaking', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'massUpdatePools', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingTokens', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'percentDec', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolExistence', values: [string]): string;
  encodeFunctionData(functionFragment: 'poolInfo', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'poolLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'refAddr', values?: undefined): string;
  encodeFunctionData(functionFragment: 'refPercent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardMinter', values?: undefined): string;
  encodeFunctionData(functionFragment: 'safuAddr', values?: undefined): string;
  encodeFunctionData(functionFragment: 'safuPercent', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'set',
    values: [BigNumberish, BigNumberish, BigNumberish, string, boolean],
  ): string;
  encodeFunctionData(functionFragment: 'setDaoAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'setEmoPerSecond', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setFeeAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'setPool0Staker', values: [string[], boolean]): string;
  encodeFunctionData(functionFragment: 'setRefAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'setSafuAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'setStartTime', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setWhitelist', values: [string[], boolean]): string;
  encodeFunctionData(functionFragment: 'stakingPercent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'startTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'toggleWhitelistable', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalAllocPoint', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateMultiplier', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updatePool', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'userInfo', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'votingEscrow', values?: undefined): string;
  encodeFunctionData(functionFragment: 'whitelist', values: [string]): string;
  encodeFunctionData(functionFragment: 'whitelistable', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawDevAndRefFee', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'BONUS_MULTIPLIER', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_DEPOSIT_FEE_PERCENT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'TOKENLESS_PRODUCTION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'add', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'daoAddr', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'daoPercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emoPerSecond', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enterStaking', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeAddr', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvestAllRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastTimeDaoWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'leaveStaking', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'massUpdatePools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'percentDec', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolExistence', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'refAddr', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'refPercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardMinter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safuAddr', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safuPercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDaoAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEmoPerSecond', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPool0Staker', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRefAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSafuAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setStartTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakingPercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'toggleWhitelistable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAllocPoint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'votingEscrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawDevAndRefFee', data: BytesLike): Result;

  events: {
    'Add(uint256,uint256,address,address,bool)': EventFragment;
    'Deposit(address,address,uint256,uint256)': EventFragment;
    'EmergencyWithdraw(address,uint256,uint256)': EventFragment;
    'Error(bytes)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Set(uint256,uint256,address)': EventFragment;
    'Withdraw(address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Add'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Error'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Set'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface AddEventObject {
  pid: BigNumber;
  allocPoint: BigNumber;
  lpToken: string;
  incentivesController: string;
  boost: boolean;
}
export type AddEvent = TypedEvent<[BigNumber, BigNumber, string, string, boolean], AddEventObject>;

export type AddEventFilter = TypedEventFilter<AddEvent>;

export interface DepositEventObject {
  from: string;
  to: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EmergencyWithdrawEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], EmergencyWithdrawEventObject>;

export type EmergencyWithdrawEventFilter = TypedEventFilter<EmergencyWithdrawEvent>;

export interface ErrorEventObject {
  error: string;
}
export type ErrorEvent = TypedEvent<[string], ErrorEventObject>;

export type ErrorEventFilter = TypedEventFilter<ErrorEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface SetEventObject {
  pid: BigNumber;
  allocPoint: BigNumber;
  incentivesController: string;
}
export type SetEvent = TypedEvent<[BigNumber, BigNumber, string], SetEventObject>;

export type SetEventFilter = TypedEventFilter<SetEvent>;

export interface WithdrawEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface EvmoswapMasterchef extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EvmoswapMasterchefInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BONUS_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_DEPOSIT_FEE_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOKENLESS_PRODUCTION(overrides?: CallOverrides): Promise<[BigNumber]>;

    add(
      _allocPoint: BigNumberish,
      _depositFeePercent: BigNumberish,
      _lpToken: string,
      _incentivesController: string,
      _boost: boolean,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    daoAddr(overrides?: CallOverrides): Promise<[string]>;

    daoPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositFor(
      _user: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    emo(overrides?: CallOverrides): Promise<[string]>;

    emoPerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    enterStaking(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    feeAddr(overrides?: CallOverrides): Promise<[string]>;

    getMultiplier(_from: BigNumberish, _to: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    harvestAllRewards(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    lastTimeDaoWithdraw(overrides?: CallOverrides): Promise<[BigNumber]>;

    leaveStaking(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    massUpdatePools(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingTokens(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<[string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }>;

    percentDec(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolExistence(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, boolean, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        lpToken: string;
        workingSupply: BigNumber;
        boost: boolean;
        allocPoint: BigNumber;
        lastRewardTime: BigNumber;
        accEmoPerShare: BigNumber;
        depositFeePercent: BigNumber;
        incentivesController: string;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    refAddr(overrides?: CallOverrides): Promise<[string]>;

    refPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    rewardMinter(overrides?: CallOverrides): Promise<[string]>;

    safuAddr(overrides?: CallOverrides): Promise<[string]>;

    safuPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _depositFeePercent: BigNumberish,
      _incentivesController: string,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDaoAddress(
      _daoAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setEmoPerSecond(
      _emoPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setFeeAddress(
      _feeAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPool0Staker(
      _users: string[],
      _flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRefAddress(
      _refAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setSafuAddress(
      _safuAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setStartTime(
      _startTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setWhitelist(
      _users: string[],
      _flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    stakingPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    toggleWhitelistable(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateMultiplier(
      multiplierNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        workingAmount: BigNumber;
        rewardDebt: BigNumber;
      }
    >;

    votingEscrow(overrides?: CallOverrides): Promise<[string]>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    whitelistable(overrides?: CallOverrides): Promise<[boolean]>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawDevAndRefFee(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;
  };

  BONUS_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_DEPOSIT_FEE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  TOKENLESS_PRODUCTION(overrides?: CallOverrides): Promise<BigNumber>;

  add(
    _allocPoint: BigNumberish,
    _depositFeePercent: BigNumberish,
    _lpToken: string,
    _incentivesController: string,
    _boost: boolean,
    _withUpdate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  daoAddr(overrides?: CallOverrides): Promise<string>;

  daoPercent(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositFor(
    _user: string,
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  emo(overrides?: CallOverrides): Promise<string>;

  emoPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  enterStaking(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  feeAddr(overrides?: CallOverrides): Promise<string>;

  getMultiplier(_from: BigNumberish, _to: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  harvestAllRewards(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  lastTimeDaoWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

  leaveStaking(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  massUpdatePools(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingTokens(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides,
  ): Promise<[string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }>;

  percentDec(overrides?: CallOverrides): Promise<BigNumber>;

  poolExistence(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, boolean, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      lpToken: string;
      workingSupply: BigNumber;
      boost: boolean;
      allocPoint: BigNumber;
      lastRewardTime: BigNumber;
      accEmoPerShare: BigNumber;
      depositFeePercent: BigNumber;
      incentivesController: string;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  refAddr(overrides?: CallOverrides): Promise<string>;

  refPercent(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  rewardMinter(overrides?: CallOverrides): Promise<string>;

  safuAddr(overrides?: CallOverrides): Promise<string>;

  safuPercent(overrides?: CallOverrides): Promise<BigNumber>;

  set(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _depositFeePercent: BigNumberish,
    _incentivesController: string,
    _withUpdate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setDaoAddress(
    _daoAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setEmoPerSecond(
    _emoPerSecond: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setFeeAddress(
    _feeAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPool0Staker(
    _users: string[],
    _flag: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRefAddress(
    _refAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setSafuAddress(
    _safuAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setStartTime(
    _startTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setWhitelist(
    _users: string[],
    _flag: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  stakingPercent(overrides?: CallOverrides): Promise<BigNumber>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  toggleWhitelistable(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateMultiplier(
    multiplierNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updatePool(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      workingAmount: BigNumber;
      rewardDebt: BigNumber;
    }
  >;

  votingEscrow(overrides?: CallOverrides): Promise<string>;

  whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  whitelistable(overrides?: CallOverrides): Promise<boolean>;

  withdraw(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawDevAndRefFee(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  callStatic: {
    BONUS_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DEPOSIT_FEE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    TOKENLESS_PRODUCTION(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _allocPoint: BigNumberish,
      _depositFeePercent: BigNumberish,
      _lpToken: string,
      _incentivesController: string,
      _boost: boolean,
      _withUpdate: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    daoAddr(overrides?: CallOverrides): Promise<string>;

    daoPercent(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(_pid: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositFor(_user: string, _pid: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    emergencyWithdraw(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    emo(overrides?: CallOverrides): Promise<string>;

    emoPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    enterStaking(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    feeAddr(overrides?: CallOverrides): Promise<string>;

    getMultiplier(_from: BigNumberish, _to: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    harvestAllRewards(_user: string, overrides?: CallOverrides): Promise<void>;

    lastTimeDaoWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    leaveStaking(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingTokens(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<[string[], BigNumber[]] & { tokens: string[]; amounts: BigNumber[] }>;

    percentDec(overrides?: CallOverrides): Promise<BigNumber>;

    poolExistence(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, boolean, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        lpToken: string;
        workingSupply: BigNumber;
        boost: boolean;
        allocPoint: BigNumber;
        lastRewardTime: BigNumber;
        accEmoPerShare: BigNumber;
        depositFeePercent: BigNumber;
        incentivesController: string;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    refAddr(overrides?: CallOverrides): Promise<string>;

    refPercent(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardMinter(overrides?: CallOverrides): Promise<string>;

    safuAddr(overrides?: CallOverrides): Promise<string>;

    safuPercent(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _depositFeePercent: BigNumberish,
      _incentivesController: string,
      _withUpdate: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDaoAddress(_daoAddr: string, overrides?: CallOverrides): Promise<void>;

    setEmoPerSecond(_emoPerSecond: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFeeAddress(_feeAddr: string, overrides?: CallOverrides): Promise<void>;

    setPool0Staker(_users: string[], _flag: boolean, overrides?: CallOverrides): Promise<void>;

    setRefAddress(_refAddr: string, overrides?: CallOverrides): Promise<void>;

    setSafuAddress(_safuAddr: string, overrides?: CallOverrides): Promise<void>;

    setStartTime(_startTime: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setWhitelist(_users: string[], _flag: boolean, overrides?: CallOverrides): Promise<void>;

    stakingPercent(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    toggleWhitelistable(overrides?: CallOverrides): Promise<void>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    updateMultiplier(multiplierNumber: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updatePool(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        workingAmount: BigNumber;
        rewardDebt: BigNumber;
      }
    >;

    votingEscrow(overrides?: CallOverrides): Promise<string>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    whitelistable(overrides?: CallOverrides): Promise<boolean>;

    withdraw(_pid: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawDevAndRefFee(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Add(uint256,uint256,address,address,bool)'(
      pid?: BigNumberish | null,
      allocPoint?: null,
      lpToken?: string | null,
      incentivesController?: string | null,
      boost?: null,
    ): AddEventFilter;
    Add(
      pid?: BigNumberish | null,
      allocPoint?: null,
      lpToken?: string | null,
      incentivesController?: string | null,
      boost?: null,
    ): AddEventFilter;

    'Deposit(address,address,uint256,uint256)'(
      from?: string | null,
      to?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
    ): DepositEventFilter;
    Deposit(from?: string | null, to?: string | null, pid?: BigNumberish | null, amount?: null): DepositEventFilter;

    'EmergencyWithdraw(address,uint256,uint256)'(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(user?: string | null, pid?: BigNumberish | null, amount?: null): EmergencyWithdrawEventFilter;

    'Error(bytes)'(error?: null): ErrorEventFilter;
    Error(error?: null): ErrorEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    'Set(uint256,uint256,address)'(
      pid?: BigNumberish | null,
      allocPoint?: null,
      incentivesController?: string | null,
    ): SetEventFilter;
    Set(pid?: BigNumberish | null, allocPoint?: null, incentivesController?: string | null): SetEventFilter;

    'Withdraw(address,uint256,uint256)'(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
    ): WithdrawEventFilter;
    Withdraw(user?: string | null, pid?: BigNumberish | null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    BONUS_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DEPOSIT_FEE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    TOKENLESS_PRODUCTION(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _allocPoint: BigNumberish,
      _depositFeePercent: BigNumberish,
      _lpToken: string,
      _incentivesController: string,
      _boost: boolean,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    daoAddr(overrides?: CallOverrides): Promise<BigNumber>;

    daoPercent(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    depositFor(
      _user: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    emo(overrides?: CallOverrides): Promise<BigNumber>;

    emoPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    enterStaking(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    feeAddr(overrides?: CallOverrides): Promise<BigNumber>;

    getMultiplier(_from: BigNumberish, _to: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    harvestAllRewards(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    lastTimeDaoWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    leaveStaking(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    massUpdatePools(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingTokens(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<BigNumber>;

    percentDec(overrides?: CallOverrides): Promise<BigNumber>;

    poolExistence(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    refAddr(overrides?: CallOverrides): Promise<BigNumber>;

    refPercent(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    rewardMinter(overrides?: CallOverrides): Promise<BigNumber>;

    safuAddr(overrides?: CallOverrides): Promise<BigNumber>;

    safuPercent(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _depositFeePercent: BigNumberish,
      _incentivesController: string,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setDaoAddress(_daoAddr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setEmoPerSecond(
      _emoPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setFeeAddress(_feeAddr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setPool0Staker(
      _users: string[],
      _flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setRefAddress(_refAddr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setSafuAddress(_safuAddr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setStartTime(
      _startTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setWhitelist(
      _users: string[],
      _flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    stakingPercent(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    toggleWhitelistable(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateMultiplier(
      multiplierNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updatePool(_pid: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userInfo(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    votingEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelistable(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawDevAndRefFee(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    BONUS_MULTIPLIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_DEPOSIT_FEE_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKENLESS_PRODUCTION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    add(
      _allocPoint: BigNumberish,
      _depositFeePercent: BigNumberish,
      _lpToken: string,
      _incentivesController: string,
      _boost: boolean,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    daoAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daoPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositFor(
      _user: string,
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    emo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emoPerSecond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enterStaking(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    feeAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMultiplier(_from: BigNumberish, _to: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestAllRewards(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    lastTimeDaoWithdraw(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    leaveStaking(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    massUpdatePools(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingTokens(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    percentDec(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolExistence(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    rewardMinter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safuAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safuPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _depositFeePercent: BigNumberish,
      _incentivesController: string,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setDaoAddress(
      _daoAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setEmoPerSecond(
      _emoPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setFeeAddress(
      _feeAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPool0Staker(
      _users: string[],
      _flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRefAddress(
      _refAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setSafuAddress(
      _safuAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setStartTime(
      _startTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setWhitelist(
      _users: string[],
      _flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    stakingPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleWhitelistable(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateMultiplier(
      multiplierNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userInfo(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingEscrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawDevAndRefFee(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;
  };
}
