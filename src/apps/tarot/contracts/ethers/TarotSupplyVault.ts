/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface TarotSupplyVaultInterface extends utils.Interface {
  functions: {
    'DELEGATION_TYPEHASH()': FunctionFragment;
    'DOMAIN_TYPEHASH()': FunctionFragment;
    'GRACE_PERIOD()': FunctionFragment;
    'MAX_DELAY()': FunctionFragment;
    'MIN_DELAY()': FunctionFragment;
    'addBorrowable(address)': FunctionFragment;
    'addBorrowables(address[])': FunctionFragment;
    'allocateIntoBorrowable(address,uint256)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'applyFee()': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'borrowables(uint256)': FunctionFragment;
    'checkpoints(address,uint32)': FunctionFragment;
    'deallocateFromBorrowable(address,uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'delegate(address)': FunctionFragment;
    'delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'delegates(address)': FunctionFragment;
    'disableBorrowable(address)': FunctionFragment;
    'enableBorrowable(address)': FunctionFragment;
    'enter(uint256)': FunctionFragment;
    'enterWithToken(address,uint256)': FunctionFragment;
    'feeBps()': FunctionFragment;
    'feeTo()': FunctionFragment;
    'getBorrowableEnabled(address)': FunctionFragment;
    'getBorrowableExists(address)': FunctionFragment;
    'getBorrowablesLength()': FunctionFragment;
    'getCurrentVotes(address)': FunctionFragment;
    'getPriorVotes(address,uint256)': FunctionFragment;
    'getSupplyRate()': FunctionFragment;
    'getTotalUnderlying()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'indexOfBorrowable(address)': FunctionFragment;
    'leave(uint256)': FunctionFragment;
    'leaveInKind(uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'numCheckpoints(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'pendingStrategy()': FunctionFragment;
    'pendingStrategyNotBefore()': FunctionFragment;
    'reallocate(uint256,bytes)': FunctionFragment;
    'reallocateManager()': FunctionFragment;
    'removeBorrowable(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'shareValuedAsUnderlying(uint256)': FunctionFragment;
    'strategy()': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'underlying()': FunctionFragment;
    'underlyingBalanceForAccount(address)': FunctionFragment;
    'underlyingValuedAsShare(uint256)': FunctionFragment;
    'unpause()': FunctionFragment;
    'unwindBorrowable(address,uint256)': FunctionFragment;
    'updateFeeBps(uint256)': FunctionFragment;
    'updateFeeTo(address)': FunctionFragment;
    'updatePendingStrategy(address,uint256)': FunctionFragment;
    'updateReallocateManager(address)': FunctionFragment;
    'updateStrategy()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DELEGATION_TYPEHASH'
      | 'DOMAIN_TYPEHASH'
      | 'GRACE_PERIOD'
      | 'MAX_DELAY'
      | 'MIN_DELAY'
      | 'addBorrowable'
      | 'addBorrowables'
      | 'allocateIntoBorrowable'
      | 'allowance'
      | 'applyFee'
      | 'approve'
      | 'balanceOf'
      | 'borrowables'
      | 'checkpoints'
      | 'deallocateFromBorrowable'
      | 'decimals'
      | 'decreaseAllowance'
      | 'delegate'
      | 'delegateBySig'
      | 'delegates'
      | 'disableBorrowable'
      | 'enableBorrowable'
      | 'enter'
      | 'enterWithToken'
      | 'feeBps'
      | 'feeTo'
      | 'getBorrowableEnabled'
      | 'getBorrowableExists'
      | 'getBorrowablesLength'
      | 'getCurrentVotes'
      | 'getPriorVotes'
      | 'getSupplyRate'
      | 'getTotalUnderlying'
      | 'increaseAllowance'
      | 'indexOfBorrowable'
      | 'leave'
      | 'leaveInKind'
      | 'name'
      | 'nonces'
      | 'numCheckpoints'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'pendingStrategy'
      | 'pendingStrategyNotBefore'
      | 'reallocate'
      | 'reallocateManager'
      | 'removeBorrowable'
      | 'renounceOwnership'
      | 'shareValuedAsUnderlying'
      | 'strategy'
      | 'symbol'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'underlying'
      | 'underlyingBalanceForAccount'
      | 'underlyingValuedAsShare'
      | 'unpause'
      | 'unwindBorrowable'
      | 'updateFeeBps'
      | 'updateFeeTo'
      | 'updatePendingStrategy'
      | 'updateReallocateManager'
      | 'updateStrategy',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DELEGATION_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DOMAIN_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'GRACE_PERIOD', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_DELAY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MIN_DELAY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addBorrowable', values: [string]): string;
  encodeFunctionData(functionFragment: 'addBorrowables', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'allocateIntoBorrowable', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'applyFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'borrowables', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'checkpoints', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'deallocateFromBorrowable', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'delegate', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'delegateBySig',
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'delegates', values: [string]): string;
  encodeFunctionData(functionFragment: 'disableBorrowable', values: [string]): string;
  encodeFunctionData(functionFragment: 'enableBorrowable', values: [string]): string;
  encodeFunctionData(functionFragment: 'enter', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'enterWithToken', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'feeBps', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feeTo', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getBorrowableEnabled', values: [string]): string;
  encodeFunctionData(functionFragment: 'getBorrowableExists', values: [string]): string;
  encodeFunctionData(functionFragment: 'getBorrowablesLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getCurrentVotes', values: [string]): string;
  encodeFunctionData(functionFragment: 'getPriorVotes', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getSupplyRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getTotalUnderlying', values?: undefined): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'indexOfBorrowable', values: [string]): string;
  encodeFunctionData(functionFragment: 'leave', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'leaveInKind', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [string]): string;
  encodeFunctionData(functionFragment: 'numCheckpoints', values: [string]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingStrategy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingStrategyNotBefore', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reallocate', values: [BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'reallocateManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'removeBorrowable', values: [string]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'shareValuedAsUnderlying', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'strategy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'underlying', values?: undefined): string;
  encodeFunctionData(functionFragment: 'underlyingBalanceForAccount', values: [string]): string;
  encodeFunctionData(functionFragment: 'underlyingValuedAsShare', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unwindBorrowable', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateFeeBps', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateFeeTo', values: [string]): string;
  encodeFunctionData(functionFragment: 'updatePendingStrategy', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateReallocateManager', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateStrategy', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'DELEGATION_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DOMAIN_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'GRACE_PERIOD', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_DELAY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MIN_DELAY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addBorrowable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addBorrowables', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allocateIntoBorrowable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'applyFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowables', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkpoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deallocateFromBorrowable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegateBySig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegates', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableBorrowable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableBorrowable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enterWithToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeBps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBorrowableEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBorrowableExists', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBorrowablesLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCurrentVotes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPriorVotes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSupplyRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalUnderlying', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'indexOfBorrowable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'leave', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'leaveInKind', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numCheckpoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingStrategyNotBefore', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reallocate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reallocateManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeBorrowable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'shareValuedAsUnderlying', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'underlying', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'underlyingBalanceForAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'underlyingValuedAsShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unwindBorrowable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateFeeBps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateFeeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePendingStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateReallocateManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateStrategy', data: BytesLike): Result;

  events: {
    'AddBorrowable(address)': EventFragment;
    'AllocateBorrowable(address,uint256,uint256)': EventFragment;
    'ApplyFee(address,uint256,uint256,uint256)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'DeallocateBorrowable(address,uint256,uint256)': EventFragment;
    'DelegateChanged(address,address,address)': EventFragment;
    'DelegateVotesChanged(address,uint256,uint256)': EventFragment;
    'DisableBorrowable(address)': EventFragment;
    'EnableBorrowable(address)': EventFragment;
    'Enter(address,address,uint256,uint256,uint256)': EventFragment;
    'Leave(address,uint256,uint256)': EventFragment;
    'LeaveInKind(address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'Reallocate(address,uint256)': EventFragment;
    'RemoveBorrowable(address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
    'UnwindBorrowable(address,uint256,uint256)': EventFragment;
    'UpdateCheckpoint(uint256)': EventFragment;
    'UpdateFeeBps(uint256)': EventFragment;
    'UpdateFeeTo(address)': EventFragment;
    'UpdatePendingStrategy(address,uint256)': EventFragment;
    'UpdateReallocateManager(address)': EventFragment;
    'UpdateStrategy(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddBorrowable'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AllocateBorrowable'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ApplyFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DeallocateBorrowable'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DelegateChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DelegateVotesChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DisableBorrowable'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EnableBorrowable'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Enter'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Leave'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LeaveInKind'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Reallocate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RemoveBorrowable'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UnwindBorrowable'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateCheckpoint'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateFeeBps'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateFeeTo'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatePendingStrategy'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateReallocateManager'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateStrategy'): EventFragment;
}

export interface AddBorrowableEventObject {
  borrowable: string;
}
export type AddBorrowableEvent = TypedEvent<[string], AddBorrowableEventObject>;

export type AddBorrowableEventFilter = TypedEventFilter<AddBorrowableEvent>;

export interface AllocateBorrowableEventObject {
  borrowable: string;
  underlyingAmount: BigNumber;
  borrowableAmount: BigNumber;
}
export type AllocateBorrowableEvent = TypedEvent<[string, BigNumber, BigNumber], AllocateBorrowableEventObject>;

export type AllocateBorrowableEventFilter = TypedEventFilter<AllocateBorrowableEvent>;

export interface ApplyFeeEventObject {
  feeTo: string;
  gain: BigNumber;
  fee: BigNumber;
  feeShare: BigNumber;
}
export type ApplyFeeEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], ApplyFeeEventObject>;

export type ApplyFeeEventFilter = TypedEventFilter<ApplyFeeEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DeallocateBorrowableEventObject {
  borrowable: string;
  borrowableAmount: BigNumber;
  underlyingAmount: BigNumber;
}
export type DeallocateBorrowableEvent = TypedEvent<[string, BigNumber, BigNumber], DeallocateBorrowableEventObject>;

export type DeallocateBorrowableEventFilter = TypedEventFilter<DeallocateBorrowableEvent>;

export interface DelegateChangedEventObject {
  delegator: string;
  fromDelegate: string;
  toDelegate: string;
}
export type DelegateChangedEvent = TypedEvent<[string, string, string], DelegateChangedEventObject>;

export type DelegateChangedEventFilter = TypedEventFilter<DelegateChangedEvent>;

export interface DelegateVotesChangedEventObject {
  delegate: string;
  previousBalance: BigNumber;
  newBalance: BigNumber;
}
export type DelegateVotesChangedEvent = TypedEvent<[string, BigNumber, BigNumber], DelegateVotesChangedEventObject>;

export type DelegateVotesChangedEventFilter = TypedEventFilter<DelegateVotesChangedEvent>;

export interface DisableBorrowableEventObject {
  borrowable: string;
}
export type DisableBorrowableEvent = TypedEvent<[string], DisableBorrowableEventObject>;

export type DisableBorrowableEventFilter = TypedEventFilter<DisableBorrowableEvent>;

export interface EnableBorrowableEventObject {
  borrowable: string;
}
export type EnableBorrowableEvent = TypedEvent<[string], EnableBorrowableEventObject>;

export type EnableBorrowableEventFilter = TypedEventFilter<EnableBorrowableEvent>;

export interface EnterEventObject {
  who: string;
  token: string;
  tokenAmount: BigNumber;
  underlyingAmount: BigNumber;
  share: BigNumber;
}
export type EnterEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber], EnterEventObject>;

export type EnterEventFilter = TypedEventFilter<EnterEvent>;

export interface LeaveEventObject {
  who: string;
  share: BigNumber;
  underlyingAmount: BigNumber;
}
export type LeaveEvent = TypedEvent<[string, BigNumber, BigNumber], LeaveEventObject>;

export type LeaveEventFilter = TypedEventFilter<LeaveEvent>;

export interface LeaveInKindEventObject {
  who: string;
  share: BigNumber;
}
export type LeaveInKindEvent = TypedEvent<[string, BigNumber], LeaveInKindEventObject>;

export type LeaveInKindEventFilter = TypedEventFilter<LeaveInKindEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface ReallocateEventObject {
  sender: string;
  share: BigNumber;
}
export type ReallocateEvent = TypedEvent<[string, BigNumber], ReallocateEventObject>;

export type ReallocateEventFilter = TypedEventFilter<ReallocateEvent>;

export interface RemoveBorrowableEventObject {
  borrowable: string;
}
export type RemoveBorrowableEvent = TypedEvent<[string], RemoveBorrowableEventObject>;

export type RemoveBorrowableEventFilter = TypedEventFilter<RemoveBorrowableEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UnwindBorrowableEventObject {
  borrowable: string;
  underlyingAmount: BigNumber;
  borrowableAmount: BigNumber;
}
export type UnwindBorrowableEvent = TypedEvent<[string, BigNumber, BigNumber], UnwindBorrowableEventObject>;

export type UnwindBorrowableEventFilter = TypedEventFilter<UnwindBorrowableEvent>;

export interface UpdateCheckpointEventObject {
  checkpointBalance: BigNumber;
}
export type UpdateCheckpointEvent = TypedEvent<[BigNumber], UpdateCheckpointEventObject>;

export type UpdateCheckpointEventFilter = TypedEventFilter<UpdateCheckpointEvent>;

export interface UpdateFeeBpsEventObject {
  newFeeBps: BigNumber;
}
export type UpdateFeeBpsEvent = TypedEvent<[BigNumber], UpdateFeeBpsEventObject>;

export type UpdateFeeBpsEventFilter = TypedEventFilter<UpdateFeeBpsEvent>;

export interface UpdateFeeToEventObject {
  newFeeTo: string;
}
export type UpdateFeeToEvent = TypedEvent<[string], UpdateFeeToEventObject>;

export type UpdateFeeToEventFilter = TypedEventFilter<UpdateFeeToEvent>;

export interface UpdatePendingStrategyEventObject {
  strategy: string;
  notBefore: BigNumber;
}
export type UpdatePendingStrategyEvent = TypedEvent<[string, BigNumber], UpdatePendingStrategyEventObject>;

export type UpdatePendingStrategyEventFilter = TypedEventFilter<UpdatePendingStrategyEvent>;

export interface UpdateReallocateManagerEventObject {
  newReallocateManager: string;
}
export type UpdateReallocateManagerEvent = TypedEvent<[string], UpdateReallocateManagerEventObject>;

export type UpdateReallocateManagerEventFilter = TypedEventFilter<UpdateReallocateManagerEvent>;

export interface UpdateStrategyEventObject {
  strategy: string;
}
export type UpdateStrategyEvent = TypedEvent<[string], UpdateStrategyEventObject>;

export type UpdateStrategyEventFilter = TypedEventFilter<UpdateStrategyEvent>;

export interface TarotSupplyVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TarotSupplyVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    addBorrowable(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addBorrowables(
      _addressList: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    allocateIntoBorrowable(
      borrowable: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    applyFee(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowables(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    checkpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;

    deallocateFromBorrowable(
      borrowable: string,
      borrowableAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    delegates(delegator: string, overrides?: CallOverrides): Promise<[string]>;

    disableBorrowable(
      borrowable: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    enableBorrowable(
      borrowable: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    enter(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    enterWithToken(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    feeBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    getBorrowableEnabled(borrowable: string, overrides?: CallOverrides): Promise<[boolean]>;

    getBorrowableExists(borrowable: string, overrides?: CallOverrides): Promise<[boolean]>;

    getBorrowablesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentVotes(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPriorVotes(account: string, blockNumber: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    getSupplyRate(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    getTotalUnderlying(overrides?: CallOverrides): Promise<[BigNumber] & { totalUnderlying: BigNumber }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    indexOfBorrowable(borrowable: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    leave(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    leaveInKind(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingStrategy(overrides?: CallOverrides): Promise<[string]>;

    pendingStrategyNotBefore(overrides?: CallOverrides): Promise<[BigNumber]>;

    reallocate(
      _share: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    reallocateManager(overrides?: CallOverrides): Promise<[string]>;

    removeBorrowable(
      borrowable: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    shareValuedAsUnderlying(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    strategy(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    underlyingBalanceForAccount(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    underlyingValuedAsShare(
      _underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    unwindBorrowable(
      borrowable: string,
      borrowableAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateFeeBps(
      _newFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateFeeTo(
      _newFeeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updatePendingStrategy(
      _newPendingStrategy: string,
      _notBefore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateReallocateManager(
      _newReallocateManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateStrategy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;
  };

  DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  addBorrowable(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  addBorrowables(
    _addressList: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  allocateIntoBorrowable(
    borrowable: string,
    underlyingAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  applyFee(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  borrowables(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  checkpoints(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;

  deallocateFromBorrowable(
    borrowable: string,
    borrowableAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  delegate(
    delegatee: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  delegateBySig(
    delegatee: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  delegates(delegator: string, overrides?: CallOverrides): Promise<string>;

  disableBorrowable(
    borrowable: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  enableBorrowable(
    borrowable: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  enter(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  enterWithToken(
    _tokenAddress: string,
    _tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  feeBps(overrides?: CallOverrides): Promise<BigNumber>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  getBorrowableEnabled(borrowable: string, overrides?: CallOverrides): Promise<boolean>;

  getBorrowableExists(borrowable: string, overrides?: CallOverrides): Promise<boolean>;

  getBorrowablesLength(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  getPriorVotes(account: string, blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getSupplyRate(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  getTotalUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  indexOfBorrowable(borrowable: string, overrides?: CallOverrides): Promise<BigNumber>;

  leave(
    _share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  leaveInKind(
    _share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingStrategy(overrides?: CallOverrides): Promise<string>;

  pendingStrategyNotBefore(overrides?: CallOverrides): Promise<BigNumber>;

  reallocate(
    _share: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  reallocateManager(overrides?: CallOverrides): Promise<string>;

  removeBorrowable(
    borrowable: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  shareValuedAsUnderlying(
    _share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  strategy(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  underlyingBalanceForAccount(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  underlyingValuedAsShare(
    _underlyingAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  unwindBorrowable(
    borrowable: string,
    borrowableAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateFeeBps(
    _newFeeBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateFeeTo(
    _newFeeTo: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updatePendingStrategy(
    _newPendingStrategy: string,
    _notBefore: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateReallocateManager(
    _newReallocateManager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateStrategy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  callStatic: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    addBorrowable(_address: string, overrides?: CallOverrides): Promise<void>;

    addBorrowables(_addressList: string[], overrides?: CallOverrides): Promise<void>;

    allocateIntoBorrowable(
      borrowable: string,
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    applyFee(overrides?: CallOverrides): Promise<void>;

    approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowables(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    checkpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;

    deallocateFromBorrowable(
      borrowable: string,
      borrowableAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    delegate(delegatee: string, overrides?: CallOverrides): Promise<void>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    delegates(delegator: string, overrides?: CallOverrides): Promise<string>;

    disableBorrowable(borrowable: string, overrides?: CallOverrides): Promise<void>;

    enableBorrowable(borrowable: string, overrides?: CallOverrides): Promise<void>;

    enter(_amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    enterWithToken(_tokenAddress: string, _tokenAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    feeBps(overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    getBorrowableEnabled(borrowable: string, overrides?: CallOverrides): Promise<boolean>;

    getBorrowableExists(borrowable: string, overrides?: CallOverrides): Promise<boolean>;

    getBorrowablesLength(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPriorVotes(account: string, blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getSupplyRate(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    indexOfBorrowable(borrowable: string, overrides?: CallOverrides): Promise<BigNumber>;

    leave(_share: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    leaveInKind(_share: BigNumberish, overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingStrategy(overrides?: CallOverrides): Promise<string>;

    pendingStrategyNotBefore(overrides?: CallOverrides): Promise<BigNumber>;

    reallocate(_share: BigNumberish, _data: BytesLike, overrides?: CallOverrides): Promise<void>;

    reallocateManager(overrides?: CallOverrides): Promise<string>;

    removeBorrowable(borrowable: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    shareValuedAsUnderlying(_share: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    strategy(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(sender: string, recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    underlying(overrides?: CallOverrides): Promise<string>;

    underlyingBalanceForAccount(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    underlyingValuedAsShare(_underlyingAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unwindBorrowable(borrowable: string, borrowableAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateFeeBps(_newFeeBps: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateFeeTo(_newFeeTo: string, overrides?: CallOverrides): Promise<void>;

    updatePendingStrategy(
      _newPendingStrategy: string,
      _notBefore: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateReallocateManager(_newReallocateManager: string, overrides?: CallOverrides): Promise<void>;

    updateStrategy(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'AddBorrowable(address)'(borrowable?: string | null): AddBorrowableEventFilter;
    AddBorrowable(borrowable?: string | null): AddBorrowableEventFilter;

    'AllocateBorrowable(address,uint256,uint256)'(
      borrowable?: string | null,
      underlyingAmount?: null,
      borrowableAmount?: null,
    ): AllocateBorrowableEventFilter;
    AllocateBorrowable(
      borrowable?: string | null,
      underlyingAmount?: null,
      borrowableAmount?: null,
    ): AllocateBorrowableEventFilter;

    'ApplyFee(address,uint256,uint256,uint256)'(
      feeTo?: string | null,
      gain?: null,
      fee?: null,
      feeShare?: null,
    ): ApplyFeeEventFilter;
    ApplyFee(feeTo?: string | null, gain?: null, fee?: null, feeShare?: null): ApplyFeeEventFilter;

    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;

    'DeallocateBorrowable(address,uint256,uint256)'(
      borrowable?: string | null,
      borrowableAmount?: null,
      underlyingAmount?: null,
    ): DeallocateBorrowableEventFilter;
    DeallocateBorrowable(
      borrowable?: string | null,
      borrowableAmount?: null,
      underlyingAmount?: null,
    ): DeallocateBorrowableEventFilter;

    'DelegateChanged(address,address,address)'(
      delegator?: string | null,
      fromDelegate?: string | null,
      toDelegate?: string | null,
    ): DelegateChangedEventFilter;
    DelegateChanged(
      delegator?: string | null,
      fromDelegate?: string | null,
      toDelegate?: string | null,
    ): DelegateChangedEventFilter;

    'DelegateVotesChanged(address,uint256,uint256)'(
      delegate?: string | null,
      previousBalance?: null,
      newBalance?: null,
    ): DelegateVotesChangedEventFilter;
    DelegateVotesChanged(
      delegate?: string | null,
      previousBalance?: null,
      newBalance?: null,
    ): DelegateVotesChangedEventFilter;

    'DisableBorrowable(address)'(borrowable?: string | null): DisableBorrowableEventFilter;
    DisableBorrowable(borrowable?: string | null): DisableBorrowableEventFilter;

    'EnableBorrowable(address)'(borrowable?: string | null): EnableBorrowableEventFilter;
    EnableBorrowable(borrowable?: string | null): EnableBorrowableEventFilter;

    'Enter(address,address,uint256,uint256,uint256)'(
      who?: string | null,
      token?: string | null,
      tokenAmount?: null,
      underlyingAmount?: null,
      share?: null,
    ): EnterEventFilter;
    Enter(
      who?: string | null,
      token?: string | null,
      tokenAmount?: null,
      underlyingAmount?: null,
      share?: null,
    ): EnterEventFilter;

    'Leave(address,uint256,uint256)'(who?: string | null, share?: null, underlyingAmount?: null): LeaveEventFilter;
    Leave(who?: string | null, share?: null, underlyingAmount?: null): LeaveEventFilter;

    'LeaveInKind(address,uint256)'(who?: string | null, share?: null): LeaveInKindEventFilter;
    LeaveInKind(who?: string | null, share?: null): LeaveInKindEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'Reallocate(address,uint256)'(sender?: string | null, share?: null): ReallocateEventFilter;
    Reallocate(sender?: string | null, share?: null): ReallocateEventFilter;

    'RemoveBorrowable(address)'(borrowable?: string | null): RemoveBorrowableEventFilter;
    RemoveBorrowable(borrowable?: string | null): RemoveBorrowableEventFilter;

    'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'UnwindBorrowable(address,uint256,uint256)'(
      borrowable?: string | null,
      underlyingAmount?: null,
      borrowableAmount?: null,
    ): UnwindBorrowableEventFilter;
    UnwindBorrowable(
      borrowable?: string | null,
      underlyingAmount?: null,
      borrowableAmount?: null,
    ): UnwindBorrowableEventFilter;

    'UpdateCheckpoint(uint256)'(checkpointBalance?: null): UpdateCheckpointEventFilter;
    UpdateCheckpoint(checkpointBalance?: null): UpdateCheckpointEventFilter;

    'UpdateFeeBps(uint256)'(newFeeBps?: null): UpdateFeeBpsEventFilter;
    UpdateFeeBps(newFeeBps?: null): UpdateFeeBpsEventFilter;

    'UpdateFeeTo(address)'(newFeeTo?: string | null): UpdateFeeToEventFilter;
    UpdateFeeTo(newFeeTo?: string | null): UpdateFeeToEventFilter;

    'UpdatePendingStrategy(address,uint256)'(
      strategy?: string | null,
      notBefore?: null,
    ): UpdatePendingStrategyEventFilter;
    UpdatePendingStrategy(strategy?: string | null, notBefore?: null): UpdatePendingStrategyEventFilter;

    'UpdateReallocateManager(address)'(newReallocateManager?: string | null): UpdateReallocateManagerEventFilter;
    UpdateReallocateManager(newReallocateManager?: string | null): UpdateReallocateManagerEventFilter;

    'UpdateStrategy(address)'(strategy?: string | null): UpdateStrategyEventFilter;
    UpdateStrategy(strategy?: string | null): UpdateStrategyEventFilter;
  };

  estimateGas: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    addBorrowable(_address: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    addBorrowables(
      _addressList: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    allocateIntoBorrowable(
      borrowable: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    applyFee(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowables(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    checkpoints(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    deallocateFromBorrowable(
      borrowable: string,
      borrowableAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    delegate(delegatee: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    delegates(delegator: string, overrides?: CallOverrides): Promise<BigNumber>;

    disableBorrowable(
      borrowable: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    enableBorrowable(
      borrowable: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    enter(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    enterWithToken(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    feeBps(overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowableEnabled(borrowable: string, overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowableExists(borrowable: string, overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowablesLength(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPriorVotes(account: string, blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getSupplyRate(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    getTotalUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    indexOfBorrowable(borrowable: string, overrides?: CallOverrides): Promise<BigNumber>;

    leave(_share: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    leaveInKind(_share: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    pendingStrategyNotBefore(overrides?: CallOverrides): Promise<BigNumber>;

    reallocate(
      _share: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    reallocateManager(overrides?: CallOverrides): Promise<BigNumber>;

    removeBorrowable(
      borrowable: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    shareValuedAsUnderlying(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    strategy(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingBalanceForAccount(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    underlyingValuedAsShare(
      _underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    unwindBorrowable(
      borrowable: string,
      borrowableAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateFeeBps(
      _newFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateFeeTo(_newFeeTo: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updatePendingStrategy(
      _newPendingStrategy: string,
      _notBefore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateReallocateManager(
      _newReallocateManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateStrategy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addBorrowable(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    addBorrowables(
      _addressList: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    allocateIntoBorrowable(
      borrowable: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    applyFee(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowables(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkpoints(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deallocateFromBorrowable(
      borrowable: string,
      borrowableAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    delegates(delegator: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableBorrowable(
      borrowable: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    enableBorrowable(
      borrowable: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    enter(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    enterWithToken(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    feeBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBorrowableEnabled(borrowable: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBorrowableExists(borrowable: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBorrowablesLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentVotes(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriorVotes(account: string, blockNumber: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSupplyRate(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    getTotalUnderlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    indexOfBorrowable(borrowable: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    leave(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    leaveInKind(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingStrategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingStrategyNotBefore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reallocate(
      _share: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    reallocateManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeBorrowable(
      borrowable: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    shareValuedAsUnderlying(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    strategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingBalanceForAccount(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    underlyingValuedAsShare(
      _underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    unwindBorrowable(
      borrowable: string,
      borrowableAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateFeeBps(
      _newFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateFeeTo(
      _newFeeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updatePendingStrategy(
      _newPendingStrategy: string,
      _notBefore: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateReallocateManager(
      _newReallocateManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateStrategy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;
  };
}
