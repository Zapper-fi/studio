/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export type ERC20PermitSignatureStruct = {
  token: PromiseOrValue<string>;
  value: PromiseOrValue<BigNumberish>;
  deadline: PromiseOrValue<BigNumberish>;
  v: PromiseOrValue<BigNumberish>;
  r: PromiseOrValue<BytesLike>;
  s: PromiseOrValue<BytesLike>;
};

export type ERC20PermitSignatureStructOutput = [string, BigNumber, BigNumber, number, string, string] & {
  token: string;
  value: BigNumber;
  deadline: BigNumber;
  v: number;
  r: string;
  s: string;
};

export interface RaftPositionManagerInterface extends utils.Interface {
  functions: {
    'BETA()': FunctionFragment;
    'MAX_BORROWING_RATE()': FunctionFragment;
    'MAX_BORROWING_SPREAD()': FunctionFragment;
    'MINUTE_DECAY_FACTOR()': FunctionFragment;
    'acceptOwnership()': FunctionFragment;
    'addCollateralToken(address,address,address)': FunctionFragment;
    'baseRate(address)': FunctionFragment;
    'borrowingSpread(address)': FunctionFragment;
    'collateralEnabled(address)': FunctionFragment;
    'collateralInfo(address)': FunctionFragment;
    'collateralTokenForPosition(address)': FunctionFragment;
    'feeRecipient()': FunctionFragment;
    'getBorrowingFee(address,uint256)': FunctionFragment;
    'getBorrowingRate(address)': FunctionFragment;
    'getBorrowingRateWithDecay(address)': FunctionFragment;
    'getRedemptionFee(address,uint256,uint256)': FunctionFragment;
    'getRedemptionFeeWithDecay(address,uint256)': FunctionFragment;
    'getRedemptionRate(address)': FunctionFragment;
    'getRedemptionRateWithDecay(address)': FunctionFragment;
    'isDelegateWhitelisted(address,address)': FunctionFragment;
    'lastFeeOperationTime(address)': FunctionFragment;
    'liquidate(address)': FunctionFragment;
    'managePosition(address,address,uint256,bool,uint256,bool,uint256,(address,uint256,uint256,uint8,bytes32,bytes32))': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingOwner()': FunctionFragment;
    'priceFeed(address)': FunctionFragment;
    'rToken()': FunctionFragment;
    'raftCollateralToken(address)': FunctionFragment;
    'raftDebtToken(address)': FunctionFragment;
    'redeemCollateral(address,uint256,uint256)': FunctionFragment;
    'redemptionRebate(address)': FunctionFragment;
    'redemptionSpread(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setBorrowingSpread(address,uint256)': FunctionFragment;
    'setCollateralEnabled(address,bool)': FunctionFragment;
    'setFeeRecipient(address)': FunctionFragment;
    'setRedemptionRebate(address,uint256)': FunctionFragment;
    'setRedemptionSpread(address,uint256)': FunctionFragment;
    'setSplitLiquidationCollateral(address,address)': FunctionFragment;
    'splitLiquidationCollateral(address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'whitelistDelegate(address,bool)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BETA'
      | 'MAX_BORROWING_RATE'
      | 'MAX_BORROWING_SPREAD'
      | 'MINUTE_DECAY_FACTOR'
      | 'acceptOwnership'
      | 'addCollateralToken'
      | 'baseRate'
      | 'borrowingSpread'
      | 'collateralEnabled'
      | 'collateralInfo'
      | 'collateralTokenForPosition'
      | 'feeRecipient'
      | 'getBorrowingFee'
      | 'getBorrowingRate'
      | 'getBorrowingRateWithDecay'
      | 'getRedemptionFee'
      | 'getRedemptionFeeWithDecay'
      | 'getRedemptionRate'
      | 'getRedemptionRateWithDecay'
      | 'isDelegateWhitelisted'
      | 'lastFeeOperationTime'
      | 'liquidate'
      | 'managePosition'
      | 'owner'
      | 'pendingOwner'
      | 'priceFeed'
      | 'rToken'
      | 'raftCollateralToken'
      | 'raftDebtToken'
      | 'redeemCollateral'
      | 'redemptionRebate'
      | 'redemptionSpread'
      | 'renounceOwnership'
      | 'setBorrowingSpread'
      | 'setCollateralEnabled'
      | 'setFeeRecipient'
      | 'setRedemptionRebate'
      | 'setRedemptionSpread'
      | 'setSplitLiquidationCollateral'
      | 'splitLiquidationCollateral'
      | 'transferOwnership'
      | 'whitelistDelegate',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BETA', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_BORROWING_RATE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_BORROWING_SPREAD', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MINUTE_DECAY_FACTOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addCollateralToken',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'baseRate', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'borrowingSpread', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'collateralEnabled', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'collateralInfo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'collateralTokenForPosition', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'feeRecipient', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getBorrowingFee',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getBorrowingRate', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getBorrowingRateWithDecay', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getRedemptionFee',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRedemptionFeeWithDecay',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getRedemptionRate', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getRedemptionRateWithDecay', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'isDelegateWhitelisted',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'lastFeeOperationTime', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'liquidate', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'managePosition',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      ERC20PermitSignatureStruct,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'priceFeed', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'rToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'raftCollateralToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'raftDebtToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'redeemCollateral',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'redemptionRebate', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'redemptionSpread', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setBorrowingSpread',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setCollateralEnabled',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setFeeRecipient', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setRedemptionRebate',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setRedemptionSpread',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setSplitLiquidationCollateral',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'splitLiquidationCollateral', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'whitelistDelegate',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;

  decodeFunctionResult(functionFragment: 'BETA', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_BORROWING_RATE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_BORROWING_SPREAD', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MINUTE_DECAY_FACTOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addCollateralToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'baseRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowingSpread', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateralEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateralInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateralTokenForPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeRecipient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBorrowingFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBorrowingRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBorrowingRateWithDecay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRedemptionFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRedemptionFeeWithDecay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRedemptionRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRedemptionRateWithDecay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isDelegateWhitelisted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastFeeOperationTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'managePosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'priceFeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'raftCollateralToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'raftDebtToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redemptionRebate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redemptionSpread', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBorrowingSpread', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCollateralEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeRecipient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRedemptionRebate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRedemptionSpread', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSplitLiquidationCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'splitLiquidationCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistDelegate', data: BytesLike): Result;

  events: {
    'BaseRateUpdated(address,uint256)': EventFragment;
    'BorrowingSpreadUpdated(uint256)': EventFragment;
    'CollateralChanged(address,address,uint256,bool)': EventFragment;
    'CollateralTokenAdded(address,address,address,address)': EventFragment;
    'CollateralTokenModified(address,bool)': EventFragment;
    'DebtChanged(address,address,uint256,bool)': EventFragment;
    'DelegateWhitelisted(address,address,bool)': EventFragment;
    'FeeRecipientChanged(address)': EventFragment;
    'LastFeeOpTimeUpdated(address,uint256)': EventFragment;
    'Liquidation(address,address,address,uint256,uint256,uint256,uint256,bool)': EventFragment;
    'OwnershipTransferStarted(address,address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'PositionClosed(address)': EventFragment;
    'PositionCreated(address,address)': EventFragment;
    'PositionManagerDeployed(address,address)': EventFragment;
    'RBorrowingFeePaid(address,address,uint256)': EventFragment;
    'Redemption(address,uint256,uint256,uint256,uint256)': EventFragment;
    'RedemptionRebateUpdated(uint256)': EventFragment;
    'RedemptionSpreadUpdated(address,uint256)': EventFragment;
    'SplitLiquidationCollateralChanged(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'BaseRateUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BorrowingSpreadUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralTokenAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralTokenModified'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DebtChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DelegateWhitelisted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeRecipientChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LastFeeOpTimeUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Liquidation'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferStarted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PositionClosed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PositionCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PositionManagerDeployed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RBorrowingFeePaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Redemption'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RedemptionRebateUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RedemptionSpreadUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SplitLiquidationCollateralChanged'): EventFragment;
}

export interface BaseRateUpdatedEventObject {
  collateralToken: string;
  baseRate: BigNumber;
}
export type BaseRateUpdatedEvent = TypedEvent<[string, BigNumber], BaseRateUpdatedEventObject>;

export type BaseRateUpdatedEventFilter = TypedEventFilter<BaseRateUpdatedEvent>;

export interface BorrowingSpreadUpdatedEventObject {
  borrowingSpread: BigNumber;
}
export type BorrowingSpreadUpdatedEvent = TypedEvent<[BigNumber], BorrowingSpreadUpdatedEventObject>;

export type BorrowingSpreadUpdatedEventFilter = TypedEventFilter<BorrowingSpreadUpdatedEvent>;

export interface CollateralChangedEventObject {
  position: string;
  collateralToken: string;
  collateralAmount: BigNumber;
  isCollateralIncrease: boolean;
}
export type CollateralChangedEvent = TypedEvent<[string, string, BigNumber, boolean], CollateralChangedEventObject>;

export type CollateralChangedEventFilter = TypedEventFilter<CollateralChangedEvent>;

export interface CollateralTokenAddedEventObject {
  collateralToken: string;
  raftCollateralToken: string;
  raftDebtToken: string;
  priceFeed: string;
}
export type CollateralTokenAddedEvent = TypedEvent<[string, string, string, string], CollateralTokenAddedEventObject>;

export type CollateralTokenAddedEventFilter = TypedEventFilter<CollateralTokenAddedEvent>;

export interface CollateralTokenModifiedEventObject {
  collateralToken: string;
  isEnabled: boolean;
}
export type CollateralTokenModifiedEvent = TypedEvent<[string, boolean], CollateralTokenModifiedEventObject>;

export type CollateralTokenModifiedEventFilter = TypedEventFilter<CollateralTokenModifiedEvent>;

export interface DebtChangedEventObject {
  position: string;
  collateralToken: string;
  debtAmount: BigNumber;
  isDebtIncrease: boolean;
}
export type DebtChangedEvent = TypedEvent<[string, string, BigNumber, boolean], DebtChangedEventObject>;

export type DebtChangedEventFilter = TypedEventFilter<DebtChangedEvent>;

export interface DelegateWhitelistedEventObject {
  position: string;
  delegate: string;
  whitelisted: boolean;
}
export type DelegateWhitelistedEvent = TypedEvent<[string, string, boolean], DelegateWhitelistedEventObject>;

export type DelegateWhitelistedEventFilter = TypedEventFilter<DelegateWhitelistedEvent>;

export interface FeeRecipientChangedEventObject {
  feeRecipient: string;
}
export type FeeRecipientChangedEvent = TypedEvent<[string], FeeRecipientChangedEventObject>;

export type FeeRecipientChangedEventFilter = TypedEventFilter<FeeRecipientChangedEvent>;

export interface LastFeeOpTimeUpdatedEventObject {
  collateralToken: string;
  lastFeeOpTime: BigNumber;
}
export type LastFeeOpTimeUpdatedEvent = TypedEvent<[string, BigNumber], LastFeeOpTimeUpdatedEventObject>;

export type LastFeeOpTimeUpdatedEventFilter = TypedEventFilter<LastFeeOpTimeUpdatedEvent>;

export interface LiquidationEventObject {
  liquidator: string;
  position: string;
  collateralToken: string;
  debtLiquidated: BigNumber;
  collateralLiquidated: BigNumber;
  collateralSentToLiquidator: BigNumber;
  collateralLiquidationFeePaid: BigNumber;
  isRedistribution: boolean;
}
export type LiquidationEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber, boolean],
  LiquidationEventObject
>;

export type LiquidationEventFilter = TypedEventFilter<LiquidationEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<[string, string], OwnershipTransferStartedEventObject>;

export type OwnershipTransferStartedEventFilter = TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PositionClosedEventObject {
  position: string;
}
export type PositionClosedEvent = TypedEvent<[string], PositionClosedEventObject>;

export type PositionClosedEventFilter = TypedEventFilter<PositionClosedEvent>;

export interface PositionCreatedEventObject {
  position: string;
  collateralToken: string;
}
export type PositionCreatedEvent = TypedEvent<[string, string], PositionCreatedEventObject>;

export type PositionCreatedEventFilter = TypedEventFilter<PositionCreatedEvent>;

export interface PositionManagerDeployedEventObject {
  rToken: string;
  feeRecipient: string;
}
export type PositionManagerDeployedEvent = TypedEvent<[string, string], PositionManagerDeployedEventObject>;

export type PositionManagerDeployedEventFilter = TypedEventFilter<PositionManagerDeployedEvent>;

export interface RBorrowingFeePaidEventObject {
  collateralToken: string;
  position: string;
  feeAmount: BigNumber;
}
export type RBorrowingFeePaidEvent = TypedEvent<[string, string, BigNumber], RBorrowingFeePaidEventObject>;

export type RBorrowingFeePaidEventFilter = TypedEventFilter<RBorrowingFeePaidEvent>;

export interface RedemptionEventObject {
  redeemer: string;
  amount: BigNumber;
  collateralSent: BigNumber;
  fee: BigNumber;
  rebate: BigNumber;
}
export type RedemptionEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber, BigNumber], RedemptionEventObject>;

export type RedemptionEventFilter = TypedEventFilter<RedemptionEvent>;

export interface RedemptionRebateUpdatedEventObject {
  redemptionRebate: BigNumber;
}
export type RedemptionRebateUpdatedEvent = TypedEvent<[BigNumber], RedemptionRebateUpdatedEventObject>;

export type RedemptionRebateUpdatedEventFilter = TypedEventFilter<RedemptionRebateUpdatedEvent>;

export interface RedemptionSpreadUpdatedEventObject {
  collateralToken: string;
  redemptionSpread: BigNumber;
}
export type RedemptionSpreadUpdatedEvent = TypedEvent<[string, BigNumber], RedemptionSpreadUpdatedEventObject>;

export type RedemptionSpreadUpdatedEventFilter = TypedEventFilter<RedemptionSpreadUpdatedEvent>;

export interface SplitLiquidationCollateralChangedEventObject {
  collateralToken: string;
  newSplitLiquidationCollateral: string;
}
export type SplitLiquidationCollateralChangedEvent = TypedEvent<
  [string, string],
  SplitLiquidationCollateralChangedEventObject
>;

export type SplitLiquidationCollateralChangedEventFilter = TypedEventFilter<SplitLiquidationCollateralChangedEvent>;

export interface RaftPositionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RaftPositionManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BETA(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_BORROWING_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_BORROWING_SPREAD(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINUTE_DECAY_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    addCollateralToken(
      collateralToken: PromiseOrValue<string>,
      priceFeed: PromiseOrValue<string>,
      newSplitLiquidationCollateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    baseRate(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowingSpread(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    collateralEnabled(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    collateralInfo(
      collateralToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, string, boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        collateralToken: string;
        debtToken: string;
        priceFeed: string;
        splitLiquidation: string;
        isEnabled: boolean;
        lastFeeOperationTime: BigNumber;
        borrowingSpread: BigNumber;
        baseRate: BigNumber;
        redemptionSpread: BigNumber;
        redemptionRebate: BigNumber;
      }
    >;

    collateralTokenForPosition(
      position: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string] & { collateralToken: string }>;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    getBorrowingFee(
      collateralToken: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getBorrowingRate(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getBorrowingRateWithDecay(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getRedemptionFee(
      collateralToken: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      priceDeviation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getRedemptionFeeWithDecay(
      collateralToken: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { redemptionFee: BigNumber }>;

    getRedemptionRate(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getRedemptionRateWithDecay(
      collateralToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    isDelegateWhitelisted(
      position: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { isWhitelisted: boolean }>;

    lastFeeOperationTime(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidate(
      position: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    managePosition(
      collateralToken: PromiseOrValue<string>,
      position: PromiseOrValue<string>,
      collateralChange: PromiseOrValue<BigNumberish>,
      isCollateralIncrease: PromiseOrValue<boolean>,
      debtChange: PromiseOrValue<BigNumberish>,
      isDebtIncrease: PromiseOrValue<boolean>,
      maxFeePercentage: PromiseOrValue<BigNumberish>,
      permitSignature: ERC20PermitSignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    priceFeed(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    rToken(overrides?: CallOverrides): Promise<[string]>;

    raftCollateralToken(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    raftDebtToken(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    redeemCollateral(
      collateralToken: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      maxFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    redemptionRebate(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    redemptionSpread(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setBorrowingSpread(
      collateralToken: PromiseOrValue<string>,
      newBorrowingSpread: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setCollateralEnabled(
      collateralToken: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFeeRecipient(
      newFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRedemptionRebate(
      collateralToken: PromiseOrValue<string>,
      newRedemptionRebate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRedemptionSpread(
      collateralToken: PromiseOrValue<string>,
      newRedemptionSpread: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSplitLiquidationCollateral(
      collateralToken: PromiseOrValue<string>,
      newSplitLiquidationCollateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    splitLiquidationCollateral(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    whitelistDelegate(
      delegate: PromiseOrValue<string>,
      whitelisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  BETA(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_BORROWING_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_BORROWING_SPREAD(overrides?: CallOverrides): Promise<BigNumber>;

  MINUTE_DECAY_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  addCollateralToken(
    collateralToken: PromiseOrValue<string>,
    priceFeed: PromiseOrValue<string>,
    newSplitLiquidationCollateral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  baseRate(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  borrowingSpread(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  collateralEnabled(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  collateralInfo(
    collateralToken: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, string, string, boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      collateralToken: string;
      debtToken: string;
      priceFeed: string;
      splitLiquidation: string;
      isEnabled: boolean;
      lastFeeOperationTime: BigNumber;
      borrowingSpread: BigNumber;
      baseRate: BigNumber;
      redemptionSpread: BigNumber;
      redemptionRebate: BigNumber;
    }
  >;

  collateralTokenForPosition(position: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  getBorrowingFee(
    collateralToken: PromiseOrValue<string>,
    debtAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getBorrowingRate(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getBorrowingRateWithDecay(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getRedemptionFee(
    collateralToken: PromiseOrValue<string>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    priceDeviation: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getRedemptionFeeWithDecay(
    collateralToken: PromiseOrValue<string>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getRedemptionRate(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getRedemptionRateWithDecay(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  isDelegateWhitelisted(
    position: PromiseOrValue<string>,
    delegate: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  lastFeeOperationTime(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  liquidate(
    position: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  managePosition(
    collateralToken: PromiseOrValue<string>,
    position: PromiseOrValue<string>,
    collateralChange: PromiseOrValue<BigNumberish>,
    isCollateralIncrease: PromiseOrValue<boolean>,
    debtChange: PromiseOrValue<BigNumberish>,
    isDebtIncrease: PromiseOrValue<boolean>,
    maxFeePercentage: PromiseOrValue<BigNumberish>,
    permitSignature: ERC20PermitSignatureStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  priceFeed(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  rToken(overrides?: CallOverrides): Promise<string>;

  raftCollateralToken(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  raftDebtToken(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  redeemCollateral(
    collateralToken: PromiseOrValue<string>,
    debtAmount: PromiseOrValue<BigNumberish>,
    maxFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  redemptionRebate(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  redemptionSpread(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setBorrowingSpread(
    collateralToken: PromiseOrValue<string>,
    newBorrowingSpread: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setCollateralEnabled(
    collateralToken: PromiseOrValue<string>,
    isEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFeeRecipient(
    newFeeRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRedemptionRebate(
    collateralToken: PromiseOrValue<string>,
    newRedemptionRebate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRedemptionSpread(
    collateralToken: PromiseOrValue<string>,
    newRedemptionSpread: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSplitLiquidationCollateral(
    collateralToken: PromiseOrValue<string>,
    newSplitLiquidationCollateral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  splitLiquidationCollateral(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  whitelistDelegate(
    delegate: PromiseOrValue<string>,
    whitelisted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    BETA(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BORROWING_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BORROWING_SPREAD(overrides?: CallOverrides): Promise<BigNumber>;

    MINUTE_DECAY_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addCollateralToken(
      collateralToken: PromiseOrValue<string>,
      priceFeed: PromiseOrValue<string>,
      newSplitLiquidationCollateral: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    baseRate(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowingSpread(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    collateralEnabled(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    collateralInfo(
      collateralToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, string, boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        collateralToken: string;
        debtToken: string;
        priceFeed: string;
        splitLiquidation: string;
        isEnabled: boolean;
        lastFeeOperationTime: BigNumber;
        borrowingSpread: BigNumber;
        baseRate: BigNumber;
        redemptionSpread: BigNumber;
        redemptionRebate: BigNumber;
      }
    >;

    collateralTokenForPosition(position: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    getBorrowingFee(
      collateralToken: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getBorrowingRate(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowingRateWithDecay(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRedemptionFee(
      collateralToken: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      priceDeviation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRedemptionFeeWithDecay(
      collateralToken: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRedemptionRate(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRedemptionRateWithDecay(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isDelegateWhitelisted(
      position: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    lastFeeOperationTime(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(position: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    managePosition(
      collateralToken: PromiseOrValue<string>,
      position: PromiseOrValue<string>,
      collateralChange: PromiseOrValue<BigNumberish>,
      isCollateralIncrease: PromiseOrValue<boolean>,
      debtChange: PromiseOrValue<BigNumberish>,
      isDebtIncrease: PromiseOrValue<boolean>,
      maxFeePercentage: PromiseOrValue<BigNumberish>,
      permitSignature: ERC20PermitSignatureStruct,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        actualCollateralChange: BigNumber;
        actualDebtChange: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    priceFeed(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    rToken(overrides?: CallOverrides): Promise<string>;

    raftCollateralToken(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    raftDebtToken(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    redeemCollateral(
      collateralToken: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      maxFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    redemptionRebate(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    redemptionSpread(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBorrowingSpread(
      collateralToken: PromiseOrValue<string>,
      newBorrowingSpread: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setCollateralEnabled(
      collateralToken: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setFeeRecipient(newFeeRecipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setRedemptionRebate(
      collateralToken: PromiseOrValue<string>,
      newRedemptionRebate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setRedemptionSpread(
      collateralToken: PromiseOrValue<string>,
      newRedemptionSpread: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setSplitLiquidationCollateral(
      collateralToken: PromiseOrValue<string>,
      newSplitLiquidationCollateral: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    splitLiquidationCollateral(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    whitelistDelegate(
      delegate: PromiseOrValue<string>,
      whitelisted: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'BaseRateUpdated(address,uint256)'(collateralToken?: null, baseRate?: null): BaseRateUpdatedEventFilter;
    BaseRateUpdated(collateralToken?: null, baseRate?: null): BaseRateUpdatedEventFilter;

    'BorrowingSpreadUpdated(uint256)'(borrowingSpread?: null): BorrowingSpreadUpdatedEventFilter;
    BorrowingSpreadUpdated(borrowingSpread?: null): BorrowingSpreadUpdatedEventFilter;

    'CollateralChanged(address,address,uint256,bool)'(
      position?: PromiseOrValue<string> | null,
      collateralToken?: PromiseOrValue<string> | null,
      collateralAmount?: null,
      isCollateralIncrease?: null,
    ): CollateralChangedEventFilter;
    CollateralChanged(
      position?: PromiseOrValue<string> | null,
      collateralToken?: PromiseOrValue<string> | null,
      collateralAmount?: null,
      isCollateralIncrease?: null,
    ): CollateralChangedEventFilter;

    'CollateralTokenAdded(address,address,address,address)'(
      collateralToken?: null,
      raftCollateralToken?: null,
      raftDebtToken?: null,
      priceFeed?: null,
    ): CollateralTokenAddedEventFilter;
    CollateralTokenAdded(
      collateralToken?: null,
      raftCollateralToken?: null,
      raftDebtToken?: null,
      priceFeed?: null,
    ): CollateralTokenAddedEventFilter;

    'CollateralTokenModified(address,bool)'(
      collateralToken?: null,
      isEnabled?: null,
    ): CollateralTokenModifiedEventFilter;
    CollateralTokenModified(collateralToken?: null, isEnabled?: null): CollateralTokenModifiedEventFilter;

    'DebtChanged(address,address,uint256,bool)'(
      position?: PromiseOrValue<string> | null,
      collateralToken?: PromiseOrValue<string> | null,
      debtAmount?: null,
      isDebtIncrease?: null,
    ): DebtChangedEventFilter;
    DebtChanged(
      position?: PromiseOrValue<string> | null,
      collateralToken?: PromiseOrValue<string> | null,
      debtAmount?: null,
      isDebtIncrease?: null,
    ): DebtChangedEventFilter;

    'DelegateWhitelisted(address,address,bool)'(
      position?: PromiseOrValue<string> | null,
      delegate?: PromiseOrValue<string> | null,
      whitelisted?: null,
    ): DelegateWhitelistedEventFilter;
    DelegateWhitelisted(
      position?: PromiseOrValue<string> | null,
      delegate?: PromiseOrValue<string> | null,
      whitelisted?: null,
    ): DelegateWhitelistedEventFilter;

    'FeeRecipientChanged(address)'(feeRecipient?: null): FeeRecipientChangedEventFilter;
    FeeRecipientChanged(feeRecipient?: null): FeeRecipientChangedEventFilter;

    'LastFeeOpTimeUpdated(address,uint256)'(
      collateralToken?: null,
      lastFeeOpTime?: null,
    ): LastFeeOpTimeUpdatedEventFilter;
    LastFeeOpTimeUpdated(collateralToken?: null, lastFeeOpTime?: null): LastFeeOpTimeUpdatedEventFilter;

    'Liquidation(address,address,address,uint256,uint256,uint256,uint256,bool)'(
      liquidator?: PromiseOrValue<string> | null,
      position?: PromiseOrValue<string> | null,
      collateralToken?: PromiseOrValue<string> | null,
      debtLiquidated?: null,
      collateralLiquidated?: null,
      collateralSentToLiquidator?: null,
      collateralLiquidationFeePaid?: null,
      isRedistribution?: null,
    ): LiquidationEventFilter;
    Liquidation(
      liquidator?: PromiseOrValue<string> | null,
      position?: PromiseOrValue<string> | null,
      collateralToken?: PromiseOrValue<string> | null,
      debtLiquidated?: null,
      collateralLiquidated?: null,
      collateralSentToLiquidator?: null,
      collateralLiquidationFeePaid?: null,
      isRedistribution?: null,
    ): LiquidationEventFilter;

    'OwnershipTransferStarted(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferStartedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'PositionClosed(address)'(position?: PromiseOrValue<string> | null): PositionClosedEventFilter;
    PositionClosed(position?: PromiseOrValue<string> | null): PositionClosedEventFilter;

    'PositionCreated(address,address)'(
      position?: PromiseOrValue<string> | null,
      collateralToken?: PromiseOrValue<string> | null,
    ): PositionCreatedEventFilter;
    PositionCreated(
      position?: PromiseOrValue<string> | null,
      collateralToken?: PromiseOrValue<string> | null,
    ): PositionCreatedEventFilter;

    'PositionManagerDeployed(address,address)'(rToken?: null, feeRecipient?: null): PositionManagerDeployedEventFilter;
    PositionManagerDeployed(rToken?: null, feeRecipient?: null): PositionManagerDeployedEventFilter;

    'RBorrowingFeePaid(address,address,uint256)'(
      collateralToken?: null,
      position?: PromiseOrValue<string> | null,
      feeAmount?: null,
    ): RBorrowingFeePaidEventFilter;
    RBorrowingFeePaid(
      collateralToken?: null,
      position?: PromiseOrValue<string> | null,
      feeAmount?: null,
    ): RBorrowingFeePaidEventFilter;

    'Redemption(address,uint256,uint256,uint256,uint256)'(
      redeemer?: PromiseOrValue<string> | null,
      amount?: null,
      collateralSent?: null,
      fee?: null,
      rebate?: null,
    ): RedemptionEventFilter;
    Redemption(
      redeemer?: PromiseOrValue<string> | null,
      amount?: null,
      collateralSent?: null,
      fee?: null,
      rebate?: null,
    ): RedemptionEventFilter;

    'RedemptionRebateUpdated(uint256)'(redemptionRebate?: null): RedemptionRebateUpdatedEventFilter;
    RedemptionRebateUpdated(redemptionRebate?: null): RedemptionRebateUpdatedEventFilter;

    'RedemptionSpreadUpdated(address,uint256)'(
      collateralToken?: null,
      redemptionSpread?: null,
    ): RedemptionSpreadUpdatedEventFilter;
    RedemptionSpreadUpdated(collateralToken?: null, redemptionSpread?: null): RedemptionSpreadUpdatedEventFilter;

    'SplitLiquidationCollateralChanged(address,address)'(
      collateralToken?: null,
      newSplitLiquidationCollateral?: PromiseOrValue<string> | null,
    ): SplitLiquidationCollateralChangedEventFilter;
    SplitLiquidationCollateralChanged(
      collateralToken?: null,
      newSplitLiquidationCollateral?: PromiseOrValue<string> | null,
    ): SplitLiquidationCollateralChangedEventFilter;
  };

  estimateGas: {
    BETA(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BORROWING_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BORROWING_SPREAD(overrides?: CallOverrides): Promise<BigNumber>;

    MINUTE_DECAY_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    addCollateralToken(
      collateralToken: PromiseOrValue<string>,
      priceFeed: PromiseOrValue<string>,
      newSplitLiquidationCollateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    baseRate(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowingSpread(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    collateralEnabled(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    collateralInfo(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    collateralTokenForPosition(position: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowingFee(
      collateralToken: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getBorrowingRate(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowingRateWithDecay(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRedemptionFee(
      collateralToken: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      priceDeviation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRedemptionFeeWithDecay(
      collateralToken: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRedemptionRate(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRedemptionRateWithDecay(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isDelegateWhitelisted(
      position: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lastFeeOperationTime(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      position: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    managePosition(
      collateralToken: PromiseOrValue<string>,
      position: PromiseOrValue<string>,
      collateralChange: PromiseOrValue<BigNumberish>,
      isCollateralIncrease: PromiseOrValue<boolean>,
      debtChange: PromiseOrValue<BigNumberish>,
      isDebtIncrease: PromiseOrValue<boolean>,
      maxFeePercentage: PromiseOrValue<BigNumberish>,
      permitSignature: ERC20PermitSignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    rToken(overrides?: CallOverrides): Promise<BigNumber>;

    raftCollateralToken(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    raftDebtToken(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    redeemCollateral(
      collateralToken: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      maxFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    redemptionRebate(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    redemptionSpread(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setBorrowingSpread(
      collateralToken: PromiseOrValue<string>,
      newBorrowingSpread: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setCollateralEnabled(
      collateralToken: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFeeRecipient(
      newFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRedemptionRebate(
      collateralToken: PromiseOrValue<string>,
      newRedemptionRebate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRedemptionSpread(
      collateralToken: PromiseOrValue<string>,
      newRedemptionSpread: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSplitLiquidationCollateral(
      collateralToken: PromiseOrValue<string>,
      newSplitLiquidationCollateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    splitLiquidationCollateral(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    whitelistDelegate(
      delegate: PromiseOrValue<string>,
      whitelisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BETA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BORROWING_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BORROWING_SPREAD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINUTE_DECAY_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    addCollateralToken(
      collateralToken: PromiseOrValue<string>,
      priceFeed: PromiseOrValue<string>,
      newSplitLiquidationCollateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    baseRate(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowingSpread(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralEnabled(
      collateralToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    collateralInfo(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralTokenForPosition(
      position: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBorrowingFee(
      collateralToken: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getBorrowingRate(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBorrowingRateWithDecay(
      collateralToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRedemptionFee(
      collateralToken: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      priceDeviation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRedemptionFeeWithDecay(
      collateralToken: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRedemptionRate(
      collateralToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRedemptionRateWithDecay(
      collateralToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isDelegateWhitelisted(
      position: PromiseOrValue<string>,
      delegate: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lastFeeOperationTime(
      collateralToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    liquidate(
      position: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    managePosition(
      collateralToken: PromiseOrValue<string>,
      position: PromiseOrValue<string>,
      collateralChange: PromiseOrValue<BigNumberish>,
      isCollateralIncrease: PromiseOrValue<boolean>,
      debtChange: PromiseOrValue<BigNumberish>,
      isDebtIncrease: PromiseOrValue<boolean>,
      maxFeePercentage: PromiseOrValue<BigNumberish>,
      permitSignature: ERC20PermitSignatureStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeed(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    raftCollateralToken(
      collateralToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    raftDebtToken(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemCollateral(
      collateralToken: PromiseOrValue<string>,
      debtAmount: PromiseOrValue<BigNumberish>,
      maxFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    redemptionRebate(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redemptionSpread(collateralToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setBorrowingSpread(
      collateralToken: PromiseOrValue<string>,
      newBorrowingSpread: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setCollateralEnabled(
      collateralToken: PromiseOrValue<string>,
      isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFeeRecipient(
      newFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRedemptionRebate(
      collateralToken: PromiseOrValue<string>,
      newRedemptionRebate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRedemptionSpread(
      collateralToken: PromiseOrValue<string>,
      newRedemptionSpread: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSplitLiquidationCollateral(
      collateralToken: PromiseOrValue<string>,
      newSplitLiquidationCollateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    splitLiquidationCollateral(
      collateralToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    whitelistDelegate(
      delegate: PromiseOrValue<string>,
      whitelisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
