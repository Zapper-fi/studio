/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface RaftLiquiditationInterface extends utils.Interface {
  functions: {
    'LOW_TOTAL_DEBT()': FunctionFragment;
    'MCR()': FunctionFragment;
    'split(uint256,uint256,uint256,bool)': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'LOW_TOTAL_DEBT' | 'MCR' | 'split'): FunctionFragment;

  encodeFunctionData(functionFragment: 'LOW_TOTAL_DEBT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MCR', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'split',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
    ],
  ): string;

  decodeFunctionResult(functionFragment: 'LOW_TOTAL_DEBT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MCR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'split', data: BytesLike): Result;

  events: {};
}

export interface RaftLiquiditation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RaftLiquiditationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LOW_TOTAL_DEBT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MCR(overrides?: CallOverrides): Promise<[BigNumber]>;

    split(
      totalCollateral: PromiseOrValue<BigNumberish>,
      totalDebt: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      isRedistribution: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        collateralToSendToProtocol: BigNumber;
        collateralToSentToLiquidator: BigNumber;
      }
    >;
  };

  LOW_TOTAL_DEBT(overrides?: CallOverrides): Promise<BigNumber>;

  MCR(overrides?: CallOverrides): Promise<BigNumber>;

  split(
    totalCollateral: PromiseOrValue<BigNumberish>,
    totalDebt: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    isRedistribution: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      collateralToSendToProtocol: BigNumber;
      collateralToSentToLiquidator: BigNumber;
    }
  >;

  callStatic: {
    LOW_TOTAL_DEBT(overrides?: CallOverrides): Promise<BigNumber>;

    MCR(overrides?: CallOverrides): Promise<BigNumber>;

    split(
      totalCollateral: PromiseOrValue<BigNumberish>,
      totalDebt: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      isRedistribution: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        collateralToSendToProtocol: BigNumber;
        collateralToSentToLiquidator: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    LOW_TOTAL_DEBT(overrides?: CallOverrides): Promise<BigNumber>;

    MCR(overrides?: CallOverrides): Promise<BigNumber>;

    split(
      totalCollateral: PromiseOrValue<BigNumberish>,
      totalDebt: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      isRedistribution: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LOW_TOTAL_DEBT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MCR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    split(
      totalCollateral: PromiseOrValue<BigNumberish>,
      totalDebt: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      isRedistribution: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
