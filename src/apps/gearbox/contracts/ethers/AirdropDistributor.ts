/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export type ClaimedDataStruct = {
  account: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
};

export type ClaimedDataStructOutput = [string, BigNumber] & {
  account: string;
  amount: BigNumber;
};

export type DistributionDataStruct = {
  account: PromiseOrValue<string>;
  campaignId: PromiseOrValue<BigNumberish>;
  amount: PromiseOrValue<BigNumberish>;
};

export type DistributionDataStructOutput = [string, number, BigNumber] & {
  account: string;
  campaignId: number;
  amount: BigNumber;
};

export interface AirdropDistributorInterface extends utils.Interface {
  functions: {
    'claim(uint256,address,uint256,bytes32[])': FunctionFragment;
    'claimed(address)': FunctionFragment;
    'emitDistributionEvents((address,uint8,uint256)[])': FunctionFragment;
    'merkleRoot()': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'token()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'treasury()': FunctionFragment;
    'updateHistoricClaims((address,uint256)[])': FunctionFragment;
    'updateMerkleRoot(bytes32)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'claim'
      | 'claimed'
      | 'emitDistributionEvents'
      | 'merkleRoot'
      | 'owner'
      | 'renounceOwnership'
      | 'token'
      | 'transferOwnership'
      | 'treasury'
      | 'updateHistoricClaims'
      | 'updateMerkleRoot',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'claim',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
    ],
  ): string;
  encodeFunctionData(functionFragment: 'claimed', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'emitDistributionEvents', values: [DistributionDataStruct[]]): string;
  encodeFunctionData(functionFragment: 'merkleRoot', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'treasury', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateHistoricClaims', values: [ClaimedDataStruct[]]): string;
  encodeFunctionData(functionFragment: 'updateMerkleRoot', values: [PromiseOrValue<BytesLike>]): string;

  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emitDistributionEvents', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'merkleRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateHistoricClaims', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMerkleRoot', data: BytesLike): Result;

  events: {
    'Claimed(address,uint256,bool)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'RootUpdated(bytes32,bytes32)': EventFragment;
    'TokenAllocated(address,uint8,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Claimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RootUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenAllocated'): EventFragment;
}

export interface ClaimedEventObject {
  account: string;
  amount: BigNumber;
  historic: boolean;
}
export type ClaimedEvent = TypedEvent<[string, BigNumber, boolean], ClaimedEventObject>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RootUpdatedEventObject {
  oldRoot: string;
  newRoot: string;
}
export type RootUpdatedEvent = TypedEvent<[string, string], RootUpdatedEventObject>;

export type RootUpdatedEventFilter = TypedEventFilter<RootUpdatedEvent>;

export interface TokenAllocatedEventObject {
  account: string;
  campaignId: number;
  amount: BigNumber;
}
export type TokenAllocatedEvent = TypedEvent<[string, number, BigNumber], TokenAllocatedEventObject>;

export type TokenAllocatedEventFilter = TypedEventFilter<TokenAllocatedEvent>;

export interface AirdropDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AirdropDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      index: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      totalAmount: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    emitDistributionEvents(
      data: DistributionDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    updateHistoricClaims(
      alreadyClaimed: ClaimedDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateMerkleRoot(
      newRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  claim(
    index: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    totalAmount: PromiseOrValue<BigNumberish>,
    merkleProof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  emitDistributionEvents(
    data: DistributionDataStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  merkleRoot(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  updateHistoricClaims(
    alreadyClaimed: ClaimedDataStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateMerkleRoot(
    newRoot: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    claim(
      index: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      totalAmount: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    claimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    emitDistributionEvents(data: DistributionDataStruct[], overrides?: CallOverrides): Promise<void>;

    merkleRoot(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    updateHistoricClaims(alreadyClaimed: ClaimedDataStruct[], overrides?: CallOverrides): Promise<void>;

    updateMerkleRoot(newRoot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Claimed(address,uint256,bool)'(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      historic?: PromiseOrValue<boolean> | null,
    ): ClaimedEventFilter;
    Claimed(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      historic?: PromiseOrValue<boolean> | null,
    ): ClaimedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'RootUpdated(bytes32,bytes32)'(oldRoot?: null, newRoot?: PromiseOrValue<BytesLike> | null): RootUpdatedEventFilter;
    RootUpdated(oldRoot?: null, newRoot?: PromiseOrValue<BytesLike> | null): RootUpdatedEventFilter;

    'TokenAllocated(address,uint8,uint256)'(
      account?: PromiseOrValue<string> | null,
      campaignId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
    ): TokenAllocatedEventFilter;
    TokenAllocated(
      account?: PromiseOrValue<string> | null,
      campaignId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
    ): TokenAllocatedEventFilter;
  };

  estimateGas: {
    claim(
      index: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      totalAmount: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    emitDistributionEvents(
      data: DistributionDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    updateHistoricClaims(
      alreadyClaimed: ClaimedDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateMerkleRoot(
      newRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      index: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      totalAmount: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emitDistributionEvents(
      data: DistributionDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateHistoricClaims(
      alreadyClaimed: ClaimedDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateMerkleRoot(
      newRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
