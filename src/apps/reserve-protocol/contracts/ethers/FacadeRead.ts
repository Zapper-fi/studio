/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace IFacadeRead {
  export type PendingStruct = {
    index: PromiseOrValue<BigNumberish>;
    availableAt: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type PendingStructOutput = [BigNumber, BigNumber, BigNumber] & {
    index: BigNumber;
    availableAt: BigNumber;
    amount: BigNumber;
  };
}

export interface FacadeReadInterface extends utils.Interface {
  functions: {
    'auctionsSettleable(address)': FunctionFragment;
    'backingOverview(address)': FunctionFragment;
    'backupConfig(address,bytes32)': FunctionFragment;
    'basketBreakdown(address)': FunctionFragment;
    'basketTokens(address)': FunctionFragment;
    'issue(address,uint256)': FunctionFragment;
    'maxIssuable(address,address)': FunctionFragment;
    'pendingUnstakings(address,address)': FunctionFragment;
    'price(address)': FunctionFragment;
    'primeBasket(address)': FunctionFragment;
    'redeem(address,uint256,uint48)': FunctionFragment;
    'stToken(address)': FunctionFragment;
    'traderBalances(address,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'auctionsSettleable'
      | 'backingOverview'
      | 'backupConfig'
      | 'basketBreakdown'
      | 'basketTokens'
      | 'issue'
      | 'maxIssuable'
      | 'pendingUnstakings'
      | 'price'
      | 'primeBasket'
      | 'redeem'
      | 'stToken'
      | 'traderBalances',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'auctionsSettleable', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'backingOverview', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'backupConfig',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'basketBreakdown', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'basketTokens', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'issue', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'maxIssuable', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'pendingUnstakings',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'price', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'primeBasket', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'redeem',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'stToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'traderBalances',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(functionFragment: 'auctionsSettleable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'backingOverview', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'backupConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'basketBreakdown', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'basketTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'issue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxIssuable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingUnstakings', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'price', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'primeBasket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'traderBalances', data: BytesLike): Result;

  events: {};
}

export interface FacadeRead extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FacadeReadInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auctionsSettleable(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string[]] & { erc20s: string[] }>;

    backingOverview(
      rToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        backing: BigNumber;
        overCollateralization: BigNumber;
      }
    >;

    backupConfig(
      rToken: PromiseOrValue<string>,
      targetName: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[string[], BigNumber] & { erc20s: string[]; max: BigNumber }>;

    basketBreakdown(
      rToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    basketTokens(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string[]] & { tokens: string[] }>;

    issue(
      rToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    maxIssuable(
      rToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    pendingUnstakings(
      rToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [IFacadeRead.PendingStructOutput[]] & {
        unstakings: IFacadeRead.PendingStructOutput[];
      }
    >;

    price(
      rToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { low: BigNumber; high: BigNumber }>;

    primeBasket(
      rToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], string[], BigNumber[]] & {
        erc20s: string[];
        targetNames: string[];
        targetAmts: BigNumber[];
      }
    >;

    redeem(
      rToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      basketNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stToken(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string] & { stTokenAddress: string }>;

    traderBalances(
      rToken: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], BigNumber[], BigNumber[]] & {
        erc20s: string[];
        balances: BigNumber[];
        balancesNeeded: BigNumber[];
      }
    >;
  };

  auctionsSettleable(trader: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

  backingOverview(
    rToken: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      backing: BigNumber;
      overCollateralization: BigNumber;
    }
  >;

  backupConfig(
    rToken: PromiseOrValue<string>,
    targetName: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<[string[], BigNumber] & { erc20s: string[]; max: BigNumber }>;

  basketBreakdown(
    rToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  basketTokens(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

  issue(
    rToken: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  maxIssuable(
    rToken: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  pendingUnstakings(
    rToken: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<IFacadeRead.PendingStructOutput[]>;

  price(
    rToken: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { low: BigNumber; high: BigNumber }>;

  primeBasket(
    rToken: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [string[], string[], BigNumber[]] & {
      erc20s: string[];
      targetNames: string[];
      targetAmts: BigNumber[];
    }
  >;

  redeem(
    rToken: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    basketNonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stToken(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  traderBalances(
    rToken: PromiseOrValue<string>,
    trader: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [string[], BigNumber[], BigNumber[]] & {
      erc20s: string[];
      balances: BigNumber[];
      balancesNeeded: BigNumber[];
    }
  >;

  callStatic: {
    auctionsSettleable(trader: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

    backingOverview(
      rToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        backing: BigNumber;
        overCollateralization: BigNumber;
      }
    >;

    backupConfig(
      rToken: PromiseOrValue<string>,
      targetName: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[string[], BigNumber] & { erc20s: string[]; max: BigNumber }>;

    basketBreakdown(
      rToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], BigNumber[], string[]] & {
        erc20s: string[];
        uoaShares: BigNumber[];
        targets: string[];
      }
    >;

    basketTokens(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

    issue(
      rToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], BigNumber[], BigNumber[]] & {
        tokens: string[];
        deposits: BigNumber[];
        depositsUoA: BigNumber[];
      }
    >;

    maxIssuable(
      rToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pendingUnstakings(
      rToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<IFacadeRead.PendingStructOutput[]>;

    price(
      rToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { low: BigNumber; high: BigNumber }>;

    primeBasket(
      rToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], string[], BigNumber[]] & {
        erc20s: string[];
        targetNames: string[];
        targetAmts: BigNumber[];
      }
    >;

    redeem(
      rToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      basketNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], BigNumber[], boolean] & {
        tokens: string[];
        withdrawals: BigNumber[];
        isProrata: boolean;
      }
    >;

    stToken(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    traderBalances(
      rToken: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], BigNumber[], BigNumber[]] & {
        erc20s: string[];
        balances: BigNumber[];
        balancesNeeded: BigNumber[];
      }
    >;
  };

  filters: {};

  estimateGas: {
    auctionsSettleable(trader: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    backingOverview(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    backupConfig(
      rToken: PromiseOrValue<string>,
      targetName: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    basketBreakdown(
      rToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    basketTokens(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    issue(
      rToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    maxIssuable(
      rToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    pendingUnstakings(
      rToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    price(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    primeBasket(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      rToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      basketNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stToken(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    traderBalances(
      rToken: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionsSettleable(trader: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    backingOverview(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    backupConfig(
      rToken: PromiseOrValue<string>,
      targetName: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    basketBreakdown(
      rToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    basketTokens(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    issue(
      rToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    maxIssuable(
      rToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    pendingUnstakings(
      rToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    price(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    primeBasket(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      rToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      basketNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stToken(rToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    traderBalances(
      rToken: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
