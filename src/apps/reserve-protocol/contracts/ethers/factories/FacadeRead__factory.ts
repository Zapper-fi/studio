/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type { FacadeRead, FacadeReadInterface } from '../FacadeRead';

const _abi = [
  {
    inputs: [],
    name: 'UIntOutOfBounds',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'contract ITrading',
        name: 'trader',
        type: 'address',
      },
    ],
    name: 'auctionsSettleable',
    outputs: [
      {
        internalType: 'contract IERC20[]',
        name: 'erc20s',
        type: 'address[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IRToken',
        name: 'rToken',
        type: 'address',
      },
    ],
    name: 'backingOverview',
    outputs: [
      {
        internalType: 'uint192',
        name: 'backing',
        type: 'uint192',
      },
      {
        internalType: 'uint192',
        name: 'overCollateralization',
        type: 'uint192',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract RTokenP1',
        name: 'rToken',
        type: 'address',
      },
      {
        internalType: 'bytes32',
        name: 'targetName',
        type: 'bytes32',
      },
    ],
    name: 'backupConfig',
    outputs: [
      {
        internalType: 'contract IERC20[]',
        name: 'erc20s',
        type: 'address[]',
      },
      {
        internalType: 'uint256',
        name: 'max',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract RTokenP1',
        name: 'rToken',
        type: 'address',
      },
    ],
    name: 'basketBreakdown',
    outputs: [
      {
        internalType: 'address[]',
        name: 'erc20s',
        type: 'address[]',
      },
      {
        internalType: 'uint192[]',
        name: 'uoaShares',
        type: 'uint192[]',
      },
      {
        internalType: 'bytes32[]',
        name: 'targets',
        type: 'bytes32[]',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IRToken',
        name: 'rToken',
        type: 'address',
      },
    ],
    name: 'basketTokens',
    outputs: [
      {
        internalType: 'address[]',
        name: 'tokens',
        type: 'address[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IRToken',
        name: 'rToken',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'issue',
    outputs: [
      {
        internalType: 'address[]',
        name: 'tokens',
        type: 'address[]',
      },
      {
        internalType: 'uint256[]',
        name: 'deposits',
        type: 'uint256[]',
      },
      {
        internalType: 'uint192[]',
        name: 'depositsUoA',
        type: 'uint192[]',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IRToken',
        name: 'rToken',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'maxIssuable',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract RTokenP1',
        name: 'rToken',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'pendingUnstakings',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'index',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'availableAt',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
        ],
        internalType: 'struct IFacadeRead.Pending[]',
        name: 'unstakings',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IRToken',
        name: 'rToken',
        type: 'address',
      },
    ],
    name: 'price',
    outputs: [
      {
        internalType: 'uint192',
        name: 'low',
        type: 'uint192',
      },
      {
        internalType: 'uint192',
        name: 'high',
        type: 'uint192',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract RTokenP1',
        name: 'rToken',
        type: 'address',
      },
    ],
    name: 'primeBasket',
    outputs: [
      {
        internalType: 'contract IERC20[]',
        name: 'erc20s',
        type: 'address[]',
      },
      {
        internalType: 'bytes32[]',
        name: 'targetNames',
        type: 'bytes32[]',
      },
      {
        internalType: 'uint192[]',
        name: 'targetAmts',
        type: 'uint192[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IRToken',
        name: 'rToken',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        internalType: 'uint48',
        name: 'basketNonce',
        type: 'uint48',
      },
    ],
    name: 'redeem',
    outputs: [
      {
        internalType: 'address[]',
        name: 'tokens',
        type: 'address[]',
      },
      {
        internalType: 'uint256[]',
        name: 'withdrawals',
        type: 'uint256[]',
      },
      {
        internalType: 'bool',
        name: 'isProrata',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IRToken',
        name: 'rToken',
        type: 'address',
      },
    ],
    name: 'stToken',
    outputs: [
      {
        internalType: 'contract IStRSR',
        name: 'stTokenAddress',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IRToken',
        name: 'rToken',
        type: 'address',
      },
      {
        internalType: 'contract ITrading',
        name: 'trader',
        type: 'address',
      },
    ],
    name: 'traderBalances',
    outputs: [
      {
        internalType: 'contract IERC20[]',
        name: 'erc20s',
        type: 'address[]',
      },
      {
        internalType: 'uint256[]',
        name: 'balances',
        type: 'uint256[]',
      },
      {
        internalType: 'uint256[]',
        name: 'balancesNeeded',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

export class FacadeRead__factory {
  static readonly abi = _abi;
  static createInterface(): FacadeReadInterface {
    return new utils.Interface(_abi) as FacadeReadInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): FacadeRead {
    return new Contract(address, _abi, signerOrProvider) as FacadeRead;
  }
}
