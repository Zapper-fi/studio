/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface PenguinIPefiInterface extends utils.Interface {
  functions: {
    'DELEGATION_TYPEHASH()': FunctionFragment;
    'DOMAIN_TYPEHASH()': FunctionFragment;
    'MAX_BIPS()': FunctionFragment;
    'MAX_PAPER_HANDS_PENALTY()': FunctionFragment;
    'SECONDS_PER_DAY()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'checkpoints(address,uint32)': FunctionFragment;
    'currentExchangeRate()': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'delegate(address)': FunctionFragment;
    'delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'delegates(address)': FunctionFragment;
    'deposits(address)': FunctionFragment;
    'enter(uint256)': FunctionFragment;
    'fundsCollectedByPHP()': FunctionFragment;
    'getCurrentVotes(address)': FunctionFragment;
    'getExchangeRateHistory(uint256)': FunctionFragment;
    'getLatestStoredExchangeRate()': FunctionFragment;
    'getPriorVotes(address,uint256)': FunctionFragment;
    'historicExchangeRates(uint256)': FunctionFragment;
    'historicTimestamps(uint256)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'isLuckyPenguinEnabled()': FunctionFragment;
    'leave(uint256)': FunctionFragment;
    'luckyPenguin()': FunctionFragment;
    'luckyPenguinCount()': FunctionFragment;
    'luckyPenguinEarnings(address)': FunctionFragment;
    'luckyPenguinInterval()': FunctionFragment;
    'luckyPenguinMinimumDeposit()': FunctionFragment;
    'luckyPenguinRewardBP()': FunctionFragment;
    'name()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'numCheckpoints(address)': FunctionFragment;
    'numStoredExchangeRates()': FunctionFragment;
    'owner()': FunctionFragment;
    'paperHandsPenalty()': FunctionFragment;
    'pefi()': FunctionFragment;
    'pefiBalance()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardsReceived()': FunctionFragment;
    'rollingStartPefiBalance()': FunctionFragment;
    'rollingStartTimestamp()': FunctionFragment;
    'rollingStartTotalDeposits()': FunctionFragment;
    'rollingStartTotalWithdrawals()': FunctionFragment;
    'setLuckyPenguinEnabled(bool)': FunctionFragment;
    'setLuckyPenguinInterval(uint256)': FunctionFragment;
    'setLuckyPenguinMinimumDeposit(uint256)': FunctionFragment;
    'setLuckyPenguinRewardBP(uint256)': FunctionFragment;
    'setPaperHandsPenalty(uint256)': FunctionFragment;
    'symbol()': FunctionFragment;
    'timeSinceLastDailyUpdate()': FunctionFragment;
    'totalDeposits()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'totalWithdrawals()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'userProfits(address)': FunctionFragment;
    'withdrawals(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DELEGATION_TYPEHASH'
      | 'DOMAIN_TYPEHASH'
      | 'MAX_BIPS'
      | 'MAX_PAPER_HANDS_PENALTY'
      | 'SECONDS_PER_DAY'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'checkpoints'
      | 'currentExchangeRate'
      | 'decimals'
      | 'decreaseAllowance'
      | 'delegate'
      | 'delegateBySig'
      | 'delegates'
      | 'deposits'
      | 'enter'
      | 'fundsCollectedByPHP'
      | 'getCurrentVotes'
      | 'getExchangeRateHistory'
      | 'getLatestStoredExchangeRate'
      | 'getPriorVotes'
      | 'historicExchangeRates'
      | 'historicTimestamps'
      | 'increaseAllowance'
      | 'isLuckyPenguinEnabled'
      | 'leave'
      | 'luckyPenguin'
      | 'luckyPenguinCount'
      | 'luckyPenguinEarnings'
      | 'luckyPenguinInterval'
      | 'luckyPenguinMinimumDeposit'
      | 'luckyPenguinRewardBP'
      | 'name'
      | 'nonces'
      | 'numCheckpoints'
      | 'numStoredExchangeRates'
      | 'owner'
      | 'paperHandsPenalty'
      | 'pefi'
      | 'pefiBalance'
      | 'renounceOwnership'
      | 'rewardsReceived'
      | 'rollingStartPefiBalance'
      | 'rollingStartTimestamp'
      | 'rollingStartTotalDeposits'
      | 'rollingStartTotalWithdrawals'
      | 'setLuckyPenguinEnabled'
      | 'setLuckyPenguinInterval'
      | 'setLuckyPenguinMinimumDeposit'
      | 'setLuckyPenguinRewardBP'
      | 'setPaperHandsPenalty'
      | 'symbol'
      | 'timeSinceLastDailyUpdate'
      | 'totalDeposits'
      | 'totalSupply'
      | 'totalWithdrawals'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'userProfits'
      | 'withdrawals',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DELEGATION_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DOMAIN_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_BIPS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_PAPER_HANDS_PENALTY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SECONDS_PER_DAY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'checkpoints', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'currentExchangeRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'delegate', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'delegateBySig',
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'delegates', values: [string]): string;
  encodeFunctionData(functionFragment: 'deposits', values: [string]): string;
  encodeFunctionData(functionFragment: 'enter', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'fundsCollectedByPHP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getCurrentVotes', values: [string]): string;
  encodeFunctionData(functionFragment: 'getExchangeRateHistory', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getLatestStoredExchangeRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPriorVotes', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'historicExchangeRates', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'historicTimestamps', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'isLuckyPenguinEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'leave', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'luckyPenguin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'luckyPenguinCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'luckyPenguinEarnings', values: [string]): string;
  encodeFunctionData(functionFragment: 'luckyPenguinInterval', values?: undefined): string;
  encodeFunctionData(functionFragment: 'luckyPenguinMinimumDeposit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'luckyPenguinRewardBP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [string]): string;
  encodeFunctionData(functionFragment: 'numCheckpoints', values: [string]): string;
  encodeFunctionData(functionFragment: 'numStoredExchangeRates', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paperHandsPenalty', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pefi', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pefiBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardsReceived', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rollingStartPefiBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rollingStartTimestamp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rollingStartTotalDeposits', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rollingStartTotalWithdrawals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setLuckyPenguinEnabled', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'setLuckyPenguinInterval', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setLuckyPenguinMinimumDeposit', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setLuckyPenguinRewardBP', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setPaperHandsPenalty', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'timeSinceLastDailyUpdate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalDeposits', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalWithdrawals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'userProfits', values: [string]): string;
  encodeFunctionData(functionFragment: 'withdrawals', values: [string]): string;

  decodeFunctionResult(functionFragment: 'DELEGATION_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DOMAIN_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_BIPS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_PAPER_HANDS_PENALTY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SECONDS_PER_DAY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkpoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentExchangeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegateBySig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegates', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fundsCollectedByPHP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCurrentVotes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getExchangeRateHistory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLatestStoredExchangeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPriorVotes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'historicExchangeRates', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'historicTimestamps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isLuckyPenguinEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'leave', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'luckyPenguin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'luckyPenguinCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'luckyPenguinEarnings', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'luckyPenguinInterval', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'luckyPenguinMinimumDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'luckyPenguinRewardBP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numCheckpoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numStoredExchangeRates', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paperHandsPenalty', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pefi', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pefiBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsReceived', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rollingStartPefiBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rollingStartTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rollingStartTotalDeposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rollingStartTotalWithdrawals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLuckyPenguinEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLuckyPenguinInterval', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLuckyPenguinMinimumDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLuckyPenguinRewardBP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPaperHandsPenalty', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timeSinceLastDailyUpdate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalDeposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalWithdrawals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userProfits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawals', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'DailyRewardsReceived(uint256,uint256)': EventFragment;
    'DelegateChanged(address,address,address)': EventFragment;
    'DelegateVotesChanged(address,uint256,uint256)': EventFragment;
    'Enter(address,uint256)': EventFragment;
    'Leave(address,uint256,uint256)': EventFragment;
    'LuckyPenguinDistribution(address,uint256)': EventFragment;
    'NewLuckyPenguin(address,address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'PaperHandsPenaltySet(uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DailyRewardsReceived'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DelegateChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DelegateVotesChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Enter'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Leave'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LuckyPenguinDistribution'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewLuckyPenguin'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PaperHandsPenaltySet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DailyRewardsReceivedEventObject {
  timestamp: BigNumber;
  amountPefi: BigNumber;
}
export type DailyRewardsReceivedEvent = TypedEvent<[BigNumber, BigNumber], DailyRewardsReceivedEventObject>;

export type DailyRewardsReceivedEventFilter = TypedEventFilter<DailyRewardsReceivedEvent>;

export interface DelegateChangedEventObject {
  delegator: string;
  fromDelegate: string;
  toDelegate: string;
}
export type DelegateChangedEvent = TypedEvent<[string, string, string], DelegateChangedEventObject>;

export type DelegateChangedEventFilter = TypedEventFilter<DelegateChangedEvent>;

export interface DelegateVotesChangedEventObject {
  delegate: string;
  previousBalance: BigNumber;
  newBalance: BigNumber;
}
export type DelegateVotesChangedEvent = TypedEvent<[string, BigNumber, BigNumber], DelegateVotesChangedEventObject>;

export type DelegateVotesChangedEventFilter = TypedEventFilter<DelegateVotesChangedEvent>;

export interface EnterEventObject {
  penguin: string;
  amount: BigNumber;
}
export type EnterEvent = TypedEvent<[string, BigNumber], EnterEventObject>;

export type EnterEventFilter = TypedEventFilter<EnterEvent>;

export interface LeaveEventObject {
  penguin: string;
  amount: BigNumber;
  shares: BigNumber;
}
export type LeaveEvent = TypedEvent<[string, BigNumber, BigNumber], LeaveEventObject>;

export type LeaveEventFilter = TypedEventFilter<LeaveEvent>;

export interface LuckyPenguinDistributionEventObject {
  luckyPenguin: string;
  amountPefi: BigNumber;
}
export type LuckyPenguinDistributionEvent = TypedEvent<[string, BigNumber], LuckyPenguinDistributionEventObject>;

export type LuckyPenguinDistributionEventFilter = TypedEventFilter<LuckyPenguinDistributionEvent>;

export interface NewLuckyPenguinEventObject {
  previousLuckyPenguin: string;
  newLuckyPenguin: string;
}
export type NewLuckyPenguinEvent = TypedEvent<[string, string], NewLuckyPenguinEventObject>;

export type NewLuckyPenguinEventFilter = TypedEventFilter<NewLuckyPenguinEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PaperHandsPenaltySetEventObject {
  newPaperHandsPenalty: BigNumber;
}
export type PaperHandsPenaltySetEvent = TypedEvent<[BigNumber], PaperHandsPenaltySetEventObject>;

export type PaperHandsPenaltySetEventFilter = TypedEventFilter<PaperHandsPenaltySetEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface PenguinIPefi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PenguinIPefiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    MAX_BIPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PAPER_HANDS_PENALTY(overrides?: CallOverrides): Promise<[BigNumber]>;

    SECONDS_PER_DAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    checkpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;

    currentExchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    delegates(delegator: string, overrides?: CallOverrides): Promise<[string]>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    enter(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    fundsCollectedByPHP(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentVotes(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getExchangeRateHistory(amount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber[], BigNumber[]]>;

    getLatestStoredExchangeRate(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getPriorVotes(account: string, blockNumber: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    historicExchangeRates(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    historicTimestamps(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isLuckyPenguinEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    leave(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    luckyPenguin(overrides?: CallOverrides): Promise<[string]>;

    luckyPenguinCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    luckyPenguinEarnings(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    luckyPenguinInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    luckyPenguinMinimumDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    luckyPenguinRewardBP(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    numStoredExchangeRates(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paperHandsPenalty(overrides?: CallOverrides): Promise<[BigNumber]>;

    pefi(overrides?: CallOverrides): Promise<[string]>;

    pefiBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    rewardsReceived(overrides?: CallOverrides): Promise<[BigNumber]>;

    rollingStartPefiBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    rollingStartTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    rollingStartTotalDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    rollingStartTotalWithdrawals(overrides?: CallOverrides): Promise<[BigNumber]>;

    setLuckyPenguinEnabled(
      _luckyPenguinEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setLuckyPenguinInterval(
      _luckyPenguinInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setLuckyPenguinMinimumDeposit(
      _luckyPenguinMinimumDeposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setLuckyPenguinRewardBP(
      _luckyPenguinRewardBP: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPaperHandsPenalty(
      _paperHandsPenalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    timeSinceLastDailyUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalWithdrawals(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    userProfits(penguinAddress: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawals(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  MAX_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PAPER_HANDS_PENALTY(overrides?: CallOverrides): Promise<BigNumber>;

  SECONDS_PER_DAY(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  checkpoints(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;

  currentExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  delegate(
    delegatee: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  delegateBySig(
    delegatee: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  delegates(delegator: string, overrides?: CallOverrides): Promise<string>;

  deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  enter(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  fundsCollectedByPHP(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  getExchangeRateHistory(amount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber[], BigNumber[]]>;

  getLatestStoredExchangeRate(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  getPriorVotes(account: string, blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  historicExchangeRates(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  historicTimestamps(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isLuckyPenguinEnabled(overrides?: CallOverrides): Promise<boolean>;

  leave(
    _share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  luckyPenguin(overrides?: CallOverrides): Promise<string>;

  luckyPenguinCount(overrides?: CallOverrides): Promise<BigNumber>;

  luckyPenguinEarnings(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  luckyPenguinInterval(overrides?: CallOverrides): Promise<BigNumber>;

  luckyPenguinMinimumDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  luckyPenguinRewardBP(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<number>;

  numStoredExchangeRates(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paperHandsPenalty(overrides?: CallOverrides): Promise<BigNumber>;

  pefi(overrides?: CallOverrides): Promise<string>;

  pefiBalance(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  rewardsReceived(overrides?: CallOverrides): Promise<BigNumber>;

  rollingStartPefiBalance(overrides?: CallOverrides): Promise<BigNumber>;

  rollingStartTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  rollingStartTotalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  rollingStartTotalWithdrawals(overrides?: CallOverrides): Promise<BigNumber>;

  setLuckyPenguinEnabled(
    _luckyPenguinEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setLuckyPenguinInterval(
    _luckyPenguinInterval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setLuckyPenguinMinimumDeposit(
    _luckyPenguinMinimumDeposit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setLuckyPenguinRewardBP(
    _luckyPenguinRewardBP: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPaperHandsPenalty(
    _paperHandsPenalty: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  timeSinceLastDailyUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalWithdrawals(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  userProfits(penguinAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

  withdrawals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    MAX_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PAPER_HANDS_PENALTY(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDS_PER_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    checkpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;

    currentExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    delegate(delegatee: string, overrides?: CallOverrides): Promise<void>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    delegates(delegator: string, overrides?: CallOverrides): Promise<string>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    enter(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    fundsCollectedByPHP(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeRateHistory(amount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber[], BigNumber[]]>;

    getLatestStoredExchangeRate(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getPriorVotes(account: string, blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    historicExchangeRates(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    historicTimestamps(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    isLuckyPenguinEnabled(overrides?: CallOverrides): Promise<boolean>;

    leave(_share: BigNumberish, overrides?: CallOverrides): Promise<void>;

    luckyPenguin(overrides?: CallOverrides): Promise<string>;

    luckyPenguinCount(overrides?: CallOverrides): Promise<BigNumber>;

    luckyPenguinEarnings(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    luckyPenguinInterval(overrides?: CallOverrides): Promise<BigNumber>;

    luckyPenguinMinimumDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    luckyPenguinRewardBP(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<number>;

    numStoredExchangeRates(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paperHandsPenalty(overrides?: CallOverrides): Promise<BigNumber>;

    pefi(overrides?: CallOverrides): Promise<string>;

    pefiBalance(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardsReceived(overrides?: CallOverrides): Promise<BigNumber>;

    rollingStartPefiBalance(overrides?: CallOverrides): Promise<BigNumber>;

    rollingStartTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    rollingStartTotalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    rollingStartTotalWithdrawals(overrides?: CallOverrides): Promise<BigNumber>;

    setLuckyPenguinEnabled(_luckyPenguinEnabled: boolean, overrides?: CallOverrides): Promise<void>;

    setLuckyPenguinInterval(_luckyPenguinInterval: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setLuckyPenguinMinimumDeposit(_luckyPenguinMinimumDeposit: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setLuckyPenguinRewardBP(_luckyPenguinRewardBP: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setPaperHandsPenalty(_paperHandsPenalty: BigNumberish, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    timeSinceLastDailyUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalWithdrawals(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(sender: string, recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    userProfits(penguinAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;

    'DailyRewardsReceived(uint256,uint256)'(
      timestamp?: BigNumberish | null,
      amountPefi?: null,
    ): DailyRewardsReceivedEventFilter;
    DailyRewardsReceived(timestamp?: BigNumberish | null, amountPefi?: null): DailyRewardsReceivedEventFilter;

    'DelegateChanged(address,address,address)'(
      delegator?: string | null,
      fromDelegate?: string | null,
      toDelegate?: string | null,
    ): DelegateChangedEventFilter;
    DelegateChanged(
      delegator?: string | null,
      fromDelegate?: string | null,
      toDelegate?: string | null,
    ): DelegateChangedEventFilter;

    'DelegateVotesChanged(address,uint256,uint256)'(
      delegate?: string | null,
      previousBalance?: null,
      newBalance?: null,
    ): DelegateVotesChangedEventFilter;
    DelegateVotesChanged(
      delegate?: string | null,
      previousBalance?: null,
      newBalance?: null,
    ): DelegateVotesChangedEventFilter;

    'Enter(address,uint256)'(penguin?: string | null, amount?: null): EnterEventFilter;
    Enter(penguin?: string | null, amount?: null): EnterEventFilter;

    'Leave(address,uint256,uint256)'(penguin?: string | null, amount?: null, shares?: null): LeaveEventFilter;
    Leave(penguin?: string | null, amount?: null, shares?: null): LeaveEventFilter;

    'LuckyPenguinDistribution(address,uint256)'(
      luckyPenguin?: string | null,
      amountPefi?: null,
    ): LuckyPenguinDistributionEventFilter;
    LuckyPenguinDistribution(luckyPenguin?: string | null, amountPefi?: null): LuckyPenguinDistributionEventFilter;

    'NewLuckyPenguin(address,address)'(
      previousLuckyPenguin?: string | null,
      newLuckyPenguin?: string | null,
    ): NewLuckyPenguinEventFilter;
    NewLuckyPenguin(previousLuckyPenguin?: string | null, newLuckyPenguin?: string | null): NewLuckyPenguinEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    'PaperHandsPenaltySet(uint256)'(newPaperHandsPenalty?: null): PaperHandsPenaltySetEventFilter;
    PaperHandsPenaltySet(newPaperHandsPenalty?: null): PaperHandsPenaltySetEventFilter;

    'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
  };

  estimateGas: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PAPER_HANDS_PENALTY(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDS_PER_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    checkpoints(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    currentExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    delegate(delegatee: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    delegates(delegator: string, overrides?: CallOverrides): Promise<BigNumber>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    enter(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    fundsCollectedByPHP(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeRateHistory(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getLatestStoredExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    getPriorVotes(account: string, blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    historicExchangeRates(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    historicTimestamps(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isLuckyPenguinEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    leave(_share: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    luckyPenguin(overrides?: CallOverrides): Promise<BigNumber>;

    luckyPenguinCount(overrides?: CallOverrides): Promise<BigNumber>;

    luckyPenguinEarnings(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    luckyPenguinInterval(overrides?: CallOverrides): Promise<BigNumber>;

    luckyPenguinMinimumDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    luckyPenguinRewardBP(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    numStoredExchangeRates(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paperHandsPenalty(overrides?: CallOverrides): Promise<BigNumber>;

    pefi(overrides?: CallOverrides): Promise<BigNumber>;

    pefiBalance(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    rewardsReceived(overrides?: CallOverrides): Promise<BigNumber>;

    rollingStartPefiBalance(overrides?: CallOverrides): Promise<BigNumber>;

    rollingStartTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    rollingStartTotalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    rollingStartTotalWithdrawals(overrides?: CallOverrides): Promise<BigNumber>;

    setLuckyPenguinEnabled(
      _luckyPenguinEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setLuckyPenguinInterval(
      _luckyPenguinInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setLuckyPenguinMinimumDeposit(
      _luckyPenguinMinimumDeposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setLuckyPenguinRewardBP(
      _luckyPenguinRewardBP: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setPaperHandsPenalty(
      _paperHandsPenalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    timeSinceLastDailyUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalWithdrawals(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    userProfits(penguinAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawals(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BIPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_PAPER_HANDS_PENALTY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SECONDS_PER_DAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkpoints(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentExchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    delegates(delegator: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enter(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    fundsCollectedByPHP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentVotes(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExchangeRateHistory(amount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLatestStoredExchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriorVotes(account: string, blockNumber: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    historicExchangeRates(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    historicTimestamps(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isLuckyPenguinEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    leave(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    luckyPenguin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    luckyPenguinCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    luckyPenguinEarnings(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    luckyPenguinInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    luckyPenguinMinimumDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    luckyPenguinRewardBP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numStoredExchangeRates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paperHandsPenalty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pefi(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pefiBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    rewardsReceived(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rollingStartPefiBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rollingStartTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rollingStartTotalDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rollingStartTotalWithdrawals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setLuckyPenguinEnabled(
      _luckyPenguinEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setLuckyPenguinInterval(
      _luckyPenguinInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setLuckyPenguinMinimumDeposit(
      _luckyPenguinMinimumDeposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setLuckyPenguinRewardBP(
      _luckyPenguinRewardBP: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPaperHandsPenalty(
      _paperHandsPenalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeSinceLastDailyUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalWithdrawals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userProfits(penguinAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawals(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
