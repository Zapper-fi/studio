/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface PenguinRewarderRateInterface extends utils.Interface {
  functions: {
    'AVAX()': FunctionFragment;
    'PID()': FunctionFragment;
    'accRewardPerShare()': FunctionFragment;
    'distributionTimeRemaining()': FunctionFragment;
    'iglooMaster()': FunctionFragment;
    'lastRewardTimestamp()': FunctionFragment;
    'onPefiReward(uint256,address,address,uint256,uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingReward(address)': FunctionFragment;
    'pendingTokens(uint256,address,uint256)': FunctionFragment;
    'recoverFunds(address,address,uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardDistributed()': FunctionFragment;
    'rewardToken()': FunctionFragment;
    'rewardsRemaining()': FunctionFragment;
    'tokensPerSecond()': FunctionFragment;
    'totalRewardAmount()': FunctionFragment;
    'totalShares()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateRewardRate(uint256)': FunctionFragment;
    'updateRewardStart(uint256)': FunctionFragment;
    'updateTotalRewardAmount(uint256)': FunctionFragment;
    'userInfo(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'AVAX'
      | 'PID'
      | 'accRewardPerShare'
      | 'distributionTimeRemaining'
      | 'iglooMaster'
      | 'lastRewardTimestamp'
      | 'onPefiReward'
      | 'owner'
      | 'pendingReward'
      | 'pendingTokens'
      | 'recoverFunds'
      | 'renounceOwnership'
      | 'rewardDistributed'
      | 'rewardToken'
      | 'rewardsRemaining'
      | 'tokensPerSecond'
      | 'totalRewardAmount'
      | 'totalShares'
      | 'transferOwnership'
      | 'updateRewardRate'
      | 'updateRewardStart'
      | 'updateTotalRewardAmount'
      | 'userInfo',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'AVAX', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PID', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accRewardPerShare', values?: undefined): string;
  encodeFunctionData(functionFragment: 'distributionTimeRemaining', values?: undefined): string;
  encodeFunctionData(functionFragment: 'iglooMaster', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastRewardTimestamp', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'onPefiReward',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingReward', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'pendingTokens',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'recoverFunds',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardDistributed', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardsRemaining', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokensPerSecond', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalRewardAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalShares', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateRewardRate', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateRewardStart', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateTotalRewardAmount', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'userInfo', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'AVAX', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accRewardPerShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distributionTimeRemaining', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'iglooMaster', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastRewardTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onPefiReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recoverFunds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardDistributed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsRemaining', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokensPerSecond', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalRewardAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateRewardRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateRewardStart', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateTotalRewardAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result;

  events: {
    'LogOnReward(address,address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'RewardRateUpdated(uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'LogOnReward'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardRateUpdated'): EventFragment;
}

export interface LogOnRewardEventObject {
  user: string;
  to: string;
  amount: BigNumber;
}
export type LogOnRewardEvent = TypedEvent<[string, string, BigNumber], LogOnRewardEventObject>;

export type LogOnRewardEventFilter = TypedEventFilter<LogOnRewardEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RewardRateUpdatedEventObject {
  oldRate: BigNumber;
  newRate: BigNumber;
}
export type RewardRateUpdatedEvent = TypedEvent<[BigNumber, BigNumber], RewardRateUpdatedEventObject>;

export type RewardRateUpdatedEventFilter = TypedEventFilter<RewardRateUpdatedEvent>;

export interface PenguinRewarderRate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PenguinRewarderRateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AVAX(overrides?: CallOverrides): Promise<[string]>;

    PID(overrides?: CallOverrides): Promise<[BigNumber]>;

    accRewardPerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    distributionTimeRemaining(overrides?: CallOverrides): Promise<[BigNumber]>;

    iglooMaster(overrides?: CallOverrides): Promise<[string]>;

    lastRewardTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    onPefiReward(
      arg0: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      newShareAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingReward(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingTokens(
      arg0: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], BigNumber[]] & {
        rewardTokens: string[];
        rewardAmounts: BigNumber[];
      }
    >;

    recoverFunds(
      token: PromiseOrValue<string>,
      dest: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    rewardDistributed(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    rewardsRemaining(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensPerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRewardAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateRewardRate(
      _tokensPerSecond: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateRewardStart(
      _rewardStartTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateTotalRewardAmount(
      _totalRewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }>;
  };

  AVAX(overrides?: CallOverrides): Promise<string>;

  PID(overrides?: CallOverrides): Promise<BigNumber>;

  accRewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  distributionTimeRemaining(overrides?: CallOverrides): Promise<BigNumber>;

  iglooMaster(overrides?: CallOverrides): Promise<string>;

  lastRewardTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  onPefiReward(
    arg0: PromiseOrValue<BigNumberish>,
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    arg3: PromiseOrValue<BigNumberish>,
    newShareAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingReward(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  pendingTokens(
    arg0: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string[], BigNumber[]] & {
      rewardTokens: string[];
      rewardAmounts: BigNumber[];
    }
  >;

  recoverFunds(
    token: PromiseOrValue<string>,
    dest: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  rewardDistributed(overrides?: CallOverrides): Promise<BigNumber>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  rewardsRemaining(overrides?: CallOverrides): Promise<BigNumber>;

  tokensPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  totalRewardAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateRewardRate(
    _tokensPerSecond: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateRewardStart(
    _rewardStartTimestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateTotalRewardAmount(
    _totalRewardAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }>;

  callStatic: {
    AVAX(overrides?: CallOverrides): Promise<string>;

    PID(overrides?: CallOverrides): Promise<BigNumber>;

    accRewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    distributionTimeRemaining(overrides?: CallOverrides): Promise<BigNumber>;

    iglooMaster(overrides?: CallOverrides): Promise<string>;

    lastRewardTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    onPefiReward(
      arg0: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      newShareAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingReward(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    pendingTokens(
      arg0: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], BigNumber[]] & {
        rewardTokens: string[];
        rewardAmounts: BigNumber[];
      }
    >;

    recoverFunds(
      token: PromiseOrValue<string>,
      dest: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    rewardsRemaining(overrides?: CallOverrides): Promise<BigNumber>;

    tokensPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewardAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateRewardRate(_tokensPerSecond: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateRewardStart(_rewardStartTimestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateTotalRewardAmount(_totalRewardAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }>;
  };

  filters: {
    'LogOnReward(address,address,uint256)'(
      user?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
    ): LogOnRewardEventFilter;
    LogOnReward(
      user?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
    ): LogOnRewardEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'RewardRateUpdated(uint256,uint256)'(oldRate?: null, newRate?: null): RewardRateUpdatedEventFilter;
    RewardRateUpdated(oldRate?: null, newRate?: null): RewardRateUpdatedEventFilter;
  };

  estimateGas: {
    AVAX(overrides?: CallOverrides): Promise<BigNumber>;

    PID(overrides?: CallOverrides): Promise<BigNumber>;

    accRewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    distributionTimeRemaining(overrides?: CallOverrides): Promise<BigNumber>;

    iglooMaster(overrides?: CallOverrides): Promise<BigNumber>;

    lastRewardTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    onPefiReward(
      arg0: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      newShareAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingReward(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    pendingTokens(
      arg0: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    recoverFunds(
      token: PromiseOrValue<string>,
      dest: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    rewardDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsRemaining(overrides?: CallOverrides): Promise<BigNumber>;

    tokensPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewardAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateRewardRate(
      _tokensPerSecond: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateRewardStart(
      _rewardStartTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateTotalRewardAmount(
      _totalRewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    userInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    AVAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accRewardPerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributionTimeRemaining(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    iglooMaster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRewardTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onPefiReward(
      arg0: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      newShareAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingReward(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingTokens(
      arg0: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    recoverFunds(
      token: PromiseOrValue<string>,
      dest: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    rewardDistributed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsRemaining(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensPerSecond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRewardAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateRewardRate(
      _tokensPerSecond: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateRewardStart(
      _rewardStartTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateTotalRewardAmount(
      _totalRewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    userInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
