/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface PenguinChefV2Interface extends utils.Interface {
  functions: {
    'PEFI_MAX_SUPPLY()': FunctionFragment;
    'accountAddedLP(uint256,uint256)': FunctionFragment;
    'add(uint256,uint16,address,bool,address,address)': FunctionFragment;
    'approvedContracts(address)': FunctionFragment;
    'defaultIpefiDistributionBips()': FunctionFragment;
    'deposit(uint256,uint256,address)': FunctionFragment;
    'deposits(uint256,address)': FunctionFragment;
    'dev()': FunctionFragment;
    'devMintBips()': FunctionFragment;
    'emergencyWithdraw(uint256,address)': FunctionFragment;
    'harvest(uint256,address)': FunctionFragment;
    'inCaseTokensGetStuck(uint256,address,address,uint256)': FunctionFragment;
    'ipefiDistributionBips(address)': FunctionFragment;
    'ipefiDistributionBipsByUser(address)': FunctionFragment;
    'ipefiDistributionBipsSet(address)': FunctionFragment;
    'manualMint(address,uint256)': FunctionFragment;
    'massUpdatePools()': FunctionFragment;
    'migrateStrategy(uint256,address)': FunctionFragment;
    'modifyApprovedContracts(address[],bool[])': FunctionFragment;
    'nest()': FunctionFragment;
    'nestAPY()': FunctionFragment;
    'nestAllocatorAddress()': FunctionFragment;
    'nestMintBips()': FunctionFragment;
    'nestSplitBips()': FunctionFragment;
    'onlyApprovedContractOrEOAStatus()': FunctionFragment;
    'owner()': FunctionFragment;
    'pefi()': FunctionFragment;
    'pefiEmissionPerSecond()': FunctionFragment;
    'pefiPerYear()': FunctionFragment;
    'pefiPerYearToIgloo(uint256)': FunctionFragment;
    'pefiPerYearToNest()': FunctionFragment;
    'pendingIPEFI(uint256,address)': FunctionFragment;
    'pendingPEFI(uint256,address)': FunctionFragment;
    'pendingRewards(uint256,address)': FunctionFragment;
    'pendingTokens(uint256,address)': FunctionFragment;
    'performanceFeeAddress()': FunctionFragment;
    'poolInfo(uint256)': FunctionFragment;
    'poolLength()': FunctionFragment;
    'profitInLP(uint256,address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'revokeAllowance(uint256,address,address)': FunctionFragment;
    'reward(uint256,uint256)': FunctionFragment;
    'set(uint256,uint256,uint16,address,bool,bool)': FunctionFragment;
    'setAllowances(uint256)': FunctionFragment;
    'setDefaultIpefiDistributionBips(uint256)': FunctionFragment;
    'setDev(address)': FunctionFragment;
    'setDevMintBips(uint256)': FunctionFragment;
    'setIpefiDistributionBips(uint256)': FunctionFragment;
    'setNest(address)': FunctionFragment;
    'setNestAllocatorAddress(address)': FunctionFragment;
    'setNestMintBips(uint256)': FunctionFragment;
    'setNestSplitBips(uint256)': FunctionFragment;
    'setOnlyApprovedContractOrEOAStatus(bool)': FunctionFragment;
    'setPefiEmission(uint256,bool)': FunctionFragment;
    'setPerfomanceFeeAddress(address)': FunctionFragment;
    'setPerformanceFeeBips(uint256,uint256)': FunctionFragment;
    'setStrategy(uint256,address,bool,address)': FunctionFragment;
    'startTime()': FunctionFragment;
    'totalAllocPoint()': FunctionFragment;
    'totalLP(uint256)': FunctionFragment;
    'totalPendingPEFI(uint256,address)': FunctionFragment;
    'totalShares(uint256)': FunctionFragment;
    'transferMinter(address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updatePool(uint256)': FunctionFragment;
    'userInfo(uint256,address)': FunctionFragment;
    'userShares(uint256,address)': FunctionFragment;
    'withdraw(uint256,uint256,address)': FunctionFragment;
    'withdrawAndHarvest(uint256,uint256,address)': FunctionFragment;
    'withdrawals(uint256,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'PEFI_MAX_SUPPLY'
      | 'accountAddedLP'
      | 'add'
      | 'approvedContracts'
      | 'defaultIpefiDistributionBips'
      | 'deposit'
      | 'deposits'
      | 'dev'
      | 'devMintBips'
      | 'emergencyWithdraw'
      | 'harvest'
      | 'inCaseTokensGetStuck'
      | 'ipefiDistributionBips'
      | 'ipefiDistributionBipsByUser'
      | 'ipefiDistributionBipsSet'
      | 'manualMint'
      | 'massUpdatePools'
      | 'migrateStrategy'
      | 'modifyApprovedContracts'
      | 'nest'
      | 'nestAPY'
      | 'nestAllocatorAddress'
      | 'nestMintBips'
      | 'nestSplitBips'
      | 'onlyApprovedContractOrEOAStatus'
      | 'owner'
      | 'pefi'
      | 'pefiEmissionPerSecond'
      | 'pefiPerYear'
      | 'pefiPerYearToIgloo'
      | 'pefiPerYearToNest'
      | 'pendingIPEFI'
      | 'pendingPEFI'
      | 'pendingRewards'
      | 'pendingTokens'
      | 'performanceFeeAddress'
      | 'poolInfo'
      | 'poolLength'
      | 'profitInLP'
      | 'renounceOwnership'
      | 'revokeAllowance'
      | 'reward'
      | 'set'
      | 'setAllowances'
      | 'setDefaultIpefiDistributionBips'
      | 'setDev'
      | 'setDevMintBips'
      | 'setIpefiDistributionBips'
      | 'setNest'
      | 'setNestAllocatorAddress'
      | 'setNestMintBips'
      | 'setNestSplitBips'
      | 'setOnlyApprovedContractOrEOAStatus'
      | 'setPefiEmission'
      | 'setPerfomanceFeeAddress'
      | 'setPerformanceFeeBips'
      | 'setStrategy'
      | 'startTime'
      | 'totalAllocPoint'
      | 'totalLP'
      | 'totalPendingPEFI'
      | 'totalShares'
      | 'transferMinter'
      | 'transferOwnership'
      | 'updatePool'
      | 'userInfo'
      | 'userShares'
      | 'withdraw'
      | 'withdrawAndHarvest'
      | 'withdrawals',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'PEFI_MAX_SUPPLY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accountAddedLP', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'add',
    values: [BigNumberish, BigNumberish, string, boolean, string, string],
  ): string;
  encodeFunctionData(functionFragment: 'approvedContracts', values: [string]): string;
  encodeFunctionData(functionFragment: 'defaultIpefiDistributionBips', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish, BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'deposits', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'dev', values?: undefined): string;
  encodeFunctionData(functionFragment: 'devMintBips', values?: undefined): string;
  encodeFunctionData(functionFragment: 'emergencyWithdraw', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'harvest', values: [BigNumberish, string]): string;
  encodeFunctionData(
    functionFragment: 'inCaseTokensGetStuck',
    values: [BigNumberish, string, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'ipefiDistributionBips', values: [string]): string;
  encodeFunctionData(functionFragment: 'ipefiDistributionBipsByUser', values: [string]): string;
  encodeFunctionData(functionFragment: 'ipefiDistributionBipsSet', values: [string]): string;
  encodeFunctionData(functionFragment: 'manualMint', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'massUpdatePools', values?: undefined): string;
  encodeFunctionData(functionFragment: 'migrateStrategy', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'modifyApprovedContracts', values: [string[], boolean[]]): string;
  encodeFunctionData(functionFragment: 'nest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nestAPY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nestAllocatorAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nestMintBips', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nestSplitBips', values?: undefined): string;
  encodeFunctionData(functionFragment: 'onlyApprovedContractOrEOAStatus', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pefi', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pefiEmissionPerSecond', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pefiPerYear', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pefiPerYearToIgloo', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'pefiPerYearToNest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingIPEFI', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'pendingPEFI', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'pendingRewards', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'pendingTokens', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'performanceFeeAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolInfo', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'poolLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'profitInLP', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'revokeAllowance', values: [BigNumberish, string, string]): string;
  encodeFunctionData(functionFragment: 'reward', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'set',
    values: [BigNumberish, BigNumberish, BigNumberish, string, boolean, boolean],
  ): string;
  encodeFunctionData(functionFragment: 'setAllowances', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setDefaultIpefiDistributionBips', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setDev', values: [string]): string;
  encodeFunctionData(functionFragment: 'setDevMintBips', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setIpefiDistributionBips', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setNest', values: [string]): string;
  encodeFunctionData(functionFragment: 'setNestAllocatorAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'setNestMintBips', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setNestSplitBips', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setOnlyApprovedContractOrEOAStatus', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'setPefiEmission', values: [BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'setPerfomanceFeeAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'setPerformanceFeeBips', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setStrategy', values: [BigNumberish, string, boolean, string]): string;
  encodeFunctionData(functionFragment: 'startTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalAllocPoint', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalLP', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'totalPendingPEFI', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'totalShares', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferMinter', values: [string]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'updatePool', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'userInfo', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'userShares', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish, BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'withdrawAndHarvest', values: [BigNumberish, BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'withdrawals', values: [BigNumberish, string]): string;

  decodeFunctionResult(functionFragment: 'PEFI_MAX_SUPPLY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountAddedLP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'add', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approvedContracts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'defaultIpefiDistributionBips', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dev', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'devMintBips', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'inCaseTokensGetStuck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ipefiDistributionBips', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ipefiDistributionBipsByUser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ipefiDistributionBipsSet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'manualMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'massUpdatePools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migrateStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'modifyApprovedContracts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nestAPY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nestAllocatorAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nestMintBips', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nestSplitBips', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onlyApprovedContractOrEOAStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pefi', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pefiEmissionPerSecond', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pefiPerYear', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pefiPerYearToIgloo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pefiPerYearToNest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingIPEFI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingPEFI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'performanceFeeAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'profitInLP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAllowances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDefaultIpefiDistributionBips', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDev', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDevMintBips', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setIpefiDistributionBips', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setNest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setNestAllocatorAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setNestMintBips', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setNestSplitBips', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOnlyApprovedContractOrEOAStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPefiEmission', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPerfomanceFeeAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPerformanceFeeBips', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAllocPoint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalLP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalPendingPEFI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferMinter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAndHarvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawals', data: BytesLike): Result;

  events: {
    'Deposit(address,uint256,uint256,address)': EventFragment;
    'DevSet(address,address)': EventFragment;
    'EmergencyWithdraw(address,uint256,uint256,address)': EventFragment;
    'Harvest(address,uint256,uint256,uint256)': EventFragment;
    'NestAllocatorAddressSet(address,address)': EventFragment;
    'NestSet(address,address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'PerformanceFeeAddressSet(address,address)': EventFragment;
    'Withdraw(address,uint256,uint256,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DevSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Harvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NestAllocatorAddressSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NestSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PerformanceFeeAddressSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface DepositEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
  to: string;
}
export type DepositEvent = TypedEvent<[string, BigNumber, BigNumber, string], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DevSetEventObject {
  oldAddress: string;
  newAddress: string;
}
export type DevSetEvent = TypedEvent<[string, string], DevSetEventObject>;

export type DevSetEventFilter = TypedEventFilter<DevSetEvent>;

export interface EmergencyWithdrawEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
  to: string;
}
export type EmergencyWithdrawEvent = TypedEvent<[string, BigNumber, BigNumber, string], EmergencyWithdrawEventObject>;

export type EmergencyWithdrawEventFilter = TypedEventFilter<EmergencyWithdrawEvent>;

export interface HarvestEventObject {
  user: string;
  pid: BigNumber;
  amountIPEFI: BigNumber;
  amountPEFI: BigNumber;
}
export type HarvestEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], HarvestEventObject>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export interface NestAllocatorAddressSetEventObject {
  oldAddress: string;
  newAddress: string;
}
export type NestAllocatorAddressSetEvent = TypedEvent<[string, string], NestAllocatorAddressSetEventObject>;

export type NestAllocatorAddressSetEventFilter = TypedEventFilter<NestAllocatorAddressSetEvent>;

export interface NestSetEventObject {
  oldAddress: string;
  newAddress: string;
}
export type NestSetEvent = TypedEvent<[string, string], NestSetEventObject>;

export type NestSetEventFilter = TypedEventFilter<NestSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PerformanceFeeAddressSetEventObject {
  oldAddress: string;
  newAddress: string;
}
export type PerformanceFeeAddressSetEvent = TypedEvent<[string, string], PerformanceFeeAddressSetEventObject>;

export type PerformanceFeeAddressSetEventFilter = TypedEventFilter<PerformanceFeeAddressSetEvent>;

export interface WithdrawEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
  to: string;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber, BigNumber, string], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface PenguinChefV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PenguinChefV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PEFI_MAX_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    accountAddedLP(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    add(
      _allocPoint: BigNumberish,
      _withdrawFeeBP: BigNumberish,
      _poolToken: string,
      _withUpdate: boolean,
      _rewarder: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    approvedContracts(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    defaultIpefiDistributionBips(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deposits(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    dev(overrides?: CallOverrides): Promise<[string]>;

    devMintBips(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyWithdraw(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    harvest(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    inCaseTokensGetStuck(
      pid: BigNumberish,
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    ipefiDistributionBips(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    ipefiDistributionBipsByUser(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    ipefiDistributionBipsSet(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    manualMint(
      dest: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    massUpdatePools(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    migrateStrategy(
      pid: BigNumberish,
      newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    modifyApprovedContracts(
      contracts: string[],
      statuses: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    nest(overrides?: CallOverrides): Promise<[string]>;

    nestAPY(overrides?: CallOverrides): Promise<[BigNumber]>;

    nestAllocatorAddress(overrides?: CallOverrides): Promise<[string]>;

    nestMintBips(overrides?: CallOverrides): Promise<[BigNumber]>;

    nestSplitBips(overrides?: CallOverrides): Promise<[BigNumber]>;

    onlyApprovedContractOrEOAStatus(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pefi(overrides?: CallOverrides): Promise<[string]>;

    pefiEmissionPerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    pefiPerYear(overrides?: CallOverrides): Promise<[BigNumber]>;

    pefiPerYearToIgloo(pid: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    pefiPerYearToNest(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingIPEFI(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingPEFI(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingRewards(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    pendingTokens(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

    performanceFeeAddress(overrides?: CallOverrides): Promise<[string]>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
        poolToken: string;
        rewarder: string;
        strategy: string;
        allocPoint: BigNumber;
        lastRewardTime: BigNumber;
        accPEFIPerShare: BigNumber;
        withdrawFeeBP: number;
        totalShares: BigNumber;
        lpPerShare: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    profitInLP(pid: BigNumberish, userAddress: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    revokeAllowance(
      pid: BigNumberish,
      token: string,
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    reward(_lastRewardTime: BigNumberish, _currentTime: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withdrawFeeBP: BigNumberish,
      _rewarder: string,
      _withUpdate: boolean,
      overwrite: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setAllowances(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDefaultIpefiDistributionBips(
      _defaultIpefiDistributionBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDev(_dev: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setDevMintBips(
      _devMintBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setIpefiDistributionBips(
      _ipefiDistributionBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setNest(_nest: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setNestAllocatorAddress(
      _nestAllocatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setNestMintBips(
      _nestMintBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setNestSplitBips(
      _nestSplitBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setOnlyApprovedContractOrEOAStatus(
      newStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPefiEmission(
      newPefiEmissionPerSecond: BigNumberish,
      withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPerfomanceFeeAddress(
      _performanceFeeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPerformanceFeeBips(
      pid: BigNumberish,
      newPerformanceFeeBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setStrategy(
      pid: BigNumberish,
      newStrategy: string,
      transferOwnership: boolean,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLP(pid: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPendingPEFI(pid: BigNumberish, penguin: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShares(pid: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    transferMinter(
      newMinter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updatePool(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }>;

    userShares(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      pid: BigNumberish,
      amountShares: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawAndHarvest(
      pid: BigNumberish,
      amountShares: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawals(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  PEFI_MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  accountAddedLP(
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  add(
    _allocPoint: BigNumberish,
    _withdrawFeeBP: BigNumberish,
    _poolToken: string,
    _withUpdate: boolean,
    _rewarder: string,
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  approvedContracts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  defaultIpefiDistributionBips(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    pid: BigNumberish,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  deposits(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  dev(overrides?: CallOverrides): Promise<string>;

  devMintBips(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyWithdraw(
    pid: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  harvest(
    pid: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  inCaseTokensGetStuck(
    pid: BigNumberish,
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  ipefiDistributionBips(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  ipefiDistributionBipsByUser(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  ipefiDistributionBipsSet(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  manualMint(
    dest: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  massUpdatePools(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  migrateStrategy(
    pid: BigNumberish,
    newStrategy: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  modifyApprovedContracts(
    contracts: string[],
    statuses: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  nest(overrides?: CallOverrides): Promise<string>;

  nestAPY(overrides?: CallOverrides): Promise<BigNumber>;

  nestAllocatorAddress(overrides?: CallOverrides): Promise<string>;

  nestMintBips(overrides?: CallOverrides): Promise<BigNumber>;

  nestSplitBips(overrides?: CallOverrides): Promise<BigNumber>;

  onlyApprovedContractOrEOAStatus(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pefi(overrides?: CallOverrides): Promise<string>;

  pefiEmissionPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  pefiPerYear(overrides?: CallOverrides): Promise<BigNumber>;

  pefiPerYearToIgloo(pid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  pefiPerYearToNest(overrides?: CallOverrides): Promise<BigNumber>;

  pendingIPEFI(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<BigNumber>;

  pendingPEFI(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<BigNumber>;

  pendingRewards(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  pendingTokens(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

  performanceFeeAddress(overrides?: CallOverrides): Promise<string>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, string, BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
      poolToken: string;
      rewarder: string;
      strategy: string;
      allocPoint: BigNumber;
      lastRewardTime: BigNumber;
      accPEFIPerShare: BigNumber;
      withdrawFeeBP: number;
      totalShares: BigNumber;
      lpPerShare: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  profitInLP(pid: BigNumberish, userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  revokeAllowance(
    pid: BigNumberish,
    token: string,
    spender: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  reward(_lastRewardTime: BigNumberish, _currentTime: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  set(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _withdrawFeeBP: BigNumberish,
    _rewarder: string,
    _withUpdate: boolean,
    overwrite: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setAllowances(
    pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setDefaultIpefiDistributionBips(
    _defaultIpefiDistributionBips: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setDev(_dev: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setDevMintBips(
    _devMintBips: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setIpefiDistributionBips(
    _ipefiDistributionBips: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setNest(_nest: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setNestAllocatorAddress(
    _nestAllocatorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setNestMintBips(
    _nestMintBips: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setNestSplitBips(
    _nestSplitBips: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setOnlyApprovedContractOrEOAStatus(
    newStatus: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPefiEmission(
    newPefiEmissionPerSecond: BigNumberish,
    withUpdate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPerfomanceFeeAddress(
    _performanceFeeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPerformanceFeeBips(
    pid: BigNumberish,
    newPerformanceFeeBips: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setStrategy(
    pid: BigNumberish,
    newStrategy: string,
    transferOwnership: boolean,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  totalLP(pid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  totalPendingPEFI(pid: BigNumberish, penguin: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(pid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  transferMinter(
    newMinter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updatePool(
    pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }>;

  userShares(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    pid: BigNumberish,
    amountShares: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawAndHarvest(
    pid: BigNumberish,
    amountShares: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawals(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    PEFI_MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    accountAddedLP(pid: BigNumberish, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    add(
      _allocPoint: BigNumberish,
      _withdrawFeeBP: BigNumberish,
      _poolToken: string,
      _withUpdate: boolean,
      _rewarder: string,
      _strategy: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    approvedContracts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    defaultIpefiDistributionBips(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(pid: BigNumberish, amount: BigNumberish, to: string, overrides?: CallOverrides): Promise<void>;

    deposits(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    dev(overrides?: CallOverrides): Promise<string>;

    devMintBips(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(pid: BigNumberish, to: string, overrides?: CallOverrides): Promise<void>;

    harvest(pid: BigNumberish, to: string, overrides?: CallOverrides): Promise<void>;

    inCaseTokensGetStuck(
      pid: BigNumberish,
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    ipefiDistributionBips(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    ipefiDistributionBipsByUser(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    ipefiDistributionBipsSet(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    manualMint(dest: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    migrateStrategy(pid: BigNumberish, newStrategy: string, overrides?: CallOverrides): Promise<void>;

    modifyApprovedContracts(contracts: string[], statuses: boolean[], overrides?: CallOverrides): Promise<void>;

    nest(overrides?: CallOverrides): Promise<string>;

    nestAPY(overrides?: CallOverrides): Promise<BigNumber>;

    nestAllocatorAddress(overrides?: CallOverrides): Promise<string>;

    nestMintBips(overrides?: CallOverrides): Promise<BigNumber>;

    nestSplitBips(overrides?: CallOverrides): Promise<BigNumber>;

    onlyApprovedContractOrEOAStatus(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pefi(overrides?: CallOverrides): Promise<string>;

    pefiEmissionPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    pefiPerYear(overrides?: CallOverrides): Promise<BigNumber>;

    pefiPerYearToIgloo(pid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    pefiPerYearToNest(overrides?: CallOverrides): Promise<BigNumber>;

    pendingIPEFI(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<BigNumber>;

    pendingPEFI(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    pendingTokens(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

    performanceFeeAddress(overrides?: CallOverrides): Promise<string>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
        poolToken: string;
        rewarder: string;
        strategy: string;
        allocPoint: BigNumber;
        lastRewardTime: BigNumber;
        accPEFIPerShare: BigNumber;
        withdrawFeeBP: number;
        totalShares: BigNumber;
        lpPerShare: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    profitInLP(pid: BigNumberish, userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revokeAllowance(pid: BigNumberish, token: string, spender: string, overrides?: CallOverrides): Promise<void>;

    reward(_lastRewardTime: BigNumberish, _currentTime: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withdrawFeeBP: BigNumberish,
      _rewarder: string,
      _withUpdate: boolean,
      overwrite: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    setAllowances(pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setDefaultIpefiDistributionBips(
      _defaultIpefiDistributionBips: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDev(_dev: string, overrides?: CallOverrides): Promise<void>;

    setDevMintBips(_devMintBips: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setIpefiDistributionBips(_ipefiDistributionBips: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setNest(_nest: string, overrides?: CallOverrides): Promise<void>;

    setNestAllocatorAddress(_nestAllocatorAddress: string, overrides?: CallOverrides): Promise<void>;

    setNestMintBips(_nestMintBips: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setNestSplitBips(_nestSplitBips: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setOnlyApprovedContractOrEOAStatus(newStatus: boolean, overrides?: CallOverrides): Promise<void>;

    setPefiEmission(
      newPefiEmissionPerSecond: BigNumberish,
      withUpdate: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    setPerfomanceFeeAddress(_performanceFeeAddress: string, overrides?: CallOverrides): Promise<void>;

    setPerformanceFeeBips(
      pid: BigNumberish,
      newPerformanceFeeBips: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setStrategy(
      pid: BigNumberish,
      newStrategy: string,
      transferOwnership: boolean,
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    totalLP(pid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalPendingPEFI(pid: BigNumberish, penguin: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(pid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferMinter(newMinter: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    updatePool(pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }>;

    userShares(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(pid: BigNumberish, amountShares: BigNumberish, to: string, overrides?: CallOverrides): Promise<void>;

    withdrawAndHarvest(
      pid: BigNumberish,
      amountShares: BigNumberish,
      to: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawals(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'Deposit(address,uint256,uint256,address)'(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
      to?: string | null,
    ): DepositEventFilter;
    Deposit(user?: string | null, pid?: BigNumberish | null, amount?: null, to?: string | null): DepositEventFilter;

    'DevSet(address,address)'(oldAddress?: string | null, newAddress?: string | null): DevSetEventFilter;
    DevSet(oldAddress?: string | null, newAddress?: string | null): DevSetEventFilter;

    'EmergencyWithdraw(address,uint256,uint256,address)'(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
      to?: string | null,
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
      to?: string | null,
    ): EmergencyWithdrawEventFilter;

    'Harvest(address,uint256,uint256,uint256)'(
      user?: string | null,
      pid?: BigNumberish | null,
      amountIPEFI?: null,
      amountPEFI?: null,
    ): HarvestEventFilter;
    Harvest(user?: string | null, pid?: BigNumberish | null, amountIPEFI?: null, amountPEFI?: null): HarvestEventFilter;

    'NestAllocatorAddressSet(address,address)'(
      oldAddress?: string | null,
      newAddress?: string | null,
    ): NestAllocatorAddressSetEventFilter;
    NestAllocatorAddressSet(oldAddress?: string | null, newAddress?: string | null): NestAllocatorAddressSetEventFilter;

    'NestSet(address,address)'(oldAddress?: string | null, newAddress?: string | null): NestSetEventFilter;
    NestSet(oldAddress?: string | null, newAddress?: string | null): NestSetEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    'PerformanceFeeAddressSet(address,address)'(
      oldAddress?: string | null,
      newAddress?: string | null,
    ): PerformanceFeeAddressSetEventFilter;
    PerformanceFeeAddressSet(
      oldAddress?: string | null,
      newAddress?: string | null,
    ): PerformanceFeeAddressSetEventFilter;

    'Withdraw(address,uint256,uint256,address)'(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
      to?: string | null,
    ): WithdrawEventFilter;
    Withdraw(user?: string | null, pid?: BigNumberish | null, amount?: null, to?: string | null): WithdrawEventFilter;
  };

  estimateGas: {
    PEFI_MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    accountAddedLP(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    add(
      _allocPoint: BigNumberish,
      _withdrawFeeBP: BigNumberish,
      _poolToken: string,
      _withUpdate: boolean,
      _rewarder: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    approvedContracts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    defaultIpefiDistributionBips(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    deposits(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    dev(overrides?: CallOverrides): Promise<BigNumber>;

    devMintBips(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    harvest(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    inCaseTokensGetStuck(
      pid: BigNumberish,
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    ipefiDistributionBips(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    ipefiDistributionBipsByUser(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    ipefiDistributionBipsSet(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    manualMint(
      dest: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    massUpdatePools(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    migrateStrategy(
      pid: BigNumberish,
      newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    modifyApprovedContracts(
      contracts: string[],
      statuses: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    nest(overrides?: CallOverrides): Promise<BigNumber>;

    nestAPY(overrides?: CallOverrides): Promise<BigNumber>;

    nestAllocatorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    nestMintBips(overrides?: CallOverrides): Promise<BigNumber>;

    nestSplitBips(overrides?: CallOverrides): Promise<BigNumber>;

    onlyApprovedContractOrEOAStatus(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pefi(overrides?: CallOverrides): Promise<BigNumber>;

    pefiEmissionPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    pefiPerYear(overrides?: CallOverrides): Promise<BigNumber>;

    pefiPerYearToIgloo(pid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    pefiPerYearToNest(overrides?: CallOverrides): Promise<BigNumber>;

    pendingIPEFI(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<BigNumber>;

    pendingPEFI(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<BigNumber>;

    pendingTokens(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<BigNumber>;

    performanceFeeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    profitInLP(pid: BigNumberish, userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    revokeAllowance(
      pid: BigNumberish,
      token: string,
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    reward(_lastRewardTime: BigNumberish, _currentTime: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withdrawFeeBP: BigNumberish,
      _rewarder: string,
      _withUpdate: boolean,
      overwrite: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setAllowances(pid: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setDefaultIpefiDistributionBips(
      _defaultIpefiDistributionBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setDev(_dev: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setDevMintBips(
      _devMintBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setIpefiDistributionBips(
      _ipefiDistributionBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setNest(_nest: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setNestAllocatorAddress(
      _nestAllocatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setNestMintBips(
      _nestMintBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setNestSplitBips(
      _nestSplitBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setOnlyApprovedContractOrEOAStatus(
      newStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setPefiEmission(
      newPefiEmissionPerSecond: BigNumberish,
      withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setPerfomanceFeeAddress(
      _performanceFeeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setPerformanceFeeBips(
      pid: BigNumberish,
      newPerformanceFeeBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setStrategy(
      pid: BigNumberish,
      newStrategy: string,
      transferOwnership: boolean,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    totalLP(pid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalPendingPEFI(pid: BigNumberish, penguin: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(pid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferMinter(newMinter: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updatePool(pid: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userInfo(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    userShares(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      pid: BigNumberish,
      amountShares: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawAndHarvest(
      pid: BigNumberish,
      amountShares: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawals(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    PEFI_MAX_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountAddedLP(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    add(
      _allocPoint: BigNumberish,
      _withdrawFeeBP: BigNumberish,
      _poolToken: string,
      _withUpdate: boolean,
      _rewarder: string,
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    approvedContracts(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultIpefiDistributionBips(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    deposits(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dev(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devMintBips(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    harvest(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    inCaseTokensGetStuck(
      pid: BigNumberish,
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    ipefiDistributionBips(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ipefiDistributionBipsByUser(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ipefiDistributionBipsSet(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manualMint(
      dest: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    massUpdatePools(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    migrateStrategy(
      pid: BigNumberish,
      newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    modifyApprovedContracts(
      contracts: string[],
      statuses: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    nest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nestAPY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nestAllocatorAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nestMintBips(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nestSplitBips(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onlyApprovedContractOrEOAStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pefi(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pefiEmissionPerSecond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pefiPerYear(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pefiPerYearToIgloo(pid: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pefiPerYearToNest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingIPEFI(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingPEFI(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRewards(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingTokens(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performanceFeeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    profitInLP(pid: BigNumberish, userAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    revokeAllowance(
      pid: BigNumberish,
      token: string,
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    reward(
      _lastRewardTime: BigNumberish,
      _currentTime: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withdrawFeeBP: BigNumberish,
      _rewarder: string,
      _withUpdate: boolean,
      overwrite: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setAllowances(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setDefaultIpefiDistributionBips(
      _defaultIpefiDistributionBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setDev(_dev: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setDevMintBips(
      _devMintBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setIpefiDistributionBips(
      _ipefiDistributionBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setNest(_nest: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setNestAllocatorAddress(
      _nestAllocatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setNestMintBips(
      _nestMintBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setNestSplitBips(
      _nestSplitBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setOnlyApprovedContractOrEOAStatus(
      newStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPefiEmission(
      newPefiEmissionPerSecond: BigNumberish,
      withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPerfomanceFeeAddress(
      _performanceFeeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPerformanceFeeBips(
      pid: BigNumberish,
      newPerformanceFeeBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setStrategy(
      pid: BigNumberish,
      newStrategy: string,
      transferOwnership: boolean,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLP(pid: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPendingPEFI(pid: BigNumberish, penguin: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(pid: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferMinter(
      newMinter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updatePool(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userInfo(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userShares(pid: BigNumberish, user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      pid: BigNumberish,
      amountShares: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawAndHarvest(
      pid: BigNumberish,
      amountShares: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawals(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
