/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface PenguinVaultInterface extends utils.Interface {
  functions: {
    'ALTERNATE_FEE_BIPS()': FunctionFragment;
    'ALTERNATE_FEE_BIPS_LOCAL()': FunctionFragment;
    'DEPOSITS_ENABLED()': FunctionFragment;
    'DEV_FEE_BIPS()': FunctionFragment;
    'DEV_FEE_BIPS_LOCAL()': FunctionFragment;
    'DOMAIN_TYPEHASH()': FunctionFragment;
    'MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST()': FunctionFragment;
    'MAX_TOTAL_FEE()': FunctionFragment;
    'MIN_TOKENS_TO_REINVEST()': FunctionFragment;
    'NEST_FEE_BIPS()': FunctionFragment;
    'NEST_FEE_BIPS_LOCAL()': FunctionFragment;
    'NEST_STAKING_BIPS()': FunctionFragment;
    'PERMIT_TYPEHASH()': FunctionFragment;
    'PID()': FunctionFragment;
    'POOL_CREATOR_FEE_BIPS()': FunctionFragment;
    'POOL_CREATOR_FEE_BIPS_LOCAL()': FunctionFragment;
    'USE_GLOBAL_PEFI_VARIABLES()': FunctionFragment;
    'VERSION_HASH()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'alternateAddress()': FunctionFragment;
    'alternateAddressLocal()': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'checkReward()': FunctionFragment;
    'claimXPEFI()': FunctionFragment;
    'decimals()': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'depositFor(address,uint256)': FunctionFragment;
    'depositToken()': FunctionFragment;
    'depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'devAddress()': FunctionFragment;
    'devAddressLocal()': FunctionFragment;
    'estimateDeployedBalance()': FunctionFragment;
    'estimateReinvestReward()': FunctionFragment;
    'getDepositTokensForShares(uint256)': FunctionFragment;
    'getDomainSeparator()': FunctionFragment;
    'getSharesForDepositTokens(uint256)': FunctionFragment;
    'impromptuTokenAggregation(uint256,bool)': FunctionFragment;
    'name()': FunctionFragment;
    'nestAddress()': FunctionFragment;
    'nestAddressLocal()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'pefiGlobalVariableContract()': FunctionFragment;
    'pendingXPefi(address)': FunctionFragment;
    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'poolCreatorAddress()': FunctionFragment;
    'recoverAVAX(uint256)': FunctionFragment;
    'recoverERC20(address,uint256)': FunctionFragment;
    'reinvest()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'revokeAllowance(address,address)': FunctionFragment;
    'rewardToken()': FunctionFragment;
    'router()': FunctionFragment;
    'setAllowances()': FunctionFragment;
    'stakingContract()': FunctionFragment;
    'symbol()': FunctionFragment;
    'token0()': FunctionFragment;
    'token1()': FunctionFragment;
    'totalDeposits()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateAlternateAddress(address)': FunctionFragment;
    'updateDepositsEnabled(bool)': FunctionFragment;
    'updateDevAddress(address)': FunctionFragment;
    'updateFeeStructure(uint256,uint256,uint256,uint256)': FunctionFragment;
    'updateMaxTokensToDepositWithoutReinvest(uint256)': FunctionFragment;
    'updateMinTokensToReinvest(uint256)': FunctionFragment;
    'updateNestAddress(address)': FunctionFragment;
    'updateNestStakingBips(uint256)': FunctionFragment;
    'updatePoolCreatorAddress(address)': FunctionFragment;
    'updateUseGlobalVariables(bool)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'xPefiDebt(address)': FunctionFragment;
    'xPefiPerShare()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'ALTERNATE_FEE_BIPS'
      | 'ALTERNATE_FEE_BIPS_LOCAL'
      | 'DEPOSITS_ENABLED'
      | 'DEV_FEE_BIPS'
      | 'DEV_FEE_BIPS_LOCAL'
      | 'DOMAIN_TYPEHASH'
      | 'MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST'
      | 'MAX_TOTAL_FEE'
      | 'MIN_TOKENS_TO_REINVEST'
      | 'NEST_FEE_BIPS'
      | 'NEST_FEE_BIPS_LOCAL'
      | 'NEST_STAKING_BIPS'
      | 'PERMIT_TYPEHASH'
      | 'PID'
      | 'POOL_CREATOR_FEE_BIPS'
      | 'POOL_CREATOR_FEE_BIPS_LOCAL'
      | 'USE_GLOBAL_PEFI_VARIABLES'
      | 'VERSION_HASH'
      | 'allowance'
      | 'alternateAddress'
      | 'alternateAddressLocal'
      | 'approve'
      | 'balanceOf'
      | 'checkReward'
      | 'claimXPEFI'
      | 'decimals'
      | 'deposit'
      | 'depositFor'
      | 'depositToken'
      | 'depositWithPermit'
      | 'devAddress'
      | 'devAddressLocal'
      | 'estimateDeployedBalance'
      | 'estimateReinvestReward'
      | 'getDepositTokensForShares'
      | 'getDomainSeparator'
      | 'getSharesForDepositTokens'
      | 'impromptuTokenAggregation'
      | 'name'
      | 'nestAddress'
      | 'nestAddressLocal'
      | 'nonces'
      | 'owner'
      | 'pefiGlobalVariableContract'
      | 'pendingXPefi'
      | 'permit'
      | 'poolCreatorAddress'
      | 'recoverAVAX'
      | 'recoverERC20'
      | 'reinvest'
      | 'renounceOwnership'
      | 'revokeAllowance'
      | 'rewardToken'
      | 'router'
      | 'setAllowances'
      | 'stakingContract'
      | 'symbol'
      | 'token0'
      | 'token1'
      | 'totalDeposits'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'updateAlternateAddress'
      | 'updateDepositsEnabled'
      | 'updateDevAddress'
      | 'updateFeeStructure'
      | 'updateMaxTokensToDepositWithoutReinvest'
      | 'updateMinTokensToReinvest'
      | 'updateNestAddress'
      | 'updateNestStakingBips'
      | 'updatePoolCreatorAddress'
      | 'updateUseGlobalVariables'
      | 'withdraw'
      | 'xPefiDebt'
      | 'xPefiPerShare',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'ALTERNATE_FEE_BIPS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ALTERNATE_FEE_BIPS_LOCAL', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DEPOSITS_ENABLED', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DEV_FEE_BIPS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DEV_FEE_BIPS_LOCAL', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DOMAIN_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_TOTAL_FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MIN_TOKENS_TO_REINVEST', values?: undefined): string;
  encodeFunctionData(functionFragment: 'NEST_FEE_BIPS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'NEST_FEE_BIPS_LOCAL', values?: undefined): string;
  encodeFunctionData(functionFragment: 'NEST_STAKING_BIPS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PERMIT_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PID', values?: undefined): string;
  encodeFunctionData(functionFragment: 'POOL_CREATOR_FEE_BIPS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'POOL_CREATOR_FEE_BIPS_LOCAL', values?: undefined): string;
  encodeFunctionData(functionFragment: 'USE_GLOBAL_PEFI_VARIABLES', values?: undefined): string;
  encodeFunctionData(functionFragment: 'VERSION_HASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'alternateAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'alternateAddressLocal', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'checkReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimXPEFI', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'depositFor',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'depositToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'depositWithPermit',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'devAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'devAddressLocal', values?: undefined): string;
  encodeFunctionData(functionFragment: 'estimateDeployedBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'estimateReinvestReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getDepositTokensForShares', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getDomainSeparator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getSharesForDepositTokens', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'impromptuTokenAggregation',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nestAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nestAddressLocal', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pefiGlobalVariableContract', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingXPefi', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'permit',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'poolCreatorAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'recoverAVAX', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'recoverERC20',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'reinvest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'revokeAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'rewardToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'router', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setAllowances', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stakingContract', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token0', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token1', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalDeposits', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateAlternateAddress', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateDepositsEnabled', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'updateDevAddress', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'updateFeeStructure',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateMaxTokensToDepositWithoutReinvest',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'updateMinTokensToReinvest', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateNestAddress', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateNestStakingBips', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updatePoolCreatorAddress', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateUseGlobalVariables', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'xPefiDebt', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'xPefiPerShare', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'ALTERNATE_FEE_BIPS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ALTERNATE_FEE_BIPS_LOCAL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEPOSITS_ENABLED', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEV_FEE_BIPS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEV_FEE_BIPS_LOCAL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DOMAIN_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_TOTAL_FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MIN_TOKENS_TO_REINVEST', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'NEST_FEE_BIPS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'NEST_FEE_BIPS_LOCAL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'NEST_STAKING_BIPS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PERMIT_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'POOL_CREATOR_FEE_BIPS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'POOL_CREATOR_FEE_BIPS_LOCAL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'USE_GLOBAL_PEFI_VARIABLES', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'VERSION_HASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'alternateAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'alternateAddressLocal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimXPEFI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositWithPermit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'devAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'devAddressLocal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'estimateDeployedBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'estimateReinvestReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDepositTokensForShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDomainSeparator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSharesForDepositTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'impromptuTokenAggregation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nestAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nestAddressLocal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pefiGlobalVariableContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingXPefi', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolCreatorAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recoverAVAX', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recoverERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reinvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'router', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAllowances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakingContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token0', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token1', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalDeposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateAlternateAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateDepositsEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateDevAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateFeeStructure', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMaxTokensToDepositWithoutReinvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMinTokensToReinvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateNestAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateNestStakingBips', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePoolCreatorAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateUseGlobalVariables', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xPefiDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xPefiPerShare', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'ClaimedxPEFI(address,uint256)': EventFragment;
    'Deposit(address,uint256)': EventFragment;
    'DepositsEnabled(bool)': EventFragment;
    'FeeStructureUpdated(uint256,uint256,uint256,uint256)': EventFragment;
    'NestStakingBipsChanged(uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Recovered(address,uint256)': EventFragment;
    'Reinvest(uint256,uint256)': EventFragment;
    'StakedPEFI(uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'UpdateAlternateAddress(address,address)': EventFragment;
    'UpdateDevAddress(address,address)': EventFragment;
    'UpdateMaxTokensToDepositWithoutReinvest(uint256,uint256)': EventFragment;
    'UpdateMinTokensToReinvest(uint256,uint256)': EventFragment;
    'UpdateNestAddress(address,address)': EventFragment;
    'UpdatePoolCreatorAddress(address,address)': EventFragment;
    'UseGlobalVariablesUpdated(bool)': EventFragment;
    'Withdraw(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ClaimedxPEFI'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositsEnabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeStructureUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NestStakingBipsChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Recovered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Reinvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StakedPEFI'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateAlternateAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateDevAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateMaxTokensToDepositWithoutReinvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateMinTokensToReinvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateNestAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatePoolCreatorAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UseGlobalVariablesUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ClaimedxPEFIEventObject {
  account: string;
  amount: BigNumber;
}
export type ClaimedxPEFIEvent = TypedEvent<[string, BigNumber], ClaimedxPEFIEventObject>;

export type ClaimedxPEFIEventFilter = TypedEventFilter<ClaimedxPEFIEvent>;

export interface DepositEventObject {
  account: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DepositsEnabledEventObject {
  newValue: boolean;
}
export type DepositsEnabledEvent = TypedEvent<[boolean], DepositsEnabledEventObject>;

export type DepositsEnabledEventFilter = TypedEventFilter<DepositsEnabledEvent>;

export interface FeeStructureUpdatedEventObject {
  newPOOL_CREATOR_FEE_BIPS: BigNumber;
  newNEST_FEE_BIPS: BigNumber;
  newDEV_FEE_BIPS: BigNumber;
  newALTERNATE_FEE_BIPS: BigNumber;
}
export type FeeStructureUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  FeeStructureUpdatedEventObject
>;

export type FeeStructureUpdatedEventFilter = TypedEventFilter<FeeStructureUpdatedEvent>;

export interface NestStakingBipsChangedEventObject {
  oldNEST_STAKING_BIPS: BigNumber;
  newNEST_STAKING_BIPS: BigNumber;
}
export type NestStakingBipsChangedEvent = TypedEvent<[BigNumber, BigNumber], NestStakingBipsChangedEventObject>;

export type NestStakingBipsChangedEventFilter = TypedEventFilter<NestStakingBipsChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RecoveredEventObject {
  token: string;
  amount: BigNumber;
}
export type RecoveredEvent = TypedEvent<[string, BigNumber], RecoveredEventObject>;

export type RecoveredEventFilter = TypedEventFilter<RecoveredEvent>;

export interface ReinvestEventObject {
  newTotalDeposits: BigNumber;
  newTotalSupply: BigNumber;
}
export type ReinvestEvent = TypedEvent<[BigNumber, BigNumber], ReinvestEventObject>;

export type ReinvestEventFilter = TypedEventFilter<ReinvestEvent>;

export interface StakedPEFIEventObject {
  amountPefiSentToNest: BigNumber;
}
export type StakedPEFIEvent = TypedEvent<[BigNumber], StakedPEFIEventObject>;

export type StakedPEFIEventFilter = TypedEventFilter<StakedPEFIEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UpdateAlternateAddressEventObject {
  oldValue: string;
  newValue: string;
}
export type UpdateAlternateAddressEvent = TypedEvent<[string, string], UpdateAlternateAddressEventObject>;

export type UpdateAlternateAddressEventFilter = TypedEventFilter<UpdateAlternateAddressEvent>;

export interface UpdateDevAddressEventObject {
  oldValue: string;
  newValue: string;
}
export type UpdateDevAddressEvent = TypedEvent<[string, string], UpdateDevAddressEventObject>;

export type UpdateDevAddressEventFilter = TypedEventFilter<UpdateDevAddressEvent>;

export interface UpdateMaxTokensToDepositWithoutReinvestEventObject {
  oldValue: BigNumber;
  newValue: BigNumber;
}
export type UpdateMaxTokensToDepositWithoutReinvestEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdateMaxTokensToDepositWithoutReinvestEventObject
>;

export type UpdateMaxTokensToDepositWithoutReinvestEventFilter =
  TypedEventFilter<UpdateMaxTokensToDepositWithoutReinvestEvent>;

export interface UpdateMinTokensToReinvestEventObject {
  oldValue: BigNumber;
  newValue: BigNumber;
}
export type UpdateMinTokensToReinvestEvent = TypedEvent<[BigNumber, BigNumber], UpdateMinTokensToReinvestEventObject>;

export type UpdateMinTokensToReinvestEventFilter = TypedEventFilter<UpdateMinTokensToReinvestEvent>;

export interface UpdateNestAddressEventObject {
  oldValue: string;
  newValue: string;
}
export type UpdateNestAddressEvent = TypedEvent<[string, string], UpdateNestAddressEventObject>;

export type UpdateNestAddressEventFilter = TypedEventFilter<UpdateNestAddressEvent>;

export interface UpdatePoolCreatorAddressEventObject {
  oldValue: string;
  newValue: string;
}
export type UpdatePoolCreatorAddressEvent = TypedEvent<[string, string], UpdatePoolCreatorAddressEventObject>;

export type UpdatePoolCreatorAddressEventFilter = TypedEventFilter<UpdatePoolCreatorAddressEvent>;

export interface UseGlobalVariablesUpdatedEventObject {
  newValue: boolean;
}
export type UseGlobalVariablesUpdatedEvent = TypedEvent<[boolean], UseGlobalVariablesUpdatedEventObject>;

export type UseGlobalVariablesUpdatedEventFilter = TypedEventFilter<UseGlobalVariablesUpdatedEvent>;

export interface WithdrawEventObject {
  account: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface PenguinVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PenguinVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ALTERNATE_FEE_BIPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    ALTERNATE_FEE_BIPS_LOCAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEPOSITS_ENABLED(overrides?: CallOverrides): Promise<[boolean]>;

    DEV_FEE_BIPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEV_FEE_BIPS_LOCAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_TOTAL_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_TOKENS_TO_REINVEST(overrides?: CallOverrides): Promise<[BigNumber]>;

    NEST_FEE_BIPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    NEST_FEE_BIPS_LOCAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    NEST_STAKING_BIPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    PID(overrides?: CallOverrides): Promise<[BigNumber]>;

    POOL_CREATOR_FEE_BIPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    POOL_CREATOR_FEE_BIPS_LOCAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    USE_GLOBAL_PEFI_VARIABLES(overrides?: CallOverrides): Promise<[boolean]>;

    VERSION_HASH(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      account: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    alternateAddress(overrides?: CallOverrides): Promise<[string]>;

    alternateAddressLocal(overrides?: CallOverrides): Promise<[string]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    checkReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimXPEFI(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositFor(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositToken(overrides?: CallOverrides): Promise<[string]>;

    depositWithPermit(
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    devAddress(overrides?: CallOverrides): Promise<[string]>;

    devAddressLocal(overrides?: CallOverrides): Promise<[string]>;

    estimateDeployedBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    estimateReinvestReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDepositTokensForShares(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getDomainSeparator(overrides?: CallOverrides): Promise<[string]>;

    getSharesForDepositTokens(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    impromptuTokenAggregation(
      minReturnAmountAccepted: PromiseOrValue<BigNumberish>,
      disableDeposits: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nestAddress(overrides?: CallOverrides): Promise<[string]>;

    nestAddressLocal(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pefiGlobalVariableContract(overrides?: CallOverrides): Promise<[string]>;

    pendingXPefi(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    poolCreatorAddress(overrides?: CallOverrides): Promise<[string]>;

    recoverAVAX(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    reinvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    revokeAllowance(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setAllowances(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    stakingContract(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    token0(overrides?: CallOverrides): Promise<[string]>;

    token1(overrides?: CallOverrides): Promise<[string]>;

    totalDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateAlternateAddress(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateDepositsEnabled(
      newValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateDevAddress(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateFeeStructure(
      newPOOL_CREATOR_FEE_BIPS: PromiseOrValue<BigNumberish>,
      newNEST_FEE_BIPS: PromiseOrValue<BigNumberish>,
      newDEV_FEE_BIPS: PromiseOrValue<BigNumberish>,
      newALTERNATE_FEE_BIPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateMaxTokensToDepositWithoutReinvest(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateMinTokensToReinvest(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateNestAddress(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateNestStakingBips(
      newNEST_STAKING_BIPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updatePoolCreatorAddress(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateUseGlobalVariables(
      newValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    xPefiDebt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    xPefiPerShare(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  ALTERNATE_FEE_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

  ALTERNATE_FEE_BIPS_LOCAL(overrides?: CallOverrides): Promise<BigNumber>;

  DEPOSITS_ENABLED(overrides?: CallOverrides): Promise<boolean>;

  DEV_FEE_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

  DEV_FEE_BIPS_LOCAL(overrides?: CallOverrides): Promise<BigNumber>;

  DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_TOTAL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_TOKENS_TO_REINVEST(overrides?: CallOverrides): Promise<BigNumber>;

  NEST_FEE_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

  NEST_FEE_BIPS_LOCAL(overrides?: CallOverrides): Promise<BigNumber>;

  NEST_STAKING_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  PID(overrides?: CallOverrides): Promise<BigNumber>;

  POOL_CREATOR_FEE_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

  POOL_CREATOR_FEE_BIPS_LOCAL(overrides?: CallOverrides): Promise<BigNumber>;

  USE_GLOBAL_PEFI_VARIABLES(overrides?: CallOverrides): Promise<boolean>;

  VERSION_HASH(overrides?: CallOverrides): Promise<string>;

  allowance(
    account: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  alternateAddress(overrides?: CallOverrides): Promise<string>;

  alternateAddressLocal(overrides?: CallOverrides): Promise<string>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  checkReward(overrides?: CallOverrides): Promise<BigNumber>;

  claimXPEFI(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositFor(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositToken(overrides?: CallOverrides): Promise<string>;

  depositWithPermit(
    amount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  devAddress(overrides?: CallOverrides): Promise<string>;

  devAddressLocal(overrides?: CallOverrides): Promise<string>;

  estimateDeployedBalance(overrides?: CallOverrides): Promise<BigNumber>;

  estimateReinvestReward(overrides?: CallOverrides): Promise<BigNumber>;

  getDepositTokensForShares(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getDomainSeparator(overrides?: CallOverrides): Promise<string>;

  getSharesForDepositTokens(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  impromptuTokenAggregation(
    minReturnAmountAccepted: PromiseOrValue<BigNumberish>,
    disableDeposits: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nestAddress(overrides?: CallOverrides): Promise<string>;

  nestAddressLocal(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pefiGlobalVariableContract(overrides?: CallOverrides): Promise<string>;

  pendingXPefi(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  permit(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  poolCreatorAddress(overrides?: CallOverrides): Promise<string>;

  recoverAVAX(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  recoverERC20(
    tokenAddress: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  reinvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  revokeAllowance(
    token: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  router(overrides?: CallOverrides): Promise<string>;

  setAllowances(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  stakingContract(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  token0(overrides?: CallOverrides): Promise<string>;

  token1(overrides?: CallOverrides): Promise<string>;

  totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    dst: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    src: PromiseOrValue<string>,
    dst: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateAlternateAddress(
    newValue: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateDepositsEnabled(
    newValue: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateDevAddress(
    newValue: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateFeeStructure(
    newPOOL_CREATOR_FEE_BIPS: PromiseOrValue<BigNumberish>,
    newNEST_FEE_BIPS: PromiseOrValue<BigNumberish>,
    newDEV_FEE_BIPS: PromiseOrValue<BigNumberish>,
    newALTERNATE_FEE_BIPS: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateMaxTokensToDepositWithoutReinvest(
    newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateMinTokensToReinvest(
    newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateNestAddress(
    newValue: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateNestStakingBips(
    newNEST_STAKING_BIPS: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updatePoolCreatorAddress(
    newValue: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateUseGlobalVariables(
    newValue: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  xPefiDebt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  xPefiPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    ALTERNATE_FEE_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

    ALTERNATE_FEE_BIPS_LOCAL(overrides?: CallOverrides): Promise<BigNumber>;

    DEPOSITS_ENABLED(overrides?: CallOverrides): Promise<boolean>;

    DEV_FEE_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

    DEV_FEE_BIPS_LOCAL(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TOTAL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_TOKENS_TO_REINVEST(overrides?: CallOverrides): Promise<BigNumber>;

    NEST_FEE_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

    NEST_FEE_BIPS_LOCAL(overrides?: CallOverrides): Promise<BigNumber>;

    NEST_STAKING_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    PID(overrides?: CallOverrides): Promise<BigNumber>;

    POOL_CREATOR_FEE_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

    POOL_CREATOR_FEE_BIPS_LOCAL(overrides?: CallOverrides): Promise<BigNumber>;

    USE_GLOBAL_PEFI_VARIABLES(overrides?: CallOverrides): Promise<boolean>;

    VERSION_HASH(overrides?: CallOverrides): Promise<string>;

    allowance(
      account: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    alternateAddress(overrides?: CallOverrides): Promise<string>;

    alternateAddressLocal(overrides?: CallOverrides): Promise<string>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    checkReward(overrides?: CallOverrides): Promise<BigNumber>;

    claimXPEFI(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    deposit(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    depositFor(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositToken(overrides?: CallOverrides): Promise<string>;

    depositWithPermit(
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    devAddress(overrides?: CallOverrides): Promise<string>;

    devAddressLocal(overrides?: CallOverrides): Promise<string>;

    estimateDeployedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    estimateReinvestReward(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositTokensForShares(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getDomainSeparator(overrides?: CallOverrides): Promise<string>;

    getSharesForDepositTokens(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    impromptuTokenAggregation(
      minReturnAmountAccepted: PromiseOrValue<BigNumberish>,
      disableDeposits: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nestAddress(overrides?: CallOverrides): Promise<string>;

    nestAddressLocal(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pefiGlobalVariableContract(overrides?: CallOverrides): Promise<string>;

    pendingXPefi(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    poolCreatorAddress(overrides?: CallOverrides): Promise<string>;

    recoverAVAX(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    reinvest(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revokeAllowance(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    router(overrides?: CallOverrides): Promise<string>;

    setAllowances(overrides?: CallOverrides): Promise<void>;

    stakingContract(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    token0(overrides?: CallOverrides): Promise<string>;

    token1(overrides?: CallOverrides): Promise<string>;

    totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateAlternateAddress(newValue: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateDepositsEnabled(newValue: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    updateDevAddress(newValue: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateFeeStructure(
      newPOOL_CREATOR_FEE_BIPS: PromiseOrValue<BigNumberish>,
      newNEST_FEE_BIPS: PromiseOrValue<BigNumberish>,
      newDEV_FEE_BIPS: PromiseOrValue<BigNumberish>,
      newALTERNATE_FEE_BIPS: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateMaxTokensToDepositWithoutReinvest(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateMinTokensToReinvest(newValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateNestAddress(newValue: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateNestStakingBips(newNEST_STAKING_BIPS: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updatePoolCreatorAddress(newValue: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateUseGlobalVariables(newValue: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    withdraw(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    xPefiDebt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    xPefiPerShare(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'ClaimedxPEFI(address,uint256)'(account?: PromiseOrValue<string> | null, amount?: null): ClaimedxPEFIEventFilter;
    ClaimedxPEFI(account?: PromiseOrValue<string> | null, amount?: null): ClaimedxPEFIEventFilter;

    'Deposit(address,uint256)'(account?: PromiseOrValue<string> | null, amount?: null): DepositEventFilter;
    Deposit(account?: PromiseOrValue<string> | null, amount?: null): DepositEventFilter;

    'DepositsEnabled(bool)'(newValue?: null): DepositsEnabledEventFilter;
    DepositsEnabled(newValue?: null): DepositsEnabledEventFilter;

    'FeeStructureUpdated(uint256,uint256,uint256,uint256)'(
      newPOOL_CREATOR_FEE_BIPS?: null,
      newNEST_FEE_BIPS?: null,
      newDEV_FEE_BIPS?: null,
      newALTERNATE_FEE_BIPS?: null,
    ): FeeStructureUpdatedEventFilter;
    FeeStructureUpdated(
      newPOOL_CREATOR_FEE_BIPS?: null,
      newNEST_FEE_BIPS?: null,
      newDEV_FEE_BIPS?: null,
      newALTERNATE_FEE_BIPS?: null,
    ): FeeStructureUpdatedEventFilter;

    'NestStakingBipsChanged(uint256,uint256)'(
      oldNEST_STAKING_BIPS?: null,
      newNEST_STAKING_BIPS?: null,
    ): NestStakingBipsChangedEventFilter;
    NestStakingBipsChanged(oldNEST_STAKING_BIPS?: null, newNEST_STAKING_BIPS?: null): NestStakingBipsChangedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'Recovered(address,uint256)'(token?: null, amount?: null): RecoveredEventFilter;
    Recovered(token?: null, amount?: null): RecoveredEventFilter;

    'Reinvest(uint256,uint256)'(newTotalDeposits?: null, newTotalSupply?: null): ReinvestEventFilter;
    Reinvest(newTotalDeposits?: null, newTotalSupply?: null): ReinvestEventFilter;

    'StakedPEFI(uint256)'(amountPefiSentToNest?: null): StakedPEFIEventFilter;
    StakedPEFI(amountPefiSentToNest?: null): StakedPEFIEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;

    'UpdateAlternateAddress(address,address)'(oldValue?: null, newValue?: null): UpdateAlternateAddressEventFilter;
    UpdateAlternateAddress(oldValue?: null, newValue?: null): UpdateAlternateAddressEventFilter;

    'UpdateDevAddress(address,address)'(oldValue?: null, newValue?: null): UpdateDevAddressEventFilter;
    UpdateDevAddress(oldValue?: null, newValue?: null): UpdateDevAddressEventFilter;

    'UpdateMaxTokensToDepositWithoutReinvest(uint256,uint256)'(
      oldValue?: null,
      newValue?: null,
    ): UpdateMaxTokensToDepositWithoutReinvestEventFilter;
    UpdateMaxTokensToDepositWithoutReinvest(
      oldValue?: null,
      newValue?: null,
    ): UpdateMaxTokensToDepositWithoutReinvestEventFilter;

    'UpdateMinTokensToReinvest(uint256,uint256)'(
      oldValue?: null,
      newValue?: null,
    ): UpdateMinTokensToReinvestEventFilter;
    UpdateMinTokensToReinvest(oldValue?: null, newValue?: null): UpdateMinTokensToReinvestEventFilter;

    'UpdateNestAddress(address,address)'(oldValue?: null, newValue?: null): UpdateNestAddressEventFilter;
    UpdateNestAddress(oldValue?: null, newValue?: null): UpdateNestAddressEventFilter;

    'UpdatePoolCreatorAddress(address,address)'(oldValue?: null, newValue?: null): UpdatePoolCreatorAddressEventFilter;
    UpdatePoolCreatorAddress(oldValue?: null, newValue?: null): UpdatePoolCreatorAddressEventFilter;

    'UseGlobalVariablesUpdated(bool)'(newValue?: null): UseGlobalVariablesUpdatedEventFilter;
    UseGlobalVariablesUpdated(newValue?: null): UseGlobalVariablesUpdatedEventFilter;

    'Withdraw(address,uint256)'(account?: PromiseOrValue<string> | null, amount?: null): WithdrawEventFilter;
    Withdraw(account?: PromiseOrValue<string> | null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    ALTERNATE_FEE_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

    ALTERNATE_FEE_BIPS_LOCAL(overrides?: CallOverrides): Promise<BigNumber>;

    DEPOSITS_ENABLED(overrides?: CallOverrides): Promise<BigNumber>;

    DEV_FEE_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

    DEV_FEE_BIPS_LOCAL(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TOTAL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_TOKENS_TO_REINVEST(overrides?: CallOverrides): Promise<BigNumber>;

    NEST_FEE_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

    NEST_FEE_BIPS_LOCAL(overrides?: CallOverrides): Promise<BigNumber>;

    NEST_STAKING_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    PID(overrides?: CallOverrides): Promise<BigNumber>;

    POOL_CREATOR_FEE_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

    POOL_CREATOR_FEE_BIPS_LOCAL(overrides?: CallOverrides): Promise<BigNumber>;

    USE_GLOBAL_PEFI_VARIABLES(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      account: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    alternateAddress(overrides?: CallOverrides): Promise<BigNumber>;

    alternateAddressLocal(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    checkReward(overrides?: CallOverrides): Promise<BigNumber>;

    claimXPEFI(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositFor(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositToken(overrides?: CallOverrides): Promise<BigNumber>;

    depositWithPermit(
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    devAddress(overrides?: CallOverrides): Promise<BigNumber>;

    devAddressLocal(overrides?: CallOverrides): Promise<BigNumber>;

    estimateDeployedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    estimateReinvestReward(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositTokensForShares(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getDomainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    getSharesForDepositTokens(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    impromptuTokenAggregation(
      minReturnAmountAccepted: PromiseOrValue<BigNumberish>,
      disableDeposits: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nestAddress(overrides?: CallOverrides): Promise<BigNumber>;

    nestAddressLocal(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pefiGlobalVariableContract(overrides?: CallOverrides): Promise<BigNumber>;

    pendingXPefi(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    poolCreatorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    recoverAVAX(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    reinvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    revokeAllowance(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setAllowances(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    stakingContract(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateAlternateAddress(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateDepositsEnabled(
      newValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateDevAddress(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateFeeStructure(
      newPOOL_CREATOR_FEE_BIPS: PromiseOrValue<BigNumberish>,
      newNEST_FEE_BIPS: PromiseOrValue<BigNumberish>,
      newDEV_FEE_BIPS: PromiseOrValue<BigNumberish>,
      newALTERNATE_FEE_BIPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateMaxTokensToDepositWithoutReinvest(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateMinTokensToReinvest(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateNestAddress(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateNestStakingBips(
      newNEST_STAKING_BIPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updatePoolCreatorAddress(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateUseGlobalVariables(
      newValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    xPefiDebt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    xPefiPerShare(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ALTERNATE_FEE_BIPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ALTERNATE_FEE_BIPS_LOCAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEPOSITS_ENABLED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEV_FEE_BIPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEV_FEE_BIPS_LOCAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_TOTAL_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_TOKENS_TO_REINVEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NEST_FEE_BIPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NEST_FEE_BIPS_LOCAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NEST_STAKING_BIPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POOL_CREATOR_FEE_BIPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POOL_CREATOR_FEE_BIPS_LOCAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USE_GLOBAL_PEFI_VARIABLES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      account: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    alternateAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    alternateAddressLocal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimXPEFI(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositFor(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositWithPermit(
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    devAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devAddressLocal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    estimateDeployedBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    estimateReinvestReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepositTokensForShares(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDomainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSharesForDepositTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    impromptuTokenAggregation(
      minReturnAmountAccepted: PromiseOrValue<BigNumberish>,
      disableDeposits: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nestAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nestAddressLocal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pefiGlobalVariableContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingXPefi(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    poolCreatorAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverAVAX(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    reinvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    revokeAllowance(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAllowances(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    stakingContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateAlternateAddress(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateDepositsEnabled(
      newValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateDevAddress(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateFeeStructure(
      newPOOL_CREATOR_FEE_BIPS: PromiseOrValue<BigNumberish>,
      newNEST_FEE_BIPS: PromiseOrValue<BigNumberish>,
      newDEV_FEE_BIPS: PromiseOrValue<BigNumberish>,
      newALTERNATE_FEE_BIPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateMaxTokensToDepositWithoutReinvest(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateMinTokensToReinvest(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateNestAddress(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateNestStakingBips(
      newNEST_STAKING_BIPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updatePoolCreatorAddress(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateUseGlobalVariables(
      newValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    xPefiDebt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xPefiPerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
