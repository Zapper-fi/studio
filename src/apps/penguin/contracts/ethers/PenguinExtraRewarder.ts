/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface PenguinExtraRewarderInterface extends utils.Interface {
  functions: {
    'AVAX()': FunctionFragment;
    'checkReward(uint256)': FunctionFragment;
    'deposit(address,address,uint256,uint256)': FunctionFragment;
    'depositToken()': FunctionFragment;
    'harvested(address,address)': FunctionFragment;
    'iglooMaster()': FunctionFragment;
    'iglooStrategyStorage()': FunctionFragment;
    'inCaseTokensGetStuck(address,address,uint256)': FunctionFragment;
    'migrate(address)': FunctionFragment;
    'numberRewardTokens()': FunctionFragment;
    'onMigration()': FunctionFragment;
    'owner()': FunctionFragment;
    'pangolinMiniChef()': FunctionFragment;
    'pangolinPid()': FunctionFragment;
    'pendingRewards(address,uint256)': FunctionFragment;
    'pendingTokens(uint256,address,uint256)': FunctionFragment;
    'performanceFeeBips()': FunctionFragment;
    'pid()': FunctionFragment;
    'previousIglooStorage()': FunctionFragment;
    'previousRewardToken()': FunctionFragment;
    'previousRewardsClaimed(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'revokeAllowance(address,address)': FunctionFragment;
    'rewardTokens()': FunctionFragment;
    'rewardTokensArray(uint256)': FunctionFragment;
    'setAllowances()': FunctionFragment;
    'setPerformanceFeeBips(uint256)': FunctionFragment;
    'totalHarvested(address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'withdraw(address,address,uint256,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'AVAX'
      | 'checkReward'
      | 'deposit'
      | 'depositToken'
      | 'harvested'
      | 'iglooMaster'
      | 'iglooStrategyStorage'
      | 'inCaseTokensGetStuck'
      | 'migrate'
      | 'numberRewardTokens'
      | 'onMigration'
      | 'owner'
      | 'pangolinMiniChef'
      | 'pangolinPid'
      | 'pendingRewards'
      | 'pendingTokens'
      | 'performanceFeeBips'
      | 'pid'
      | 'previousIglooStorage'
      | 'previousRewardToken'
      | 'previousRewardsClaimed'
      | 'renounceOwnership'
      | 'revokeAllowance'
      | 'rewardTokens'
      | 'rewardTokensArray'
      | 'setAllowances'
      | 'setPerformanceFeeBips'
      | 'totalHarvested'
      | 'transferOwnership'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'AVAX', values?: undefined): string;
  encodeFunctionData(functionFragment: 'checkReward', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'deposit', values: [string, string, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'depositToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'harvested', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'iglooMaster', values?: undefined): string;
  encodeFunctionData(functionFragment: 'iglooStrategyStorage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'inCaseTokensGetStuck', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'migrate', values: [string]): string;
  encodeFunctionData(functionFragment: 'numberRewardTokens', values?: undefined): string;
  encodeFunctionData(functionFragment: 'onMigration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pangolinMiniChef', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pangolinPid', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingRewards', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'pendingTokens', values: [BigNumberish, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'performanceFeeBips', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pid', values?: undefined): string;
  encodeFunctionData(functionFragment: 'previousIglooStorage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'previousRewardToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'previousRewardsClaimed', values: [string]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'revokeAllowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'rewardTokens', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardTokensArray', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setAllowances', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setPerformanceFeeBips', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'totalHarvested', values: [string]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [string, string, BigNumberish, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'AVAX', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvested', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'iglooMaster', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'iglooStrategyStorage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'inCaseTokensGetStuck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migrate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numberRewardTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onMigration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pangolinMiniChef', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pangolinPid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'performanceFeeBips', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previousIglooStorage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previousRewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previousRewardsClaimed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokensArray', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAllowances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPerformanceFeeBips', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalHarvested', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Harvest(address,address,address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Harvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export interface HarvestEventObject {
  caller: string;
  to: string;
  rewardToken: string;
  harvestedAmount: BigNumber;
}
export type HarvestEvent = TypedEvent<[string, string, string, BigNumber], HarvestEventObject>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PenguinExtraRewarder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PenguinExtraRewarderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AVAX(overrides?: CallOverrides): Promise<[string]>;

    checkReward(tokenIndex: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      caller: string,
      to: string,
      tokenAmount: BigNumberish,
      shareAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositToken(overrides?: CallOverrides): Promise<[string]>;

    harvested(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    iglooMaster(overrides?: CallOverrides): Promise<[string]>;

    iglooStrategyStorage(overrides?: CallOverrides): Promise<[string]>;

    inCaseTokensGetStuck(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    migrate(
      newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    numberRewardTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    onMigration(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pangolinMiniChef(overrides?: CallOverrides): Promise<[string]>;

    pangolinPid(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingRewards(user: string, rewardTokenIndex: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingTokens(
      arg0: BigNumberish,
      user: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string[], BigNumber[]]>;

    performanceFeeBips(overrides?: CallOverrides): Promise<[BigNumber]>;

    pid(overrides?: CallOverrides): Promise<[BigNumber]>;

    previousIglooStorage(overrides?: CallOverrides): Promise<[string]>;

    previousRewardToken(overrides?: CallOverrides): Promise<[string]>;

    previousRewardsClaimed(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    revokeAllowance(
      token: string,
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    rewardTokens(overrides?: CallOverrides): Promise<[string[]]>;

    rewardTokensArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    setAllowances(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setPerformanceFeeBips(
      newPerformanceFeeBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    totalHarvested(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      caller: string,
      to: string,
      tokenAmount: BigNumberish,
      shareAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  AVAX(overrides?: CallOverrides): Promise<string>;

  checkReward(tokenIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    caller: string,
    to: string,
    tokenAmount: BigNumberish,
    shareAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositToken(overrides?: CallOverrides): Promise<string>;

  harvested(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  iglooMaster(overrides?: CallOverrides): Promise<string>;

  iglooStrategyStorage(overrides?: CallOverrides): Promise<string>;

  inCaseTokensGetStuck(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  migrate(
    newStrategy: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  numberRewardTokens(overrides?: CallOverrides): Promise<BigNumber>;

  onMigration(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pangolinMiniChef(overrides?: CallOverrides): Promise<string>;

  pangolinPid(overrides?: CallOverrides): Promise<BigNumber>;

  pendingRewards(user: string, rewardTokenIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  pendingTokens(
    arg0: BigNumberish,
    user: string,
    arg2: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[string[], BigNumber[]]>;

  performanceFeeBips(overrides?: CallOverrides): Promise<BigNumber>;

  pid(overrides?: CallOverrides): Promise<BigNumber>;

  previousIglooStorage(overrides?: CallOverrides): Promise<string>;

  previousRewardToken(overrides?: CallOverrides): Promise<string>;

  previousRewardsClaimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  revokeAllowance(
    token: string,
    spender: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  rewardTokens(overrides?: CallOverrides): Promise<string[]>;

  rewardTokensArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  setAllowances(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setPerformanceFeeBips(
    newPerformanceFeeBips: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  totalHarvested(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    caller: string,
    to: string,
    tokenAmount: BigNumberish,
    shareAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    AVAX(overrides?: CallOverrides): Promise<string>;

    checkReward(tokenIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      caller: string,
      to: string,
      tokenAmount: BigNumberish,
      shareAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositToken(overrides?: CallOverrides): Promise<string>;

    harvested(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    iglooMaster(overrides?: CallOverrides): Promise<string>;

    iglooStrategyStorage(overrides?: CallOverrides): Promise<string>;

    inCaseTokensGetStuck(token: string, to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    migrate(newStrategy: string, overrides?: CallOverrides): Promise<void>;

    numberRewardTokens(overrides?: CallOverrides): Promise<BigNumber>;

    onMigration(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pangolinMiniChef(overrides?: CallOverrides): Promise<string>;

    pangolinPid(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(user: string, rewardTokenIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    pendingTokens(
      arg0: BigNumberish,
      user: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string[], BigNumber[]]>;

    performanceFeeBips(overrides?: CallOverrides): Promise<BigNumber>;

    pid(overrides?: CallOverrides): Promise<BigNumber>;

    previousIglooStorage(overrides?: CallOverrides): Promise<string>;

    previousRewardToken(overrides?: CallOverrides): Promise<string>;

    previousRewardsClaimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revokeAllowance(token: string, spender: string, overrides?: CallOverrides): Promise<void>;

    rewardTokens(overrides?: CallOverrides): Promise<string[]>;

    rewardTokensArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    setAllowances(overrides?: CallOverrides): Promise<void>;

    setPerformanceFeeBips(newPerformanceFeeBips: BigNumberish, overrides?: CallOverrides): Promise<void>;

    totalHarvested(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    withdraw(
      caller: string,
      to: string,
      tokenAmount: BigNumberish,
      shareAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'Harvest(address,address,address,uint256)'(
      caller?: string | null,
      to?: string | null,
      rewardToken?: string | null,
      harvestedAmount?: null,
    ): HarvestEventFilter;
    Harvest(
      caller?: string | null,
      to?: string | null,
      rewardToken?: string | null,
      harvestedAmount?: null,
    ): HarvestEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    AVAX(overrides?: CallOverrides): Promise<BigNumber>;

    checkReward(tokenIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      caller: string,
      to: string,
      tokenAmount: BigNumberish,
      shareAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    depositToken(overrides?: CallOverrides): Promise<BigNumber>;

    harvested(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    iglooMaster(overrides?: CallOverrides): Promise<BigNumber>;

    iglooStrategyStorage(overrides?: CallOverrides): Promise<BigNumber>;

    inCaseTokensGetStuck(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    migrate(newStrategy: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    numberRewardTokens(overrides?: CallOverrides): Promise<BigNumber>;

    onMigration(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pangolinMiniChef(overrides?: CallOverrides): Promise<BigNumber>;

    pangolinPid(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(user: string, rewardTokenIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    pendingTokens(arg0: BigNumberish, user: string, arg2: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    performanceFeeBips(overrides?: CallOverrides): Promise<BigNumber>;

    pid(overrides?: CallOverrides): Promise<BigNumber>;

    previousIglooStorage(overrides?: CallOverrides): Promise<BigNumber>;

    previousRewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    previousRewardsClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    revokeAllowance(
      token: string,
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    rewardTokens(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokensArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setAllowances(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setPerformanceFeeBips(
      newPerformanceFeeBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    totalHarvested(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdraw(
      caller: string,
      to: string,
      tokenAmount: BigNumberish,
      shareAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AVAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkReward(tokenIndex: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      caller: string,
      to: string,
      tokenAmount: BigNumberish,
      shareAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvested(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    iglooMaster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    iglooStrategyStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inCaseTokensGetStuck(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    migrate(
      newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    numberRewardTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onMigration(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pangolinMiniChef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pangolinPid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRewards(
      user: string,
      rewardTokenIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    pendingTokens(
      arg0: BigNumberish,
      user: string,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    performanceFeeBips(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previousIglooStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previousRewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previousRewardsClaimed(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    revokeAllowance(
      token: string,
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    rewardTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokensArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAllowances(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setPerformanceFeeBips(
      newPerformanceFeeBips: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    totalHarvested(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      caller: string,
      to: string,
      tokenAmount: BigNumberish,
      shareAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
