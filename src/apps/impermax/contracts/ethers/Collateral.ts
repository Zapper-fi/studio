/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface CollateralInterface extends utils.Interface {
  functions: {
    'DOMAIN_SEPARATOR()': FunctionFragment;
    'LIQUIDATION_INCENTIVE_MAX()': FunctionFragment;
    'LIQUIDATION_INCENTIVE_MIN()': FunctionFragment;
    'MINIMUM_LIQUIDITY()': FunctionFragment;
    'PERMIT_TYPEHASH()': FunctionFragment;
    'SAFETY_MARGIN_SQRT_MAX()': FunctionFragment;
    'SAFETY_MARGIN_SQRT_MIN()': FunctionFragment;
    '_initialize(string,string,address,address,address)': FunctionFragment;
    '_setFactory()': FunctionFragment;
    '_setLiquidationIncentive(uint256)': FunctionFragment;
    '_setSafetyMarginSqrt(uint256)': FunctionFragment;
    'accountLiquidity(address)': FunctionFragment;
    'accountLiquidityAmounts(address,uint256,uint256)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'borrowable0()': FunctionFragment;
    'borrowable1()': FunctionFragment;
    'canBorrow(address,address,uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'exchangeRate()': FunctionFragment;
    'factory()': FunctionFragment;
    'flashRedeem(address,uint256,bytes)': FunctionFragment;
    'getPrices()': FunctionFragment;
    'liquidationIncentive()': FunctionFragment;
    'mint(address)': FunctionFragment;
    'name()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'redeem(address)': FunctionFragment;
    'safetyMarginSqrt()': FunctionFragment;
    'seize(address,address,uint256)': FunctionFragment;
    'simpleUniswapOracle()': FunctionFragment;
    'skim(address)': FunctionFragment;
    'symbol()': FunctionFragment;
    'sync()': FunctionFragment;
    'tokensUnlocked(address,uint256)': FunctionFragment;
    'totalBalance()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'underlying()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DOMAIN_SEPARATOR'
      | 'LIQUIDATION_INCENTIVE_MAX'
      | 'LIQUIDATION_INCENTIVE_MIN'
      | 'MINIMUM_LIQUIDITY'
      | 'PERMIT_TYPEHASH'
      | 'SAFETY_MARGIN_SQRT_MAX'
      | 'SAFETY_MARGIN_SQRT_MIN'
      | '_initialize'
      | '_setFactory'
      | '_setLiquidationIncentive'
      | '_setSafetyMarginSqrt'
      | 'accountLiquidity'
      | 'accountLiquidityAmounts'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'borrowable0'
      | 'borrowable1'
      | 'canBorrow'
      | 'decimals'
      | 'exchangeRate'
      | 'factory'
      | 'flashRedeem'
      | 'getPrices'
      | 'liquidationIncentive'
      | 'mint'
      | 'name'
      | 'nonces'
      | 'permit'
      | 'redeem'
      | 'safetyMarginSqrt'
      | 'seize'
      | 'simpleUniswapOracle'
      | 'skim'
      | 'symbol'
      | 'sync'
      | 'tokensUnlocked'
      | 'totalBalance'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'underlying',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'LIQUIDATION_INCENTIVE_MAX', values?: undefined): string;
  encodeFunctionData(functionFragment: 'LIQUIDATION_INCENTIVE_MIN', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MINIMUM_LIQUIDITY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PERMIT_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SAFETY_MARGIN_SQRT_MAX', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SAFETY_MARGIN_SQRT_MIN', values?: undefined): string;
  encodeFunctionData(
    functionFragment: '_initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: '_setFactory', values?: undefined): string;
  encodeFunctionData(functionFragment: '_setLiquidationIncentive', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: '_setSafetyMarginSqrt', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'accountLiquidity', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'accountLiquidityAmounts',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'borrowable0', values?: undefined): string;
  encodeFunctionData(functionFragment: 'borrowable1', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'canBorrow',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'exchangeRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'flashRedeem',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'getPrices', values?: undefined): string;
  encodeFunctionData(functionFragment: 'liquidationIncentive', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mint', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'permit',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'redeem', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'safetyMarginSqrt', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'seize',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'simpleUniswapOracle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'skim', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'sync', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'tokensUnlocked',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'totalBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'underlying', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'LIQUIDATION_INCENTIVE_MAX', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'LIQUIDATION_INCENTIVE_MIN', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MINIMUM_LIQUIDITY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PERMIT_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SAFETY_MARGIN_SQRT_MAX', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SAFETY_MARGIN_SQRT_MIN', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setFactory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setLiquidationIncentive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setSafetyMarginSqrt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountLiquidityAmounts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowable0', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowable1', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'canBorrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exchangeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'flashRedeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPrices', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidationIncentive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safetyMarginSqrt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'seize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'simpleUniswapOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'skim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sync', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokensUnlocked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'underlying', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Mint(address,address,uint256,uint256)': EventFragment;
    'NewLiquidationIncentive(uint256)': EventFragment;
    'NewSafetyMargin(uint256)': EventFragment;
    'Redeem(address,address,uint256,uint256)': EventFragment;
    'Sync(uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewLiquidationIncentive'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewSafetyMargin'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Redeem'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Sync'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface MintEventObject {
  sender: string;
  minter: string;
  mintAmount: BigNumber;
  mintTokens: BigNumber;
}
export type MintEvent = TypedEvent<[string, string, BigNumber, BigNumber], MintEventObject>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface NewLiquidationIncentiveEventObject {
  newLiquidationIncentive: BigNumber;
}
export type NewLiquidationIncentiveEvent = TypedEvent<[BigNumber], NewLiquidationIncentiveEventObject>;

export type NewLiquidationIncentiveEventFilter = TypedEventFilter<NewLiquidationIncentiveEvent>;

export interface NewSafetyMarginEventObject {
  newSafetyMarginSqrt: BigNumber;
}
export type NewSafetyMarginEvent = TypedEvent<[BigNumber], NewSafetyMarginEventObject>;

export type NewSafetyMarginEventFilter = TypedEventFilter<NewSafetyMarginEvent>;

export interface RedeemEventObject {
  sender: string;
  redeemer: string;
  redeemAmount: BigNumber;
  redeemTokens: BigNumber;
}
export type RedeemEvent = TypedEvent<[string, string, BigNumber, BigNumber], RedeemEventObject>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface SyncEventObject {
  totalBalance: BigNumber;
}
export type SyncEvent = TypedEvent<[BigNumber], SyncEventObject>;

export type SyncEventFilter = TypedEventFilter<SyncEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Collateral extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CollateralInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    LIQUIDATION_INCENTIVE_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    LIQUIDATION_INCENTIVE_MIN(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    SAFETY_MARGIN_SQRT_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    SAFETY_MARGIN_SQRT_MIN(overrides?: CallOverrides): Promise<[BigNumber]>;

    _initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _underlying: PromiseOrValue<string>,
      _borrowable0: PromiseOrValue<string>,
      _borrowable1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setFactory(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    _setLiquidationIncentive(
      newLiquidationIncentive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setSafetyMarginSqrt(
      newSafetyMarginSqrt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    accountLiquidity(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    accountLiquidityAmounts(
      borrower: PromiseOrValue<string>,
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowable0(overrides?: CallOverrides): Promise<[string]>;

    borrowable1(overrides?: CallOverrides): Promise<[string]>;

    canBorrow(
      borrower: PromiseOrValue<string>,
      borrowable: PromiseOrValue<string>,
      accountBorrows: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    exchangeRate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    flashRedeem(
      redeemer: PromiseOrValue<string>,
      redeemAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getPrices(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    liquidationIncentive(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    redeem(
      redeemer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    safetyMarginSqrt(overrides?: CallOverrides): Promise<[BigNumber]>;

    seize(
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    simpleUniswapOracle(overrides?: CallOverrides): Promise<[string]>;

    skim(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    sync(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    tokensUnlocked(
      from: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  LIQUIDATION_INCENTIVE_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  LIQUIDATION_INCENTIVE_MIN(overrides?: CallOverrides): Promise<BigNumber>;

  MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  SAFETY_MARGIN_SQRT_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  SAFETY_MARGIN_SQRT_MIN(overrides?: CallOverrides): Promise<BigNumber>;

  _initialize(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _underlying: PromiseOrValue<string>,
    _borrowable0: PromiseOrValue<string>,
    _borrowable1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setFactory(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  _setLiquidationIncentive(
    newLiquidationIncentive: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setSafetyMarginSqrt(
    newSafetyMarginSqrt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  accountLiquidity(
    borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  accountLiquidityAmounts(
    borrower: PromiseOrValue<string>,
    amount0: PromiseOrValue<BigNumberish>,
    amount1: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  allowance(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  borrowable0(overrides?: CallOverrides): Promise<string>;

  borrowable1(overrides?: CallOverrides): Promise<string>;

  canBorrow(
    borrower: PromiseOrValue<string>,
    borrowable: PromiseOrValue<string>,
    accountBorrows: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  exchangeRate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  flashRedeem(
    redeemer: PromiseOrValue<string>,
    redeemAmount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getPrices(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  liquidationIncentive(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    minter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  permit(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  redeem(
    redeemer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  safetyMarginSqrt(overrides?: CallOverrides): Promise<BigNumber>;

  seize(
    liquidator: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    repayAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  simpleUniswapOracle(overrides?: CallOverrides): Promise<string>;

  skim(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  sync(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  tokensUnlocked(
    from: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    LIQUIDATION_INCENTIVE_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATION_INCENTIVE_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    SAFETY_MARGIN_SQRT_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    SAFETY_MARGIN_SQRT_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    _initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _underlying: PromiseOrValue<string>,
      _borrowable0: PromiseOrValue<string>,
      _borrowable1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    _setFactory(overrides?: CallOverrides): Promise<void>;

    _setLiquidationIncentive(
      newLiquidationIncentive: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    _setSafetyMarginSqrt(newSafetyMarginSqrt: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    accountLiquidity(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { liquidity: BigNumber; shortfall: BigNumber }>;

    accountLiquidityAmounts(
      borrower: PromiseOrValue<string>,
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { liquidity: BigNumber; shortfall: BigNumber }>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowable0(overrides?: CallOverrides): Promise<string>;

    borrowable1(overrides?: CallOverrides): Promise<string>;

    canBorrow(
      borrower: PromiseOrValue<string>,
      borrowable: PromiseOrValue<string>,
      accountBorrows: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    decimals(overrides?: CallOverrides): Promise<number>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    flashRedeem(
      redeemer: PromiseOrValue<string>,
      redeemAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getPrices(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { price0: BigNumber; price1: BigNumber }>;

    liquidationIncentive(overrides?: CallOverrides): Promise<BigNumber>;

    mint(minter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    redeem(redeemer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    safetyMarginSqrt(overrides?: CallOverrides): Promise<BigNumber>;

    seize(
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    simpleUniswapOracle(overrides?: CallOverrides): Promise<string>;

    skim(to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    sync(overrides?: CallOverrides): Promise<void>;

    tokensUnlocked(
      from: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    underlying(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'Mint(address,address,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      minter?: PromiseOrValue<string> | null,
      mintAmount?: null,
      mintTokens?: null,
    ): MintEventFilter;
    Mint(
      sender?: PromiseOrValue<string> | null,
      minter?: PromiseOrValue<string> | null,
      mintAmount?: null,
      mintTokens?: null,
    ): MintEventFilter;

    'NewLiquidationIncentive(uint256)'(newLiquidationIncentive?: null): NewLiquidationIncentiveEventFilter;
    NewLiquidationIncentive(newLiquidationIncentive?: null): NewLiquidationIncentiveEventFilter;

    'NewSafetyMargin(uint256)'(newSafetyMarginSqrt?: null): NewSafetyMarginEventFilter;
    NewSafetyMargin(newSafetyMarginSqrt?: null): NewSafetyMarginEventFilter;

    'Redeem(address,address,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      redeemer?: PromiseOrValue<string> | null,
      redeemAmount?: null,
      redeemTokens?: null,
    ): RedeemEventFilter;
    Redeem(
      sender?: PromiseOrValue<string> | null,
      redeemer?: PromiseOrValue<string> | null,
      redeemAmount?: null,
      redeemTokens?: null,
    ): RedeemEventFilter;

    'Sync(uint256)'(totalBalance?: null): SyncEventFilter;
    Sync(totalBalance?: null): SyncEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATION_INCENTIVE_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATION_INCENTIVE_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    SAFETY_MARGIN_SQRT_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    SAFETY_MARGIN_SQRT_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    _initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _underlying: PromiseOrValue<string>,
      _borrowable0: PromiseOrValue<string>,
      _borrowable1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setFactory(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    _setLiquidationIncentive(
      newLiquidationIncentive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setSafetyMarginSqrt(
      newSafetyMarginSqrt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    accountLiquidity(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    accountLiquidityAmounts(
      borrower: PromiseOrValue<string>,
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowable0(overrides?: CallOverrides): Promise<BigNumber>;

    borrowable1(overrides?: CallOverrides): Promise<BigNumber>;

    canBorrow(
      borrower: PromiseOrValue<string>,
      borrowable: PromiseOrValue<string>,
      accountBorrows: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    flashRedeem(
      redeemer: PromiseOrValue<string>,
      redeemAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getPrices(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    liquidationIncentive(overrides?: CallOverrides): Promise<BigNumber>;

    mint(minter: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    redeem(
      redeemer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    safetyMarginSqrt(overrides?: CallOverrides): Promise<BigNumber>;

    seize(
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    simpleUniswapOracle(overrides?: CallOverrides): Promise<BigNumber>;

    skim(to: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    sync(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    tokensUnlocked(
      from: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LIQUIDATION_INCENTIVE_MAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LIQUIDATION_INCENTIVE_MIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SAFETY_MARGIN_SQRT_MAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SAFETY_MARGIN_SQRT_MIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _underlying: PromiseOrValue<string>,
      _borrowable0: PromiseOrValue<string>,
      _borrowable1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setFactory(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    _setLiquidationIncentive(
      newLiquidationIncentive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setSafetyMarginSqrt(
      newSafetyMarginSqrt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    accountLiquidity(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    accountLiquidityAmounts(
      borrower: PromiseOrValue<string>,
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowable0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowable1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canBorrow(
      borrower: PromiseOrValue<string>,
      borrowable: PromiseOrValue<string>,
      accountBorrows: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeRate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flashRedeem(
      redeemer: PromiseOrValue<string>,
      redeemAmount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getPrices(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    liquidationIncentive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    redeem(
      redeemer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    safetyMarginSqrt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seize(
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    simpleUniswapOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    skim(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sync(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    tokensUnlocked(
      from: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
