/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface OpenleverageFactoryInterface extends utils.Interface {
  functions: {
    'acceptAdmin()': FunctionFragment;
    'activeTrades(address,uint16,bool)': FunctionFragment;
    'addressConfig()': FunctionFragment;
    'admin()': FunctionFragment;
    'allowedDepositTokens(address)': FunctionFragment;
    'calculateConfig()': FunctionFragment;
    'developer()': FunctionFragment;
    'implementation()': FunctionFragment;
    'markets(uint16)': FunctionFragment;
    'numPairs()': FunctionFragment;
    'pendingAdmin()': FunctionFragment;
    'setPendingAdmin(address)': FunctionFragment;
    'supportDexs(uint8)': FunctionFragment;
    'taxes(uint16,address,uint256)': FunctionFragment;
    'totalHelds(address)': FunctionFragment;
    'initialize(address,address,address[],address,address,uint8[])': FunctionFragment;
    'addMarket(address,address,uint16,bytes)': FunctionFragment;
    'marginTrade(uint16,bool,bool,uint256,uint256,uint256,bytes)': FunctionFragment;
    'closeTrade(uint16,bool,uint256,uint256,bytes)': FunctionFragment;
    'liquidate(address,uint16,bool,uint256,uint256,bytes)': FunctionFragment;
    'marginRatio(address,uint16,bool,bytes)': FunctionFragment;
    'shouldUpdatePrice(uint16,bytes)': FunctionFragment;
    'updatePrice(uint16,bytes)': FunctionFragment;
    'getMarketSupportDexs(uint16)': FunctionFragment;
    'setCalculateConfig(uint16,uint8,uint16,uint16,uint16,uint16,uint128,uint16,uint8,uint16)': FunctionFragment;
    'setAddressConfig(address,address)': FunctionFragment;
    'setMarketConfig(uint16,uint16,uint16,uint16,uint32[])': FunctionFragment;
    'moveInsurance(uint16,uint8,address,uint256)': FunctionFragment;
    'setSupportDex(uint8,bool)': FunctionFragment;
    'setTaxRate(uint16,address,uint256,uint24)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptAdmin'
      | 'activeTrades'
      | 'addressConfig'
      | 'admin'
      | 'allowedDepositTokens'
      | 'calculateConfig'
      | 'developer'
      | 'implementation'
      | 'markets'
      | 'numPairs'
      | 'pendingAdmin'
      | 'setPendingAdmin'
      | 'supportDexs'
      | 'taxes'
      | 'totalHelds'
      | 'initialize'
      | 'addMarket'
      | 'marginTrade'
      | 'closeTrade'
      | 'liquidate'
      | 'marginRatio'
      | 'shouldUpdatePrice'
      | 'updatePrice'
      | 'getMarketSupportDexs'
      | 'setCalculateConfig'
      | 'setAddressConfig'
      | 'setMarketConfig'
      | 'moveInsurance'
      | 'setSupportDex'
      | 'setTaxRate',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'acceptAdmin', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'activeTrades',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'addressConfig', values?: undefined): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowedDepositTokens', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'calculateConfig', values?: undefined): string;
  encodeFunctionData(functionFragment: 'developer', values?: undefined): string;
  encodeFunctionData(functionFragment: 'implementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'markets', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'numPairs', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingAdmin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setPendingAdmin', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'supportDexs', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'taxes',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'totalHelds', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'addMarket',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'marginTrade',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'closeTrade',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidate',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'marginRatio',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'shouldUpdatePrice',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'updatePrice',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'getMarketSupportDexs', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setCalculateConfig',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'setAddressConfig',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setMarketConfig',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'moveInsurance',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'setSupportDex',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setTaxRate',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;

  decodeFunctionResult(functionFragment: 'acceptAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activeTrades', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addressConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowedDepositTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'developer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'implementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'markets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numPairs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPendingAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportDexs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'taxes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalHelds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marginTrade', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeTrade', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marginRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'shouldUpdatePrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMarketSupportDexs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCalculateConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAddressConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMarketConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'moveInsurance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSupportDex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTaxRate', data: BytesLike): Result;

  events: {
    'ChangeAllowedDepositTokens(address[],bool)': EventFragment;
    'Liquidation(address,uint16,bool,bool,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,uint32)': EventFragment;
    'MarginTrade(address,uint16,bool,bool,uint256,uint256,uint256,uint256,uint256,uint32)': EventFragment;
    'NewAddressConfig(address,address)': EventFragment;
    'NewAdmin(address,address)': EventFragment;
    'NewCalculateConfig(uint16,uint8,uint16,uint16,uint16,uint16,uint128,uint16,uint8,uint16)': EventFragment;
    'NewMarketConfig(uint16,uint16,uint32,uint16,uint32[])': EventFragment;
    'NewPendingAdmin(address,address)': EventFragment;
    'TradeClosed(address,uint16,bool,bool,uint256,uint256,uint256,uint256,uint256,uint32)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ChangeAllowedDepositTokens'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Liquidation'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarginTrade'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewAddressConfig'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewAdmin'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewCalculateConfig'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewMarketConfig'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewPendingAdmin'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TradeClosed'): EventFragment;
}

export interface ChangeAllowedDepositTokensEventObject {
  token: string[];
  allowed: boolean;
}
export type ChangeAllowedDepositTokensEvent = TypedEvent<[string[], boolean], ChangeAllowedDepositTokensEventObject>;

export type ChangeAllowedDepositTokensEventFilter = TypedEventFilter<ChangeAllowedDepositTokensEvent>;

export interface LiquidationEventObject {
  owner: string;
  marketId: number;
  longToken: boolean;
  depositToken: boolean;
  liquidationAmount: BigNumber;
  outstandingAmount: BigNumber;
  liquidator: string;
  depositDecrease: BigNumber;
  depositReturn: BigNumber;
  fees: BigNumber;
  token0Price: BigNumber;
  penalty: BigNumber;
  dex: number;
}
export type LiquidationEvent = TypedEvent<
  [
    string,
    number,
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
  ],
  LiquidationEventObject
>;

export type LiquidationEventFilter = TypedEventFilter<LiquidationEvent>;

export interface MarginTradeEventObject {
  trader: string;
  marketId: number;
  longToken: boolean;
  depositToken: boolean;
  deposited: BigNumber;
  borrowed: BigNumber;
  held: BigNumber;
  fees: BigNumber;
  token0Price: BigNumber;
  dex: number;
}
export type MarginTradeEvent = TypedEvent<
  [string, number, boolean, boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number],
  MarginTradeEventObject
>;

export type MarginTradeEventFilter = TypedEventFilter<MarginTradeEvent>;

export interface NewAddressConfigEventObject {
  controller: string;
  dexAggregator: string;
}
export type NewAddressConfigEvent = TypedEvent<[string, string], NewAddressConfigEventObject>;

export type NewAddressConfigEventFilter = TypedEventFilter<NewAddressConfigEvent>;

export interface NewAdminEventObject {
  oldAdmin: string;
  newAdmin: string;
}
export type NewAdminEvent = TypedEvent<[string, string], NewAdminEventObject>;

export type NewAdminEventFilter = TypedEventFilter<NewAdminEvent>;

export interface NewCalculateConfigEventObject {
  defaultFeesRate: number;
  insuranceRatio: number;
  defaultMarginLimit: number;
  priceDiffientRatio: number;
  updatePriceDiscount: number;
  feesDiscount: number;
  feesDiscountThreshold: BigNumber;
  penaltyRatio: number;
  maxLiquidationPriceDiffientRatio: number;
  twapDuration: number;
}
export type NewCalculateConfigEvent = TypedEvent<
  [number, number, number, number, number, number, BigNumber, number, number, number],
  NewCalculateConfigEventObject
>;

export type NewCalculateConfigEventFilter = TypedEventFilter<NewCalculateConfigEvent>;

export interface NewMarketConfigEventObject {
  marketId: number;
  feesRate: number;
  marginLimit: number;
  priceDiffientRatio: number;
  dexs: number[];
}
export type NewMarketConfigEvent = TypedEvent<[number, number, number, number, number[]], NewMarketConfigEventObject>;

export type NewMarketConfigEventFilter = TypedEventFilter<NewMarketConfigEvent>;

export interface NewPendingAdminEventObject {
  oldPendingAdmin: string;
  newPendingAdmin: string;
}
export type NewPendingAdminEvent = TypedEvent<[string, string], NewPendingAdminEventObject>;

export type NewPendingAdminEventFilter = TypedEventFilter<NewPendingAdminEvent>;

export interface TradeClosedEventObject {
  owner: string;
  marketId: number;
  longToken: boolean;
  depositToken: boolean;
  closeAmount: BigNumber;
  depositDecrease: BigNumber;
  depositReturn: BigNumber;
  fees: BigNumber;
  token0Price: BigNumber;
  dex: number;
}
export type TradeClosedEvent = TypedEvent<
  [string, number, boolean, boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number],
  TradeClosedEventObject
>;

export type TradeClosedEventFilter = TypedEventFilter<TradeClosedEvent>;

export interface OpenleverageFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OpenleverageFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptAdmin(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    activeTrades(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, boolean, BigNumber] & {
        deposited: BigNumber;
        held: BigNumber;
        depositToken: boolean;
        lastBlockNum: BigNumber;
      }
    >;

    addressConfig(overrides?: CallOverrides): Promise<
      [string, string, string, string] & {
        dexAggregator: string;
        controller: string;
        wETH: string;
        xOLE: string;
      }
    >;

    admin(overrides?: CallOverrides): Promise<[string]>;

    allowedDepositTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    calculateConfig(overrides?: CallOverrides): Promise<
      [number, number, number, number, number, number, BigNumber, number, number, number] & {
        defaultFeesRate: number;
        insuranceRatio: number;
        defaultMarginLimit: number;
        priceDiffientRatio: number;
        updatePriceDiscount: number;
        feesDiscount: number;
        feesDiscountThreshold: BigNumber;
        penaltyRatio: number;
        maxLiquidationPriceDiffientRatio: number;
        twapDuration: number;
      }
    >;

    developer(overrides?: CallOverrides): Promise<[string]>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    markets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, string, number, number, number, string, BigNumber, BigNumber] & {
        pool0: string;
        pool1: string;
        token0: string;
        token1: string;
        marginLimit: number;
        feesRate: number;
        priceDiffientRatio: number;
        priceUpdater: string;
        pool0Insurance: BigNumber;
        pool1Insurance: BigNumber;
      }
    >;

    numPairs(overrides?: CallOverrides): Promise<[number]>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    setPendingAdmin(
      newPendingAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supportDexs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    taxes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[number]>;

    totalHelds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _controller: PromiseOrValue<string>,
      _dexAggregator: PromiseOrValue<string>,
      depositTokens: PromiseOrValue<string>[],
      _wETH: PromiseOrValue<string>,
      _xOLE: PromiseOrValue<string>,
      _supportDexs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addMarket(
      pool0: PromiseOrValue<string>,
      pool1: PromiseOrValue<string>,
      marginLimit: PromiseOrValue<BigNumberish>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    marginTrade(
      marketId: PromiseOrValue<BigNumberish>,
      longToken: PromiseOrValue<boolean>,
      depositToken: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<BigNumberish>,
      borrow: PromiseOrValue<BigNumberish>,
      minBuyAmount: PromiseOrValue<BigNumberish>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    closeTrade(
      marketId: PromiseOrValue<BigNumberish>,
      longToken: PromiseOrValue<boolean>,
      closeHeld: PromiseOrValue<BigNumberish>,
      minOrMaxAmount: PromiseOrValue<BigNumberish>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    liquidate(
      owner: PromiseOrValue<string>,
      marketId: PromiseOrValue<BigNumberish>,
      longToken: PromiseOrValue<boolean>,
      minBuy: PromiseOrValue<BigNumberish>,
      maxSell: PromiseOrValue<BigNumberish>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    marginRatio(
      owner: PromiseOrValue<string>,
      marketId: PromiseOrValue<BigNumberish>,
      longToken: PromiseOrValue<boolean>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number] & {
        current: BigNumber;
        cAvg: BigNumber;
        hAvg: BigNumber;
        limit: number;
      }
    >;

    shouldUpdatePrice(
      marketId: PromiseOrValue<BigNumberish>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    updatePrice(
      marketId: PromiseOrValue<BigNumberish>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getMarketSupportDexs(marketId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number[]]>;

    setCalculateConfig(
      defaultFeesRate: PromiseOrValue<BigNumberish>,
      insuranceRatio: PromiseOrValue<BigNumberish>,
      defaultMarginLimit: PromiseOrValue<BigNumberish>,
      priceDiffientRatio: PromiseOrValue<BigNumberish>,
      updatePriceDiscount: PromiseOrValue<BigNumberish>,
      feesDiscount: PromiseOrValue<BigNumberish>,
      feesDiscountThreshold: PromiseOrValue<BigNumberish>,
      penaltyRatio: PromiseOrValue<BigNumberish>,
      maxLiquidationPriceDiffientRatio: PromiseOrValue<BigNumberish>,
      twapDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setAddressConfig(
      controller: PromiseOrValue<string>,
      dexAggregator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMarketConfig(
      marketId: PromiseOrValue<BigNumberish>,
      feesRate: PromiseOrValue<BigNumberish>,
      marginLimit: PromiseOrValue<BigNumberish>,
      priceDiffientRatio: PromiseOrValue<BigNumberish>,
      dexs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    moveInsurance(
      marketId: PromiseOrValue<BigNumberish>,
      poolIndex: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSupportDex(
      dex: PromiseOrValue<BigNumberish>,
      support: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTaxRate(
      marketId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      tax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  acceptAdmin(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  activeTrades(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, boolean, BigNumber] & {
      deposited: BigNumber;
      held: BigNumber;
      depositToken: boolean;
      lastBlockNum: BigNumber;
    }
  >;

  addressConfig(overrides?: CallOverrides): Promise<
    [string, string, string, string] & {
      dexAggregator: string;
      controller: string;
      wETH: string;
      xOLE: string;
    }
  >;

  admin(overrides?: CallOverrides): Promise<string>;

  allowedDepositTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  calculateConfig(overrides?: CallOverrides): Promise<
    [number, number, number, number, number, number, BigNumber, number, number, number] & {
      defaultFeesRate: number;
      insuranceRatio: number;
      defaultMarginLimit: number;
      priceDiffientRatio: number;
      updatePriceDiscount: number;
      feesDiscount: number;
      feesDiscountThreshold: BigNumber;
      penaltyRatio: number;
      maxLiquidationPriceDiffientRatio: number;
      twapDuration: number;
    }
  >;

  developer(overrides?: CallOverrides): Promise<string>;

  implementation(overrides?: CallOverrides): Promise<string>;

  markets(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, string, string, number, number, number, string, BigNumber, BigNumber] & {
      pool0: string;
      pool1: string;
      token0: string;
      token1: string;
      marginLimit: number;
      feesRate: number;
      priceDiffientRatio: number;
      priceUpdater: string;
      pool0Insurance: BigNumber;
      pool1Insurance: BigNumber;
    }
  >;

  numPairs(overrides?: CallOverrides): Promise<number>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  setPendingAdmin(
    newPendingAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  supportDexs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  taxes(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<number>;

  totalHelds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _controller: PromiseOrValue<string>,
    _dexAggregator: PromiseOrValue<string>,
    depositTokens: PromiseOrValue<string>[],
    _wETH: PromiseOrValue<string>,
    _xOLE: PromiseOrValue<string>,
    _supportDexs: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addMarket(
    pool0: PromiseOrValue<string>,
    pool1: PromiseOrValue<string>,
    marginLimit: PromiseOrValue<BigNumberish>,
    dexData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  marginTrade(
    marketId: PromiseOrValue<BigNumberish>,
    longToken: PromiseOrValue<boolean>,
    depositToken: PromiseOrValue<boolean>,
    deposit: PromiseOrValue<BigNumberish>,
    borrow: PromiseOrValue<BigNumberish>,
    minBuyAmount: PromiseOrValue<BigNumberish>,
    dexData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  closeTrade(
    marketId: PromiseOrValue<BigNumberish>,
    longToken: PromiseOrValue<boolean>,
    closeHeld: PromiseOrValue<BigNumberish>,
    minOrMaxAmount: PromiseOrValue<BigNumberish>,
    dexData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  liquidate(
    owner: PromiseOrValue<string>,
    marketId: PromiseOrValue<BigNumberish>,
    longToken: PromiseOrValue<boolean>,
    minBuy: PromiseOrValue<BigNumberish>,
    maxSell: PromiseOrValue<BigNumberish>,
    dexData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  marginRatio(
    owner: PromiseOrValue<string>,
    marketId: PromiseOrValue<BigNumberish>,
    longToken: PromiseOrValue<boolean>,
    dexData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number] & {
      current: BigNumber;
      cAvg: BigNumber;
      hAvg: BigNumber;
      limit: number;
    }
  >;

  shouldUpdatePrice(
    marketId: PromiseOrValue<BigNumberish>,
    dexData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  updatePrice(
    marketId: PromiseOrValue<BigNumberish>,
    dexData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getMarketSupportDexs(marketId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;

  setCalculateConfig(
    defaultFeesRate: PromiseOrValue<BigNumberish>,
    insuranceRatio: PromiseOrValue<BigNumberish>,
    defaultMarginLimit: PromiseOrValue<BigNumberish>,
    priceDiffientRatio: PromiseOrValue<BigNumberish>,
    updatePriceDiscount: PromiseOrValue<BigNumberish>,
    feesDiscount: PromiseOrValue<BigNumberish>,
    feesDiscountThreshold: PromiseOrValue<BigNumberish>,
    penaltyRatio: PromiseOrValue<BigNumberish>,
    maxLiquidationPriceDiffientRatio: PromiseOrValue<BigNumberish>,
    twapDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setAddressConfig(
    controller: PromiseOrValue<string>,
    dexAggregator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMarketConfig(
    marketId: PromiseOrValue<BigNumberish>,
    feesRate: PromiseOrValue<BigNumberish>,
    marginLimit: PromiseOrValue<BigNumberish>,
    priceDiffientRatio: PromiseOrValue<BigNumberish>,
    dexs: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  moveInsurance(
    marketId: PromiseOrValue<BigNumberish>,
    poolIndex: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSupportDex(
    dex: PromiseOrValue<BigNumberish>,
    support: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTaxRate(
    marketId: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    tax: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptAdmin(overrides?: CallOverrides): Promise<void>;

    activeTrades(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, boolean, BigNumber] & {
        deposited: BigNumber;
        held: BigNumber;
        depositToken: boolean;
        lastBlockNum: BigNumber;
      }
    >;

    addressConfig(overrides?: CallOverrides): Promise<
      [string, string, string, string] & {
        dexAggregator: string;
        controller: string;
        wETH: string;
        xOLE: string;
      }
    >;

    admin(overrides?: CallOverrides): Promise<string>;

    allowedDepositTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    calculateConfig(overrides?: CallOverrides): Promise<
      [number, number, number, number, number, number, BigNumber, number, number, number] & {
        defaultFeesRate: number;
        insuranceRatio: number;
        defaultMarginLimit: number;
        priceDiffientRatio: number;
        updatePriceDiscount: number;
        feesDiscount: number;
        feesDiscountThreshold: BigNumber;
        penaltyRatio: number;
        maxLiquidationPriceDiffientRatio: number;
        twapDuration: number;
      }
    >;

    developer(overrides?: CallOverrides): Promise<string>;

    implementation(overrides?: CallOverrides): Promise<string>;

    markets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, string, number, number, number, string, BigNumber, BigNumber] & {
        pool0: string;
        pool1: string;
        token0: string;
        token1: string;
        marginLimit: number;
        feesRate: number;
        priceDiffientRatio: number;
        priceUpdater: string;
        pool0Insurance: BigNumber;
        pool1Insurance: BigNumber;
      }
    >;

    numPairs(overrides?: CallOverrides): Promise<number>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    setPendingAdmin(newPendingAdmin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    supportDexs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    taxes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<number>;

    totalHelds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _controller: PromiseOrValue<string>,
      _dexAggregator: PromiseOrValue<string>,
      depositTokens: PromiseOrValue<string>[],
      _wETH: PromiseOrValue<string>,
      _xOLE: PromiseOrValue<string>,
      _supportDexs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    addMarket(
      pool0: PromiseOrValue<string>,
      pool1: PromiseOrValue<string>,
      marginLimit: PromiseOrValue<BigNumberish>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<number>;

    marginTrade(
      marketId: PromiseOrValue<BigNumberish>,
      longToken: PromiseOrValue<boolean>,
      depositToken: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<BigNumberish>,
      borrow: PromiseOrValue<BigNumberish>,
      minBuyAmount: PromiseOrValue<BigNumberish>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    closeTrade(
      marketId: PromiseOrValue<BigNumberish>,
      longToken: PromiseOrValue<boolean>,
      closeHeld: PromiseOrValue<BigNumberish>,
      minOrMaxAmount: PromiseOrValue<BigNumberish>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    liquidate(
      owner: PromiseOrValue<string>,
      marketId: PromiseOrValue<BigNumberish>,
      longToken: PromiseOrValue<boolean>,
      minBuy: PromiseOrValue<BigNumberish>,
      maxSell: PromiseOrValue<BigNumberish>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    marginRatio(
      owner: PromiseOrValue<string>,
      marketId: PromiseOrValue<BigNumberish>,
      longToken: PromiseOrValue<boolean>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number] & {
        current: BigNumber;
        cAvg: BigNumber;
        hAvg: BigNumber;
        limit: number;
      }
    >;

    shouldUpdatePrice(
      marketId: PromiseOrValue<BigNumberish>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    updatePrice(
      marketId: PromiseOrValue<BigNumberish>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getMarketSupportDexs(marketId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>;

    setCalculateConfig(
      defaultFeesRate: PromiseOrValue<BigNumberish>,
      insuranceRatio: PromiseOrValue<BigNumberish>,
      defaultMarginLimit: PromiseOrValue<BigNumberish>,
      priceDiffientRatio: PromiseOrValue<BigNumberish>,
      updatePriceDiscount: PromiseOrValue<BigNumberish>,
      feesDiscount: PromiseOrValue<BigNumberish>,
      feesDiscountThreshold: PromiseOrValue<BigNumberish>,
      penaltyRatio: PromiseOrValue<BigNumberish>,
      maxLiquidationPriceDiffientRatio: PromiseOrValue<BigNumberish>,
      twapDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setAddressConfig(
      controller: PromiseOrValue<string>,
      dexAggregator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMarketConfig(
      marketId: PromiseOrValue<BigNumberish>,
      feesRate: PromiseOrValue<BigNumberish>,
      marginLimit: PromiseOrValue<BigNumberish>,
      priceDiffientRatio: PromiseOrValue<BigNumberish>,
      dexs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    moveInsurance(
      marketId: PromiseOrValue<BigNumberish>,
      poolIndex: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setSupportDex(
      dex: PromiseOrValue<BigNumberish>,
      support: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setTaxRate(
      marketId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      tax: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'ChangeAllowedDepositTokens(address[],bool)'(token?: null, allowed?: null): ChangeAllowedDepositTokensEventFilter;
    ChangeAllowedDepositTokens(token?: null, allowed?: null): ChangeAllowedDepositTokensEventFilter;

    'Liquidation(address,uint16,bool,bool,uint256,uint256,address,uint256,uint256,uint256,uint256,uint256,uint32)'(
      owner?: null,
      marketId?: null,
      longToken?: null,
      depositToken?: null,
      liquidationAmount?: null,
      outstandingAmount?: null,
      liquidator?: null,
      depositDecrease?: null,
      depositReturn?: null,
      fees?: null,
      token0Price?: null,
      penalty?: null,
      dex?: null,
    ): LiquidationEventFilter;
    Liquidation(
      owner?: null,
      marketId?: null,
      longToken?: null,
      depositToken?: null,
      liquidationAmount?: null,
      outstandingAmount?: null,
      liquidator?: null,
      depositDecrease?: null,
      depositReturn?: null,
      fees?: null,
      token0Price?: null,
      penalty?: null,
      dex?: null,
    ): LiquidationEventFilter;

    'MarginTrade(address,uint16,bool,bool,uint256,uint256,uint256,uint256,uint256,uint32)'(
      trader?: null,
      marketId?: null,
      longToken?: null,
      depositToken?: null,
      deposited?: null,
      borrowed?: null,
      held?: null,
      fees?: null,
      token0Price?: null,
      dex?: null,
    ): MarginTradeEventFilter;
    MarginTrade(
      trader?: null,
      marketId?: null,
      longToken?: null,
      depositToken?: null,
      deposited?: null,
      borrowed?: null,
      held?: null,
      fees?: null,
      token0Price?: null,
      dex?: null,
    ): MarginTradeEventFilter;

    'NewAddressConfig(address,address)'(controller?: null, dexAggregator?: null): NewAddressConfigEventFilter;
    NewAddressConfig(controller?: null, dexAggregator?: null): NewAddressConfigEventFilter;

    'NewAdmin(address,address)'(oldAdmin?: null, newAdmin?: null): NewAdminEventFilter;
    NewAdmin(oldAdmin?: null, newAdmin?: null): NewAdminEventFilter;

    'NewCalculateConfig(uint16,uint8,uint16,uint16,uint16,uint16,uint128,uint16,uint8,uint16)'(
      defaultFeesRate?: null,
      insuranceRatio?: null,
      defaultMarginLimit?: null,
      priceDiffientRatio?: null,
      updatePriceDiscount?: null,
      feesDiscount?: null,
      feesDiscountThreshold?: null,
      penaltyRatio?: null,
      maxLiquidationPriceDiffientRatio?: null,
      twapDuration?: null,
    ): NewCalculateConfigEventFilter;
    NewCalculateConfig(
      defaultFeesRate?: null,
      insuranceRatio?: null,
      defaultMarginLimit?: null,
      priceDiffientRatio?: null,
      updatePriceDiscount?: null,
      feesDiscount?: null,
      feesDiscountThreshold?: null,
      penaltyRatio?: null,
      maxLiquidationPriceDiffientRatio?: null,
      twapDuration?: null,
    ): NewCalculateConfigEventFilter;

    'NewMarketConfig(uint16,uint16,uint32,uint16,uint32[])'(
      marketId?: null,
      feesRate?: null,
      marginLimit?: null,
      priceDiffientRatio?: null,
      dexs?: null,
    ): NewMarketConfigEventFilter;
    NewMarketConfig(
      marketId?: null,
      feesRate?: null,
      marginLimit?: null,
      priceDiffientRatio?: null,
      dexs?: null,
    ): NewMarketConfigEventFilter;

    'NewPendingAdmin(address,address)'(oldPendingAdmin?: null, newPendingAdmin?: null): NewPendingAdminEventFilter;
    NewPendingAdmin(oldPendingAdmin?: null, newPendingAdmin?: null): NewPendingAdminEventFilter;

    'TradeClosed(address,uint16,bool,bool,uint256,uint256,uint256,uint256,uint256,uint32)'(
      owner?: null,
      marketId?: null,
      longToken?: null,
      depositToken?: null,
      closeAmount?: null,
      depositDecrease?: null,
      depositReturn?: null,
      fees?: null,
      token0Price?: null,
      dex?: null,
    ): TradeClosedEventFilter;
    TradeClosed(
      owner?: null,
      marketId?: null,
      longToken?: null,
      depositToken?: null,
      closeAmount?: null,
      depositDecrease?: null,
      depositReturn?: null,
      fees?: null,
      token0Price?: null,
      dex?: null,
    ): TradeClosedEventFilter;
  };

  estimateGas: {
    acceptAdmin(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    activeTrades(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    addressConfig(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    allowedDepositTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    calculateConfig(overrides?: CallOverrides): Promise<BigNumber>;

    developer(overrides?: CallOverrides): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    markets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    numPairs(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    setPendingAdmin(
      newPendingAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    supportDexs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    taxes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalHelds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _controller: PromiseOrValue<string>,
      _dexAggregator: PromiseOrValue<string>,
      depositTokens: PromiseOrValue<string>[],
      _wETH: PromiseOrValue<string>,
      _xOLE: PromiseOrValue<string>,
      _supportDexs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addMarket(
      pool0: PromiseOrValue<string>,
      pool1: PromiseOrValue<string>,
      marginLimit: PromiseOrValue<BigNumberish>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    marginTrade(
      marketId: PromiseOrValue<BigNumberish>,
      longToken: PromiseOrValue<boolean>,
      depositToken: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<BigNumberish>,
      borrow: PromiseOrValue<BigNumberish>,
      minBuyAmount: PromiseOrValue<BigNumberish>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    closeTrade(
      marketId: PromiseOrValue<BigNumberish>,
      longToken: PromiseOrValue<boolean>,
      closeHeld: PromiseOrValue<BigNumberish>,
      minOrMaxAmount: PromiseOrValue<BigNumberish>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    liquidate(
      owner: PromiseOrValue<string>,
      marketId: PromiseOrValue<BigNumberish>,
      longToken: PromiseOrValue<boolean>,
      minBuy: PromiseOrValue<BigNumberish>,
      maxSell: PromiseOrValue<BigNumberish>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    marginRatio(
      owner: PromiseOrValue<string>,
      marketId: PromiseOrValue<BigNumberish>,
      longToken: PromiseOrValue<boolean>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    shouldUpdatePrice(
      marketId: PromiseOrValue<BigNumberish>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    updatePrice(
      marketId: PromiseOrValue<BigNumberish>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getMarketSupportDexs(marketId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    setCalculateConfig(
      defaultFeesRate: PromiseOrValue<BigNumberish>,
      insuranceRatio: PromiseOrValue<BigNumberish>,
      defaultMarginLimit: PromiseOrValue<BigNumberish>,
      priceDiffientRatio: PromiseOrValue<BigNumberish>,
      updatePriceDiscount: PromiseOrValue<BigNumberish>,
      feesDiscount: PromiseOrValue<BigNumberish>,
      feesDiscountThreshold: PromiseOrValue<BigNumberish>,
      penaltyRatio: PromiseOrValue<BigNumberish>,
      maxLiquidationPriceDiffientRatio: PromiseOrValue<BigNumberish>,
      twapDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setAddressConfig(
      controller: PromiseOrValue<string>,
      dexAggregator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMarketConfig(
      marketId: PromiseOrValue<BigNumberish>,
      feesRate: PromiseOrValue<BigNumberish>,
      marginLimit: PromiseOrValue<BigNumberish>,
      priceDiffientRatio: PromiseOrValue<BigNumberish>,
      dexs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    moveInsurance(
      marketId: PromiseOrValue<BigNumberish>,
      poolIndex: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSupportDex(
      dex: PromiseOrValue<BigNumberish>,
      support: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTaxRate(
      marketId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      tax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptAdmin(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    activeTrades(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    addressConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowedDepositTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    developer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    markets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numPairs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPendingAdmin(
      newPendingAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    supportDexs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taxes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    totalHelds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _controller: PromiseOrValue<string>,
      _dexAggregator: PromiseOrValue<string>,
      depositTokens: PromiseOrValue<string>[],
      _wETH: PromiseOrValue<string>,
      _xOLE: PromiseOrValue<string>,
      _supportDexs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addMarket(
      pool0: PromiseOrValue<string>,
      pool1: PromiseOrValue<string>,
      marginLimit: PromiseOrValue<BigNumberish>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    marginTrade(
      marketId: PromiseOrValue<BigNumberish>,
      longToken: PromiseOrValue<boolean>,
      depositToken: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<BigNumberish>,
      borrow: PromiseOrValue<BigNumberish>,
      minBuyAmount: PromiseOrValue<BigNumberish>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    closeTrade(
      marketId: PromiseOrValue<BigNumberish>,
      longToken: PromiseOrValue<boolean>,
      closeHeld: PromiseOrValue<BigNumberish>,
      minOrMaxAmount: PromiseOrValue<BigNumberish>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    liquidate(
      owner: PromiseOrValue<string>,
      marketId: PromiseOrValue<BigNumberish>,
      longToken: PromiseOrValue<boolean>,
      minBuy: PromiseOrValue<BigNumberish>,
      maxSell: PromiseOrValue<BigNumberish>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    marginRatio(
      owner: PromiseOrValue<string>,
      marketId: PromiseOrValue<BigNumberish>,
      longToken: PromiseOrValue<boolean>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    shouldUpdatePrice(
      marketId: PromiseOrValue<BigNumberish>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    updatePrice(
      marketId: PromiseOrValue<BigNumberish>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getMarketSupportDexs(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    setCalculateConfig(
      defaultFeesRate: PromiseOrValue<BigNumberish>,
      insuranceRatio: PromiseOrValue<BigNumberish>,
      defaultMarginLimit: PromiseOrValue<BigNumberish>,
      priceDiffientRatio: PromiseOrValue<BigNumberish>,
      updatePriceDiscount: PromiseOrValue<BigNumberish>,
      feesDiscount: PromiseOrValue<BigNumberish>,
      feesDiscountThreshold: PromiseOrValue<BigNumberish>,
      penaltyRatio: PromiseOrValue<BigNumberish>,
      maxLiquidationPriceDiffientRatio: PromiseOrValue<BigNumberish>,
      twapDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setAddressConfig(
      controller: PromiseOrValue<string>,
      dexAggregator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMarketConfig(
      marketId: PromiseOrValue<BigNumberish>,
      feesRate: PromiseOrValue<BigNumberish>,
      marginLimit: PromiseOrValue<BigNumberish>,
      priceDiffientRatio: PromiseOrValue<BigNumberish>,
      dexs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    moveInsurance(
      marketId: PromiseOrValue<BigNumberish>,
      poolIndex: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSupportDex(
      dex: PromiseOrValue<BigNumberish>,
      support: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTaxRate(
      marketId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      tax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
