/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface LooksRareCompounderInterface extends utils.Interface {
  functions: {
    'MAXIMUM_HARVEST_BUFFER_BLOCKS()': FunctionFragment;
    'MINIMUM_DEPOSIT_LOOKS()': FunctionFragment;
    'calculateSharePriceInLOOKS()': FunctionFragment;
    'calculateSharePriceInPrimeShare()': FunctionFragment;
    'calculateSharesValueInLOOKS(address)': FunctionFragment;
    'canHarvest()': FunctionFragment;
    'checkAndAdjustLOOKSTokenAllowanceIfRequired()': FunctionFragment;
    'checkAndAdjustRewardTokenAllowanceIfRequired()': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'feeSharingSystem()': FunctionFragment;
    'harvestAndSellAndCompound()': FunctionFragment;
    'harvestBufferBlocks()': FunctionFragment;
    'lastHarvestBlock()': FunctionFragment;
    'looksRareToken()': FunctionFragment;
    'maxPriceLOOKSInWETH()': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardToken()': FunctionFragment;
    'startHarvest()': FunctionFragment;
    'stopHarvest()': FunctionFragment;
    'thresholdAmount()': FunctionFragment;
    'totalShares()': FunctionFragment;
    'tradingFeeUniswapV3()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'uniswapRouter()': FunctionFragment;
    'unpause()': FunctionFragment;
    'updateHarvestBufferBlocks(uint256)': FunctionFragment;
    'updateMaxPriceOfLOOKSInWETH(uint256)': FunctionFragment;
    'updateThresholdAmount(uint256)': FunctionFragment;
    'updateTradingFeeUniswapV3(uint24)': FunctionFragment;
    'userInfo(address)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdrawAll()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'MAXIMUM_HARVEST_BUFFER_BLOCKS'
      | 'MINIMUM_DEPOSIT_LOOKS'
      | 'calculateSharePriceInLOOKS'
      | 'calculateSharePriceInPrimeShare'
      | 'calculateSharesValueInLOOKS'
      | 'canHarvest'
      | 'checkAndAdjustLOOKSTokenAllowanceIfRequired'
      | 'checkAndAdjustRewardTokenAllowanceIfRequired'
      | 'deposit'
      | 'feeSharingSystem'
      | 'harvestAndSellAndCompound'
      | 'harvestBufferBlocks'
      | 'lastHarvestBlock'
      | 'looksRareToken'
      | 'maxPriceLOOKSInWETH'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'renounceOwnership'
      | 'rewardToken'
      | 'startHarvest'
      | 'stopHarvest'
      | 'thresholdAmount'
      | 'totalShares'
      | 'tradingFeeUniswapV3'
      | 'transferOwnership'
      | 'uniswapRouter'
      | 'unpause'
      | 'updateHarvestBufferBlocks'
      | 'updateMaxPriceOfLOOKSInWETH'
      | 'updateThresholdAmount'
      | 'updateTradingFeeUniswapV3'
      | 'userInfo'
      | 'withdraw'
      | 'withdrawAll',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'MAXIMUM_HARVEST_BUFFER_BLOCKS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MINIMUM_DEPOSIT_LOOKS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'calculateSharePriceInLOOKS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'calculateSharePriceInPrimeShare', values?: undefined): string;
  encodeFunctionData(functionFragment: 'calculateSharesValueInLOOKS', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'canHarvest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'checkAndAdjustLOOKSTokenAllowanceIfRequired', values?: undefined): string;
  encodeFunctionData(functionFragment: 'checkAndAdjustRewardTokenAllowanceIfRequired', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'feeSharingSystem', values?: undefined): string;
  encodeFunctionData(functionFragment: 'harvestAndSellAndCompound', values?: undefined): string;
  encodeFunctionData(functionFragment: 'harvestBufferBlocks', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastHarvestBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'looksRareToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxPriceLOOKSInWETH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'startHarvest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stopHarvest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'thresholdAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalShares', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tradingFeeUniswapV3', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'uniswapRouter', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateHarvestBufferBlocks', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateMaxPriceOfLOOKSInWETH', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateThresholdAmount', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateTradingFeeUniswapV3', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'userInfo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'withdrawAll', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'MAXIMUM_HARVEST_BUFFER_BLOCKS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MINIMUM_DEPOSIT_LOOKS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateSharePriceInLOOKS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateSharePriceInPrimeShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateSharesValueInLOOKS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'canHarvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkAndAdjustLOOKSTokenAllowanceIfRequired', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkAndAdjustRewardTokenAllowanceIfRequired', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeSharingSystem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvestAndSellAndCompound', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvestBufferBlocks', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastHarvestBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'looksRareToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxPriceLOOKSInWETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startHarvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stopHarvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'thresholdAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tradingFeeUniswapV3', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'uniswapRouter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateHarvestBufferBlocks', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMaxPriceOfLOOKSInWETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateThresholdAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateTradingFeeUniswapV3', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAll', data: BytesLike): Result;

  events: {
    'ConversionToLOOKS(uint256,uint256)': EventFragment;
    'Deposit(address,uint256)': EventFragment;
    'FailedConversion()': EventFragment;
    'HarvestStart()': EventFragment;
    'HarvestStop()': EventFragment;
    'NewHarvestBufferBlocks(uint256)': EventFragment;
    'NewMaximumPriceLOOKSInWETH(uint256)': EventFragment;
    'NewThresholdAmount(uint256)': EventFragment;
    'NewTradingFeeUniswapV3(uint24)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'Unpaused(address)': EventFragment;
    'Withdraw(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ConversionToLOOKS'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FailedConversion'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'HarvestStart'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'HarvestStop'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewHarvestBufferBlocks'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewMaximumPriceLOOKSInWETH'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewThresholdAmount'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewTradingFeeUniswapV3'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface ConversionToLOOKSEventObject {
  amountSold: BigNumber;
  amountReceived: BigNumber;
}
export type ConversionToLOOKSEvent = TypedEvent<[BigNumber, BigNumber], ConversionToLOOKSEventObject>;

export type ConversionToLOOKSEventFilter = TypedEventFilter<ConversionToLOOKSEvent>;

export interface DepositEventObject {
  user: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface FailedConversionEventObject {}
export type FailedConversionEvent = TypedEvent<[], FailedConversionEventObject>;

export type FailedConversionEventFilter = TypedEventFilter<FailedConversionEvent>;

export interface HarvestStartEventObject {}
export type HarvestStartEvent = TypedEvent<[], HarvestStartEventObject>;

export type HarvestStartEventFilter = TypedEventFilter<HarvestStartEvent>;

export interface HarvestStopEventObject {}
export type HarvestStopEvent = TypedEvent<[], HarvestStopEventObject>;

export type HarvestStopEventFilter = TypedEventFilter<HarvestStopEvent>;

export interface NewHarvestBufferBlocksEventObject {
  harvestBufferBlocks: BigNumber;
}
export type NewHarvestBufferBlocksEvent = TypedEvent<[BigNumber], NewHarvestBufferBlocksEventObject>;

export type NewHarvestBufferBlocksEventFilter = TypedEventFilter<NewHarvestBufferBlocksEvent>;

export interface NewMaximumPriceLOOKSInWETHEventObject {
  maxPriceLOOKSInWETH: BigNumber;
}
export type NewMaximumPriceLOOKSInWETHEvent = TypedEvent<[BigNumber], NewMaximumPriceLOOKSInWETHEventObject>;

export type NewMaximumPriceLOOKSInWETHEventFilter = TypedEventFilter<NewMaximumPriceLOOKSInWETHEvent>;

export interface NewThresholdAmountEventObject {
  thresholdAmount: BigNumber;
}
export type NewThresholdAmountEvent = TypedEvent<[BigNumber], NewThresholdAmountEventObject>;

export type NewThresholdAmountEventFilter = TypedEventFilter<NewThresholdAmountEvent>;

export interface NewTradingFeeUniswapV3EventObject {
  tradingFeeUniswapV3: number;
}
export type NewTradingFeeUniswapV3Event = TypedEvent<[number], NewTradingFeeUniswapV3EventObject>;

export type NewTradingFeeUniswapV3EventFilter = TypedEventFilter<NewTradingFeeUniswapV3Event>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawEventObject {
  user: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface LooksRareCompounder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LooksRareCompounderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAXIMUM_HARVEST_BUFFER_BLOCKS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINIMUM_DEPOSIT_LOOKS(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateSharePriceInLOOKS(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateSharePriceInPrimeShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateSharesValueInLOOKS(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    canHarvest(overrides?: CallOverrides): Promise<[boolean]>;

    checkAndAdjustLOOKSTokenAllowanceIfRequired(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    checkAndAdjustRewardTokenAllowanceIfRequired(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    feeSharingSystem(overrides?: CallOverrides): Promise<[string]>;

    harvestAndSellAndCompound(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    harvestBufferBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastHarvestBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    looksRareToken(overrides?: CallOverrides): Promise<[string]>;

    maxPriceLOOKSInWETH(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    startHarvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    stopHarvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    thresholdAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradingFeeUniswapV3(overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    uniswapRouter(overrides?: CallOverrides): Promise<[string]>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    updateHarvestBufferBlocks(
      _newHarvestBufferBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateMaxPriceOfLOOKSInWETH(
      _newMaxPriceLOOKSInWETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateThresholdAmount(
      _newThresholdAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateTradingFeeUniswapV3(
      _newTradingFeeUniswapV3: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    userInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;
  };

  MAXIMUM_HARVEST_BUFFER_BLOCKS(overrides?: CallOverrides): Promise<BigNumber>;

  MINIMUM_DEPOSIT_LOOKS(overrides?: CallOverrides): Promise<BigNumber>;

  calculateSharePriceInLOOKS(overrides?: CallOverrides): Promise<BigNumber>;

  calculateSharePriceInPrimeShare(overrides?: CallOverrides): Promise<BigNumber>;

  calculateSharesValueInLOOKS(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  canHarvest(overrides?: CallOverrides): Promise<boolean>;

  checkAndAdjustLOOKSTokenAllowanceIfRequired(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  checkAndAdjustRewardTokenAllowanceIfRequired(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  feeSharingSystem(overrides?: CallOverrides): Promise<string>;

  harvestAndSellAndCompound(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  harvestBufferBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  lastHarvestBlock(overrides?: CallOverrides): Promise<BigNumber>;

  looksRareToken(overrides?: CallOverrides): Promise<string>;

  maxPriceLOOKSInWETH(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  startHarvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  stopHarvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  thresholdAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  tradingFeeUniswapV3(overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  uniswapRouter(overrides?: CallOverrides): Promise<string>;

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  updateHarvestBufferBlocks(
    _newHarvestBufferBlocks: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateMaxPriceOfLOOKSInWETH(
    _newMaxPriceLOOKSInWETH: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateThresholdAmount(
    _newThresholdAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateTradingFeeUniswapV3(
    _newTradingFeeUniswapV3: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  userInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    shares: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  callStatic: {
    MAXIMUM_HARVEST_BUFFER_BLOCKS(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_DEPOSIT_LOOKS(overrides?: CallOverrides): Promise<BigNumber>;

    calculateSharePriceInLOOKS(overrides?: CallOverrides): Promise<BigNumber>;

    calculateSharePriceInPrimeShare(overrides?: CallOverrides): Promise<BigNumber>;

    calculateSharesValueInLOOKS(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    canHarvest(overrides?: CallOverrides): Promise<boolean>;

    checkAndAdjustLOOKSTokenAllowanceIfRequired(overrides?: CallOverrides): Promise<void>;

    checkAndAdjustRewardTokenAllowanceIfRequired(overrides?: CallOverrides): Promise<void>;

    deposit(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    feeSharingSystem(overrides?: CallOverrides): Promise<string>;

    harvestAndSellAndCompound(overrides?: CallOverrides): Promise<void>;

    harvestBufferBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    lastHarvestBlock(overrides?: CallOverrides): Promise<BigNumber>;

    looksRareToken(overrides?: CallOverrides): Promise<string>;

    maxPriceLOOKSInWETH(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    startHarvest(overrides?: CallOverrides): Promise<void>;

    stopHarvest(overrides?: CallOverrides): Promise<void>;

    thresholdAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    tradingFeeUniswapV3(overrides?: CallOverrides): Promise<number>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    uniswapRouter(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateHarvestBufferBlocks(
      _newHarvestBufferBlocks: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateMaxPriceOfLOOKSInWETH(
      _newMaxPriceLOOKSInWETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateThresholdAmount(_newThresholdAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateTradingFeeUniswapV3(
      _newTradingFeeUniswapV3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    userInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'ConversionToLOOKS(uint256,uint256)'(amountSold?: null, amountReceived?: null): ConversionToLOOKSEventFilter;
    ConversionToLOOKS(amountSold?: null, amountReceived?: null): ConversionToLOOKSEventFilter;

    'Deposit(address,uint256)'(user?: PromiseOrValue<string> | null, amount?: null): DepositEventFilter;
    Deposit(user?: PromiseOrValue<string> | null, amount?: null): DepositEventFilter;

    'FailedConversion()'(): FailedConversionEventFilter;
    FailedConversion(): FailedConversionEventFilter;

    'HarvestStart()'(): HarvestStartEventFilter;
    HarvestStart(): HarvestStartEventFilter;

    'HarvestStop()'(): HarvestStopEventFilter;
    HarvestStop(): HarvestStopEventFilter;

    'NewHarvestBufferBlocks(uint256)'(harvestBufferBlocks?: null): NewHarvestBufferBlocksEventFilter;
    NewHarvestBufferBlocks(harvestBufferBlocks?: null): NewHarvestBufferBlocksEventFilter;

    'NewMaximumPriceLOOKSInWETH(uint256)'(maxPriceLOOKSInWETH?: null): NewMaximumPriceLOOKSInWETHEventFilter;
    NewMaximumPriceLOOKSInWETH(maxPriceLOOKSInWETH?: null): NewMaximumPriceLOOKSInWETHEventFilter;

    'NewThresholdAmount(uint256)'(thresholdAmount?: null): NewThresholdAmountEventFilter;
    NewThresholdAmount(thresholdAmount?: null): NewThresholdAmountEventFilter;

    'NewTradingFeeUniswapV3(uint24)'(tradingFeeUniswapV3?: null): NewTradingFeeUniswapV3EventFilter;
    NewTradingFeeUniswapV3(tradingFeeUniswapV3?: null): NewTradingFeeUniswapV3EventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'Withdraw(address,uint256)'(user?: PromiseOrValue<string> | null, amount?: null): WithdrawEventFilter;
    Withdraw(user?: PromiseOrValue<string> | null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    MAXIMUM_HARVEST_BUFFER_BLOCKS(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_DEPOSIT_LOOKS(overrides?: CallOverrides): Promise<BigNumber>;

    calculateSharePriceInLOOKS(overrides?: CallOverrides): Promise<BigNumber>;

    calculateSharePriceInPrimeShare(overrides?: CallOverrides): Promise<BigNumber>;

    calculateSharesValueInLOOKS(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    canHarvest(overrides?: CallOverrides): Promise<BigNumber>;

    checkAndAdjustLOOKSTokenAllowanceIfRequired(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    checkAndAdjustRewardTokenAllowanceIfRequired(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    feeSharingSystem(overrides?: CallOverrides): Promise<BigNumber>;

    harvestAndSellAndCompound(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    harvestBufferBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    lastHarvestBlock(overrides?: CallOverrides): Promise<BigNumber>;

    looksRareToken(overrides?: CallOverrides): Promise<BigNumber>;

    maxPriceLOOKSInWETH(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    startHarvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    stopHarvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    thresholdAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    tradingFeeUniswapV3(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    uniswapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    updateHarvestBufferBlocks(
      _newHarvestBufferBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateMaxPriceOfLOOKSInWETH(
      _newMaxPriceLOOKSInWETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateThresholdAmount(
      _newThresholdAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateTradingFeeUniswapV3(
      _newTradingFeeUniswapV3: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    userInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    MAXIMUM_HARVEST_BUFFER_BLOCKS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINIMUM_DEPOSIT_LOOKS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateSharePriceInLOOKS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateSharePriceInPrimeShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateSharesValueInLOOKS(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canHarvest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkAndAdjustLOOKSTokenAllowanceIfRequired(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    checkAndAdjustRewardTokenAllowanceIfRequired(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    feeSharingSystem(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestAndSellAndCompound(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    harvestBufferBlocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastHarvestBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    looksRareToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxPriceLOOKSInWETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startHarvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    stopHarvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    thresholdAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingFeeUniswapV3(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    uniswapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    updateHarvestBufferBlocks(
      _newHarvestBufferBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateMaxPriceOfLOOKSInWETH(
      _newMaxPriceLOOKSInWETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateThresholdAmount(
      _newThresholdAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateTradingFeeUniswapV3(
      _newTradingFeeUniswapV3: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    userInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;
  };
}
