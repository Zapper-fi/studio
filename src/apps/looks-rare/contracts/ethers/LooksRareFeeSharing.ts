/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface LooksRareFeeSharingInterface extends utils.Interface {
  functions: {
    'PRECISION_FACTOR()': FunctionFragment;
    'calculatePendingRewards(address)': FunctionFragment;
    'calculateSharePriceInLOOKS()': FunctionFragment;
    'calculateSharesValueInLOOKS(address)': FunctionFragment;
    'currentRewardPerBlock()': FunctionFragment;
    'deposit(uint256,bool)': FunctionFragment;
    'harvest()': FunctionFragment;
    'lastRewardAdjustment()': FunctionFragment;
    'lastRewardBlock()': FunctionFragment;
    'lastUpdateBlock()': FunctionFragment;
    'looksRareToken()': FunctionFragment;
    'owner()': FunctionFragment;
    'periodEndBlock()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardPerTokenStored()': FunctionFragment;
    'rewardToken()': FunctionFragment;
    'tokenDistributor()': FunctionFragment;
    'totalShares()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateRewards(uint256,uint256)': FunctionFragment;
    'userInfo(address)': FunctionFragment;
    'withdraw(uint256,bool)': FunctionFragment;
    'withdrawAll(bool)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'PRECISION_FACTOR'
      | 'calculatePendingRewards'
      | 'calculateSharePriceInLOOKS'
      | 'calculateSharesValueInLOOKS'
      | 'currentRewardPerBlock'
      | 'deposit'
      | 'harvest'
      | 'lastRewardAdjustment'
      | 'lastRewardBlock'
      | 'lastUpdateBlock'
      | 'looksRareToken'
      | 'owner'
      | 'periodEndBlock'
      | 'renounceOwnership'
      | 'rewardPerTokenStored'
      | 'rewardToken'
      | 'tokenDistributor'
      | 'totalShares'
      | 'transferOwnership'
      | 'updateRewards'
      | 'userInfo'
      | 'withdraw'
      | 'withdrawAll',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'PRECISION_FACTOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'calculatePendingRewards', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'calculateSharePriceInLOOKS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'calculateSharesValueInLOOKS', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'currentRewardPerBlock', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'harvest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastRewardAdjustment', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastRewardBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastUpdateBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'looksRareToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'periodEndBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardPerTokenStored', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenDistributor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalShares', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'updateRewards',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'userInfo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'withdrawAll', values: [PromiseOrValue<boolean>]): string;

  decodeFunctionResult(functionFragment: 'PRECISION_FACTOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculatePendingRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateSharePriceInLOOKS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateSharesValueInLOOKS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentRewardPerBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastRewardAdjustment', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastRewardBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastUpdateBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'looksRareToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'periodEndBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardPerTokenStored', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenDistributor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAll', data: BytesLike): Result;

  events: {
    'Deposit(address,uint256,uint256)': EventFragment;
    'Harvest(address,uint256)': EventFragment;
    'NewRewardPeriod(uint256,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Withdraw(address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Harvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewRewardPeriod'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface DepositEventObject {
  user: string;
  amount: BigNumber;
  harvestedAmount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface HarvestEventObject {
  user: string;
  harvestedAmount: BigNumber;
}
export type HarvestEvent = TypedEvent<[string, BigNumber], HarvestEventObject>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export interface NewRewardPeriodEventObject {
  numberBlocks: BigNumber;
  rewardPerBlock: BigNumber;
  reward: BigNumber;
}
export type NewRewardPeriodEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], NewRewardPeriodEventObject>;

export type NewRewardPeriodEventFilter = TypedEventFilter<NewRewardPeriodEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface WithdrawEventObject {
  user: string;
  amount: BigNumber;
  harvestedAmount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface LooksRareFeeSharing extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LooksRareFeeSharingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PRECISION_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculatePendingRewards(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateSharePriceInLOOKS(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateSharesValueInLOOKS(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    currentRewardPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      claimRewardToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    harvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    lastRewardAdjustment(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastRewardBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdateBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    looksRareToken(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    periodEndBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    tokenDistributor(overrides?: CallOverrides): Promise<[string]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateRewards(
      reward: PromiseOrValue<BigNumberish>,
      rewardDurationInBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        shares: BigNumber;
        userRewardPerTokenPaid: BigNumber;
        rewards: BigNumber;
      }
    >;

    withdraw(
      shares: PromiseOrValue<BigNumberish>,
      claimRewardToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawAll(
      claimRewardToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  PRECISION_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  calculatePendingRewards(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  calculateSharePriceInLOOKS(overrides?: CallOverrides): Promise<BigNumber>;

  calculateSharesValueInLOOKS(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  currentRewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    claimRewardToken: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  harvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  lastRewardAdjustment(overrides?: CallOverrides): Promise<BigNumber>;

  lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdateBlock(overrides?: CallOverrides): Promise<BigNumber>;

  looksRareToken(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  periodEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  tokenDistributor(overrides?: CallOverrides): Promise<string>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateRewards(
    reward: PromiseOrValue<BigNumberish>,
    rewardDurationInBlocks: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      shares: BigNumber;
      userRewardPerTokenPaid: BigNumber;
      rewards: BigNumber;
    }
  >;

  withdraw(
    shares: PromiseOrValue<BigNumberish>,
    claimRewardToken: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawAll(
    claimRewardToken: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    PRECISION_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePendingRewards(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    calculateSharePriceInLOOKS(overrides?: CallOverrides): Promise<BigNumber>;

    calculateSharesValueInLOOKS(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    currentRewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      claimRewardToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    harvest(overrides?: CallOverrides): Promise<void>;

    lastRewardAdjustment(overrides?: CallOverrides): Promise<BigNumber>;

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateBlock(overrides?: CallOverrides): Promise<BigNumber>;

    looksRareToken(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    periodEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    tokenDistributor(overrides?: CallOverrides): Promise<string>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateRewards(
      reward: PromiseOrValue<BigNumberish>,
      rewardDurationInBlocks: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        shares: BigNumber;
        userRewardPerTokenPaid: BigNumber;
        rewards: BigNumber;
      }
    >;

    withdraw(
      shares: PromiseOrValue<BigNumberish>,
      claimRewardToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawAll(claimRewardToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Deposit(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      harvestedAmount?: null,
    ): DepositEventFilter;
    Deposit(user?: PromiseOrValue<string> | null, amount?: null, harvestedAmount?: null): DepositEventFilter;

    'Harvest(address,uint256)'(user?: PromiseOrValue<string> | null, harvestedAmount?: null): HarvestEventFilter;
    Harvest(user?: PromiseOrValue<string> | null, harvestedAmount?: null): HarvestEventFilter;

    'NewRewardPeriod(uint256,uint256,uint256)'(
      numberBlocks?: null,
      rewardPerBlock?: null,
      reward?: null,
    ): NewRewardPeriodEventFilter;
    NewRewardPeriod(numberBlocks?: null, rewardPerBlock?: null, reward?: null): NewRewardPeriodEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'Withdraw(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      harvestedAmount?: null,
    ): WithdrawEventFilter;
    Withdraw(user?: PromiseOrValue<string> | null, amount?: null, harvestedAmount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    PRECISION_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePendingRewards(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    calculateSharePriceInLOOKS(overrides?: CallOverrides): Promise<BigNumber>;

    calculateSharesValueInLOOKS(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    currentRewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      claimRewardToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    harvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    lastRewardAdjustment(overrides?: CallOverrides): Promise<BigNumber>;

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateBlock(overrides?: CallOverrides): Promise<BigNumber>;

    looksRareToken(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    periodEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    tokenDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateRewards(
      reward: PromiseOrValue<BigNumberish>,
      rewardDurationInBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    userInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      shares: PromiseOrValue<BigNumberish>,
      claimRewardToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawAll(
      claimRewardToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PRECISION_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculatePendingRewards(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateSharePriceInLOOKS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateSharesValueInLOOKS(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentRewardPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      claimRewardToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    harvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    lastRewardAdjustment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRewardBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdateBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    looksRareToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodEndBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateRewards(
      reward: PromiseOrValue<BigNumberish>,
      rewardDurationInBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    userInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      shares: PromiseOrValue<BigNumberish>,
      claimRewardToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      claimRewardToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
