/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface VelaVaultInterface extends utils.Interface {
  functions: {
    'accountDeltaIntoTotalUSD(bool,uint256)': FunctionFragment;
    'addCollateral(uint256,uint256)': FunctionFragment;
    'addOrRemoveCollateralPacked(uint256)': FunctionFragment;
    'addPosition(uint256,uint256,uint256,uint256)': FunctionFragment;
    'addPositionPacked(uint256,uint256)': FunctionFragment;
    'addTPSL(uint256,bool[],uint256[],uint256[])': FunctionFragment;
    'addTPSLPacked(uint256,uint256[])': FunctionFragment;
    'addTrailingStop(uint256,uint256[])': FunctionFragment;
    'cancelPendingOrder(uint256)': FunctionFragment;
    'cancelPendingOrders(uint256[])': FunctionFragment;
    'decreasePosition(uint256,uint256,uint256)': FunctionFragment;
    'decreasePositionPacked(uint256,uint256)': FunctionFragment;
    'deposit(address,address,uint256)': FunctionFragment;
    'depositSelf(address,uint256)': FunctionFragment;
    'depositSelfAllUSDC()': FunctionFragment;
    'depositSelfUSDC(uint256)': FunctionFragment;
    'distributeFee(uint256,address)': FunctionFragment;
    'forceClosePosition(uint256)': FunctionFragment;
    'getVLPPrice()': FunctionFragment;
    'getVaultUSDBalance()': FunctionFragment;
    'initialize(address,address,address)': FunctionFragment;
    'lastStakedAt(address)': FunctionFragment;
    'newPositionOrder(uint256,bool,uint8,uint256[],address)': FunctionFragment;
    'newPositionOrderPacked(uint256,uint256,uint256)': FunctionFragment;
    'newPositionOrderWithTPSL(uint256,bool,uint8,uint256[],address,bool[],uint256[],uint256[])': FunctionFragment;
    'operators()': FunctionFragment;
    'removeCollateral(uint256,uint256)': FunctionFragment;
    'setUSDC(address)': FunctionFragment;
    'setVaultSettings(address,address,address,address,address)': FunctionFragment;
    'stake(address,address,uint256)': FunctionFragment;
    'stakeSelf(address,uint256)': FunctionFragment;
    'stakeSelfAllUSDC()': FunctionFragment;
    'stakeSelfUSDC(uint256)': FunctionFragment;
    'takeVUSDIn(address,uint256)': FunctionFragment;
    'takeVUSDOut(address,uint256)': FunctionFragment;
    'totalUSD()': FunctionFragment;
    'unstake(address,uint256)': FunctionFragment;
    'unstakeAllUSDC()': FunctionFragment;
    'unstakeUSDC(uint256)': FunctionFragment;
    'withdraw(address,uint256)': FunctionFragment;
    'withdrawAllUSDC()': FunctionFragment;
    'withdrawUSDC(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'accountDeltaIntoTotalUSD'
      | 'addCollateral'
      | 'addOrRemoveCollateralPacked'
      | 'addPosition'
      | 'addPositionPacked'
      | 'addTPSL'
      | 'addTPSLPacked'
      | 'addTrailingStop'
      | 'cancelPendingOrder'
      | 'cancelPendingOrders'
      | 'decreasePosition'
      | 'decreasePositionPacked'
      | 'deposit'
      | 'depositSelf'
      | 'depositSelfAllUSDC'
      | 'depositSelfUSDC'
      | 'distributeFee'
      | 'forceClosePosition'
      | 'getVLPPrice'
      | 'getVaultUSDBalance'
      | 'initialize'
      | 'lastStakedAt'
      | 'newPositionOrder'
      | 'newPositionOrderPacked'
      | 'newPositionOrderWithTPSL'
      | 'operators'
      | 'removeCollateral'
      | 'setUSDC'
      | 'setVaultSettings'
      | 'stake'
      | 'stakeSelf'
      | 'stakeSelfAllUSDC'
      | 'stakeSelfUSDC'
      | 'takeVUSDIn'
      | 'takeVUSDOut'
      | 'totalUSD'
      | 'unstake'
      | 'unstakeAllUSDC'
      | 'unstakeUSDC'
      | 'withdraw'
      | 'withdrawAllUSDC'
      | 'withdrawUSDC',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'accountDeltaIntoTotalUSD',
    values: [PromiseOrValue<boolean>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'addCollateral',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'addOrRemoveCollateralPacked', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'addPosition',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'addPositionPacked',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'addTPSL',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'addTPSLPacked',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'addTrailingStop',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(functionFragment: 'cancelPendingOrder', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'cancelPendingOrders', values: [PromiseOrValue<BigNumberish>[]]): string;
  encodeFunctionData(
    functionFragment: 'decreasePosition',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'decreasePositionPacked',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositSelf',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'depositSelfAllUSDC', values?: undefined): string;
  encodeFunctionData(functionFragment: 'depositSelfUSDC', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'distributeFee',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'forceClosePosition', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getVLPPrice', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getVaultUSDBalance', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'lastStakedAt', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'newPositionOrder',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'newPositionOrderPacked',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'newPositionOrderWithTPSL',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<boolean>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
    ],
  ): string;
  encodeFunctionData(functionFragment: 'operators', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'removeCollateral',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setUSDC', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setVaultSettings',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'stake',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'stakeSelf',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'stakeSelfAllUSDC', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stakeSelfUSDC', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'takeVUSDIn',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'takeVUSDOut',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'totalUSD', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'unstake',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'unstakeAllUSDC', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unstakeUSDC', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'withdrawAllUSDC', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawUSDC', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'accountDeltaIntoTotalUSD', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addOrRemoveCollateralPacked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addPositionPacked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addTPSL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addTPSLPacked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addTrailingStop', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancelPendingOrder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancelPendingOrders', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreasePosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreasePositionPacked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositSelf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositSelfAllUSDC', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositSelfUSDC', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distributeFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'forceClosePosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVLPPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVaultUSDBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastStakedAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'newPositionOrder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'newPositionOrderPacked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'newPositionOrderWithTPSL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'operators', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUSDC', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setVaultSettings', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeSelf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeSelfAllUSDC', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeSelfUSDC', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'takeVUSDIn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'takeVUSDOut', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalUSD', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstakeAllUSDC', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstakeUSDC', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAllUSDC', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawUSDC', data: BytesLike): Result;

  events: {
    'Deposit(address,address,uint256)': EventFragment;
    'ForceClose(uint256,address,uint256)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'Stake(address,address,uint256,uint256)': EventFragment;
    'Unstake(address,address,uint256,uint256)': EventFragment;
    'Withdraw(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ForceClose'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Stake'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unstake'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface DepositEventObject {
  account: string;
  token: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface ForceCloseEventObject {
  posId: BigNumber;
  account: string;
  exceededPnl: BigNumber;
}
export type ForceCloseEvent = TypedEvent<[BigNumber, string, BigNumber], ForceCloseEventObject>;

export type ForceCloseEventFilter = TypedEventFilter<ForceCloseEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface StakeEventObject {
  account: string;
  token: string;
  amount: BigNumber;
  mintAmount: BigNumber;
}
export type StakeEvent = TypedEvent<[string, string, BigNumber, BigNumber], StakeEventObject>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface UnstakeEventObject {
  account: string;
  token: string;
  vlpAmount: BigNumber;
  amountOut: BigNumber;
}
export type UnstakeEvent = TypedEvent<[string, string, BigNumber, BigNumber], UnstakeEventObject>;

export type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;

export interface WithdrawEventObject {
  account: string;
  token: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface VelaVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VelaVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountDeltaIntoTotalUSD(
      _isIncrease: PromiseOrValue<boolean>,
      _delta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addCollateral(
      _posId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addOrRemoveCollateralPacked(
      a: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addPosition(
      _posId: PromiseOrValue<BigNumberish>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _allowedPrice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addPositionPacked(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addTPSL(
      _posId: PromiseOrValue<BigNumberish>,
      _isTPs: PromiseOrValue<boolean>[],
      _prices: PromiseOrValue<BigNumberish>[],
      _amountPercents: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addTPSLPacked(
      a: PromiseOrValue<BigNumberish>,
      _tps: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addTrailingStop(
      _posId: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    cancelPendingOrder(
      _posId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    cancelPendingOrders(
      _posIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    decreasePosition(
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _allowedPrice: PromiseOrValue<BigNumberish>,
      _posId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    decreasePositionPacked(
      a: PromiseOrValue<BigNumberish>,
      _posId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deposit(
      _account: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositSelf(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositSelfAllUSDC(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    depositSelfUSDC(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    distributeFee(
      _fee: PromiseOrValue<BigNumberish>,
      _refer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    forceClosePosition(
      _posId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getVLPPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVaultUSDBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _operators: PromiseOrValue<string>,
      _vlp: PromiseOrValue<string>,
      _vusd: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    lastStakedAt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    newPositionOrder(
      _tokenId: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _orderType: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BigNumberish>[],
      _refer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    newPositionOrderPacked(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      c: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    newPositionOrderWithTPSL(
      _tokenId: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _orderType: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BigNumberish>[],
      _refer: PromiseOrValue<string>,
      _isTPs: PromiseOrValue<boolean>[],
      _prices: PromiseOrValue<BigNumberish>[],
      _amountPercents: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    operators(overrides?: CallOverrides): Promise<[string]>;

    removeCollateral(
      _posId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setUSDC(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setVaultSettings(
      _priceManager: PromiseOrValue<string>,
      _settingsManager: PromiseOrValue<string>,
      _positionVault: PromiseOrValue<string>,
      _orderVault: PromiseOrValue<string>,
      _liquidateVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stake(
      _account: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stakeSelf(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stakeSelfAllUSDC(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    stakeSelfUSDC(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    takeVUSDIn(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    takeVUSDOut(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    totalUSD(overrides?: CallOverrides): Promise<[BigNumber]>;

    unstake(
      _tokenOut: PromiseOrValue<string>,
      _vlpAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unstakeAllUSDC(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    unstakeUSDC(
      _vlpAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawAllUSDC(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    withdrawUSDC(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  accountDeltaIntoTotalUSD(
    _isIncrease: PromiseOrValue<boolean>,
    _delta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addCollateral(
    _posId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addOrRemoveCollateralPacked(
    a: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addPosition(
    _posId: PromiseOrValue<BigNumberish>,
    _collateralDelta: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _allowedPrice: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addPositionPacked(
    a: PromiseOrValue<BigNumberish>,
    b: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addTPSL(
    _posId: PromiseOrValue<BigNumberish>,
    _isTPs: PromiseOrValue<boolean>[],
    _prices: PromiseOrValue<BigNumberish>[],
    _amountPercents: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addTPSLPacked(
    a: PromiseOrValue<BigNumberish>,
    _tps: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addTrailingStop(
    _posId: PromiseOrValue<BigNumberish>,
    _params: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  cancelPendingOrder(
    _posId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  cancelPendingOrders(
    _posIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  decreasePosition(
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _allowedPrice: PromiseOrValue<BigNumberish>,
    _posId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  decreasePositionPacked(
    a: PromiseOrValue<BigNumberish>,
    _posId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deposit(
    _account: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositSelf(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositSelfAllUSDC(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  depositSelfUSDC(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  distributeFee(
    _fee: PromiseOrValue<BigNumberish>,
    _refer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  forceClosePosition(
    _posId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getVLPPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getVaultUSDBalance(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _operators: PromiseOrValue<string>,
    _vlp: PromiseOrValue<string>,
    _vusd: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  lastStakedAt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  newPositionOrder(
    _tokenId: PromiseOrValue<BigNumberish>,
    _isLong: PromiseOrValue<boolean>,
    _orderType: PromiseOrValue<BigNumberish>,
    _params: PromiseOrValue<BigNumberish>[],
    _refer: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  newPositionOrderPacked(
    a: PromiseOrValue<BigNumberish>,
    b: PromiseOrValue<BigNumberish>,
    c: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  newPositionOrderWithTPSL(
    _tokenId: PromiseOrValue<BigNumberish>,
    _isLong: PromiseOrValue<boolean>,
    _orderType: PromiseOrValue<BigNumberish>,
    _params: PromiseOrValue<BigNumberish>[],
    _refer: PromiseOrValue<string>,
    _isTPs: PromiseOrValue<boolean>[],
    _prices: PromiseOrValue<BigNumberish>[],
    _amountPercents: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  operators(overrides?: CallOverrides): Promise<string>;

  removeCollateral(
    _posId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setUSDC(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setVaultSettings(
    _priceManager: PromiseOrValue<string>,
    _settingsManager: PromiseOrValue<string>,
    _positionVault: PromiseOrValue<string>,
    _orderVault: PromiseOrValue<string>,
    _liquidateVault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stake(
    _account: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stakeSelf(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stakeSelfAllUSDC(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  stakeSelfUSDC(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  takeVUSDIn(
    _account: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  takeVUSDOut(
    _account: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  totalUSD(overrides?: CallOverrides): Promise<BigNumber>;

  unstake(
    _tokenOut: PromiseOrValue<string>,
    _vlpAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unstakeAllUSDC(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  unstakeUSDC(
    _vlpAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawAllUSDC(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  withdrawUSDC(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    accountDeltaIntoTotalUSD(
      _isIncrease: PromiseOrValue<boolean>,
      _delta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    addCollateral(
      _posId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    addOrRemoveCollateralPacked(a: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    addPosition(
      _posId: PromiseOrValue<BigNumberish>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _allowedPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    addPositionPacked(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    addTPSL(
      _posId: PromiseOrValue<BigNumberish>,
      _isTPs: PromiseOrValue<boolean>[],
      _prices: PromiseOrValue<BigNumberish>[],
      _amountPercents: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    addTPSLPacked(
      a: PromiseOrValue<BigNumberish>,
      _tps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    addTrailingStop(
      _posId: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    cancelPendingOrder(_posId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    cancelPendingOrders(_posIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;

    decreasePosition(
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _allowedPrice: PromiseOrValue<BigNumberish>,
      _posId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    decreasePositionPacked(
      a: PromiseOrValue<BigNumberish>,
      _posId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    deposit(
      _account: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositSelf(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositSelfAllUSDC(overrides?: CallOverrides): Promise<void>;

    depositSelfUSDC(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    distributeFee(
      _fee: PromiseOrValue<BigNumberish>,
      _refer: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    forceClosePosition(_posId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    getVLPPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultUSDBalance(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _operators: PromiseOrValue<string>,
      _vlp: PromiseOrValue<string>,
      _vusd: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    lastStakedAt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    newPositionOrder(
      _tokenId: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _orderType: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BigNumberish>[],
      _refer: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    newPositionOrderPacked(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      c: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    newPositionOrderWithTPSL(
      _tokenId: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _orderType: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BigNumberish>[],
      _refer: PromiseOrValue<string>,
      _isTPs: PromiseOrValue<boolean>[],
      _prices: PromiseOrValue<BigNumberish>[],
      _amountPercents: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    operators(overrides?: CallOverrides): Promise<string>;

    removeCollateral(
      _posId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setUSDC(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setVaultSettings(
      _priceManager: PromiseOrValue<string>,
      _settingsManager: PromiseOrValue<string>,
      _positionVault: PromiseOrValue<string>,
      _orderVault: PromiseOrValue<string>,
      _liquidateVault: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    stake(
      _account: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    stakeSelf(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    stakeSelfAllUSDC(overrides?: CallOverrides): Promise<void>;

    stakeSelfUSDC(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    takeVUSDIn(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    takeVUSDOut(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    totalUSD(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      _tokenOut: PromiseOrValue<string>,
      _vlpAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    unstakeAllUSDC(overrides?: CallOverrides): Promise<void>;

    unstakeUSDC(_vlpAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    withdraw(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawAllUSDC(overrides?: CallOverrides): Promise<void>;

    withdrawUSDC(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Deposit(address,address,uint256)'(
      account?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
    ): DepositEventFilter;
    Deposit(
      account?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
    ): DepositEventFilter;

    'ForceClose(uint256,address,uint256)'(
      posId?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      exceededPnl?: null,
    ): ForceCloseEventFilter;
    ForceClose(
      posId?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      exceededPnl?: null,
    ): ForceCloseEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'Stake(address,address,uint256,uint256)'(
      account?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null,
      mintAmount?: null,
    ): StakeEventFilter;
    Stake(account?: PromiseOrValue<string> | null, token?: null, amount?: null, mintAmount?: null): StakeEventFilter;

    'Unstake(address,address,uint256,uint256)'(
      account?: PromiseOrValue<string> | null,
      token?: null,
      vlpAmount?: null,
      amountOut?: null,
    ): UnstakeEventFilter;
    Unstake(
      account?: PromiseOrValue<string> | null,
      token?: null,
      vlpAmount?: null,
      amountOut?: null,
    ): UnstakeEventFilter;

    'Withdraw(address,address,uint256)'(
      account?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
    ): WithdrawEventFilter;
    Withdraw(
      account?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
    ): WithdrawEventFilter;
  };

  estimateGas: {
    accountDeltaIntoTotalUSD(
      _isIncrease: PromiseOrValue<boolean>,
      _delta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addCollateral(
      _posId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addOrRemoveCollateralPacked(
      a: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addPosition(
      _posId: PromiseOrValue<BigNumberish>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _allowedPrice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addPositionPacked(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addTPSL(
      _posId: PromiseOrValue<BigNumberish>,
      _isTPs: PromiseOrValue<boolean>[],
      _prices: PromiseOrValue<BigNumberish>[],
      _amountPercents: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addTPSLPacked(
      a: PromiseOrValue<BigNumberish>,
      _tps: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addTrailingStop(
      _posId: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    cancelPendingOrder(
      _posId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    cancelPendingOrders(
      _posIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    decreasePosition(
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _allowedPrice: PromiseOrValue<BigNumberish>,
      _posId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    decreasePositionPacked(
      a: PromiseOrValue<BigNumberish>,
      _posId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deposit(
      _account: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositSelf(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositSelfAllUSDC(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    depositSelfUSDC(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    distributeFee(
      _fee: PromiseOrValue<BigNumberish>,
      _refer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    forceClosePosition(
      _posId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getVLPPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultUSDBalance(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _operators: PromiseOrValue<string>,
      _vlp: PromiseOrValue<string>,
      _vusd: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    lastStakedAt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    newPositionOrder(
      _tokenId: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _orderType: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BigNumberish>[],
      _refer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    newPositionOrderPacked(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      c: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    newPositionOrderWithTPSL(
      _tokenId: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _orderType: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BigNumberish>[],
      _refer: PromiseOrValue<string>,
      _isTPs: PromiseOrValue<boolean>[],
      _prices: PromiseOrValue<BigNumberish>[],
      _amountPercents: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    operators(overrides?: CallOverrides): Promise<BigNumber>;

    removeCollateral(
      _posId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setUSDC(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setVaultSettings(
      _priceManager: PromiseOrValue<string>,
      _settingsManager: PromiseOrValue<string>,
      _positionVault: PromiseOrValue<string>,
      _orderVault: PromiseOrValue<string>,
      _liquidateVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stake(
      _account: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stakeSelf(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stakeSelfAllUSDC(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    stakeSelfUSDC(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    takeVUSDIn(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    takeVUSDOut(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    totalUSD(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      _tokenOut: PromiseOrValue<string>,
      _vlpAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unstakeAllUSDC(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    unstakeUSDC(
      _vlpAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdraw(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawAllUSDC(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    withdrawUSDC(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountDeltaIntoTotalUSD(
      _isIncrease: PromiseOrValue<boolean>,
      _delta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addCollateral(
      _posId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addOrRemoveCollateralPacked(
      a: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addPosition(
      _posId: PromiseOrValue<BigNumberish>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _allowedPrice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addPositionPacked(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addTPSL(
      _posId: PromiseOrValue<BigNumberish>,
      _isTPs: PromiseOrValue<boolean>[],
      _prices: PromiseOrValue<BigNumberish>[],
      _amountPercents: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addTPSLPacked(
      a: PromiseOrValue<BigNumberish>,
      _tps: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addTrailingStop(
      _posId: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    cancelPendingOrder(
      _posId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    cancelPendingOrders(
      _posIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    decreasePosition(
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _allowedPrice: PromiseOrValue<BigNumberish>,
      _posId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    decreasePositionPacked(
      a: PromiseOrValue<BigNumberish>,
      _posId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      _account: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositSelf(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositSelfAllUSDC(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    depositSelfUSDC(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    distributeFee(
      _fee: PromiseOrValue<BigNumberish>,
      _refer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    forceClosePosition(
      _posId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getVLPPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultUSDBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _operators: PromiseOrValue<string>,
      _vlp: PromiseOrValue<string>,
      _vusd: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    lastStakedAt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newPositionOrder(
      _tokenId: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _orderType: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BigNumberish>[],
      _refer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    newPositionOrderPacked(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      c: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    newPositionOrderWithTPSL(
      _tokenId: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _orderType: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BigNumberish>[],
      _refer: PromiseOrValue<string>,
      _isTPs: PromiseOrValue<boolean>[],
      _prices: PromiseOrValue<BigNumberish>[],
      _amountPercents: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    operators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeCollateral(
      _posId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setUSDC(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setVaultSettings(
      _priceManager: PromiseOrValue<string>,
      _settingsManager: PromiseOrValue<string>,
      _positionVault: PromiseOrValue<string>,
      _orderVault: PromiseOrValue<string>,
      _liquidateVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stake(
      _account: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stakeSelf(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stakeSelfAllUSDC(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    stakeSelfUSDC(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    takeVUSDIn(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    takeVUSDOut(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    totalUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstake(
      _tokenOut: PromiseOrValue<string>,
      _vlpAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unstakeAllUSDC(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    unstakeUSDC(
      _vlpAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawAllUSDC(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    withdrawUSDC(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
