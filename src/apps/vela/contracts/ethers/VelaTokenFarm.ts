/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface VelaTokenFarmInterface extends utils.Interface {
  functions: {
    'BASIS_POINTS_DIVISOR()': FunctionFragment;
    'DEFAULT_FUNDING_RATE_FACTOR()': FunctionFragment;
    'DEFAULT_MAX_OPEN_INTEREST()': FunctionFragment;
    'DEFAULT_VLP_PRICE()': FunctionFragment;
    'FUNDING_RATE_PRECISION()': FunctionFragment;
    'LIQUIDATE_FEE_EXCEED()': FunctionFragment;
    'LIQUIDATE_NONE_EXCEED()': FunctionFragment;
    'LIQUIDATE_THRESHOLD_EXCEED()': FunctionFragment;
    'MAX_COOLDOWN_DURATION()': FunctionFragment;
    'MAX_DELTA_TIME()': FunctionFragment;
    'MAX_DEPOSIT_FEE()': FunctionFragment;
    'MAX_FEE_BASIS_POINTS()': FunctionFragment;
    'MAX_FEE_REWARD_BASIS_POINTS()': FunctionFragment;
    'MAX_FUNDING_RATE_FACTOR()': FunctionFragment;
    'MAX_FUNDING_RATE_INTERVAL()': FunctionFragment;
    'MAX_LIQUIDATION_FEE_USD()': FunctionFragment;
    'MAX_STAKING_FEE()': FunctionFragment;
    'MAX_TOKENFARM_COOLDOWN_DURATION()': FunctionFragment;
    'MAX_TRIGGER_GAS_FEE()': FunctionFragment;
    'MAX_VESTING_DURATION()': FunctionFragment;
    'MIN_FEE_REWARD_BASIS_POINTS()': FunctionFragment;
    'MIN_FUNDING_RATE_INTERVAL()': FunctionFragment;
    'MIN_LEVERAGE()': FunctionFragment;
    'ORDER_FILLED()': FunctionFragment;
    'ORDER_NOT_FILLED()': FunctionFragment;
    'POSITION_LIMIT()': FunctionFragment;
    'POSITION_MARKET()': FunctionFragment;
    'POSITION_STOP_LIMIT()': FunctionFragment;
    'POSITION_STOP_MARKET()': FunctionFragment;
    'POSITION_TRAILING_STOP()': FunctionFragment;
    'PRICE_PRECISION()': FunctionFragment;
    'STAKING_PID_FOR_CHARGE_FEE()': FunctionFragment;
    'TRAILING_STOP_TYPE_AMOUNT()': FunctionFragment;
    'TRAILING_STOP_TYPE_PERCENT()': FunctionFragment;
    'VLP_DECIMALS()': FunctionFragment;
    'ZERO_ADDRESS()': FunctionFragment;
    'add(address,address[],bool)': FunctionFragment;
    'claimable(address)': FunctionFragment;
    'claimableToken()': FunctionFragment;
    'claimedAmounts(address)': FunctionFragment;
    'cooldownDuration()': FunctionFragment;
    'deposit(uint256,uint256)': FunctionFragment;
    'depositVesting(uint256)': FunctionFragment;
    'emergencyWithdraw(uint256)': FunctionFragment;
    'esToken()': FunctionFragment;
    'getTier(uint256,address)': FunctionFragment;
    'getTotalVested(address)': FunctionFragment;
    'getVestedAmount(address)': FunctionFragment;
    'harvestMany(uint256[])': FunctionFragment;
    'lastVestingUpdateTimes(address)': FunctionFragment;
    'lockedVestingAmounts(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingTokens(uint256,address)': FunctionFragment;
    'poolInfo(uint256)': FunctionFragment;
    'poolLength()': FunctionFragment;
    'poolRewarders(uint256)': FunctionFragment;
    'poolRewardsPerSec(uint256)': FunctionFragment;
    'poolTotalLp(uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'set(uint256,address[])': FunctionFragment;
    'tierLevels(uint256)': FunctionFragment;
    'tierPercents(uint256)': FunctionFragment;
    'totalLockedUpRewards()': FunctionFragment;
    'totalLockedVestingAmount()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unlockedVestingAmounts(address)': FunctionFragment;
    'updateCooldownDuration(uint256)': FunctionFragment;
    'updateRewardTierInfo(uint256[],uint256[])': FunctionFragment;
    'updateVestingDuration(uint256)': FunctionFragment;
    'userInfo(uint256,address)': FunctionFragment;
    'vestingDuration()': FunctionFragment;
    'withdraw(uint256,uint256)': FunctionFragment;
    'withdrawVesting()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BASIS_POINTS_DIVISOR'
      | 'DEFAULT_FUNDING_RATE_FACTOR'
      | 'DEFAULT_MAX_OPEN_INTEREST'
      | 'DEFAULT_VLP_PRICE'
      | 'FUNDING_RATE_PRECISION'
      | 'LIQUIDATE_FEE_EXCEED'
      | 'LIQUIDATE_NONE_EXCEED'
      | 'LIQUIDATE_THRESHOLD_EXCEED'
      | 'MAX_COOLDOWN_DURATION'
      | 'MAX_DELTA_TIME'
      | 'MAX_DEPOSIT_FEE'
      | 'MAX_FEE_BASIS_POINTS'
      | 'MAX_FEE_REWARD_BASIS_POINTS'
      | 'MAX_FUNDING_RATE_FACTOR'
      | 'MAX_FUNDING_RATE_INTERVAL'
      | 'MAX_LIQUIDATION_FEE_USD'
      | 'MAX_STAKING_FEE'
      | 'MAX_TOKENFARM_COOLDOWN_DURATION'
      | 'MAX_TRIGGER_GAS_FEE'
      | 'MAX_VESTING_DURATION'
      | 'MIN_FEE_REWARD_BASIS_POINTS'
      | 'MIN_FUNDING_RATE_INTERVAL'
      | 'MIN_LEVERAGE'
      | 'ORDER_FILLED'
      | 'ORDER_NOT_FILLED'
      | 'POSITION_LIMIT'
      | 'POSITION_MARKET'
      | 'POSITION_STOP_LIMIT'
      | 'POSITION_STOP_MARKET'
      | 'POSITION_TRAILING_STOP'
      | 'PRICE_PRECISION'
      | 'STAKING_PID_FOR_CHARGE_FEE'
      | 'TRAILING_STOP_TYPE_AMOUNT'
      | 'TRAILING_STOP_TYPE_PERCENT'
      | 'VLP_DECIMALS'
      | 'ZERO_ADDRESS'
      | 'add'
      | 'claimable'
      | 'claimableToken'
      | 'claimedAmounts'
      | 'cooldownDuration'
      | 'deposit'
      | 'depositVesting'
      | 'emergencyWithdraw'
      | 'esToken'
      | 'getTier'
      | 'getTotalVested'
      | 'getVestedAmount'
      | 'harvestMany'
      | 'lastVestingUpdateTimes'
      | 'lockedVestingAmounts'
      | 'owner'
      | 'pendingTokens'
      | 'poolInfo'
      | 'poolLength'
      | 'poolRewarders'
      | 'poolRewardsPerSec'
      | 'poolTotalLp'
      | 'renounceOwnership'
      | 'set'
      | 'tierLevels'
      | 'tierPercents'
      | 'totalLockedUpRewards'
      | 'totalLockedVestingAmount'
      | 'transferOwnership'
      | 'unlockedVestingAmounts'
      | 'updateCooldownDuration'
      | 'updateRewardTierInfo'
      | 'updateVestingDuration'
      | 'userInfo'
      | 'vestingDuration'
      | 'withdraw'
      | 'withdrawVesting',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BASIS_POINTS_DIVISOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DEFAULT_FUNDING_RATE_FACTOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DEFAULT_MAX_OPEN_INTEREST', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DEFAULT_VLP_PRICE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'FUNDING_RATE_PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'LIQUIDATE_FEE_EXCEED', values?: undefined): string;
  encodeFunctionData(functionFragment: 'LIQUIDATE_NONE_EXCEED', values?: undefined): string;
  encodeFunctionData(functionFragment: 'LIQUIDATE_THRESHOLD_EXCEED', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_COOLDOWN_DURATION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_DELTA_TIME', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_DEPOSIT_FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_FEE_BASIS_POINTS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_FEE_REWARD_BASIS_POINTS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_FUNDING_RATE_FACTOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_FUNDING_RATE_INTERVAL', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_LIQUIDATION_FEE_USD', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_STAKING_FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_TOKENFARM_COOLDOWN_DURATION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_TRIGGER_GAS_FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_VESTING_DURATION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MIN_FEE_REWARD_BASIS_POINTS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MIN_FUNDING_RATE_INTERVAL', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MIN_LEVERAGE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ORDER_FILLED', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ORDER_NOT_FILLED', values?: undefined): string;
  encodeFunctionData(functionFragment: 'POSITION_LIMIT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'POSITION_MARKET', values?: undefined): string;
  encodeFunctionData(functionFragment: 'POSITION_STOP_LIMIT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'POSITION_STOP_MARKET', values?: undefined): string;
  encodeFunctionData(functionFragment: 'POSITION_TRAILING_STOP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PRICE_PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'STAKING_PID_FOR_CHARGE_FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'TRAILING_STOP_TYPE_AMOUNT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'TRAILING_STOP_TYPE_PERCENT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'VLP_DECIMALS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ZERO_ADDRESS', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'add',
    values: [PromiseOrValue<string>, PromiseOrValue<string>[], PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'claimable', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'claimableToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimedAmounts', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'cooldownDuration', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'depositVesting', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'emergencyWithdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'esToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getTier',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getTotalVested', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getVestedAmount', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'harvestMany', values: [PromiseOrValue<BigNumberish>[]]): string;
  encodeFunctionData(functionFragment: 'lastVestingUpdateTimes', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lockedVestingAmounts', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'pendingTokens',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'poolInfo', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'poolLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolRewarders', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'poolRewardsPerSec', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'poolTotalLp', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'set', values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'tierLevels', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'tierPercents', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'totalLockedUpRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalLockedVestingAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'unlockedVestingAmounts', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateCooldownDuration', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'updateRewardTierInfo',
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(functionFragment: 'updateVestingDuration', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'userInfo',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'vestingDuration', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'withdrawVesting', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'BASIS_POINTS_DIVISOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEFAULT_FUNDING_RATE_FACTOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEFAULT_MAX_OPEN_INTEREST', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEFAULT_VLP_PRICE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'FUNDING_RATE_PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'LIQUIDATE_FEE_EXCEED', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'LIQUIDATE_NONE_EXCEED', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'LIQUIDATE_THRESHOLD_EXCEED', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_COOLDOWN_DURATION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_DELTA_TIME', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_DEPOSIT_FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_FEE_BASIS_POINTS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_FEE_REWARD_BASIS_POINTS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_FUNDING_RATE_FACTOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_FUNDING_RATE_INTERVAL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_LIQUIDATION_FEE_USD', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_STAKING_FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_TOKENFARM_COOLDOWN_DURATION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_TRIGGER_GAS_FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_VESTING_DURATION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MIN_FEE_REWARD_BASIS_POINTS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MIN_FUNDING_RATE_INTERVAL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MIN_LEVERAGE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ORDER_FILLED', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ORDER_NOT_FILLED', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'POSITION_LIMIT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'POSITION_MARKET', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'POSITION_STOP_LIMIT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'POSITION_STOP_MARKET', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'POSITION_TRAILING_STOP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PRICE_PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'STAKING_PID_FOR_CHARGE_FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'TRAILING_STOP_TYPE_AMOUNT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'TRAILING_STOP_TYPE_PERCENT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'VLP_DECIMALS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ZERO_ADDRESS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'add', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimableToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimedAmounts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cooldownDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositVesting', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'esToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalVested', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVestedAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvestMany', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastVestingUpdateTimes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockedVestingAmounts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolRewarders', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolRewardsPerSec', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolTotalLp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tierLevels', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tierPercents', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalLockedUpRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalLockedVestingAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unlockedVestingAmounts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateCooldownDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateRewardTierInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateVestingDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vestingDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawVesting', data: BytesLike): Result;

  events: {
    'Add(uint256,address,address[],bool)': EventFragment;
    'EmergencyWithdraw(address,uint256,uint256)': EventFragment;
    'EmissionRateUpdated(address,uint256,uint256)': EventFragment;
    'FarmDeposit(address,uint256,uint256)': EventFragment;
    'FarmWithdraw(address,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'RewardLockedUp(address,uint256,uint256)': EventFragment;
    'Set(uint256,address[])': EventFragment;
    'UpdateCooldownDuration(uint256)': EventFragment;
    'UpdateRewardTierInfo(uint256[],uint256[])': EventFragment;
    'UpdateVestingPeriod(uint256)': EventFragment;
    'VestingClaim(address,uint256)': EventFragment;
    'VestingDeposit(address,uint256)': EventFragment;
    'VestingTransfer(address,address,uint256)': EventFragment;
    'VestingWithdraw(address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Add'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmissionRateUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FarmDeposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FarmWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardLockedUp'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Set'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateCooldownDuration'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateRewardTierInfo'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateVestingPeriod'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VestingClaim'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VestingDeposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VestingTransfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VestingWithdraw'): EventFragment;
}

export interface AddEventObject {
  pid: BigNumber;
  lpToken: string;
  rewarders: string[];
  _enableCooldown: boolean;
}
export type AddEvent = TypedEvent<[BigNumber, string, string[], boolean], AddEventObject>;

export type AddEventFilter = TypedEventFilter<AddEvent>;

export interface EmergencyWithdrawEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], EmergencyWithdrawEventObject>;

export type EmergencyWithdrawEventFilter = TypedEventFilter<EmergencyWithdrawEvent>;

export interface EmissionRateUpdatedEventObject {
  caller: string;
  previousValue: BigNumber;
  newValue: BigNumber;
}
export type EmissionRateUpdatedEvent = TypedEvent<[string, BigNumber, BigNumber], EmissionRateUpdatedEventObject>;

export type EmissionRateUpdatedEventFilter = TypedEventFilter<EmissionRateUpdatedEvent>;

export interface FarmDepositEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type FarmDepositEvent = TypedEvent<[string, BigNumber, BigNumber], FarmDepositEventObject>;

export type FarmDepositEventFilter = TypedEventFilter<FarmDepositEvent>;

export interface FarmWithdrawEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type FarmWithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], FarmWithdrawEventObject>;

export type FarmWithdrawEventFilter = TypedEventFilter<FarmWithdrawEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RewardLockedUpEventObject {
  user: string;
  pid: BigNumber;
  amountLockedUp: BigNumber;
}
export type RewardLockedUpEvent = TypedEvent<[string, BigNumber, BigNumber], RewardLockedUpEventObject>;

export type RewardLockedUpEventFilter = TypedEventFilter<RewardLockedUpEvent>;

export interface SetEventObject {
  pid: BigNumber;
  rewarders: string[];
}
export type SetEvent = TypedEvent<[BigNumber, string[]], SetEventObject>;

export type SetEventFilter = TypedEventFilter<SetEvent>;

export interface UpdateCooldownDurationEventObject {
  cooldownDuration: BigNumber;
}
export type UpdateCooldownDurationEvent = TypedEvent<[BigNumber], UpdateCooldownDurationEventObject>;

export type UpdateCooldownDurationEventFilter = TypedEventFilter<UpdateCooldownDurationEvent>;

export interface UpdateRewardTierInfoEventObject {
  levels: BigNumber[];
  percents: BigNumber[];
}
export type UpdateRewardTierInfoEvent = TypedEvent<[BigNumber[], BigNumber[]], UpdateRewardTierInfoEventObject>;

export type UpdateRewardTierInfoEventFilter = TypedEventFilter<UpdateRewardTierInfoEvent>;

export interface UpdateVestingPeriodEventObject {
  vestingPeriod: BigNumber;
}
export type UpdateVestingPeriodEvent = TypedEvent<[BigNumber], UpdateVestingPeriodEventObject>;

export type UpdateVestingPeriodEventFilter = TypedEventFilter<UpdateVestingPeriodEvent>;

export interface VestingClaimEventObject {
  receiver: string;
  amount: BigNumber;
}
export type VestingClaimEvent = TypedEvent<[string, BigNumber], VestingClaimEventObject>;

export type VestingClaimEventFilter = TypedEventFilter<VestingClaimEvent>;

export interface VestingDepositEventObject {
  account: string;
  amount: BigNumber;
}
export type VestingDepositEvent = TypedEvent<[string, BigNumber], VestingDepositEventObject>;

export type VestingDepositEventFilter = TypedEventFilter<VestingDepositEvent>;

export interface VestingTransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type VestingTransferEvent = TypedEvent<[string, string, BigNumber], VestingTransferEventObject>;

export type VestingTransferEventFilter = TypedEventFilter<VestingTransferEvent>;

export interface VestingWithdrawEventObject {
  account: string;
  claimedAmount: BigNumber;
  balance: BigNumber;
}
export type VestingWithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], VestingWithdrawEventObject>;

export type VestingWithdrawEventFilter = TypedEventFilter<VestingWithdrawEvent>;

export interface VelaTokenFarm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VelaTokenFarmInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_MAX_OPEN_INTEREST(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_VLP_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    FUNDING_RATE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    LIQUIDATE_FEE_EXCEED(overrides?: CallOverrides): Promise<[BigNumber]>;

    LIQUIDATE_NONE_EXCEED(overrides?: CallOverrides): Promise<[BigNumber]>;

    LIQUIDATE_THRESHOLD_EXCEED(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_COOLDOWN_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_DELTA_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_DEPOSIT_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FEE_BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FEE_REWARD_BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FUNDING_RATE_INTERVAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_LIQUIDATION_FEE_USD(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_STAKING_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_TOKENFARM_COOLDOWN_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_TRIGGER_GAS_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_VESTING_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_FEE_REWARD_BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_FUNDING_RATE_INTERVAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_LEVERAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    ORDER_FILLED(overrides?: CallOverrides): Promise<[number]>;

    ORDER_NOT_FILLED(overrides?: CallOverrides): Promise<[number]>;

    POSITION_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    POSITION_MARKET(overrides?: CallOverrides): Promise<[BigNumber]>;

    POSITION_STOP_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    POSITION_STOP_MARKET(overrides?: CallOverrides): Promise<[BigNumber]>;

    POSITION_TRAILING_STOP(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    STAKING_PID_FOR_CHARGE_FEE(overrides?: CallOverrides): Promise<[number]>;

    TRAILING_STOP_TYPE_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    TRAILING_STOP_TYPE_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    VLP_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    ZERO_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    add(
      _lpToken: PromiseOrValue<string>,
      _rewarders: PromiseOrValue<string>[],
      _enableCooldown: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimable(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    claimableToken(overrides?: CallOverrides): Promise<[string]>;

    claimedAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    cooldownDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositVesting(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    esToken(overrides?: CallOverrides): Promise<[string]>;

    getTier(
      _pid: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getTotalVested(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getVestedAmount(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    harvestMany(
      _pids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    lastVestingUpdateTimes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedVestingAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingTokens(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], string[], BigNumber[], BigNumber[]] & {
        addresses: string[];
        symbols: string[];
        decimals: BigNumber[];
        amounts: BigNumber[];
      }
    >;

    poolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, boolean] & {
        lpToken: string;
        totalLp: BigNumber;
        enableCooldown: boolean;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolRewarders(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string[]] & { rewarders: string[] }>;

    poolRewardsPerSec(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], string[], BigNumber[], BigNumber[]] & {
        addresses: string[];
        symbols: string[];
        decimals: BigNumber[];
        rewardsPerSec: BigNumber[];
      }
    >;

    poolTotalLp(pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    set(
      _pid: PromiseOrValue<BigNumberish>,
      _rewarders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    tierLevels(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    tierPercents(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLockedUpRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLockedVestingAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unlockedVestingAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    updateCooldownDuration(
      _newCooldownDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateRewardTierInfo(
      _levels: PromiseOrValue<BigNumberish>[],
      _percents: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateVestingDuration(
      _vestingDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; startTimestamp: BigNumber }>;

    vestingDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawVesting(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;
  };

  BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_MAX_OPEN_INTEREST(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_VLP_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  FUNDING_RATE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  LIQUIDATE_FEE_EXCEED(overrides?: CallOverrides): Promise<BigNumber>;

  LIQUIDATE_NONE_EXCEED(overrides?: CallOverrides): Promise<BigNumber>;

  LIQUIDATE_THRESHOLD_EXCEED(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_COOLDOWN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_DELTA_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_DEPOSIT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FEE_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FEE_REWARD_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FUNDING_RATE_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_LIQUIDATION_FEE_USD(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_STAKING_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_TOKENFARM_COOLDOWN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_TRIGGER_GAS_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_VESTING_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_FEE_REWARD_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_FUNDING_RATE_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_LEVERAGE(overrides?: CallOverrides): Promise<BigNumber>;

  ORDER_FILLED(overrides?: CallOverrides): Promise<number>;

  ORDER_NOT_FILLED(overrides?: CallOverrides): Promise<number>;

  POSITION_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  POSITION_MARKET(overrides?: CallOverrides): Promise<BigNumber>;

  POSITION_STOP_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  POSITION_STOP_MARKET(overrides?: CallOverrides): Promise<BigNumber>;

  POSITION_TRAILING_STOP(overrides?: CallOverrides): Promise<BigNumber>;

  PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  STAKING_PID_FOR_CHARGE_FEE(overrides?: CallOverrides): Promise<number>;

  TRAILING_STOP_TYPE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  TRAILING_STOP_TYPE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  VLP_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  ZERO_ADDRESS(overrides?: CallOverrides): Promise<string>;

  add(
    _lpToken: PromiseOrValue<string>,
    _rewarders: PromiseOrValue<string>[],
    _enableCooldown: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimable(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  claimableToken(overrides?: CallOverrides): Promise<string>;

  claimedAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  cooldownDuration(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _pid: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositVesting(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  esToken(overrides?: CallOverrides): Promise<string>;

  getTier(
    _pid: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getTotalVested(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getVestedAmount(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  harvestMany(
    _pids: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  lastVestingUpdateTimes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  lockedVestingAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingTokens(
    _pid: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [string[], string[], BigNumber[], BigNumber[]] & {
      addresses: string[];
      symbols: string[];
      decimals: BigNumber[];
      amounts: BigNumber[];
    }
  >;

  poolInfo(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, boolean] & {
      lpToken: string;
      totalLp: BigNumber;
      enableCooldown: boolean;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  poolRewarders(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string[]>;

  poolRewardsPerSec(
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string[], string[], BigNumber[], BigNumber[]] & {
      addresses: string[];
      symbols: string[];
      decimals: BigNumber[];
      rewardsPerSec: BigNumber[];
    }
  >;

  poolTotalLp(pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  set(
    _pid: PromiseOrValue<BigNumberish>,
    _rewarders: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  tierLevels(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  tierPercents(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  totalLockedUpRewards(overrides?: CallOverrides): Promise<BigNumber>;

  totalLockedVestingAmount(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unlockedVestingAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  updateCooldownDuration(
    _newCooldownDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateRewardTierInfo(
    _levels: PromiseOrValue<BigNumberish>[],
    _percents: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateVestingDuration(
    _vestingDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; startTimestamp: BigNumber }>;

  vestingDuration(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _pid: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawVesting(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  callStatic: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_MAX_OPEN_INTEREST(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_VLP_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    FUNDING_RATE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATE_FEE_EXCEED(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATE_NONE_EXCEED(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATE_THRESHOLD_EXCEED(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_COOLDOWN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DELTA_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DEPOSIT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE_REWARD_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FUNDING_RATE_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LIQUIDATION_FEE_USD(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_STAKING_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TOKENFARM_COOLDOWN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TRIGGER_GAS_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_VESTING_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_FEE_REWARD_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_FUNDING_RATE_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LEVERAGE(overrides?: CallOverrides): Promise<BigNumber>;

    ORDER_FILLED(overrides?: CallOverrides): Promise<number>;

    ORDER_NOT_FILLED(overrides?: CallOverrides): Promise<number>;

    POSITION_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    POSITION_MARKET(overrides?: CallOverrides): Promise<BigNumber>;

    POSITION_STOP_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    POSITION_STOP_MARKET(overrides?: CallOverrides): Promise<BigNumber>;

    POSITION_TRAILING_STOP(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    STAKING_PID_FOR_CHARGE_FEE(overrides?: CallOverrides): Promise<number>;

    TRAILING_STOP_TYPE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    TRAILING_STOP_TYPE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    VLP_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    ZERO_ADDRESS(overrides?: CallOverrides): Promise<string>;

    add(
      _lpToken: PromiseOrValue<string>,
      _rewarders: PromiseOrValue<string>[],
      _enableCooldown: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    claimable(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    claimableToken(overrides?: CallOverrides): Promise<string>;

    claimedAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    cooldownDuration(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositVesting(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    emergencyWithdraw(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    esToken(overrides?: CallOverrides): Promise<string>;

    getTier(
      _pid: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getTotalVested(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getVestedAmount(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    harvestMany(_pids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;

    lastVestingUpdateTimes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lockedVestingAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingTokens(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], string[], BigNumber[], BigNumber[]] & {
        addresses: string[];
        symbols: string[];
        decimals: BigNumber[];
        amounts: BigNumber[];
      }
    >;

    poolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, boolean] & {
        lpToken: string;
        totalLp: BigNumber;
        enableCooldown: boolean;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    poolRewarders(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string[]>;

    poolRewardsPerSec(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], string[], BigNumber[], BigNumber[]] & {
        addresses: string[];
        symbols: string[];
        decimals: BigNumber[];
        rewardsPerSec: BigNumber[];
      }
    >;

    poolTotalLp(pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    set(
      _pid: PromiseOrValue<BigNumberish>,
      _rewarders: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    tierLevels(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    tierPercents(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedUpRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedVestingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    unlockedVestingAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    updateCooldownDuration(
      _newCooldownDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateRewardTierInfo(
      _levels: PromiseOrValue<BigNumberish>[],
      _percents: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    updateVestingDuration(_vestingDuration: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; startTimestamp: BigNumber }>;

    vestingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawVesting(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Add(uint256,address,address[],bool)'(
      pid?: PromiseOrValue<BigNumberish> | null,
      lpToken?: PromiseOrValue<string> | null,
      rewarders?: PromiseOrValue<string>[] | null,
      _enableCooldown?: null,
    ): AddEventFilter;
    Add(
      pid?: PromiseOrValue<BigNumberish> | null,
      lpToken?: PromiseOrValue<string> | null,
      rewarders?: PromiseOrValue<string>[] | null,
      _enableCooldown?: null,
    ): AddEventFilter;

    'EmergencyWithdraw(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
    ): EmergencyWithdrawEventFilter;

    'EmissionRateUpdated(address,uint256,uint256)'(
      caller?: PromiseOrValue<string> | null,
      previousValue?: null,
      newValue?: null,
    ): EmissionRateUpdatedEventFilter;
    EmissionRateUpdated(
      caller?: PromiseOrValue<string> | null,
      previousValue?: null,
      newValue?: null,
    ): EmissionRateUpdatedEventFilter;

    'FarmDeposit(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
    ): FarmDepositEventFilter;
    FarmDeposit(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
    ): FarmDepositEventFilter;

    'FarmWithdraw(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
    ): FarmWithdrawEventFilter;
    FarmWithdraw(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
    ): FarmWithdrawEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'RewardLockedUp(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amountLockedUp?: null,
    ): RewardLockedUpEventFilter;
    RewardLockedUp(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amountLockedUp?: null,
    ): RewardLockedUpEventFilter;

    'Set(uint256,address[])'(
      pid?: PromiseOrValue<BigNumberish> | null,
      rewarders?: PromiseOrValue<string>[] | null,
    ): SetEventFilter;
    Set(pid?: PromiseOrValue<BigNumberish> | null, rewarders?: PromiseOrValue<string>[] | null): SetEventFilter;

    'UpdateCooldownDuration(uint256)'(cooldownDuration?: null): UpdateCooldownDurationEventFilter;
    UpdateCooldownDuration(cooldownDuration?: null): UpdateCooldownDurationEventFilter;

    'UpdateRewardTierInfo(uint256[],uint256[])'(levels?: null, percents?: null): UpdateRewardTierInfoEventFilter;
    UpdateRewardTierInfo(levels?: null, percents?: null): UpdateRewardTierInfoEventFilter;

    'UpdateVestingPeriod(uint256)'(vestingPeriod?: null): UpdateVestingPeriodEventFilter;
    UpdateVestingPeriod(vestingPeriod?: null): UpdateVestingPeriodEventFilter;

    'VestingClaim(address,uint256)'(receiver?: null, amount?: null): VestingClaimEventFilter;
    VestingClaim(receiver?: null, amount?: null): VestingClaimEventFilter;

    'VestingDeposit(address,uint256)'(account?: null, amount?: null): VestingDepositEventFilter;
    VestingDeposit(account?: null, amount?: null): VestingDepositEventFilter;

    'VestingTransfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): VestingTransferEventFilter;
    VestingTransfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): VestingTransferEventFilter;

    'VestingWithdraw(address,uint256,uint256)'(
      account?: null,
      claimedAmount?: null,
      balance?: null,
    ): VestingWithdrawEventFilter;
    VestingWithdraw(account?: null, claimedAmount?: null, balance?: null): VestingWithdrawEventFilter;
  };

  estimateGas: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_MAX_OPEN_INTEREST(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_VLP_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    FUNDING_RATE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATE_FEE_EXCEED(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATE_NONE_EXCEED(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATE_THRESHOLD_EXCEED(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_COOLDOWN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DELTA_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DEPOSIT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE_REWARD_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FUNDING_RATE_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LIQUIDATION_FEE_USD(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_STAKING_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TOKENFARM_COOLDOWN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TRIGGER_GAS_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_VESTING_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_FEE_REWARD_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_FUNDING_RATE_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LEVERAGE(overrides?: CallOverrides): Promise<BigNumber>;

    ORDER_FILLED(overrides?: CallOverrides): Promise<BigNumber>;

    ORDER_NOT_FILLED(overrides?: CallOverrides): Promise<BigNumber>;

    POSITION_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    POSITION_MARKET(overrides?: CallOverrides): Promise<BigNumber>;

    POSITION_STOP_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    POSITION_STOP_MARKET(overrides?: CallOverrides): Promise<BigNumber>;

    POSITION_TRAILING_STOP(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    STAKING_PID_FOR_CHARGE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    TRAILING_STOP_TYPE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    TRAILING_STOP_TYPE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    VLP_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    ZERO_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _lpToken: PromiseOrValue<string>,
      _rewarders: PromiseOrValue<string>[],
      _enableCooldown: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimable(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    claimableToken(overrides?: CallOverrides): Promise<BigNumber>;

    claimedAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    cooldownDuration(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositVesting(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    esToken(overrides?: CallOverrides): Promise<BigNumber>;

    getTier(
      _pid: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getTotalVested(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getVestedAmount(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    harvestMany(
      _pids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    lastVestingUpdateTimes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lockedVestingAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingTokens(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    poolInfo(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    poolRewarders(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    poolRewardsPerSec(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    poolTotalLp(pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    set(
      _pid: PromiseOrValue<BigNumberish>,
      _rewarders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    tierLevels(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    tierPercents(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedUpRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedVestingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unlockedVestingAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    updateCooldownDuration(
      _newCooldownDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateRewardTierInfo(
      _levels: PromiseOrValue<BigNumberish>[],
      _percents: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateVestingDuration(
      _vestingDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    vestingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawVesting(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_MAX_OPEN_INTEREST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_VLP_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FUNDING_RATE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LIQUIDATE_FEE_EXCEED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LIQUIDATE_NONE_EXCEED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LIQUIDATE_THRESHOLD_EXCEED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_COOLDOWN_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_DELTA_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_DEPOSIT_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FEE_BASIS_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FEE_REWARD_BASIS_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FUNDING_RATE_INTERVAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_LIQUIDATION_FEE_USD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_STAKING_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_TOKENFARM_COOLDOWN_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_TRIGGER_GAS_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_VESTING_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_FEE_REWARD_BASIS_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_FUNDING_RATE_INTERVAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_LEVERAGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ORDER_FILLED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ORDER_NOT_FILLED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POSITION_LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POSITION_MARKET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POSITION_STOP_LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POSITION_STOP_MARKET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POSITION_TRAILING_STOP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STAKING_PID_FOR_CHARGE_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TRAILING_STOP_TYPE_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TRAILING_STOP_TYPE_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VLP_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZERO_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    add(
      _lpToken: PromiseOrValue<string>,
      _rewarders: PromiseOrValue<string>[],
      _enableCooldown: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimable(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimableToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimedAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cooldownDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositVesting(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    esToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTier(
      _pid: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTotalVested(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVestedAmount(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestMany(
      _pids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    lastVestingUpdateTimes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedVestingAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingTokens(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    poolInfo(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolRewarders(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolRewardsPerSec(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolTotalLp(pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    set(
      _pid: PromiseOrValue<BigNumberish>,
      _rewarders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    tierLevels(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tierPercents(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLockedUpRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLockedVestingAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unlockedVestingAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateCooldownDuration(
      _newCooldownDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateRewardTierInfo(
      _levels: PromiseOrValue<BigNumberish>[],
      _percents: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateVestingDuration(
      _vestingDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    vestingDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawVesting(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;
  };
}
