/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface EaseRcaShieldInterface extends utils.Interface {
  functions: {
    'allowance(address,address)': FunctionFragment;
    'amtForSale()': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'apr()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'controller()': FunctionFragment;
    'controllerUpdate(uint256,uint256)': FunctionFragment;
    'cumLiqForClaims()': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'discount()': FunctionFragment;
    'getExtraForSale(uint256)': FunctionFragment;
    'governor()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initialize(uint256,uint256,address,uint256)': FunctionFragment;
    'isGov()': FunctionFragment;
    'mintTo(address,address,uint256,uint256,uint8,bytes32,bytes32,uint256,bytes32[])': FunctionFragment;
    'name()': FunctionFragment;
    'pendingWithdrawal()': FunctionFragment;
    'percentReserved()': FunctionFragment;
    'proofOfLoss(address)': FunctionFragment;
    'purchaseRca(address,uint256,uint256,bytes32[],uint256,bytes32[])': FunctionFragment;
    'purchaseU(address,uint256,uint256,bytes32[],uint256,bytes32[])': FunctionFragment;
    'rcaValue(uint256,uint256)': FunctionFragment;
    'receiveOwnership()': FunctionFragment;
    'redeemFinalize(address,bytes,uint256,bytes32[],uint256,bytes32[])': FunctionFragment;
    'redeemRequest(uint256,uint256,bytes32[],uint256,bytes32[])': FunctionFragment;
    'setApr(uint256)': FunctionFragment;
    'setController(address)': FunctionFragment;
    'setDiscount(uint256)': FunctionFragment;
    'setLiqForClaims(uint256)': FunctionFragment;
    'setPercentReserved(uint256)': FunctionFragment;
    'setTreasury(address)': FunctionFragment;
    'setWithdrawalDelay(uint256)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'treasury()': FunctionFragment;
    'uBalance()': FunctionFragment;
    'uToken()': FunctionFragment;
    'uValue(uint256,uint256,uint256)': FunctionFragment;
    'withdrawRequests(address)': FunctionFragment;
    'withdrawalDelay()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'allowance'
      | 'amtForSale'
      | 'approve'
      | 'apr'
      | 'balanceOf'
      | 'controller'
      | 'controllerUpdate'
      | 'cumLiqForClaims'
      | 'decimals'
      | 'decreaseAllowance'
      | 'discount'
      | 'getExtraForSale'
      | 'governor'
      | 'increaseAllowance'
      | 'initialize'
      | 'isGov'
      | 'mintTo'
      | 'name'
      | 'pendingWithdrawal'
      | 'percentReserved'
      | 'proofOfLoss'
      | 'purchaseRca'
      | 'purchaseU'
      | 'rcaValue'
      | 'receiveOwnership'
      | 'redeemFinalize'
      | 'redeemRequest'
      | 'setApr'
      | 'setController'
      | 'setDiscount'
      | 'setLiqForClaims'
      | 'setPercentReserved'
      | 'setTreasury'
      | 'setWithdrawalDelay'
      | 'symbol'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'treasury'
      | 'uBalance'
      | 'uToken'
      | 'uValue'
      | 'withdrawRequests'
      | 'withdrawalDelay',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'amtForSale', values?: undefined): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'apr', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'controller', values?: undefined): string;
  encodeFunctionData(functionFragment: 'controllerUpdate', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'cumLiqForClaims', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'discount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getExtraForSale', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'governor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [BigNumberish, BigNumberish, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'isGov', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'mintTo',
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike, BigNumberish, BytesLike[]],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingWithdrawal', values?: undefined): string;
  encodeFunctionData(functionFragment: 'percentReserved', values?: undefined): string;
  encodeFunctionData(functionFragment: 'proofOfLoss', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'purchaseRca',
    values: [string, BigNumberish, BigNumberish, BytesLike[], BigNumberish, BytesLike[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'purchaseU',
    values: [string, BigNumberish, BigNumberish, BytesLike[], BigNumberish, BytesLike[]],
  ): string;
  encodeFunctionData(functionFragment: 'rcaValue', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'receiveOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'redeemFinalize',
    values: [string, BytesLike, BigNumberish, BytesLike[], BigNumberish, BytesLike[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'redeemRequest',
    values: [BigNumberish, BigNumberish, BytesLike[], BigNumberish, BytesLike[]],
  ): string;
  encodeFunctionData(functionFragment: 'setApr', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setController', values: [string]): string;
  encodeFunctionData(functionFragment: 'setDiscount', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setLiqForClaims', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setPercentReserved', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setTreasury', values: [string]): string;
  encodeFunctionData(functionFragment: 'setWithdrawalDelay', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'treasury', values?: undefined): string;
  encodeFunctionData(functionFragment: 'uBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'uToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'uValue', values: [BigNumberish, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawRequests', values: [string]): string;
  encodeFunctionData(functionFragment: 'withdrawalDelay', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'amtForSale', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'apr', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'controller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'controllerUpdate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cumLiqForClaims', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'discount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getExtraForSale', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isGov', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingWithdrawal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'percentReserved', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proofOfLoss', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'purchaseRca', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'purchaseU', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rcaValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'receiveOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemFinalize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemRequest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApr', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDiscount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLiqForClaims', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPercentReserved', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTreasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWithdrawalDelay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'uBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'uToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'uValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawRequests', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawalDelay', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Mint(address,address,address,uint256,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'PendingOwnershipTransfer(address,address)': EventFragment;
    'PurchaseRca(address,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'PurchaseU(address,uint256,uint256,uint256,uint256)': EventFragment;
    'RedeemFinalize(address,address,uint256,uint256,uint256)': EventFragment;
    'RedeemRequest(address,uint256,uint256,uint256,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PendingOwnershipTransfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PurchaseRca'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PurchaseU'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RedeemFinalize'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RedeemRequest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface MintEventObject {
  sender: string;
  to: string;
  referrer: string;
  uAmount: BigNumber;
  rcaAmount: BigNumber;
  timestamp: BigNumber;
}
export type MintEvent = TypedEvent<[string, string, string, BigNumber, BigNumber, BigNumber], MintEventObject>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface OwnershipTransferredEventObject {
  previousGovernor: string;
  newGovernor: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PendingOwnershipTransferEventObject {
  from: string;
  to: string;
}
export type PendingOwnershipTransferEvent = TypedEvent<[string, string], PendingOwnershipTransferEventObject>;

export type PendingOwnershipTransferEventFilter = TypedEventFilter<PendingOwnershipTransferEvent>;

export interface PurchaseRcaEventObject {
  to: string;
  uAmount: BigNumber;
  rcaAmount: BigNumber;
  ethAmount: BigNumber;
  price: BigNumber;
  timestamp: BigNumber;
}
export type PurchaseRcaEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  PurchaseRcaEventObject
>;

export type PurchaseRcaEventFilter = TypedEventFilter<PurchaseRcaEvent>;

export interface PurchaseUEventObject {
  to: string;
  uAmount: BigNumber;
  ethAmount: BigNumber;
  price: BigNumber;
  timestamp: BigNumber;
}
export type PurchaseUEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber, BigNumber], PurchaseUEventObject>;

export type PurchaseUEventFilter = TypedEventFilter<PurchaseUEvent>;

export interface RedeemFinalizeEventObject {
  user: string;
  to: string;
  uAmount: BigNumber;
  rcaAmount: BigNumber;
  timestamp: BigNumber;
}
export type RedeemFinalizeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  RedeemFinalizeEventObject
>;

export type RedeemFinalizeEventFilter = TypedEventFilter<RedeemFinalizeEvent>;

export interface RedeemRequestEventObject {
  user: string;
  uAmount: BigNumber;
  rcaAmount: BigNumber;
  endTime: BigNumber;
  timestamp: BigNumber;
}
export type RedeemRequestEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  RedeemRequestEventObject
>;

export type RedeemRequestEventFilter = TypedEventFilter<RedeemRequestEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface EaseRcaShield extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EaseRcaShieldInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    amtForSale(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    apr(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    controllerUpdate(
      _newApr: BigNumberish,
      _aprUpdate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    cumLiqForClaims(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    discount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getExtraForSale(
      _newCumLiqForClaims: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { extraForSale: BigNumber }>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _apr: BigNumberish,
      _discount: BigNumberish,
      _treasury: string,
      _withdrawalDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isGov(overrides?: CallOverrides): Promise<[boolean]>;

    mintTo(
      _user: string,
      _referrer: string,
      _uAmount: BigNumberish,
      _expiry: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      _newCumLiqForClaims: BigNumberish,
      _liqForClaimsProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    pendingWithdrawal(overrides?: CallOverrides): Promise<[BigNumber]>;

    percentReserved(overrides?: CallOverrides): Promise<[BigNumber]>;

    proofOfLoss(
      _coverAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    purchaseRca(
      _user: string,
      _uAmount: BigNumberish,
      _uEthPrice: BigNumberish,
      _priceProof: BytesLike[],
      _newCumLiqForClaims: BigNumberish,
      _liqForClaimsProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    purchaseU(
      _user: string,
      _uAmount: BigNumberish,
      _uEthPrice: BigNumberish,
      _priceProof: BytesLike[],
      _newCumLiqForClaims: BigNumberish,
      _liqForClaimsProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    rcaValue(
      _uAmount: BigNumberish,
      _cumLiqForClaims: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { rcaAmount: BigNumber }>;

    receiveOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    redeemFinalize(
      _to: string,
      _routerData: BytesLike,
      _newCumLiqForClaims: BigNumberish,
      _liqForClaimsProof: BytesLike[],
      _newPercentReserved: BigNumberish,
      _percentReservedProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    redeemRequest(
      _rcaAmount: BigNumberish,
      _newCumLiqForClaims: BigNumberish,
      _liqForClaimsProof: BytesLike[],
      _newPercentReserved: BigNumberish,
      _percentReservedProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setApr(
      _newApr: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setController(
      _newController: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDiscount(
      _newDiscount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setLiqForClaims(
      _newCumLiqForClaims: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPercentReserved(
      _newPercentReserved: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTreasury(
      _newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setWithdrawalDelay(
      _newWithdrawalDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    uBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    uToken(overrides?: CallOverrides): Promise<[string]>;

    uValue(
      _rcaAmount: BigNumberish,
      _cumLiqForClaims: BigNumberish,
      _percentReserved: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { uAmount: BigNumber }>;

    withdrawRequests(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, number] & {
        uAmount: BigNumber;
        rcaAmount: BigNumber;
        endTime: number;
      }
    >;

    withdrawalDelay(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  amtForSale(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  apr(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  controller(overrides?: CallOverrides): Promise<string>;

  controllerUpdate(
    _newApr: BigNumberish,
    _aprUpdate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  cumLiqForClaims(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  discount(overrides?: CallOverrides): Promise<BigNumber>;

  getExtraForSale(_newCumLiqForClaims: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _apr: BigNumberish,
    _discount: BigNumberish,
    _treasury: string,
    _withdrawalDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isGov(overrides?: CallOverrides): Promise<boolean>;

  mintTo(
    _user: string,
    _referrer: string,
    _uAmount: BigNumberish,
    _expiry: BigNumberish,
    _v: BigNumberish,
    _r: BytesLike,
    _s: BytesLike,
    _newCumLiqForClaims: BigNumberish,
    _liqForClaimsProof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  pendingWithdrawal(overrides?: CallOverrides): Promise<BigNumber>;

  percentReserved(overrides?: CallOverrides): Promise<BigNumber>;

  proofOfLoss(
    _coverAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  purchaseRca(
    _user: string,
    _uAmount: BigNumberish,
    _uEthPrice: BigNumberish,
    _priceProof: BytesLike[],
    _newCumLiqForClaims: BigNumberish,
    _liqForClaimsProof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  purchaseU(
    _user: string,
    _uAmount: BigNumberish,
    _uEthPrice: BigNumberish,
    _priceProof: BytesLike[],
    _newCumLiqForClaims: BigNumberish,
    _liqForClaimsProof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  rcaValue(_uAmount: BigNumberish, _cumLiqForClaims: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  receiveOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  redeemFinalize(
    _to: string,
    _routerData: BytesLike,
    _newCumLiqForClaims: BigNumberish,
    _liqForClaimsProof: BytesLike[],
    _newPercentReserved: BigNumberish,
    _percentReservedProof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  redeemRequest(
    _rcaAmount: BigNumberish,
    _newCumLiqForClaims: BigNumberish,
    _liqForClaimsProof: BytesLike[],
    _newPercentReserved: BigNumberish,
    _percentReservedProof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setApr(
    _newApr: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setController(
    _newController: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setDiscount(
    _newDiscount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setLiqForClaims(
    _newCumLiqForClaims: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPercentReserved(
    _newPercentReserved: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setTreasury(
    _newTreasury: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setWithdrawalDelay(
    _newWithdrawalDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newGovernor: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  uBalance(overrides?: CallOverrides): Promise<BigNumber>;

  uToken(overrides?: CallOverrides): Promise<string>;

  uValue(
    _rcaAmount: BigNumberish,
    _cumLiqForClaims: BigNumberish,
    _percentReserved: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  withdrawRequests(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, number] & {
      uAmount: BigNumber;
      rcaAmount: BigNumber;
      endTime: number;
    }
  >;

  withdrawalDelay(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    amtForSale(overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    apr(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<string>;

    controllerUpdate(_newApr: BigNumberish, _aprUpdate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    cumLiqForClaims(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    discount(overrides?: CallOverrides): Promise<BigNumber>;

    getExtraForSale(_newCumLiqForClaims: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _apr: BigNumberish,
      _discount: BigNumberish,
      _treasury: string,
      _withdrawalDelay: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    isGov(overrides?: CallOverrides): Promise<boolean>;

    mintTo(
      _user: string,
      _referrer: string,
      _uAmount: BigNumberish,
      _expiry: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      _newCumLiqForClaims: BigNumberish,
      _liqForClaimsProof: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    pendingWithdrawal(overrides?: CallOverrides): Promise<BigNumber>;

    percentReserved(overrides?: CallOverrides): Promise<BigNumber>;

    proofOfLoss(_coverAddress: string, overrides?: CallOverrides): Promise<void>;

    purchaseRca(
      _user: string,
      _uAmount: BigNumberish,
      _uEthPrice: BigNumberish,
      _priceProof: BytesLike[],
      _newCumLiqForClaims: BigNumberish,
      _liqForClaimsProof: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<void>;

    purchaseU(
      _user: string,
      _uAmount: BigNumberish,
      _uEthPrice: BigNumberish,
      _priceProof: BytesLike[],
      _newCumLiqForClaims: BigNumberish,
      _liqForClaimsProof: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<void>;

    rcaValue(_uAmount: BigNumberish, _cumLiqForClaims: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    receiveOwnership(overrides?: CallOverrides): Promise<void>;

    redeemFinalize(
      _to: string,
      _routerData: BytesLike,
      _newCumLiqForClaims: BigNumberish,
      _liqForClaimsProof: BytesLike[],
      _newPercentReserved: BigNumberish,
      _percentReservedProof: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<void>;

    redeemRequest(
      _rcaAmount: BigNumberish,
      _newCumLiqForClaims: BigNumberish,
      _liqForClaimsProof: BytesLike[],
      _newPercentReserved: BigNumberish,
      _percentReservedProof: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<void>;

    setApr(_newApr: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setController(_newController: string, overrides?: CallOverrides): Promise<void>;

    setDiscount(_newDiscount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setLiqForClaims(_newCumLiqForClaims: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setPercentReserved(_newPercentReserved: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setTreasury(_newTreasury: string, overrides?: CallOverrides): Promise<void>;

    setWithdrawalDelay(_newWithdrawalDelay: BigNumberish, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(from: string, to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(newGovernor: string, overrides?: CallOverrides): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    uBalance(overrides?: CallOverrides): Promise<BigNumber>;

    uToken(overrides?: CallOverrides): Promise<string>;

    uValue(
      _rcaAmount: BigNumberish,
      _cumLiqForClaims: BigNumberish,
      _percentReserved: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    withdrawRequests(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, number] & {
        uAmount: BigNumber;
        rcaAmount: BigNumber;
        endTime: number;
      }
    >;

    withdrawalDelay(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;

    'Mint(address,address,address,uint256,uint256,uint256)'(
      sender?: string | null,
      to?: string | null,
      referrer?: string | null,
      uAmount?: null,
      rcaAmount?: null,
      timestamp?: null,
    ): MintEventFilter;
    Mint(
      sender?: string | null,
      to?: string | null,
      referrer?: string | null,
      uAmount?: null,
      rcaAmount?: null,
      timestamp?: null,
    ): MintEventFilter;

    'OwnershipTransferred(address,address)'(
      previousGovernor?: string | null,
      newGovernor?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousGovernor?: string | null,
      newGovernor?: string | null,
    ): OwnershipTransferredEventFilter;

    'PendingOwnershipTransfer(address,address)'(
      from?: string | null,
      to?: string | null,
    ): PendingOwnershipTransferEventFilter;
    PendingOwnershipTransfer(from?: string | null, to?: string | null): PendingOwnershipTransferEventFilter;

    'PurchaseRca(address,uint256,uint256,uint256,uint256,uint256)'(
      to?: string | null,
      uAmount?: null,
      rcaAmount?: null,
      ethAmount?: null,
      price?: null,
      timestamp?: null,
    ): PurchaseRcaEventFilter;
    PurchaseRca(
      to?: string | null,
      uAmount?: null,
      rcaAmount?: null,
      ethAmount?: null,
      price?: null,
      timestamp?: null,
    ): PurchaseRcaEventFilter;

    'PurchaseU(address,uint256,uint256,uint256,uint256)'(
      to?: string | null,
      uAmount?: null,
      ethAmount?: null,
      price?: null,
      timestamp?: null,
    ): PurchaseUEventFilter;
    PurchaseU(
      to?: string | null,
      uAmount?: null,
      ethAmount?: null,
      price?: null,
      timestamp?: null,
    ): PurchaseUEventFilter;

    'RedeemFinalize(address,address,uint256,uint256,uint256)'(
      user?: string | null,
      to?: string | null,
      uAmount?: null,
      rcaAmount?: null,
      timestamp?: null,
    ): RedeemFinalizeEventFilter;
    RedeemFinalize(
      user?: string | null,
      to?: string | null,
      uAmount?: null,
      rcaAmount?: null,
      timestamp?: null,
    ): RedeemFinalizeEventFilter;

    'RedeemRequest(address,uint256,uint256,uint256,uint256)'(
      user?: string | null,
      uAmount?: null,
      rcaAmount?: null,
      endTime?: null,
      timestamp?: null,
    ): RedeemRequestEventFilter;
    RedeemRequest(
      user?: string | null,
      uAmount?: null,
      rcaAmount?: null,
      endTime?: null,
      timestamp?: null,
    ): RedeemRequestEventFilter;

    'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
  };

  estimateGas: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    amtForSale(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    apr(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    controllerUpdate(
      _newApr: BigNumberish,
      _aprUpdate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    cumLiqForClaims(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    discount(overrides?: CallOverrides): Promise<BigNumber>;

    getExtraForSale(_newCumLiqForClaims: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initialize(
      _apr: BigNumberish,
      _discount: BigNumberish,
      _treasury: string,
      _withdrawalDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isGov(overrides?: CallOverrides): Promise<BigNumber>;

    mintTo(
      _user: string,
      _referrer: string,
      _uAmount: BigNumberish,
      _expiry: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      _newCumLiqForClaims: BigNumberish,
      _liqForClaimsProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    pendingWithdrawal(overrides?: CallOverrides): Promise<BigNumber>;

    percentReserved(overrides?: CallOverrides): Promise<BigNumber>;

    proofOfLoss(_coverAddress: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    purchaseRca(
      _user: string,
      _uAmount: BigNumberish,
      _uEthPrice: BigNumberish,
      _priceProof: BytesLike[],
      _newCumLiqForClaims: BigNumberish,
      _liqForClaimsProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    purchaseU(
      _user: string,
      _uAmount: BigNumberish,
      _uEthPrice: BigNumberish,
      _priceProof: BytesLike[],
      _newCumLiqForClaims: BigNumberish,
      _liqForClaimsProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    rcaValue(_uAmount: BigNumberish, _cumLiqForClaims: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    receiveOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    redeemFinalize(
      _to: string,
      _routerData: BytesLike,
      _newCumLiqForClaims: BigNumberish,
      _liqForClaimsProof: BytesLike[],
      _newPercentReserved: BigNumberish,
      _percentReservedProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    redeemRequest(
      _rcaAmount: BigNumberish,
      _newCumLiqForClaims: BigNumberish,
      _liqForClaimsProof: BytesLike[],
      _newPercentReserved: BigNumberish,
      _percentReservedProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setApr(_newApr: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setController(
      _newController: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setDiscount(
      _newDiscount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setLiqForClaims(
      _newCumLiqForClaims: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setPercentReserved(
      _newPercentReserved: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setTreasury(_newTreasury: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setWithdrawalDelay(
      _newWithdrawalDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    uBalance(overrides?: CallOverrides): Promise<BigNumber>;

    uToken(overrides?: CallOverrides): Promise<BigNumber>;

    uValue(
      _rcaAmount: BigNumberish,
      _cumLiqForClaims: BigNumberish,
      _percentReserved: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    withdrawRequests(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalDelay(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    amtForSale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    apr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controllerUpdate(
      _newApr: BigNumberish,
      _aprUpdate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    cumLiqForClaims(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    discount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExtraForSale(_newCumLiqForClaims: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _apr: BigNumberish,
      _discount: BigNumberish,
      _treasury: string,
      _withdrawalDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isGov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintTo(
      _user: string,
      _referrer: string,
      _uAmount: BigNumberish,
      _expiry: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      _newCumLiqForClaims: BigNumberish,
      _liqForClaimsProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingWithdrawal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    percentReserved(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proofOfLoss(
      _coverAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    purchaseRca(
      _user: string,
      _uAmount: BigNumberish,
      _uEthPrice: BigNumberish,
      _priceProof: BytesLike[],
      _newCumLiqForClaims: BigNumberish,
      _liqForClaimsProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    purchaseU(
      _user: string,
      _uAmount: BigNumberish,
      _uEthPrice: BigNumberish,
      _priceProof: BytesLike[],
      _newCumLiqForClaims: BigNumberish,
      _liqForClaimsProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    rcaValue(
      _uAmount: BigNumberish,
      _cumLiqForClaims: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    receiveOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    redeemFinalize(
      _to: string,
      _routerData: BytesLike,
      _newCumLiqForClaims: BigNumberish,
      _liqForClaimsProof: BytesLike[],
      _newPercentReserved: BigNumberish,
      _percentReservedProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    redeemRequest(
      _rcaAmount: BigNumberish,
      _newCumLiqForClaims: BigNumberish,
      _liqForClaimsProof: BytesLike[],
      _newPercentReserved: BigNumberish,
      _percentReservedProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setApr(
      _newApr: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setController(
      _newController: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setDiscount(
      _newDiscount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setLiqForClaims(
      _newCumLiqForClaims: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPercentReserved(
      _newPercentReserved: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setWithdrawalDelay(
      _newWithdrawalDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uValue(
      _rcaAmount: BigNumberish,
      _cumLiqForClaims: BigNumberish,
      _percentReserved: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    withdrawRequests(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawalDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
