/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface GroLabsVaultInterface extends utils.Interface {
  functions: {
    'BASE_ALLOWANCE()': FunctionFragment;
    'MAXIMUM_STRATEGIES()': FunctionFragment;
    'activateAllowance(bool)': FunctionFragment;
    'activation()': FunctionFragment;
    'addStrategy(address,uint256,uint256,uint256)': FunctionFragment;
    'addStrategyToQueue(address)': FunctionFragment;
    'addToWhitelist(address)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'allowance()': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'bouncer()': FunctionFragment;
    'claimed(address)': FunctionFragment;
    'creditAvailable()': FunctionFragment;
    'creditAvailable(address)': FunctionFragment;
    'debtOutstanding(address)': FunctionFragment;
    'debtOutstanding()': FunctionFragment;
    'debtRatio()': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'depositLimit()': FunctionFragment;
    'getPricePerShare()': FunctionFragment;
    'getStrategiesLength()': FunctionFragment;
    'getStrategyAssets(uint256)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'lastReport()': FunctionFragment;
    'lockedProfit()': FunctionFragment;
    'migrateStrategy(address,address)': FunctionFragment;
    'name()': FunctionFragment;
    'owner()': FunctionFragment;
    'releaseFactor()': FunctionFragment;
    'removeFromWhitelist(address)': FunctionFragment;
    'removeStrategyFromQueue(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'report(uint256,uint256,uint256)': FunctionFragment;
    'revokeStrategy()': FunctionFragment;
    'rewards()': FunctionFragment;
    'setBouncer(address)': FunctionFragment;
    'setDebtRatio(address,uint256)': FunctionFragment;
    'setDebtRatios(uint256[])': FunctionFragment;
    'setDepositLimit(uint256)': FunctionFragment;
    'setProfitRelease(uint256)': FunctionFragment;
    'setRewards(address)': FunctionFragment;
    'setUserAllowance(address,uint256)': FunctionFragment;
    'setVaultFee(uint256)': FunctionFragment;
    'setWithdrawalQueue(address[])': FunctionFragment;
    'strategies(address)': FunctionFragment;
    'strategyDebt()': FunctionFragment;
    'strategyHarvest(uint256)': FunctionFragment;
    'strategyHarvestTrigger(uint256,uint256)': FunctionFragment;
    'sweep(address,address)': FunctionFragment;
    'symbol()': FunctionFragment;
    'token()': FunctionFragment;
    'totalAssets()': FunctionFragment;
    'totalDebt()': FunctionFragment;
    'totalEstimatedAssets()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateStrategyMaxDebtPerHarvest(address,uint256)': FunctionFragment;
    'updateStrategyMinDebtPerHarvest(address,uint256)': FunctionFragment;
    'userAllowance(address)': FunctionFragment;
    'vaultFee()': FunctionFragment;
    'whitelist(address)': FunctionFragment;
    'withdraw(uint256,uint256)': FunctionFragment;
    'withdrawalQueue(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BASE_ALLOWANCE'
      | 'MAXIMUM_STRATEGIES'
      | 'activateAllowance'
      | 'activation'
      | 'addStrategy'
      | 'addStrategyToQueue'
      | 'addToWhitelist'
      | 'allowance(address,address)'
      | 'allowance()'
      | 'approve'
      | 'balanceOf'
      | 'bouncer'
      | 'claimed'
      | 'creditAvailable()'
      | 'creditAvailable(address)'
      | 'debtOutstanding(address)'
      | 'debtOutstanding()'
      | 'debtRatio'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit'
      | 'depositLimit'
      | 'getPricePerShare'
      | 'getStrategiesLength'
      | 'getStrategyAssets'
      | 'increaseAllowance'
      | 'lastReport'
      | 'lockedProfit'
      | 'migrateStrategy'
      | 'name'
      | 'owner'
      | 'releaseFactor'
      | 'removeFromWhitelist'
      | 'removeStrategyFromQueue'
      | 'renounceOwnership'
      | 'report'
      | 'revokeStrategy'
      | 'rewards'
      | 'setBouncer'
      | 'setDebtRatio'
      | 'setDebtRatios'
      | 'setDepositLimit'
      | 'setProfitRelease'
      | 'setRewards'
      | 'setUserAllowance'
      | 'setVaultFee'
      | 'setWithdrawalQueue'
      | 'strategies'
      | 'strategyDebt'
      | 'strategyHarvest'
      | 'strategyHarvestTrigger'
      | 'sweep'
      | 'symbol'
      | 'token'
      | 'totalAssets'
      | 'totalDebt'
      | 'totalEstimatedAssets'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'updateStrategyMaxDebtPerHarvest'
      | 'updateStrategyMinDebtPerHarvest'
      | 'userAllowance'
      | 'vaultFee'
      | 'whitelist'
      | 'withdraw'
      | 'withdrawalQueue',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BASE_ALLOWANCE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAXIMUM_STRATEGIES', values?: undefined): string;
  encodeFunctionData(functionFragment: 'activateAllowance', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'activation', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addStrategy',
    values: [string, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'addStrategyToQueue', values: [string]): string;
  encodeFunctionData(functionFragment: 'addToWhitelist', values: [string]): string;
  encodeFunctionData(functionFragment: 'allowance(address,address)', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'allowance()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'bouncer', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimed', values: [string]): string;
  encodeFunctionData(functionFragment: 'creditAvailable()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'creditAvailable(address)', values: [string]): string;
  encodeFunctionData(functionFragment: 'debtOutstanding(address)', values: [string]): string;
  encodeFunctionData(functionFragment: 'debtOutstanding()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'debtRatio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'depositLimit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPricePerShare', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getStrategiesLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getStrategyAssets', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'lastReport', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lockedProfit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'migrateStrategy', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'releaseFactor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'removeFromWhitelist', values: [string]): string;
  encodeFunctionData(functionFragment: 'removeStrategyFromQueue', values: [string]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'report', values: [BigNumberish, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'revokeStrategy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setBouncer', values: [string]): string;
  encodeFunctionData(functionFragment: 'setDebtRatio', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setDebtRatios', values: [BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'setDepositLimit', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setProfitRelease', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setRewards', values: [string]): string;
  encodeFunctionData(functionFragment: 'setUserAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setVaultFee', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setWithdrawalQueue', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'strategies', values: [string]): string;
  encodeFunctionData(functionFragment: 'strategyDebt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'strategyHarvest', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'strategyHarvestTrigger', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'sweep', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalAssets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalDebt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalEstimatedAssets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateStrategyMaxDebtPerHarvest', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateStrategyMinDebtPerHarvest', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'userAllowance', values: [string]): string;
  encodeFunctionData(functionFragment: 'vaultFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'whitelist', values: [string]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawalQueue', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'BASE_ALLOWANCE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAXIMUM_STRATEGIES', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activateAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addStrategyToQueue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addToWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance(address,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bouncer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'creditAvailable()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'creditAvailable(address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'debtOutstanding(address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'debtOutstanding()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'debtRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPricePerShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStrategiesLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStrategyAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastReport', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockedProfit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migrateStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'releaseFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeFromWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeStrategyFromQueue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'report', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBouncer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDebtRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDebtRatios', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDepositLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setProfitRelease', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUserAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setVaultFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWithdrawalQueue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategies', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategyDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategyHarvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategyHarvestTrigger', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sweep', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalEstimatedAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateStrategyMaxDebtPerHarvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateStrategyMinDebtPerHarvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaultFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawalQueue', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'LogAddToWhitelist(address)': EventFragment;
    'LogAllowanceStatus(bool)': EventFragment;
    'LogDebtRatios(uint256[])': EventFragment;
    'LogDeposit(address,uint256,uint256,uint256)': EventFragment;
    'LogDepositLimit(uint256)': EventFragment;
    'LogMigrate(address,address,uint256)': EventFragment;
    'LogNewAllowance(address,uint256)': EventFragment;
    'LogNewBouncer(address)': EventFragment;
    'LogNewDebtRatio(address,uint256)': EventFragment;
    'LogNewReleaseFactor(uint256)': EventFragment;
    'LogNewRewards(address)': EventFragment;
    'LogNewStrategyHarvest(bool,uint256)': EventFragment;
    'LogNewVaultFee(uint256)': EventFragment;
    'LogRemoveFromWhitelist(address)': EventFragment;
    'LogStrategyAdded(address,uint256,uint256,uint256)': EventFragment;
    'LogStrategyAddedToQueue(address)': EventFragment;
    'LogStrategyMigrated(address,address)': EventFragment;
    'LogStrategyRemovedFromQueue(address)': EventFragment;
    'LogStrategyReported(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'LogStrategyRevoked(address)': EventFragment;
    'LogStrategyStatusUpdate(address,bool)': EventFragment;
    'LogStrategyUpdateMaxDebtPerHarvest(address,uint256)': EventFragment;
    'LogStrategyUpdateMinDebtPerHarvest(address,uint256)': EventFragment;
    'LogUpdateWithdrawalQueue(address[])': EventFragment;
    'LogWithdrawal(address,uint256,uint256,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogAddToWhitelist'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogAllowanceStatus'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogDebtRatios'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogDeposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogDepositLimit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogMigrate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogNewAllowance'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogNewBouncer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogNewDebtRatio'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogNewReleaseFactor'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogNewRewards'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogNewStrategyHarvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogNewVaultFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogRemoveFromWhitelist'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogStrategyAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogStrategyAddedToQueue'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogStrategyMigrated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogStrategyRemovedFromQueue'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogStrategyReported'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogStrategyRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogStrategyStatusUpdate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogStrategyUpdateMaxDebtPerHarvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogStrategyUpdateMinDebtPerHarvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogUpdateWithdrawalQueue'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogWithdrawal'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface LogAddToWhitelistEventObject {
  user: string;
}
export type LogAddToWhitelistEvent = TypedEvent<[string], LogAddToWhitelistEventObject>;

export type LogAddToWhitelistEventFilter = TypedEventFilter<LogAddToWhitelistEvent>;

export interface LogAllowanceStatusEventObject {
  status: boolean;
}
export type LogAllowanceStatusEvent = TypedEvent<[boolean], LogAllowanceStatusEventObject>;

export type LogAllowanceStatusEventFilter = TypedEventFilter<LogAllowanceStatusEvent>;

export interface LogDebtRatiosEventObject {
  strategyRetios: BigNumber[];
}
export type LogDebtRatiosEvent = TypedEvent<[BigNumber[]], LogDebtRatiosEventObject>;

export type LogDebtRatiosEventFilter = TypedEventFilter<LogDebtRatiosEvent>;

export interface LogDepositEventObject {
  from: string;
  _amount: BigNumber;
  shares: BigNumber;
  allowance: BigNumber;
}
export type LogDepositEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], LogDepositEventObject>;

export type LogDepositEventFilter = TypedEventFilter<LogDepositEvent>;

export interface LogDepositLimitEventObject {
  newLimit: BigNumber;
}
export type LogDepositLimitEvent = TypedEvent<[BigNumber], LogDepositLimitEventObject>;

export type LogDepositLimitEventFilter = TypedEventFilter<LogDepositLimitEvent>;

export interface LogMigrateEventObject {
  parent: string;
  child: string;
  amount: BigNumber;
}
export type LogMigrateEvent = TypedEvent<[string, string, BigNumber], LogMigrateEventObject>;

export type LogMigrateEventFilter = TypedEventFilter<LogMigrateEvent>;

export interface LogNewAllowanceEventObject {
  user: string;
  amount: BigNumber;
}
export type LogNewAllowanceEvent = TypedEvent<[string, BigNumber], LogNewAllowanceEventObject>;

export type LogNewAllowanceEventFilter = TypedEventFilter<LogNewAllowanceEvent>;

export interface LogNewBouncerEventObject {
  bouncer: string;
}
export type LogNewBouncerEvent = TypedEvent<[string], LogNewBouncerEventObject>;

export type LogNewBouncerEventFilter = TypedEventFilter<LogNewBouncerEvent>;

export interface LogNewDebtRatioEventObject {
  strategy: string;
  debtRatio: BigNumber;
}
export type LogNewDebtRatioEvent = TypedEvent<[string, BigNumber], LogNewDebtRatioEventObject>;

export type LogNewDebtRatioEventFilter = TypedEventFilter<LogNewDebtRatioEvent>;

export interface LogNewReleaseFactorEventObject {
  factor: BigNumber;
}
export type LogNewReleaseFactorEvent = TypedEvent<[BigNumber], LogNewReleaseFactorEventObject>;

export type LogNewReleaseFactorEventFilter = TypedEventFilter<LogNewReleaseFactorEvent>;

export interface LogNewRewardsEventObject {
  rewards: string;
}
export type LogNewRewardsEvent = TypedEvent<[string], LogNewRewardsEventObject>;

export type LogNewRewardsEventFilter = TypedEventFilter<LogNewRewardsEvent>;

export interface LogNewStrategyHarvestEventObject {
  loss: boolean;
  change: BigNumber;
}
export type LogNewStrategyHarvestEvent = TypedEvent<[boolean, BigNumber], LogNewStrategyHarvestEventObject>;

export type LogNewStrategyHarvestEventFilter = TypedEventFilter<LogNewStrategyHarvestEvent>;

export interface LogNewVaultFeeEventObject {
  vaultFee: BigNumber;
}
export type LogNewVaultFeeEvent = TypedEvent<[BigNumber], LogNewVaultFeeEventObject>;

export type LogNewVaultFeeEventFilter = TypedEventFilter<LogNewVaultFeeEvent>;

export interface LogRemoveFromWhitelistEventObject {
  user: string;
}
export type LogRemoveFromWhitelistEvent = TypedEvent<[string], LogRemoveFromWhitelistEventObject>;

export type LogRemoveFromWhitelistEventFilter = TypedEventFilter<LogRemoveFromWhitelistEvent>;

export interface LogStrategyAddedEventObject {
  strategy: string;
  debtRatio: BigNumber;
  minDebtPerHarvest: BigNumber;
  maxDebtPerHarvest: BigNumber;
}
export type LogStrategyAddedEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], LogStrategyAddedEventObject>;

export type LogStrategyAddedEventFilter = TypedEventFilter<LogStrategyAddedEvent>;

export interface LogStrategyAddedToQueueEventObject {
  strategy: string;
}
export type LogStrategyAddedToQueueEvent = TypedEvent<[string], LogStrategyAddedToQueueEventObject>;

export type LogStrategyAddedToQueueEventFilter = TypedEventFilter<LogStrategyAddedToQueueEvent>;

export interface LogStrategyMigratedEventObject {
  newStrategy: string;
  oldStrategy: string;
}
export type LogStrategyMigratedEvent = TypedEvent<[string, string], LogStrategyMigratedEventObject>;

export type LogStrategyMigratedEventFilter = TypedEventFilter<LogStrategyMigratedEvent>;

export interface LogStrategyRemovedFromQueueEventObject {
  strategy: string;
}
export type LogStrategyRemovedFromQueueEvent = TypedEvent<[string], LogStrategyRemovedFromQueueEventObject>;

export type LogStrategyRemovedFromQueueEventFilter = TypedEventFilter<LogStrategyRemovedFromQueueEvent>;

export interface LogStrategyReportedEventObject {
  strategy: string;
  gain: BigNumber;
  loss: BigNumber;
  debtPaid: BigNumber;
  totalGain: BigNumber;
  totalLoss: BigNumber;
  totalDebt: BigNumber;
  debtAdded: BigNumber;
  debtRatio: BigNumber;
}
export type LogStrategyReportedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LogStrategyReportedEventObject
>;

export type LogStrategyReportedEventFilter = TypedEventFilter<LogStrategyReportedEvent>;

export interface LogStrategyRevokedEventObject {
  strategy: string;
}
export type LogStrategyRevokedEvent = TypedEvent<[string], LogStrategyRevokedEventObject>;

export type LogStrategyRevokedEventFilter = TypedEventFilter<LogStrategyRevokedEvent>;

export interface LogStrategyStatusUpdateEventObject {
  strategy: string;
  status: boolean;
}
export type LogStrategyStatusUpdateEvent = TypedEvent<[string, boolean], LogStrategyStatusUpdateEventObject>;

export type LogStrategyStatusUpdateEventFilter = TypedEventFilter<LogStrategyStatusUpdateEvent>;

export interface LogStrategyUpdateMaxDebtPerHarvestEventObject {
  strategy: string;
  maxDebtPerHarvest: BigNumber;
}
export type LogStrategyUpdateMaxDebtPerHarvestEvent = TypedEvent<
  [string, BigNumber],
  LogStrategyUpdateMaxDebtPerHarvestEventObject
>;

export type LogStrategyUpdateMaxDebtPerHarvestEventFilter = TypedEventFilter<LogStrategyUpdateMaxDebtPerHarvestEvent>;

export interface LogStrategyUpdateMinDebtPerHarvestEventObject {
  strategy: string;
  minDebtPerHarvest: BigNumber;
}
export type LogStrategyUpdateMinDebtPerHarvestEvent = TypedEvent<
  [string, BigNumber],
  LogStrategyUpdateMinDebtPerHarvestEventObject
>;

export type LogStrategyUpdateMinDebtPerHarvestEventFilter = TypedEventFilter<LogStrategyUpdateMinDebtPerHarvestEvent>;

export interface LogUpdateWithdrawalQueueEventObject {
  queue: string[];
}
export type LogUpdateWithdrawalQueueEvent = TypedEvent<[string[]], LogUpdateWithdrawalQueueEventObject>;

export type LogUpdateWithdrawalQueueEventFilter = TypedEventFilter<LogUpdateWithdrawalQueueEvent>;

export interface LogWithdrawalEventObject {
  from: string;
  value: BigNumber;
  shares: BigNumber;
  totalLoss: BigNumber;
  allowance: BigNumber;
}
export type LogWithdrawalEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  LogWithdrawalEventObject
>;

export type LogWithdrawalEventFilter = TypedEventFilter<LogWithdrawalEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface GroLabsVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GroLabsVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE_ALLOWANCE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAXIMUM_STRATEGIES(overrides?: CallOverrides): Promise<[BigNumber]>;

    activateAllowance(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    activation(overrides?: CallOverrides): Promise<[BigNumber]>;

    addStrategy(
      _strategy: string,
      _debtRatio: BigNumberish,
      _minDebtPerHarvest: BigNumberish,
      _maxDebtPerHarvest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addStrategyToQueue(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addToWhitelist(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'allowance(address,address)'(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'allowance()'(overrides?: CallOverrides): Promise<[boolean]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bouncer(overrides?: CallOverrides): Promise<[string]>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    'creditAvailable()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    'creditAvailable(address)'(_strategy: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'debtOutstanding(address)'(_strategy: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'debtOutstanding()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    debtRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPricePerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStrategiesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStrategyAssets(_index: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { amount: BigNumber }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    lastReport(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedProfit(overrides?: CallOverrides): Promise<[BigNumber]>;

    migrateStrategy(
      _oldVersion: string,
      _newVersion: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    releaseFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeFromWhitelist(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    removeStrategyFromQueue(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    report(
      _gain: BigNumberish,
      _loss: BigNumberish,
      _debtPayment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeStrategy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    rewards(overrides?: CallOverrides): Promise<[string]>;

    setBouncer(
      _bouncer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDebtRatio(
      _strategy: string,
      _debtRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDebtRatios(
      _strategyDebtRatios: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDepositLimit(
      _newLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setProfitRelease(
      _factor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRewards(
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setUserAllowance(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setVaultFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setWithdrawalQueue(
      _queue: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    strategies(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        activation: BigNumber;
        active: boolean;
        debtRatio: BigNumber;
        minDebtPerHarvest: BigNumber;
        maxDebtPerHarvest: BigNumber;
        lastReport: BigNumber;
        totalDebt: BigNumber;
        totalGain: BigNumber;
        totalLoss: BigNumber;
      }
    >;

    strategyDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    strategyHarvest(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    strategyHarvestTrigger(
      _index: BigNumberish,
      _callCost: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    sweep(
      _token: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalEstimatedAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateStrategyMaxDebtPerHarvest(
      _strategy: string,
      _maxDebtPerHarvest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateStrategyMinDebtPerHarvest(
      _strategy: string,
      _minDebtPerHarvest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    userAllowance(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    vaultFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    withdraw(
      _shares: BigNumberish,
      _maxLoss: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawalQueue(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  BASE_ALLOWANCE(overrides?: CallOverrides): Promise<BigNumber>;

  MAXIMUM_STRATEGIES(overrides?: CallOverrides): Promise<BigNumber>;

  activateAllowance(
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  activation(overrides?: CallOverrides): Promise<BigNumber>;

  addStrategy(
    _strategy: string,
    _debtRatio: BigNumberish,
    _minDebtPerHarvest: BigNumberish,
    _maxDebtPerHarvest: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  addStrategyToQueue(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  addToWhitelist(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'allowance(address,address)'(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  'allowance()'(overrides?: CallOverrides): Promise<boolean>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  bouncer(overrides?: CallOverrides): Promise<string>;

  claimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  'creditAvailable()'(overrides?: CallOverrides): Promise<BigNumber>;

  'creditAvailable(address)'(_strategy: string, overrides?: CallOverrides): Promise<BigNumber>;

  'debtOutstanding(address)'(_strategy: string, overrides?: CallOverrides): Promise<BigNumber>;

  'debtOutstanding()'(overrides?: CallOverrides): Promise<BigNumber>;

  debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

  getPricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

  getStrategiesLength(overrides?: CallOverrides): Promise<BigNumber>;

  getStrategyAssets(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  lastReport(overrides?: CallOverrides): Promise<BigNumber>;

  lockedProfit(overrides?: CallOverrides): Promise<BigNumber>;

  migrateStrategy(
    _oldVersion: string,
    _newVersion: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  releaseFactor(overrides?: CallOverrides): Promise<BigNumber>;

  removeFromWhitelist(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  removeStrategyFromQueue(
    _strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  report(
    _gain: BigNumberish,
    _loss: BigNumberish,
    _debtPayment: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeStrategy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  rewards(overrides?: CallOverrides): Promise<string>;

  setBouncer(
    _bouncer: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setDebtRatio(
    _strategy: string,
    _debtRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setDebtRatios(
    _strategyDebtRatios: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setDepositLimit(
    _newLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setProfitRelease(
    _factor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRewards(
    _rewards: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setUserAllowance(
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setVaultFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setWithdrawalQueue(
    _queue: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  strategies(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      activation: BigNumber;
      active: boolean;
      debtRatio: BigNumber;
      minDebtPerHarvest: BigNumber;
      maxDebtPerHarvest: BigNumber;
      lastReport: BigNumber;
      totalDebt: BigNumber;
      totalGain: BigNumber;
      totalLoss: BigNumber;
    }
  >;

  strategyDebt(overrides?: CallOverrides): Promise<BigNumber>;

  strategyHarvest(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  strategyHarvestTrigger(_index: BigNumberish, _callCost: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  sweep(
    _token: string,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

  totalEstimatedAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateStrategyMaxDebtPerHarvest(
    _strategy: string,
    _maxDebtPerHarvest: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateStrategyMinDebtPerHarvest(
    _strategy: string,
    _minDebtPerHarvest: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  userAllowance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  vaultFee(overrides?: CallOverrides): Promise<BigNumber>;

  whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  withdraw(
    _shares: BigNumberish,
    _maxLoss: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawalQueue(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BASE_ALLOWANCE(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_STRATEGIES(overrides?: CallOverrides): Promise<BigNumber>;

    activateAllowance(_status: boolean, overrides?: CallOverrides): Promise<void>;

    activation(overrides?: CallOverrides): Promise<BigNumber>;

    addStrategy(
      _strategy: string,
      _debtRatio: BigNumberish,
      _minDebtPerHarvest: BigNumberish,
      _maxDebtPerHarvest: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    addStrategyToQueue(_strategy: string, overrides?: CallOverrides): Promise<void>;

    addToWhitelist(user: string, overrides?: CallOverrides): Promise<void>;

    'allowance(address,address)'(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'allowance()'(overrides?: CallOverrides): Promise<boolean>;

    approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    bouncer(overrides?: CallOverrides): Promise<string>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    'creditAvailable()'(overrides?: CallOverrides): Promise<BigNumber>;

    'creditAvailable(address)'(_strategy: string, overrides?: CallOverrides): Promise<BigNumber>;

    'debtOutstanding(address)'(_strategy: string, overrides?: CallOverrides): Promise<BigNumber>;

    'debtOutstanding()'(overrides?: CallOverrides): Promise<BigNumber>;

    debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getPricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    getStrategiesLength(overrides?: CallOverrides): Promise<BigNumber>;

    getStrategyAssets(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    lastReport(overrides?: CallOverrides): Promise<BigNumber>;

    lockedProfit(overrides?: CallOverrides): Promise<BigNumber>;

    migrateStrategy(_oldVersion: string, _newVersion: string, overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    releaseFactor(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromWhitelist(user: string, overrides?: CallOverrides): Promise<void>;

    removeStrategyFromQueue(_strategy: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    report(
      _gain: BigNumberish,
      _loss: BigNumberish,
      _debtPayment: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    revokeStrategy(overrides?: CallOverrides): Promise<void>;

    rewards(overrides?: CallOverrides): Promise<string>;

    setBouncer(_bouncer: string, overrides?: CallOverrides): Promise<void>;

    setDebtRatio(_strategy: string, _debtRatio: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setDebtRatios(_strategyDebtRatios: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    setDepositLimit(_newLimit: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setProfitRelease(_factor: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setRewards(_rewards: string, overrides?: CallOverrides): Promise<void>;

    setUserAllowance(_user: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setVaultFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setWithdrawalQueue(_queue: string[], overrides?: CallOverrides): Promise<void>;

    strategies(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        activation: BigNumber;
        active: boolean;
        debtRatio: BigNumber;
        minDebtPerHarvest: BigNumber;
        maxDebtPerHarvest: BigNumber;
        lastReport: BigNumber;
        totalDebt: BigNumber;
        totalGain: BigNumber;
        totalLoss: BigNumber;
      }
    >;

    strategyDebt(overrides?: CallOverrides): Promise<BigNumber>;

    strategyHarvest(_index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    strategyHarvestTrigger(_index: BigNumberish, _callCost: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    sweep(_token: string, _recipient: string, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    totalEstimatedAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(sender: string, recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    updateStrategyMaxDebtPerHarvest(
      _strategy: string,
      _maxDebtPerHarvest: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateStrategyMinDebtPerHarvest(
      _strategy: string,
      _minDebtPerHarvest: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    userAllowance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    vaultFee(overrides?: CallOverrides): Promise<BigNumber>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    withdraw(_shares: BigNumberish, _maxLoss: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalQueue(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;

    'LogAddToWhitelist(address)'(user?: string | null): LogAddToWhitelistEventFilter;
    LogAddToWhitelist(user?: string | null): LogAddToWhitelistEventFilter;

    'LogAllowanceStatus(bool)'(status?: null): LogAllowanceStatusEventFilter;
    LogAllowanceStatus(status?: null): LogAllowanceStatusEventFilter;

    'LogDebtRatios(uint256[])'(strategyRetios?: null): LogDebtRatiosEventFilter;
    LogDebtRatios(strategyRetios?: null): LogDebtRatiosEventFilter;

    'LogDeposit(address,uint256,uint256,uint256)'(
      from?: string | null,
      _amount?: null,
      shares?: null,
      allowance?: null,
    ): LogDepositEventFilter;
    LogDeposit(from?: string | null, _amount?: null, shares?: null, allowance?: null): LogDepositEventFilter;

    'LogDepositLimit(uint256)'(newLimit?: null): LogDepositLimitEventFilter;
    LogDepositLimit(newLimit?: null): LogDepositLimitEventFilter;

    'LogMigrate(address,address,uint256)'(parent?: null, child?: null, amount?: null): LogMigrateEventFilter;
    LogMigrate(parent?: null, child?: null, amount?: null): LogMigrateEventFilter;

    'LogNewAllowance(address,uint256)'(user?: null, amount?: null): LogNewAllowanceEventFilter;
    LogNewAllowance(user?: null, amount?: null): LogNewAllowanceEventFilter;

    'LogNewBouncer(address)'(bouncer?: null): LogNewBouncerEventFilter;
    LogNewBouncer(bouncer?: null): LogNewBouncerEventFilter;

    'LogNewDebtRatio(address,uint256)'(strategy?: string | null, debtRatio?: null): LogNewDebtRatioEventFilter;
    LogNewDebtRatio(strategy?: string | null, debtRatio?: null): LogNewDebtRatioEventFilter;

    'LogNewReleaseFactor(uint256)'(factor?: null): LogNewReleaseFactorEventFilter;
    LogNewReleaseFactor(factor?: null): LogNewReleaseFactorEventFilter;

    'LogNewRewards(address)'(rewards?: null): LogNewRewardsEventFilter;
    LogNewRewards(rewards?: null): LogNewRewardsEventFilter;

    'LogNewStrategyHarvest(bool,uint256)'(loss?: null, change?: null): LogNewStrategyHarvestEventFilter;
    LogNewStrategyHarvest(loss?: null, change?: null): LogNewStrategyHarvestEventFilter;

    'LogNewVaultFee(uint256)'(vaultFee?: null): LogNewVaultFeeEventFilter;
    LogNewVaultFee(vaultFee?: null): LogNewVaultFeeEventFilter;

    'LogRemoveFromWhitelist(address)'(user?: string | null): LogRemoveFromWhitelistEventFilter;
    LogRemoveFromWhitelist(user?: string | null): LogRemoveFromWhitelistEventFilter;

    'LogStrategyAdded(address,uint256,uint256,uint256)'(
      strategy?: string | null,
      debtRatio?: null,
      minDebtPerHarvest?: null,
      maxDebtPerHarvest?: null,
    ): LogStrategyAddedEventFilter;
    LogStrategyAdded(
      strategy?: string | null,
      debtRatio?: null,
      minDebtPerHarvest?: null,
      maxDebtPerHarvest?: null,
    ): LogStrategyAddedEventFilter;

    'LogStrategyAddedToQueue(address)'(strategy?: string | null): LogStrategyAddedToQueueEventFilter;
    LogStrategyAddedToQueue(strategy?: string | null): LogStrategyAddedToQueueEventFilter;

    'LogStrategyMigrated(address,address)'(
      newStrategy?: string | null,
      oldStrategy?: string | null,
    ): LogStrategyMigratedEventFilter;
    LogStrategyMigrated(newStrategy?: string | null, oldStrategy?: string | null): LogStrategyMigratedEventFilter;

    'LogStrategyRemovedFromQueue(address)'(strategy?: string | null): LogStrategyRemovedFromQueueEventFilter;
    LogStrategyRemovedFromQueue(strategy?: string | null): LogStrategyRemovedFromQueueEventFilter;

    'LogStrategyReported(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)'(
      strategy?: string | null,
      gain?: null,
      loss?: null,
      debtPaid?: null,
      totalGain?: null,
      totalLoss?: null,
      totalDebt?: null,
      debtAdded?: null,
      debtRatio?: null,
    ): LogStrategyReportedEventFilter;
    LogStrategyReported(
      strategy?: string | null,
      gain?: null,
      loss?: null,
      debtPaid?: null,
      totalGain?: null,
      totalLoss?: null,
      totalDebt?: null,
      debtAdded?: null,
      debtRatio?: null,
    ): LogStrategyReportedEventFilter;

    'LogStrategyRevoked(address)'(strategy?: string | null): LogStrategyRevokedEventFilter;
    LogStrategyRevoked(strategy?: string | null): LogStrategyRevokedEventFilter;

    'LogStrategyStatusUpdate(address,bool)'(
      strategy?: string | null,
      status?: null,
    ): LogStrategyStatusUpdateEventFilter;
    LogStrategyStatusUpdate(strategy?: string | null, status?: null): LogStrategyStatusUpdateEventFilter;

    'LogStrategyUpdateMaxDebtPerHarvest(address,uint256)'(
      strategy?: string | null,
      maxDebtPerHarvest?: null,
    ): LogStrategyUpdateMaxDebtPerHarvestEventFilter;
    LogStrategyUpdateMaxDebtPerHarvest(
      strategy?: string | null,
      maxDebtPerHarvest?: null,
    ): LogStrategyUpdateMaxDebtPerHarvestEventFilter;

    'LogStrategyUpdateMinDebtPerHarvest(address,uint256)'(
      strategy?: string | null,
      minDebtPerHarvest?: null,
    ): LogStrategyUpdateMinDebtPerHarvestEventFilter;
    LogStrategyUpdateMinDebtPerHarvest(
      strategy?: string | null,
      minDebtPerHarvest?: null,
    ): LogStrategyUpdateMinDebtPerHarvestEventFilter;

    'LogUpdateWithdrawalQueue(address[])'(queue?: null): LogUpdateWithdrawalQueueEventFilter;
    LogUpdateWithdrawalQueue(queue?: null): LogUpdateWithdrawalQueueEventFilter;

    'LogWithdrawal(address,uint256,uint256,uint256,uint256)'(
      from?: string | null,
      value?: null,
      shares?: null,
      totalLoss?: null,
      allowance?: null,
    ): LogWithdrawalEventFilter;
    LogWithdrawal(
      from?: string | null,
      value?: null,
      shares?: null,
      totalLoss?: null,
      allowance?: null,
    ): LogWithdrawalEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
  };

  estimateGas: {
    BASE_ALLOWANCE(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_STRATEGIES(overrides?: CallOverrides): Promise<BigNumber>;

    activateAllowance(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    activation(overrides?: CallOverrides): Promise<BigNumber>;

    addStrategy(
      _strategy: string,
      _debtRatio: BigNumberish,
      _minDebtPerHarvest: BigNumberish,
      _maxDebtPerHarvest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    addStrategyToQueue(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    addToWhitelist(user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'allowance(address,address)'(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    'allowance()'(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    bouncer(overrides?: CallOverrides): Promise<BigNumber>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'creditAvailable()'(overrides?: CallOverrides): Promise<BigNumber>;

    'creditAvailable(address)'(_strategy: string, overrides?: CallOverrides): Promise<BigNumber>;

    'debtOutstanding(address)'(_strategy: string, overrides?: CallOverrides): Promise<BigNumber>;

    'debtOutstanding()'(overrides?: CallOverrides): Promise<BigNumber>;

    debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    deposit(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getPricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    getStrategiesLength(overrides?: CallOverrides): Promise<BigNumber>;

    getStrategyAssets(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    lastReport(overrides?: CallOverrides): Promise<BigNumber>;

    lockedProfit(overrides?: CallOverrides): Promise<BigNumber>;

    migrateStrategy(
      _oldVersion: string,
      _newVersion: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    releaseFactor(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromWhitelist(user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    removeStrategyFromQueue(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    report(
      _gain: BigNumberish,
      _loss: BigNumberish,
      _debtPayment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeStrategy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    rewards(overrides?: CallOverrides): Promise<BigNumber>;

    setBouncer(_bouncer: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setDebtRatio(
      _strategy: string,
      _debtRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setDebtRatios(
      _strategyDebtRatios: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setDepositLimit(
      _newLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setProfitRelease(
      _factor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setRewards(_rewards: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setUserAllowance(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setVaultFee(_fee: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setWithdrawalQueue(
      _queue: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    strategies(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    strategyDebt(overrides?: CallOverrides): Promise<BigNumber>;

    strategyHarvest(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    strategyHarvestTrigger(
      _index: BigNumberish,
      _callCost: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    sweep(
      _token: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    totalEstimatedAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateStrategyMaxDebtPerHarvest(
      _strategy: string,
      _maxDebtPerHarvest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateStrategyMinDebtPerHarvest(
      _strategy: string,
      _minDebtPerHarvest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    userAllowance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    vaultFee(overrides?: CallOverrides): Promise<BigNumber>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _shares: BigNumberish,
      _maxLoss: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawalQueue(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_ALLOWANCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAXIMUM_STRATEGIES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activateAllowance(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    activation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addStrategy(
      _strategy: string,
      _debtRatio: BigNumberish,
      _minDebtPerHarvest: BigNumberish,
      _maxDebtPerHarvest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    addStrategyToQueue(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    addToWhitelist(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'allowance()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bouncer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'creditAvailable()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'creditAvailable(address)'(_strategy: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'debtOutstanding(address)'(_strategy: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'debtOutstanding()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPricePerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStrategiesLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStrategyAssets(_index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    lastReport(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedProfit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateStrategy(
      _oldVersion: string,
      _newVersion: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromWhitelist(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    removeStrategyFromQueue(
      _strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    report(
      _gain: BigNumberish,
      _loss: BigNumberish,
      _debtPayment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeStrategy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    rewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBouncer(
      _bouncer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setDebtRatio(
      _strategy: string,
      _debtRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setDebtRatios(
      _strategyDebtRatios: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setDepositLimit(
      _newLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setProfitRelease(
      _factor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRewards(
      _rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setUserAllowance(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setVaultFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setWithdrawalQueue(
      _queue: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    strategies(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategyDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategyHarvest(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    strategyHarvestTrigger(
      _index: BigNumberish,
      _callCost: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    sweep(
      _token: string,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalEstimatedAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateStrategyMaxDebtPerHarvest(
      _strategy: string,
      _maxDebtPerHarvest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateStrategyMinDebtPerHarvest(
      _strategy: string,
      _minDebtPerHarvest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userAllowance(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _shares: BigNumberish,
      _maxLoss: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawalQueue(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
