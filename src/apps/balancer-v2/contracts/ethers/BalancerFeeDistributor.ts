/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface BalancerFeeDistributorInterface extends utils.Interface {
  functions: {
    'checkpoint()': FunctionFragment;
    'checkpointToken(address)': FunctionFragment;
    'checkpointTokens(address[])': FunctionFragment;
    'checkpointUser(address)': FunctionFragment;
    'claimToken(address,address)': FunctionFragment;
    'claimTokens(address,address[])': FunctionFragment;
    'depositToken(address,uint256)': FunctionFragment;
    'depositTokens(address[],uint256[])': FunctionFragment;
    'getDomainSeparator()': FunctionFragment;
    'getNextNonce(address)': FunctionFragment;
    'getTimeCursor()': FunctionFragment;
    'getTokenLastBalance(address)': FunctionFragment;
    'getTokenTimeCursor(address)': FunctionFragment;
    'getTokensDistributedInWeek(address,uint256)': FunctionFragment;
    'getTotalSupplyAtTimestamp(uint256)': FunctionFragment;
    'getUserBalanceAtTimestamp(address,uint256)': FunctionFragment;
    'getUserTimeCursor(address)': FunctionFragment;
    'getUserTokenTimeCursor(address,address)': FunctionFragment;
    'getVotingEscrow()': FunctionFragment;
    'isOnlyCallerEnabled(address)': FunctionFragment;
    'setOnlyCallerCheck(bool)': FunctionFragment;
    'setOnlyCallerCheckWithSignature(address,bool,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'checkpoint'
      | 'checkpointToken'
      | 'checkpointTokens'
      | 'checkpointUser'
      | 'claimToken'
      | 'claimTokens'
      | 'depositToken'
      | 'depositTokens'
      | 'getDomainSeparator'
      | 'getNextNonce'
      | 'getTimeCursor'
      | 'getTokenLastBalance'
      | 'getTokenTimeCursor'
      | 'getTokensDistributedInWeek'
      | 'getTotalSupplyAtTimestamp'
      | 'getUserBalanceAtTimestamp'
      | 'getUserTimeCursor'
      | 'getUserTokenTimeCursor'
      | 'getVotingEscrow'
      | 'isOnlyCallerEnabled'
      | 'setOnlyCallerCheck'
      | 'setOnlyCallerCheckWithSignature',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'checkpoint', values?: undefined): string;
  encodeFunctionData(functionFragment: 'checkpointToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'checkpointTokens', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'checkpointUser', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'claimToken', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'claimTokens',
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositToken',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositTokens',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(functionFragment: 'getDomainSeparator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getNextNonce', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getTimeCursor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getTokenLastBalance', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getTokenTimeCursor', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getTokensDistributedInWeek',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getTotalSupplyAtTimestamp', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getUserBalanceAtTimestamp',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getUserTimeCursor', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getUserTokenTimeCursor',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getVotingEscrow', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isOnlyCallerEnabled', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setOnlyCallerCheck', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(
    functionFragment: 'setOnlyCallerCheckWithSignature',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>, PromiseOrValue<BytesLike>],
  ): string;

  decodeFunctionResult(functionFragment: 'checkpoint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkpointToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkpointTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkpointUser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDomainSeparator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNextNonce', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTimeCursor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTokenLastBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTokenTimeCursor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTokensDistributedInWeek', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalSupplyAtTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserBalanceAtTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserTimeCursor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserTokenTimeCursor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVotingEscrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isOnlyCallerEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOnlyCallerCheck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOnlyCallerCheckWithSignature', data: BytesLike): Result;

  events: {
    'OnlyCallerOptIn(address,bool)': EventFragment;
    'TokenCheckpointed(address,uint256,uint256)': EventFragment;
    'TokensClaimed(address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OnlyCallerOptIn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenCheckpointed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokensClaimed'): EventFragment;
}

export interface OnlyCallerOptInEventObject {
  user: string;
  enabled: boolean;
}
export type OnlyCallerOptInEvent = TypedEvent<[string, boolean], OnlyCallerOptInEventObject>;

export type OnlyCallerOptInEventFilter = TypedEventFilter<OnlyCallerOptInEvent>;

export interface TokenCheckpointedEventObject {
  token: string;
  amount: BigNumber;
  lastCheckpointTimestamp: BigNumber;
}
export type TokenCheckpointedEvent = TypedEvent<[string, BigNumber, BigNumber], TokenCheckpointedEventObject>;

export type TokenCheckpointedEventFilter = TypedEventFilter<TokenCheckpointedEvent>;

export interface TokensClaimedEventObject {
  user: string;
  token: string;
  amount: BigNumber;
  userTokenTimeCursor: BigNumber;
}
export type TokensClaimedEvent = TypedEvent<[string, string, BigNumber, BigNumber], TokensClaimedEventObject>;

export type TokensClaimedEventFilter = TypedEventFilter<TokensClaimedEvent>;

export interface BalancerFeeDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BalancerFeeDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkpoint(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    checkpointToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    checkpointTokens(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    checkpointUser(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimToken(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimTokens(
      user: PromiseOrValue<string>,
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositToken(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositTokens(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getDomainSeparator(overrides?: CallOverrides): Promise<[string]>;

    getNextNonce(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTimeCursor(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenLastBalance(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenTimeCursor(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokensDistributedInWeek(
      token: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getTotalSupplyAtTimestamp(timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserBalanceAtTimestamp(
      user: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getUserTimeCursor(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserTokenTimeCursor(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getVotingEscrow(overrides?: CallOverrides): Promise<[string]>;

    isOnlyCallerEnabled(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    setOnlyCallerCheck(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setOnlyCallerCheckWithSignature(
      user: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  checkpoint(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  checkpointToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  checkpointTokens(
    tokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  checkpointUser(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimToken(
    user: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimTokens(
    user: PromiseOrValue<string>,
    tokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositToken(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositTokens(
    tokens: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getDomainSeparator(overrides?: CallOverrides): Promise<string>;

  getNextNonce(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getTimeCursor(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenLastBalance(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getTokenTimeCursor(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getTokensDistributedInWeek(
    token: PromiseOrValue<string>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getTotalSupplyAtTimestamp(timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getUserBalanceAtTimestamp(
    user: PromiseOrValue<string>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getUserTimeCursor(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getUserTokenTimeCursor(
    user: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getVotingEscrow(overrides?: CallOverrides): Promise<string>;

  isOnlyCallerEnabled(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  setOnlyCallerCheck(
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setOnlyCallerCheckWithSignature(
    user: PromiseOrValue<string>,
    enabled: PromiseOrValue<boolean>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    checkpoint(overrides?: CallOverrides): Promise<void>;

    checkpointToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    checkpointTokens(tokens: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    checkpointUser(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    claimToken(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    claimTokens(
      user: PromiseOrValue<string>,
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    depositToken(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositTokens(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    getDomainSeparator(overrides?: CallOverrides): Promise<string>;

    getNextNonce(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTimeCursor(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenLastBalance(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTokenTimeCursor(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTokensDistributedInWeek(
      token: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getTotalSupplyAtTimestamp(timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getUserBalanceAtTimestamp(
      user: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserTimeCursor(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getUserTokenTimeCursor(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getVotingEscrow(overrides?: CallOverrides): Promise<string>;

    isOnlyCallerEnabled(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    setOnlyCallerCheck(enabled: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setOnlyCallerCheckWithSignature(
      user: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'OnlyCallerOptIn(address,bool)'(user?: null, enabled?: null): OnlyCallerOptInEventFilter;
    OnlyCallerOptIn(user?: null, enabled?: null): OnlyCallerOptInEventFilter;

    'TokenCheckpointed(address,uint256,uint256)'(
      token?: null,
      amount?: null,
      lastCheckpointTimestamp?: null,
    ): TokenCheckpointedEventFilter;
    TokenCheckpointed(token?: null, amount?: null, lastCheckpointTimestamp?: null): TokenCheckpointedEventFilter;

    'TokensClaimed(address,address,uint256,uint256)'(
      user?: null,
      token?: null,
      amount?: null,
      userTokenTimeCursor?: null,
    ): TokensClaimedEventFilter;
    TokensClaimed(user?: null, token?: null, amount?: null, userTokenTimeCursor?: null): TokensClaimedEventFilter;
  };

  estimateGas: {
    checkpoint(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    checkpointToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    checkpointTokens(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    checkpointUser(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimToken(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimTokens(
      user: PromiseOrValue<string>,
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositToken(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositTokens(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getDomainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    getNextNonce(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTimeCursor(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenLastBalance(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTokenTimeCursor(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTokensDistributedInWeek(
      token: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getTotalSupplyAtTimestamp(timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getUserBalanceAtTimestamp(
      user: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserTimeCursor(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getUserTokenTimeCursor(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getVotingEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    isOnlyCallerEnabled(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    setOnlyCallerCheck(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setOnlyCallerCheckWithSignature(
      user: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkpoint(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    checkpointToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    checkpointTokens(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    checkpointUser(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimToken(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimTokens(
      user: PromiseOrValue<string>,
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositToken(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositTokens(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getDomainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNextNonce(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTimeCursor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenLastBalance(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenTimeCursor(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokensDistributedInWeek(
      token: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTotalSupplyAtTimestamp(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserBalanceAtTimestamp(
      user: PromiseOrValue<string>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserTimeCursor(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserTokenTimeCursor(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getVotingEscrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOnlyCallerEnabled(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOnlyCallerCheck(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setOnlyCallerCheckWithSignature(
      user: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
