/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface BalancerChildChainGaugeFactoryInterface extends utils.Interface {
  functions: {
    'create(address)': FunctionFragment;
    'getChildChainStreamerImplementation()': FunctionFragment;
    'getGaugeImplementation()': FunctionFragment;
    'getGaugePool(address)': FunctionFragment;
    'getGaugeStreamer(address)': FunctionFragment;
    'getPoolGauge(address)': FunctionFragment;
    'getPoolStreamer(address)': FunctionFragment;
    'isGaugeFromFactory(address)': FunctionFragment;
    'isStreamerFromFactory(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'create'
      | 'getChildChainStreamerImplementation'
      | 'getGaugeImplementation'
      | 'getGaugePool'
      | 'getGaugeStreamer'
      | 'getPoolGauge'
      | 'getPoolStreamer'
      | 'isGaugeFromFactory'
      | 'isStreamerFromFactory',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'create', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getChildChainStreamerImplementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getGaugeImplementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getGaugePool', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getGaugeStreamer', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getPoolGauge', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getPoolStreamer', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isGaugeFromFactory', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isStreamerFromFactory', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'create', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getChildChainStreamerImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getGaugeImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getGaugePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getGaugeStreamer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolGauge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolStreamer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isGaugeFromFactory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isStreamerFromFactory', data: BytesLike): Result;

  events: {
    'RewardsOnlyGaugeCreated(address,address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'RewardsOnlyGaugeCreated'): EventFragment;
}

export interface RewardsOnlyGaugeCreatedEventObject {
  gauge: string;
  pool: string;
  streamer: string;
}
export type RewardsOnlyGaugeCreatedEvent = TypedEvent<[string, string, string], RewardsOnlyGaugeCreatedEventObject>;

export type RewardsOnlyGaugeCreatedEventFilter = TypedEventFilter<RewardsOnlyGaugeCreatedEvent>;

export interface BalancerChildChainGaugeFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BalancerChildChainGaugeFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    create(
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getChildChainStreamerImplementation(overrides?: CallOverrides): Promise<[string]>;

    getGaugeImplementation(overrides?: CallOverrides): Promise<[string]>;

    getGaugePool(gauge: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    getGaugeStreamer(gauge: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    getPoolGauge(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    getPoolStreamer(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    isGaugeFromFactory(gauge: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isStreamerFromFactory(streamer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
  };

  create(
    pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getChildChainStreamerImplementation(overrides?: CallOverrides): Promise<string>;

  getGaugeImplementation(overrides?: CallOverrides): Promise<string>;

  getGaugePool(gauge: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  getGaugeStreamer(gauge: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  getPoolGauge(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  getPoolStreamer(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  isGaugeFromFactory(gauge: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isStreamerFromFactory(streamer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    create(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    getChildChainStreamerImplementation(overrides?: CallOverrides): Promise<string>;

    getGaugeImplementation(overrides?: CallOverrides): Promise<string>;

    getGaugePool(gauge: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    getGaugeStreamer(gauge: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    getPoolGauge(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    getPoolStreamer(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    isGaugeFromFactory(gauge: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isStreamerFromFactory(streamer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    'RewardsOnlyGaugeCreated(address,address,address)'(
      gauge?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      streamer?: null,
    ): RewardsOnlyGaugeCreatedEventFilter;
    RewardsOnlyGaugeCreated(
      gauge?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      streamer?: null,
    ): RewardsOnlyGaugeCreatedEventFilter;
  };

  estimateGas: {
    create(pool: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    getChildChainStreamerImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    getGaugeImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    getGaugePool(gauge: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getGaugeStreamer(gauge: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolGauge(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolStreamer(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isGaugeFromFactory(gauge: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isStreamerFromFactory(streamer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    create(
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getChildChainStreamerImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGaugeImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGaugePool(gauge: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGaugeStreamer(gauge: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolGauge(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolStreamer(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isGaugeFromFactory(gauge: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isStreamerFromFactory(streamer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
