/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface BalancerAaveLinearPoolFactoryInterface extends utils.Interface {
  functions: {
    'create(string,string,address,address,uint256,uint256,address)': FunctionFragment;
    'getCreationCode()': FunctionFragment;
    'getCreationCodeContracts()': FunctionFragment;
    'getPauseConfiguration()': FunctionFragment;
    'getVault()': FunctionFragment;
    'isPoolFromFactory(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'create'
      | 'getCreationCode'
      | 'getCreationCodeContracts'
      | 'getPauseConfiguration'
      | 'getVault'
      | 'isPoolFromFactory',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'create',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'getCreationCode', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getCreationCodeContracts', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPauseConfiguration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getVault', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isPoolFromFactory', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'create', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCreationCode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCreationCodeContracts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPauseConfiguration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isPoolFromFactory', data: BytesLike): Result;

  events: {
    'PoolCreated(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'PoolCreated'): EventFragment;
}

export interface PoolCreatedEventObject {
  pool: string;
}
export type PoolCreatedEvent = TypedEvent<[string], PoolCreatedEventObject>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export interface BalancerAaveLinearPoolFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BalancerAaveLinearPoolFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    create(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      mainToken: PromiseOrValue<string>,
      wrappedToken: PromiseOrValue<string>,
      upperTarget: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getCreationCode(overrides?: CallOverrides): Promise<[string]>;

    getCreationCodeContracts(
      overrides?: CallOverrides,
    ): Promise<[string, string] & { contractA: string; contractB: string }>;

    getPauseConfiguration(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        pauseWindowDuration: BigNumber;
        bufferPeriodDuration: BigNumber;
      }
    >;

    getVault(overrides?: CallOverrides): Promise<[string]>;

    isPoolFromFactory(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
  };

  create(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    mainToken: PromiseOrValue<string>,
    wrappedToken: PromiseOrValue<string>,
    upperTarget: PromiseOrValue<BigNumberish>,
    swapFeePercentage: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getCreationCode(overrides?: CallOverrides): Promise<string>;

  getCreationCodeContracts(
    overrides?: CallOverrides,
  ): Promise<[string, string] & { contractA: string; contractB: string }>;

  getPauseConfiguration(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber] & {
      pauseWindowDuration: BigNumber;
      bufferPeriodDuration: BigNumber;
    }
  >;

  getVault(overrides?: CallOverrides): Promise<string>;

  isPoolFromFactory(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    create(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      mainToken: PromiseOrValue<string>,
      wrappedToken: PromiseOrValue<string>,
      upperTarget: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getCreationCode(overrides?: CallOverrides): Promise<string>;

    getCreationCodeContracts(
      overrides?: CallOverrides,
    ): Promise<[string, string] & { contractA: string; contractB: string }>;

    getPauseConfiguration(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        pauseWindowDuration: BigNumber;
        bufferPeriodDuration: BigNumber;
      }
    >;

    getVault(overrides?: CallOverrides): Promise<string>;

    isPoolFromFactory(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    'PoolCreated(address)'(pool?: PromiseOrValue<string> | null): PoolCreatedEventFilter;
    PoolCreated(pool?: PromiseOrValue<string> | null): PoolCreatedEventFilter;
  };

  estimateGas: {
    create(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      mainToken: PromiseOrValue<string>,
      wrappedToken: PromiseOrValue<string>,
      upperTarget: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getCreationCode(overrides?: CallOverrides): Promise<BigNumber>;

    getCreationCodeContracts(overrides?: CallOverrides): Promise<BigNumber>;

    getPauseConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    isPoolFromFactory(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    create(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      mainToken: PromiseOrValue<string>,
      wrappedToken: PromiseOrValue<string>,
      upperTarget: PromiseOrValue<BigNumberish>,
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getCreationCode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCreationCodeContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPauseConfiguration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPoolFromFactory(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
