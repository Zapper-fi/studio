/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace ComposableStablePool {
  export type NewPoolParamsStruct = {
    vault: PromiseOrValue<string>;
    protocolFeeProvider: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    tokens: PromiseOrValue<string>[];
    rateProviders: PromiseOrValue<string>[];
    tokenRateCacheDurations: PromiseOrValue<BigNumberish>[];
    exemptFromYieldProtocolFeeFlags: PromiseOrValue<boolean>[];
    amplificationParameter: PromiseOrValue<BigNumberish>;
    swapFeePercentage: PromiseOrValue<BigNumberish>;
    pauseWindowDuration: PromiseOrValue<BigNumberish>;
    bufferPeriodDuration: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
  };

  export type NewPoolParamsStructOutput = [
    string,
    string,
    string,
    string,
    string[],
    string[],
    BigNumber[],
    boolean[],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
  ] & {
    vault: string;
    protocolFeeProvider: string;
    name: string;
    symbol: string;
    tokens: string[];
    rateProviders: string[];
    tokenRateCacheDurations: BigNumber[];
    exemptFromYieldProtocolFeeFlags: boolean[];
    amplificationParameter: BigNumber;
    swapFeePercentage: BigNumber;
    pauseWindowDuration: BigNumber;
    bufferPeriodDuration: BigNumber;
    owner: string;
  };
}

export declare namespace IPoolSwapStructs {
  export type SwapRequestStruct = {
    kind: PromiseOrValue<BigNumberish>;
    tokenIn: PromiseOrValue<string>;
    tokenOut: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    poolId: PromiseOrValue<BytesLike>;
    lastChangeBlock: PromiseOrValue<BigNumberish>;
    from: PromiseOrValue<string>;
    to: PromiseOrValue<string>;
    userData: PromiseOrValue<BytesLike>;
  };

  export type SwapRequestStructOutput = [
    number,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    string,
  ] & {
    kind: number;
    tokenIn: string;
    tokenOut: string;
    amount: BigNumber;
    poolId: string;
    lastChangeBlock: BigNumber;
    from: string;
    to: string;
    userData: string;
  };
}

export interface BalancerComposableStablePoolInterface extends utils.Interface {
  functions: {
    'DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL()': FunctionFragment;
    'DOMAIN_SEPARATOR()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'disableRecoveryMode()': FunctionFragment;
    'enableRecoveryMode()': FunctionFragment;
    'getActionId(bytes4)': FunctionFragment;
    'getActualSupply()': FunctionFragment;
    'getAmplificationParameter()': FunctionFragment;
    'getAuthorizer()': FunctionFragment;
    'getBptIndex()': FunctionFragment;
    'getDomainSeparator()': FunctionFragment;
    'getLastJoinExitData()': FunctionFragment;
    'getMinimumBpt()': FunctionFragment;
    'getNextNonce(address)': FunctionFragment;
    'getOwner()': FunctionFragment;
    'getPausedState()': FunctionFragment;
    'getPoolId()': FunctionFragment;
    'getProtocolFeePercentageCache(uint256)': FunctionFragment;
    'getProtocolFeesCollector()': FunctionFragment;
    'getProtocolSwapFeeDelegation()': FunctionFragment;
    'getRate()': FunctionFragment;
    'getRateProviders()': FunctionFragment;
    'getScalingFactors()': FunctionFragment;
    'getSwapFeePercentage()': FunctionFragment;
    'getTokenRate(address)': FunctionFragment;
    'getTokenRateCache(address)': FunctionFragment;
    'getVault()': FunctionFragment;
    'inRecoveryMode()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'isTokenExemptFromYieldProtocolFee(address)': FunctionFragment;
    'name()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)': FunctionFragment;
    'onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)': FunctionFragment;
    'onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256[],uint256,uint256)': FunctionFragment;
    'pause()': FunctionFragment;
    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)': FunctionFragment;
    'queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)': FunctionFragment;
    'setAssetManagerPoolConfig(address,bytes)': FunctionFragment;
    'setSwapFeePercentage(uint256)': FunctionFragment;
    'setTokenRateCacheDuration(address,uint256)': FunctionFragment;
    'startAmplificationParameterUpdate(uint256,uint256)': FunctionFragment;
    'stopAmplificationParameterUpdate()': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'unpause()': FunctionFragment;
    'updateProtocolFeePercentageCache()': FunctionFragment;
    'updateTokenRateCache(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL'
      | 'DOMAIN_SEPARATOR'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'decimals'
      | 'decreaseAllowance'
      | 'disableRecoveryMode'
      | 'enableRecoveryMode'
      | 'getActionId'
      | 'getActualSupply'
      | 'getAmplificationParameter'
      | 'getAuthorizer'
      | 'getBptIndex'
      | 'getDomainSeparator'
      | 'getLastJoinExitData'
      | 'getMinimumBpt'
      | 'getNextNonce'
      | 'getOwner'
      | 'getPausedState'
      | 'getPoolId'
      | 'getProtocolFeePercentageCache'
      | 'getProtocolFeesCollector'
      | 'getProtocolSwapFeeDelegation'
      | 'getRate'
      | 'getRateProviders'
      | 'getScalingFactors'
      | 'getSwapFeePercentage'
      | 'getTokenRate'
      | 'getTokenRateCache'
      | 'getVault'
      | 'inRecoveryMode'
      | 'increaseAllowance'
      | 'isTokenExemptFromYieldProtocolFee'
      | 'name'
      | 'nonces'
      | 'onExitPool'
      | 'onJoinPool'
      | 'onSwap'
      | 'pause'
      | 'permit'
      | 'queryExit'
      | 'queryJoin'
      | 'setAssetManagerPoolConfig'
      | 'setSwapFeePercentage'
      | 'setTokenRateCacheDuration'
      | 'startAmplificationParameterUpdate'
      | 'stopAmplificationParameterUpdate'
      | 'symbol'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'unpause'
      | 'updateProtocolFeePercentageCache'
      | 'updateTokenRateCache',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'disableRecoveryMode', values?: undefined): string;
  encodeFunctionData(functionFragment: 'enableRecoveryMode', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getActionId', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'getActualSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAmplificationParameter', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAuthorizer', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getBptIndex', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getDomainSeparator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLastJoinExitData', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMinimumBpt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getNextNonce', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPausedState', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPoolId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getProtocolFeePercentageCache', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getProtocolFeesCollector', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getProtocolSwapFeeDelegation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRateProviders', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getScalingFactors', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getSwapFeePercentage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getTokenRate', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getTokenRateCache', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getVault', values?: undefined): string;
  encodeFunctionData(functionFragment: 'inRecoveryMode', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'isTokenExemptFromYieldProtocolFee', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'onExitPool',
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'onJoinPool',
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'onSwap',
    values: [
      IPoolSwapStructs.SwapRequestStruct,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'permit',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'queryExit',
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'queryJoin',
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'setAssetManagerPoolConfig',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'setSwapFeePercentage', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setTokenRateCacheDuration',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'startAmplificationParameterUpdate',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'stopAmplificationParameterUpdate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateProtocolFeePercentageCache', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateTokenRateCache', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableRecoveryMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableRecoveryMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getActionId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getActualSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAmplificationParameter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAuthorizer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBptIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDomainSeparator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLastJoinExitData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMinimumBpt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNextNonce', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPausedState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProtocolFeePercentageCache', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProtocolFeesCollector', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProtocolSwapFeeDelegation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRateProviders', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getScalingFactors', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSwapFeePercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTokenRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTokenRateCache', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'inRecoveryMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isTokenExemptFromYieldProtocolFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onExitPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onJoinPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onSwap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryExit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryJoin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAssetManagerPoolConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSwapFeePercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTokenRateCacheDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startAmplificationParameterUpdate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stopAmplificationParameterUpdate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateProtocolFeePercentageCache', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateTokenRateCache', data: BytesLike): Result;

  events: {
    'AmpUpdateStarted(uint256,uint256,uint256,uint256)': EventFragment;
    'AmpUpdateStopped(uint256)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'PausedStateChanged(bool)': EventFragment;
    'ProtocolFeePercentageCacheUpdated(uint256,uint256)': EventFragment;
    'RecoveryModeStateChanged(bool)': EventFragment;
    'SwapFeePercentageChanged(uint256)': EventFragment;
    'TokenRateCacheUpdated(uint256,uint256)': EventFragment;
    'TokenRateProviderSet(uint256,address,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AmpUpdateStarted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AmpUpdateStopped'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PausedStateChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolFeePercentageCacheUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RecoveryModeStateChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SwapFeePercentageChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenRateCacheUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenRateProviderSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface AmpUpdateStartedEventObject {
  startValue: BigNumber;
  endValue: BigNumber;
  startTime: BigNumber;
  endTime: BigNumber;
}
export type AmpUpdateStartedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  AmpUpdateStartedEventObject
>;

export type AmpUpdateStartedEventFilter = TypedEventFilter<AmpUpdateStartedEvent>;

export interface AmpUpdateStoppedEventObject {
  currentValue: BigNumber;
}
export type AmpUpdateStoppedEvent = TypedEvent<[BigNumber], AmpUpdateStoppedEventObject>;

export type AmpUpdateStoppedEventFilter = TypedEventFilter<AmpUpdateStoppedEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface PausedStateChangedEventObject {
  paused: boolean;
}
export type PausedStateChangedEvent = TypedEvent<[boolean], PausedStateChangedEventObject>;

export type PausedStateChangedEventFilter = TypedEventFilter<PausedStateChangedEvent>;

export interface ProtocolFeePercentageCacheUpdatedEventObject {
  feeType: BigNumber;
  protocolFeePercentage: BigNumber;
}
export type ProtocolFeePercentageCacheUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ProtocolFeePercentageCacheUpdatedEventObject
>;

export type ProtocolFeePercentageCacheUpdatedEventFilter = TypedEventFilter<ProtocolFeePercentageCacheUpdatedEvent>;

export interface RecoveryModeStateChangedEventObject {
  enabled: boolean;
}
export type RecoveryModeStateChangedEvent = TypedEvent<[boolean], RecoveryModeStateChangedEventObject>;

export type RecoveryModeStateChangedEventFilter = TypedEventFilter<RecoveryModeStateChangedEvent>;

export interface SwapFeePercentageChangedEventObject {
  swapFeePercentage: BigNumber;
}
export type SwapFeePercentageChangedEvent = TypedEvent<[BigNumber], SwapFeePercentageChangedEventObject>;

export type SwapFeePercentageChangedEventFilter = TypedEventFilter<SwapFeePercentageChangedEvent>;

export interface TokenRateCacheUpdatedEventObject {
  tokenIndex: BigNumber;
  rate: BigNumber;
}
export type TokenRateCacheUpdatedEvent = TypedEvent<[BigNumber, BigNumber], TokenRateCacheUpdatedEventObject>;

export type TokenRateCacheUpdatedEventFilter = TypedEventFilter<TokenRateCacheUpdatedEvent>;

export interface TokenRateProviderSetEventObject {
  tokenIndex: BigNumber;
  provider: string;
  cacheDuration: BigNumber;
}
export type TokenRateProviderSetEvent = TypedEvent<[BigNumber, string, BigNumber], TokenRateProviderSetEventObject>;

export type TokenRateProviderSetEventFilter = TypedEventFilter<TokenRateProviderSetEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface BalancerComposableStablePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BalancerComposableStablePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL(overrides?: CallOverrides): Promise<[BigNumber]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    disableRecoveryMode(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    enableRecoveryMode(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    getActionId(selector: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    getActualSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAmplificationParameter(overrides?: CallOverrides): Promise<
      [BigNumber, boolean, BigNumber] & {
        value: BigNumber;
        isUpdating: boolean;
        precision: BigNumber;
      }
    >;

    getAuthorizer(overrides?: CallOverrides): Promise<[string]>;

    getBptIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDomainSeparator(overrides?: CallOverrides): Promise<[string]>;

    getLastJoinExitData(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        lastJoinExitAmplification: BigNumber;
        lastPostJoinExitInvariant: BigNumber;
      }
    >;

    getMinimumBpt(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNextNonce(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getPausedState(overrides?: CallOverrides): Promise<
      [boolean, BigNumber, BigNumber] & {
        paused: boolean;
        pauseWindowEndTime: BigNumber;
        bufferPeriodEndTime: BigNumber;
      }
    >;

    getPoolId(overrides?: CallOverrides): Promise<[string]>;

    getProtocolFeePercentageCache(
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getProtocolFeesCollector(overrides?: CallOverrides): Promise<[string]>;

    getProtocolSwapFeeDelegation(overrides?: CallOverrides): Promise<[boolean]>;

    getRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRateProviders(overrides?: CallOverrides): Promise<[string[]]>;

    getScalingFactors(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getSwapFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenRate(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenRateCache(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        rate: BigNumber;
        oldRate: BigNumber;
        duration: BigNumber;
        expires: BigNumber;
      }
    >;

    getVault(overrides?: CallOverrides): Promise<[string]>;

    inRecoveryMode(overrides?: CallOverrides): Promise<[boolean]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isTokenExemptFromYieldProtocolFee(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    onExitPool(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    onJoinPool(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    onSwap(
      swapRequest: IPoolSwapStructs.SwapRequestStruct,
      balances: PromiseOrValue<BigNumberish>[],
      indexIn: PromiseOrValue<BigNumberish>,
      indexOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    queryExit(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    queryJoin(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setAssetManagerPoolConfig(
      token: PromiseOrValue<string>,
      poolConfig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSwapFeePercentage(
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTokenRateCacheDuration(
      token: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    startAmplificationParameterUpdate(
      rawEndValue: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stopAmplificationParameterUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    updateProtocolFeePercentageCache(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateTokenRateCache(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL(overrides?: CallOverrides): Promise<BigNumber>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  disableRecoveryMode(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  enableRecoveryMode(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  getActionId(selector: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  getActualSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getAmplificationParameter(overrides?: CallOverrides): Promise<
    [BigNumber, boolean, BigNumber] & {
      value: BigNumber;
      isUpdating: boolean;
      precision: BigNumber;
    }
  >;

  getAuthorizer(overrides?: CallOverrides): Promise<string>;

  getBptIndex(overrides?: CallOverrides): Promise<BigNumber>;

  getDomainSeparator(overrides?: CallOverrides): Promise<string>;

  getLastJoinExitData(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber] & {
      lastJoinExitAmplification: BigNumber;
      lastPostJoinExitInvariant: BigNumber;
    }
  >;

  getMinimumBpt(overrides?: CallOverrides): Promise<BigNumber>;

  getNextNonce(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getPausedState(overrides?: CallOverrides): Promise<
    [boolean, BigNumber, BigNumber] & {
      paused: boolean;
      pauseWindowEndTime: BigNumber;
      bufferPeriodEndTime: BigNumber;
    }
  >;

  getPoolId(overrides?: CallOverrides): Promise<string>;

  getProtocolFeePercentageCache(feeType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getProtocolFeesCollector(overrides?: CallOverrides): Promise<string>;

  getProtocolSwapFeeDelegation(overrides?: CallOverrides): Promise<boolean>;

  getRate(overrides?: CallOverrides): Promise<BigNumber>;

  getRateProviders(overrides?: CallOverrides): Promise<string[]>;

  getScalingFactors(overrides?: CallOverrides): Promise<BigNumber[]>;

  getSwapFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenRate(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getTokenRateCache(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      rate: BigNumber;
      oldRate: BigNumber;
      duration: BigNumber;
      expires: BigNumber;
    }
  >;

  getVault(overrides?: CallOverrides): Promise<string>;

  inRecoveryMode(overrides?: CallOverrides): Promise<boolean>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isTokenExemptFromYieldProtocolFee(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  onExitPool(
    poolId: PromiseOrValue<BytesLike>,
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    balances: PromiseOrValue<BigNumberish>[],
    lastChangeBlock: PromiseOrValue<BigNumberish>,
    protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  onJoinPool(
    poolId: PromiseOrValue<BytesLike>,
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    balances: PromiseOrValue<BigNumberish>[],
    lastChangeBlock: PromiseOrValue<BigNumberish>,
    protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  onSwap(
    swapRequest: IPoolSwapStructs.SwapRequestStruct,
    balances: PromiseOrValue<BigNumberish>[],
    indexIn: PromiseOrValue<BigNumberish>,
    indexOut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  permit(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  queryExit(
    poolId: PromiseOrValue<BytesLike>,
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    balances: PromiseOrValue<BigNumberish>[],
    lastChangeBlock: PromiseOrValue<BigNumberish>,
    protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  queryJoin(
    poolId: PromiseOrValue<BytesLike>,
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    balances: PromiseOrValue<BigNumberish>[],
    lastChangeBlock: PromiseOrValue<BigNumberish>,
    protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setAssetManagerPoolConfig(
    token: PromiseOrValue<string>,
    poolConfig: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSwapFeePercentage(
    swapFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTokenRateCacheDuration(
    token: PromiseOrValue<string>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  startAmplificationParameterUpdate(
    rawEndValue: PromiseOrValue<BigNumberish>,
    endTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stopAmplificationParameterUpdate(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  updateProtocolFeePercentageCache(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateTokenRateCache(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    disableRecoveryMode(overrides?: CallOverrides): Promise<void>;

    enableRecoveryMode(overrides?: CallOverrides): Promise<void>;

    getActionId(selector: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    getActualSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getAmplificationParameter(overrides?: CallOverrides): Promise<
      [BigNumber, boolean, BigNumber] & {
        value: BigNumber;
        isUpdating: boolean;
        precision: BigNumber;
      }
    >;

    getAuthorizer(overrides?: CallOverrides): Promise<string>;

    getBptIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getDomainSeparator(overrides?: CallOverrides): Promise<string>;

    getLastJoinExitData(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        lastJoinExitAmplification: BigNumber;
        lastPostJoinExitInvariant: BigNumber;
      }
    >;

    getMinimumBpt(overrides?: CallOverrides): Promise<BigNumber>;

    getNextNonce(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getPausedState(overrides?: CallOverrides): Promise<
      [boolean, BigNumber, BigNumber] & {
        paused: boolean;
        pauseWindowEndTime: BigNumber;
        bufferPeriodEndTime: BigNumber;
      }
    >;

    getPoolId(overrides?: CallOverrides): Promise<string>;

    getProtocolFeePercentageCache(feeType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolFeesCollector(overrides?: CallOverrides): Promise<string>;

    getProtocolSwapFeeDelegation(overrides?: CallOverrides): Promise<boolean>;

    getRate(overrides?: CallOverrides): Promise<BigNumber>;

    getRateProviders(overrides?: CallOverrides): Promise<string[]>;

    getScalingFactors(overrides?: CallOverrides): Promise<BigNumber[]>;

    getSwapFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenRate(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTokenRateCache(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        rate: BigNumber;
        oldRate: BigNumber;
        duration: BigNumber;
        expires: BigNumber;
      }
    >;

    getVault(overrides?: CallOverrides): Promise<string>;

    inRecoveryMode(overrides?: CallOverrides): Promise<boolean>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isTokenExemptFromYieldProtocolFee(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    onExitPool(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[], BigNumber[]]>;

    onJoinPool(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[], BigNumber[]]>;

    onSwap(
      swapRequest: IPoolSwapStructs.SwapRequestStruct,
      balances: PromiseOrValue<BigNumberish>[],
      indexIn: PromiseOrValue<BigNumberish>,
      indexOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    queryExit(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber[]] & { bptIn: BigNumber; amountsOut: BigNumber[] }>;

    queryJoin(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber[]] & { bptOut: BigNumber; amountsIn: BigNumber[] }>;

    setAssetManagerPoolConfig(
      token: PromiseOrValue<string>,
      poolConfig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setSwapFeePercentage(swapFeePercentage: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setTokenRateCacheDuration(
      token: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    startAmplificationParameterUpdate(
      rawEndValue: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    stopAmplificationParameterUpdate(overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateProtocolFeePercentageCache(overrides?: CallOverrides): Promise<void>;

    updateTokenRateCache(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'AmpUpdateStarted(uint256,uint256,uint256,uint256)'(
      startValue?: null,
      endValue?: null,
      startTime?: null,
      endTime?: null,
    ): AmpUpdateStartedEventFilter;
    AmpUpdateStarted(startValue?: null, endValue?: null, startTime?: null, endTime?: null): AmpUpdateStartedEventFilter;

    'AmpUpdateStopped(uint256)'(currentValue?: null): AmpUpdateStoppedEventFilter;
    AmpUpdateStopped(currentValue?: null): AmpUpdateStoppedEventFilter;

    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'PausedStateChanged(bool)'(paused?: null): PausedStateChangedEventFilter;
    PausedStateChanged(paused?: null): PausedStateChangedEventFilter;

    'ProtocolFeePercentageCacheUpdated(uint256,uint256)'(
      feeType?: PromiseOrValue<BigNumberish> | null,
      protocolFeePercentage?: null,
    ): ProtocolFeePercentageCacheUpdatedEventFilter;
    ProtocolFeePercentageCacheUpdated(
      feeType?: PromiseOrValue<BigNumberish> | null,
      protocolFeePercentage?: null,
    ): ProtocolFeePercentageCacheUpdatedEventFilter;

    'RecoveryModeStateChanged(bool)'(enabled?: null): RecoveryModeStateChangedEventFilter;
    RecoveryModeStateChanged(enabled?: null): RecoveryModeStateChangedEventFilter;

    'SwapFeePercentageChanged(uint256)'(swapFeePercentage?: null): SwapFeePercentageChangedEventFilter;
    SwapFeePercentageChanged(swapFeePercentage?: null): SwapFeePercentageChangedEventFilter;

    'TokenRateCacheUpdated(uint256,uint256)'(
      tokenIndex?: PromiseOrValue<BigNumberish> | null,
      rate?: null,
    ): TokenRateCacheUpdatedEventFilter;
    TokenRateCacheUpdated(
      tokenIndex?: PromiseOrValue<BigNumberish> | null,
      rate?: null,
    ): TokenRateCacheUpdatedEventFilter;

    'TokenRateProviderSet(uint256,address,uint256)'(
      tokenIndex?: PromiseOrValue<BigNumberish> | null,
      provider?: PromiseOrValue<string> | null,
      cacheDuration?: null,
    ): TokenRateProviderSetEventFilter;
    TokenRateProviderSet(
      tokenIndex?: PromiseOrValue<BigNumberish> | null,
      provider?: PromiseOrValue<string> | null,
      cacheDuration?: null,
    ): TokenRateProviderSetEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
  };

  estimateGas: {
    DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    disableRecoveryMode(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    enableRecoveryMode(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    getActionId(selector: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getActualSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getAmplificationParameter(overrides?: CallOverrides): Promise<BigNumber>;

    getAuthorizer(overrides?: CallOverrides): Promise<BigNumber>;

    getBptIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getDomainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    getLastJoinExitData(overrides?: CallOverrides): Promise<BigNumber>;

    getMinimumBpt(overrides?: CallOverrides): Promise<BigNumber>;

    getNextNonce(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getPausedState(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolId(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolFeePercentageCache(feeType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolFeesCollector(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolSwapFeeDelegation(overrides?: CallOverrides): Promise<BigNumber>;

    getRate(overrides?: CallOverrides): Promise<BigNumber>;

    getRateProviders(overrides?: CallOverrides): Promise<BigNumber>;

    getScalingFactors(overrides?: CallOverrides): Promise<BigNumber>;

    getSwapFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenRate(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTokenRateCache(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    inRecoveryMode(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isTokenExemptFromYieldProtocolFee(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    onExitPool(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    onJoinPool(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    onSwap(
      swapRequest: IPoolSwapStructs.SwapRequestStruct,
      balances: PromiseOrValue<BigNumberish>[],
      indexIn: PromiseOrValue<BigNumberish>,
      indexOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    queryExit(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    queryJoin(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setAssetManagerPoolConfig(
      token: PromiseOrValue<string>,
      poolConfig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSwapFeePercentage(
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTokenRateCacheDuration(
      token: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    startAmplificationParameterUpdate(
      rawEndValue: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stopAmplificationParameterUpdate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    updateProtocolFeePercentageCache(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    updateTokenRateCache(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DELEGATE_PROTOCOL_SWAP_FEES_SENTINEL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    disableRecoveryMode(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    enableRecoveryMode(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    getActionId(selector: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getActualSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmplificationParameter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAuthorizer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBptIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDomainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastJoinExitData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinimumBpt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNextNonce(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPausedState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProtocolFeePercentageCache(
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getProtocolFeesCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProtocolSwapFeeDelegation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRateProviders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getScalingFactors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSwapFeePercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenRate(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenRateCache(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inRecoveryMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isTokenExemptFromYieldProtocolFee(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onExitPool(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    onJoinPool(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    onSwap(
      swapRequest: IPoolSwapStructs.SwapRequestStruct,
      balances: PromiseOrValue<BigNumberish>[],
      indexIn: PromiseOrValue<BigNumberish>,
      indexOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    queryExit(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    queryJoin(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setAssetManagerPoolConfig(
      token: PromiseOrValue<string>,
      poolConfig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSwapFeePercentage(
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTokenRateCacheDuration(
      token: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    startAmplificationParameterUpdate(
      rawEndValue: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stopAmplificationParameterUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    updateProtocolFeePercentageCache(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateTokenRateCache(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
