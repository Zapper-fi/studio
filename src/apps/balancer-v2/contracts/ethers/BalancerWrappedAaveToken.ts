/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace IStaticATokenLM {
  export type SignatureParamsStruct = {
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type SignatureParamsStructOutput = [number, string, string] & {
    v: number;
    r: string;
    s: string;
  };
}

export interface BalancerWrappedAaveTokenInterface extends utils.Interface {
  functions: {
    'ASSET()': FunctionFragment;
    'ATOKEN()': FunctionFragment;
    'EIP712_REVISION()': FunctionFragment;
    'INCENTIVES_CONTROLLER()': FunctionFragment;
    'LENDING_POOL()': FunctionFragment;
    'METADEPOSIT_TYPEHASH()': FunctionFragment;
    'METAWITHDRAWAL_TYPEHASH()': FunctionFragment;
    'PERMIT_TYPEHASH()': FunctionFragment;
    'REWARD_TOKEN()': FunctionFragment;
    'STATIC_ATOKEN_LM_REVISION()': FunctionFragment;
    'UNDERLYING_ASSET_ADDRESS()': FunctionFragment;
    '_nonces(address)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'claimRewards(address,bool)': FunctionFragment;
    'claimRewardsOnBehalf(address,address,bool)': FunctionFragment;
    'claimRewardsToSelf(bool)': FunctionFragment;
    'collectAndUpdateRewards()': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'deposit(address,uint256,uint16,bool)': FunctionFragment;
    'dynamicBalanceOf(address)': FunctionFragment;
    'dynamicToStaticAmount(uint256)': FunctionFragment;
    'getAccRewardsPerToken()': FunctionFragment;
    'getClaimableRewards(address)': FunctionFragment;
    'getDomainSeparator()': FunctionFragment;
    'getIncentivesController()': FunctionFragment;
    'getLastRewardBlock()': FunctionFragment;
    'getLifetimeRewards()': FunctionFragment;
    'getLifetimeRewardsClaimed()': FunctionFragment;
    'getTotalClaimableRewards()': FunctionFragment;
    'getUnclaimedRewards(address)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initialize(address,address,string,string)': FunctionFragment;
    'isImplementation()': FunctionFragment;
    'metaDeposit(address,address,uint256,uint16,bool,uint256,(uint8,bytes32,bytes32))': FunctionFragment;
    'metaWithdraw(address,address,uint256,uint256,bool,uint256,(uint8,bytes32,bytes32))': FunctionFragment;
    'name()': FunctionFragment;
    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'rate()': FunctionFragment;
    'staticToDynamicAmount(uint256)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'withdraw(address,uint256,bool)': FunctionFragment;
    'withdrawDynamicAmount(address,uint256,bool)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'ASSET'
      | 'ATOKEN'
      | 'EIP712_REVISION'
      | 'INCENTIVES_CONTROLLER'
      | 'LENDING_POOL'
      | 'METADEPOSIT_TYPEHASH'
      | 'METAWITHDRAWAL_TYPEHASH'
      | 'PERMIT_TYPEHASH'
      | 'REWARD_TOKEN'
      | 'STATIC_ATOKEN_LM_REVISION'
      | 'UNDERLYING_ASSET_ADDRESS'
      | '_nonces'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'claimRewards'
      | 'claimRewardsOnBehalf'
      | 'claimRewardsToSelf'
      | 'collectAndUpdateRewards'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit'
      | 'dynamicBalanceOf'
      | 'dynamicToStaticAmount'
      | 'getAccRewardsPerToken'
      | 'getClaimableRewards'
      | 'getDomainSeparator'
      | 'getIncentivesController'
      | 'getLastRewardBlock'
      | 'getLifetimeRewards'
      | 'getLifetimeRewardsClaimed'
      | 'getTotalClaimableRewards'
      | 'getUnclaimedRewards'
      | 'increaseAllowance'
      | 'initialize'
      | 'isImplementation'
      | 'metaDeposit'
      | 'metaWithdraw'
      | 'name'
      | 'permit'
      | 'rate'
      | 'staticToDynamicAmount'
      | 'symbol'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'withdraw'
      | 'withdrawDynamicAmount',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'ASSET', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ATOKEN', values?: undefined): string;
  encodeFunctionData(functionFragment: 'EIP712_REVISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'INCENTIVES_CONTROLLER', values?: undefined): string;
  encodeFunctionData(functionFragment: 'LENDING_POOL', values?: undefined): string;
  encodeFunctionData(functionFragment: 'METADEPOSIT_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'METAWITHDRAWAL_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PERMIT_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'REWARD_TOKEN', values?: undefined): string;
  encodeFunctionData(functionFragment: 'STATIC_ATOKEN_LM_REVISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'UNDERLYING_ASSET_ADDRESS', values?: undefined): string;
  encodeFunctionData(functionFragment: '_nonces', values: [string]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'claimRewards', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'claimRewardsOnBehalf', values: [string, string, boolean]): string;
  encodeFunctionData(functionFragment: 'claimRewardsToSelf', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'collectAndUpdateRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'deposit', values: [string, BigNumberish, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'dynamicBalanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'dynamicToStaticAmount', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getAccRewardsPerToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getClaimableRewards', values: [string]): string;
  encodeFunctionData(functionFragment: 'getDomainSeparator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getIncentivesController', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLastRewardBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLifetimeRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLifetimeRewardsClaimed', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getTotalClaimableRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getUnclaimedRewards', values: [string]): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string, string, string, string]): string;
  encodeFunctionData(functionFragment: 'isImplementation', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'metaDeposit',
    values: [string, string, BigNumberish, BigNumberish, boolean, BigNumberish, IStaticATokenLM.SignatureParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'metaWithdraw',
    values: [string, string, BigNumberish, BigNumberish, boolean, BigNumberish, IStaticATokenLM.SignatureParamsStruct],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'permit',
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'rate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'staticToDynamicAmount', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [string, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'withdrawDynamicAmount', values: [string, BigNumberish, boolean]): string;

  decodeFunctionResult(functionFragment: 'ASSET', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ATOKEN', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'EIP712_REVISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'INCENTIVES_CONTROLLER', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'LENDING_POOL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'METADEPOSIT_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'METAWITHDRAWAL_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PERMIT_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'REWARD_TOKEN', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'STATIC_ATOKEN_LM_REVISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'UNDERLYING_ASSET_ADDRESS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimRewardsOnBehalf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimRewardsToSelf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collectAndUpdateRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dynamicBalanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dynamicToStaticAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccRewardsPerToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getClaimableRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDomainSeparator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getIncentivesController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLastRewardBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLifetimeRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLifetimeRewardsClaimed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalClaimableRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUnclaimedRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'metaDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'metaWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'staticToDynamicAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawDynamicAmount', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Initialized(address,address,string,string)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface InitializedEventObject {
  pool: string;
  aToken: string;
  staticATokenName: string;
  staticATokenSymbol: string;
}
export type InitializedEvent = TypedEvent<[string, string, string, string], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface BalancerWrappedAaveToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BalancerWrappedAaveTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ASSET(overrides?: CallOverrides): Promise<[string]>;

    ATOKEN(overrides?: CallOverrides): Promise<[string]>;

    EIP712_REVISION(overrides?: CallOverrides): Promise<[string]>;

    INCENTIVES_CONTROLLER(overrides?: CallOverrides): Promise<[string]>;

    LENDING_POOL(overrides?: CallOverrides): Promise<[string]>;

    METADEPOSIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    METAWITHDRAWAL_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    REWARD_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    STATIC_ATOKEN_LM_REVISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    UNDERLYING_ASSET_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    _nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    claimRewards(
      receiver: string,
      forceUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claimRewardsOnBehalf(
      onBehalfOf: string,
      receiver: string,
      forceUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claimRewardsToSelf(
      forceUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    collectAndUpdateRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deposit(
      recipient: string,
      amount: BigNumberish,
      referralCode: BigNumberish,
      fromUnderlying: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    dynamicBalanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    dynamicToStaticAmount(amount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAccRewardsPerToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    getClaimableRewards(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getDomainSeparator(overrides?: CallOverrides): Promise<[string]>;

    getIncentivesController(overrides?: CallOverrides): Promise<[string]>;

    getLastRewardBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLifetimeRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLifetimeRewardsClaimed(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalClaimableRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUnclaimedRewards(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initialize(
      pool: string,
      aToken: string,
      staticATokenName: string,
      staticATokenSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isImplementation(overrides?: CallOverrides): Promise<[boolean]>;

    metaDeposit(
      depositor: string,
      recipient: string,
      value: BigNumberish,
      referralCode: BigNumberish,
      fromUnderlying: boolean,
      deadline: BigNumberish,
      sigParams: IStaticATokenLM.SignatureParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    metaWithdraw(
      owner: string,
      recipient: string,
      staticAmount: BigNumberish,
      dynamicAmount: BigNumberish,
      toUnderlying: boolean,
      deadline: BigNumberish,
      sigParams: IStaticATokenLM.SignatureParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    staticToDynamicAmount(amount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      toUnderlying: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawDynamicAmount(
      recipient: string,
      amount: BigNumberish,
      toUnderlying: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  ASSET(overrides?: CallOverrides): Promise<string>;

  ATOKEN(overrides?: CallOverrides): Promise<string>;

  EIP712_REVISION(overrides?: CallOverrides): Promise<string>;

  INCENTIVES_CONTROLLER(overrides?: CallOverrides): Promise<string>;

  LENDING_POOL(overrides?: CallOverrides): Promise<string>;

  METADEPOSIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  METAWITHDRAWAL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  REWARD_TOKEN(overrides?: CallOverrides): Promise<string>;

  STATIC_ATOKEN_LM_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  UNDERLYING_ASSET_ADDRESS(overrides?: CallOverrides): Promise<string>;

  _nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  claimRewards(
    receiver: string,
    forceUpdate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claimRewardsOnBehalf(
    onBehalfOf: string,
    receiver: string,
    forceUpdate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claimRewardsToSelf(
    forceUpdate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  collectAndUpdateRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  deposit(
    recipient: string,
    amount: BigNumberish,
    referralCode: BigNumberish,
    fromUnderlying: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  dynamicBalanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  dynamicToStaticAmount(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getAccRewardsPerToken(overrides?: CallOverrides): Promise<BigNumber>;

  getClaimableRewards(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getDomainSeparator(overrides?: CallOverrides): Promise<string>;

  getIncentivesController(overrides?: CallOverrides): Promise<string>;

  getLastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

  getLifetimeRewards(overrides?: CallOverrides): Promise<BigNumber>;

  getLifetimeRewardsClaimed(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalClaimableRewards(overrides?: CallOverrides): Promise<BigNumber>;

  getUnclaimedRewards(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initialize(
    pool: string,
    aToken: string,
    staticATokenName: string,
    staticATokenSymbol: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isImplementation(overrides?: CallOverrides): Promise<boolean>;

  metaDeposit(
    depositor: string,
    recipient: string,
    value: BigNumberish,
    referralCode: BigNumberish,
    fromUnderlying: boolean,
    deadline: BigNumberish,
    sigParams: IStaticATokenLM.SignatureParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  metaWithdraw(
    owner: string,
    recipient: string,
    staticAmount: BigNumberish,
    dynamicAmount: BigNumberish,
    toUnderlying: boolean,
    deadline: BigNumberish,
    sigParams: IStaticATokenLM.SignatureParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  rate(overrides?: CallOverrides): Promise<BigNumber>;

  staticToDynamicAmount(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    recipient: string,
    amount: BigNumberish,
    toUnderlying: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawDynamicAmount(
    recipient: string,
    amount: BigNumberish,
    toUnderlying: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    ASSET(overrides?: CallOverrides): Promise<string>;

    ATOKEN(overrides?: CallOverrides): Promise<string>;

    EIP712_REVISION(overrides?: CallOverrides): Promise<string>;

    INCENTIVES_CONTROLLER(overrides?: CallOverrides): Promise<string>;

    LENDING_POOL(overrides?: CallOverrides): Promise<string>;

    METADEPOSIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    METAWITHDRAWAL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    REWARD_TOKEN(overrides?: CallOverrides): Promise<string>;

    STATIC_ATOKEN_LM_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    UNDERLYING_ASSET_ADDRESS(overrides?: CallOverrides): Promise<string>;

    _nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(receiver: string, forceUpdate: boolean, overrides?: CallOverrides): Promise<void>;

    claimRewardsOnBehalf(
      onBehalfOf: string,
      receiver: string,
      forceUpdate: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    claimRewardsToSelf(forceUpdate: boolean, overrides?: CallOverrides): Promise<void>;

    collectAndUpdateRewards(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    deposit(
      recipient: string,
      amount: BigNumberish,
      referralCode: BigNumberish,
      fromUnderlying: boolean,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    dynamicBalanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    dynamicToStaticAmount(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getAccRewardsPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimableRewards(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDomainSeparator(overrides?: CallOverrides): Promise<string>;

    getIncentivesController(overrides?: CallOverrides): Promise<string>;

    getLastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getLifetimeRewards(overrides?: CallOverrides): Promise<BigNumber>;

    getLifetimeRewardsClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalClaimableRewards(overrides?: CallOverrides): Promise<BigNumber>;

    getUnclaimedRewards(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    initialize(
      pool: string,
      aToken: string,
      staticATokenName: string,
      staticATokenSymbol: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    isImplementation(overrides?: CallOverrides): Promise<boolean>;

    metaDeposit(
      depositor: string,
      recipient: string,
      value: BigNumberish,
      referralCode: BigNumberish,
      fromUnderlying: boolean,
      deadline: BigNumberish,
      sigParams: IStaticATokenLM.SignatureParamsStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    metaWithdraw(
      owner: string,
      recipient: string,
      staticAmount: BigNumberish,
      dynamicAmount: BigNumberish,
      toUnderlying: boolean,
      deadline: BigNumberish,
      sigParams: IStaticATokenLM.SignatureParamsStruct,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    name(overrides?: CallOverrides): Promise<string>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    staticToDynamicAmount(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(sender: string, recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      toUnderlying: boolean,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    withdrawDynamicAmount(
      recipient: string,
      amount: BigNumberish,
      toUnderlying: boolean,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;

    'Initialized(address,address,string,string)'(
      pool?: string | null,
      aToken?: null,
      staticATokenName?: null,
      staticATokenSymbol?: null,
    ): InitializedEventFilter;
    Initialized(
      pool?: string | null,
      aToken?: null,
      staticATokenName?: null,
      staticATokenSymbol?: null,
    ): InitializedEventFilter;

    'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
  };

  estimateGas: {
    ASSET(overrides?: CallOverrides): Promise<BigNumber>;

    ATOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    EIP712_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    INCENTIVES_CONTROLLER(overrides?: CallOverrides): Promise<BigNumber>;

    LENDING_POOL(overrides?: CallOverrides): Promise<BigNumber>;

    METADEPOSIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    METAWITHDRAWAL_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    STATIC_ATOKEN_LM_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    UNDERLYING_ASSET_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    _nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(
      receiver: string,
      forceUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    claimRewardsOnBehalf(
      onBehalfOf: string,
      receiver: string,
      forceUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    claimRewardsToSelf(
      forceUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    collectAndUpdateRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    deposit(
      recipient: string,
      amount: BigNumberish,
      referralCode: BigNumberish,
      fromUnderlying: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    dynamicBalanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    dynamicToStaticAmount(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getAccRewardsPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimableRewards(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDomainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    getIncentivesController(overrides?: CallOverrides): Promise<BigNumber>;

    getLastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getLifetimeRewards(overrides?: CallOverrides): Promise<BigNumber>;

    getLifetimeRewardsClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalClaimableRewards(overrides?: CallOverrides): Promise<BigNumber>;

    getUnclaimedRewards(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initialize(
      pool: string,
      aToken: string,
      staticATokenName: string,
      staticATokenSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    metaDeposit(
      depositor: string,
      recipient: string,
      value: BigNumberish,
      referralCode: BigNumberish,
      fromUnderlying: boolean,
      deadline: BigNumberish,
      sigParams: IStaticATokenLM.SignatureParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    metaWithdraw(
      owner: string,
      recipient: string,
      staticAmount: BigNumberish,
      dynamicAmount: BigNumberish,
      toUnderlying: boolean,
      deadline: BigNumberish,
      sigParams: IStaticATokenLM.SignatureParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    staticToDynamicAmount(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      toUnderlying: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawDynamicAmount(
      recipient: string,
      amount: BigNumberish,
      toUnderlying: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ASSET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ATOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EIP712_REVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INCENTIVES_CONTROLLER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LENDING_POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    METADEPOSIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    METAWITHDRAWAL_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REWARD_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STATIC_ATOKEN_LM_REVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNDERLYING_ASSET_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _nonces(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimRewards(
      receiver: string,
      forceUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claimRewardsOnBehalf(
      onBehalfOf: string,
      receiver: string,
      forceUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claimRewardsToSelf(
      forceUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    collectAndUpdateRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      recipient: string,
      amount: BigNumberish,
      referralCode: BigNumberish,
      fromUnderlying: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    dynamicBalanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dynamicToStaticAmount(amount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccRewardsPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaimableRewards(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDomainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIncentivesController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastRewardBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLifetimeRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLifetimeRewardsClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalClaimableRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnclaimedRewards(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      pool: string,
      aToken: string,
      staticATokenName: string,
      staticATokenSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    metaDeposit(
      depositor: string,
      recipient: string,
      value: BigNumberish,
      referralCode: BigNumberish,
      fromUnderlying: boolean,
      deadline: BigNumberish,
      sigParams: IStaticATokenLM.SignatureParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    metaWithdraw(
      owner: string,
      recipient: string,
      staticAmount: BigNumberish,
      dynamicAmount: BigNumberish,
      toUnderlying: boolean,
      deadline: BigNumberish,
      sigParams: IStaticATokenLM.SignatureParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    staticToDynamicAmount(amount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      toUnderlying: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawDynamicAmount(
      recipient: string,
      amount: BigNumberish,
      toUnderlying: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
