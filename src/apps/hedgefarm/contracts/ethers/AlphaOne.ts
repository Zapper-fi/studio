/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface AlphaOneInterface extends utils.Interface {
  functions: {
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'cap()': FunctionFragment;
    'closePosition(address,bool)': FunctionFragment;
    'confirmStargateAsyncRedeem()': FunctionFragment;
    'confirmTradesClosed()': FunctionFragment;
    'currentOpenPositions()': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'deposit(uint256,bytes)': FunctionFragment;
    'feeRecipient()': FunctionFragment;
    'gmxPositionManager()': FunctionFragment;
    'harvest(bool)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'isEpochRunning()': FunctionFragment;
    'isSyncWithdrawalPossible()': FunctionFragment;
    'isTrading()': FunctionFragment;
    'lastEpochStart()': FunctionFragment;
    'lastPricePerShare()': FunctionFragment;
    'lastTotalBalance()': FunctionFragment;
    'managementFee()': FunctionFragment;
    'manager()': FunctionFragment;
    'maxDeposit()': FunctionFragment;
    'minDeposit()': FunctionFragment;
    'name()': FunctionFragment;
    'openPosition(address,uint256,bool)': FunctionFragment;
    'owner()': FunctionFragment;
    'performanceFee()': FunctionFragment;
    'pricePerShare()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setCap(uint256)': FunctionFragment;
    'setDepositLimits(uint256,uint256)': FunctionFragment;
    'setFeeRecipient(address)': FunctionFragment;
    'setFees(uint8,uint8)': FunctionFragment;
    'setGMXPositionManager(address)': FunctionFragment;
    'setManager(address)': FunctionFragment;
    'setSigner(address)': FunctionFragment;
    'setSwapRouter(address)': FunctionFragment;
    'signer()': FunctionFragment;
    'stargateLpStaking()': FunctionFragment;
    'stargateLpStakingPoolId()': FunctionFragment;
    'stargateLpToken()': FunctionFragment;
    'stargateRouter()': FunctionFragment;
    'stargateRouterPoolId()': FunctionFragment;
    'start()': FunctionFragment;
    'stgToken()': FunctionFragment;
    'stop(uint16)': FunctionFragment;
    'swapRouter()': FunctionFragment;
    'symbol()': FunctionFragment;
    'token()': FunctionFragment;
    'tokenDecimals()': FunctionFragment;
    'totalBalance()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdrawAll()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'cap'
      | 'closePosition'
      | 'confirmStargateAsyncRedeem'
      | 'confirmTradesClosed'
      | 'currentOpenPositions'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit'
      | 'feeRecipient'
      | 'gmxPositionManager'
      | 'harvest'
      | 'increaseAllowance'
      | 'isEpochRunning'
      | 'isSyncWithdrawalPossible'
      | 'isTrading'
      | 'lastEpochStart'
      | 'lastPricePerShare'
      | 'lastTotalBalance'
      | 'managementFee'
      | 'manager'
      | 'maxDeposit'
      | 'minDeposit'
      | 'name'
      | 'openPosition'
      | 'owner'
      | 'performanceFee'
      | 'pricePerShare'
      | 'renounceOwnership'
      | 'setCap'
      | 'setDepositLimits'
      | 'setFeeRecipient'
      | 'setFees'
      | 'setGMXPositionManager'
      | 'setManager'
      | 'setSigner'
      | 'setSwapRouter'
      | 'signer'
      | 'stargateLpStaking'
      | 'stargateLpStakingPoolId'
      | 'stargateLpToken'
      | 'stargateRouter'
      | 'stargateRouterPoolId'
      | 'start'
      | 'stgToken'
      | 'stop'
      | 'swapRouter'
      | 'symbol'
      | 'token'
      | 'tokenDecimals'
      | 'totalBalance'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'withdraw'
      | 'withdrawAll',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'cap', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'closePosition',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'confirmStargateAsyncRedeem', values?: undefined): string;
  encodeFunctionData(functionFragment: 'confirmTradesClosed', values?: undefined): string;
  encodeFunctionData(functionFragment: 'currentOpenPositions', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'feeRecipient', values?: undefined): string;
  encodeFunctionData(functionFragment: 'gmxPositionManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'harvest', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'isEpochRunning', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isSyncWithdrawalPossible', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isTrading', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastEpochStart', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastPricePerShare', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastTotalBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'managementFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'manager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxDeposit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minDeposit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'openPosition',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'performanceFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pricePerShare', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setCap', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setDepositLimits',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setFeeRecipient', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setFees',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setGMXPositionManager', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setManager', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setSigner', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setSwapRouter', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'signer', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stargateLpStaking', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stargateLpStakingPoolId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stargateLpToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stargateRouter', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stargateRouterPoolId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'start', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stgToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stop', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'swapRouter', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenDecimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'withdrawAll', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closePosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'confirmStargateAsyncRedeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'confirmTradesClosed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentOpenPositions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeRecipient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gmxPositionManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isEpochRunning', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isSyncWithdrawalPossible', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isTrading', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastEpochStart', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastPricePerShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastTotalBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'managementFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'manager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'openPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'performanceFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pricePerShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDepositLimits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeRecipient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGMXPositionManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSigner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSwapRouter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'signer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stargateLpStaking', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stargateLpStakingPoolId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stargateLpToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stargateRouter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stargateRouterPoolId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'start', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stgToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stop', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapRouter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenDecimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAll', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Deposit(address,uint256)': EventFragment;
    'Harvest()': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Start(uint256)': EventFragment;
    'Stop(uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Withdraw(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Harvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Start'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Stop'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DepositEventObject {
  from: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface HarvestEventObject {}
export type HarvestEvent = TypedEvent<[], HarvestEventObject>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface StartEventObject {
  totalAmount: BigNumber;
}
export type StartEvent = TypedEvent<[BigNumber], StartEventObject>;

export type StartEventFilter = TypedEventFilter<StartEvent>;

export interface StopEventObject {
  totalAmount: BigNumber;
}
export type StopEvent = TypedEvent<[BigNumber], StopEventObject>;

export type StopEventFilter = TypedEventFilter<StopEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawEventObject {
  to: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface AlphaOne extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AlphaOneInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    cap(overrides?: CallOverrides): Promise<[BigNumber]>;

    closePosition(
      indexToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    confirmStargateAsyncRedeem(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    confirmTradesClosed(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    currentOpenPositions(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    gmxPositionManager(overrides?: CallOverrides): Promise<[string]>;

    harvest(
      autocompound: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isEpochRunning(overrides?: CallOverrides): Promise<[boolean]>;

    isSyncWithdrawalPossible(overrides?: CallOverrides): Promise<[boolean]>;

    isTrading(overrides?: CallOverrides): Promise<[boolean]>;

    lastEpochStart(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastPricePerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastTotalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    managementFee(overrides?: CallOverrides): Promise<[number]>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    maxDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    minDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    openPosition(
      indexToken: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    performanceFee(overrides?: CallOverrides): Promise<[number]>;

    pricePerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setCap(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDepositLimits(
      _minDeposit: PromiseOrValue<BigNumberish>,
      _maxDeposit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFeeRecipient(
      _feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFees(
      _managementFee: PromiseOrValue<BigNumberish>,
      _performanceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setGMXPositionManager(
      _gmxPositionManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setManager(
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSigner(
      _signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSwapRouter(
      _swapRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    signer(overrides?: CallOverrides): Promise<[string]>;

    stargateLpStaking(overrides?: CallOverrides): Promise<[string]>;

    stargateLpStakingPoolId(overrides?: CallOverrides): Promise<[number]>;

    stargateLpToken(overrides?: CallOverrides): Promise<[string]>;

    stargateRouter(overrides?: CallOverrides): Promise<[string]>;

    stargateRouterPoolId(overrides?: CallOverrides): Promise<[number]>;

    start(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    stgToken(overrides?: CallOverrides): Promise<[string]>;

    stop(
      fromChainId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenDecimals(overrides?: CallOverrides): Promise<[number]>;

    totalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      _shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;
  };

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  cap(overrides?: CallOverrides): Promise<BigNumber>;

  closePosition(
    indexToken: PromiseOrValue<string>,
    isLong: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  confirmStargateAsyncRedeem(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  confirmTradesClosed(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  currentOpenPositions(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deposit(
    _amount: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  gmxPositionManager(overrides?: CallOverrides): Promise<string>;

  harvest(
    autocompound: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isEpochRunning(overrides?: CallOverrides): Promise<boolean>;

  isSyncWithdrawalPossible(overrides?: CallOverrides): Promise<boolean>;

  isTrading(overrides?: CallOverrides): Promise<boolean>;

  lastEpochStart(overrides?: CallOverrides): Promise<BigNumber>;

  lastPricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

  lastTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  managementFee(overrides?: CallOverrides): Promise<number>;

  manager(overrides?: CallOverrides): Promise<string>;

  maxDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  minDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  openPosition(
    indexToken: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    isLong: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  performanceFee(overrides?: CallOverrides): Promise<number>;

  pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setCap(
    _cap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDepositLimits(
    _minDeposit: PromiseOrValue<BigNumberish>,
    _maxDeposit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFeeRecipient(
    _feeRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFees(
    _managementFee: PromiseOrValue<BigNumberish>,
    _performanceFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setGMXPositionManager(
    _gmxPositionManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setManager(
    _manager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSigner(
    _signer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSwapRouter(
    _swapRouter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stargateLpStaking(overrides?: CallOverrides): Promise<string>;

  stargateLpStakingPoolId(overrides?: CallOverrides): Promise<number>;

  stargateLpToken(overrides?: CallOverrides): Promise<string>;

  stargateRouter(overrides?: CallOverrides): Promise<string>;

  stargateRouterPoolId(overrides?: CallOverrides): Promise<number>;

  start(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  stgToken(overrides?: CallOverrides): Promise<string>;

  stop(
    fromChainId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenDecimals(overrides?: CallOverrides): Promise<number>;

  totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    _shares: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    closePosition(
      indexToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    confirmStargateAsyncRedeem(overrides?: CallOverrides): Promise<void>;

    confirmTradesClosed(overrides?: CallOverrides): Promise<void>;

    currentOpenPositions(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    gmxPositionManager(overrides?: CallOverrides): Promise<string>;

    harvest(autocompound: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isEpochRunning(overrides?: CallOverrides): Promise<boolean>;

    isSyncWithdrawalPossible(overrides?: CallOverrides): Promise<boolean>;

    isTrading(overrides?: CallOverrides): Promise<boolean>;

    lastEpochStart(overrides?: CallOverrides): Promise<BigNumber>;

    lastPricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    lastTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    managementFee(overrides?: CallOverrides): Promise<number>;

    manager(overrides?: CallOverrides): Promise<string>;

    maxDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    minDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    openPosition(
      indexToken: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    performanceFee(overrides?: CallOverrides): Promise<number>;

    pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCap(_cap: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setDepositLimits(
      _minDeposit: PromiseOrValue<BigNumberish>,
      _maxDeposit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setFeeRecipient(_feeRecipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setFees(
      _managementFee: PromiseOrValue<BigNumberish>,
      _performanceFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setGMXPositionManager(_gmxPositionManager: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setManager(_manager: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setSigner(_signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setSwapRouter(_swapRouter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    signer(overrides?: CallOverrides): Promise<string>;

    stargateLpStaking(overrides?: CallOverrides): Promise<string>;

    stargateLpStakingPoolId(overrides?: CallOverrides): Promise<number>;

    stargateLpToken(overrides?: CallOverrides): Promise<string>;

    stargateRouter(overrides?: CallOverrides): Promise<string>;

    stargateRouterPoolId(overrides?: CallOverrides): Promise<number>;

    start(overrides?: CallOverrides): Promise<void>;

    stgToken(overrides?: CallOverrides): Promise<string>;

    stop(fromChainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    swapRouter(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenDecimals(overrides?: CallOverrides): Promise<number>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    withdraw(_shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'Deposit(address,uint256)'(from?: PromiseOrValue<string> | null, amount?: null): DepositEventFilter;
    Deposit(from?: PromiseOrValue<string> | null, amount?: null): DepositEventFilter;

    'Harvest()'(): HarvestEventFilter;
    Harvest(): HarvestEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'Start(uint256)'(totalAmount?: null): StartEventFilter;
    Start(totalAmount?: null): StartEventFilter;

    'Stop(uint256)'(totalAmount?: null): StopEventFilter;
    Stop(totalAmount?: null): StopEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;

    'Withdraw(address,uint256)'(to?: PromiseOrValue<string> | null, amount?: null): WithdrawEventFilter;
    Withdraw(to?: PromiseOrValue<string> | null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    closePosition(
      indexToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    confirmStargateAsyncRedeem(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    confirmTradesClosed(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    currentOpenPositions(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    gmxPositionManager(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      autocompound: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isEpochRunning(overrides?: CallOverrides): Promise<BigNumber>;

    isSyncWithdrawalPossible(overrides?: CallOverrides): Promise<BigNumber>;

    isTrading(overrides?: CallOverrides): Promise<BigNumber>;

    lastEpochStart(overrides?: CallOverrides): Promise<BigNumber>;

    lastPricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    lastTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    managementFee(overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    maxDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    minDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    openPosition(
      indexToken: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setCap(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDepositLimits(
      _minDeposit: PromiseOrValue<BigNumberish>,
      _maxDeposit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFeeRecipient(
      _feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFees(
      _managementFee: PromiseOrValue<BigNumberish>,
      _performanceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setGMXPositionManager(
      _gmxPositionManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setManager(
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSigner(
      _signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSwapRouter(
      _swapRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    signer(overrides?: CallOverrides): Promise<BigNumber>;

    stargateLpStaking(overrides?: CallOverrides): Promise<BigNumber>;

    stargateLpStakingPoolId(overrides?: CallOverrides): Promise<BigNumber>;

    stargateLpToken(overrides?: CallOverrides): Promise<BigNumber>;

    stargateRouter(overrides?: CallOverrides): Promise<BigNumber>;

    stargateRouterPoolId(overrides?: CallOverrides): Promise<BigNumber>;

    start(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    stgToken(overrides?: CallOverrides): Promise<BigNumber>;

    stop(
      fromChainId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdraw(
      _shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closePosition(
      indexToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    confirmStargateAsyncRedeem(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    confirmTradesClosed(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    currentOpenPositions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gmxPositionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvest(
      autocompound: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isEpochRunning(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSyncWithdrawalPossible(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTrading(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastEpochStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastPricePerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastTotalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managementFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openPosition(
      indexToken: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performanceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricePerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setCap(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDepositLimits(
      _minDeposit: PromiseOrValue<BigNumberish>,
      _maxDeposit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFeeRecipient(
      _feeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFees(
      _managementFee: PromiseOrValue<BigNumberish>,
      _performanceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setGMXPositionManager(
      _gmxPositionManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setManager(
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSigner(
      _signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSwapRouter(
      _swapRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    signer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stargateLpStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stargateLpStakingPoolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stargateLpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stargateRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stargateRouterPoolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    start(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    stgToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stop(
      fromChainId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      _shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;
  };
}
