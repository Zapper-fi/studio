/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface SaddleSwapInterface extends utils.Interface {
  functions: {
    'addLiquidity(uint256[],uint256,uint256)': FunctionFragment;
    'calculateCurrentWithdrawFee(address)': FunctionFragment;
    'calculateRemoveLiquidity(address,uint256)': FunctionFragment;
    'calculateRemoveLiquidityOneToken(address,uint256,uint8)': FunctionFragment;
    'calculateSwap(uint8,uint8,uint256)': FunctionFragment;
    'calculateTokenAmount(address,uint256[],bool)': FunctionFragment;
    'getA()': FunctionFragment;
    'getAPrecise()': FunctionFragment;
    'getAdminBalance(uint256)': FunctionFragment;
    'getDepositTimestamp(address)': FunctionFragment;
    'getToken(uint8)': FunctionFragment;
    'getTokenBalance(uint8)': FunctionFragment;
    'getTokenIndex(address)': FunctionFragment;
    'getVirtualPrice()': FunctionFragment;
    'initialize(address[],uint8[],string,string,uint256,uint256,uint256,uint256)': FunctionFragment;
    'removeLiquidity(uint256,uint256[],uint256)': FunctionFragment;
    'removeLiquidityImbalance(uint256[],uint256,uint256)': FunctionFragment;
    'removeLiquidityOneToken(uint256,uint8,uint256,uint256)': FunctionFragment;
    'swap(uint8,uint8,uint256,uint256,uint256)': FunctionFragment;
    'swapStorage()': FunctionFragment;
    'updateUserWithdrawFee(address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addLiquidity'
      | 'calculateCurrentWithdrawFee'
      | 'calculateRemoveLiquidity'
      | 'calculateRemoveLiquidityOneToken'
      | 'calculateSwap'
      | 'calculateTokenAmount'
      | 'getA'
      | 'getAPrecise'
      | 'getAdminBalance'
      | 'getDepositTimestamp'
      | 'getToken'
      | 'getTokenBalance'
      | 'getTokenIndex'
      | 'getVirtualPrice'
      | 'initialize'
      | 'removeLiquidity'
      | 'removeLiquidityImbalance'
      | 'removeLiquidityOneToken'
      | 'swap'
      | 'swapStorage'
      | 'updateUserWithdrawFee',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'addLiquidity', values: [BigNumberish[], BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'calculateCurrentWithdrawFee', values: [string]): string;
  encodeFunctionData(functionFragment: 'calculateRemoveLiquidity', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'calculateRemoveLiquidityOneToken',
    values: [string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'calculateSwap', values: [BigNumberish, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'calculateTokenAmount', values: [string, BigNumberish[], boolean]): string;
  encodeFunctionData(functionFragment: 'getA', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAPrecise', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAdminBalance', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getDepositTimestamp', values: [string]): string;
  encodeFunctionData(functionFragment: 'getToken', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getTokenBalance', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getTokenIndex', values: [string]): string;
  encodeFunctionData(functionFragment: 'getVirtualPrice', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string[], BigNumberish[], string, string, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'removeLiquidity', values: [BigNumberish, BigNumberish[], BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'removeLiquidityImbalance',
    values: [BigNumberish[], BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'removeLiquidityOneToken',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'swap',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'swapStorage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateUserWithdrawFee', values: [string, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'addLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateCurrentWithdrawFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateRemoveLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateRemoveLiquidityOneToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateSwap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateTokenAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getA', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAPrecise', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAdminBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDepositTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTokenBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTokenIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVirtualPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeLiquidityImbalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeLiquidityOneToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapStorage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateUserWithdrawFee', data: BytesLike): Result;

  events: {
    'AddLiquidity(address,uint256[],uint256[],uint256,uint256)': EventFragment;
    'NewAdminFee(uint256)': EventFragment;
    'NewSwapFee(uint256)': EventFragment;
    'NewWithdrawFee(uint256)': EventFragment;
    'RampA(uint256,uint256,uint256,uint256)': EventFragment;
    'RemoveLiquidity(address,uint256[],uint256)': EventFragment;
    'RemoveLiquidityImbalance(address,uint256[],uint256[],uint256,uint256)': EventFragment;
    'RemoveLiquidityOne(address,uint256,uint256,uint256,uint256)': EventFragment;
    'StopRampA(uint256,uint256)': EventFragment;
    'TokenSwap(address,uint256,uint256,uint128,uint128)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddLiquidity'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewAdminFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewSwapFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewWithdrawFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RampA'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RemoveLiquidity'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RemoveLiquidityImbalance'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RemoveLiquidityOne'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StopRampA'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenSwap'): EventFragment;
}

export interface AddLiquidityEventObject {
  provider: string;
  tokenAmounts: BigNumber[];
  fees: BigNumber[];
  invariant: BigNumber;
  lpTokenSupply: BigNumber;
}
export type AddLiquidityEvent = TypedEvent<
  [string, BigNumber[], BigNumber[], BigNumber, BigNumber],
  AddLiquidityEventObject
>;

export type AddLiquidityEventFilter = TypedEventFilter<AddLiquidityEvent>;

export interface NewAdminFeeEventObject {
  newAdminFee: BigNumber;
}
export type NewAdminFeeEvent = TypedEvent<[BigNumber], NewAdminFeeEventObject>;

export type NewAdminFeeEventFilter = TypedEventFilter<NewAdminFeeEvent>;

export interface NewSwapFeeEventObject {
  newSwapFee: BigNumber;
}
export type NewSwapFeeEvent = TypedEvent<[BigNumber], NewSwapFeeEventObject>;

export type NewSwapFeeEventFilter = TypedEventFilter<NewSwapFeeEvent>;

export interface NewWithdrawFeeEventObject {
  newWithdrawFee: BigNumber;
}
export type NewWithdrawFeeEvent = TypedEvent<[BigNumber], NewWithdrawFeeEventObject>;

export type NewWithdrawFeeEventFilter = TypedEventFilter<NewWithdrawFeeEvent>;

export interface RampAEventObject {
  oldA: BigNumber;
  newA: BigNumber;
  initialTime: BigNumber;
  futureTime: BigNumber;
}
export type RampAEvent = TypedEvent<[BigNumber, BigNumber, BigNumber, BigNumber], RampAEventObject>;

export type RampAEventFilter = TypedEventFilter<RampAEvent>;

export interface RemoveLiquidityEventObject {
  provider: string;
  tokenAmounts: BigNumber[];
  lpTokenSupply: BigNumber;
}
export type RemoveLiquidityEvent = TypedEvent<[string, BigNumber[], BigNumber], RemoveLiquidityEventObject>;

export type RemoveLiquidityEventFilter = TypedEventFilter<RemoveLiquidityEvent>;

export interface RemoveLiquidityImbalanceEventObject {
  provider: string;
  tokenAmounts: BigNumber[];
  fees: BigNumber[];
  invariant: BigNumber;
  lpTokenSupply: BigNumber;
}
export type RemoveLiquidityImbalanceEvent = TypedEvent<
  [string, BigNumber[], BigNumber[], BigNumber, BigNumber],
  RemoveLiquidityImbalanceEventObject
>;

export type RemoveLiquidityImbalanceEventFilter = TypedEventFilter<RemoveLiquidityImbalanceEvent>;

export interface RemoveLiquidityOneEventObject {
  provider: string;
  lpTokenAmount: BigNumber;
  lpTokenSupply: BigNumber;
  boughtId: BigNumber;
  tokensBought: BigNumber;
}
export type RemoveLiquidityOneEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  RemoveLiquidityOneEventObject
>;

export type RemoveLiquidityOneEventFilter = TypedEventFilter<RemoveLiquidityOneEvent>;

export interface StopRampAEventObject {
  currentA: BigNumber;
  time: BigNumber;
}
export type StopRampAEvent = TypedEvent<[BigNumber, BigNumber], StopRampAEventObject>;

export type StopRampAEventFilter = TypedEventFilter<StopRampAEvent>;

export interface TokenSwapEventObject {
  buyer: string;
  tokensSold: BigNumber;
  tokensBought: BigNumber;
  soldId: BigNumber;
  boughtId: BigNumber;
}
export type TokenSwapEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber, BigNumber], TokenSwapEventObject>;

export type TokenSwapEventFilter = TypedEventFilter<TokenSwapEvent>;

export interface SaddleSwap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SaddleSwapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    calculateCurrentWithdrawFee(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateRemoveLiquidity(account: string, amount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber[]]>;

    calculateRemoveLiquidityOneToken(
      account: string,
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { availableTokenAmount: BigNumber }>;

    calculateSwap(
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    calculateTokenAmount(
      account: string,
      amounts: BigNumberish[],
      deposit: boolean,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getA(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAPrecise(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAdminBalance(index: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    getDepositTimestamp(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getToken(index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getTokenBalance(index: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenIndex(tokenAddress: string, overrides?: CallOverrides): Promise<[number]>;

    getVirtualPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _pooledTokens: string[],
      decimals: BigNumberish[],
      lpTokenName: string,
      lpTokenSymbol: string,
      _a: BigNumberish,
      _fee: BigNumberish,
      _adminFee: BigNumberish,
      _withdrawFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    removeLiquidity(
      amount: BigNumberish,
      minAmounts: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    removeLiquidityImbalance(
      amounts: BigNumberish[],
      maxBurnAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    removeLiquidityOneToken(
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      minAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    swap(
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    swapStorage(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        initialA: BigNumber;
        futureA: BigNumber;
        initialATime: BigNumber;
        futureATime: BigNumber;
        swapFee: BigNumber;
        adminFee: BigNumber;
        defaultWithdrawFee: BigNumber;
        lpToken: string;
      }
    >;

    updateUserWithdrawFee(
      recipient: string,
      transferAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    amounts: BigNumberish[],
    minToMint: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  calculateCurrentWithdrawFee(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  calculateRemoveLiquidity(account: string, amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber[]>;

  calculateRemoveLiquidityOneToken(
    account: string,
    tokenAmount: BigNumberish,
    tokenIndex: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  calculateSwap(
    tokenIndexFrom: BigNumberish,
    tokenIndexTo: BigNumberish,
    dx: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  calculateTokenAmount(
    account: string,
    amounts: BigNumberish[],
    deposit: boolean,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getA(overrides?: CallOverrides): Promise<BigNumber>;

  getAPrecise(overrides?: CallOverrides): Promise<BigNumber>;

  getAdminBalance(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getDepositTimestamp(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getToken(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getTokenBalance(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getTokenIndex(tokenAddress: string, overrides?: CallOverrides): Promise<number>;

  getVirtualPrice(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _pooledTokens: string[],
    decimals: BigNumberish[],
    lpTokenName: string,
    lpTokenSymbol: string,
    _a: BigNumberish,
    _fee: BigNumberish,
    _adminFee: BigNumberish,
    _withdrawFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  removeLiquidity(
    amount: BigNumberish,
    minAmounts: BigNumberish[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  removeLiquidityImbalance(
    amounts: BigNumberish[],
    maxBurnAmount: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  removeLiquidityOneToken(
    tokenAmount: BigNumberish,
    tokenIndex: BigNumberish,
    minAmount: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  swap(
    tokenIndexFrom: BigNumberish,
    tokenIndexTo: BigNumberish,
    dx: BigNumberish,
    minDy: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  swapStorage(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      initialA: BigNumber;
      futureA: BigNumber;
      initialATime: BigNumber;
      futureATime: BigNumber;
      swapFee: BigNumber;
      adminFee: BigNumber;
      defaultWithdrawFee: BigNumber;
      lpToken: string;
    }
  >;

  updateUserWithdrawFee(
    recipient: string,
    transferAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calculateCurrentWithdrawFee(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    calculateRemoveLiquidity(account: string, amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber[]>;

    calculateRemoveLiquidityOneToken(
      account: string,
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calculateSwap(
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calculateTokenAmount(
      account: string,
      amounts: BigNumberish[],
      deposit: boolean,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getA(overrides?: CallOverrides): Promise<BigNumber>;

    getAPrecise(overrides?: CallOverrides): Promise<BigNumber>;

    getAdminBalance(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getDepositTimestamp(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getToken(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getTokenBalance(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getTokenIndex(tokenAddress: string, overrides?: CallOverrides): Promise<number>;

    getVirtualPrice(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _pooledTokens: string[],
      decimals: BigNumberish[],
      lpTokenName: string,
      lpTokenSymbol: string,
      _a: BigNumberish,
      _fee: BigNumberish,
      _adminFee: BigNumberish,
      _withdrawFee: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    removeLiquidity(
      amount: BigNumberish,
      minAmounts: BigNumberish[],
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    removeLiquidityImbalance(
      amounts: BigNumberish[],
      maxBurnAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    removeLiquidityOneToken(
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      minAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    swap(
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    swapStorage(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        initialA: BigNumber;
        futureA: BigNumber;
        initialATime: BigNumber;
        futureATime: BigNumber;
        swapFee: BigNumber;
        adminFee: BigNumber;
        defaultWithdrawFee: BigNumber;
        lpToken: string;
      }
    >;

    updateUserWithdrawFee(recipient: string, transferAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'AddLiquidity(address,uint256[],uint256[],uint256,uint256)'(
      provider?: string | null,
      tokenAmounts?: null,
      fees?: null,
      invariant?: null,
      lpTokenSupply?: null,
    ): AddLiquidityEventFilter;
    AddLiquidity(
      provider?: string | null,
      tokenAmounts?: null,
      fees?: null,
      invariant?: null,
      lpTokenSupply?: null,
    ): AddLiquidityEventFilter;

    'NewAdminFee(uint256)'(newAdminFee?: null): NewAdminFeeEventFilter;
    NewAdminFee(newAdminFee?: null): NewAdminFeeEventFilter;

    'NewSwapFee(uint256)'(newSwapFee?: null): NewSwapFeeEventFilter;
    NewSwapFee(newSwapFee?: null): NewSwapFeeEventFilter;

    'NewWithdrawFee(uint256)'(newWithdrawFee?: null): NewWithdrawFeeEventFilter;
    NewWithdrawFee(newWithdrawFee?: null): NewWithdrawFeeEventFilter;

    'RampA(uint256,uint256,uint256,uint256)'(
      oldA?: null,
      newA?: null,
      initialTime?: null,
      futureTime?: null,
    ): RampAEventFilter;
    RampA(oldA?: null, newA?: null, initialTime?: null, futureTime?: null): RampAEventFilter;

    'RemoveLiquidity(address,uint256[],uint256)'(
      provider?: string | null,
      tokenAmounts?: null,
      lpTokenSupply?: null,
    ): RemoveLiquidityEventFilter;
    RemoveLiquidity(provider?: string | null, tokenAmounts?: null, lpTokenSupply?: null): RemoveLiquidityEventFilter;

    'RemoveLiquidityImbalance(address,uint256[],uint256[],uint256,uint256)'(
      provider?: string | null,
      tokenAmounts?: null,
      fees?: null,
      invariant?: null,
      lpTokenSupply?: null,
    ): RemoveLiquidityImbalanceEventFilter;
    RemoveLiquidityImbalance(
      provider?: string | null,
      tokenAmounts?: null,
      fees?: null,
      invariant?: null,
      lpTokenSupply?: null,
    ): RemoveLiquidityImbalanceEventFilter;

    'RemoveLiquidityOne(address,uint256,uint256,uint256,uint256)'(
      provider?: string | null,
      lpTokenAmount?: null,
      lpTokenSupply?: null,
      boughtId?: null,
      tokensBought?: null,
    ): RemoveLiquidityOneEventFilter;
    RemoveLiquidityOne(
      provider?: string | null,
      lpTokenAmount?: null,
      lpTokenSupply?: null,
      boughtId?: null,
      tokensBought?: null,
    ): RemoveLiquidityOneEventFilter;

    'StopRampA(uint256,uint256)'(currentA?: null, time?: null): StopRampAEventFilter;
    StopRampA(currentA?: null, time?: null): StopRampAEventFilter;

    'TokenSwap(address,uint256,uint256,uint128,uint128)'(
      buyer?: string | null,
      tokensSold?: null,
      tokensBought?: null,
      soldId?: null,
      boughtId?: null,
    ): TokenSwapEventFilter;
    TokenSwap(
      buyer?: string | null,
      tokensSold?: null,
      tokensBought?: null,
      soldId?: null,
      boughtId?: null,
    ): TokenSwapEventFilter;
  };

  estimateGas: {
    addLiquidity(
      amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    calculateCurrentWithdrawFee(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    calculateRemoveLiquidity(account: string, amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    calculateRemoveLiquidityOneToken(
      account: string,
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calculateSwap(
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calculateTokenAmount(
      account: string,
      amounts: BigNumberish[],
      deposit: boolean,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getA(overrides?: CallOverrides): Promise<BigNumber>;

    getAPrecise(overrides?: CallOverrides): Promise<BigNumber>;

    getAdminBalance(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getDepositTimestamp(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getToken(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getTokenBalance(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getTokenIndex(tokenAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    getVirtualPrice(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _pooledTokens: string[],
      decimals: BigNumberish[],
      lpTokenName: string,
      lpTokenSymbol: string,
      _a: BigNumberish,
      _fee: BigNumberish,
      _adminFee: BigNumberish,
      _withdrawFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    removeLiquidity(
      amount: BigNumberish,
      minAmounts: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    removeLiquidityImbalance(
      amounts: BigNumberish[],
      maxBurnAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    removeLiquidityOneToken(
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      minAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    swap(
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    swapStorage(overrides?: CallOverrides): Promise<BigNumber>;

    updateUserWithdrawFee(
      recipient: string,
      transferAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    calculateCurrentWithdrawFee(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateRemoveLiquidity(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    calculateRemoveLiquidityOneToken(
      account: string,
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    calculateSwap(
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    calculateTokenAmount(
      account: string,
      amounts: BigNumberish[],
      deposit: boolean,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAPrecise(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAdminBalance(index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepositTimestamp(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getToken(index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenBalance(index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenIndex(tokenAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVirtualPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _pooledTokens: string[],
      decimals: BigNumberish[],
      lpTokenName: string,
      lpTokenSymbol: string,
      _a: BigNumberish,
      _fee: BigNumberish,
      _adminFee: BigNumberish,
      _withdrawFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      amount: BigNumberish,
      minAmounts: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    removeLiquidityImbalance(
      amounts: BigNumberish[],
      maxBurnAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    removeLiquidityOneToken(
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      minAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    swap(
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    swapStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateUserWithdrawFee(
      recipient: string,
      transferAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
