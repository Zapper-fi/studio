/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface PlatypusFinancePoolInterface extends utils.Interface {
  functions: {
    'admin()': FunctionFragment;
    'implementation()': FunctionFragment;
    'upgradeTo(address)': FunctionFragment;
    'upgradeToAndCall(address,bytes)': FunctionFragment;
    'addAsset(address,address)': FunctionFragment;
    'assetOf(address)': FunctionFragment;
    'deposit(address,uint256,address,uint256)': FunctionFragment;
    'getC1()': FunctionFragment;
    'getDev()': FunctionFragment;
    'getHaircutRate()': FunctionFragment;
    'getMaxPriceDeviation()': FunctionFragment;
    'getPriceOracle()': FunctionFragment;
    'getRetentionRatio()': FunctionFragment;
    'getSlippageParamK()': FunctionFragment;
    'getSlippageParamN()': FunctionFragment;
    'getTokenAddresses()': FunctionFragment;
    'getWETH()': FunctionFragment;
    'getWETHForwarder()': FunctionFragment;
    'getXThreshold()': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'quotePotentialSwap(address,address,uint256)': FunctionFragment;
    'quotePotentialWithdraw(address,uint256)': FunctionFragment;
    'quotePotentialWithdrawFromOtherAsset(address,address,uint256)': FunctionFragment;
    'removeAsset(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setC1(uint256)': FunctionFragment;
    'setDev(address)': FunctionFragment;
    'setHaircutRate(uint256)': FunctionFragment;
    'setMaxPriceDeviation(uint256)': FunctionFragment;
    'setPriceOracle(address)': FunctionFragment;
    'setRetentionRatio(uint256)': FunctionFragment;
    'setSlippageParamK(uint256)': FunctionFragment;
    'setSlippageParamN(uint256)': FunctionFragment;
    'setWETH(address)': FunctionFragment;
    'setWETHForwarder(address)': FunctionFragment;
    'setXThreshold(uint256)': FunctionFragment;
    'swap(address,address,uint256,uint256,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unpause()': FunctionFragment;
    'withdraw(address,uint256,uint256,address,uint256)': FunctionFragment;
    'withdrawFromOtherAsset(address,address,uint256,uint256,address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'admin'
      | 'implementation'
      | 'upgradeTo'
      | 'upgradeToAndCall'
      | 'addAsset'
      | 'assetOf'
      | 'deposit'
      | 'getC1'
      | 'getDev'
      | 'getHaircutRate'
      | 'getMaxPriceDeviation'
      | 'getPriceOracle'
      | 'getRetentionRatio'
      | 'getSlippageParamK'
      | 'getSlippageParamN'
      | 'getTokenAddresses'
      | 'getWETH'
      | 'getWETHForwarder'
      | 'getXThreshold'
      | 'initialize'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'quotePotentialSwap'
      | 'quotePotentialWithdraw'
      | 'quotePotentialWithdrawFromOtherAsset'
      | 'removeAsset'
      | 'renounceOwnership'
      | 'setC1'
      | 'setDev'
      | 'setHaircutRate'
      | 'setMaxPriceDeviation'
      | 'setPriceOracle'
      | 'setRetentionRatio'
      | 'setSlippageParamK'
      | 'setSlippageParamN'
      | 'setWETH'
      | 'setWETHForwarder'
      | 'setXThreshold'
      | 'swap'
      | 'transferOwnership'
      | 'unpause'
      | 'withdraw'
      | 'withdrawFromOtherAsset',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'implementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'upgradeTo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'addAsset', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'assetOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'getC1', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getDev', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getHaircutRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMaxPriceDeviation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPriceOracle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRetentionRatio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getSlippageParamK', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getSlippageParamN', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getTokenAddresses', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getWETH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getWETHForwarder', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getXThreshold', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'quotePotentialSwap',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'quotePotentialWithdraw',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'quotePotentialWithdrawFromOtherAsset',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'removeAsset', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setC1', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setDev', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setHaircutRate', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setMaxPriceDeviation', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setPriceOracle', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setRetentionRatio', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setSlippageParamK', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setSlippageParamN', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setWETH', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setWETHForwarder', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setXThreshold', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'swap',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawFromOtherAsset',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;

  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'implementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeToAndCall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'assetOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getC1', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDev', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getHaircutRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMaxPriceDeviation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPriceOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRetentionRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSlippageParamK', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSlippageParamN', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTokenAddresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getWETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getWETHForwarder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getXThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'quotePotentialSwap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'quotePotentialWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'quotePotentialWithdrawFromOtherAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setC1', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDev', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setHaircutRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxPriceDeviation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPriceOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRetentionRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSlippageParamK', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSlippageParamN', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWETHForwarder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setXThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawFromOtherAsset', data: BytesLike): Result;

  events: {
    'Upgraded(address)': EventFragment;
    'AssetAdded(address,address)': EventFragment;
    'Deposit(address,address,uint256,uint256,address)': EventFragment;
    'DevUpdated(address,address)': EventFragment;
    'OracleUpdated(address,address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'PriceDeviationUpdated(uint256,uint256)': EventFragment;
    'Swap(address,address,address,uint256,uint256,address)': EventFragment;
    'Unpaused(address)': EventFragment;
    'Withdraw(address,address,uint256,uint256,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AssetAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DevUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OracleUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PriceDeviationUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Swap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface AssetAddedEventObject {
  token: string;
  asset: string;
}
export type AssetAddedEvent = TypedEvent<[string, string], AssetAddedEventObject>;

export type AssetAddedEventFilter = TypedEventFilter<AssetAddedEvent>;

export interface DepositEventObject {
  sender: string;
  token: string;
  amount: BigNumber;
  liquidity: BigNumber;
  to: string;
}
export type DepositEvent = TypedEvent<[string, string, BigNumber, BigNumber, string], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DevUpdatedEventObject {
  previousDev: string;
  newDev: string;
}
export type DevUpdatedEvent = TypedEvent<[string, string], DevUpdatedEventObject>;

export type DevUpdatedEventFilter = TypedEventFilter<DevUpdatedEvent>;

export interface OracleUpdatedEventObject {
  previousOracle: string;
  newOracle: string;
}
export type OracleUpdatedEvent = TypedEvent<[string, string], OracleUpdatedEventObject>;

export type OracleUpdatedEventFilter = TypedEventFilter<OracleUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PriceDeviationUpdatedEventObject {
  previousPriceDeviation: BigNumber;
  newPriceDeviation: BigNumber;
}
export type PriceDeviationUpdatedEvent = TypedEvent<[BigNumber, BigNumber], PriceDeviationUpdatedEventObject>;

export type PriceDeviationUpdatedEventFilter = TypedEventFilter<PriceDeviationUpdatedEvent>;

export interface SwapEventObject {
  sender: string;
  fromToken: string;
  toToken: string;
  fromAmount: BigNumber;
  toAmount: BigNumber;
  to: string;
}
export type SwapEvent = TypedEvent<[string, string, string, BigNumber, BigNumber, string], SwapEventObject>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawEventObject {
  sender: string;
  token: string;
  amount: BigNumber;
  liquidity: BigNumber;
  to: string;
}
export type WithdrawEvent = TypedEvent<[string, string, BigNumber, BigNumber, string], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface PlatypusFinancePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PlatypusFinancePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    implementation(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addAsset(
      token: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    assetOf(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getC1(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDev(overrides?: CallOverrides): Promise<[string]>;

    getHaircutRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaxPriceDeviation(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPriceOracle(overrides?: CallOverrides): Promise<[string]>;

    getRetentionRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSlippageParamK(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSlippageParamN(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    getWETH(overrides?: CallOverrides): Promise<[string]>;

    getWETHForwarder(overrides?: CallOverrides): Promise<[string]>;

    getXThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      weth_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    quotePotentialSwap(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      fromAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        potentialOutcome: BigNumber;
        haircut: BigNumber;
      }
    >;

    quotePotentialWithdraw(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        amount: BigNumber;
        fee: BigNumber;
        enoughCash: boolean;
      }
    >;

    quotePotentialWithdrawFromOtherAsset(
      initialToken: PromiseOrValue<string>,
      wantedToken: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; fee: BigNumber }>;

    removeAsset(
      key: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setC1(
      c1_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDev(
      dev: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setHaircutRate(
      haircutRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxPriceDeviation(
      maxPriceDeviation_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPriceOracle(
      priceOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRetentionRatio(
      retentionRatio_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSlippageParamK(
      k_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSlippageParamN(
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setWETH(
      weth_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setWETHForwarder(
      wethForwarder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setXThreshold(
      xThreshold_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swap(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      fromAmount: PromiseOrValue<BigNumberish>,
      minimumToAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    withdraw(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      minimumAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawFromOtherAsset(
      initialToken: PromiseOrValue<string>,
      wantedToken: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      minimumAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  admin(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  implementation(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addAsset(
    token: PromiseOrValue<string>,
    asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  assetOf(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  deposit(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getC1(overrides?: CallOverrides): Promise<BigNumber>;

  getDev(overrides?: CallOverrides): Promise<string>;

  getHaircutRate(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxPriceDeviation(overrides?: CallOverrides): Promise<BigNumber>;

  getPriceOracle(overrides?: CallOverrides): Promise<string>;

  getRetentionRatio(overrides?: CallOverrides): Promise<BigNumber>;

  getSlippageParamK(overrides?: CallOverrides): Promise<BigNumber>;

  getSlippageParamN(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenAddresses(overrides?: CallOverrides): Promise<string[]>;

  getWETH(overrides?: CallOverrides): Promise<string>;

  getWETHForwarder(overrides?: CallOverrides): Promise<string>;

  getXThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    weth_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  quotePotentialSwap(
    fromToken: PromiseOrValue<string>,
    toToken: PromiseOrValue<string>,
    fromAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { potentialOutcome: BigNumber; haircut: BigNumber }>;

  quotePotentialWithdraw(
    token: PromiseOrValue<string>,
    liquidity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      amount: BigNumber;
      fee: BigNumber;
      enoughCash: boolean;
    }
  >;

  quotePotentialWithdrawFromOtherAsset(
    initialToken: PromiseOrValue<string>,
    wantedToken: PromiseOrValue<string>,
    liquidity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; fee: BigNumber }>;

  removeAsset(
    key: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setC1(
    c1_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDev(
    dev: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setHaircutRate(
    haircutRate_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxPriceDeviation(
    maxPriceDeviation_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPriceOracle(
    priceOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRetentionRatio(
    retentionRatio_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSlippageParamK(
    k_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSlippageParamN(
    n_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setWETH(
    weth_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setWETHForwarder(
    wethForwarder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setXThreshold(
    xThreshold_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swap(
    fromToken: PromiseOrValue<string>,
    toToken: PromiseOrValue<string>,
    fromAmount: PromiseOrValue<BigNumberish>,
    minimumToAmount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  withdraw(
    token: PromiseOrValue<string>,
    liquidity: PromiseOrValue<BigNumberish>,
    minimumAmount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawFromOtherAsset(
    initialToken: PromiseOrValue<string>,
    wantedToken: PromiseOrValue<string>,
    liquidity: PromiseOrValue<BigNumberish>,
    minimumAmount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    implementation(overrides?: CallOverrides): Promise<string>;

    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    addAsset(token: PromiseOrValue<string>, asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    assetOf(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getC1(overrides?: CallOverrides): Promise<BigNumber>;

    getDev(overrides?: CallOverrides): Promise<string>;

    getHaircutRate(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxPriceDeviation(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceOracle(overrides?: CallOverrides): Promise<string>;

    getRetentionRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getSlippageParamK(overrides?: CallOverrides): Promise<BigNumber>;

    getSlippageParamN(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenAddresses(overrides?: CallOverrides): Promise<string[]>;

    getWETH(overrides?: CallOverrides): Promise<string>;

    getWETHForwarder(overrides?: CallOverrides): Promise<string>;

    getXThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(weth_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    quotePotentialSwap(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      fromAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        potentialOutcome: BigNumber;
        haircut: BigNumber;
      }
    >;

    quotePotentialWithdraw(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        amount: BigNumber;
        fee: BigNumber;
        enoughCash: boolean;
      }
    >;

    quotePotentialWithdrawFromOtherAsset(
      initialToken: PromiseOrValue<string>,
      wantedToken: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; fee: BigNumber }>;

    removeAsset(key: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setC1(c1_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setDev(dev: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setHaircutRate(haircutRate_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setMaxPriceDeviation(maxPriceDeviation_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setPriceOracle(priceOracle: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setRetentionRatio(retentionRatio_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setSlippageParamK(k_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setSlippageParamN(n_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setWETH(weth_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setWETHForwarder(wethForwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setXThreshold(xThreshold_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    swap(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      fromAmount: PromiseOrValue<BigNumberish>,
      minimumToAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { actualToAmount: BigNumber; haircut: BigNumber }>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdraw(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      minimumAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    withdrawFromOtherAsset(
      initialToken: PromiseOrValue<string>,
      wantedToken: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      minimumAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {
    'Upgraded(address)'(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
    Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;

    'AssetAdded(address,address)'(
      token?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
    ): AssetAddedEventFilter;
    AssetAdded(token?: PromiseOrValue<string> | null, asset?: PromiseOrValue<string> | null): AssetAddedEventFilter;

    'Deposit(address,address,uint256,uint256,address)'(
      sender?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null,
      liquidity?: null,
      to?: PromiseOrValue<string> | null,
    ): DepositEventFilter;
    Deposit(
      sender?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null,
      liquidity?: null,
      to?: PromiseOrValue<string> | null,
    ): DepositEventFilter;

    'DevUpdated(address,address)'(
      previousDev?: PromiseOrValue<string> | null,
      newDev?: PromiseOrValue<string> | null,
    ): DevUpdatedEventFilter;
    DevUpdated(
      previousDev?: PromiseOrValue<string> | null,
      newDev?: PromiseOrValue<string> | null,
    ): DevUpdatedEventFilter;

    'OracleUpdated(address,address)'(
      previousOracle?: PromiseOrValue<string> | null,
      newOracle?: PromiseOrValue<string> | null,
    ): OracleUpdatedEventFilter;
    OracleUpdated(
      previousOracle?: PromiseOrValue<string> | null,
      newOracle?: PromiseOrValue<string> | null,
    ): OracleUpdatedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'PriceDeviationUpdated(uint256,uint256)'(
      previousPriceDeviation?: null,
      newPriceDeviation?: null,
    ): PriceDeviationUpdatedEventFilter;
    PriceDeviationUpdated(previousPriceDeviation?: null, newPriceDeviation?: null): PriceDeviationUpdatedEventFilter;

    'Swap(address,address,address,uint256,uint256,address)'(
      sender?: PromiseOrValue<string> | null,
      fromToken?: null,
      toToken?: null,
      fromAmount?: null,
      toAmount?: null,
      to?: PromiseOrValue<string> | null,
    ): SwapEventFilter;
    Swap(
      sender?: PromiseOrValue<string> | null,
      fromToken?: null,
      toToken?: null,
      fromAmount?: null,
      toAmount?: null,
      to?: PromiseOrValue<string> | null,
    ): SwapEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'Withdraw(address,address,uint256,uint256,address)'(
      sender?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null,
      liquidity?: null,
      to?: PromiseOrValue<string> | null,
    ): WithdrawEventFilter;
    Withdraw(
      sender?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null,
      liquidity?: null,
      to?: PromiseOrValue<string> | null,
    ): WithdrawEventFilter;
  };

  estimateGas: {
    admin(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    implementation(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addAsset(
      token: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    assetOf(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getC1(overrides?: CallOverrides): Promise<BigNumber>;

    getDev(overrides?: CallOverrides): Promise<BigNumber>;

    getHaircutRate(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxPriceDeviation(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getRetentionRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getSlippageParamK(overrides?: CallOverrides): Promise<BigNumber>;

    getSlippageParamN(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    getWETH(overrides?: CallOverrides): Promise<BigNumber>;

    getWETHForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    getXThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      weth_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    quotePotentialSwap(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      fromAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    quotePotentialWithdraw(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    quotePotentialWithdrawFromOtherAsset(
      initialToken: PromiseOrValue<string>,
      wantedToken: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    removeAsset(
      key: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setC1(
      c1_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDev(dev: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setHaircutRate(
      haircutRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxPriceDeviation(
      maxPriceDeviation_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPriceOracle(
      priceOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRetentionRatio(
      retentionRatio_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSlippageParamK(
      k_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSlippageParamN(
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setWETH(
      weth_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setWETHForwarder(
      wethForwarder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setXThreshold(
      xThreshold_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swap(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      fromAmount: PromiseOrValue<BigNumberish>,
      minimumToAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    withdraw(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      minimumAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawFromOtherAsset(
      initialToken: PromiseOrValue<string>,
      wantedToken: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      minimumAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    implementation(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addAsset(
      token: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    assetOf(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getC1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDev(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHaircutRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxPriceDeviation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRetentionRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSlippageParamK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSlippageParamN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWETHForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getXThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      weth_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quotePotentialSwap(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      fromAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    quotePotentialWithdraw(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    quotePotentialWithdrawFromOtherAsset(
      initialToken: PromiseOrValue<string>,
      wantedToken: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    removeAsset(
      key: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setC1(
      c1_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDev(
      dev: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setHaircutRate(
      haircutRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxPriceDeviation(
      maxPriceDeviation_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPriceOracle(
      priceOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRetentionRatio(
      retentionRatio_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSlippageParamK(
      k_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSlippageParamN(
      n_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setWETH(
      weth_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setWETHForwarder(
      wethForwarder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setXThreshold(
      xThreshold_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swap(
      fromToken: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      fromAmount: PromiseOrValue<BigNumberish>,
      minimumToAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    withdraw(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      minimumAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawFromOtherAsset(
      initialToken: PromiseOrValue<string>,
      wantedToken: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      minimumAmount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
