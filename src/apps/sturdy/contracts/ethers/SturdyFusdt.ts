/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface SturdyFusdtInterface extends utils.Interface {
  functions: {
    'DOMAIN_SEPARATOR()': FunctionFragment;
    'PERMIT_TYPEHASH()': FunctionFragment;
    'Swapin(bytes32,address,uint256)': FunctionFragment;
    'Swapout(uint256,address)': FunctionFragment;
    'TRANSFER_TYPEHASH()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'approveAndCall(address,uint256,bytes)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'burn(address,uint256)': FunctionFragment;
    'changeMPCOwner(address)': FunctionFragment;
    'changeVault(address)': FunctionFragment;
    'decimals()': FunctionFragment;
    'deposit(uint256,address)': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'deposit()': FunctionFragment;
    'depositVault(uint256,address)': FunctionFragment;
    'depositWithPermit(address,uint256,uint256,uint8,bytes32,bytes32,address)': FunctionFragment;
    'depositWithTransferPermit(address,uint256,uint256,uint8,bytes32,bytes32,address)': FunctionFragment;
    'mint(address,uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferAndCall(address,uint256,bytes)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferWithPermit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'underlying()': FunctionFragment;
    'vault()': FunctionFragment;
    'withdraw(uint256,address)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdraw()': FunctionFragment;
    'withdrawVault(address,uint256,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DOMAIN_SEPARATOR'
      | 'PERMIT_TYPEHASH'
      | 'Swapin'
      | 'Swapout'
      | 'TRANSFER_TYPEHASH'
      | 'allowance'
      | 'approve'
      | 'approveAndCall'
      | 'balanceOf'
      | 'burn'
      | 'changeMPCOwner'
      | 'changeVault'
      | 'decimals'
      | 'deposit(uint256,address)'
      | 'deposit(uint256)'
      | 'deposit()'
      | 'depositVault'
      | 'depositWithPermit'
      | 'depositWithTransferPermit'
      | 'mint'
      | 'name'
      | 'nonces'
      | 'owner'
      | 'permit'
      | 'symbol'
      | 'totalSupply'
      | 'transfer'
      | 'transferAndCall'
      | 'transferFrom'
      | 'transferWithPermit'
      | 'underlying'
      | 'vault'
      | 'withdraw(uint256,address)'
      | 'withdraw(uint256)'
      | 'withdraw()'
      | 'withdrawVault',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PERMIT_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'Swapin', values: [BytesLike, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'Swapout', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'TRANSFER_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'approveAndCall', values: [string, BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'burn', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'changeMPCOwner', values: [string]): string;
  encodeFunctionData(functionFragment: 'changeVault', values: [string]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit(uint256,address)', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'deposit(uint256)', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'deposit()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'depositVault', values: [BigNumberish, string]): string;
  encodeFunctionData(
    functionFragment: 'depositWithPermit',
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositWithTransferPermit',
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike, string],
  ): string;
  encodeFunctionData(functionFragment: 'mint', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [string]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'permit',
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferAndCall', values: [string, BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'transferWithPermit',
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'underlying', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vault', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw(uint256,address)', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'withdraw(uint256)', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdraw()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawVault', values: [string, BigNumberish, string]): string;

  decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PERMIT_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'Swapin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'Swapout', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'TRANSFER_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approveAndCall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeMPCOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit(uint256,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit(uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositWithPermit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositWithTransferPermit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferAndCall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferWithPermit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'underlying', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw(uint256,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw(uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawVault', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'LogChangeMPCOwner(address,address,uint256)': EventFragment;
    'LogChangeVault(address,address,uint256)': EventFragment;
    'LogSwapin(bytes32,address,uint256)': EventFragment;
    'LogSwapout(address,address,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogChangeMPCOwner'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogChangeVault'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogSwapin'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogSwapout'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface LogChangeMPCOwnerEventObject {
  oldOwner: string;
  newOwner: string;
  effectiveHeight: BigNumber;
}
export type LogChangeMPCOwnerEvent = TypedEvent<[string, string, BigNumber], LogChangeMPCOwnerEventObject>;

export type LogChangeMPCOwnerEventFilter = TypedEventFilter<LogChangeMPCOwnerEvent>;

export interface LogChangeVaultEventObject {
  oldVault: string;
  newVault: string;
  effectiveTime: BigNumber;
}
export type LogChangeVaultEvent = TypedEvent<[string, string, BigNumber], LogChangeVaultEventObject>;

export type LogChangeVaultEventFilter = TypedEventFilter<LogChangeVaultEvent>;

export interface LogSwapinEventObject {
  txhash: string;
  account: string;
  amount: BigNumber;
}
export type LogSwapinEvent = TypedEvent<[string, string, BigNumber], LogSwapinEventObject>;

export type LogSwapinEventFilter = TypedEventFilter<LogSwapinEvent>;

export interface LogSwapoutEventObject {
  account: string;
  bindaddr: string;
  amount: BigNumber;
}
export type LogSwapoutEvent = TypedEvent<[string, string, BigNumber], LogSwapoutEventObject>;

export type LogSwapoutEventFilter = TypedEventFilter<LogSwapoutEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface SturdyFusdt extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SturdyFusdtInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    Swapin(
      txhash: BytesLike,
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    Swapout(
      amount: BigNumberish,
      bindaddr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    TRANSFER_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    approveAndCall(
      spender: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    changeMPCOwner(
      newVault: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    changeVault(
      newVault: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    'deposit(uint256,address)'(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'deposit(uint256)'(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'deposit()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    depositVault(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositWithPermit(
      target: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositWithTransferPermit(
      target: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    permit(
      target: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferAndCall(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferWithPermit(
      target: string,
      to: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    'withdraw(uint256,address)'(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'withdraw(uint256)'(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'withdraw()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    withdrawVault(
      from: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  Swapin(
    txhash: BytesLike,
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  Swapout(
    amount: BigNumberish,
    bindaddr: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  TRANSFER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  approveAndCall(
    spender: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    from: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  changeMPCOwner(
    newVault: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  changeVault(
    newVault: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  'deposit(uint256,address)'(
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'deposit(uint256)'(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'deposit()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  depositVault(
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositWithPermit(
    target: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositWithTransferPermit(
    target: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  mint(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  permit(
    target: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferAndCall(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferWithPermit(
    target: string,
    to: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  vault(overrides?: CallOverrides): Promise<string>;

  'withdraw(uint256,address)'(
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'withdraw(uint256)'(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'withdraw()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  withdrawVault(
    from: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    Swapin(txhash: BytesLike, account: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    Swapout(amount: BigNumberish, bindaddr: string, overrides?: CallOverrides): Promise<boolean>;

    TRANSFER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    approveAndCall(spender: string, value: BigNumberish, data: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(from: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    changeMPCOwner(newVault: string, overrides?: CallOverrides): Promise<boolean>;

    changeVault(newVault: string, overrides?: CallOverrides): Promise<boolean>;

    decimals(overrides?: CallOverrides): Promise<number>;

    'deposit(uint256,address)'(amount: BigNumberish, to: string, overrides?: CallOverrides): Promise<BigNumber>;

    'deposit(uint256)'(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'deposit()'(overrides?: CallOverrides): Promise<BigNumber>;

    depositVault(amount: BigNumberish, to: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositWithPermit(
      target: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      to: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    depositWithTransferPermit(
      target: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      to: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mint(to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    permit(
      target: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(to: string, value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferAndCall(to: string, value: BigNumberish, data: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(from: string, to: string, value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferWithPermit(
      target: string,
      to: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    underlying(overrides?: CallOverrides): Promise<string>;

    vault(overrides?: CallOverrides): Promise<string>;

    'withdraw(uint256,address)'(amount: BigNumberish, to: string, overrides?: CallOverrides): Promise<BigNumber>;

    'withdraw(uint256)'(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'withdraw()'(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawVault(from: string, amount: BigNumberish, to: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;

    'LogChangeMPCOwner(address,address,uint256)'(
      oldOwner?: string | null,
      newOwner?: string | null,
      effectiveHeight?: BigNumberish | null,
    ): LogChangeMPCOwnerEventFilter;
    LogChangeMPCOwner(
      oldOwner?: string | null,
      newOwner?: string | null,
      effectiveHeight?: BigNumberish | null,
    ): LogChangeMPCOwnerEventFilter;

    'LogChangeVault(address,address,uint256)'(
      oldVault?: string | null,
      newVault?: string | null,
      effectiveTime?: BigNumberish | null,
    ): LogChangeVaultEventFilter;
    LogChangeVault(
      oldVault?: string | null,
      newVault?: string | null,
      effectiveTime?: BigNumberish | null,
    ): LogChangeVaultEventFilter;

    'LogSwapin(bytes32,address,uint256)'(
      txhash?: BytesLike | null,
      account?: string | null,
      amount?: null,
    ): LogSwapinEventFilter;
    LogSwapin(txhash?: BytesLike | null, account?: string | null, amount?: null): LogSwapinEventFilter;

    'LogSwapout(address,address,uint256)'(
      account?: string | null,
      bindaddr?: string | null,
      amount?: null,
    ): LogSwapoutEventFilter;
    LogSwapout(account?: string | null, bindaddr?: string | null, amount?: null): LogSwapoutEventFilter;

    'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    Swapin(
      txhash: BytesLike,
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    Swapout(
      amount: BigNumberish,
      bindaddr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    TRANSFER_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    approveAndCall(
      spender: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    changeMPCOwner(newVault: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    changeVault(newVault: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    'deposit(uint256,address)'(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'deposit(uint256)'(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'deposit()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    depositVault(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    depositWithPermit(
      target: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    depositWithTransferPermit(
      target: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      target: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferAndCall(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferWithPermit(
      target: string,
      to: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    'withdraw(uint256,address)'(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'withdraw(uint256)'(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'withdraw()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdrawVault(
      from: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Swapin(
      txhash: BytesLike,
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    Swapout(
      amount: BigNumberish,
      bindaddr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    TRANSFER_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    approveAndCall(
      spender: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    changeMPCOwner(
      newVault: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    changeVault(
      newVault: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'deposit(uint256,address)'(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'deposit(uint256)'(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'deposit()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    depositVault(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositWithPermit(
      target: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositWithTransferPermit(
      target: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      target: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferAndCall(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferWithPermit(
      target: string,
      to: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'withdraw(uint256,address)'(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'withdraw(uint256)'(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'withdraw()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    withdrawVault(
      from: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
