/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface StakingThalesInterface extends utils.Interface {
  functions: {
    'AMMVolumeRewardsMultiplier()': FunctionFragment;
    'SNXRewards()': FunctionFragment;
    'SNXVolumeRewardsMultiplier()': FunctionFragment;
    'ThalesStakingRewardsPool()': FunctionFragment;
    'acceptOwnership()': FunctionFragment;
    'addressResolver()': FunctionFragment;
    'canClosePeriod()': FunctionFragment;
    'cancelUnstake()': FunctionFragment;
    'claimEnabled()': FunctionFragment;
    'claimReward()': FunctionFragment;
    'closePeriod()': FunctionFragment;
    'currentPeriodFees()': FunctionFragment;
    'currentPeriodRewards()': FunctionFragment;
    'distributeFeesEnabled()': FunctionFragment;
    'durationPeriod()': FunctionFragment;
    'exoticBonds()': FunctionFragment;
    'extraRewardsActive()': FunctionFragment;
    'feeToken()': FunctionFragment;
    'fixedPeriodReward()': FunctionFragment;
    'getAMMBonus(address)': FunctionFragment;
    'getAMMBonusPercentage(address)': FunctionFragment;
    'getAMMVolume(address)': FunctionFragment;
    'getAlreadyClaimedFees(address)': FunctionFragment;
    'getAlreadyClaimedRewards(address)': FunctionFragment;
    'getBaseReward(address)': FunctionFragment;
    'getCRatio(address)': FunctionFragment;
    'getContractFeeFunds()': FunctionFragment;
    'getContractRewardFunds()': FunctionFragment;
    'getLastPeriodOfClaimedRewards(address)': FunctionFragment;
    'getRewardFeesAvailable(address)': FunctionFragment;
    'getRewardsAvailable(address)': FunctionFragment;
    'getSNXBonus(address)': FunctionFragment;
    'getSNXBonusPercentage(address)': FunctionFragment;
    'getSNXDebt(address)': FunctionFragment;
    'getSNXRateForCurrency()': FunctionFragment;
    'getSNXRewardsAddress()': FunctionFragment;
    'getSNXStaked(address)': FunctionFragment;
    'getSNXTargetRatio()': FunctionFragment;
    'getThalesRoyaleBonus(address)': FunctionFragment;
    'getThalesRoyaleBonusPercentage(address)': FunctionFragment;
    'getTotalBonus(address)': FunctionFragment;
    'getTotalBonusPercentage(address)': FunctionFragment;
    'iEscrowThales()': FunctionFragment;
    'initNonReentrant()': FunctionFragment;
    'initialize(address,address,address,address,uint256,uint256,address)': FunctionFragment;
    'lastPauseTime()': FunctionFragment;
    'lastPeriodTimeStamp()': FunctionFragment;
    'lastUnstakeTime(address)': FunctionFragment;
    'maxAMMVolumeRewardsPercentage()': FunctionFragment;
    'maxSNXRewardsPercentage()': FunctionFragment;
    'maxThalesRoyaleRewardsPercentage()': FunctionFragment;
    'nominateNewOwner(address)': FunctionFragment;
    'nominatedOwner()': FunctionFragment;
    'owner()': FunctionFragment;
    'paused()': FunctionFragment;
    'periodExtraReward()': FunctionFragment;
    'periodsOfStaking()': FunctionFragment;
    'priceFeed()': FunctionFragment;
    'setAMMVolumeRewardsMultiplier(uint256)': FunctionFragment;
    'setAddressResolver(address)': FunctionFragment;
    'setClaimEnabled(bool)': FunctionFragment;
    'setDistributeFeesEnabled(bool)': FunctionFragment;
    'setDurationPeriod(uint256)': FunctionFragment;
    'setEscrow(address)': FunctionFragment;
    'setExoticBonds(address)': FunctionFragment;
    'setExtraRewards(bool)': FunctionFragment;
    'setFixedPeriodReward(uint256)': FunctionFragment;
    'setMaxAMMVolumeRewardsPercentage(uint256)': FunctionFragment;
    'setMaxSNXRewardsPercentage(uint256)': FunctionFragment;
    'setMaxThalesRoyaleRewardsPercentage(uint256)': FunctionFragment;
    'setOwner(address)': FunctionFragment;
    'setPaused(bool)': FunctionFragment;
    'setPeriodExtraReward(uint256)': FunctionFragment;
    'setPriceFeed(address)': FunctionFragment;
    'setSNXRewards(address)': FunctionFragment;
    'setSNXVolumeRewardsMultiplier(uint256)': FunctionFragment;
    'setThalesAMM(address)': FunctionFragment;
    'setThalesRoyale(address)': FunctionFragment;
    'setThalesStakingRewardsPool(address)': FunctionFragment;
    'setUnstakeDurationPeriod(uint256)': FunctionFragment;
    'stake(uint256)': FunctionFragment;
    'stakeOnBehalf(uint256,address)': FunctionFragment;
    'stakedBalanceOf(address)': FunctionFragment;
    'stakerFeesClaimed(address)': FunctionFragment;
    'stakerLifetimeRewardsClaimed(address)': FunctionFragment;
    'stakingToken()': FunctionFragment;
    'startStakingPeriod()': FunctionFragment;
    'startTimeStamp()': FunctionFragment;
    'startUnstake(uint256)': FunctionFragment;
    'thalesAMM()': FunctionFragment;
    'thalesRoyale()': FunctionFragment;
    'totalEscrowedLastPeriodEnd()': FunctionFragment;
    'totalSNXFeesInPeriod()': FunctionFragment;
    'totalSNXRewardsInPeriod()': FunctionFragment;
    'totalStakedAmount()': FunctionFragment;
    'totalStakedLastPeriodEnd()': FunctionFragment;
    'transferOwnershipAtInit(address)': FunctionFragment;
    'unstake()': FunctionFragment;
    'unstakeDurationPeriod()': FunctionFragment;
    'unstaking(address)': FunctionFragment;
    'unstakingAmount(address)': FunctionFragment;
    'updateVolume(address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'AMMVolumeRewardsMultiplier'
      | 'SNXRewards'
      | 'SNXVolumeRewardsMultiplier'
      | 'ThalesStakingRewardsPool'
      | 'acceptOwnership'
      | 'addressResolver'
      | 'canClosePeriod'
      | 'cancelUnstake'
      | 'claimEnabled'
      | 'claimReward'
      | 'closePeriod'
      | 'currentPeriodFees'
      | 'currentPeriodRewards'
      | 'distributeFeesEnabled'
      | 'durationPeriod'
      | 'exoticBonds'
      | 'extraRewardsActive'
      | 'feeToken'
      | 'fixedPeriodReward'
      | 'getAMMBonus'
      | 'getAMMBonusPercentage'
      | 'getAMMVolume'
      | 'getAlreadyClaimedFees'
      | 'getAlreadyClaimedRewards'
      | 'getBaseReward'
      | 'getCRatio'
      | 'getContractFeeFunds'
      | 'getContractRewardFunds'
      | 'getLastPeriodOfClaimedRewards'
      | 'getRewardFeesAvailable'
      | 'getRewardsAvailable'
      | 'getSNXBonus'
      | 'getSNXBonusPercentage'
      | 'getSNXDebt'
      | 'getSNXRateForCurrency'
      | 'getSNXRewardsAddress'
      | 'getSNXStaked'
      | 'getSNXTargetRatio'
      | 'getThalesRoyaleBonus'
      | 'getThalesRoyaleBonusPercentage'
      | 'getTotalBonus'
      | 'getTotalBonusPercentage'
      | 'iEscrowThales'
      | 'initNonReentrant'
      | 'initialize'
      | 'lastPauseTime'
      | 'lastPeriodTimeStamp'
      | 'lastUnstakeTime'
      | 'maxAMMVolumeRewardsPercentage'
      | 'maxSNXRewardsPercentage'
      | 'maxThalesRoyaleRewardsPercentage'
      | 'nominateNewOwner'
      | 'nominatedOwner'
      | 'owner'
      | 'paused'
      | 'periodExtraReward'
      | 'periodsOfStaking'
      | 'priceFeed'
      | 'setAMMVolumeRewardsMultiplier'
      | 'setAddressResolver'
      | 'setClaimEnabled'
      | 'setDistributeFeesEnabled'
      | 'setDurationPeriod'
      | 'setEscrow'
      | 'setExoticBonds'
      | 'setExtraRewards'
      | 'setFixedPeriodReward'
      | 'setMaxAMMVolumeRewardsPercentage'
      | 'setMaxSNXRewardsPercentage'
      | 'setMaxThalesRoyaleRewardsPercentage'
      | 'setOwner'
      | 'setPaused'
      | 'setPeriodExtraReward'
      | 'setPriceFeed'
      | 'setSNXRewards'
      | 'setSNXVolumeRewardsMultiplier'
      | 'setThalesAMM'
      | 'setThalesRoyale'
      | 'setThalesStakingRewardsPool'
      | 'setUnstakeDurationPeriod'
      | 'stake'
      | 'stakeOnBehalf'
      | 'stakedBalanceOf'
      | 'stakerFeesClaimed'
      | 'stakerLifetimeRewardsClaimed'
      | 'stakingToken'
      | 'startStakingPeriod'
      | 'startTimeStamp'
      | 'startUnstake'
      | 'thalesAMM'
      | 'thalesRoyale'
      | 'totalEscrowedLastPeriodEnd'
      | 'totalSNXFeesInPeriod'
      | 'totalSNXRewardsInPeriod'
      | 'totalStakedAmount'
      | 'totalStakedLastPeriodEnd'
      | 'transferOwnershipAtInit'
      | 'unstake'
      | 'unstakeDurationPeriod'
      | 'unstaking'
      | 'unstakingAmount'
      | 'updateVolume',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'AMMVolumeRewardsMultiplier', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SNXRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SNXVolumeRewardsMultiplier', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ThalesStakingRewardsPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addressResolver', values?: undefined): string;
  encodeFunctionData(functionFragment: 'canClosePeriod', values?: undefined): string;
  encodeFunctionData(functionFragment: 'cancelUnstake', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'closePeriod', values?: undefined): string;
  encodeFunctionData(functionFragment: 'currentPeriodFees', values?: undefined): string;
  encodeFunctionData(functionFragment: 'currentPeriodRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'distributeFeesEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'durationPeriod', values?: undefined): string;
  encodeFunctionData(functionFragment: 'exoticBonds', values?: undefined): string;
  encodeFunctionData(functionFragment: 'extraRewardsActive', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feeToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fixedPeriodReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAMMBonus', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAMMBonusPercentage', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAMMVolume', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAlreadyClaimedFees', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAlreadyClaimedRewards', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getBaseReward', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getCRatio', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getContractFeeFunds', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getContractRewardFunds', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLastPeriodOfClaimedRewards', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getRewardFeesAvailable', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getRewardsAvailable', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getSNXBonus', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getSNXBonusPercentage', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getSNXDebt', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getSNXRateForCurrency', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getSNXRewardsAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getSNXStaked', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getSNXTargetRatio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getThalesRoyaleBonus', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getThalesRoyaleBonusPercentage', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getTotalBonus', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getTotalBonusPercentage', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'iEscrowThales', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initNonReentrant', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'lastPauseTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastPeriodTimeStamp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastUnstakeTime', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maxAMMVolumeRewardsPercentage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxSNXRewardsPercentage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxThalesRoyaleRewardsPercentage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nominateNewOwner', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'nominatedOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'periodExtraReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'periodsOfStaking', values?: undefined): string;
  encodeFunctionData(functionFragment: 'priceFeed', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setAMMVolumeRewardsMultiplier', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setAddressResolver', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setClaimEnabled', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'setDistributeFeesEnabled', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'setDurationPeriod', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setEscrow', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setExoticBonds', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setExtraRewards', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'setFixedPeriodReward', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setMaxAMMVolumeRewardsPercentage',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setMaxSNXRewardsPercentage', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setMaxThalesRoyaleRewardsPercentage',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setOwner', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setPaused', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'setPeriodExtraReward', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setPriceFeed', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setSNXRewards', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setSNXVolumeRewardsMultiplier', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setThalesAMM', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setThalesRoyale', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setThalesStakingRewardsPool', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setUnstakeDurationPeriod', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'stake', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'stakeOnBehalf',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'stakedBalanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'stakerFeesClaimed', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'stakerLifetimeRewardsClaimed', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'stakingToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'startStakingPeriod', values?: undefined): string;
  encodeFunctionData(functionFragment: 'startTimeStamp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'startUnstake', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'thalesAMM', values?: undefined): string;
  encodeFunctionData(functionFragment: 'thalesRoyale', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalEscrowedLastPeriodEnd', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSNXFeesInPeriod', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSNXRewardsInPeriod', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalStakedAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalStakedLastPeriodEnd', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnershipAtInit', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'unstake', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unstakeDurationPeriod', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unstaking', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'unstakingAmount', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'updateVolume',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'AMMVolumeRewardsMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SNXRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SNXVolumeRewardsMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ThalesStakingRewardsPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addressResolver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'canClosePeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancelUnstake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closePeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentPeriodFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentPeriodRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distributeFeesEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'durationPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exoticBonds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'extraRewardsActive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fixedPeriodReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAMMBonus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAMMBonusPercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAMMVolume', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAlreadyClaimedFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAlreadyClaimedRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBaseReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getContractFeeFunds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getContractRewardFunds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLastPeriodOfClaimedRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardFeesAvailable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardsAvailable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSNXBonus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSNXBonusPercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSNXDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSNXRateForCurrency', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSNXRewardsAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSNXStaked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSNXTargetRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getThalesRoyaleBonus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getThalesRoyaleBonusPercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalBonus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalBonusPercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'iEscrowThales', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initNonReentrant', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastPauseTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastPeriodTimeStamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastUnstakeTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxAMMVolumeRewardsPercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxSNXRewardsPercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxThalesRoyaleRewardsPercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominateNewOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nominatedOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'periodExtraReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'periodsOfStaking', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'priceFeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAMMVolumeRewardsMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAddressResolver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setClaimEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDistributeFeesEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDurationPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEscrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setExoticBonds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setExtraRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFixedPeriodReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxAMMVolumeRewardsPercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxSNXRewardsPercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxThalesRoyaleRewardsPercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPeriodExtraReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPriceFeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSNXRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSNXVolumeRewardsMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setThalesAMM', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setThalesRoyale', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setThalesStakingRewardsPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUnstakeDurationPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeOnBehalf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakedBalanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakerFeesClaimed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakerLifetimeRewardsClaimed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakingToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startStakingPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startTimeStamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startUnstake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'thalesAMM', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'thalesRoyale', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalEscrowedLastPeriodEnd', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSNXFeesInPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSNXRewardsInPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalStakedAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalStakedLastPeriodEnd', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnershipAtInit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstakeDurationPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstaking', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstakingAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateVolume', data: BytesLike): Result;

  events: {
    'AMMVolumeRewardsMultiplierChanged(uint256)': EventFragment;
    'AMMVolumeUpdated(address,uint256)': EventFragment;
    'AddressResolverChanged(address)': EventFragment;
    'CancelUnstake(address)': EventFragment;
    'ClaimEnabled(bool)': EventFragment;
    'ClosedPeriod(uint256,uint256)': EventFragment;
    'DistributeFeesEnabled(bool)': EventFragment;
    'DurationPeriodChanged(uint256)': EventFragment;
    'EscrowChanged(address)': EventFragment;
    'ExoticBondsAddressChanged(address)': EventFragment;
    'ExtraRewardsChanged(bool)': EventFragment;
    'FeeRewardsClaimed(address,uint256)': EventFragment;
    'FixedPeriodRewardChanged(uint256)': EventFragment;
    'MaxAMMVolumeRewardsPercentageChanged(uint256)': EventFragment;
    'MaxSNXRewardsPercentageChanged(uint256)': EventFragment;
    'MaxThalesRoyaleRewardsPercentageChanged(uint256)': EventFragment;
    'OwnerChanged(address,address)': EventFragment;
    'OwnerNominated(address)': EventFragment;
    'PauseChanged(bool)': EventFragment;
    'PeriodExtraRewardChanged(uint256)': EventFragment;
    'PriceFeedAddressChanged(address)': EventFragment;
    'RewardAdded(uint256)': EventFragment;
    'RewardsClaimed(address,uint256)': EventFragment;
    'SNXRewardsAddressChanged(address)': EventFragment;
    'SNXVolumeRewardsMultiplierChanged(uint256)': EventFragment;
    'Staked(address,uint256)': EventFragment;
    'StakedOnBehalf(address,address,uint256)': EventFragment;
    'StakingPeriodStarted()': EventFragment;
    'ThalesAMMAddressChanged(address)': EventFragment;
    'ThalesRoyaleAddressChanged(address)': EventFragment;
    'ThalesStakingRewardsPoolChanged(address)': EventFragment;
    'UnstakeCooldown(address,uint256,uint256)': EventFragment;
    'UnstakeDurationPeriodChanged(uint256)': EventFragment;
    'Unstaked(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AMMVolumeRewardsMultiplierChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AMMVolumeUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AddressResolverChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CancelUnstake'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ClaimEnabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ClosedPeriod'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DistributeFeesEnabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DurationPeriodChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EscrowChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExoticBondsAddressChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExtraRewardsChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeRewardsClaimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FixedPeriodRewardChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxAMMVolumeRewardsPercentageChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxSNXRewardsPercentageChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxThalesRoyaleRewardsPercentageChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerNominated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PauseChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PeriodExtraRewardChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PriceFeedAddressChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardsClaimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SNXRewardsAddressChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SNXVolumeRewardsMultiplierChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Staked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StakedOnBehalf'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StakingPeriodStarted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ThalesAMMAddressChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ThalesRoyaleAddressChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ThalesStakingRewardsPoolChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UnstakeCooldown'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UnstakeDurationPeriodChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unstaked'): EventFragment;
}

export interface AMMVolumeRewardsMultiplierChangedEventObject {
  ammVolumeRewardsMultiplier: BigNumber;
}
export type AMMVolumeRewardsMultiplierChangedEvent = TypedEvent<
  [BigNumber],
  AMMVolumeRewardsMultiplierChangedEventObject
>;

export type AMMVolumeRewardsMultiplierChangedEventFilter = TypedEventFilter<AMMVolumeRewardsMultiplierChangedEvent>;

export interface AMMVolumeUpdatedEventObject {
  account: string;
  amount: BigNumber;
}
export type AMMVolumeUpdatedEvent = TypedEvent<[string, BigNumber], AMMVolumeUpdatedEventObject>;

export type AMMVolumeUpdatedEventFilter = TypedEventFilter<AMMVolumeUpdatedEvent>;

export interface AddressResolverChangedEventObject {
  addressResolver: string;
}
export type AddressResolverChangedEvent = TypedEvent<[string], AddressResolverChangedEventObject>;

export type AddressResolverChangedEventFilter = TypedEventFilter<AddressResolverChangedEvent>;

export interface CancelUnstakeEventObject {
  account: string;
}
export type CancelUnstakeEvent = TypedEvent<[string], CancelUnstakeEventObject>;

export type CancelUnstakeEventFilter = TypedEventFilter<CancelUnstakeEvent>;

export interface ClaimEnabledEventObject {
  enabled: boolean;
}
export type ClaimEnabledEvent = TypedEvent<[boolean], ClaimEnabledEventObject>;

export type ClaimEnabledEventFilter = TypedEventFilter<ClaimEnabledEvent>;

export interface ClosedPeriodEventObject {
  PeriodOfStaking: BigNumber;
  lastPeriodTimeStamp: BigNumber;
}
export type ClosedPeriodEvent = TypedEvent<[BigNumber, BigNumber], ClosedPeriodEventObject>;

export type ClosedPeriodEventFilter = TypedEventFilter<ClosedPeriodEvent>;

export interface DistributeFeesEnabledEventObject {
  enabled: boolean;
}
export type DistributeFeesEnabledEvent = TypedEvent<[boolean], DistributeFeesEnabledEventObject>;

export type DistributeFeesEnabledEventFilter = TypedEventFilter<DistributeFeesEnabledEvent>;

export interface DurationPeriodChangedEventObject {
  value: BigNumber;
}
export type DurationPeriodChangedEvent = TypedEvent<[BigNumber], DurationPeriodChangedEventObject>;

export type DurationPeriodChangedEventFilter = TypedEventFilter<DurationPeriodChangedEvent>;

export interface EscrowChangedEventObject {
  newEscrow: string;
}
export type EscrowChangedEvent = TypedEvent<[string], EscrowChangedEventObject>;

export type EscrowChangedEventFilter = TypedEventFilter<EscrowChangedEvent>;

export interface ExoticBondsAddressChangedEventObject {
  exoticBonds: string;
}
export type ExoticBondsAddressChangedEvent = TypedEvent<[string], ExoticBondsAddressChangedEventObject>;

export type ExoticBondsAddressChangedEventFilter = TypedEventFilter<ExoticBondsAddressChangedEvent>;

export interface ExtraRewardsChangedEventObject {
  extrarewardsactive: boolean;
}
export type ExtraRewardsChangedEvent = TypedEvent<[boolean], ExtraRewardsChangedEventObject>;

export type ExtraRewardsChangedEventFilter = TypedEventFilter<ExtraRewardsChangedEvent>;

export interface FeeRewardsClaimedEventObject {
  account: string;
  unclaimedFees: BigNumber;
}
export type FeeRewardsClaimedEvent = TypedEvent<[string, BigNumber], FeeRewardsClaimedEventObject>;

export type FeeRewardsClaimedEventFilter = TypedEventFilter<FeeRewardsClaimedEvent>;

export interface FixedPeriodRewardChangedEventObject {
  value: BigNumber;
}
export type FixedPeriodRewardChangedEvent = TypedEvent<[BigNumber], FixedPeriodRewardChangedEventObject>;

export type FixedPeriodRewardChangedEventFilter = TypedEventFilter<FixedPeriodRewardChangedEvent>;

export interface MaxAMMVolumeRewardsPercentageChangedEventObject {
  maxAmmVolumeRewardsPercentage: BigNumber;
}
export type MaxAMMVolumeRewardsPercentageChangedEvent = TypedEvent<
  [BigNumber],
  MaxAMMVolumeRewardsPercentageChangedEventObject
>;

export type MaxAMMVolumeRewardsPercentageChangedEventFilter =
  TypedEventFilter<MaxAMMVolumeRewardsPercentageChangedEvent>;

export interface MaxSNXRewardsPercentageChangedEventObject {
  maxSnxRewardsPercentage: BigNumber;
}
export type MaxSNXRewardsPercentageChangedEvent = TypedEvent<[BigNumber], MaxSNXRewardsPercentageChangedEventObject>;

export type MaxSNXRewardsPercentageChangedEventFilter = TypedEventFilter<MaxSNXRewardsPercentageChangedEvent>;

export interface MaxThalesRoyaleRewardsPercentageChangedEventObject {
  maxThalesRewardsPercentage: BigNumber;
}
export type MaxThalesRoyaleRewardsPercentageChangedEvent = TypedEvent<
  [BigNumber],
  MaxThalesRoyaleRewardsPercentageChangedEventObject
>;

export type MaxThalesRoyaleRewardsPercentageChangedEventFilter =
  TypedEventFilter<MaxThalesRoyaleRewardsPercentageChangedEvent>;

export interface OwnerChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<[string, string], OwnerChangedEventObject>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface OwnerNominatedEventObject {
  newOwner: string;
}
export type OwnerNominatedEvent = TypedEvent<[string], OwnerNominatedEventObject>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export interface PauseChangedEventObject {
  isPaused: boolean;
}
export type PauseChangedEvent = TypedEvent<[boolean], PauseChangedEventObject>;

export type PauseChangedEventFilter = TypedEventFilter<PauseChangedEvent>;

export interface PeriodExtraRewardChangedEventObject {
  value: BigNumber;
}
export type PeriodExtraRewardChangedEvent = TypedEvent<[BigNumber], PeriodExtraRewardChangedEventObject>;

export type PeriodExtraRewardChangedEventFilter = TypedEventFilter<PeriodExtraRewardChangedEvent>;

export interface PriceFeedAddressChangedEventObject {
  pricefeed: string;
}
export type PriceFeedAddressChangedEvent = TypedEvent<[string], PriceFeedAddressChangedEventObject>;

export type PriceFeedAddressChangedEventFilter = TypedEventFilter<PriceFeedAddressChangedEvent>;

export interface RewardAddedEventObject {
  reward: BigNumber;
}
export type RewardAddedEvent = TypedEvent<[BigNumber], RewardAddedEventObject>;

export type RewardAddedEventFilter = TypedEventFilter<RewardAddedEvent>;

export interface RewardsClaimedEventObject {
  account: string;
  unclaimedReward: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<[string, BigNumber], RewardsClaimedEventObject>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface SNXRewardsAddressChangedEventObject {
  snxRewards: string;
}
export type SNXRewardsAddressChangedEvent = TypedEvent<[string], SNXRewardsAddressChangedEventObject>;

export type SNXRewardsAddressChangedEventFilter = TypedEventFilter<SNXRewardsAddressChangedEvent>;

export interface SNXVolumeRewardsMultiplierChangedEventObject {
  ammVolumeRewardsMultiplier: BigNumber;
}
export type SNXVolumeRewardsMultiplierChangedEvent = TypedEvent<
  [BigNumber],
  SNXVolumeRewardsMultiplierChangedEventObject
>;

export type SNXVolumeRewardsMultiplierChangedEventFilter = TypedEventFilter<SNXVolumeRewardsMultiplierChangedEvent>;

export interface StakedEventObject {
  user: string;
  amount: BigNumber;
}
export type StakedEvent = TypedEvent<[string, BigNumber], StakedEventObject>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface StakedOnBehalfEventObject {
  user: string;
  staker: string;
  amount: BigNumber;
}
export type StakedOnBehalfEvent = TypedEvent<[string, string, BigNumber], StakedOnBehalfEventObject>;

export type StakedOnBehalfEventFilter = TypedEventFilter<StakedOnBehalfEvent>;

export interface StakingPeriodStartedEventObject {}
export type StakingPeriodStartedEvent = TypedEvent<[], StakingPeriodStartedEventObject>;

export type StakingPeriodStartedEventFilter = TypedEventFilter<StakingPeriodStartedEvent>;

export interface ThalesAMMAddressChangedEventObject {
  amm: string;
}
export type ThalesAMMAddressChangedEvent = TypedEvent<[string], ThalesAMMAddressChangedEventObject>;

export type ThalesAMMAddressChangedEventFilter = TypedEventFilter<ThalesAMMAddressChangedEvent>;

export interface ThalesRoyaleAddressChangedEventObject {
  royale: string;
}
export type ThalesRoyaleAddressChangedEvent = TypedEvent<[string], ThalesRoyaleAddressChangedEventObject>;

export type ThalesRoyaleAddressChangedEventFilter = TypedEventFilter<ThalesRoyaleAddressChangedEvent>;

export interface ThalesStakingRewardsPoolChangedEventObject {
  thalesStakingRewardsPool: string;
}
export type ThalesStakingRewardsPoolChangedEvent = TypedEvent<[string], ThalesStakingRewardsPoolChangedEventObject>;

export type ThalesStakingRewardsPoolChangedEventFilter = TypedEventFilter<ThalesStakingRewardsPoolChangedEvent>;

export interface UnstakeCooldownEventObject {
  account: string;
  cooldownTime: BigNumber;
  amount: BigNumber;
}
export type UnstakeCooldownEvent = TypedEvent<[string, BigNumber, BigNumber], UnstakeCooldownEventObject>;

export type UnstakeCooldownEventFilter = TypedEventFilter<UnstakeCooldownEvent>;

export interface UnstakeDurationPeriodChangedEventObject {
  value: BigNumber;
}
export type UnstakeDurationPeriodChangedEvent = TypedEvent<[BigNumber], UnstakeDurationPeriodChangedEventObject>;

export type UnstakeDurationPeriodChangedEventFilter = TypedEventFilter<UnstakeDurationPeriodChangedEvent>;

export interface UnstakedEventObject {
  account: string;
  unstakeAmount: BigNumber;
}
export type UnstakedEvent = TypedEvent<[string, BigNumber], UnstakedEventObject>;

export type UnstakedEventFilter = TypedEventFilter<UnstakedEvent>;

export interface StakingThales extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingThalesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AMMVolumeRewardsMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    SNXRewards(overrides?: CallOverrides): Promise<[string]>;

    SNXVolumeRewardsMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    ThalesStakingRewardsPool(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    addressResolver(overrides?: CallOverrides): Promise<[string]>;

    canClosePeriod(overrides?: CallOverrides): Promise<[boolean]>;

    cancelUnstake(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    claimEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    claimReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    closePeriod(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    currentPeriodFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentPeriodRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    distributeFeesEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    durationPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    exoticBonds(overrides?: CallOverrides): Promise<[string]>;

    extraRewardsActive(overrides?: CallOverrides): Promise<[boolean]>;

    feeToken(overrides?: CallOverrides): Promise<[string]>;

    fixedPeriodReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAMMBonus(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAMMBonusPercentage(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAMMVolume(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAlreadyClaimedFees(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAlreadyClaimedRewards(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getBaseReward(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getCRatio(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getContractFeeFunds(overrides?: CallOverrides): Promise<[BigNumber]>;

    getContractRewardFunds(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastPeriodOfClaimedRewards(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardFeesAvailable(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardsAvailable(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getSNXBonus(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getSNXBonusPercentage(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getSNXDebt(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getSNXRateForCurrency(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSNXRewardsAddress(overrides?: CallOverrides): Promise<[string]>;

    getSNXStaked(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getSNXTargetRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    getThalesRoyaleBonus(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getThalesRoyaleBonusPercentage(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalBonus(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalBonusPercentage(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    iEscrowThales(overrides?: CallOverrides): Promise<[string]>;

    initNonReentrant(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      _iEscrowThales: PromiseOrValue<string>,
      _stakingToken: PromiseOrValue<string>,
      _feeToken: PromiseOrValue<string>,
      _durationPeriod: PromiseOrValue<BigNumberish>,
      _unstakeDurationPeriod: PromiseOrValue<BigNumberish>,
      _ISNXRewards: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    lastPauseTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastPeriodTimeStamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUnstakeTime(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxAMMVolumeRewardsPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxSNXRewardsPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxThalesRoyaleRewardsPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    periodExtraReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    periodsOfStaking(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    setAMMVolumeRewardsMultiplier(
      _AMMVolumeRewardsMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setAddressResolver(
      _addressResolver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setClaimEnabled(
      _claimEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDistributeFeesEnabled(
      _distributeFeesEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDurationPeriod(
      _durationPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setEscrow(
      _escrowThalesContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setExoticBonds(
      _exoticBonds: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setExtraRewards(
      _extraRewardsActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFixedPeriodReward(
      _fixedReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxAMMVolumeRewardsPercentage(
      _maxAMMVolumeRewardsPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxSNXRewardsPercentage(
      _maxSNXRewardsPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxThalesRoyaleRewardsPercentage(
      _maxThalesRoyaleRewardsPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPaused(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPeriodExtraReward(
      _extraReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSNXRewards(
      _snxRewards: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSNXVolumeRewardsMultiplier(
      _SNXVolumeRewardsMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setThalesAMM(
      _thalesAMM: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setThalesRoyale(
      _royale: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setThalesStakingRewardsPool(
      _thalesStakingRewardsPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setUnstakeDurationPeriod(
      _unstakeDurationPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stakeOnBehalf(
      amount: PromiseOrValue<BigNumberish>,
      staker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stakedBalanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    stakerFeesClaimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    stakerLifetimeRewardsClaimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    startStakingPeriod(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    startTimeStamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    startUnstake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    thalesAMM(overrides?: CallOverrides): Promise<[string]>;

    thalesRoyale(overrides?: CallOverrides): Promise<[string]>;

    totalEscrowedLastPeriodEnd(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSNXFeesInPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSNXRewardsInPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStakedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStakedLastPeriodEnd(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnershipAtInit(
      proxyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unstake(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    unstakeDurationPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    unstaking(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    unstakingAmount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    updateVolume(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  AMMVolumeRewardsMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  SNXRewards(overrides?: CallOverrides): Promise<string>;

  SNXVolumeRewardsMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  ThalesStakingRewardsPool(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  addressResolver(overrides?: CallOverrides): Promise<string>;

  canClosePeriod(overrides?: CallOverrides): Promise<boolean>;

  cancelUnstake(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  claimEnabled(overrides?: CallOverrides): Promise<boolean>;

  claimReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  closePeriod(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  currentPeriodFees(overrides?: CallOverrides): Promise<BigNumber>;

  currentPeriodRewards(overrides?: CallOverrides): Promise<BigNumber>;

  distributeFeesEnabled(overrides?: CallOverrides): Promise<boolean>;

  durationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  exoticBonds(overrides?: CallOverrides): Promise<string>;

  extraRewardsActive(overrides?: CallOverrides): Promise<boolean>;

  feeToken(overrides?: CallOverrides): Promise<string>;

  fixedPeriodReward(overrides?: CallOverrides): Promise<BigNumber>;

  getAMMBonus(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getAMMBonusPercentage(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getAMMVolume(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getAlreadyClaimedFees(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getAlreadyClaimedRewards(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getBaseReward(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getCRatio(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getContractFeeFunds(overrides?: CallOverrides): Promise<BigNumber>;

  getContractRewardFunds(overrides?: CallOverrides): Promise<BigNumber>;

  getLastPeriodOfClaimedRewards(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getRewardFeesAvailable(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getRewardsAvailable(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getSNXBonus(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getSNXBonusPercentage(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getSNXDebt(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getSNXRateForCurrency(overrides?: CallOverrides): Promise<BigNumber>;

  getSNXRewardsAddress(overrides?: CallOverrides): Promise<string>;

  getSNXStaked(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getSNXTargetRatio(overrides?: CallOverrides): Promise<BigNumber>;

  getThalesRoyaleBonus(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getThalesRoyaleBonusPercentage(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getTotalBonus(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getTotalBonusPercentage(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  iEscrowThales(overrides?: CallOverrides): Promise<string>;

  initNonReentrant(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  initialize(
    _owner: PromiseOrValue<string>,
    _iEscrowThales: PromiseOrValue<string>,
    _stakingToken: PromiseOrValue<string>,
    _feeToken: PromiseOrValue<string>,
    _durationPeriod: PromiseOrValue<BigNumberish>,
    _unstakeDurationPeriod: PromiseOrValue<BigNumberish>,
    _ISNXRewards: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  lastPauseTime(overrides?: CallOverrides): Promise<BigNumber>;

  lastPeriodTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

  lastUnstakeTime(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  maxAMMVolumeRewardsPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  maxSNXRewardsPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  maxThalesRoyaleRewardsPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  nominateNewOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  periodExtraReward(overrides?: CallOverrides): Promise<BigNumber>;

  periodsOfStaking(overrides?: CallOverrides): Promise<BigNumber>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  setAMMVolumeRewardsMultiplier(
    _AMMVolumeRewardsMultiplier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setAddressResolver(
    _addressResolver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setClaimEnabled(
    _claimEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDistributeFeesEnabled(
    _distributeFeesEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDurationPeriod(
    _durationPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setEscrow(
    _escrowThalesContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setExoticBonds(
    _exoticBonds: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setExtraRewards(
    _extraRewardsActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFixedPeriodReward(
    _fixedReward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxAMMVolumeRewardsPercentage(
    _maxAMMVolumeRewardsPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxSNXRewardsPercentage(
    _maxSNXRewardsPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxThalesRoyaleRewardsPercentage(
    _maxThalesRoyaleRewardsPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPaused(
    _paused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPeriodExtraReward(
    _extraReward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPriceFeed(
    _priceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSNXRewards(
    _snxRewards: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSNXVolumeRewardsMultiplier(
    _SNXVolumeRewardsMultiplier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setThalesAMM(
    _thalesAMM: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setThalesRoyale(
    _royale: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setThalesStakingRewardsPool(
    _thalesStakingRewardsPool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setUnstakeDurationPeriod(
    _unstakeDurationPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stake(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stakeOnBehalf(
    amount: PromiseOrValue<BigNumberish>,
    staker: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stakedBalanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  stakerFeesClaimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  stakerLifetimeRewardsClaimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  startStakingPeriod(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  startTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

  startUnstake(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  thalesAMM(overrides?: CallOverrides): Promise<string>;

  thalesRoyale(overrides?: CallOverrides): Promise<string>;

  totalEscrowedLastPeriodEnd(overrides?: CallOverrides): Promise<BigNumber>;

  totalSNXFeesInPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  totalSNXRewardsInPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  totalStakedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalStakedLastPeriodEnd(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnershipAtInit(
    proxyAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unstake(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  unstakeDurationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  unstaking(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  unstakingAmount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  updateVolume(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    AMMVolumeRewardsMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    SNXRewards(overrides?: CallOverrides): Promise<string>;

    SNXVolumeRewardsMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    ThalesStakingRewardsPool(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addressResolver(overrides?: CallOverrides): Promise<string>;

    canClosePeriod(overrides?: CallOverrides): Promise<boolean>;

    cancelUnstake(overrides?: CallOverrides): Promise<void>;

    claimEnabled(overrides?: CallOverrides): Promise<boolean>;

    claimReward(overrides?: CallOverrides): Promise<void>;

    closePeriod(overrides?: CallOverrides): Promise<void>;

    currentPeriodFees(overrides?: CallOverrides): Promise<BigNumber>;

    currentPeriodRewards(overrides?: CallOverrides): Promise<BigNumber>;

    distributeFeesEnabled(overrides?: CallOverrides): Promise<boolean>;

    durationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    exoticBonds(overrides?: CallOverrides): Promise<string>;

    extraRewardsActive(overrides?: CallOverrides): Promise<boolean>;

    feeToken(overrides?: CallOverrides): Promise<string>;

    fixedPeriodReward(overrides?: CallOverrides): Promise<BigNumber>;

    getAMMBonus(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAMMBonusPercentage(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAMMVolume(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAlreadyClaimedFees(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAlreadyClaimedRewards(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getBaseReward(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getCRatio(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getContractFeeFunds(overrides?: CallOverrides): Promise<BigNumber>;

    getContractRewardFunds(overrides?: CallOverrides): Promise<BigNumber>;

    getLastPeriodOfClaimedRewards(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRewardFeesAvailable(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRewardsAvailable(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getSNXBonus(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getSNXBonusPercentage(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getSNXDebt(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getSNXRateForCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    getSNXRewardsAddress(overrides?: CallOverrides): Promise<string>;

    getSNXStaked(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getSNXTargetRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getThalesRoyaleBonus(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getThalesRoyaleBonusPercentage(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBonus(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBonusPercentage(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    iEscrowThales(overrides?: CallOverrides): Promise<string>;

    initNonReentrant(overrides?: CallOverrides): Promise<void>;

    initialize(
      _owner: PromiseOrValue<string>,
      _iEscrowThales: PromiseOrValue<string>,
      _stakingToken: PromiseOrValue<string>,
      _feeToken: PromiseOrValue<string>,
      _durationPeriod: PromiseOrValue<BigNumberish>,
      _unstakeDurationPeriod: PromiseOrValue<BigNumberish>,
      _ISNXRewards: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    lastPauseTime(overrides?: CallOverrides): Promise<BigNumber>;

    lastPeriodTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    lastUnstakeTime(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxAMMVolumeRewardsPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    maxSNXRewardsPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    maxThalesRoyaleRewardsPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    nominateNewOwner(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    periodExtraReward(overrides?: CallOverrides): Promise<BigNumber>;

    periodsOfStaking(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    setAMMVolumeRewardsMultiplier(
      _AMMVolumeRewardsMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setAddressResolver(_addressResolver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setClaimEnabled(_claimEnabled: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setDistributeFeesEnabled(_distributeFeesEnabled: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setDurationPeriod(_durationPeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setEscrow(_escrowThalesContract: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setExoticBonds(_exoticBonds: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setExtraRewards(_extraRewardsActive: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setFixedPeriodReward(_fixedReward: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setMaxAMMVolumeRewardsPercentage(
      _maxAMMVolumeRewardsPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMaxSNXRewardsPercentage(
      _maxSNXRewardsPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMaxThalesRoyaleRewardsPercentage(
      _maxThalesRoyaleRewardsPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setOwner(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setPaused(_paused: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setPeriodExtraReward(_extraReward: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setSNXRewards(_snxRewards: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setSNXVolumeRewardsMultiplier(
      _SNXVolumeRewardsMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setThalesAMM(_thalesAMM: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setThalesRoyale(_royale: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setThalesStakingRewardsPool(
      _thalesStakingRewardsPool: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setUnstakeDurationPeriod(
      _unstakeDurationPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    stake(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    stakeOnBehalf(
      amount: PromiseOrValue<BigNumberish>,
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    stakedBalanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    stakerFeesClaimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    stakerLifetimeRewardsClaimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    startStakingPeriod(overrides?: CallOverrides): Promise<void>;

    startTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    startUnstake(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    thalesAMM(overrides?: CallOverrides): Promise<string>;

    thalesRoyale(overrides?: CallOverrides): Promise<string>;

    totalEscrowedLastPeriodEnd(overrides?: CallOverrides): Promise<BigNumber>;

    totalSNXFeesInPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    totalSNXRewardsInPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedLastPeriodEnd(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnershipAtInit(proxyAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    unstake(overrides?: CallOverrides): Promise<void>;

    unstakeDurationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    unstaking(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    unstakingAmount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    updateVolume(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'AMMVolumeRewardsMultiplierChanged(uint256)'(
      ammVolumeRewardsMultiplier?: null,
    ): AMMVolumeRewardsMultiplierChangedEventFilter;
    AMMVolumeRewardsMultiplierChanged(ammVolumeRewardsMultiplier?: null): AMMVolumeRewardsMultiplierChangedEventFilter;

    'AMMVolumeUpdated(address,uint256)'(account?: null, amount?: null): AMMVolumeUpdatedEventFilter;
    AMMVolumeUpdated(account?: null, amount?: null): AMMVolumeUpdatedEventFilter;

    'AddressResolverChanged(address)'(addressResolver?: null): AddressResolverChangedEventFilter;
    AddressResolverChanged(addressResolver?: null): AddressResolverChangedEventFilter;

    'CancelUnstake(address)'(account?: null): CancelUnstakeEventFilter;
    CancelUnstake(account?: null): CancelUnstakeEventFilter;

    'ClaimEnabled(bool)'(enabled?: null): ClaimEnabledEventFilter;
    ClaimEnabled(enabled?: null): ClaimEnabledEventFilter;

    'ClosedPeriod(uint256,uint256)'(PeriodOfStaking?: null, lastPeriodTimeStamp?: null): ClosedPeriodEventFilter;
    ClosedPeriod(PeriodOfStaking?: null, lastPeriodTimeStamp?: null): ClosedPeriodEventFilter;

    'DistributeFeesEnabled(bool)'(enabled?: null): DistributeFeesEnabledEventFilter;
    DistributeFeesEnabled(enabled?: null): DistributeFeesEnabledEventFilter;

    'DurationPeriodChanged(uint256)'(value?: null): DurationPeriodChangedEventFilter;
    DurationPeriodChanged(value?: null): DurationPeriodChangedEventFilter;

    'EscrowChanged(address)'(newEscrow?: null): EscrowChangedEventFilter;
    EscrowChanged(newEscrow?: null): EscrowChangedEventFilter;

    'ExoticBondsAddressChanged(address)'(exoticBonds?: null): ExoticBondsAddressChangedEventFilter;
    ExoticBondsAddressChanged(exoticBonds?: null): ExoticBondsAddressChangedEventFilter;

    'ExtraRewardsChanged(bool)'(extrarewardsactive?: null): ExtraRewardsChangedEventFilter;
    ExtraRewardsChanged(extrarewardsactive?: null): ExtraRewardsChangedEventFilter;

    'FeeRewardsClaimed(address,uint256)'(account?: null, unclaimedFees?: null): FeeRewardsClaimedEventFilter;
    FeeRewardsClaimed(account?: null, unclaimedFees?: null): FeeRewardsClaimedEventFilter;

    'FixedPeriodRewardChanged(uint256)'(value?: null): FixedPeriodRewardChangedEventFilter;
    FixedPeriodRewardChanged(value?: null): FixedPeriodRewardChangedEventFilter;

    'MaxAMMVolumeRewardsPercentageChanged(uint256)'(
      maxAmmVolumeRewardsPercentage?: null,
    ): MaxAMMVolumeRewardsPercentageChangedEventFilter;
    MaxAMMVolumeRewardsPercentageChanged(
      maxAmmVolumeRewardsPercentage?: null,
    ): MaxAMMVolumeRewardsPercentageChangedEventFilter;

    'MaxSNXRewardsPercentageChanged(uint256)'(
      maxSnxRewardsPercentage?: null,
    ): MaxSNXRewardsPercentageChangedEventFilter;
    MaxSNXRewardsPercentageChanged(maxSnxRewardsPercentage?: null): MaxSNXRewardsPercentageChangedEventFilter;

    'MaxThalesRoyaleRewardsPercentageChanged(uint256)'(
      maxThalesRewardsPercentage?: null,
    ): MaxThalesRoyaleRewardsPercentageChangedEventFilter;
    MaxThalesRoyaleRewardsPercentageChanged(
      maxThalesRewardsPercentage?: null,
    ): MaxThalesRoyaleRewardsPercentageChangedEventFilter;

    'OwnerChanged(address,address)'(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;

    'OwnerNominated(address)'(newOwner?: null): OwnerNominatedEventFilter;
    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;

    'PauseChanged(bool)'(isPaused?: null): PauseChangedEventFilter;
    PauseChanged(isPaused?: null): PauseChangedEventFilter;

    'PeriodExtraRewardChanged(uint256)'(value?: null): PeriodExtraRewardChangedEventFilter;
    PeriodExtraRewardChanged(value?: null): PeriodExtraRewardChangedEventFilter;

    'PriceFeedAddressChanged(address)'(pricefeed?: null): PriceFeedAddressChangedEventFilter;
    PriceFeedAddressChanged(pricefeed?: null): PriceFeedAddressChangedEventFilter;

    'RewardAdded(uint256)'(reward?: null): RewardAddedEventFilter;
    RewardAdded(reward?: null): RewardAddedEventFilter;

    'RewardsClaimed(address,uint256)'(account?: null, unclaimedReward?: null): RewardsClaimedEventFilter;
    RewardsClaimed(account?: null, unclaimedReward?: null): RewardsClaimedEventFilter;

    'SNXRewardsAddressChanged(address)'(snxRewards?: null): SNXRewardsAddressChangedEventFilter;
    SNXRewardsAddressChanged(snxRewards?: null): SNXRewardsAddressChangedEventFilter;

    'SNXVolumeRewardsMultiplierChanged(uint256)'(
      ammVolumeRewardsMultiplier?: null,
    ): SNXVolumeRewardsMultiplierChangedEventFilter;
    SNXVolumeRewardsMultiplierChanged(ammVolumeRewardsMultiplier?: null): SNXVolumeRewardsMultiplierChangedEventFilter;

    'Staked(address,uint256)'(user?: null, amount?: null): StakedEventFilter;
    Staked(user?: null, amount?: null): StakedEventFilter;

    'StakedOnBehalf(address,address,uint256)'(user?: null, staker?: null, amount?: null): StakedOnBehalfEventFilter;
    StakedOnBehalf(user?: null, staker?: null, amount?: null): StakedOnBehalfEventFilter;

    'StakingPeriodStarted()'(): StakingPeriodStartedEventFilter;
    StakingPeriodStarted(): StakingPeriodStartedEventFilter;

    'ThalesAMMAddressChanged(address)'(amm?: null): ThalesAMMAddressChangedEventFilter;
    ThalesAMMAddressChanged(amm?: null): ThalesAMMAddressChangedEventFilter;

    'ThalesRoyaleAddressChanged(address)'(royale?: null): ThalesRoyaleAddressChangedEventFilter;
    ThalesRoyaleAddressChanged(royale?: null): ThalesRoyaleAddressChangedEventFilter;

    'ThalesStakingRewardsPoolChanged(address)'(
      thalesStakingRewardsPool?: null,
    ): ThalesStakingRewardsPoolChangedEventFilter;
    ThalesStakingRewardsPoolChanged(thalesStakingRewardsPool?: null): ThalesStakingRewardsPoolChangedEventFilter;

    'UnstakeCooldown(address,uint256,uint256)'(
      account?: null,
      cooldownTime?: null,
      amount?: null,
    ): UnstakeCooldownEventFilter;
    UnstakeCooldown(account?: null, cooldownTime?: null, amount?: null): UnstakeCooldownEventFilter;

    'UnstakeDurationPeriodChanged(uint256)'(value?: null): UnstakeDurationPeriodChangedEventFilter;
    UnstakeDurationPeriodChanged(value?: null): UnstakeDurationPeriodChangedEventFilter;

    'Unstaked(address,uint256)'(account?: null, unstakeAmount?: null): UnstakedEventFilter;
    Unstaked(account?: null, unstakeAmount?: null): UnstakedEventFilter;
  };

  estimateGas: {
    AMMVolumeRewardsMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    SNXRewards(overrides?: CallOverrides): Promise<BigNumber>;

    SNXVolumeRewardsMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    ThalesStakingRewardsPool(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    addressResolver(overrides?: CallOverrides): Promise<BigNumber>;

    canClosePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    cancelUnstake(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    claimEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    claimReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    closePeriod(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    currentPeriodFees(overrides?: CallOverrides): Promise<BigNumber>;

    currentPeriodRewards(overrides?: CallOverrides): Promise<BigNumber>;

    distributeFeesEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    durationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    exoticBonds(overrides?: CallOverrides): Promise<BigNumber>;

    extraRewardsActive(overrides?: CallOverrides): Promise<BigNumber>;

    feeToken(overrides?: CallOverrides): Promise<BigNumber>;

    fixedPeriodReward(overrides?: CallOverrides): Promise<BigNumber>;

    getAMMBonus(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAMMBonusPercentage(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAMMVolume(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAlreadyClaimedFees(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAlreadyClaimedRewards(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getBaseReward(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getCRatio(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getContractFeeFunds(overrides?: CallOverrides): Promise<BigNumber>;

    getContractRewardFunds(overrides?: CallOverrides): Promise<BigNumber>;

    getLastPeriodOfClaimedRewards(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRewardFeesAvailable(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRewardsAvailable(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getSNXBonus(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getSNXBonusPercentage(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getSNXDebt(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getSNXRateForCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    getSNXRewardsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getSNXStaked(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getSNXTargetRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getThalesRoyaleBonus(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getThalesRoyaleBonusPercentage(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBonus(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBonusPercentage(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    iEscrowThales(overrides?: CallOverrides): Promise<BigNumber>;

    initNonReentrant(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    initialize(
      _owner: PromiseOrValue<string>,
      _iEscrowThales: PromiseOrValue<string>,
      _stakingToken: PromiseOrValue<string>,
      _feeToken: PromiseOrValue<string>,
      _durationPeriod: PromiseOrValue<BigNumberish>,
      _unstakeDurationPeriod: PromiseOrValue<BigNumberish>,
      _ISNXRewards: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    lastPauseTime(overrides?: CallOverrides): Promise<BigNumber>;

    lastPeriodTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    lastUnstakeTime(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxAMMVolumeRewardsPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    maxSNXRewardsPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    maxThalesRoyaleRewardsPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    periodExtraReward(overrides?: CallOverrides): Promise<BigNumber>;

    periodsOfStaking(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    setAMMVolumeRewardsMultiplier(
      _AMMVolumeRewardsMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setAddressResolver(
      _addressResolver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setClaimEnabled(
      _claimEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDistributeFeesEnabled(
      _distributeFeesEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDurationPeriod(
      _durationPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setEscrow(
      _escrowThalesContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setExoticBonds(
      _exoticBonds: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setExtraRewards(
      _extraRewardsActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFixedPeriodReward(
      _fixedReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxAMMVolumeRewardsPercentage(
      _maxAMMVolumeRewardsPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxSNXRewardsPercentage(
      _maxSNXRewardsPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxThalesRoyaleRewardsPercentage(
      _maxThalesRoyaleRewardsPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPaused(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPeriodExtraReward(
      _extraReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSNXRewards(
      _snxRewards: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSNXVolumeRewardsMultiplier(
      _SNXVolumeRewardsMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setThalesAMM(
      _thalesAMM: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setThalesRoyale(
      _royale: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setThalesStakingRewardsPool(
      _thalesStakingRewardsPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setUnstakeDurationPeriod(
      _unstakeDurationPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stakeOnBehalf(
      amount: PromiseOrValue<BigNumberish>,
      staker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stakedBalanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    stakerFeesClaimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    stakerLifetimeRewardsClaimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    startStakingPeriod(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    startTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    startUnstake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    thalesAMM(overrides?: CallOverrides): Promise<BigNumber>;

    thalesRoyale(overrides?: CallOverrides): Promise<BigNumber>;

    totalEscrowedLastPeriodEnd(overrides?: CallOverrides): Promise<BigNumber>;

    totalSNXFeesInPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    totalSNXRewardsInPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedLastPeriodEnd(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnershipAtInit(
      proxyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unstake(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    unstakeDurationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    unstaking(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    unstakingAmount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    updateVolume(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AMMVolumeRewardsMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SNXRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SNXVolumeRewardsMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ThalesStakingRewardsPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    addressResolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canClosePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelUnstake(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    claimEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    closePeriod(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    currentPeriodFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentPeriodRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeFeesEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    durationPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exoticBonds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extraRewardsActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fixedPeriodReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAMMBonus(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAMMBonusPercentage(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAMMVolume(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAlreadyClaimedFees(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAlreadyClaimedRewards(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBaseReward(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCRatio(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContractFeeFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContractRewardFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastPeriodOfClaimedRewards(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRewardFeesAvailable(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardsAvailable(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSNXBonus(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSNXBonusPercentage(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSNXDebt(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSNXRateForCurrency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSNXRewardsAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSNXStaked(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSNXTargetRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getThalesRoyaleBonus(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getThalesRoyaleBonusPercentage(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTotalBonus(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalBonusPercentage(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    iEscrowThales(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initNonReentrant(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      _iEscrowThales: PromiseOrValue<string>,
      _stakingToken: PromiseOrValue<string>,
      _feeToken: PromiseOrValue<string>,
      _durationPeriod: PromiseOrValue<BigNumberish>,
      _unstakeDurationPeriod: PromiseOrValue<BigNumberish>,
      _ISNXRewards: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    lastPauseTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastPeriodTimeStamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUnstakeTime(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxAMMVolumeRewardsPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSNXRewardsPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxThalesRoyaleRewardsPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodExtraReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodsOfStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAMMVolumeRewardsMultiplier(
      _AMMVolumeRewardsMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setAddressResolver(
      _addressResolver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setClaimEnabled(
      _claimEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDistributeFeesEnabled(
      _distributeFeesEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDurationPeriod(
      _durationPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setEscrow(
      _escrowThalesContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setExoticBonds(
      _exoticBonds: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setExtraRewards(
      _extraRewardsActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFixedPeriodReward(
      _fixedReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxAMMVolumeRewardsPercentage(
      _maxAMMVolumeRewardsPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxSNXRewardsPercentage(
      _maxSNXRewardsPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxThalesRoyaleRewardsPercentage(
      _maxThalesRoyaleRewardsPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPaused(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPeriodExtraReward(
      _extraReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSNXRewards(
      _snxRewards: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSNXVolumeRewardsMultiplier(
      _SNXVolumeRewardsMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setThalesAMM(
      _thalesAMM: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setThalesRoyale(
      _royale: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setThalesStakingRewardsPool(
      _thalesStakingRewardsPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setUnstakeDurationPeriod(
      _unstakeDurationPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stakeOnBehalf(
      amount: PromiseOrValue<BigNumberish>,
      staker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stakedBalanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakerFeesClaimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakerLifetimeRewardsClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startStakingPeriod(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    startTimeStamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startUnstake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    thalesAMM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    thalesRoyale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalEscrowedLastPeriodEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSNXFeesInPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSNXRewardsInPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakedLastPeriodEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnershipAtInit(
      proxyAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unstake(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    unstakeDurationPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstaking(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstakingAmount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateVolume(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
