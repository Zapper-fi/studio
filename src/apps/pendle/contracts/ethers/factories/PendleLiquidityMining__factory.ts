/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type {
  PendleLiquidityMining,
  PendleLiquidityMiningInterface,
  PendleLiquidityMiningBaseMulti,
} from '../PendleLiquidityMining';

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'governanceManager',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'pausingManager',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'whitelist',
            type: 'address',
          },
          {
            components: [
              {
                internalType: 'address',
                name: 'tokenA',
                type: 'address',
              },
              {
                internalType: 'address',
                name: 'tokenB',
                type: 'address',
              },
            ],
            internalType: 'struct PairTokens',
            name: 'rewardTokens',
            type: 'tuple',
          },
          {
            internalType: 'address',
            name: 'router',
            type: 'address',
          },
          {
            internalType: 'bytes32',
            name: 'marketFactoryId',
            type: 'bytes32',
          },
          {
            internalType: 'bytes32',
            name: 'forgeId',
            type: 'bytes32',
          },
          {
            internalType: 'address',
            name: 'underlyingAsset',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'baseToken',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'startTime',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'epochDuration',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'vestingEpochs',
            type: 'uint256',
          },
        ],
        internalType: 'struct PendleLiquidityMiningBaseMulti.ConstructorArgs',
        name: 'args',
        type: 'tuple',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256[]',
        name: '_expiries',
        type: 'uint256[]',
      },
      {
        indexed: false,
        internalType: 'uint256[]',
        name: '_allocationNumerators',
        type: 'uint256[]',
      },
    ],
    name: 'AllocationSettingSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'sendTo',
        type: 'address',
      },
    ],
    name: 'EtherWithdraw',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'uintA',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'uintB',
            type: 'uint256',
          },
        ],
        indexed: false,
        internalType: 'struct PairUints[]',
        name: '_rewards',
        type: 'tuple[]',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'numberOfEpochs',
        type: 'uint256',
      },
    ],
    name: 'Funded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'expiry',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
      {
        components: [
          {
            internalType: 'uint256',
            name: 'uintA',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'uintB',
            type: 'uint256',
          },
        ],
        indexed: false,
        internalType: 'struct PairUints',
        name: 'amount',
        type: 'tuple',
      },
    ],
    name: 'PendleRewardsSettled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'expiry',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'interests',
        type: 'uint256',
      },
    ],
    name: 'RedeemLpInterests',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256[]',
        name: '_epochIds',
        type: 'uint256[]',
      },
      {
        components: [
          {
            internalType: 'uint256',
            name: 'uintA',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'uintB',
            type: 'uint256',
          },
        ],
        indexed: false,
        internalType: 'struct PairUints[]',
        name: '_rewards',
        type: 'tuple[]',
      },
    ],
    name: 'RewardsToppedUp',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'expiry',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'Staked',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'contract IERC20',
        name: 'token',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'sendTo',
        type: 'address',
      },
    ],
    name: 'TokenWithdraw',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'expiry',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'Withdrawn',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'allExpiries',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'allocationSettings',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'baseToken',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'data',
    outputs: [
      {
        internalType: 'contract IPendleData',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'epochDuration',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'forge',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'forgeId',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'uintA',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'uintB',
            type: 'uint256',
          },
        ],
        internalType: 'struct PairUints[]',
        name: '_rewards',
        type: 'tuple[]',
      },
    ],
    name: 'fund',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'funded',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'expiry',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
    ],
    name: 'getBalances',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getCurrentEpochId',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'governanceManager',
    outputs: [
      {
        internalType: 'contract PendleGovernanceManager',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'latestSetting',
    outputs: [
      {
        internalType: 'uint256',
        name: 'id',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'firstEpochToApply',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'expiry',
        type: 'uint256',
      },
    ],
    name: 'lpHolderForExpiry',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'marketFactoryId',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'numberOfEpochs',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'readAllExpiriesLength',
    outputs: [
      {
        internalType: 'uint256',
        name: 'length',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'epochId',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
    ],
    name: 'readAvailableRewardsForUser',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'uintA',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'uintB',
            type: 'uint256',
          },
        ],
        internalType: 'struct PairUints',
        name: 'availableRewardsForUser',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'epochId',
        type: 'uint256',
      },
    ],
    name: 'readEpochData',
    outputs: [
      {
        internalType: 'uint256',
        name: 'settingId',
        type: 'uint256',
      },
      {
        components: [
          {
            internalType: 'uint256',
            name: 'uintA',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'uintB',
            type: 'uint256',
          },
        ],
        internalType: 'struct PairUints',
        name: 'totalRewards',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'expiry',
        type: 'uint256',
      },
    ],
    name: 'readExpiryData',
    outputs: [
      {
        internalType: 'uint256',
        name: 'totalStakeLP',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'lastNYield',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'paramL',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'lpHolder',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'epochId',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'expiry',
        type: 'uint256',
      },
    ],
    name: 'readExpirySpecificEpochData',
    outputs: [
      {
        internalType: 'uint256',
        name: 'stakeUnits',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'lastUpdatedForExpiry',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'readRewardTokens',
    outputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'tokenA',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'tokenB',
            type: 'address',
          },
        ],
        internalType: 'struct PairTokens',
        name: 'tokens',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'epochId',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'expiry',
        type: 'uint256',
      },
    ],
    name: 'readStakeUnitsForUser',
    outputs: [
      {
        internalType: 'uint256',
        name: 'stakeUnitsForUser',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_user',
        type: 'address',
      },
    ],
    name: 'readUserExpiries',
    outputs: [
      {
        internalType: 'uint256[]',
        name: '_expiries',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'expiry',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
    ],
    name: 'readUserSpecificExpiryData',
    outputs: [
      {
        internalType: 'uint256',
        name: 'lastTimeUserStakeUpdated',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'lastEpochClaimed',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'balances',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'lastParamL',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'dueInterests',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'expiry',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
    ],
    name: 'redeemLpInterests',
    outputs: [
      {
        internalType: 'uint256',
        name: 'interests',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'expiry',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
    ],
    name: 'redeemRewards',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'uintA',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'uintB',
            type: 'uint256',
          },
        ],
        internalType: 'struct PairUints',
        name: 'rewards',
        type: 'tuple',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'rewardTokens',
    outputs: [
      {
        internalType: 'address',
        name: 'tokenA',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'tokenB',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'router',
    outputs: [
      {
        internalType: 'contract IPendleRouter',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256[]',
        name: '_expiries',
        type: 'uint256[]',
      },
      {
        internalType: 'uint256[]',
        name: '_allocationNumerators',
        type: 'uint256[]',
      },
    ],
    name: 'setAllocationSetting',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256[]',
        name: 'expiries',
        type: 'uint256[]',
      },
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
    ],
    name: 'setUpEmergencyMode',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'forAddr',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'expiry',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'stakeFor',
    outputs: [
      {
        internalType: 'address',
        name: 'newLpHoldingContractAddress',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'expiry',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'deadline',
        type: 'uint256',
      },
      {
        internalType: 'uint8',
        name: 'v',
        type: 'uint8',
      },
      {
        internalType: 'bytes32',
        name: 'r',
        type: 'bytes32',
      },
      {
        internalType: 'bytes32',
        name: 's',
        type: 'bytes32',
      },
    ],
    name: 'stakeWithPermit',
    outputs: [
      {
        internalType: 'address',
        name: 'newLpHoldingContractAddress',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'startTime',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256[]',
        name: '_epochIds',
        type: 'uint256[]',
      },
      {
        components: [
          {
            internalType: 'uint256',
            name: 'uintA',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'uintB',
            type: 'uint256',
          },
        ],
        internalType: 'struct PairUints[]',
        name: '_rewards',
        type: 'tuple[]',
      },
    ],
    name: 'topUpRewards',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'epochId',
        type: 'uint256',
      },
    ],
    name: 'totalRewardsForEpoch',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'uintA',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'uintB',
            type: 'uint256',
          },
        ],
        internalType: 'struct PairUints',
        name: 'rewards',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'underlyingAsset',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'underlyingYieldToken',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'vestingEpochs',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'whitelist',
    outputs: [
      {
        internalType: 'contract IPendleWhitelist',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        internalType: 'address payable',
        name: 'sendTo',
        type: 'address',
      },
    ],
    name: 'withdrawEther',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'expiry',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'withdrawTo',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IERC20',
        name: 'token',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'sendTo',
        type: 'address',
      },
    ],
    name: 'withdrawToken',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

export class PendleLiquidityMining__factory {
  static readonly abi = _abi;
  static createInterface(): PendleLiquidityMiningInterface {
    return new utils.Interface(_abi) as PendleLiquidityMiningInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): PendleLiquidityMining {
    return new Contract(address, _abi, signerOrProvider) as PendleLiquidityMining;
  }
}
