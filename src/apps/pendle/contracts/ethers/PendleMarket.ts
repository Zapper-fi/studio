/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export type PendingTransferStruct = {
  amount: PromiseOrValue<BigNumberish>;
  isOut: PromiseOrValue<boolean>;
};

export type PendingTransferStructOutput = [BigNumber, boolean] & {
  amount: BigNumber;
  isOut: boolean;
};

export interface PendleMarketInterface extends utils.Interface {
  functions: {
    'DOMAIN_SEPARATOR()': FunctionFragment;
    'PERMIT_TYPEHASH()': FunctionFragment;
    'addMarketLiquidityDual(address,uint256,uint256,uint256,uint256)': FunctionFragment;
    'addMarketLiquiditySingle(address,address,uint256,uint256)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'bootstrap(address,uint256,uint256)': FunctionFragment;
    'bootstrapped()': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'expiry()': FunctionFragment;
    'factoryId()': FunctionFragment;
    'getReserves()': FunctionFragment;
    'governanceManager()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'lastCurveShiftBlock()': FunctionFragment;
    'lastNYield()': FunctionFragment;
    'lastParamK()': FunctionFragment;
    'lockStartTime()': FunctionFragment;
    'name()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'paramL()': FunctionFragment;
    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'redeemLpInterests(address)': FunctionFragment;
    'removeMarketLiquidityDual(address,uint256,uint256,uint256)': FunctionFragment;
    'removeMarketLiquiditySingle(address,address,uint256,uint256)': FunctionFragment;
    'router()': FunctionFragment;
    'setUpEmergencyMode(address)': FunctionFragment;
    'start()': FunctionFragment;
    'swapExactIn(address,uint256,address,uint256)': FunctionFragment;
    'swapExactOut(address,uint256,address,uint256)': FunctionFragment;
    'symbol()': FunctionFragment;
    'token()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'withdrawEther(uint256,address)': FunctionFragment;
    'withdrawToken(address,uint256,address)': FunctionFragment;
    'xyt()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DOMAIN_SEPARATOR'
      | 'PERMIT_TYPEHASH'
      | 'addMarketLiquidityDual'
      | 'addMarketLiquiditySingle'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'bootstrap'
      | 'bootstrapped'
      | 'decimals'
      | 'decreaseAllowance'
      | 'expiry'
      | 'factoryId'
      | 'getReserves'
      | 'governanceManager'
      | 'increaseAllowance'
      | 'lastCurveShiftBlock'
      | 'lastNYield'
      | 'lastParamK'
      | 'lockStartTime'
      | 'name'
      | 'nonces'
      | 'paramL'
      | 'permit'
      | 'redeemLpInterests'
      | 'removeMarketLiquidityDual'
      | 'removeMarketLiquiditySingle'
      | 'router'
      | 'setUpEmergencyMode'
      | 'start'
      | 'swapExactIn'
      | 'swapExactOut'
      | 'symbol'
      | 'token'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'withdrawEther'
      | 'withdrawToken'
      | 'xyt',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PERMIT_TYPEHASH', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addMarketLiquidityDual',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'addMarketLiquiditySingle',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'bootstrap',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'bootstrapped', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'expiry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'factoryId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getReserves', values?: undefined): string;
  encodeFunctionData(functionFragment: 'governanceManager', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'lastCurveShiftBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastNYield', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastParamK', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lockStartTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'paramL', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'permit',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'redeemLpInterests', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'removeMarketLiquidityDual',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'removeMarketLiquiditySingle',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'router', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setUpEmergencyMode', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'start', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'swapExactIn',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExactOut',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawEther',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawToken',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'xyt', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PERMIT_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addMarketLiquidityDual', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addMarketLiquiditySingle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bootstrap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bootstrapped', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'expiry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'factoryId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReserves', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governanceManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastCurveShiftBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastNYield', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastParamK', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockStartTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paramL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemLpInterests', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeMarketLiquidityDual', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeMarketLiquiditySingle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'router', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUpEmergencyMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'start', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapExactIn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapExactOut', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawEther', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xyt', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'EtherWithdraw(uint256,address)': EventFragment;
    'Sync(uint256,uint256,uint256)': EventFragment;
    'TokenWithdraw(address,uint256,address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EtherWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Sync'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface EtherWithdrawEventObject {
  amount: BigNumber;
  sendTo: string;
}
export type EtherWithdrawEvent = TypedEvent<[BigNumber, string], EtherWithdrawEventObject>;

export type EtherWithdrawEventFilter = TypedEventFilter<EtherWithdrawEvent>;

export interface SyncEventObject {
  reserve0: BigNumber;
  weight0: BigNumber;
  reserve1: BigNumber;
}
export type SyncEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], SyncEventObject>;

export type SyncEventFilter = TypedEventFilter<SyncEvent>;

export interface TokenWithdrawEventObject {
  token: string;
  amount: BigNumber;
  sendTo: string;
}
export type TokenWithdrawEvent = TypedEvent<[string, BigNumber, string], TokenWithdrawEventObject>;

export type TokenWithdrawEventFilter = TypedEventFilter<TokenWithdrawEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface PendleMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PendleMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    addMarketLiquidityDual(
      user: PromiseOrValue<string>,
      _desiredXytAmount: PromiseOrValue<BigNumberish>,
      _desiredTokenAmount: PromiseOrValue<BigNumberish>,
      _xytMinAmount: PromiseOrValue<BigNumberish>,
      _tokenMinAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addMarketLiquiditySingle(
      user: PromiseOrValue<string>,
      _inToken: PromiseOrValue<string>,
      _exactIn: PromiseOrValue<BigNumberish>,
      _minOutLp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    bootstrap(
      user: PromiseOrValue<string>,
      initialXytLiquidity: PromiseOrValue<BigNumberish>,
      initialTokenLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    bootstrapped(overrides?: CallOverrides): Promise<[boolean]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    expiry(overrides?: CallOverrides): Promise<[BigNumber]>;

    factoryId(overrides?: CallOverrides): Promise<[string]>;

    getReserves(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        xytBalance: BigNumber;
        xytWeight: BigNumber;
        tokenBalance: BigNumber;
        tokenWeight: BigNumber;
        currentBlock: BigNumber;
      }
    >;

    governanceManager(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    lastCurveShiftBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastNYield(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastParamK(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    paramL(overrides?: CallOverrides): Promise<[BigNumber]>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    redeemLpInterests(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeMarketLiquidityDual(
      user: PromiseOrValue<string>,
      _inLp: PromiseOrValue<BigNumberish>,
      _minOutXyt: PromiseOrValue<BigNumberish>,
      _minOutToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeMarketLiquiditySingle(
      user: PromiseOrValue<string>,
      _outToken: PromiseOrValue<string>,
      _inLp: PromiseOrValue<BigNumberish>,
      _minOutAmountToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setUpEmergencyMode(
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    start(overrides?: CallOverrides): Promise<[BigNumber]>;

    swapExactIn(
      inToken: PromiseOrValue<string>,
      inAmount: PromiseOrValue<BigNumberish>,
      outToken: PromiseOrValue<string>,
      minOutAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swapExactOut(
      inToken: PromiseOrValue<string>,
      maxInAmount: PromiseOrValue<BigNumberish>,
      outToken: PromiseOrValue<string>,
      outAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawEther(
      amount: PromiseOrValue<BigNumberish>,
      sendTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawToken(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      sendTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    xyt(overrides?: CallOverrides): Promise<[string]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  addMarketLiquidityDual(
    user: PromiseOrValue<string>,
    _desiredXytAmount: PromiseOrValue<BigNumberish>,
    _desiredTokenAmount: PromiseOrValue<BigNumberish>,
    _xytMinAmount: PromiseOrValue<BigNumberish>,
    _tokenMinAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addMarketLiquiditySingle(
    user: PromiseOrValue<string>,
    _inToken: PromiseOrValue<string>,
    _exactIn: PromiseOrValue<BigNumberish>,
    _minOutLp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  bootstrap(
    user: PromiseOrValue<string>,
    initialXytLiquidity: PromiseOrValue<BigNumberish>,
    initialTokenLiquidity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  bootstrapped(overrides?: CallOverrides): Promise<boolean>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  expiry(overrides?: CallOverrides): Promise<BigNumber>;

  factoryId(overrides?: CallOverrides): Promise<string>;

  getReserves(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      xytBalance: BigNumber;
      xytWeight: BigNumber;
      tokenBalance: BigNumber;
      tokenWeight: BigNumber;
      currentBlock: BigNumber;
    }
  >;

  governanceManager(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  lastCurveShiftBlock(overrides?: CallOverrides): Promise<BigNumber>;

  lastNYield(overrides?: CallOverrides): Promise<BigNumber>;

  lastParamK(overrides?: CallOverrides): Promise<BigNumber>;

  lockStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  paramL(overrides?: CallOverrides): Promise<BigNumber>;

  permit(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  redeemLpInterests(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeMarketLiquidityDual(
    user: PromiseOrValue<string>,
    _inLp: PromiseOrValue<BigNumberish>,
    _minOutXyt: PromiseOrValue<BigNumberish>,
    _minOutToken: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeMarketLiquiditySingle(
    user: PromiseOrValue<string>,
    _outToken: PromiseOrValue<string>,
    _inLp: PromiseOrValue<BigNumberish>,
    _minOutAmountToken: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  setUpEmergencyMode(
    spender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  start(overrides?: CallOverrides): Promise<BigNumber>;

  swapExactIn(
    inToken: PromiseOrValue<string>,
    inAmount: PromiseOrValue<BigNumberish>,
    outToken: PromiseOrValue<string>,
    minOutAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swapExactOut(
    inToken: PromiseOrValue<string>,
    maxInAmount: PromiseOrValue<BigNumberish>,
    outToken: PromiseOrValue<string>,
    outAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawEther(
    amount: PromiseOrValue<BigNumberish>,
    sendTo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawToken(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    sendTo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  xyt(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    addMarketLiquidityDual(
      user: PromiseOrValue<string>,
      _desiredXytAmount: PromiseOrValue<BigNumberish>,
      _desiredTokenAmount: PromiseOrValue<BigNumberish>,
      _xytMinAmount: PromiseOrValue<BigNumberish>,
      _tokenMinAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [[PendingTransferStructOutput, PendingTransferStructOutput], BigNumber] & {
        transfers: [PendingTransferStructOutput, PendingTransferStructOutput];
        lpOut: BigNumber;
      }
    >;

    addMarketLiquiditySingle(
      user: PromiseOrValue<string>,
      _inToken: PromiseOrValue<string>,
      _exactIn: PromiseOrValue<BigNumberish>,
      _minOutLp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [[PendingTransferStructOutput, PendingTransferStructOutput], BigNumber] & {
        transfers: [PendingTransferStructOutput, PendingTransferStructOutput];
        exactOutLp: BigNumber;
      }
    >;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    bootstrap(
      user: PromiseOrValue<string>,
      initialXytLiquidity: PromiseOrValue<BigNumberish>,
      initialTokenLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [[PendingTransferStructOutput, PendingTransferStructOutput], BigNumber] & {
        transfers: [PendingTransferStructOutput, PendingTransferStructOutput];
        exactOutLp: BigNumber;
      }
    >;

    bootstrapped(overrides?: CallOverrides): Promise<boolean>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    expiry(overrides?: CallOverrides): Promise<BigNumber>;

    factoryId(overrides?: CallOverrides): Promise<string>;

    getReserves(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        xytBalance: BigNumber;
        xytWeight: BigNumber;
        tokenBalance: BigNumber;
        tokenWeight: BigNumber;
        currentBlock: BigNumber;
      }
    >;

    governanceManager(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    lastCurveShiftBlock(overrides?: CallOverrides): Promise<BigNumber>;

    lastNYield(overrides?: CallOverrides): Promise<BigNumber>;

    lastParamK(overrides?: CallOverrides): Promise<BigNumber>;

    lockStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    paramL(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    redeemLpInterests(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    removeMarketLiquidityDual(
      user: PromiseOrValue<string>,
      _inLp: PromiseOrValue<BigNumberish>,
      _minOutXyt: PromiseOrValue<BigNumberish>,
      _minOutToken: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[PendingTransferStructOutput, PendingTransferStructOutput]>;

    removeMarketLiquiditySingle(
      user: PromiseOrValue<string>,
      _outToken: PromiseOrValue<string>,
      _inLp: PromiseOrValue<BigNumberish>,
      _minOutAmountToken: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[PendingTransferStructOutput, PendingTransferStructOutput]>;

    router(overrides?: CallOverrides): Promise<string>;

    setUpEmergencyMode(spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    start(overrides?: CallOverrides): Promise<BigNumber>;

    swapExactIn(
      inToken: PromiseOrValue<string>,
      inAmount: PromiseOrValue<BigNumberish>,
      outToken: PromiseOrValue<string>,
      minOutAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, [PendingTransferStructOutput, PendingTransferStructOutput]] & {
        outAmount: BigNumber;
        transfers: [PendingTransferStructOutput, PendingTransferStructOutput];
      }
    >;

    swapExactOut(
      inToken: PromiseOrValue<string>,
      maxInAmount: PromiseOrValue<BigNumberish>,
      outToken: PromiseOrValue<string>,
      outAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, [PendingTransferStructOutput, PendingTransferStructOutput]] & {
        inAmount: BigNumber;
        transfers: [PendingTransferStructOutput, PendingTransferStructOutput];
      }
    >;

    symbol(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    withdrawEther(
      amount: PromiseOrValue<BigNumberish>,
      sendTo: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawToken(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      sendTo: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    xyt(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'EtherWithdraw(uint256,address)'(amount?: null, sendTo?: null): EtherWithdrawEventFilter;
    EtherWithdraw(amount?: null, sendTo?: null): EtherWithdrawEventFilter;

    'Sync(uint256,uint256,uint256)'(reserve0?: null, weight0?: null, reserve1?: null): SyncEventFilter;
    Sync(reserve0?: null, weight0?: null, reserve1?: null): SyncEventFilter;

    'TokenWithdraw(address,uint256,address)'(token?: null, amount?: null, sendTo?: null): TokenWithdrawEventFilter;
    TokenWithdraw(token?: null, amount?: null, sendTo?: null): TokenWithdrawEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    addMarketLiquidityDual(
      user: PromiseOrValue<string>,
      _desiredXytAmount: PromiseOrValue<BigNumberish>,
      _desiredTokenAmount: PromiseOrValue<BigNumberish>,
      _xytMinAmount: PromiseOrValue<BigNumberish>,
      _tokenMinAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addMarketLiquiditySingle(
      user: PromiseOrValue<string>,
      _inToken: PromiseOrValue<string>,
      _exactIn: PromiseOrValue<BigNumberish>,
      _minOutLp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    bootstrap(
      user: PromiseOrValue<string>,
      initialXytLiquidity: PromiseOrValue<BigNumberish>,
      initialTokenLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    bootstrapped(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    expiry(overrides?: CallOverrides): Promise<BigNumber>;

    factoryId(overrides?: CallOverrides): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    governanceManager(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    lastCurveShiftBlock(overrides?: CallOverrides): Promise<BigNumber>;

    lastNYield(overrides?: CallOverrides): Promise<BigNumber>;

    lastParamK(overrides?: CallOverrides): Promise<BigNumber>;

    lockStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    paramL(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    redeemLpInterests(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeMarketLiquidityDual(
      user: PromiseOrValue<string>,
      _inLp: PromiseOrValue<BigNumberish>,
      _minOutXyt: PromiseOrValue<BigNumberish>,
      _minOutToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeMarketLiquiditySingle(
      user: PromiseOrValue<string>,
      _outToken: PromiseOrValue<string>,
      _inLp: PromiseOrValue<BigNumberish>,
      _minOutAmountToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setUpEmergencyMode(
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    start(overrides?: CallOverrides): Promise<BigNumber>;

    swapExactIn(
      inToken: PromiseOrValue<string>,
      inAmount: PromiseOrValue<BigNumberish>,
      outToken: PromiseOrValue<string>,
      minOutAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swapExactOut(
      inToken: PromiseOrValue<string>,
      maxInAmount: PromiseOrValue<BigNumberish>,
      outToken: PromiseOrValue<string>,
      outAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawEther(
      amount: PromiseOrValue<BigNumberish>,
      sendTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawToken(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      sendTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    xyt(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addMarketLiquidityDual(
      user: PromiseOrValue<string>,
      _desiredXytAmount: PromiseOrValue<BigNumberish>,
      _desiredTokenAmount: PromiseOrValue<BigNumberish>,
      _xytMinAmount: PromiseOrValue<BigNumberish>,
      _tokenMinAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addMarketLiquiditySingle(
      user: PromiseOrValue<string>,
      _inToken: PromiseOrValue<string>,
      _exactIn: PromiseOrValue<BigNumberish>,
      _minOutLp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bootstrap(
      user: PromiseOrValue<string>,
      initialXytLiquidity: PromiseOrValue<BigNumberish>,
      initialTokenLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    bootstrapped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    expiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factoryId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    lastCurveShiftBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastNYield(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastParamK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paramL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    redeemLpInterests(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeMarketLiquidityDual(
      user: PromiseOrValue<string>,
      _inLp: PromiseOrValue<BigNumberish>,
      _minOutXyt: PromiseOrValue<BigNumberish>,
      _minOutToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeMarketLiquiditySingle(
      user: PromiseOrValue<string>,
      _outToken: PromiseOrValue<string>,
      _inLp: PromiseOrValue<BigNumberish>,
      _minOutAmountToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setUpEmergencyMode(
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    start(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapExactIn(
      inToken: PromiseOrValue<string>,
      inAmount: PromiseOrValue<BigNumberish>,
      outToken: PromiseOrValue<string>,
      minOutAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swapExactOut(
      inToken: PromiseOrValue<string>,
      maxInAmount: PromiseOrValue<BigNumberish>,
      outToken: PromiseOrValue<string>,
      outAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawEther(
      amount: PromiseOrValue<BigNumberish>,
      sendTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      sendTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    xyt(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
