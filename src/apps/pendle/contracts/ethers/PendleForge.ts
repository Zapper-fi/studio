/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface PendleForgeInterface extends utils.Interface {
  functions: {
    'data()': FunctionFragment;
    'dueInterests(address,uint256,address)': FunctionFragment;
    'forgeId()': FunctionFragment;
    'getExchangeRate(address)': FunctionFragment;
    'getYieldBearingToken(address)': FunctionFragment;
    'governanceManager()': FunctionFragment;
    'lastRate(address,uint256,address)': FunctionFragment;
    'lastRateBeforeExpiry(address,uint256)': FunctionFragment;
    'mintOtAndXyt(address,uint256,uint256,address)': FunctionFragment;
    'newYieldContracts(address,uint256)': FunctionFragment;
    'pausingManager()': FunctionFragment;
    'redeemAfterExpiry(address,address,uint256)': FunctionFragment;
    'redeemDueInterests(address,address,uint256)': FunctionFragment;
    'redeemUnderlying(address,address,uint256,uint256)': FunctionFragment;
    'registerTokens(address[],uint256[][])': FunctionFragment;
    'rewardManager()': FunctionFragment;
    'rewardToken()': FunctionFragment;
    'router()': FunctionFragment;
    'setUpEmergencyMode(address,uint256,address)': FunctionFragment;
    'setUpEmergencyModeV2(address,uint256,address,bool)': FunctionFragment;
    'tokenInfo(address)': FunctionFragment;
    'totalFee(address,uint256)': FunctionFragment;
    'updateDueInterests(address,uint256,address)': FunctionFragment;
    'updatePendingRewards(address,uint256,address)': FunctionFragment;
    'verifyToken(address,uint256[])': FunctionFragment;
    'withdrawEther(uint256,address)': FunctionFragment;
    'withdrawForgeFee(address,uint256)': FunctionFragment;
    'withdrawToken(address,uint256,address)': FunctionFragment;
    'wxBTRFLY()': FunctionFragment;
    'xBTRFLY()': FunctionFragment;
    'yieldContractDeployer()': FunctionFragment;
    'yieldTokenHolders(address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'data'
      | 'dueInterests'
      | 'forgeId'
      | 'getExchangeRate'
      | 'getYieldBearingToken'
      | 'governanceManager'
      | 'lastRate'
      | 'lastRateBeforeExpiry'
      | 'mintOtAndXyt'
      | 'newYieldContracts'
      | 'pausingManager'
      | 'redeemAfterExpiry'
      | 'redeemDueInterests'
      | 'redeemUnderlying'
      | 'registerTokens'
      | 'rewardManager'
      | 'rewardToken'
      | 'router'
      | 'setUpEmergencyMode'
      | 'setUpEmergencyModeV2'
      | 'tokenInfo'
      | 'totalFee'
      | 'updateDueInterests'
      | 'updatePendingRewards'
      | 'verifyToken'
      | 'withdrawEther'
      | 'withdrawForgeFee'
      | 'withdrawToken'
      | 'wxBTRFLY'
      | 'xBTRFLY'
      | 'yieldContractDeployer'
      | 'yieldTokenHolders',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'data', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'dueInterests',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'forgeId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getExchangeRate', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getYieldBearingToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'governanceManager', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'lastRate',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'lastRateBeforeExpiry',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'mintOtAndXyt',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'newYieldContracts',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'pausingManager', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'redeemAfterExpiry',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'redeemDueInterests',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'redeemUnderlying',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'registerTokens',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[][]],
  ): string;
  encodeFunctionData(functionFragment: 'rewardManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'router', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setUpEmergencyMode',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setUpEmergencyModeV2',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'tokenInfo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'totalFee',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateDueInterests',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'updatePendingRewards',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'verifyToken',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawEther',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawForgeFee',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawToken',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'wxBTRFLY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'xBTRFLY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'yieldContractDeployer', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'yieldTokenHolders',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'data', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dueInterests', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'forgeId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getExchangeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getYieldBearingToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governanceManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastRateBeforeExpiry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintOtAndXyt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'newYieldContracts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pausingManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemAfterExpiry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemDueInterests', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemUnderlying', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'router', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUpEmergencyMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUpEmergencyModeV2', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateDueInterests', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePendingRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'verifyToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawEther', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawForgeFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'wxBTRFLY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xBTRFLY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'yieldContractDeployer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'yieldTokenHolders', data: BytesLike): Result;

  events: {
    'DueInterestsSettled(bytes32,address,uint256,uint256,uint256,address)': EventFragment;
    'EtherWithdraw(uint256,address)': EventFragment;
    'ForgeFeeWithdrawn(bytes32,address,uint256,uint256)': EventFragment;
    'MintYieldTokens(bytes32,address,uint256,uint256,uint256,address)': EventFragment;
    'NewYieldContracts(bytes32,address,uint256,address,address,address)': EventFragment;
    'RedeemYieldToken(bytes32,address,uint256,uint256,uint256,address)': EventFragment;
    'RegisterTokens(bytes32,address,uint256[])': EventFragment;
    'TokenWithdraw(address,uint256,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'DueInterestsSettled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EtherWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ForgeFeeWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MintYieldTokens'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewYieldContracts'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RedeemYieldToken'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RegisterTokens'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenWithdraw'): EventFragment;
}

export interface DueInterestsSettledEventObject {
  forgeId: string;
  underlyingAsset: string;
  expiry: BigNumber;
  amount: BigNumber;
  forgeFeeAmount: BigNumber;
  user: string;
}
export type DueInterestsSettledEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string],
  DueInterestsSettledEventObject
>;

export type DueInterestsSettledEventFilter = TypedEventFilter<DueInterestsSettledEvent>;

export interface EtherWithdrawEventObject {
  amount: BigNumber;
  sendTo: string;
}
export type EtherWithdrawEvent = TypedEvent<[BigNumber, string], EtherWithdrawEventObject>;

export type EtherWithdrawEventFilter = TypedEventFilter<EtherWithdrawEvent>;

export interface ForgeFeeWithdrawnEventObject {
  forgeId: string;
  underlyingAsset: string;
  expiry: BigNumber;
  amount: BigNumber;
}
export type ForgeFeeWithdrawnEvent = TypedEvent<[string, string, BigNumber, BigNumber], ForgeFeeWithdrawnEventObject>;

export type ForgeFeeWithdrawnEventFilter = TypedEventFilter<ForgeFeeWithdrawnEvent>;

export interface MintYieldTokensEventObject {
  forgeId: string;
  underlyingAsset: string;
  expiry: BigNumber;
  amountToTokenize: BigNumber;
  amountTokenMinted: BigNumber;
  user: string;
}
export type MintYieldTokensEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string],
  MintYieldTokensEventObject
>;

export type MintYieldTokensEventFilter = TypedEventFilter<MintYieldTokensEvent>;

export interface NewYieldContractsEventObject {
  forgeId: string;
  underlyingAsset: string;
  expiry: BigNumber;
  ot: string;
  xyt: string;
  yieldBearingAsset: string;
}
export type NewYieldContractsEvent = TypedEvent<
  [string, string, BigNumber, string, string, string],
  NewYieldContractsEventObject
>;

export type NewYieldContractsEventFilter = TypedEventFilter<NewYieldContractsEvent>;

export interface RedeemYieldTokenEventObject {
  forgeId: string;
  underlyingAsset: string;
  expiry: BigNumber;
  amountToRedeem: BigNumber;
  redeemedAmount: BigNumber;
  user: string;
}
export type RedeemYieldTokenEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string],
  RedeemYieldTokenEventObject
>;

export type RedeemYieldTokenEventFilter = TypedEventFilter<RedeemYieldTokenEvent>;

export interface RegisterTokensEventObject {
  forgeId: string;
  underlyingAsset: string;
  container: BigNumber[];
}
export type RegisterTokensEvent = TypedEvent<[string, string, BigNumber[]], RegisterTokensEventObject>;

export type RegisterTokensEventFilter = TypedEventFilter<RegisterTokensEvent>;

export interface TokenWithdrawEventObject {
  token: string;
  amount: BigNumber;
  sendTo: string;
}
export type TokenWithdrawEvent = TypedEvent<[string, BigNumber, string], TokenWithdrawEventObject>;

export type TokenWithdrawEventFilter = TypedEventFilter<TokenWithdrawEvent>;

export interface PendleForge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PendleForgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    data(overrides?: CallOverrides): Promise<[string]>;

    dueInterests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    forgeId(overrides?: CallOverrides): Promise<[string]>;

    getExchangeRate(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getYieldBearingToken(
      _underlyingAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string] & { yieldBearingTokenAddr: string }>;

    governanceManager(overrides?: CallOverrides): Promise<[string]>;

    lastRate(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    lastRateBeforeExpiry(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    mintOtAndXyt(
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      _amountToTokenize: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    newYieldContracts(
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    pausingManager(overrides?: CallOverrides): Promise<[string]>;

    redeemAfterExpiry(
      _user: PromiseOrValue<string>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    redeemDueInterests(
      _user: PromiseOrValue<string>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    redeemUnderlying(
      _user: PromiseOrValue<string>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      _amountToRedeem: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    registerTokens(
      _underlyingAssets: PromiseOrValue<string>[],
      _tokenInfos: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    rewardManager(overrides?: CallOverrides): Promise<[string]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setUpEmergencyMode(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[void]>;

    setUpEmergencyModeV2(
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      spender: PromiseOrValue<string>,
      extraFlag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    tokenInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean] & { registered: boolean }>;

    totalFee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    updateDueInterests(
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updatePendingRewards(
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    verifyToken(
      _underlyingAsset: PromiseOrValue<string>,
      _tokenInfo: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawEther(
      amount: PromiseOrValue<BigNumberish>,
      sendTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawForgeFee(
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawToken(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      sendTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    wxBTRFLY(overrides?: CallOverrides): Promise<[string]>;

    xBTRFLY(overrides?: CallOverrides): Promise<[string]>;

    yieldContractDeployer(overrides?: CallOverrides): Promise<[string]>;

    yieldTokenHolders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;
  };

  data(overrides?: CallOverrides): Promise<string>;

  dueInterests(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  forgeId(overrides?: CallOverrides): Promise<string>;

  getExchangeRate(
    arg0: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getYieldBearingToken(_underlyingAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  governanceManager(overrides?: CallOverrides): Promise<string>;

  lastRate(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  lastRateBeforeExpiry(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  mintOtAndXyt(
    _underlyingAsset: PromiseOrValue<string>,
    _expiry: PromiseOrValue<BigNumberish>,
    _amountToTokenize: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  newYieldContracts(
    _underlyingAsset: PromiseOrValue<string>,
    _expiry: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  pausingManager(overrides?: CallOverrides): Promise<string>;

  redeemAfterExpiry(
    _user: PromiseOrValue<string>,
    _underlyingAsset: PromiseOrValue<string>,
    _expiry: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  redeemDueInterests(
    _user: PromiseOrValue<string>,
    _underlyingAsset: PromiseOrValue<string>,
    _expiry: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  redeemUnderlying(
    _user: PromiseOrValue<string>,
    _underlyingAsset: PromiseOrValue<string>,
    _expiry: PromiseOrValue<BigNumberish>,
    _amountToRedeem: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  registerTokens(
    _underlyingAssets: PromiseOrValue<string>[],
    _tokenInfos: PromiseOrValue<BigNumberish>[][],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  rewardManager(overrides?: CallOverrides): Promise<string>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  router(overrides?: CallOverrides): Promise<string>;

  setUpEmergencyMode(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<void>;

  setUpEmergencyModeV2(
    _underlyingAsset: PromiseOrValue<string>,
    _expiry: PromiseOrValue<BigNumberish>,
    spender: PromiseOrValue<string>,
    extraFlag: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  tokenInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  totalFee(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  updateDueInterests(
    _underlyingAsset: PromiseOrValue<string>,
    _expiry: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updatePendingRewards(
    _underlyingAsset: PromiseOrValue<string>,
    _expiry: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  verifyToken(
    _underlyingAsset: PromiseOrValue<string>,
    _tokenInfo: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawEther(
    amount: PromiseOrValue<BigNumberish>,
    sendTo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawForgeFee(
    _underlyingAsset: PromiseOrValue<string>,
    _expiry: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawToken(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    sendTo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  wxBTRFLY(overrides?: CallOverrides): Promise<string>;

  xBTRFLY(overrides?: CallOverrides): Promise<string>;

  yieldContractDeployer(overrides?: CallOverrides): Promise<string>;

  yieldTokenHolders(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  callStatic: {
    data(overrides?: CallOverrides): Promise<string>;

    dueInterests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    forgeId(overrides?: CallOverrides): Promise<string>;

    getExchangeRate(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getYieldBearingToken(_underlyingAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    governanceManager(overrides?: CallOverrides): Promise<string>;

    lastRate(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lastRateBeforeExpiry(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mintOtAndXyt(
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      _amountToTokenize: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber] & {
        ot: string;
        xyt: string;
        amountTokenMinted: BigNumber;
      }
    >;

    newYieldContracts(
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string, string] & { ot: string; xyt: string }>;

    pausingManager(overrides?: CallOverrides): Promise<string>;

    redeemAfterExpiry(
      _user: PromiseOrValue<string>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    redeemDueInterests(
      _user: PromiseOrValue<string>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    redeemUnderlying(
      _user: PromiseOrValue<string>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      _amountToRedeem: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    registerTokens(
      _underlyingAssets: PromiseOrValue<string>[],
      _tokenInfos: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides,
    ): Promise<void>;

    rewardManager(overrides?: CallOverrides): Promise<string>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    router(overrides?: CallOverrides): Promise<string>;

    setUpEmergencyMode(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setUpEmergencyModeV2(
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      spender: PromiseOrValue<string>,
      extraFlag: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    tokenInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    totalFee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    updateDueInterests(
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updatePendingRewards(
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    verifyToken(
      _underlyingAsset: PromiseOrValue<string>,
      _tokenInfo: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawEther(
      amount: PromiseOrValue<BigNumberish>,
      sendTo: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawForgeFee(
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawToken(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      sendTo: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    wxBTRFLY(overrides?: CallOverrides): Promise<string>;

    xBTRFLY(overrides?: CallOverrides): Promise<string>;

    yieldContractDeployer(overrides?: CallOverrides): Promise<string>;

    yieldTokenHolders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;
  };

  filters: {
    'DueInterestsSettled(bytes32,address,uint256,uint256,uint256,address)'(
      forgeId?: null,
      underlyingAsset?: PromiseOrValue<string> | null,
      expiry?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      forgeFeeAmount?: null,
      user?: PromiseOrValue<string> | null,
    ): DueInterestsSettledEventFilter;
    DueInterestsSettled(
      forgeId?: null,
      underlyingAsset?: PromiseOrValue<string> | null,
      expiry?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      forgeFeeAmount?: null,
      user?: PromiseOrValue<string> | null,
    ): DueInterestsSettledEventFilter;

    'EtherWithdraw(uint256,address)'(amount?: null, sendTo?: null): EtherWithdrawEventFilter;
    EtherWithdraw(amount?: null, sendTo?: null): EtherWithdrawEventFilter;

    'ForgeFeeWithdrawn(bytes32,address,uint256,uint256)'(
      forgeId?: null,
      underlyingAsset?: PromiseOrValue<string> | null,
      expiry?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
    ): ForgeFeeWithdrawnEventFilter;
    ForgeFeeWithdrawn(
      forgeId?: null,
      underlyingAsset?: PromiseOrValue<string> | null,
      expiry?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
    ): ForgeFeeWithdrawnEventFilter;

    'MintYieldTokens(bytes32,address,uint256,uint256,uint256,address)'(
      forgeId?: null,
      underlyingAsset?: PromiseOrValue<string> | null,
      expiry?: PromiseOrValue<BigNumberish> | null,
      amountToTokenize?: null,
      amountTokenMinted?: null,
      user?: PromiseOrValue<string> | null,
    ): MintYieldTokensEventFilter;
    MintYieldTokens(
      forgeId?: null,
      underlyingAsset?: PromiseOrValue<string> | null,
      expiry?: PromiseOrValue<BigNumberish> | null,
      amountToTokenize?: null,
      amountTokenMinted?: null,
      user?: PromiseOrValue<string> | null,
    ): MintYieldTokensEventFilter;

    'NewYieldContracts(bytes32,address,uint256,address,address,address)'(
      forgeId?: null,
      underlyingAsset?: PromiseOrValue<string> | null,
      expiry?: PromiseOrValue<BigNumberish> | null,
      ot?: null,
      xyt?: null,
      yieldBearingAsset?: null,
    ): NewYieldContractsEventFilter;
    NewYieldContracts(
      forgeId?: null,
      underlyingAsset?: PromiseOrValue<string> | null,
      expiry?: PromiseOrValue<BigNumberish> | null,
      ot?: null,
      xyt?: null,
      yieldBearingAsset?: null,
    ): NewYieldContractsEventFilter;

    'RedeemYieldToken(bytes32,address,uint256,uint256,uint256,address)'(
      forgeId?: null,
      underlyingAsset?: PromiseOrValue<string> | null,
      expiry?: PromiseOrValue<BigNumberish> | null,
      amountToRedeem?: null,
      redeemedAmount?: null,
      user?: PromiseOrValue<string> | null,
    ): RedeemYieldTokenEventFilter;
    RedeemYieldToken(
      forgeId?: null,
      underlyingAsset?: PromiseOrValue<string> | null,
      expiry?: PromiseOrValue<BigNumberish> | null,
      amountToRedeem?: null,
      redeemedAmount?: null,
      user?: PromiseOrValue<string> | null,
    ): RedeemYieldTokenEventFilter;

    'RegisterTokens(bytes32,address,uint256[])'(
      forgeId?: null,
      underlyingAsset?: null,
      container?: null,
    ): RegisterTokensEventFilter;
    RegisterTokens(forgeId?: null, underlyingAsset?: null, container?: null): RegisterTokensEventFilter;

    'TokenWithdraw(address,uint256,address)'(token?: null, amount?: null, sendTo?: null): TokenWithdrawEventFilter;
    TokenWithdraw(token?: null, amount?: null, sendTo?: null): TokenWithdrawEventFilter;
  };

  estimateGas: {
    data(overrides?: CallOverrides): Promise<BigNumber>;

    dueInterests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    forgeId(overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeRate(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getYieldBearingToken(_underlyingAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    governanceManager(overrides?: CallOverrides): Promise<BigNumber>;

    lastRate(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lastRateBeforeExpiry(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mintOtAndXyt(
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      _amountToTokenize: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    newYieldContracts(
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    pausingManager(overrides?: CallOverrides): Promise<BigNumber>;

    redeemAfterExpiry(
      _user: PromiseOrValue<string>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    redeemDueInterests(
      _user: PromiseOrValue<string>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    redeemUnderlying(
      _user: PromiseOrValue<string>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      _amountToRedeem: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    registerTokens(
      _underlyingAssets: PromiseOrValue<string>[],
      _tokenInfos: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    rewardManager(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setUpEmergencyMode(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setUpEmergencyModeV2(
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      spender: PromiseOrValue<string>,
      extraFlag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    tokenInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    totalFee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    updateDueInterests(
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updatePendingRewards(
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    verifyToken(
      _underlyingAsset: PromiseOrValue<string>,
      _tokenInfo: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawEther(
      amount: PromiseOrValue<BigNumberish>,
      sendTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawForgeFee(
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawToken(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      sendTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    wxBTRFLY(overrides?: CallOverrides): Promise<BigNumber>;

    xBTRFLY(overrides?: CallOverrides): Promise<BigNumber>;

    yieldContractDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    yieldTokenHolders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    data(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dueInterests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    forgeId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExchangeRate(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getYieldBearingToken(
      _underlyingAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    governanceManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRate(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lastRateBeforeExpiry(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    mintOtAndXyt(
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      _amountToTokenize: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    newYieldContracts(
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    pausingManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemAfterExpiry(
      _user: PromiseOrValue<string>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    redeemDueInterests(
      _user: PromiseOrValue<string>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    redeemUnderlying(
      _user: PromiseOrValue<string>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      _amountToRedeem: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    registerTokens(
      _underlyingAssets: PromiseOrValue<string>[],
      _tokenInfos: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    rewardManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setUpEmergencyMode(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    setUpEmergencyModeV2(
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      spender: PromiseOrValue<string>,
      extraFlag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    tokenInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalFee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    updateDueInterests(
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updatePendingRewards(
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    verifyToken(
      _underlyingAsset: PromiseOrValue<string>,
      _tokenInfo: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawEther(
      amount: PromiseOrValue<BigNumberish>,
      sendTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawForgeFee(
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      sendTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    wxBTRFLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xBTRFLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yieldContractDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yieldTokenHolders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
