/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface PendleDataInterface extends utils.Interface {
  functions: {
    'addForge(bytes32,address)': FunctionFragment;
    'addMarket(bytes32,address,address,address)': FunctionFragment;
    'addMarketFactory(bytes32,address)': FunctionFragment;
    'allMarkets(uint256)': FunctionFragment;
    'allMarketsLength()': FunctionFragment;
    'curveShiftBlockDelta()': FunctionFragment;
    'expiryDivisor()': FunctionFragment;
    'forgeFee()': FunctionFragment;
    'getForgeAddress(bytes32)': FunctionFragment;
    'getMarket(bytes32,address,address)': FunctionFragment;
    'getMarketByIndex(uint256)': FunctionFragment;
    'getMarketFactoryAddress(bytes32)': FunctionFragment;
    'getMarketFromKey(address,address,bytes32)': FunctionFragment;
    'getPendleYieldTokens(bytes32,address,uint256)': FunctionFragment;
    'governanceManager()': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'interestUpdateRateDeltaForMarket()': FunctionFragment;
    'isMarket(address)': FunctionFragment;
    'isValidOT(bytes32,address,uint256)': FunctionFragment;
    'isValidXYT(bytes32,address,uint256)': FunctionFragment;
    'isXyt(address)': FunctionFragment;
    'lockDenominator()': FunctionFragment;
    'lockNumerator()': FunctionFragment;
    'otTokens(bytes32,address,uint256)': FunctionFragment;
    'pausingManager()': FunctionFragment;
    'protocolSwapFee()': FunctionFragment;
    'router()': FunctionFragment;
    'setCurveShiftBlockDelta(uint256)': FunctionFragment;
    'setExpiryDivisor(uint256)': FunctionFragment;
    'setForgeFactoryValidity(bytes32,bytes32,bool)': FunctionFragment;
    'setForgeFee(uint256)': FunctionFragment;
    'setInterestUpdateRateDeltaForMarket(uint256)': FunctionFragment;
    'setLockParams(uint256,uint256)': FunctionFragment;
    'setMarketFees(uint256,uint256)': FunctionFragment;
    'setTreasury(address)': FunctionFragment;
    'storeTokens(bytes32,address,address,address,uint256)': FunctionFragment;
    'swapFee()': FunctionFragment;
    'treasury()': FunctionFragment;
    'validForgeFactoryPair(bytes32,bytes32)': FunctionFragment;
    'xytTokens(bytes32,address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addForge'
      | 'addMarket'
      | 'addMarketFactory'
      | 'allMarkets'
      | 'allMarketsLength'
      | 'curveShiftBlockDelta'
      | 'expiryDivisor'
      | 'forgeFee'
      | 'getForgeAddress'
      | 'getMarket'
      | 'getMarketByIndex'
      | 'getMarketFactoryAddress'
      | 'getMarketFromKey'
      | 'getPendleYieldTokens'
      | 'governanceManager'
      | 'initialize'
      | 'interestUpdateRateDeltaForMarket'
      | 'isMarket'
      | 'isValidOT'
      | 'isValidXYT'
      | 'isXyt'
      | 'lockDenominator'
      | 'lockNumerator'
      | 'otTokens'
      | 'pausingManager'
      | 'protocolSwapFee'
      | 'router'
      | 'setCurveShiftBlockDelta'
      | 'setExpiryDivisor'
      | 'setForgeFactoryValidity'
      | 'setForgeFee'
      | 'setInterestUpdateRateDeltaForMarket'
      | 'setLockParams'
      | 'setMarketFees'
      | 'setTreasury'
      | 'storeTokens'
      | 'swapFee'
      | 'treasury'
      | 'validForgeFactoryPair'
      | 'xytTokens',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'addForge', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'addMarket',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'addMarketFactory',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'allMarkets', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'allMarketsLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'curveShiftBlockDelta', values?: undefined): string;
  encodeFunctionData(functionFragment: 'expiryDivisor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'forgeFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getForgeAddress', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'getMarket',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getMarketByIndex', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getMarketFactoryAddress', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'getMarketFromKey',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getPendleYieldTokens',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'governanceManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'interestUpdateRateDeltaForMarket', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isMarket', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'isValidOT',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'isValidXYT',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'isXyt', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lockDenominator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lockNumerator', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'otTokens',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'pausingManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'protocolSwapFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'router', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setCurveShiftBlockDelta', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setExpiryDivisor', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setForgeFactoryValidity',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setForgeFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setInterestUpdateRateDeltaForMarket',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setLockParams',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setMarketFees',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setTreasury', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'storeTokens',
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'swapFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'treasury', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'validForgeFactoryPair',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'xytTokens',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'addForge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addMarketFactory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allMarketsLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'curveShiftBlockDelta', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'expiryDivisor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'forgeFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getForgeAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMarketByIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMarketFactoryAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMarketFromKey', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPendleYieldTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governanceManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'interestUpdateRateDeltaForMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isValidOT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isValidXYT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isXyt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockDenominator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockNumerator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'otTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pausingManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protocolSwapFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'router', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCurveShiftBlockDelta', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setExpiryDivisor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setForgeFactoryValidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setForgeFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setInterestUpdateRateDeltaForMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLockParams', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMarketFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTreasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'storeTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'validForgeFactoryPair', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xytTokens', data: BytesLike): Result;

  events: {
    'CurveShiftBlockDeltaSet(uint256)': EventFragment;
    'ExpiryDivisorSet(uint256)': EventFragment;
    'ForgeAdded(bytes32,address)': EventFragment;
    'ForgeFactoryValiditySet(bytes32,bytes32,bool)': EventFragment;
    'ForgeFeeSet(uint256)': EventFragment;
    'InterestUpdateRateDeltaForMarketSet(uint256)': EventFragment;
    'LockParamsSet(uint256,uint256)': EventFragment;
    'MarketFeesSet(uint256,uint256)': EventFragment;
    'MarketPairAdded(address,address,address)': EventFragment;
    'NewMarketFactory(bytes32,address)': EventFragment;
    'TreasurySet(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CurveShiftBlockDeltaSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExpiryDivisorSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ForgeAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ForgeFactoryValiditySet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ForgeFeeSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InterestUpdateRateDeltaForMarketSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LockParamsSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketFeesSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketPairAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewMarketFactory'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TreasurySet'): EventFragment;
}

export interface CurveShiftBlockDeltaSetEventObject {
  _blockDelta: BigNumber;
}
export type CurveShiftBlockDeltaSetEvent = TypedEvent<[BigNumber], CurveShiftBlockDeltaSetEventObject>;

export type CurveShiftBlockDeltaSetEventFilter = TypedEventFilter<CurveShiftBlockDeltaSetEvent>;

export interface ExpiryDivisorSetEventObject {
  expiryDivisor: BigNumber;
}
export type ExpiryDivisorSetEvent = TypedEvent<[BigNumber], ExpiryDivisorSetEventObject>;

export type ExpiryDivisorSetEventFilter = TypedEventFilter<ExpiryDivisorSetEvent>;

export interface ForgeAddedEventObject {
  forgeId: string;
  forgeAddress: string;
}
export type ForgeAddedEvent = TypedEvent<[string, string], ForgeAddedEventObject>;

export type ForgeAddedEventFilter = TypedEventFilter<ForgeAddedEvent>;

export interface ForgeFactoryValiditySetEventObject {
  _forgeId: string;
  _marketFactoryId: string;
  _valid: boolean;
}
export type ForgeFactoryValiditySetEvent = TypedEvent<[string, string, boolean], ForgeFactoryValiditySetEventObject>;

export type ForgeFactoryValiditySetEventFilter = TypedEventFilter<ForgeFactoryValiditySetEvent>;

export interface ForgeFeeSetEventObject {
  forgeFee: BigNumber;
}
export type ForgeFeeSetEvent = TypedEvent<[BigNumber], ForgeFeeSetEventObject>;

export type ForgeFeeSetEventFilter = TypedEventFilter<ForgeFeeSetEvent>;

export interface InterestUpdateRateDeltaForMarketSetEventObject {
  interestUpdateRateDeltaForMarket: BigNumber;
}
export type InterestUpdateRateDeltaForMarketSetEvent = TypedEvent<
  [BigNumber],
  InterestUpdateRateDeltaForMarketSetEventObject
>;

export type InterestUpdateRateDeltaForMarketSetEventFilter = TypedEventFilter<InterestUpdateRateDeltaForMarketSetEvent>;

export interface LockParamsSetEventObject {
  lockNumerator: BigNumber;
  lockDenominator: BigNumber;
}
export type LockParamsSetEvent = TypedEvent<[BigNumber, BigNumber], LockParamsSetEventObject>;

export type LockParamsSetEventFilter = TypedEventFilter<LockParamsSetEvent>;

export interface MarketFeesSetEventObject {
  _swapFee: BigNumber;
  _protocolSwapFee: BigNumber;
}
export type MarketFeesSetEvent = TypedEvent<[BigNumber, BigNumber], MarketFeesSetEventObject>;

export type MarketFeesSetEventFilter = TypedEventFilter<MarketFeesSetEvent>;

export interface MarketPairAddedEventObject {
  market: string;
  xyt: string;
  token: string;
}
export type MarketPairAddedEvent = TypedEvent<[string, string, string], MarketPairAddedEventObject>;

export type MarketPairAddedEventFilter = TypedEventFilter<MarketPairAddedEvent>;

export interface NewMarketFactoryEventObject {
  marketFactoryId: string;
  marketFactoryAddress: string;
}
export type NewMarketFactoryEvent = TypedEvent<[string, string], NewMarketFactoryEventObject>;

export type NewMarketFactoryEventFilter = TypedEventFilter<NewMarketFactoryEvent>;

export interface TreasurySetEventObject {
  treasury: string;
}
export type TreasurySetEvent = TypedEvent<[string], TreasurySetEventObject>;

export type TreasurySetEventFilter = TypedEventFilter<TreasurySetEvent>;

export interface PendleData extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PendleDataInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addForge(
      _forgeId: PromiseOrValue<BytesLike>,
      _forgeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addMarket(
      _marketFactoryId: PromiseOrValue<BytesLike>,
      _xyt: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addMarketFactory(
      _marketFactoryId: PromiseOrValue<BytesLike>,
      _marketFactoryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    allMarketsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    curveShiftBlockDelta(overrides?: CallOverrides): Promise<[BigNumber]>;

    expiryDivisor(overrides?: CallOverrides): Promise<[BigNumber]>;

    forgeFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getForgeAddress(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    getMarket(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getMarketByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string] & { market: string }>;

    getMarketFactoryAddress(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    getMarketFromKey(
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _marketFactoryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[string] & { market: string }>;

    getPendleYieldTokens(
      _forgeId: PromiseOrValue<BytesLike>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string, string] & { ot: string; xyt: string }>;

    governanceManager(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    interestUpdateRateDeltaForMarket(overrides?: CallOverrides): Promise<[BigNumber]>;

    isMarket(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isValidOT(
      _forgeId: PromiseOrValue<BytesLike>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isValidXYT(
      _forgeId: PromiseOrValue<BytesLike>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isXyt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    lockDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockNumerator(overrides?: CallOverrides): Promise<[BigNumber]>;

    otTokens(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    pausingManager(overrides?: CallOverrides): Promise<[string]>;

    protocolSwapFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setCurveShiftBlockDelta(
      _blockDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setExpiryDivisor(
      _expiryDivisor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setForgeFactoryValidity(
      _forgeId: PromiseOrValue<BytesLike>,
      _marketFactoryId: PromiseOrValue<BytesLike>,
      _valid: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setForgeFee(
      _forgeFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setInterestUpdateRateDeltaForMarket(
      _interestUpdateRateDeltaForMarket: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLockParams(
      _lockNumerator: PromiseOrValue<BigNumberish>,
      _lockDenominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMarketFees(
      _swapFee: PromiseOrValue<BigNumberish>,
      _protocolSwapFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    storeTokens(
      _forgeId: PromiseOrValue<BytesLike>,
      _ot: PromiseOrValue<string>,
      _xyt: PromiseOrValue<string>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swapFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    validForgeFactoryPair(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    xytTokens(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;
  };

  addForge(
    _forgeId: PromiseOrValue<BytesLike>,
    _forgeAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addMarket(
    _marketFactoryId: PromiseOrValue<BytesLike>,
    _xyt: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _market: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addMarketFactory(
    _marketFactoryId: PromiseOrValue<BytesLike>,
    _marketFactoryAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  allMarketsLength(overrides?: CallOverrides): Promise<BigNumber>;

  curveShiftBlockDelta(overrides?: CallOverrides): Promise<BigNumber>;

  expiryDivisor(overrides?: CallOverrides): Promise<BigNumber>;

  forgeFee(overrides?: CallOverrides): Promise<BigNumber>;

  getForgeAddress(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  getMarket(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<string>;

  getMarketByIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  getMarketFactoryAddress(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  getMarketFromKey(
    _tokenIn: PromiseOrValue<string>,
    _tokenOut: PromiseOrValue<string>,
    _marketFactoryId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<string>;

  getPendleYieldTokens(
    _forgeId: PromiseOrValue<BytesLike>,
    _underlyingAsset: PromiseOrValue<string>,
    _expiry: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[string, string] & { ot: string; xyt: string }>;

  governanceManager(overrides?: CallOverrides): Promise<string>;

  initialize(
    _router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  interestUpdateRateDeltaForMarket(overrides?: CallOverrides): Promise<BigNumber>;

  isMarket(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isValidOT(
    _forgeId: PromiseOrValue<BytesLike>,
    _underlyingAsset: PromiseOrValue<string>,
    _expiry: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isValidXYT(
    _forgeId: PromiseOrValue<BytesLike>,
    _underlyingAsset: PromiseOrValue<string>,
    _expiry: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isXyt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  lockDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  lockNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  otTokens(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  pausingManager(overrides?: CallOverrides): Promise<string>;

  protocolSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

  router(overrides?: CallOverrides): Promise<string>;

  setCurveShiftBlockDelta(
    _blockDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setExpiryDivisor(
    _expiryDivisor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setForgeFactoryValidity(
    _forgeId: PromiseOrValue<BytesLike>,
    _marketFactoryId: PromiseOrValue<BytesLike>,
    _valid: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setForgeFee(
    _forgeFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setInterestUpdateRateDeltaForMarket(
    _interestUpdateRateDeltaForMarket: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLockParams(
    _lockNumerator: PromiseOrValue<BigNumberish>,
    _lockDenominator: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMarketFees(
    _swapFee: PromiseOrValue<BigNumberish>,
    _protocolSwapFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  storeTokens(
    _forgeId: PromiseOrValue<BytesLike>,
    _ot: PromiseOrValue<string>,
    _xyt: PromiseOrValue<string>,
    _underlyingAsset: PromiseOrValue<string>,
    _expiry: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swapFee(overrides?: CallOverrides): Promise<BigNumber>;

  treasury(overrides?: CallOverrides): Promise<string>;

  validForgeFactoryPair(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  xytTokens(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  callStatic: {
    addForge(
      _forgeId: PromiseOrValue<BytesLike>,
      _forgeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    addMarket(
      _marketFactoryId: PromiseOrValue<BytesLike>,
      _xyt: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _market: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    addMarketFactory(
      _marketFactoryId: PromiseOrValue<BytesLike>,
      _marketFactoryAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    allMarketsLength(overrides?: CallOverrides): Promise<BigNumber>;

    curveShiftBlockDelta(overrides?: CallOverrides): Promise<BigNumber>;

    expiryDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    forgeFee(overrides?: CallOverrides): Promise<BigNumber>;

    getForgeAddress(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    getMarket(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getMarketByIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    getMarketFactoryAddress(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    getMarketFromKey(
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _marketFactoryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getPendleYieldTokens(
      _forgeId: PromiseOrValue<BytesLike>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string, string] & { ot: string; xyt: string }>;

    governanceManager(overrides?: CallOverrides): Promise<string>;

    initialize(_router: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    interestUpdateRateDeltaForMarket(overrides?: CallOverrides): Promise<BigNumber>;

    isMarket(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isValidOT(
      _forgeId: PromiseOrValue<BytesLike>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isValidXYT(
      _forgeId: PromiseOrValue<BytesLike>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isXyt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    lockDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    lockNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    otTokens(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    pausingManager(overrides?: CallOverrides): Promise<string>;

    protocolSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<string>;

    setCurveShiftBlockDelta(_blockDelta: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setExpiryDivisor(_expiryDivisor: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setForgeFactoryValidity(
      _forgeId: PromiseOrValue<BytesLike>,
      _marketFactoryId: PromiseOrValue<BytesLike>,
      _valid: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setForgeFee(_forgeFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setInterestUpdateRateDeltaForMarket(
      _interestUpdateRateDeltaForMarket: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setLockParams(
      _lockNumerator: PromiseOrValue<BigNumberish>,
      _lockDenominator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMarketFees(
      _swapFee: PromiseOrValue<BigNumberish>,
      _protocolSwapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    storeTokens(
      _forgeId: PromiseOrValue<BytesLike>,
      _ot: PromiseOrValue<string>,
      _xyt: PromiseOrValue<string>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    swapFee(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<string>;

    validForgeFactoryPair(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    xytTokens(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;
  };

  filters: {
    'CurveShiftBlockDeltaSet(uint256)'(_blockDelta?: null): CurveShiftBlockDeltaSetEventFilter;
    CurveShiftBlockDeltaSet(_blockDelta?: null): CurveShiftBlockDeltaSetEventFilter;

    'ExpiryDivisorSet(uint256)'(expiryDivisor?: null): ExpiryDivisorSetEventFilter;
    ExpiryDivisorSet(expiryDivisor?: null): ExpiryDivisorSetEventFilter;

    'ForgeAdded(bytes32,address)'(
      forgeId?: PromiseOrValue<BytesLike> | null,
      forgeAddress?: PromiseOrValue<string> | null,
    ): ForgeAddedEventFilter;
    ForgeAdded(
      forgeId?: PromiseOrValue<BytesLike> | null,
      forgeAddress?: PromiseOrValue<string> | null,
    ): ForgeAddedEventFilter;

    'ForgeFactoryValiditySet(bytes32,bytes32,bool)'(
      _forgeId?: null,
      _marketFactoryId?: null,
      _valid?: null,
    ): ForgeFactoryValiditySetEventFilter;
    ForgeFactoryValiditySet(
      _forgeId?: null,
      _marketFactoryId?: null,
      _valid?: null,
    ): ForgeFactoryValiditySetEventFilter;

    'ForgeFeeSet(uint256)'(forgeFee?: null): ForgeFeeSetEventFilter;
    ForgeFeeSet(forgeFee?: null): ForgeFeeSetEventFilter;

    'InterestUpdateRateDeltaForMarketSet(uint256)'(
      interestUpdateRateDeltaForMarket?: null,
    ): InterestUpdateRateDeltaForMarketSetEventFilter;
    InterestUpdateRateDeltaForMarketSet(
      interestUpdateRateDeltaForMarket?: null,
    ): InterestUpdateRateDeltaForMarketSetEventFilter;

    'LockParamsSet(uint256,uint256)'(lockNumerator?: null, lockDenominator?: null): LockParamsSetEventFilter;
    LockParamsSet(lockNumerator?: null, lockDenominator?: null): LockParamsSetEventFilter;

    'MarketFeesSet(uint256,uint256)'(_swapFee?: null, _protocolSwapFee?: null): MarketFeesSetEventFilter;
    MarketFeesSet(_swapFee?: null, _protocolSwapFee?: null): MarketFeesSetEventFilter;

    'MarketPairAdded(address,address,address)'(
      market?: PromiseOrValue<string> | null,
      xyt?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
    ): MarketPairAddedEventFilter;
    MarketPairAdded(
      market?: PromiseOrValue<string> | null,
      xyt?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
    ): MarketPairAddedEventFilter;

    'NewMarketFactory(bytes32,address)'(
      marketFactoryId?: PromiseOrValue<BytesLike> | null,
      marketFactoryAddress?: PromiseOrValue<string> | null,
    ): NewMarketFactoryEventFilter;
    NewMarketFactory(
      marketFactoryId?: PromiseOrValue<BytesLike> | null,
      marketFactoryAddress?: PromiseOrValue<string> | null,
    ): NewMarketFactoryEventFilter;

    'TreasurySet(address)'(treasury?: null): TreasurySetEventFilter;
    TreasurySet(treasury?: null): TreasurySetEventFilter;
  };

  estimateGas: {
    addForge(
      _forgeId: PromiseOrValue<BytesLike>,
      _forgeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addMarket(
      _marketFactoryId: PromiseOrValue<BytesLike>,
      _xyt: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addMarketFactory(
      _marketFactoryId: PromiseOrValue<BytesLike>,
      _marketFactoryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    allMarketsLength(overrides?: CallOverrides): Promise<BigNumber>;

    curveShiftBlockDelta(overrides?: CallOverrides): Promise<BigNumber>;

    expiryDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    forgeFee(overrides?: CallOverrides): Promise<BigNumber>;

    getForgeAddress(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getMarket(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getMarketByIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getMarketFactoryAddress(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getMarketFromKey(
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _marketFactoryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPendleYieldTokens(
      _forgeId: PromiseOrValue<BytesLike>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    governanceManager(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    interestUpdateRateDeltaForMarket(overrides?: CallOverrides): Promise<BigNumber>;

    isMarket(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isValidOT(
      _forgeId: PromiseOrValue<BytesLike>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isValidXYT(
      _forgeId: PromiseOrValue<BytesLike>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isXyt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lockDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    lockNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    otTokens(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pausingManager(overrides?: CallOverrides): Promise<BigNumber>;

    protocolSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setCurveShiftBlockDelta(
      _blockDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setExpiryDivisor(
      _expiryDivisor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setForgeFactoryValidity(
      _forgeId: PromiseOrValue<BytesLike>,
      _marketFactoryId: PromiseOrValue<BytesLike>,
      _valid: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setForgeFee(
      _forgeFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setInterestUpdateRateDeltaForMarket(
      _interestUpdateRateDeltaForMarket: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLockParams(
      _lockNumerator: PromiseOrValue<BigNumberish>,
      _lockDenominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMarketFees(
      _swapFee: PromiseOrValue<BigNumberish>,
      _protocolSwapFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    storeTokens(
      _forgeId: PromiseOrValue<BytesLike>,
      _ot: PromiseOrValue<string>,
      _xyt: PromiseOrValue<string>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swapFee(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    validForgeFactoryPair(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    xytTokens(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addForge(
      _forgeId: PromiseOrValue<BytesLike>,
      _forgeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addMarket(
      _marketFactoryId: PromiseOrValue<BytesLike>,
      _xyt: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addMarketFactory(
      _marketFactoryId: PromiseOrValue<BytesLike>,
      _marketFactoryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allMarketsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    curveShiftBlockDelta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expiryDivisor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forgeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getForgeAddress(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarket(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getMarketByIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarketFactoryAddress(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarketFromKey(
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _marketFactoryId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPendleYieldTokens(
      _forgeId: PromiseOrValue<BytesLike>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    governanceManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    interestUpdateRateDeltaForMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMarket(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidOT(
      _forgeId: PromiseOrValue<BytesLike>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isValidXYT(
      _forgeId: PromiseOrValue<BytesLike>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isXyt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockNumerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    otTokens(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    pausingManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolSwapFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCurveShiftBlockDelta(
      _blockDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setExpiryDivisor(
      _expiryDivisor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setForgeFactoryValidity(
      _forgeId: PromiseOrValue<BytesLike>,
      _marketFactoryId: PromiseOrValue<BytesLike>,
      _valid: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setForgeFee(
      _forgeFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setInterestUpdateRateDeltaForMarket(
      _interestUpdateRateDeltaForMarket: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLockParams(
      _lockNumerator: PromiseOrValue<BigNumberish>,
      _lockDenominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMarketFees(
      _swapFee: PromiseOrValue<BigNumberish>,
      _protocolSwapFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    storeTokens(
      _forgeId: PromiseOrValue<BytesLike>,
      _ot: PromiseOrValue<string>,
      _xyt: PromiseOrValue<string>,
      _underlyingAsset: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swapFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validForgeFactoryPair(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    xytTokens(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
