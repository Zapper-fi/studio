/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface MetavaultTradeVaultInterface extends utils.Interface {
  functions: {
    'BASIS_POINTS_DIVISOR()': FunctionFragment;
    'FUNDING_RATE_PRECISION()': FunctionFragment;
    'MAX_FEE_BASIS_POINTS()': FunctionFragment;
    'MAX_FUNDING_RATE_FACTOR()': FunctionFragment;
    'MAX_LIQUIDATION_FEE_USD()': FunctionFragment;
    'MIN_FUNDING_RATE_INTERVAL()': FunctionFragment;
    'MIN_LEVERAGE()': FunctionFragment;
    'PRICE_PRECISION()': FunctionFragment;
    'USDM_DECIMALS()': FunctionFragment;
    'addRouter(address)': FunctionFragment;
    'adjustForDecimals(uint256,address,address)': FunctionFragment;
    'allWhitelistedTokens(uint256)': FunctionFragment;
    'allWhitelistedTokensLength()': FunctionFragment;
    'approvedRouters(address,address)': FunctionFragment;
    'bufferAmounts(address)': FunctionFragment;
    'buyUSDM(address,address)': FunctionFragment;
    'clearTokenConfig(address)': FunctionFragment;
    'cumulativeFundingRates(address)': FunctionFragment;
    'decreasePosition(address,address,address,uint256,uint256,bool,address)': FunctionFragment;
    'directPoolDeposit(address)': FunctionFragment;
    'errorController()': FunctionFragment;
    'errors(uint256)': FunctionFragment;
    'feeReserves(address)': FunctionFragment;
    'fundingInterval()': FunctionFragment;
    'fundingRateFactor()': FunctionFragment;
    'getDelta(address,uint256,uint256,bool,uint256)': FunctionFragment;
    'getEntryFundingRate(address,address,bool)': FunctionFragment;
    'getFeeBasisPoints(address,uint256,uint256,uint256,bool)': FunctionFragment;
    'getFundingFee(address,address,address,bool,uint256,uint256)': FunctionFragment;
    'getGlobalShortDelta(address)': FunctionFragment;
    'getMaxPrice(address)': FunctionFragment;
    'getMinPrice(address)': FunctionFragment;
    'getNextAveragePrice(address,uint256,uint256,bool,uint256,uint256,uint256)': FunctionFragment;
    'getNextFundingRate(address)': FunctionFragment;
    'getNextGlobalShortAveragePrice(address,uint256,uint256)': FunctionFragment;
    'getPosition(address,address,address,bool)': FunctionFragment;
    'getPositionDelta(address,address,address,bool)': FunctionFragment;
    'getPositionFee(address,address,address,bool,uint256)': FunctionFragment;
    'getPositionKey(address,address,address,bool)': FunctionFragment;
    'getPositionLeverage(address,address,address,bool)': FunctionFragment;
    'getRedemptionAmount(address,uint256)': FunctionFragment;
    'getRedemptionCollateral(address)': FunctionFragment;
    'getRedemptionCollateralUsd(address)': FunctionFragment;
    'getTargetUsdmAmount(address)': FunctionFragment;
    'getUtilisation(address)': FunctionFragment;
    'globalShortAveragePrices(address)': FunctionFragment;
    'globalShortSizes(address)': FunctionFragment;
    'gov()': FunctionFragment;
    'guaranteedUsd(address)': FunctionFragment;
    'hasDynamicFees()': FunctionFragment;
    'inManagerMode()': FunctionFragment;
    'inPrivateLiquidationMode()': FunctionFragment;
    'includeAmmPrice()': FunctionFragment;
    'increasePosition(address,address,address,uint256,bool)': FunctionFragment;
    'initialize(address,address,address,uint256,uint256,uint256)': FunctionFragment;
    'isInitialized()': FunctionFragment;
    'isLeverageEnabled()': FunctionFragment;
    'isLiquidator(address)': FunctionFragment;
    'isManager(address)': FunctionFragment;
    'isSwapEnabled()': FunctionFragment;
    'lastFundingTimes(address)': FunctionFragment;
    'liquidatePosition(address,address,address,bool,address)': FunctionFragment;
    'liquidationFeeUsd()': FunctionFragment;
    'marginFeeBasisPoints()': FunctionFragment;
    'maxGasPrice()': FunctionFragment;
    'maxGlobalShortSizes(address)': FunctionFragment;
    'maxLeverage()': FunctionFragment;
    'maxUsdmAmounts(address)': FunctionFragment;
    'minProfitBasisPoints(address)': FunctionFragment;
    'minProfitTime()': FunctionFragment;
    'mintBurnFeeBasisPoints()': FunctionFragment;
    'poolAmounts(address)': FunctionFragment;
    'positions(bytes32)': FunctionFragment;
    'priceFeed()': FunctionFragment;
    'removeRouter(address)': FunctionFragment;
    'reservedAmounts(address)': FunctionFragment;
    'router()': FunctionFragment;
    'sellUSDM(address,address)': FunctionFragment;
    'setBufferAmount(address,uint256)': FunctionFragment;
    'setError(uint256,string)': FunctionFragment;
    'setErrorController(address)': FunctionFragment;
    'setFees(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)': FunctionFragment;
    'setFundingRate(uint256,uint256,uint256)': FunctionFragment;
    'setGov(address)': FunctionFragment;
    'setInManagerMode(bool)': FunctionFragment;
    'setInPrivateLiquidationMode(bool)': FunctionFragment;
    'setIsLeverageEnabled(bool)': FunctionFragment;
    'setIsSwapEnabled(bool)': FunctionFragment;
    'setLiquidator(address,bool)': FunctionFragment;
    'setManager(address,bool)': FunctionFragment;
    'setMaxGasPrice(uint256)': FunctionFragment;
    'setMaxGlobalShortSize(address,uint256)': FunctionFragment;
    'setMaxLeverage(uint256)': FunctionFragment;
    'setPriceFeed(address)': FunctionFragment;
    'setTokenConfig(address,uint256,uint256,uint256,uint256,bool,bool)': FunctionFragment;
    'setUsdmAmount(address,uint256)': FunctionFragment;
    'setVaultUtils(address)': FunctionFragment;
    'shortableTokens(address)': FunctionFragment;
    'stableFundingRateFactor()': FunctionFragment;
    'stableSwapFeeBasisPoints()': FunctionFragment;
    'stableTaxBasisPoints()': FunctionFragment;
    'stableTokens(address)': FunctionFragment;
    'swap(address,address,address)': FunctionFragment;
    'swapFeeBasisPoints()': FunctionFragment;
    'taxBasisPoints()': FunctionFragment;
    'tokenBalances(address)': FunctionFragment;
    'tokenDecimals(address)': FunctionFragment;
    'tokenToUsdMin(address,uint256)': FunctionFragment;
    'tokenWeights(address)': FunctionFragment;
    'totalTokenWeights()': FunctionFragment;
    'updateCumulativeFundingRate(address,address)': FunctionFragment;
    'upgradeVault(address,address,uint256)': FunctionFragment;
    'usdToToken(address,uint256,uint256)': FunctionFragment;
    'usdToTokenMax(address,uint256)': FunctionFragment;
    'usdToTokenMin(address,uint256)': FunctionFragment;
    'usdm()': FunctionFragment;
    'usdmAmounts(address)': FunctionFragment;
    'useSwapPricing()': FunctionFragment;
    'validateLiquidation(address,address,address,bool,bool)': FunctionFragment;
    'vaultUtils()': FunctionFragment;
    'whitelistedTokenCount()': FunctionFragment;
    'whitelistedTokens(address)': FunctionFragment;
    'withdrawFees(address,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BASIS_POINTS_DIVISOR'
      | 'FUNDING_RATE_PRECISION'
      | 'MAX_FEE_BASIS_POINTS'
      | 'MAX_FUNDING_RATE_FACTOR'
      | 'MAX_LIQUIDATION_FEE_USD'
      | 'MIN_FUNDING_RATE_INTERVAL'
      | 'MIN_LEVERAGE'
      | 'PRICE_PRECISION'
      | 'USDM_DECIMALS'
      | 'addRouter'
      | 'adjustForDecimals'
      | 'allWhitelistedTokens'
      | 'allWhitelistedTokensLength'
      | 'approvedRouters'
      | 'bufferAmounts'
      | 'buyUSDM'
      | 'clearTokenConfig'
      | 'cumulativeFundingRates'
      | 'decreasePosition'
      | 'directPoolDeposit'
      | 'errorController'
      | 'errors'
      | 'feeReserves'
      | 'fundingInterval'
      | 'fundingRateFactor'
      | 'getDelta'
      | 'getEntryFundingRate'
      | 'getFeeBasisPoints'
      | 'getFundingFee'
      | 'getGlobalShortDelta'
      | 'getMaxPrice'
      | 'getMinPrice'
      | 'getNextAveragePrice'
      | 'getNextFundingRate'
      | 'getNextGlobalShortAveragePrice'
      | 'getPosition'
      | 'getPositionDelta'
      | 'getPositionFee'
      | 'getPositionKey'
      | 'getPositionLeverage'
      | 'getRedemptionAmount'
      | 'getRedemptionCollateral'
      | 'getRedemptionCollateralUsd'
      | 'getTargetUsdmAmount'
      | 'getUtilisation'
      | 'globalShortAveragePrices'
      | 'globalShortSizes'
      | 'gov'
      | 'guaranteedUsd'
      | 'hasDynamicFees'
      | 'inManagerMode'
      | 'inPrivateLiquidationMode'
      | 'includeAmmPrice'
      | 'increasePosition'
      | 'initialize'
      | 'isInitialized'
      | 'isLeverageEnabled'
      | 'isLiquidator'
      | 'isManager'
      | 'isSwapEnabled'
      | 'lastFundingTimes'
      | 'liquidatePosition'
      | 'liquidationFeeUsd'
      | 'marginFeeBasisPoints'
      | 'maxGasPrice'
      | 'maxGlobalShortSizes'
      | 'maxLeverage'
      | 'maxUsdmAmounts'
      | 'minProfitBasisPoints'
      | 'minProfitTime'
      | 'mintBurnFeeBasisPoints'
      | 'poolAmounts'
      | 'positions'
      | 'priceFeed'
      | 'removeRouter'
      | 'reservedAmounts'
      | 'router'
      | 'sellUSDM'
      | 'setBufferAmount'
      | 'setError'
      | 'setErrorController'
      | 'setFees'
      | 'setFundingRate'
      | 'setGov'
      | 'setInManagerMode'
      | 'setInPrivateLiquidationMode'
      | 'setIsLeverageEnabled'
      | 'setIsSwapEnabled'
      | 'setLiquidator'
      | 'setManager'
      | 'setMaxGasPrice'
      | 'setMaxGlobalShortSize'
      | 'setMaxLeverage'
      | 'setPriceFeed'
      | 'setTokenConfig'
      | 'setUsdmAmount'
      | 'setVaultUtils'
      | 'shortableTokens'
      | 'stableFundingRateFactor'
      | 'stableSwapFeeBasisPoints'
      | 'stableTaxBasisPoints'
      | 'stableTokens'
      | 'swap'
      | 'swapFeeBasisPoints'
      | 'taxBasisPoints'
      | 'tokenBalances'
      | 'tokenDecimals'
      | 'tokenToUsdMin'
      | 'tokenWeights'
      | 'totalTokenWeights'
      | 'updateCumulativeFundingRate'
      | 'upgradeVault'
      | 'usdToToken'
      | 'usdToTokenMax'
      | 'usdToTokenMin'
      | 'usdm'
      | 'usdmAmounts'
      | 'useSwapPricing'
      | 'validateLiquidation'
      | 'vaultUtils'
      | 'whitelistedTokenCount'
      | 'whitelistedTokens'
      | 'withdrawFees',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BASIS_POINTS_DIVISOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'FUNDING_RATE_PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_FEE_BASIS_POINTS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_FUNDING_RATE_FACTOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_LIQUIDATION_FEE_USD', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MIN_FUNDING_RATE_INTERVAL', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MIN_LEVERAGE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PRICE_PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'USDM_DECIMALS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addRouter', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'adjustForDecimals',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'allWhitelistedTokens', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'allWhitelistedTokensLength', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'approvedRouters',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'bufferAmounts', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'buyUSDM', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'clearTokenConfig', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'cumulativeFundingRates', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'decreasePosition',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'directPoolDeposit', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'errorController', values?: undefined): string;
  encodeFunctionData(functionFragment: 'errors', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'feeReserves', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'fundingInterval', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fundingRateFactor', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getDelta',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getEntryFundingRate',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getFeeBasisPoints',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getFundingFee',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'getGlobalShortDelta', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getMaxPrice', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getMinPrice', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getNextAveragePrice',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'getNextFundingRate', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getNextGlobalShortAveragePrice',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getPosition',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getPositionDelta',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getPositionFee',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getPositionKey',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getPositionLeverage',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRedemptionAmount',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getRedemptionCollateral', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getRedemptionCollateralUsd', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getTargetUsdmAmount', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getUtilisation', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'globalShortAveragePrices', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'globalShortSizes', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'gov', values?: undefined): string;
  encodeFunctionData(functionFragment: 'guaranteedUsd', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'hasDynamicFees', values?: undefined): string;
  encodeFunctionData(functionFragment: 'inManagerMode', values?: undefined): string;
  encodeFunctionData(functionFragment: 'inPrivateLiquidationMode', values?: undefined): string;
  encodeFunctionData(functionFragment: 'includeAmmPrice', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'increasePosition',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'isInitialized', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isLeverageEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isLiquidator', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isManager', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isSwapEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastFundingTimes', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'liquidatePosition',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'liquidationFeeUsd', values?: undefined): string;
  encodeFunctionData(functionFragment: 'marginFeeBasisPoints', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxGasPrice', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxGlobalShortSizes', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maxLeverage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxUsdmAmounts', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'minProfitBasisPoints', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'minProfitTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mintBurnFeeBasisPoints', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolAmounts', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'positions', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'priceFeed', values?: undefined): string;
  encodeFunctionData(functionFragment: 'removeRouter', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'reservedAmounts', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'router', values?: undefined): string;
  encodeFunctionData(functionFragment: 'sellUSDM', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setBufferAmount',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setError',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'setErrorController', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setFees',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'setFundingRate',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setGov', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setInManagerMode', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'setInPrivateLiquidationMode', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'setIsLeverageEnabled', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'setIsSwapEnabled', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(
    functionFragment: 'setLiquidator',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setManager', values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'setMaxGasPrice', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setMaxGlobalShortSize',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setMaxLeverage', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setPriceFeed', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setTokenConfig',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'setUsdmAmount',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setVaultUtils', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'shortableTokens', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'stableFundingRateFactor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stableSwapFeeBasisPoints', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stableTaxBasisPoints', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stableTokens', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'swap',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'swapFeeBasisPoints', values?: undefined): string;
  encodeFunctionData(functionFragment: 'taxBasisPoints', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenBalances', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'tokenDecimals', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'tokenToUsdMin',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'tokenWeights', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'totalTokenWeights', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'updateCumulativeFundingRate',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'upgradeVault',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'usdToToken',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'usdToTokenMax',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'usdToTokenMin',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'usdm', values?: undefined): string;
  encodeFunctionData(functionFragment: 'usdmAmounts', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'useSwapPricing', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'validateLiquidation',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'vaultUtils', values?: undefined): string;
  encodeFunctionData(functionFragment: 'whitelistedTokenCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'whitelistedTokens', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'withdrawFees',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(functionFragment: 'BASIS_POINTS_DIVISOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'FUNDING_RATE_PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_FEE_BASIS_POINTS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_FUNDING_RATE_FACTOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_LIQUIDATION_FEE_USD', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MIN_FUNDING_RATE_INTERVAL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MIN_LEVERAGE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PRICE_PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'USDM_DECIMALS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addRouter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adjustForDecimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allWhitelistedTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allWhitelistedTokensLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approvedRouters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bufferAmounts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'buyUSDM', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'clearTokenConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cumulativeFundingRates', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreasePosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'directPoolDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'errorController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'errors', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeReserves', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fundingInterval', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fundingRateFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDelta', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEntryFundingRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFeeBasisPoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFundingFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getGlobalShortDelta', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMaxPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMinPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNextAveragePrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNextFundingRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNextGlobalShortAveragePrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPositionDelta', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPositionFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPositionKey', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPositionLeverage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRedemptionAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRedemptionCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRedemptionCollateralUsd', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTargetUsdmAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUtilisation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'globalShortAveragePrices', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'globalShortSizes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gov', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'guaranteedUsd', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasDynamicFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'inManagerMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'inPrivateLiquidationMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'includeAmmPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increasePosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isInitialized', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isLeverageEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isLiquidator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isSwapEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastFundingTimes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidatePosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidationFeeUsd', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marginFeeBasisPoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxGasPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxGlobalShortSizes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxLeverage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxUsdmAmounts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minProfitBasisPoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minProfitTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintBurnFeeBasisPoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolAmounts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'positions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'priceFeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeRouter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reservedAmounts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'router', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sellUSDM', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBufferAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setError', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setErrorController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFundingRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGov', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setInManagerMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setInPrivateLiquidationMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setIsLeverageEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setIsSwapEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLiquidator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxGasPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxGlobalShortSize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxLeverage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPriceFeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTokenConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUsdmAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setVaultUtils', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'shortableTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stableFundingRateFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stableSwapFeeBasisPoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stableTaxBasisPoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stableTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapFeeBasisPoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'taxBasisPoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenBalances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenDecimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenToUsdMin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenWeights', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalTokenWeights', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateCumulativeFundingRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'usdToToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'usdToTokenMax', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'usdToTokenMin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'usdm', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'usdmAmounts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'useSwapPricing', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'validateLiquidation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaultUtils', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistedTokenCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistedTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawFees', data: BytesLike): Result;

  events: {
    'BuyUSDM(address,address,uint256,uint256,uint256)': EventFragment;
    'ClosePosition(bytes32,uint256,uint256,uint256,uint256,uint256,int256)': EventFragment;
    'CollectMarginFees(address,uint256,uint256)': EventFragment;
    'CollectSwapFees(address,uint256,uint256)': EventFragment;
    'DecreaseGuaranteedUsd(address,uint256)': EventFragment;
    'DecreasePoolAmount(address,uint256)': EventFragment;
    'DecreasePosition(bytes32,address,address,address,uint256,uint256,bool,uint256,uint256)': EventFragment;
    'DecreaseReservedAmount(address,uint256)': EventFragment;
    'DecreaseUsdmAmount(address,uint256)': EventFragment;
    'DirectPoolDeposit(address,uint256)': EventFragment;
    'IncreaseGuaranteedUsd(address,uint256)': EventFragment;
    'IncreasePoolAmount(address,uint256)': EventFragment;
    'IncreasePosition(bytes32,address,address,address,uint256,uint256,bool,uint256,uint256)': EventFragment;
    'IncreaseReservedAmount(address,uint256)': EventFragment;
    'IncreaseUsdmAmount(address,uint256)': EventFragment;
    'LiquidatePosition(bytes32,address,address,address,bool,uint256,uint256,uint256,int256,uint256)': EventFragment;
    'SellUSDM(address,address,uint256,uint256,uint256)': EventFragment;
    'Swap(address,address,address,uint256,uint256,uint256,uint256)': EventFragment;
    'UpdateFundingRate(address,uint256)': EventFragment;
    'UpdatePnl(bytes32,bool,uint256)': EventFragment;
    'UpdatePosition(bytes32,uint256,uint256,uint256,uint256,uint256,int256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'BuyUSDM'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ClosePosition'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollectMarginFees'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollectSwapFees'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DecreaseGuaranteedUsd'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DecreasePoolAmount'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DecreasePosition'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DecreaseReservedAmount'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DecreaseUsdmAmount'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DirectPoolDeposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'IncreaseGuaranteedUsd'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'IncreasePoolAmount'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'IncreasePosition'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'IncreaseReservedAmount'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'IncreaseUsdmAmount'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidatePosition'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SellUSDM'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Swap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateFundingRate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatePnl'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatePosition'): EventFragment;
}

export interface BuyUSDMEventObject {
  account: string;
  token: string;
  tokenAmount: BigNumber;
  usdmAmount: BigNumber;
  feeBasisPoints: BigNumber;
}
export type BuyUSDMEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber], BuyUSDMEventObject>;

export type BuyUSDMEventFilter = TypedEventFilter<BuyUSDMEvent>;

export interface ClosePositionEventObject {
  key: string;
  size: BigNumber;
  collateral: BigNumber;
  averagePrice: BigNumber;
  entryFundingRate: BigNumber;
  reserveAmount: BigNumber;
  realisedPnl: BigNumber;
}
export type ClosePositionEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  ClosePositionEventObject
>;

export type ClosePositionEventFilter = TypedEventFilter<ClosePositionEvent>;

export interface CollectMarginFeesEventObject {
  token: string;
  feeUsd: BigNumber;
  feeTokens: BigNumber;
}
export type CollectMarginFeesEvent = TypedEvent<[string, BigNumber, BigNumber], CollectMarginFeesEventObject>;

export type CollectMarginFeesEventFilter = TypedEventFilter<CollectMarginFeesEvent>;

export interface CollectSwapFeesEventObject {
  token: string;
  feeUsd: BigNumber;
  feeTokens: BigNumber;
}
export type CollectSwapFeesEvent = TypedEvent<[string, BigNumber, BigNumber], CollectSwapFeesEventObject>;

export type CollectSwapFeesEventFilter = TypedEventFilter<CollectSwapFeesEvent>;

export interface DecreaseGuaranteedUsdEventObject {
  token: string;
  amount: BigNumber;
}
export type DecreaseGuaranteedUsdEvent = TypedEvent<[string, BigNumber], DecreaseGuaranteedUsdEventObject>;

export type DecreaseGuaranteedUsdEventFilter = TypedEventFilter<DecreaseGuaranteedUsdEvent>;

export interface DecreasePoolAmountEventObject {
  token: string;
  amount: BigNumber;
}
export type DecreasePoolAmountEvent = TypedEvent<[string, BigNumber], DecreasePoolAmountEventObject>;

export type DecreasePoolAmountEventFilter = TypedEventFilter<DecreasePoolAmountEvent>;

export interface DecreasePositionEventObject {
  key: string;
  account: string;
  collateralToken: string;
  indexToken: string;
  collateralDelta: BigNumber;
  sizeDelta: BigNumber;
  isLong: boolean;
  price: BigNumber;
  fee: BigNumber;
}
export type DecreasePositionEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, boolean, BigNumber, BigNumber],
  DecreasePositionEventObject
>;

export type DecreasePositionEventFilter = TypedEventFilter<DecreasePositionEvent>;

export interface DecreaseReservedAmountEventObject {
  token: string;
  amount: BigNumber;
}
export type DecreaseReservedAmountEvent = TypedEvent<[string, BigNumber], DecreaseReservedAmountEventObject>;

export type DecreaseReservedAmountEventFilter = TypedEventFilter<DecreaseReservedAmountEvent>;

export interface DecreaseUsdmAmountEventObject {
  token: string;
  amount: BigNumber;
}
export type DecreaseUsdmAmountEvent = TypedEvent<[string, BigNumber], DecreaseUsdmAmountEventObject>;

export type DecreaseUsdmAmountEventFilter = TypedEventFilter<DecreaseUsdmAmountEvent>;

export interface DirectPoolDepositEventObject {
  token: string;
  amount: BigNumber;
}
export type DirectPoolDepositEvent = TypedEvent<[string, BigNumber], DirectPoolDepositEventObject>;

export type DirectPoolDepositEventFilter = TypedEventFilter<DirectPoolDepositEvent>;

export interface IncreaseGuaranteedUsdEventObject {
  token: string;
  amount: BigNumber;
}
export type IncreaseGuaranteedUsdEvent = TypedEvent<[string, BigNumber], IncreaseGuaranteedUsdEventObject>;

export type IncreaseGuaranteedUsdEventFilter = TypedEventFilter<IncreaseGuaranteedUsdEvent>;

export interface IncreasePoolAmountEventObject {
  token: string;
  amount: BigNumber;
}
export type IncreasePoolAmountEvent = TypedEvent<[string, BigNumber], IncreasePoolAmountEventObject>;

export type IncreasePoolAmountEventFilter = TypedEventFilter<IncreasePoolAmountEvent>;

export interface IncreasePositionEventObject {
  key: string;
  account: string;
  collateralToken: string;
  indexToken: string;
  collateralDelta: BigNumber;
  sizeDelta: BigNumber;
  isLong: boolean;
  price: BigNumber;
  fee: BigNumber;
}
export type IncreasePositionEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, boolean, BigNumber, BigNumber],
  IncreasePositionEventObject
>;

export type IncreasePositionEventFilter = TypedEventFilter<IncreasePositionEvent>;

export interface IncreaseReservedAmountEventObject {
  token: string;
  amount: BigNumber;
}
export type IncreaseReservedAmountEvent = TypedEvent<[string, BigNumber], IncreaseReservedAmountEventObject>;

export type IncreaseReservedAmountEventFilter = TypedEventFilter<IncreaseReservedAmountEvent>;

export interface IncreaseUsdmAmountEventObject {
  token: string;
  amount: BigNumber;
}
export type IncreaseUsdmAmountEvent = TypedEvent<[string, BigNumber], IncreaseUsdmAmountEventObject>;

export type IncreaseUsdmAmountEventFilter = TypedEventFilter<IncreaseUsdmAmountEvent>;

export interface LiquidatePositionEventObject {
  key: string;
  account: string;
  collateralToken: string;
  indexToken: string;
  isLong: boolean;
  size: BigNumber;
  collateral: BigNumber;
  reserveAmount: BigNumber;
  realisedPnl: BigNumber;
  markPrice: BigNumber;
}
export type LiquidatePositionEvent = TypedEvent<
  [string, string, string, string, boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LiquidatePositionEventObject
>;

export type LiquidatePositionEventFilter = TypedEventFilter<LiquidatePositionEvent>;

export interface SellUSDMEventObject {
  account: string;
  token: string;
  usdmAmount: BigNumber;
  tokenAmount: BigNumber;
  feeBasisPoints: BigNumber;
}
export type SellUSDMEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber], SellUSDMEventObject>;

export type SellUSDMEventFilter = TypedEventFilter<SellUSDMEvent>;

export interface SwapEventObject {
  account: string;
  tokenIn: string;
  tokenOut: string;
  amountIn: BigNumber;
  amountOut: BigNumber;
  amountOutAfterFees: BigNumber;
  feeBasisPoints: BigNumber;
}
export type SwapEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  SwapEventObject
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface UpdateFundingRateEventObject {
  token: string;
  fundingRate: BigNumber;
}
export type UpdateFundingRateEvent = TypedEvent<[string, BigNumber], UpdateFundingRateEventObject>;

export type UpdateFundingRateEventFilter = TypedEventFilter<UpdateFundingRateEvent>;

export interface UpdatePnlEventObject {
  key: string;
  hasProfit: boolean;
  delta: BigNumber;
}
export type UpdatePnlEvent = TypedEvent<[string, boolean, BigNumber], UpdatePnlEventObject>;

export type UpdatePnlEventFilter = TypedEventFilter<UpdatePnlEvent>;

export interface UpdatePositionEventObject {
  key: string;
  size: BigNumber;
  collateral: BigNumber;
  averagePrice: BigNumber;
  entryFundingRate: BigNumber;
  reserveAmount: BigNumber;
  realisedPnl: BigNumber;
  markPrice: BigNumber;
}
export type UpdatePositionEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  UpdatePositionEventObject
>;

export type UpdatePositionEventFilter = TypedEventFilter<UpdatePositionEvent>;

export interface MetavaultTradeVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MetavaultTradeVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    FUNDING_RATE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FEE_BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_LIQUIDATION_FEE_USD(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_FUNDING_RATE_INTERVAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_LEVERAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    USDM_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    adjustForDecimals(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenDiv: PromiseOrValue<string>,
      _tokenMul: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    allWhitelistedTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    allWhitelistedTokensLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    approvedRouters(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    bufferAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    buyUSDM(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    clearTokenConfig(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    cumulativeFundingRates(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    decreasePosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    directPoolDeposit(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    errorController(overrides?: CallOverrides): Promise<[string]>;

    errors(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    feeReserves(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    fundingInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundingRateFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDelta(
      _indexToken: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _averagePrice: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _lastIncreasedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[boolean, BigNumber]>;

    getEntryFundingRate(
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdmDelta: PromiseOrValue<BigNumberish>,
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _increment: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getFundingFee(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _size: PromiseOrValue<BigNumberish>,
      _entryFundingRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getGlobalShortDelta(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

    getMaxPrice(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinPrice(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getNextAveragePrice(
      _indexToken: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _averagePrice: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _nextPrice: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _lastIncreasedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getNextFundingRate(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getNextGlobalShortAveragePrice(
      _indexToken: PromiseOrValue<string>,
      _nextPrice: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getPosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber]>;

    getPositionDelta(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[boolean, BigNumber]>;

    getPositionFee(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getPositionKey(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getPositionLeverage(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getRedemptionAmount(
      _token: PromiseOrValue<string>,
      _usdmAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getRedemptionCollateral(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getRedemptionCollateralUsd(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTargetUsdmAmount(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getUtilisation(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    globalShortAveragePrices(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    globalShortSizes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    guaranteedUsd(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    hasDynamicFees(overrides?: CallOverrides): Promise<[boolean]>;

    inManagerMode(overrides?: CallOverrides): Promise<[boolean]>;

    inPrivateLiquidationMode(overrides?: CallOverrides): Promise<[boolean]>;

    includeAmmPrice(overrides?: CallOverrides): Promise<[boolean]>;

    increasePosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _router: PromiseOrValue<string>,
      _usdm: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _liquidationFeeUsd: PromiseOrValue<BigNumberish>,
      _fundingRateFactor: PromiseOrValue<BigNumberish>,
      _stableFundingRateFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isLeverageEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    isLiquidator(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isManager(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isSwapEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    lastFundingTimes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidatePosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    liquidationFeeUsd(overrides?: CallOverrides): Promise<[BigNumber]>;

    marginFeeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxGasPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxGlobalShortSizes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLeverage(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxUsdmAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    minProfitBasisPoints(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    minProfitTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintBurnFeeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    positions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        size: BigNumber;
        collateral: BigNumber;
        averagePrice: BigNumber;
        entryFundingRate: BigNumber;
        reserveAmount: BigNumber;
        realisedPnl: BigNumber;
        lastIncreasedTime: BigNumber;
      }
    >;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    removeRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    reservedAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    sellUSDM(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setBufferAmount(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setError(
      _errorCode: PromiseOrValue<BigNumberish>,
      _error: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setErrorController(
      _errorController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFees(
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _stableTaxBasisPoints: PromiseOrValue<BigNumberish>,
      _mintBurnFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _swapFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _stableSwapFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _marginFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _liquidationFeeUsd: PromiseOrValue<BigNumberish>,
      _minProfitTime: PromiseOrValue<BigNumberish>,
      _hasDynamicFees: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFundingRate(
      _fundingInterval: PromiseOrValue<BigNumberish>,
      _fundingRateFactor: PromiseOrValue<BigNumberish>,
      _stableFundingRateFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setInManagerMode(
      _inManagerMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setInPrivateLiquidationMode(
      _inPrivateLiquidationMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setIsLeverageEnabled(
      _isLeverageEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setIsSwapEnabled(
      _isSwapEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLiquidator(
      _liquidator: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setManager(
      _manager: PromiseOrValue<string>,
      _isManager: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxGasPrice(
      _maxGasPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxGlobalShortSize(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxLeverage(
      _maxLeverage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTokenConfig(
      _token: PromiseOrValue<string>,
      _tokenDecimals: PromiseOrValue<BigNumberish>,
      _tokenWeight: PromiseOrValue<BigNumberish>,
      _minProfitBps: PromiseOrValue<BigNumberish>,
      _maxUsdmAmount: PromiseOrValue<BigNumberish>,
      _isStable: PromiseOrValue<boolean>,
      _isShortable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setUsdmAmount(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setVaultUtils(
      _vaultUtils: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    shortableTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    stableFundingRateFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    stableSwapFeeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    stableTaxBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    stableTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    swap(
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swapFeeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    taxBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenBalances(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenDecimals(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenToUsdMin(
      _token: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    tokenWeights(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalTokenWeights(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateCumulativeFundingRate(
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    upgradeVault(
      _newVault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    usdToToken(
      _token: PromiseOrValue<string>,
      _usdAmount: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    usdToTokenMax(
      _token: PromiseOrValue<string>,
      _usdAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    usdToTokenMin(
      _token: PromiseOrValue<string>,
      _usdAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    usdm(overrides?: CallOverrides): Promise<[string]>;

    usdmAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    useSwapPricing(overrides?: CallOverrides): Promise<[boolean]>;

    validateLiquidation(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _raise: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    vaultUtils(overrides?: CallOverrides): Promise<[string]>;

    whitelistedTokenCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelistedTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    withdrawFees(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  FUNDING_RATE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FEE_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_LIQUIDATION_FEE_USD(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_FUNDING_RATE_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_LEVERAGE(overrides?: CallOverrides): Promise<BigNumber>;

  PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  USDM_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  addRouter(
    _router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  adjustForDecimals(
    _amount: PromiseOrValue<BigNumberish>,
    _tokenDiv: PromiseOrValue<string>,
    _tokenMul: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  allWhitelistedTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  allWhitelistedTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

  approvedRouters(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  bufferAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  buyUSDM(
    _token: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  clearTokenConfig(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  cumulativeFundingRates(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  decreasePosition(
    _account: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _collateralDelta: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _isLong: PromiseOrValue<boolean>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  directPoolDeposit(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  errorController(overrides?: CallOverrides): Promise<string>;

  errors(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  feeReserves(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  fundingInterval(overrides?: CallOverrides): Promise<BigNumber>;

  fundingRateFactor(overrides?: CallOverrides): Promise<BigNumber>;

  getDelta(
    _indexToken: PromiseOrValue<string>,
    _size: PromiseOrValue<BigNumberish>,
    _averagePrice: PromiseOrValue<BigNumberish>,
    _isLong: PromiseOrValue<boolean>,
    _lastIncreasedTime: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[boolean, BigNumber]>;

  getEntryFundingRate(
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _isLong: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getFeeBasisPoints(
    _token: PromiseOrValue<string>,
    _usdmDelta: PromiseOrValue<BigNumberish>,
    _feeBasisPoints: PromiseOrValue<BigNumberish>,
    _taxBasisPoints: PromiseOrValue<BigNumberish>,
    _increment: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getFundingFee(
    _account: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _isLong: PromiseOrValue<boolean>,
    _size: PromiseOrValue<BigNumberish>,
    _entryFundingRate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getGlobalShortDelta(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

  getMaxPrice(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getMinPrice(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getNextAveragePrice(
    _indexToken: PromiseOrValue<string>,
    _size: PromiseOrValue<BigNumberish>,
    _averagePrice: PromiseOrValue<BigNumberish>,
    _isLong: PromiseOrValue<boolean>,
    _nextPrice: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _lastIncreasedTime: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getNextFundingRate(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getNextGlobalShortAveragePrice(
    _indexToken: PromiseOrValue<string>,
    _nextPrice: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getPosition(
    _account: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _isLong: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber]>;

  getPositionDelta(
    _account: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _isLong: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<[boolean, BigNumber]>;

  getPositionFee(
    _account: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _isLong: PromiseOrValue<boolean>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getPositionKey(
    _account: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _isLong: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<string>;

  getPositionLeverage(
    _account: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _isLong: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getRedemptionAmount(
    _token: PromiseOrValue<string>,
    _usdmAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getRedemptionCollateral(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getRedemptionCollateralUsd(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getTargetUsdmAmount(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getUtilisation(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  globalShortAveragePrices(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  globalShortSizes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  guaranteedUsd(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  hasDynamicFees(overrides?: CallOverrides): Promise<boolean>;

  inManagerMode(overrides?: CallOverrides): Promise<boolean>;

  inPrivateLiquidationMode(overrides?: CallOverrides): Promise<boolean>;

  includeAmmPrice(overrides?: CallOverrides): Promise<boolean>;

  increasePosition(
    _account: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _isLong: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _router: PromiseOrValue<string>,
    _usdm: PromiseOrValue<string>,
    _priceFeed: PromiseOrValue<string>,
    _liquidationFeeUsd: PromiseOrValue<BigNumberish>,
    _fundingRateFactor: PromiseOrValue<BigNumberish>,
    _stableFundingRateFactor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  isLeverageEnabled(overrides?: CallOverrides): Promise<boolean>;

  isLiquidator(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isManager(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isSwapEnabled(overrides?: CallOverrides): Promise<boolean>;

  lastFundingTimes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  liquidatePosition(
    _account: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _isLong: PromiseOrValue<boolean>,
    _feeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  liquidationFeeUsd(overrides?: CallOverrides): Promise<BigNumber>;

  marginFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

  maxGlobalShortSizes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  maxLeverage(overrides?: CallOverrides): Promise<BigNumber>;

  maxUsdmAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  minProfitBasisPoints(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  minProfitTime(overrides?: CallOverrides): Promise<BigNumber>;

  mintBurnFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  poolAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  positions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      size: BigNumber;
      collateral: BigNumber;
      averagePrice: BigNumber;
      entryFundingRate: BigNumber;
      reserveAmount: BigNumber;
      realisedPnl: BigNumber;
      lastIncreasedTime: BigNumber;
    }
  >;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  removeRouter(
    _router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  reservedAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  router(overrides?: CallOverrides): Promise<string>;

  sellUSDM(
    _token: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setBufferAmount(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setError(
    _errorCode: PromiseOrValue<BigNumberish>,
    _error: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setErrorController(
    _errorController: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFees(
    _taxBasisPoints: PromiseOrValue<BigNumberish>,
    _stableTaxBasisPoints: PromiseOrValue<BigNumberish>,
    _mintBurnFeeBasisPoints: PromiseOrValue<BigNumberish>,
    _swapFeeBasisPoints: PromiseOrValue<BigNumberish>,
    _stableSwapFeeBasisPoints: PromiseOrValue<BigNumberish>,
    _marginFeeBasisPoints: PromiseOrValue<BigNumberish>,
    _liquidationFeeUsd: PromiseOrValue<BigNumberish>,
    _minProfitTime: PromiseOrValue<BigNumberish>,
    _hasDynamicFees: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFundingRate(
    _fundingInterval: PromiseOrValue<BigNumberish>,
    _fundingRateFactor: PromiseOrValue<BigNumberish>,
    _stableFundingRateFactor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setGov(
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setInManagerMode(
    _inManagerMode: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setInPrivateLiquidationMode(
    _inPrivateLiquidationMode: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setIsLeverageEnabled(
    _isLeverageEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setIsSwapEnabled(
    _isSwapEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLiquidator(
    _liquidator: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setManager(
    _manager: PromiseOrValue<string>,
    _isManager: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxGasPrice(
    _maxGasPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxGlobalShortSize(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxLeverage(
    _maxLeverage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPriceFeed(
    _priceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTokenConfig(
    _token: PromiseOrValue<string>,
    _tokenDecimals: PromiseOrValue<BigNumberish>,
    _tokenWeight: PromiseOrValue<BigNumberish>,
    _minProfitBps: PromiseOrValue<BigNumberish>,
    _maxUsdmAmount: PromiseOrValue<BigNumberish>,
    _isStable: PromiseOrValue<boolean>,
    _isShortable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setUsdmAmount(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setVaultUtils(
    _vaultUtils: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  shortableTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  stableFundingRateFactor(overrides?: CallOverrides): Promise<BigNumber>;

  stableSwapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  stableTaxBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  stableTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  swap(
    _tokenIn: PromiseOrValue<string>,
    _tokenOut: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  taxBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  tokenBalances(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  tokenDecimals(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  tokenToUsdMin(
    _token: PromiseOrValue<string>,
    _tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  tokenWeights(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  totalTokenWeights(overrides?: CallOverrides): Promise<BigNumber>;

  updateCumulativeFundingRate(
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  upgradeVault(
    _newVault: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  usdToToken(
    _token: PromiseOrValue<string>,
    _usdAmount: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  usdToTokenMax(
    _token: PromiseOrValue<string>,
    _usdAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  usdToTokenMin(
    _token: PromiseOrValue<string>,
    _usdAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  usdm(overrides?: CallOverrides): Promise<string>;

  usdmAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  useSwapPricing(overrides?: CallOverrides): Promise<boolean>;

  validateLiquidation(
    _account: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _isLong: PromiseOrValue<boolean>,
    _raise: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>;

  vaultUtils(overrides?: CallOverrides): Promise<string>;

  whitelistedTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

  whitelistedTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  withdrawFees(
    _token: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    FUNDING_RATE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LIQUIDATION_FEE_USD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_FUNDING_RATE_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LEVERAGE(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    USDM_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    addRouter(_router: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    adjustForDecimals(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenDiv: PromiseOrValue<string>,
      _tokenMul: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    allWhitelistedTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    allWhitelistedTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    approvedRouters(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    bufferAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    buyUSDM(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    clearTokenConfig(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    cumulativeFundingRates(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    decreasePosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    directPoolDeposit(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    errorController(overrides?: CallOverrides): Promise<string>;

    errors(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    feeReserves(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    fundingInterval(overrides?: CallOverrides): Promise<BigNumber>;

    fundingRateFactor(overrides?: CallOverrides): Promise<BigNumber>;

    getDelta(
      _indexToken: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _averagePrice: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _lastIncreasedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[boolean, BigNumber]>;

    getEntryFundingRate(
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdmDelta: PromiseOrValue<BigNumberish>,
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _increment: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getFundingFee(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _size: PromiseOrValue<BigNumberish>,
      _entryFundingRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getGlobalShortDelta(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

    getMaxPrice(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getMinPrice(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getNextAveragePrice(
      _indexToken: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _averagePrice: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _nextPrice: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _lastIncreasedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getNextFundingRate(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getNextGlobalShortAveragePrice(
      _indexToken: PromiseOrValue<string>,
      _nextPrice: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber]>;

    getPositionDelta(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[boolean, BigNumber]>;

    getPositionFee(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPositionKey(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getPositionLeverage(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRedemptionAmount(
      _token: PromiseOrValue<string>,
      _usdmAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRedemptionCollateral(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRedemptionCollateralUsd(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTargetUsdmAmount(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getUtilisation(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    globalShortAveragePrices(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    globalShortSizes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    guaranteedUsd(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    hasDynamicFees(overrides?: CallOverrides): Promise<boolean>;

    inManagerMode(overrides?: CallOverrides): Promise<boolean>;

    inPrivateLiquidationMode(overrides?: CallOverrides): Promise<boolean>;

    includeAmmPrice(overrides?: CallOverrides): Promise<boolean>;

    increasePosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    initialize(
      _router: PromiseOrValue<string>,
      _usdm: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _liquidationFeeUsd: PromiseOrValue<BigNumberish>,
      _fundingRateFactor: PromiseOrValue<BigNumberish>,
      _stableFundingRateFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    isLeverageEnabled(overrides?: CallOverrides): Promise<boolean>;

    isLiquidator(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isManager(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isSwapEnabled(overrides?: CallOverrides): Promise<boolean>;

    lastFundingTimes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    liquidatePosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    liquidationFeeUsd(overrides?: CallOverrides): Promise<BigNumber>;

    marginFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    maxGlobalShortSizes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxLeverage(overrides?: CallOverrides): Promise<BigNumber>;

    maxUsdmAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    minProfitBasisPoints(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    minProfitTime(overrides?: CallOverrides): Promise<BigNumber>;

    mintBurnFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    poolAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    positions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        size: BigNumber;
        collateral: BigNumber;
        averagePrice: BigNumber;
        entryFundingRate: BigNumber;
        reserveAmount: BigNumber;
        realisedPnl: BigNumber;
        lastIncreasedTime: BigNumber;
      }
    >;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    removeRouter(_router: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    reservedAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<string>;

    sellUSDM(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setBufferAmount(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setError(
      _errorCode: PromiseOrValue<BigNumberish>,
      _error: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setErrorController(_errorController: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setFees(
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _stableTaxBasisPoints: PromiseOrValue<BigNumberish>,
      _mintBurnFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _swapFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _stableSwapFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _marginFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _liquidationFeeUsd: PromiseOrValue<BigNumberish>,
      _minProfitTime: PromiseOrValue<BigNumberish>,
      _hasDynamicFees: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setFundingRate(
      _fundingInterval: PromiseOrValue<BigNumberish>,
      _fundingRateFactor: PromiseOrValue<BigNumberish>,
      _stableFundingRateFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setGov(_gov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setInManagerMode(_inManagerMode: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setInPrivateLiquidationMode(
      _inPrivateLiquidationMode: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setIsLeverageEnabled(_isLeverageEnabled: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setIsSwapEnabled(_isSwapEnabled: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setLiquidator(
      _liquidator: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setManager(
      _manager: PromiseOrValue<string>,
      _isManager: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMaxGasPrice(_maxGasPrice: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setMaxGlobalShortSize(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMaxLeverage(_maxLeverage: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setTokenConfig(
      _token: PromiseOrValue<string>,
      _tokenDecimals: PromiseOrValue<BigNumberish>,
      _tokenWeight: PromiseOrValue<BigNumberish>,
      _minProfitBps: PromiseOrValue<BigNumberish>,
      _maxUsdmAmount: PromiseOrValue<BigNumberish>,
      _isStable: PromiseOrValue<boolean>,
      _isShortable: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setUsdmAmount(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setVaultUtils(_vaultUtils: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    shortableTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    stableFundingRateFactor(overrides?: CallOverrides): Promise<BigNumber>;

    stableSwapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    stableTaxBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    stableTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    swap(
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    swapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    taxBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBalances(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    tokenDecimals(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    tokenToUsdMin(
      _token: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tokenWeights(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    totalTokenWeights(overrides?: CallOverrides): Promise<BigNumber>;

    updateCumulativeFundingRate(
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    upgradeVault(
      _newVault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    usdToToken(
      _token: PromiseOrValue<string>,
      _usdAmount: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    usdToTokenMax(
      _token: PromiseOrValue<string>,
      _usdAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    usdToTokenMin(
      _token: PromiseOrValue<string>,
      _usdAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    usdm(overrides?: CallOverrides): Promise<string>;

    usdmAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    useSwapPricing(overrides?: CallOverrides): Promise<boolean>;

    validateLiquidation(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _raise: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    vaultUtils(overrides?: CallOverrides): Promise<string>;

    whitelistedTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    withdrawFees(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {
    'BuyUSDM(address,address,uint256,uint256,uint256)'(
      account?: null,
      token?: null,
      tokenAmount?: null,
      usdmAmount?: null,
      feeBasisPoints?: null,
    ): BuyUSDMEventFilter;
    BuyUSDM(
      account?: null,
      token?: null,
      tokenAmount?: null,
      usdmAmount?: null,
      feeBasisPoints?: null,
    ): BuyUSDMEventFilter;

    'ClosePosition(bytes32,uint256,uint256,uint256,uint256,uint256,int256)'(
      key?: null,
      size?: null,
      collateral?: null,
      averagePrice?: null,
      entryFundingRate?: null,
      reserveAmount?: null,
      realisedPnl?: null,
    ): ClosePositionEventFilter;
    ClosePosition(
      key?: null,
      size?: null,
      collateral?: null,
      averagePrice?: null,
      entryFundingRate?: null,
      reserveAmount?: null,
      realisedPnl?: null,
    ): ClosePositionEventFilter;

    'CollectMarginFees(address,uint256,uint256)'(
      token?: null,
      feeUsd?: null,
      feeTokens?: null,
    ): CollectMarginFeesEventFilter;
    CollectMarginFees(token?: null, feeUsd?: null, feeTokens?: null): CollectMarginFeesEventFilter;

    'CollectSwapFees(address,uint256,uint256)'(
      token?: null,
      feeUsd?: null,
      feeTokens?: null,
    ): CollectSwapFeesEventFilter;
    CollectSwapFees(token?: null, feeUsd?: null, feeTokens?: null): CollectSwapFeesEventFilter;

    'DecreaseGuaranteedUsd(address,uint256)'(token?: null, amount?: null): DecreaseGuaranteedUsdEventFilter;
    DecreaseGuaranteedUsd(token?: null, amount?: null): DecreaseGuaranteedUsdEventFilter;

    'DecreasePoolAmount(address,uint256)'(token?: null, amount?: null): DecreasePoolAmountEventFilter;
    DecreasePoolAmount(token?: null, amount?: null): DecreasePoolAmountEventFilter;

    'DecreasePosition(bytes32,address,address,address,uint256,uint256,bool,uint256,uint256)'(
      key?: null,
      account?: null,
      collateralToken?: null,
      indexToken?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      price?: null,
      fee?: null,
    ): DecreasePositionEventFilter;
    DecreasePosition(
      key?: null,
      account?: null,
      collateralToken?: null,
      indexToken?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      price?: null,
      fee?: null,
    ): DecreasePositionEventFilter;

    'DecreaseReservedAmount(address,uint256)'(token?: null, amount?: null): DecreaseReservedAmountEventFilter;
    DecreaseReservedAmount(token?: null, amount?: null): DecreaseReservedAmountEventFilter;

    'DecreaseUsdmAmount(address,uint256)'(token?: null, amount?: null): DecreaseUsdmAmountEventFilter;
    DecreaseUsdmAmount(token?: null, amount?: null): DecreaseUsdmAmountEventFilter;

    'DirectPoolDeposit(address,uint256)'(token?: null, amount?: null): DirectPoolDepositEventFilter;
    DirectPoolDeposit(token?: null, amount?: null): DirectPoolDepositEventFilter;

    'IncreaseGuaranteedUsd(address,uint256)'(token?: null, amount?: null): IncreaseGuaranteedUsdEventFilter;
    IncreaseGuaranteedUsd(token?: null, amount?: null): IncreaseGuaranteedUsdEventFilter;

    'IncreasePoolAmount(address,uint256)'(token?: null, amount?: null): IncreasePoolAmountEventFilter;
    IncreasePoolAmount(token?: null, amount?: null): IncreasePoolAmountEventFilter;

    'IncreasePosition(bytes32,address,address,address,uint256,uint256,bool,uint256,uint256)'(
      key?: null,
      account?: null,
      collateralToken?: null,
      indexToken?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      price?: null,
      fee?: null,
    ): IncreasePositionEventFilter;
    IncreasePosition(
      key?: null,
      account?: null,
      collateralToken?: null,
      indexToken?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      price?: null,
      fee?: null,
    ): IncreasePositionEventFilter;

    'IncreaseReservedAmount(address,uint256)'(token?: null, amount?: null): IncreaseReservedAmountEventFilter;
    IncreaseReservedAmount(token?: null, amount?: null): IncreaseReservedAmountEventFilter;

    'IncreaseUsdmAmount(address,uint256)'(token?: null, amount?: null): IncreaseUsdmAmountEventFilter;
    IncreaseUsdmAmount(token?: null, amount?: null): IncreaseUsdmAmountEventFilter;

    'LiquidatePosition(bytes32,address,address,address,bool,uint256,uint256,uint256,int256,uint256)'(
      key?: null,
      account?: null,
      collateralToken?: null,
      indexToken?: null,
      isLong?: null,
      size?: null,
      collateral?: null,
      reserveAmount?: null,
      realisedPnl?: null,
      markPrice?: null,
    ): LiquidatePositionEventFilter;
    LiquidatePosition(
      key?: null,
      account?: null,
      collateralToken?: null,
      indexToken?: null,
      isLong?: null,
      size?: null,
      collateral?: null,
      reserveAmount?: null,
      realisedPnl?: null,
      markPrice?: null,
    ): LiquidatePositionEventFilter;

    'SellUSDM(address,address,uint256,uint256,uint256)'(
      account?: null,
      token?: null,
      usdmAmount?: null,
      tokenAmount?: null,
      feeBasisPoints?: null,
    ): SellUSDMEventFilter;
    SellUSDM(
      account?: null,
      token?: null,
      usdmAmount?: null,
      tokenAmount?: null,
      feeBasisPoints?: null,
    ): SellUSDMEventFilter;

    'Swap(address,address,address,uint256,uint256,uint256,uint256)'(
      account?: null,
      tokenIn?: null,
      tokenOut?: null,
      amountIn?: null,
      amountOut?: null,
      amountOutAfterFees?: null,
      feeBasisPoints?: null,
    ): SwapEventFilter;
    Swap(
      account?: null,
      tokenIn?: null,
      tokenOut?: null,
      amountIn?: null,
      amountOut?: null,
      amountOutAfterFees?: null,
      feeBasisPoints?: null,
    ): SwapEventFilter;

    'UpdateFundingRate(address,uint256)'(token?: null, fundingRate?: null): UpdateFundingRateEventFilter;
    UpdateFundingRate(token?: null, fundingRate?: null): UpdateFundingRateEventFilter;

    'UpdatePnl(bytes32,bool,uint256)'(key?: null, hasProfit?: null, delta?: null): UpdatePnlEventFilter;
    UpdatePnl(key?: null, hasProfit?: null, delta?: null): UpdatePnlEventFilter;

    'UpdatePosition(bytes32,uint256,uint256,uint256,uint256,uint256,int256,uint256)'(
      key?: null,
      size?: null,
      collateral?: null,
      averagePrice?: null,
      entryFundingRate?: null,
      reserveAmount?: null,
      realisedPnl?: null,
      markPrice?: null,
    ): UpdatePositionEventFilter;
    UpdatePosition(
      key?: null,
      size?: null,
      collateral?: null,
      averagePrice?: null,
      entryFundingRate?: null,
      reserveAmount?: null,
      realisedPnl?: null,
      markPrice?: null,
    ): UpdatePositionEventFilter;
  };

  estimateGas: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    FUNDING_RATE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LIQUIDATION_FEE_USD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_FUNDING_RATE_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LEVERAGE(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    USDM_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    addRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    adjustForDecimals(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenDiv: PromiseOrValue<string>,
      _tokenMul: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    allWhitelistedTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    allWhitelistedTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    approvedRouters(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    bufferAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    buyUSDM(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    clearTokenConfig(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    cumulativeFundingRates(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    decreasePosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    directPoolDeposit(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    errorController(overrides?: CallOverrides): Promise<BigNumber>;

    errors(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    feeReserves(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    fundingInterval(overrides?: CallOverrides): Promise<BigNumber>;

    fundingRateFactor(overrides?: CallOverrides): Promise<BigNumber>;

    getDelta(
      _indexToken: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _averagePrice: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _lastIncreasedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getEntryFundingRate(
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdmDelta: PromiseOrValue<BigNumberish>,
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _increment: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getFundingFee(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _size: PromiseOrValue<BigNumberish>,
      _entryFundingRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getGlobalShortDelta(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getMaxPrice(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getMinPrice(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getNextAveragePrice(
      _indexToken: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _averagePrice: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _nextPrice: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _lastIncreasedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getNextFundingRate(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getNextGlobalShortAveragePrice(
      _indexToken: PromiseOrValue<string>,
      _nextPrice: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPositionDelta(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPositionFee(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPositionKey(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPositionLeverage(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRedemptionAmount(
      _token: PromiseOrValue<string>,
      _usdmAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRedemptionCollateral(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRedemptionCollateralUsd(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTargetUsdmAmount(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getUtilisation(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    globalShortAveragePrices(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    globalShortSizes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    guaranteedUsd(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    hasDynamicFees(overrides?: CallOverrides): Promise<BigNumber>;

    inManagerMode(overrides?: CallOverrides): Promise<BigNumber>;

    inPrivateLiquidationMode(overrides?: CallOverrides): Promise<BigNumber>;

    includeAmmPrice(overrides?: CallOverrides): Promise<BigNumber>;

    increasePosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initialize(
      _router: PromiseOrValue<string>,
      _usdm: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _liquidationFeeUsd: PromiseOrValue<BigNumberish>,
      _fundingRateFactor: PromiseOrValue<BigNumberish>,
      _stableFundingRateFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isLeverageEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    isLiquidator(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isManager(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isSwapEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    lastFundingTimes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    liquidatePosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    liquidationFeeUsd(overrides?: CallOverrides): Promise<BigNumber>;

    marginFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    maxGlobalShortSizes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxLeverage(overrides?: CallOverrides): Promise<BigNumber>;

    maxUsdmAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    minProfitBasisPoints(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    minProfitTime(overrides?: CallOverrides): Promise<BigNumber>;

    mintBurnFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    poolAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    positions(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    removeRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    reservedAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    sellUSDM(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setBufferAmount(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setError(
      _errorCode: PromiseOrValue<BigNumberish>,
      _error: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setErrorController(
      _errorController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFees(
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _stableTaxBasisPoints: PromiseOrValue<BigNumberish>,
      _mintBurnFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _swapFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _stableSwapFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _marginFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _liquidationFeeUsd: PromiseOrValue<BigNumberish>,
      _minProfitTime: PromiseOrValue<BigNumberish>,
      _hasDynamicFees: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFundingRate(
      _fundingInterval: PromiseOrValue<BigNumberish>,
      _fundingRateFactor: PromiseOrValue<BigNumberish>,
      _stableFundingRateFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setGov(_gov: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setInManagerMode(
      _inManagerMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setInPrivateLiquidationMode(
      _inPrivateLiquidationMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setIsLeverageEnabled(
      _isLeverageEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setIsSwapEnabled(
      _isSwapEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLiquidator(
      _liquidator: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setManager(
      _manager: PromiseOrValue<string>,
      _isManager: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxGasPrice(
      _maxGasPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxGlobalShortSize(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxLeverage(
      _maxLeverage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTokenConfig(
      _token: PromiseOrValue<string>,
      _tokenDecimals: PromiseOrValue<BigNumberish>,
      _tokenWeight: PromiseOrValue<BigNumberish>,
      _minProfitBps: PromiseOrValue<BigNumberish>,
      _maxUsdmAmount: PromiseOrValue<BigNumberish>,
      _isStable: PromiseOrValue<boolean>,
      _isShortable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setUsdmAmount(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setVaultUtils(
      _vaultUtils: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    shortableTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    stableFundingRateFactor(overrides?: CallOverrides): Promise<BigNumber>;

    stableSwapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    stableTaxBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    stableTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    taxBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBalances(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    tokenDecimals(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    tokenToUsdMin(
      _token: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tokenWeights(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    totalTokenWeights(overrides?: CallOverrides): Promise<BigNumber>;

    updateCumulativeFundingRate(
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    upgradeVault(
      _newVault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    usdToToken(
      _token: PromiseOrValue<string>,
      _usdAmount: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    usdToTokenMax(
      _token: PromiseOrValue<string>,
      _usdAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    usdToTokenMin(
      _token: PromiseOrValue<string>,
      _usdAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    usdm(overrides?: CallOverrides): Promise<BigNumber>;

    usdmAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    useSwapPricing(overrides?: CallOverrides): Promise<BigNumber>;

    validateLiquidation(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _raise: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    vaultUtils(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFees(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FUNDING_RATE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FEE_BASIS_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_LIQUIDATION_FEE_USD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_FUNDING_RATE_INTERVAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_LEVERAGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDM_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    adjustForDecimals(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenDiv: PromiseOrValue<string>,
      _tokenMul: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    allWhitelistedTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allWhitelistedTokensLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approvedRouters(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    bufferAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyUSDM(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    clearTokenConfig(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    cumulativeFundingRates(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreasePosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    directPoolDeposit(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    errorController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    errors(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeReserves(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundingInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundingRateFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDelta(
      _indexToken: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _averagePrice: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _lastIncreasedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getEntryFundingRate(
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdmDelta: PromiseOrValue<BigNumberish>,
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _increment: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getFundingFee(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _size: PromiseOrValue<BigNumberish>,
      _entryFundingRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getGlobalShortDelta(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxPrice(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinPrice(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNextAveragePrice(
      _indexToken: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _averagePrice: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _nextPrice: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _lastIncreasedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getNextFundingRate(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNextGlobalShortAveragePrice(
      _indexToken: PromiseOrValue<string>,
      _nextPrice: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPositionDelta(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPositionFee(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPositionKey(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPositionLeverage(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRedemptionAmount(
      _token: PromiseOrValue<string>,
      _usdmAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRedemptionCollateral(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRedemptionCollateralUsd(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTargetUsdmAmount(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUtilisation(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    globalShortAveragePrices(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    globalShortSizes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guaranteedUsd(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasDynamicFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inManagerMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inPrivateLiquidationMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    includeAmmPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increasePosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _router: PromiseOrValue<string>,
      _usdm: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _liquidationFeeUsd: PromiseOrValue<BigNumberish>,
      _fundingRateFactor: PromiseOrValue<BigNumberish>,
      _stableFundingRateFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLeverageEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLiquidator(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isManager(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSwapEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastFundingTimes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidatePosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    liquidationFeeUsd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marginFeeBasisPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxGasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxGlobalShortSizes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxLeverage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxUsdmAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minProfitBasisPoints(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minProfitTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintBurnFeeBasisPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positions(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    reservedAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellUSDM(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setBufferAmount(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setError(
      _errorCode: PromiseOrValue<BigNumberish>,
      _error: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setErrorController(
      _errorController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFees(
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _stableTaxBasisPoints: PromiseOrValue<BigNumberish>,
      _mintBurnFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _swapFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _stableSwapFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _marginFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _liquidationFeeUsd: PromiseOrValue<BigNumberish>,
      _minProfitTime: PromiseOrValue<BigNumberish>,
      _hasDynamicFees: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFundingRate(
      _fundingInterval: PromiseOrValue<BigNumberish>,
      _fundingRateFactor: PromiseOrValue<BigNumberish>,
      _stableFundingRateFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setInManagerMode(
      _inManagerMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setInPrivateLiquidationMode(
      _inPrivateLiquidationMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setIsLeverageEnabled(
      _isLeverageEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setIsSwapEnabled(
      _isSwapEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLiquidator(
      _liquidator: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setManager(
      _manager: PromiseOrValue<string>,
      _isManager: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxGasPrice(
      _maxGasPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxGlobalShortSize(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxLeverage(
      _maxLeverage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTokenConfig(
      _token: PromiseOrValue<string>,
      _tokenDecimals: PromiseOrValue<BigNumberish>,
      _tokenWeight: PromiseOrValue<BigNumberish>,
      _minProfitBps: PromiseOrValue<BigNumberish>,
      _maxUsdmAmount: PromiseOrValue<BigNumberish>,
      _isStable: PromiseOrValue<boolean>,
      _isShortable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setUsdmAmount(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setVaultUtils(
      _vaultUtils: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    shortableTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stableFundingRateFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stableSwapFeeBasisPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stableTaxBasisPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stableTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swapFeeBasisPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taxBasisPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenBalances(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenDecimals(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenToUsdMin(
      _token: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    tokenWeights(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalTokenWeights(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateCumulativeFundingRate(
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    upgradeVault(
      _newVault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    usdToToken(
      _token: PromiseOrValue<string>,
      _usdAmount: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    usdToTokenMax(
      _token: PromiseOrValue<string>,
      _usdAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    usdToTokenMin(
      _token: PromiseOrValue<string>,
      _usdAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    usdm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdmAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    useSwapPricing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validateLiquidation(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _raise: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    vaultUtils(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistedTokenCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistedTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFees(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
