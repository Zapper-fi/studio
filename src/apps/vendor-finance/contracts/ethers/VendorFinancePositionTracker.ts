/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace IPositionTracker {
  export type EntryStruct = {
    id: PromiseOrValue<BytesLike>;
    prev: PromiseOrValue<BytesLike>;
    next: PromiseOrValue<BytesLike>;
    user: PromiseOrValue<string>;
    pool: PromiseOrValue<string>;
  };

  export type EntryStructOutput = [string, string, string, string, string] & {
    id: string;
    prev: string;
    next: string;
    user: string;
    pool: string;
  };
}

export interface VendorFinancePositionTrackerInterface extends utils.Interface {
  functions: {
    'borrowPositionCount(address)': FunctionFragment;
    'borrowPositions(bytes32)': FunctionFragment;
    'closeBorrowPosition(address)': FunctionFragment;
    'closeLendPosition(address)': FunctionFragment;
    'factory()': FunctionFragment;
    'getBorrowPositions(address,bytes32,uint256)': FunctionFragment;
    'getLendPositions(address,bytes32,uint256)': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'lendPositionCount(address)': FunctionFragment;
    'lendPositions(bytes32)': FunctionFragment;
    'openBorrowPosition(address,address)': FunctionFragment;
    'openLendPosition(address,address)': FunctionFragment;
    'owner()': FunctionFragment;
    'proxiableUUID()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setFactory(address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'upgradeTo(address)': FunctionFragment;
    'upgradeToAndCall(address,bytes)': FunctionFragment;
    'version()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'borrowPositionCount'
      | 'borrowPositions'
      | 'closeBorrowPosition'
      | 'closeLendPosition'
      | 'factory'
      | 'getBorrowPositions'
      | 'getLendPositions'
      | 'initialize'
      | 'lendPositionCount'
      | 'lendPositions'
      | 'openBorrowPosition'
      | 'openLendPosition'
      | 'owner'
      | 'proxiableUUID'
      | 'renounceOwnership'
      | 'setFactory'
      | 'transferOwnership'
      | 'upgradeTo'
      | 'upgradeToAndCall'
      | 'version',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'borrowPositionCount', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'borrowPositions', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'closeBorrowPosition', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'closeLendPosition', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getBorrowPositions',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getLendPositions',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'initialize', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lendPositionCount', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lendPositions', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'openBorrowPosition',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'openLendPosition',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'proxiableUUID', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setFactory', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'upgradeTo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'version', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'borrowPositionCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowPositions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeBorrowPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeLendPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBorrowPositions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLendPositions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lendPositionCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lendPositions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'openBorrowPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'openLendPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proxiableUUID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFactory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeToAndCall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result;

  events: {
    'AdminChanged(address,address)': EventFragment;
    'BeaconUpgraded(address)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Upgraded(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<[string, string], AdminChangedEventObject>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<[string], BeaconUpgradedEventObject>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface VendorFinancePositionTracker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VendorFinancePositionTrackerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    borrowPositionCount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowPositions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, string, string] & {
        id: string;
        prev: string;
        next: string;
        user: string;
        pool: string;
      }
    >;

    closeBorrowPosition(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    closeLendPosition(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getBorrowPositions(
      _borrower: PromiseOrValue<string>,
      _start: PromiseOrValue<BytesLike>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[IPositionTracker.EntryStructOutput[]]>;

    getLendPositions(
      _lender: PromiseOrValue<string>,
      _start: PromiseOrValue<BytesLike>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[IPositionTracker.EntryStructOutput[]]>;

    initialize(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    lendPositionCount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    lendPositions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, string, string] & {
        id: string;
        prev: string;
        next: string;
        user: string;
        pool: string;
      }
    >;

    openBorrowPosition(
      _user: PromiseOrValue<string>,
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    openLendPosition(
      _user: PromiseOrValue<string>,
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  borrowPositionCount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  borrowPositions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, string, string, string] & {
      id: string;
      prev: string;
      next: string;
      user: string;
      pool: string;
    }
  >;

  closeBorrowPosition(
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  closeLendPosition(
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  getBorrowPositions(
    _borrower: PromiseOrValue<string>,
    _start: PromiseOrValue<BytesLike>,
    _count: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<IPositionTracker.EntryStructOutput[]>;

  getLendPositions(
    _lender: PromiseOrValue<string>,
    _start: PromiseOrValue<BytesLike>,
    _count: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<IPositionTracker.EntryStructOutput[]>;

  initialize(
    _factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  lendPositionCount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  lendPositions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, string, string, string] & {
      id: string;
      prev: string;
      next: string;
      user: string;
      pool: string;
    }
  >;

  openBorrowPosition(
    _user: PromiseOrValue<string>,
    _pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  openLendPosition(
    _user: PromiseOrValue<string>,
    _pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setFactory(
    _factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    borrowPositionCount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowPositions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, string, string] & {
        id: string;
        prev: string;
        next: string;
        user: string;
        pool: string;
      }
    >;

    closeBorrowPosition(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    closeLendPosition(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    getBorrowPositions(
      _borrower: PromiseOrValue<string>,
      _start: PromiseOrValue<BytesLike>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<IPositionTracker.EntryStructOutput[]>;

    getLendPositions(
      _lender: PromiseOrValue<string>,
      _start: PromiseOrValue<BytesLike>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<IPositionTracker.EntryStructOutput[]>;

    initialize(_factory: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    lendPositionCount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lendPositions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, string, string] & {
        id: string;
        prev: string;
        next: string;
        user: string;
        pool: string;
      }
    >;

    openBorrowPosition(
      _user: PromiseOrValue<string>,
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    openLendPosition(
      _user: PromiseOrValue<string>,
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFactory(_factory: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'AdminChanged(address,address)'(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
    AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;

    'BeaconUpgraded(address)'(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'Upgraded(address)'(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
    Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
  };

  estimateGas: {
    borrowPositionCount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowPositions(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    closeBorrowPosition(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    closeLendPosition(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowPositions(
      _borrower: PromiseOrValue<string>,
      _start: PromiseOrValue<BytesLike>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLendPositions(
      _lender: PromiseOrValue<string>,
      _start: PromiseOrValue<BytesLike>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    lendPositionCount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lendPositions(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    openBorrowPosition(
      _user: PromiseOrValue<string>,
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    openLendPosition(
      _user: PromiseOrValue<string>,
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    borrowPositionCount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowPositions(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closeBorrowPosition(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    closeLendPosition(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBorrowPositions(
      _borrower: PromiseOrValue<string>,
      _start: PromiseOrValue<BytesLike>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLendPositions(
      _lender: PromiseOrValue<string>,
      _start: PromiseOrValue<BytesLike>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    lendPositionCount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lendPositions(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openBorrowPosition(
      _user: PromiseOrValue<string>,
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    openLendPosition(
      _user: PromiseOrValue<string>,
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
