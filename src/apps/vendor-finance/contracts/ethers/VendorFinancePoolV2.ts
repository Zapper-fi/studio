/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export type GeneralPoolSettingsStruct = {
  poolType: PromiseOrValue<BigNumberish>;
  owner: PromiseOrValue<string>;
  expiry: PromiseOrValue<BigNumberish>;
  colToken: PromiseOrValue<string>;
  protocolFee: PromiseOrValue<BigNumberish>;
  lendToken: PromiseOrValue<string>;
  ltv: PromiseOrValue<BigNumberish>;
  pauseTime: PromiseOrValue<BigNumberish>;
  lendRatio: PromiseOrValue<BigNumberish>;
  allowlist: PromiseOrValue<string>[];
  feeRatesAndType: PromiseOrValue<BytesLike>;
};

export type GeneralPoolSettingsStructOutput = [
  number,
  string,
  number,
  string,
  number,
  string,
  number,
  number,
  BigNumber,
  string[],
  string,
] & {
  poolType: number;
  owner: string;
  expiry: number;
  colToken: string;
  protocolFee: number;
  lendToken: string;
  ltv: number;
  pauseTime: number;
  lendRatio: BigNumber;
  allowlist: string[];
  feeRatesAndType: string;
};

export interface VendorFinancePoolV2Interface extends utils.Interface {
  functions: {
    'allowedBorrowers(address)': FunctionFragment;
    'allowedRollovers(address)': FunctionFragment;
    'borrowOnBehalfOf(address,uint256,uint48)': FunctionFragment;
    'claimOwnership()': FunctionFragment;
    'colBalance()': FunctionFragment;
    'collect()': FunctionFragment;
    'debts(address)': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'factory()': FunctionFragment;
    'feesManager()': FunctionFragment;
    'getPoolSettings()': FunctionFragment;
    'grantOwnership(address)': FunctionFragment;
    'initialize(bytes,bytes,bytes)': FunctionFragment;
    'lendBalance()': FunctionFragment;
    'lenderTotalFees()': FunctionFragment;
    'oracle()': FunctionFragment;
    'poolSettings()': FunctionFragment;
    'positionTracker()': FunctionFragment;
    'proxiableUUID()': FunctionFragment;
    'repayOnBehalfOf(address,uint256)': FunctionFragment;
    'rollInFrom(address,uint256,uint48)': FunctionFragment;
    'setPauseBorrowing(uint48)': FunctionFragment;
    'setPoolRates(bytes32)': FunctionFragment;
    'setRolloverPool(address,bool)': FunctionFragment;
    'strategy()': FunctionFragment;
    'treasury()': FunctionFragment;
    'updateBorrower(address,bool)': FunctionFragment;
    'upgradeTo(address)': FunctionFragment;
    'upgradeToAndCall(address,bytes)': FunctionFragment;
    'version()': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdrawStrategyTokens()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'allowedBorrowers'
      | 'allowedRollovers'
      | 'borrowOnBehalfOf'
      | 'claimOwnership'
      | 'colBalance'
      | 'collect'
      | 'debts'
      | 'deposit'
      | 'factory'
      | 'feesManager'
      | 'getPoolSettings'
      | 'grantOwnership'
      | 'initialize'
      | 'lendBalance'
      | 'lenderTotalFees'
      | 'oracle'
      | 'poolSettings'
      | 'positionTracker'
      | 'proxiableUUID'
      | 'repayOnBehalfOf'
      | 'rollInFrom'
      | 'setPauseBorrowing'
      | 'setPoolRates'
      | 'setRolloverPool'
      | 'strategy'
      | 'treasury'
      | 'updateBorrower'
      | 'upgradeTo'
      | 'upgradeToAndCall'
      | 'version'
      | 'withdraw'
      | 'withdrawStrategyTokens',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'allowedBorrowers', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'allowedRollovers', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'borrowOnBehalfOf',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'claimOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'colBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'collect', values?: undefined): string;
  encodeFunctionData(functionFragment: 'debts', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'deposit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feesManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPoolSettings', values?: undefined): string;
  encodeFunctionData(functionFragment: 'grantOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'lendBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lenderTotalFees', values?: undefined): string;
  encodeFunctionData(functionFragment: 'oracle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolSettings', values?: undefined): string;
  encodeFunctionData(functionFragment: 'positionTracker', values?: undefined): string;
  encodeFunctionData(functionFragment: 'proxiableUUID', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'repayOnBehalfOf',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'rollInFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setPauseBorrowing', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setPoolRates', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'setRolloverPool',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'strategy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'treasury', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'updateBorrower',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'upgradeTo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'version', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'withdrawStrategyTokens', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'allowedBorrowers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowedRollovers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowOnBehalfOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'colBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collect', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'debts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feesManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolSettings', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lendBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lenderTotalFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'oracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolSettings', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'positionTracker', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proxiableUUID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayOnBehalfOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rollInFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPauseBorrowing', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPoolRates', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRolloverPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateBorrower', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeToAndCall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawStrategyTokens', data: BytesLike): Result;

  events: {
    'AdminChanged(address,address)': EventFragment;
    'BalanceChange(address,address,bool,uint256)': EventFragment;
    'BeaconUpgraded(address)': EventFragment;
    'Borrow(address,uint256,uint256,uint48,uint256,uint256)': EventFragment;
    'Collect(address,uint256,uint256)': EventFragment;
    'Deposit(address,uint256)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Pause(uint48)': EventFragment;
    'Repay(address,uint256,uint256)': EventFragment;
    'RollIn(address,address,uint256,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'RolloverPoolSet(address,bool)': EventFragment;
    'UpdateBorrower(address,bool)': EventFragment;
    'Upgraded(address)': EventFragment;
    'Withdraw(address,uint256)': EventFragment;
    'WithdrawStrategyTokens(uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BalanceChange'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Borrow'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Collect'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Pause'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Repay'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RollIn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RolloverPoolSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateBorrower'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawStrategyTokens'): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<[string, string], AdminChangedEventObject>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BalanceChangeEventObject {
  token: string;
  to: string;
  incoming: boolean;
  amount: BigNumber;
}
export type BalanceChangeEvent = TypedEvent<[string, string, boolean, BigNumber], BalanceChangeEventObject>;

export type BalanceChangeEventFilter = TypedEventFilter<BalanceChangeEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<[string], BeaconUpgradedEventObject>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface BorrowEventObject {
  borrower: string;
  vendorFees: BigNumber;
  lenderFees: BigNumber;
  borrowRate: number;
  additionalColAmount: BigNumber;
  additionalDebt: BigNumber;
}
export type BorrowEvent = TypedEvent<[string, BigNumber, BigNumber, number, BigNumber, BigNumber], BorrowEventObject>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface CollectEventObject {
  lender: string;
  lenderLend: BigNumber;
  lenderCol: BigNumber;
}
export type CollectEvent = TypedEvent<[string, BigNumber, BigNumber], CollectEventObject>;

export type CollectEventFilter = TypedEventFilter<CollectEvent>;

export interface DepositEventObject {
  lender: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PauseEventObject {
  timestamp: number;
}
export type PauseEvent = TypedEvent<[number], PauseEventObject>;

export type PauseEventFilter = TypedEventFilter<PauseEvent>;

export interface RepayEventObject {
  borrower: string;
  debtRepaid: BigNumber;
  colReturned: BigNumber;
}
export type RepayEvent = TypedEvent<[string, BigNumber, BigNumber], RepayEventObject>;

export type RepayEventFilter = TypedEventFilter<RepayEvent>;

export interface RollInEventObject {
  borrower: string;
  originPool: string;
  originDebt: BigNumber;
  lendToRepay: BigNumber;
  lenderFeeAmt: BigNumber;
  protocolFeeAmt: BigNumber;
  colRolled: BigNumber;
  colToReimburse: BigNumber;
}
export type RollInEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  RollInEventObject
>;

export type RollInEventFilter = TypedEventFilter<RollInEvent>;

export interface RolloverPoolSetEventObject {
  pool: string;
  enabled: boolean;
}
export type RolloverPoolSetEvent = TypedEvent<[string, boolean], RolloverPoolSetEventObject>;

export type RolloverPoolSetEventFilter = TypedEventFilter<RolloverPoolSetEvent>;

export interface UpdateBorrowerEventObject {
  borrower: string;
  allowed: boolean;
}
export type UpdateBorrowerEvent = TypedEvent<[string, boolean], UpdateBorrowerEventObject>;

export type UpdateBorrowerEventFilter = TypedEventFilter<UpdateBorrowerEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface WithdrawEventObject {
  lender: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawStrategyTokensEventObject {
  sharesAmount: BigNumber;
}
export type WithdrawStrategyTokensEvent = TypedEvent<[BigNumber], WithdrawStrategyTokensEventObject>;

export type WithdrawStrategyTokensEventFilter = TypedEventFilter<WithdrawStrategyTokensEvent>;

export interface VendorFinancePoolV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VendorFinancePoolV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowedBorrowers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    allowedRollovers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    borrowOnBehalfOf(
      _borrower: PromiseOrValue<string>,
      _colDepositAmount: PromiseOrValue<BigNumberish>,
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    colBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    collect(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    debts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { debt: BigNumber; colAmount: BigNumber }>;

    deposit(
      _depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    feesManager(overrides?: CallOverrides): Promise<[string]>;

    getPoolSettings(overrides?: CallOverrides): Promise<[GeneralPoolSettingsStructOutput]>;

    grantOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _factoryParametersBytes: PromiseOrValue<BytesLike>,
      _poolSettingsBytes: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    lendBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    lenderTotalFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    poolSettings(overrides?: CallOverrides): Promise<
      [number, string, number, string, number, string, number, number, BigNumber, string] & {
        poolType: number;
        owner: string;
        expiry: number;
        colToken: string;
        protocolFee: number;
        lendToken: string;
        ltv: number;
        pauseTime: number;
        lendRatio: BigNumber;
        feeRatesAndType: string;
      }
    >;

    positionTracker(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    repayOnBehalfOf(
      _borrower: PromiseOrValue<string>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    rollInFrom(
      _originPool: PromiseOrValue<string>,
      _originDebt: PromiseOrValue<BigNumberish>,
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPauseBorrowing(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPoolRates(
      _ratesAndType: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRolloverPool(
      _pool: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    strategy(overrides?: CallOverrides): Promise<[string]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    updateBorrower(
      _borrower: PromiseOrValue<string>,
      _allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawStrategyTokens(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;
  };

  allowedBorrowers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  allowedRollovers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  borrowOnBehalfOf(
    _borrower: PromiseOrValue<string>,
    _colDepositAmount: PromiseOrValue<BigNumberish>,
    _rate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  colBalance(overrides?: CallOverrides): Promise<BigNumber>;

  collect(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  debts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { debt: BigNumber; colAmount: BigNumber }>;

  deposit(
    _depositAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  feesManager(overrides?: CallOverrides): Promise<string>;

  getPoolSettings(overrides?: CallOverrides): Promise<GeneralPoolSettingsStructOutput>;

  grantOwnership(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _factoryParametersBytes: PromiseOrValue<BytesLike>,
    _poolSettingsBytes: PromiseOrValue<BytesLike>,
    arg2: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  lendBalance(overrides?: CallOverrides): Promise<BigNumber>;

  lenderTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

  oracle(overrides?: CallOverrides): Promise<string>;

  poolSettings(overrides?: CallOverrides): Promise<
    [number, string, number, string, number, string, number, number, BigNumber, string] & {
      poolType: number;
      owner: string;
      expiry: number;
      colToken: string;
      protocolFee: number;
      lendToken: string;
      ltv: number;
      pauseTime: number;
      lendRatio: BigNumber;
      feeRatesAndType: string;
    }
  >;

  positionTracker(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  repayOnBehalfOf(
    _borrower: PromiseOrValue<string>,
    _repayAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  rollInFrom(
    _originPool: PromiseOrValue<string>,
    _originDebt: PromiseOrValue<BigNumberish>,
    _rate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPauseBorrowing(
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPoolRates(
    _ratesAndType: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRolloverPool(
    _pool: PromiseOrValue<string>,
    _enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  strategy(overrides?: CallOverrides): Promise<string>;

  treasury(overrides?: CallOverrides): Promise<string>;

  updateBorrower(
    _borrower: PromiseOrValue<string>,
    _allowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _withdrawAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawStrategyTokens(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  callStatic: {
    allowedBorrowers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    allowedRollovers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    borrowOnBehalfOf(
      _borrower: PromiseOrValue<string>,
      _colDepositAmount: PromiseOrValue<BigNumberish>,
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        assetsBorrowed: BigNumber;
        lenderFees: BigNumber;
        vendorFees: BigNumber;
      }
    >;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    colBalance(overrides?: CallOverrides): Promise<BigNumber>;

    collect(overrides?: CallOverrides): Promise<void>;

    debts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { debt: BigNumber; colAmount: BigNumber }>;

    deposit(_depositAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    feesManager(overrides?: CallOverrides): Promise<string>;

    getPoolSettings(overrides?: CallOverrides): Promise<GeneralPoolSettingsStructOutput>;

    grantOwnership(_newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    initialize(
      _factoryParametersBytes: PromiseOrValue<BytesLike>,
      _poolSettingsBytes: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    lendBalance(overrides?: CallOverrides): Promise<BigNumber>;

    lenderTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<string>;

    poolSettings(overrides?: CallOverrides): Promise<
      [number, string, number, string, number, string, number, number, BigNumber, string] & {
        poolType: number;
        owner: string;
        expiry: number;
        colToken: string;
        protocolFee: number;
        lendToken: string;
        ltv: number;
        pauseTime: number;
        lendRatio: BigNumber;
        feeRatesAndType: string;
      }
    >;

    positionTracker(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    repayOnBehalfOf(
      _borrower: PromiseOrValue<string>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        lendTokenReceived: BigNumber;
        colReturnAmount: BigNumber;
      }
    >;

    rollInFrom(
      _originPool: PromiseOrValue<string>,
      _originDebt: PromiseOrValue<BigNumberish>,
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setPauseBorrowing(_timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setPoolRates(_ratesAndType: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    setRolloverPool(
      _pool: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    strategy(overrides?: CallOverrides): Promise<string>;

    treasury(overrides?: CallOverrides): Promise<string>;

    updateBorrower(
      _borrower: PromiseOrValue<string>,
      _allowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(_withdrawAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    withdrawStrategyTokens(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'AdminChanged(address,address)'(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
    AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;

    'BalanceChange(address,address,bool,uint256)'(
      token?: null,
      to?: null,
      incoming?: null,
      amount?: null,
    ): BalanceChangeEventFilter;
    BalanceChange(token?: null, to?: null, incoming?: null, amount?: null): BalanceChangeEventFilter;

    'BeaconUpgraded(address)'(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;

    'Borrow(address,uint256,uint256,uint48,uint256,uint256)'(
      borrower?: PromiseOrValue<string> | null,
      vendorFees?: null,
      lenderFees?: null,
      borrowRate?: null,
      additionalColAmount?: null,
      additionalDebt?: null,
    ): BorrowEventFilter;
    Borrow(
      borrower?: PromiseOrValue<string> | null,
      vendorFees?: null,
      lenderFees?: null,
      borrowRate?: null,
      additionalColAmount?: null,
      additionalDebt?: null,
    ): BorrowEventFilter;

    'Collect(address,uint256,uint256)'(
      lender?: PromiseOrValue<string> | null,
      lenderLend?: null,
      lenderCol?: null,
    ): CollectEventFilter;
    Collect(lender?: PromiseOrValue<string> | null, lenderLend?: null, lenderCol?: null): CollectEventFilter;

    'Deposit(address,uint256)'(lender?: PromiseOrValue<string> | null, amount?: null): DepositEventFilter;
    Deposit(lender?: PromiseOrValue<string> | null, amount?: null): DepositEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'OwnershipTransferred(address,address)'(oldOwner?: null, newOwner?: null): OwnershipTransferredEventFilter;
    OwnershipTransferred(oldOwner?: null, newOwner?: null): OwnershipTransferredEventFilter;

    'Pause(uint48)'(timestamp?: null): PauseEventFilter;
    Pause(timestamp?: null): PauseEventFilter;

    'Repay(address,uint256,uint256)'(
      borrower?: PromiseOrValue<string> | null,
      debtRepaid?: null,
      colReturned?: null,
    ): RepayEventFilter;
    Repay(borrower?: PromiseOrValue<string> | null, debtRepaid?: null, colReturned?: null): RepayEventFilter;

    'RollIn(address,address,uint256,uint256,uint256,uint256,uint256,uint256)'(
      borrower?: PromiseOrValue<string> | null,
      originPool?: null,
      originDebt?: null,
      lendToRepay?: null,
      lenderFeeAmt?: null,
      protocolFeeAmt?: null,
      colRolled?: null,
      colToReimburse?: null,
    ): RollInEventFilter;
    RollIn(
      borrower?: PromiseOrValue<string> | null,
      originPool?: null,
      originDebt?: null,
      lendToRepay?: null,
      lenderFeeAmt?: null,
      protocolFeeAmt?: null,
      colRolled?: null,
      colToReimburse?: null,
    ): RollInEventFilter;

    'RolloverPoolSet(address,bool)'(pool?: null, enabled?: null): RolloverPoolSetEventFilter;
    RolloverPoolSet(pool?: null, enabled?: null): RolloverPoolSetEventFilter;

    'UpdateBorrower(address,bool)'(borrower?: PromiseOrValue<string> | null, allowed?: null): UpdateBorrowerEventFilter;
    UpdateBorrower(borrower?: PromiseOrValue<string> | null, allowed?: null): UpdateBorrowerEventFilter;

    'Upgraded(address)'(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
    Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;

    'Withdraw(address,uint256)'(lender?: PromiseOrValue<string> | null, amount?: null): WithdrawEventFilter;
    Withdraw(lender?: PromiseOrValue<string> | null, amount?: null): WithdrawEventFilter;

    'WithdrawStrategyTokens(uint256)'(sharesAmount?: null): WithdrawStrategyTokensEventFilter;
    WithdrawStrategyTokens(sharesAmount?: null): WithdrawStrategyTokensEventFilter;
  };

  estimateGas: {
    allowedBorrowers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    allowedRollovers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowOnBehalfOf(
      _borrower: PromiseOrValue<string>,
      _colDepositAmount: PromiseOrValue<BigNumberish>,
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    colBalance(overrides?: CallOverrides): Promise<BigNumber>;

    collect(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    debts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    feesManager(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolSettings(overrides?: CallOverrides): Promise<BigNumber>;

    grantOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initialize(
      _factoryParametersBytes: PromiseOrValue<BytesLike>,
      _poolSettingsBytes: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    lendBalance(overrides?: CallOverrides): Promise<BigNumber>;

    lenderTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    poolSettings(overrides?: CallOverrides): Promise<BigNumber>;

    positionTracker(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    repayOnBehalfOf(
      _borrower: PromiseOrValue<string>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    rollInFrom(
      _originPool: PromiseOrValue<string>,
      _originDebt: PromiseOrValue<BigNumberish>,
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPauseBorrowing(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPoolRates(
      _ratesAndType: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRolloverPool(
      _pool: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    strategy(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    updateBorrower(
      _borrower: PromiseOrValue<string>,
      _allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawStrategyTokens(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    allowedBorrowers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowedRollovers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowOnBehalfOf(
      _borrower: PromiseOrValue<string>,
      _colDepositAmount: PromiseOrValue<BigNumberish>,
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    colBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collect(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    debts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feesManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolSettings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _factoryParametersBytes: PromiseOrValue<BytesLike>,
      _poolSettingsBytes: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    lendBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lenderTotalFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolSettings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positionTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repayOnBehalfOf(
      _borrower: PromiseOrValue<string>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    rollInFrom(
      _originPool: PromiseOrValue<string>,
      _originDebt: PromiseOrValue<BigNumberish>,
      _rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPauseBorrowing(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPoolRates(
      _ratesAndType: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRolloverPool(
      _pool: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    strategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateBorrower(
      _borrower: PromiseOrValue<string>,
      _allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawStrategyTokens(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;
  };
}
