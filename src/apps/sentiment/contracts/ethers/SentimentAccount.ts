/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface SentimentAccountInterface extends utils.Interface {
  functions: {
    'accountManager()': FunctionFragment;
    'activate()': FunctionFragment;
    'activationBlock()': FunctionFragment;
    'addAsset(address)': FunctionFragment;
    'addBorrow(address)': FunctionFragment;
    'assets(uint256)': FunctionFragment;
    'borrows(uint256)': FunctionFragment;
    'deactivate()': FunctionFragment;
    'exec(address,uint256,bytes)': FunctionFragment;
    'getAssets()': FunctionFragment;
    'getBorrows()': FunctionFragment;
    'hasAsset(address)': FunctionFragment;
    'hasNoDebt()': FunctionFragment;
    'init(address)': FunctionFragment;
    'removeAsset(address)': FunctionFragment;
    'removeBorrow(address)': FunctionFragment;
    'sweepTo(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'accountManager'
      | 'activate'
      | 'activationBlock'
      | 'addAsset'
      | 'addBorrow'
      | 'assets'
      | 'borrows'
      | 'deactivate'
      | 'exec'
      | 'getAssets'
      | 'getBorrows'
      | 'hasAsset'
      | 'hasNoDebt'
      | 'init'
      | 'removeAsset'
      | 'removeBorrow'
      | 'sweepTo',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'accountManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'activate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'activationBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addAsset', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'addBorrow', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'assets', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'borrows', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'deactivate', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'exec',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'getAssets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getBorrows', values?: undefined): string;
  encodeFunctionData(functionFragment: 'hasAsset', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'hasNoDebt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'init', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'removeAsset', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'removeBorrow', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'sweepTo', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'accountManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activationBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addBorrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'assets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrows', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deactivate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exec', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBorrows', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasNoDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'init', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeBorrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sweepTo', data: BytesLike): Result;

  events: {};
}

export interface SentimentAccount extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SentimentAccountInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountManager(overrides?: CallOverrides): Promise<[string]>;

    activate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    activationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    addAsset(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addBorrow(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    assets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    borrows(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    deactivate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    exec(
      target: PromiseOrValue<string>,
      amt: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getAssets(overrides?: CallOverrides): Promise<[string[]]>;

    getBorrows(overrides?: CallOverrides): Promise<[string[]]>;

    hasAsset(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    hasNoDebt(overrides?: CallOverrides): Promise<[boolean]>;

    init(
      _accountManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeAsset(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeBorrow(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    sweepTo(
      toAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  accountManager(overrides?: CallOverrides): Promise<string>;

  activate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  activationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  addAsset(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addBorrow(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  assets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  borrows(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  deactivate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  exec(
    target: PromiseOrValue<string>,
    amt: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getAssets(overrides?: CallOverrides): Promise<string[]>;

  getBorrows(overrides?: CallOverrides): Promise<string[]>;

  hasAsset(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  hasNoDebt(overrides?: CallOverrides): Promise<boolean>;

  init(
    _accountManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeAsset(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeBorrow(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  sweepTo(
    toAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    accountManager(overrides?: CallOverrides): Promise<string>;

    activate(overrides?: CallOverrides): Promise<void>;

    activationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    addAsset(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    addBorrow(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    assets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    borrows(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    deactivate(overrides?: CallOverrides): Promise<void>;

    exec(
      target: PromiseOrValue<string>,
      amt: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[boolean, string]>;

    getAssets(overrides?: CallOverrides): Promise<string[]>;

    getBorrows(overrides?: CallOverrides): Promise<string[]>;

    hasAsset(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    hasNoDebt(overrides?: CallOverrides): Promise<boolean>;

    init(_accountManager: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    removeAsset(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    removeBorrow(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    sweepTo(toAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    accountManager(overrides?: CallOverrides): Promise<BigNumber>;

    activate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    activationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    addAsset(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addBorrow(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    assets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    borrows(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    deactivate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    exec(
      target: PromiseOrValue<string>,
      amt: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrows(overrides?: CallOverrides): Promise<BigNumber>;

    hasAsset(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    hasNoDebt(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _accountManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeAsset(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeBorrow(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    sweepTo(
      toAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    activationBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAsset(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addBorrow(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    assets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrows(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deactivate(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    exec(
      target: PromiseOrValue<string>,
      amt: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBorrows(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasAsset(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasNoDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _accountManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeAsset(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeBorrow(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    sweepTo(
      toAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
