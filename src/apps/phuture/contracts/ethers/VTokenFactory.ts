/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface VTokenFactoryInterface extends utils.Interface {
  functions: {
    'vTokenOf(address)': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'vTokenOf'): FunctionFragment;

  encodeFunctionData(functionFragment: 'vTokenOf', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'vTokenOf', data: BytesLike): Result;

  events: {
    'VTokenCreated(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'VTokenCreated'): EventFragment;
}

export interface VTokenCreatedEventObject {
  vToken: string;
  asset: string;
}
export type VTokenCreatedEvent = TypedEvent<[string, string], VTokenCreatedEventObject>;

export type VTokenCreatedEventFilter = TypedEventFilter<VTokenCreatedEvent>;

export interface VTokenFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VTokenFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    vTokenOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
  };

  vTokenOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    vTokenOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'VTokenCreated(address,address)'(vToken?: null, asset?: null): VTokenCreatedEventFilter;
    VTokenCreated(vToken?: null, asset?: null): VTokenCreatedEventFilter;
  };

  estimateGas: {
    vTokenOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    vTokenOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
