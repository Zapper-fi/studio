/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface PlutusRewardsDistroPlsJonesInterface extends utils.Interface {
  functions: {
    'getEmissions()': FunctionFragment;
    'harvestFromUnderlyingFarm()': FunctionFragment;
    'jones()': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingRewards()': FunctionFragment;
    'pls()': FunctionFragment;
    'plsDpx()': FunctionFragment;
    'plsDpxPerSecond()': FunctionFragment;
    'plsJones()': FunctionFragment;
    'plsJonesPerSecond()': FunctionFragment;
    'plsPerSecond()': FunctionFragment;
    'plutusChef()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'retrieve(address)': FunctionFragment;
    'rewardsController()': FunctionFragment;
    'sendRewards(address,uint128,uint128,uint128,uint128)': FunctionFragment;
    'setPlutusChef(address)': FunctionFragment;
    'setRewardsController(address)': FunctionFragment;
    'staker()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateInfo()': FunctionFragment;
    'updatePlsDpxEmissions(uint80)': FunctionFragment;
    'updatePlsEmission(uint80)': FunctionFragment;
    'updatePlsJonesEmissions(uint80)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'getEmissions'
      | 'harvestFromUnderlyingFarm'
      | 'jones'
      | 'owner'
      | 'pendingRewards'
      | 'pls'
      | 'plsDpx'
      | 'plsDpxPerSecond'
      | 'plsJones'
      | 'plsJonesPerSecond'
      | 'plsPerSecond'
      | 'plutusChef'
      | 'renounceOwnership'
      | 'retrieve'
      | 'rewardsController'
      | 'sendRewards'
      | 'setPlutusChef'
      | 'setRewardsController'
      | 'staker'
      | 'transferOwnership'
      | 'updateInfo'
      | 'updatePlsDpxEmissions'
      | 'updatePlsEmission'
      | 'updatePlsJonesEmissions',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'getEmissions', values?: undefined): string;
  encodeFunctionData(functionFragment: 'harvestFromUnderlyingFarm', values?: undefined): string;
  encodeFunctionData(functionFragment: 'jones', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pls', values?: undefined): string;
  encodeFunctionData(functionFragment: 'plsDpx', values?: undefined): string;
  encodeFunctionData(functionFragment: 'plsDpxPerSecond', values?: undefined): string;
  encodeFunctionData(functionFragment: 'plsJones', values?: undefined): string;
  encodeFunctionData(functionFragment: 'plsJonesPerSecond', values?: undefined): string;
  encodeFunctionData(functionFragment: 'plsPerSecond', values?: undefined): string;
  encodeFunctionData(functionFragment: 'plutusChef', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'retrieve', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'rewardsController', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'sendRewards',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'setPlutusChef', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setRewardsController', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'staker', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateInfo', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updatePlsDpxEmissions', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updatePlsEmission', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updatePlsJonesEmissions', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'getEmissions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvestFromUnderlyingFarm', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'jones', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pls', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'plsDpx', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'plsDpxPerSecond', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'plsJones', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'plsJonesPerSecond', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'plsPerSecond', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'plutusChef', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'retrieve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sendRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPlutusChef', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewardsController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'staker', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePlsDpxEmissions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePlsEmission', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePlsJonesEmissions', data: BytesLike): Result;

  events: {
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PlutusRewardsDistroPlsJones extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PlutusRewardsDistroPlsJonesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getEmissions(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        pls_: BigNumber;
        plsDpx_: BigNumber;
        plsJones_: BigNumber;
        jones_: BigNumber;
      }
    >;

    harvestFromUnderlyingFarm(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    jones(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingRewards(overrides?: CallOverrides): Promise<[string]>;

    pls(overrides?: CallOverrides): Promise<[string]>;

    plsDpx(overrides?: CallOverrides): Promise<[string]>;

    plsDpxPerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    plsJones(overrides?: CallOverrides): Promise<[string]>;

    plsJonesPerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    plsPerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    plutusChef(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    retrieve(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    rewardsController(overrides?: CallOverrides): Promise<[string]>;

    sendRewards(
      _to: PromiseOrValue<string>,
      _plsAmt: PromiseOrValue<BigNumberish>,
      _plsDpxAmt: PromiseOrValue<BigNumberish>,
      _plsJonesAmt: PromiseOrValue<BigNumberish>,
      _jonesAmt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPlutusChef(
      _newPlutusChef: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRewardsController(
      _newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    staker(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateInfo(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        pls_: BigNumber;
        plsDpx_: BigNumber;
        plsJones_: BigNumber;
        pendingJonesLessFee_: BigNumber;
      }
    >;

    updatePlsDpxEmissions(
      _newPlsDpxRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updatePlsEmission(
      _newPlsRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updatePlsJonesEmissions(
      _newPlsJonesRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  getEmissions(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      pls_: BigNumber;
      plsDpx_: BigNumber;
      plsJones_: BigNumber;
      jones_: BigNumber;
    }
  >;

  harvestFromUnderlyingFarm(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  jones(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingRewards(overrides?: CallOverrides): Promise<string>;

  pls(overrides?: CallOverrides): Promise<string>;

  plsDpx(overrides?: CallOverrides): Promise<string>;

  plsDpxPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  plsJones(overrides?: CallOverrides): Promise<string>;

  plsJonesPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  plsPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  plutusChef(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  retrieve(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  rewardsController(overrides?: CallOverrides): Promise<string>;

  sendRewards(
    _to: PromiseOrValue<string>,
    _plsAmt: PromiseOrValue<BigNumberish>,
    _plsDpxAmt: PromiseOrValue<BigNumberish>,
    _plsJonesAmt: PromiseOrValue<BigNumberish>,
    _jonesAmt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPlutusChef(
    _newPlutusChef: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRewardsController(
    _newController: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  staker(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateInfo(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      pls_: BigNumber;
      plsDpx_: BigNumber;
      plsJones_: BigNumber;
      pendingJonesLessFee_: BigNumber;
    }
  >;

  updatePlsDpxEmissions(
    _newPlsDpxRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updatePlsEmission(
    _newPlsRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updatePlsJonesEmissions(
    _newPlsJonesRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    getEmissions(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        pls_: BigNumber;
        plsDpx_: BigNumber;
        plsJones_: BigNumber;
        jones_: BigNumber;
      }
    >;

    harvestFromUnderlyingFarm(overrides?: CallOverrides): Promise<void>;

    jones(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingRewards(overrides?: CallOverrides): Promise<string>;

    pls(overrides?: CallOverrides): Promise<string>;

    plsDpx(overrides?: CallOverrides): Promise<string>;

    plsDpxPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    plsJones(overrides?: CallOverrides): Promise<string>;

    plsJonesPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    plsPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    plutusChef(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    retrieve(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    rewardsController(overrides?: CallOverrides): Promise<string>;

    sendRewards(
      _to: PromiseOrValue<string>,
      _plsAmt: PromiseOrValue<BigNumberish>,
      _plsDpxAmt: PromiseOrValue<BigNumberish>,
      _plsJonesAmt: PromiseOrValue<BigNumberish>,
      _jonesAmt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setPlutusChef(_newPlutusChef: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setRewardsController(_newController: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    staker(overrides?: CallOverrides): Promise<string>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateInfo(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        pls_: BigNumber;
        plsDpx_: BigNumber;
        plsJones_: BigNumber;
        pendingJonesLessFee_: BigNumber;
      }
    >;

    updatePlsDpxEmissions(_newPlsDpxRate: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updatePlsEmission(_newPlsRate: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updatePlsJonesEmissions(_newPlsJonesRate: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    getEmissions(overrides?: CallOverrides): Promise<BigNumber>;

    harvestFromUnderlyingFarm(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    jones(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(overrides?: CallOverrides): Promise<BigNumber>;

    pls(overrides?: CallOverrides): Promise<BigNumber>;

    plsDpx(overrides?: CallOverrides): Promise<BigNumber>;

    plsDpxPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    plsJones(overrides?: CallOverrides): Promise<BigNumber>;

    plsJonesPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    plsPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    plutusChef(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    retrieve(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    rewardsController(overrides?: CallOverrides): Promise<BigNumber>;

    sendRewards(
      _to: PromiseOrValue<string>,
      _plsAmt: PromiseOrValue<BigNumberish>,
      _plsDpxAmt: PromiseOrValue<BigNumberish>,
      _plsJonesAmt: PromiseOrValue<BigNumberish>,
      _jonesAmt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPlutusChef(
      _newPlutusChef: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRewardsController(
      _newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    staker(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateInfo(overrides?: CallOverrides): Promise<BigNumber>;

    updatePlsDpxEmissions(
      _newPlsDpxRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updatePlsEmission(
      _newPlsRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updatePlsJonesEmissions(
      _newPlsJonesRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getEmissions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestFromUnderlyingFarm(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    jones(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pls(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    plsDpx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    plsDpxPerSecond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    plsJones(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    plsJonesPerSecond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    plsPerSecond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    plutusChef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    retrieve(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    rewardsController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendRewards(
      _to: PromiseOrValue<string>,
      _plsAmt: PromiseOrValue<BigNumberish>,
      _plsDpxAmt: PromiseOrValue<BigNumberish>,
      _plsJonesAmt: PromiseOrValue<BigNumberish>,
      _jonesAmt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPlutusChef(
      _newPlutusChef: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRewardsController(
      _newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    staker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePlsDpxEmissions(
      _newPlsDpxRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updatePlsEmission(
      _newPlsRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updatePlsJonesEmissions(
      _newPlsJonesRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
