/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface PlutusPrivateTgeInterface extends utils.Interface {
  functions: {
    'accountCap()': FunctionFragment;
    'claimGovernance()': FunctionFragment;
    'contribute(bytes32[])': FunctionFragment;
    'deployer()': FunctionFragment;
    'deposit(address)': FunctionFragment;
    'details()': FunctionFragment;
    'governance()': FunctionFragment;
    'governanceWithdrawAll()': FunctionFragment;
    'merkleRoot()': FunctionFragment;
    'proposeGovernance(address)': FunctionFragment;
    'proposedGovernance()': FunctionFragment;
    'raiseCap()': FunctionFragment;
    'setAccountCapInWEI(uint256)': FunctionFragment;
    'setMerkleRoot(bytes32)': FunctionFragment;
    'setRaiseCapInETH(uint256)': FunctionFragment;
    'setStarted(bool)': FunctionFragment;
    'started()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'accountCap'
      | 'claimGovernance'
      | 'contribute'
      | 'deployer'
      | 'deposit'
      | 'details'
      | 'governance'
      | 'governanceWithdrawAll'
      | 'merkleRoot'
      | 'proposeGovernance'
      | 'proposedGovernance'
      | 'raiseCap'
      | 'setAccountCapInWEI'
      | 'setMerkleRoot'
      | 'setRaiseCapInETH'
      | 'setStarted'
      | 'started',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'accountCap', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimGovernance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'contribute', values: [PromiseOrValue<BytesLike>[]]): string;
  encodeFunctionData(functionFragment: 'deployer', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'details', values?: undefined): string;
  encodeFunctionData(functionFragment: 'governance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'governanceWithdrawAll', values?: undefined): string;
  encodeFunctionData(functionFragment: 'merkleRoot', values?: undefined): string;
  encodeFunctionData(functionFragment: 'proposeGovernance', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'proposedGovernance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'raiseCap', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setAccountCapInWEI', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setMerkleRoot', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'setRaiseCapInETH', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setStarted', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'started', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'accountCap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'contribute', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deployer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'details', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governanceWithdrawAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'merkleRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proposeGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proposedGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'raiseCap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAccountCapInWEI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMerkleRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRaiseCapInETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setStarted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'started', data: BytesLike): Result;

  events: {
    'Contribute(address,uint256)': EventFragment;
    'GovernanceChange(address,address)': EventFragment;
    'GovernancePropose(address)': EventFragment;
    'GovernanceWithdraw(address,uint256)': EventFragment;
    'TGEStart()': EventFragment;
    'WhitelistUpdate()': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Contribute'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GovernanceChange'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GovernancePropose'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GovernanceWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TGEStart'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WhitelistUpdate'): EventFragment;
}

export interface ContributeEventObject {
  user: string;
  amt: BigNumber;
}
export type ContributeEvent = TypedEvent<[string, BigNumber], ContributeEventObject>;

export type ContributeEventFilter = TypedEventFilter<ContributeEvent>;

export interface GovernanceChangeEventObject {
  from: string;
  to: string;
}
export type GovernanceChangeEvent = TypedEvent<[string, string], GovernanceChangeEventObject>;

export type GovernanceChangeEventFilter = TypedEventFilter<GovernanceChangeEvent>;

export interface GovernanceProposeEventObject {
  newAddr: string;
}
export type GovernanceProposeEvent = TypedEvent<[string], GovernanceProposeEventObject>;

export type GovernanceProposeEventFilter = TypedEventFilter<GovernanceProposeEvent>;

export interface GovernanceWithdrawEventObject {
  to: string;
  amt: BigNumber;
}
export type GovernanceWithdrawEvent = TypedEvent<[string, BigNumber], GovernanceWithdrawEventObject>;

export type GovernanceWithdrawEventFilter = TypedEventFilter<GovernanceWithdrawEvent>;

export interface TGEStartEventObject {}
export type TGEStartEvent = TypedEvent<[], TGEStartEventObject>;

export type TGEStartEventFilter = TypedEventFilter<TGEStartEvent>;

export interface WhitelistUpdateEventObject {}
export type WhitelistUpdateEvent = TypedEvent<[], WhitelistUpdateEventObject>;

export type WhitelistUpdateEventFilter = TypedEventFilter<WhitelistUpdateEvent>;

export interface PlutusPrivateTge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PlutusPrivateTgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimGovernance(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    contribute(
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    deposit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    details(overrides?: CallOverrides): Promise<[boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    governanceWithdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<[string]>;

    proposeGovernance(
      _proposedGovernanceAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    proposedGovernance(overrides?: CallOverrides): Promise<[string]>;

    raiseCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAccountCapInWEI(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMerkleRoot(
      _merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRaiseCapInETH(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setStarted(
      _started: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    started(overrides?: CallOverrides): Promise<[boolean]>;
  };

  accountCap(overrides?: CallOverrides): Promise<BigNumber>;

  claimGovernance(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  contribute(
    _merkleProof: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deployer(overrides?: CallOverrides): Promise<string>;

  deposit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  details(overrides?: CallOverrides): Promise<[boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  governance(overrides?: CallOverrides): Promise<string>;

  governanceWithdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  merkleRoot(overrides?: CallOverrides): Promise<string>;

  proposeGovernance(
    _proposedGovernanceAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  proposedGovernance(overrides?: CallOverrides): Promise<string>;

  raiseCap(overrides?: CallOverrides): Promise<BigNumber>;

  setAccountCapInWEI(
    _cap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMerkleRoot(
    _merkleRoot: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRaiseCapInETH(
    _cap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setStarted(
    _started: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  started(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    accountCap(overrides?: CallOverrides): Promise<BigNumber>;

    claimGovernance(overrides?: CallOverrides): Promise<void>;

    contribute(_merkleProof: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;

    deployer(overrides?: CallOverrides): Promise<string>;

    deposit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    details(overrides?: CallOverrides): Promise<[boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    governance(overrides?: CallOverrides): Promise<string>;

    governanceWithdrawAll(overrides?: CallOverrides): Promise<void>;

    merkleRoot(overrides?: CallOverrides): Promise<string>;

    proposeGovernance(_proposedGovernanceAddr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    proposedGovernance(overrides?: CallOverrides): Promise<string>;

    raiseCap(overrides?: CallOverrides): Promise<BigNumber>;

    setAccountCapInWEI(_cap: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setMerkleRoot(_merkleRoot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    setRaiseCapInETH(_cap: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setStarted(_started: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    started(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    'Contribute(address,uint256)'(user?: PromiseOrValue<string> | null, amt?: null): ContributeEventFilter;
    Contribute(user?: PromiseOrValue<string> | null, amt?: null): ContributeEventFilter;

    'GovernanceChange(address,address)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
    ): GovernanceChangeEventFilter;
    GovernanceChange(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
    ): GovernanceChangeEventFilter;

    'GovernancePropose(address)'(newAddr?: PromiseOrValue<string> | null): GovernanceProposeEventFilter;
    GovernancePropose(newAddr?: PromiseOrValue<string> | null): GovernanceProposeEventFilter;

    'GovernanceWithdraw(address,uint256)'(
      to?: PromiseOrValue<string> | null,
      amt?: null,
    ): GovernanceWithdrawEventFilter;
    GovernanceWithdraw(to?: PromiseOrValue<string> | null, amt?: null): GovernanceWithdrawEventFilter;

    'TGEStart()'(): TGEStartEventFilter;
    TGEStart(): TGEStartEventFilter;

    'WhitelistUpdate()'(): WhitelistUpdateEventFilter;
    WhitelistUpdate(): WhitelistUpdateEventFilter;
  };

  estimateGas: {
    accountCap(overrides?: CallOverrides): Promise<BigNumber>;

    claimGovernance(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    contribute(
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    details(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    governanceWithdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    proposeGovernance(
      _proposedGovernanceAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    proposedGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    raiseCap(overrides?: CallOverrides): Promise<BigNumber>;

    setAccountCapInWEI(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMerkleRoot(
      _merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRaiseCapInETH(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setStarted(
      _started: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    started(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accountCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimGovernance(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    contribute(
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    details(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceWithdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeGovernance(
      _proposedGovernanceAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    proposedGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    raiseCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAccountCapInWEI(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMerkleRoot(
      _merkleRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRaiseCapInETH(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setStarted(
      _started: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    started(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
