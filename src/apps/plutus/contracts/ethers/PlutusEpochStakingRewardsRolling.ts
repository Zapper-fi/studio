/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface PlutusEpochStakingRewardsRollingInterface extends utils.Interface {
  functions: {
    'calculateShare(address,uint32,uint256)': FunctionFragment;
    'claimDetails(address,uint32)': FunctionFragment;
    'claimRewardsFor(uint32,uint32,address,address)': FunctionFragment;
    'depositRewards(uint96,uint96)': FunctionFragment;
    'epoch()': FunctionFragment;
    'epochRewards(uint32)': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingRewards()': FunctionFragment;
    'pendingRewardsFor(uint32)': FunctionFragment;
    'plsDPX()': FunctionFragment;
    'plsJONES()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'retrieve(address)': FunctionFragment;
    'staking()': FunctionFragment;
    'totalPlsDpxRewards()': FunctionFragment;
    'totalPlsJonesRewards()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'calculateShare'
      | 'claimDetails'
      | 'claimRewardsFor'
      | 'depositRewards'
      | 'epoch'
      | 'epochRewards'
      | 'owner'
      | 'pendingRewards'
      | 'pendingRewardsFor'
      | 'plsDPX'
      | 'plsJONES'
      | 'renounceOwnership'
      | 'retrieve'
      | 'staking'
      | 'totalPlsDpxRewards'
      | 'totalPlsJonesRewards'
      | 'transferOwnership',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'calculateShare',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'claimDetails',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'claimRewardsFor',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositRewards',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'epoch', values?: undefined): string;
  encodeFunctionData(functionFragment: 'epochRewards', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingRewardsFor', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'plsDPX', values?: undefined): string;
  encodeFunctionData(functionFragment: 'plsJONES', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'retrieve', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'staking', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalPlsDpxRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalPlsJonesRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'calculateShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimDetails', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimRewardsFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'epoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'epochRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingRewardsFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'plsDPX', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'plsJONES', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'retrieve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'staking', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalPlsDpxRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalPlsJonesRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;

  events: {
    'ClaimRewards(address)': EventFragment;
    'DepositRewards(uint32)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ClaimRewards'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositRewards'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export interface ClaimRewardsEventObject {
  _recipient: string;
}
export type ClaimRewardsEvent = TypedEvent<[string], ClaimRewardsEventObject>;

export type ClaimRewardsEventFilter = TypedEventFilter<ClaimRewardsEvent>;

export interface DepositRewardsEventObject {
  epoch: number;
}
export type DepositRewardsEvent = TypedEvent<[number], DepositRewardsEventObject>;

export type DepositRewardsEventFilter = TypedEventFilter<DepositRewardsEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PlutusEpochStakingRewardsRolling extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PlutusEpochStakingRewardsRollingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateShare(
      _addr: PromiseOrValue<string>,
      _epoch: PromiseOrValue<BigNumberish>,
      _rewardAmt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    claimDetails(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, number, BigNumber, BigNumber] & {
        fullyClaimed: boolean;
        lastClaimedTimestamp: number;
        plsDpxClaimedAmt: BigNumber;
        plsJonesClaimedAmt: BigNumber;
      }
    >;

    claimRewardsFor(
      _epoch: PromiseOrValue<BigNumberish>,
      _currentEpoch: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositRewards(
      _plsDpx: PromiseOrValue<BigNumberish>,
      _plsJones: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    epoch(overrides?: CallOverrides): Promise<[number]>;

    epochRewards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [number, BigNumber, BigNumber] & {
        addedAtTimestamp: number;
        plsDpx: BigNumber;
        plsJones: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingRewards(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        _pendingDpx: BigNumber;
        _pendingJones: BigNumber;
      }
    >;

    pendingRewardsFor(
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { _plsDpx: BigNumber; _plsJones: BigNumber }>;

    plsDPX(overrides?: CallOverrides): Promise<[string]>;

    plsJONES(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    retrieve(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    staking(overrides?: CallOverrides): Promise<[string]>;

    totalPlsDpxRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPlsJonesRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  calculateShare(
    _addr: PromiseOrValue<string>,
    _epoch: PromiseOrValue<BigNumberish>,
    _rewardAmt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  claimDetails(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [boolean, number, BigNumber, BigNumber] & {
      fullyClaimed: boolean;
      lastClaimedTimestamp: number;
      plsDpxClaimedAmt: BigNumber;
      plsJonesClaimedAmt: BigNumber;
    }
  >;

  claimRewardsFor(
    _epoch: PromiseOrValue<BigNumberish>,
    _currentEpoch: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositRewards(
    _plsDpx: PromiseOrValue<BigNumberish>,
    _plsJones: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  epoch(overrides?: CallOverrides): Promise<number>;

  epochRewards(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [number, BigNumber, BigNumber] & {
      addedAtTimestamp: number;
      plsDpx: BigNumber;
      plsJones: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingRewards(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber] & {
      _pendingDpx: BigNumber;
      _pendingJones: BigNumber;
    }
  >;

  pendingRewardsFor(
    _epoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { _plsDpx: BigNumber; _plsJones: BigNumber }>;

  plsDPX(overrides?: CallOverrides): Promise<string>;

  plsJONES(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  retrieve(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  staking(overrides?: CallOverrides): Promise<string>;

  totalPlsDpxRewards(overrides?: CallOverrides): Promise<BigNumber>;

  totalPlsJonesRewards(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateShare(
      _addr: PromiseOrValue<string>,
      _epoch: PromiseOrValue<BigNumberish>,
      _rewardAmt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    claimDetails(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, number, BigNumber, BigNumber] & {
        fullyClaimed: boolean;
        lastClaimedTimestamp: number;
        plsDpxClaimedAmt: BigNumber;
        plsJonesClaimedAmt: BigNumber;
      }
    >;

    claimRewardsFor(
      _epoch: PromiseOrValue<BigNumberish>,
      _currentEpoch: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositRewards(
      _plsDpx: PromiseOrValue<BigNumberish>,
      _plsJones: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    epoch(overrides?: CallOverrides): Promise<number>;

    epochRewards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [number, BigNumber, BigNumber] & {
        addedAtTimestamp: number;
        plsDpx: BigNumber;
        plsJones: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingRewards(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        _pendingDpx: BigNumber;
        _pendingJones: BigNumber;
      }
    >;

    pendingRewardsFor(
      _epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { _plsDpx: BigNumber; _plsJones: BigNumber }>;

    plsDPX(overrides?: CallOverrides): Promise<string>;

    plsJONES(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    retrieve(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    staking(overrides?: CallOverrides): Promise<string>;

    totalPlsDpxRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalPlsJonesRewards(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'ClaimRewards(address)'(_recipient?: PromiseOrValue<string> | null): ClaimRewardsEventFilter;
    ClaimRewards(_recipient?: PromiseOrValue<string> | null): ClaimRewardsEventFilter;

    'DepositRewards(uint32)'(epoch?: null): DepositRewardsEventFilter;
    DepositRewards(epoch?: null): DepositRewardsEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    calculateShare(
      _addr: PromiseOrValue<string>,
      _epoch: PromiseOrValue<BigNumberish>,
      _rewardAmt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    claimDetails(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    claimRewardsFor(
      _epoch: PromiseOrValue<BigNumberish>,
      _currentEpoch: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositRewards(
      _plsDpx: PromiseOrValue<BigNumberish>,
      _plsJones: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    epochRewards(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewardsFor(_epoch: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    plsDPX(overrides?: CallOverrides): Promise<BigNumber>;

    plsJONES(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    retrieve(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    staking(overrides?: CallOverrides): Promise<BigNumber>;

    totalPlsDpxRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalPlsJonesRewards(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateShare(
      _addr: PromiseOrValue<string>,
      _epoch: PromiseOrValue<BigNumberish>,
      _rewardAmt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    claimDetails(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    claimRewardsFor(
      _epoch: PromiseOrValue<BigNumberish>,
      _currentEpoch: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositRewards(
      _plsDpx: PromiseOrValue<BigNumberish>,
      _plsJones: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochRewards(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRewardsFor(_epoch: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    plsDPX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    plsJONES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    retrieve(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    staking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPlsDpxRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPlsJonesRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
