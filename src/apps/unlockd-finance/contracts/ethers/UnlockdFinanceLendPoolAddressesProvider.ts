/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface UnlockdFinanceLendPoolAddressesProviderInterface extends utils.Interface {
  functions: {
    'getAddress(bytes32)': FunctionFragment;
    'getEmergencyAdmin()': FunctionFragment;
    'getImplementation(address)': FunctionFragment;
    'getIncentivesController()': FunctionFragment;
    'getLSSVMRouter()': FunctionFragment;
    'getLendPool()': FunctionFragment;
    'getLendPoolConfigurator()': FunctionFragment;
    'getLendPoolLiquidator()': FunctionFragment;
    'getLendPoolLoan()': FunctionFragment;
    'getMarketId()': FunctionFragment;
    'getNFTOracle()': FunctionFragment;
    'getNFTXVaultFactory()': FunctionFragment;
    'getPoolAdmin()': FunctionFragment;
    'getReserveOracle()': FunctionFragment;
    'getSushiSwapRouter()': FunctionFragment;
    'getUIDataProvider()': FunctionFragment;
    'getUNFTRegistry()': FunctionFragment;
    'getUnlockdDataProvider()': FunctionFragment;
    'getWalletBalanceProvider()': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setAddress(bytes32,address)': FunctionFragment;
    'setAddressAsProxy(bytes32,address,bytes)': FunctionFragment;
    'setEmergencyAdmin(address)': FunctionFragment;
    'setIncentivesController(address)': FunctionFragment;
    'setLSSVMRouter(address)': FunctionFragment;
    'setLendPoolConfiguratorImpl(address,bytes)': FunctionFragment;
    'setLendPoolImpl(address,bytes)': FunctionFragment;
    'setLendPoolLiquidator(address)': FunctionFragment;
    'setLendPoolLoanImpl(address,bytes)': FunctionFragment;
    'setMarketId(string)': FunctionFragment;
    'setNFTOracle(address)': FunctionFragment;
    'setNFTXVaultFactory(address)': FunctionFragment;
    'setPoolAdmin(address)': FunctionFragment;
    'setReserveOracle(address)': FunctionFragment;
    'setSushiSwapRouter(address)': FunctionFragment;
    'setUIDataProvider(address)': FunctionFragment;
    'setUNFTRegistry(address)': FunctionFragment;
    'setUnlockdDataProvider(address)': FunctionFragment;
    'setWalletBalanceProvider(address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'getAddress'
      | 'getEmergencyAdmin'
      | 'getImplementation'
      | 'getIncentivesController'
      | 'getLSSVMRouter'
      | 'getLendPool'
      | 'getLendPoolConfigurator'
      | 'getLendPoolLiquidator'
      | 'getLendPoolLoan'
      | 'getMarketId'
      | 'getNFTOracle'
      | 'getNFTXVaultFactory'
      | 'getPoolAdmin'
      | 'getReserveOracle'
      | 'getSushiSwapRouter'
      | 'getUIDataProvider'
      | 'getUNFTRegistry'
      | 'getUnlockdDataProvider'
      | 'getWalletBalanceProvider'
      | 'owner'
      | 'renounceOwnership'
      | 'setAddress'
      | 'setAddressAsProxy'
      | 'setEmergencyAdmin'
      | 'setIncentivesController'
      | 'setLSSVMRouter'
      | 'setLendPoolConfiguratorImpl'
      | 'setLendPoolImpl'
      | 'setLendPoolLiquidator'
      | 'setLendPoolLoanImpl'
      | 'setMarketId'
      | 'setNFTOracle'
      | 'setNFTXVaultFactory'
      | 'setPoolAdmin'
      | 'setReserveOracle'
      | 'setSushiSwapRouter'
      | 'setUIDataProvider'
      | 'setUNFTRegistry'
      | 'setUnlockdDataProvider'
      | 'setWalletBalanceProvider'
      | 'transferOwnership',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'getAddress', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'getEmergencyAdmin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getImplementation', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getIncentivesController', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLSSVMRouter', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLendPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLendPoolConfigurator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLendPoolLiquidator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLendPoolLoan', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMarketId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getNFTOracle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getNFTXVaultFactory', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPoolAdmin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getReserveOracle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getSushiSwapRouter', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getUIDataProvider', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getUNFTRegistry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getUnlockdDataProvider', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getWalletBalanceProvider', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setAddress',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setAddressAsProxy',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'setEmergencyAdmin', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setIncentivesController', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setLSSVMRouter', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setLendPoolConfiguratorImpl',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setLendPoolImpl',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'setLendPoolLiquidator', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setLendPoolLoanImpl',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'setMarketId', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setNFTOracle', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setNFTXVaultFactory', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setPoolAdmin', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setReserveOracle', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setSushiSwapRouter', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setUIDataProvider', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setUNFTRegistry', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setUnlockdDataProvider', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setWalletBalanceProvider', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'getAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEmergencyAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getIncentivesController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLSSVMRouter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLendPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLendPoolConfigurator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLendPoolLiquidator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLendPoolLoan', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMarketId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNFTOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNFTXVaultFactory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReserveOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSushiSwapRouter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUIDataProvider', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUNFTRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUnlockdDataProvider', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getWalletBalanceProvider', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAddressAsProxy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEmergencyAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setIncentivesController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLSSVMRouter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLendPoolConfiguratorImpl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLendPoolImpl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLendPoolLiquidator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLendPoolLoanImpl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMarketId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setNFTOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setNFTXVaultFactory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPoolAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setReserveOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSushiSwapRouter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUIDataProvider', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUNFTRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUnlockdDataProvider', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWalletBalanceProvider', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;

  events: {
    'AddressSet(bytes32,address,bool,bytes)': EventFragment;
    'ConfigurationAdminUpdated(address)': EventFragment;
    'EmergencyAdminUpdated(address)': EventFragment;
    'IncentivesControllerUpdated(address)': EventFragment;
    'LSSVMRouterUpdated(address)': EventFragment;
    'LendPoolConfiguratorUpdated(address,bytes)': EventFragment;
    'LendPoolLiquidatorUpdated(address)': EventFragment;
    'LendPoolLoanUpdated(address,bytes)': EventFragment;
    'LendPoolUpdated(address,bytes)': EventFragment;
    'LtvManagerUpdated(address)': EventFragment;
    'MarketIdSet(string)': EventFragment;
    'NFTXVaultFactoryUpdated(address)': EventFragment;
    'NftOracleUpdated(address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'ProxyCreated(bytes32,address)': EventFragment;
    'ReserveOracleUpdated(address)': EventFragment;
    'SushiSwapRouterUpdated(address)': EventFragment;
    'UIDataProviderUpdated(address)': EventFragment;
    'UNFTRegistryUpdated(address)': EventFragment;
    'UnlockdDataProviderUpdated(address)': EventFragment;
    'WalletBalanceProviderUpdated(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddressSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ConfigurationAdminUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyAdminUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'IncentivesControllerUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LSSVMRouterUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LendPoolConfiguratorUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LendPoolLiquidatorUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LendPoolLoanUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LendPoolUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LtvManagerUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketIdSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NFTXVaultFactoryUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NftOracleUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProxyCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReserveOracleUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SushiSwapRouterUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UIDataProviderUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UNFTRegistryUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UnlockdDataProviderUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WalletBalanceProviderUpdated'): EventFragment;
}

export interface AddressSetEventObject {
  id: string;
  newAddress: string;
  hasProxy: boolean;
  encodedCallData: string;
}
export type AddressSetEvent = TypedEvent<[string, string, boolean, string], AddressSetEventObject>;

export type AddressSetEventFilter = TypedEventFilter<AddressSetEvent>;

export interface ConfigurationAdminUpdatedEventObject {
  newAddress: string;
}
export type ConfigurationAdminUpdatedEvent = TypedEvent<[string], ConfigurationAdminUpdatedEventObject>;

export type ConfigurationAdminUpdatedEventFilter = TypedEventFilter<ConfigurationAdminUpdatedEvent>;

export interface EmergencyAdminUpdatedEventObject {
  newAddress: string;
}
export type EmergencyAdminUpdatedEvent = TypedEvent<[string], EmergencyAdminUpdatedEventObject>;

export type EmergencyAdminUpdatedEventFilter = TypedEventFilter<EmergencyAdminUpdatedEvent>;

export interface IncentivesControllerUpdatedEventObject {
  newAddress: string;
}
export type IncentivesControllerUpdatedEvent = TypedEvent<[string], IncentivesControllerUpdatedEventObject>;

export type IncentivesControllerUpdatedEventFilter = TypedEventFilter<IncentivesControllerUpdatedEvent>;

export interface LSSVMRouterUpdatedEventObject {
  newAddress: string;
}
export type LSSVMRouterUpdatedEvent = TypedEvent<[string], LSSVMRouterUpdatedEventObject>;

export type LSSVMRouterUpdatedEventFilter = TypedEventFilter<LSSVMRouterUpdatedEvent>;

export interface LendPoolConfiguratorUpdatedEventObject {
  newAddress: string;
  encodedCallData: string;
}
export type LendPoolConfiguratorUpdatedEvent = TypedEvent<[string, string], LendPoolConfiguratorUpdatedEventObject>;

export type LendPoolConfiguratorUpdatedEventFilter = TypedEventFilter<LendPoolConfiguratorUpdatedEvent>;

export interface LendPoolLiquidatorUpdatedEventObject {
  newAddress: string;
}
export type LendPoolLiquidatorUpdatedEvent = TypedEvent<[string], LendPoolLiquidatorUpdatedEventObject>;

export type LendPoolLiquidatorUpdatedEventFilter = TypedEventFilter<LendPoolLiquidatorUpdatedEvent>;

export interface LendPoolLoanUpdatedEventObject {
  newAddress: string;
  encodedCallData: string;
}
export type LendPoolLoanUpdatedEvent = TypedEvent<[string, string], LendPoolLoanUpdatedEventObject>;

export type LendPoolLoanUpdatedEventFilter = TypedEventFilter<LendPoolLoanUpdatedEvent>;

export interface LendPoolUpdatedEventObject {
  newAddress: string;
  encodedCallData: string;
}
export type LendPoolUpdatedEvent = TypedEvent<[string, string], LendPoolUpdatedEventObject>;

export type LendPoolUpdatedEventFilter = TypedEventFilter<LendPoolUpdatedEvent>;

export interface LtvManagerUpdatedEventObject {
  newAddress: string;
}
export type LtvManagerUpdatedEvent = TypedEvent<[string], LtvManagerUpdatedEventObject>;

export type LtvManagerUpdatedEventFilter = TypedEventFilter<LtvManagerUpdatedEvent>;

export interface MarketIdSetEventObject {
  newMarketId: string;
}
export type MarketIdSetEvent = TypedEvent<[string], MarketIdSetEventObject>;

export type MarketIdSetEventFilter = TypedEventFilter<MarketIdSetEvent>;

export interface NFTXVaultFactoryUpdatedEventObject {
  newAddress: string;
}
export type NFTXVaultFactoryUpdatedEvent = TypedEvent<[string], NFTXVaultFactoryUpdatedEventObject>;

export type NFTXVaultFactoryUpdatedEventFilter = TypedEventFilter<NFTXVaultFactoryUpdatedEvent>;

export interface NftOracleUpdatedEventObject {
  newAddress: string;
}
export type NftOracleUpdatedEvent = TypedEvent<[string], NftOracleUpdatedEventObject>;

export type NftOracleUpdatedEventFilter = TypedEventFilter<NftOracleUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface ProxyCreatedEventObject {
  id: string;
  newAddress: string;
}
export type ProxyCreatedEvent = TypedEvent<[string, string], ProxyCreatedEventObject>;

export type ProxyCreatedEventFilter = TypedEventFilter<ProxyCreatedEvent>;

export interface ReserveOracleUpdatedEventObject {
  newAddress: string;
}
export type ReserveOracleUpdatedEvent = TypedEvent<[string], ReserveOracleUpdatedEventObject>;

export type ReserveOracleUpdatedEventFilter = TypedEventFilter<ReserveOracleUpdatedEvent>;

export interface SushiSwapRouterUpdatedEventObject {
  newAddress: string;
}
export type SushiSwapRouterUpdatedEvent = TypedEvent<[string], SushiSwapRouterUpdatedEventObject>;

export type SushiSwapRouterUpdatedEventFilter = TypedEventFilter<SushiSwapRouterUpdatedEvent>;

export interface UIDataProviderUpdatedEventObject {
  newAddress: string;
}
export type UIDataProviderUpdatedEvent = TypedEvent<[string], UIDataProviderUpdatedEventObject>;

export type UIDataProviderUpdatedEventFilter = TypedEventFilter<UIDataProviderUpdatedEvent>;

export interface UNFTRegistryUpdatedEventObject {
  newAddress: string;
}
export type UNFTRegistryUpdatedEvent = TypedEvent<[string], UNFTRegistryUpdatedEventObject>;

export type UNFTRegistryUpdatedEventFilter = TypedEventFilter<UNFTRegistryUpdatedEvent>;

export interface UnlockdDataProviderUpdatedEventObject {
  newAddress: string;
}
export type UnlockdDataProviderUpdatedEvent = TypedEvent<[string], UnlockdDataProviderUpdatedEventObject>;

export type UnlockdDataProviderUpdatedEventFilter = TypedEventFilter<UnlockdDataProviderUpdatedEvent>;

export interface WalletBalanceProviderUpdatedEventObject {
  newAddress: string;
}
export type WalletBalanceProviderUpdatedEvent = TypedEvent<[string], WalletBalanceProviderUpdatedEventObject>;

export type WalletBalanceProviderUpdatedEventFilter = TypedEventFilter<WalletBalanceProviderUpdatedEvent>;

export interface UnlockdFinanceLendPoolAddressesProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UnlockdFinanceLendPoolAddressesProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAddress(id: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    getEmergencyAdmin(overrides?: CallOverrides): Promise<[string]>;

    getImplementation(proxyAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    getIncentivesController(overrides?: CallOverrides): Promise<[string]>;

    getLSSVMRouter(overrides?: CallOverrides): Promise<[string]>;

    getLendPool(overrides?: CallOverrides): Promise<[string]>;

    getLendPoolConfigurator(overrides?: CallOverrides): Promise<[string]>;

    getLendPoolLiquidator(overrides?: CallOverrides): Promise<[string]>;

    getLendPoolLoan(overrides?: CallOverrides): Promise<[string]>;

    getMarketId(overrides?: CallOverrides): Promise<[string]>;

    getNFTOracle(overrides?: CallOverrides): Promise<[string]>;

    getNFTXVaultFactory(overrides?: CallOverrides): Promise<[string]>;

    getPoolAdmin(overrides?: CallOverrides): Promise<[string]>;

    getReserveOracle(overrides?: CallOverrides): Promise<[string]>;

    getSushiSwapRouter(overrides?: CallOverrides): Promise<[string]>;

    getUIDataProvider(overrides?: CallOverrides): Promise<[string]>;

    getUNFTRegistry(overrides?: CallOverrides): Promise<[string]>;

    getUnlockdDataProvider(overrides?: CallOverrides): Promise<[string]>;

    getWalletBalanceProvider(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setAddress(
      id: PromiseOrValue<BytesLike>,
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setAddressAsProxy(
      id: PromiseOrValue<BytesLike>,
      implementationAddress: PromiseOrValue<string>,
      encodedCallData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setEmergencyAdmin(
      emergencyAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setIncentivesController(
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLSSVMRouter(
      router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLendPoolConfiguratorImpl(
      configurator: PromiseOrValue<string>,
      encodedCallData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLendPoolImpl(
      pool: PromiseOrValue<string>,
      encodedCallData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLendPoolLiquidator(
      liquidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLendPoolLoanImpl(
      loanAddress: PromiseOrValue<string>,
      encodedCallData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMarketId(
      marketId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setNFTOracle(
      nftOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setNFTXVaultFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPoolAdmin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setReserveOracle(
      reserveOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSushiSwapRouter(
      router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setUIDataProvider(
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setUNFTRegistry(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setUnlockdDataProvider(
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setWalletBalanceProvider(
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  getAddress(id: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  getEmergencyAdmin(overrides?: CallOverrides): Promise<string>;

  getImplementation(proxyAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  getIncentivesController(overrides?: CallOverrides): Promise<string>;

  getLSSVMRouter(overrides?: CallOverrides): Promise<string>;

  getLendPool(overrides?: CallOverrides): Promise<string>;

  getLendPoolConfigurator(overrides?: CallOverrides): Promise<string>;

  getLendPoolLiquidator(overrides?: CallOverrides): Promise<string>;

  getLendPoolLoan(overrides?: CallOverrides): Promise<string>;

  getMarketId(overrides?: CallOverrides): Promise<string>;

  getNFTOracle(overrides?: CallOverrides): Promise<string>;

  getNFTXVaultFactory(overrides?: CallOverrides): Promise<string>;

  getPoolAdmin(overrides?: CallOverrides): Promise<string>;

  getReserveOracle(overrides?: CallOverrides): Promise<string>;

  getSushiSwapRouter(overrides?: CallOverrides): Promise<string>;

  getUIDataProvider(overrides?: CallOverrides): Promise<string>;

  getUNFTRegistry(overrides?: CallOverrides): Promise<string>;

  getUnlockdDataProvider(overrides?: CallOverrides): Promise<string>;

  getWalletBalanceProvider(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setAddress(
    id: PromiseOrValue<BytesLike>,
    newAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setAddressAsProxy(
    id: PromiseOrValue<BytesLike>,
    implementationAddress: PromiseOrValue<string>,
    encodedCallData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setEmergencyAdmin(
    emergencyAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setIncentivesController(
    controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLSSVMRouter(
    router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLendPoolConfiguratorImpl(
    configurator: PromiseOrValue<string>,
    encodedCallData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLendPoolImpl(
    pool: PromiseOrValue<string>,
    encodedCallData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLendPoolLiquidator(
    liquidator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLendPoolLoanImpl(
    loanAddress: PromiseOrValue<string>,
    encodedCallData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMarketId(
    marketId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setNFTOracle(
    nftOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setNFTXVaultFactory(
    factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPoolAdmin(
    admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setReserveOracle(
    reserveOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSushiSwapRouter(
    router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setUIDataProvider(
    provider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setUNFTRegistry(
    factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setUnlockdDataProvider(
    provider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setWalletBalanceProvider(
    provider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    getAddress(id: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    getEmergencyAdmin(overrides?: CallOverrides): Promise<string>;

    getImplementation(proxyAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    getIncentivesController(overrides?: CallOverrides): Promise<string>;

    getLSSVMRouter(overrides?: CallOverrides): Promise<string>;

    getLendPool(overrides?: CallOverrides): Promise<string>;

    getLendPoolConfigurator(overrides?: CallOverrides): Promise<string>;

    getLendPoolLiquidator(overrides?: CallOverrides): Promise<string>;

    getLendPoolLoan(overrides?: CallOverrides): Promise<string>;

    getMarketId(overrides?: CallOverrides): Promise<string>;

    getNFTOracle(overrides?: CallOverrides): Promise<string>;

    getNFTXVaultFactory(overrides?: CallOverrides): Promise<string>;

    getPoolAdmin(overrides?: CallOverrides): Promise<string>;

    getReserveOracle(overrides?: CallOverrides): Promise<string>;

    getSushiSwapRouter(overrides?: CallOverrides): Promise<string>;

    getUIDataProvider(overrides?: CallOverrides): Promise<string>;

    getUNFTRegistry(overrides?: CallOverrides): Promise<string>;

    getUnlockdDataProvider(overrides?: CallOverrides): Promise<string>;

    getWalletBalanceProvider(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAddress(
      id: PromiseOrValue<BytesLike>,
      newAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setAddressAsProxy(
      id: PromiseOrValue<BytesLike>,
      implementationAddress: PromiseOrValue<string>,
      encodedCallData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setEmergencyAdmin(emergencyAdmin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setIncentivesController(controller: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setLSSVMRouter(router: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setLendPoolConfiguratorImpl(
      configurator: PromiseOrValue<string>,
      encodedCallData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setLendPoolImpl(
      pool: PromiseOrValue<string>,
      encodedCallData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setLendPoolLiquidator(liquidator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setLendPoolLoanImpl(
      loanAddress: PromiseOrValue<string>,
      encodedCallData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMarketId(marketId: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setNFTOracle(nftOracle: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setNFTXVaultFactory(factory: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setPoolAdmin(admin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setReserveOracle(reserveOracle: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setSushiSwapRouter(router: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setUIDataProvider(provider: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setUNFTRegistry(factory: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setUnlockdDataProvider(provider: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setWalletBalanceProvider(provider: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'AddressSet(bytes32,address,bool,bytes)'(
      id?: null,
      newAddress?: PromiseOrValue<string> | null,
      hasProxy?: null,
      encodedCallData?: null,
    ): AddressSetEventFilter;
    AddressSet(
      id?: null,
      newAddress?: PromiseOrValue<string> | null,
      hasProxy?: null,
      encodedCallData?: null,
    ): AddressSetEventFilter;

    'ConfigurationAdminUpdated(address)'(
      newAddress?: PromiseOrValue<string> | null,
    ): ConfigurationAdminUpdatedEventFilter;
    ConfigurationAdminUpdated(newAddress?: PromiseOrValue<string> | null): ConfigurationAdminUpdatedEventFilter;

    'EmergencyAdminUpdated(address)'(newAddress?: PromiseOrValue<string> | null): EmergencyAdminUpdatedEventFilter;
    EmergencyAdminUpdated(newAddress?: PromiseOrValue<string> | null): EmergencyAdminUpdatedEventFilter;

    'IncentivesControllerUpdated(address)'(
      newAddress?: PromiseOrValue<string> | null,
    ): IncentivesControllerUpdatedEventFilter;
    IncentivesControllerUpdated(newAddress?: PromiseOrValue<string> | null): IncentivesControllerUpdatedEventFilter;

    'LSSVMRouterUpdated(address)'(newAddress?: PromiseOrValue<string> | null): LSSVMRouterUpdatedEventFilter;
    LSSVMRouterUpdated(newAddress?: PromiseOrValue<string> | null): LSSVMRouterUpdatedEventFilter;

    'LendPoolConfiguratorUpdated(address,bytes)'(
      newAddress?: PromiseOrValue<string> | null,
      encodedCallData?: null,
    ): LendPoolConfiguratorUpdatedEventFilter;
    LendPoolConfiguratorUpdated(
      newAddress?: PromiseOrValue<string> | null,
      encodedCallData?: null,
    ): LendPoolConfiguratorUpdatedEventFilter;

    'LendPoolLiquidatorUpdated(address)'(
      newAddress?: PromiseOrValue<string> | null,
    ): LendPoolLiquidatorUpdatedEventFilter;
    LendPoolLiquidatorUpdated(newAddress?: PromiseOrValue<string> | null): LendPoolLiquidatorUpdatedEventFilter;

    'LendPoolLoanUpdated(address,bytes)'(
      newAddress?: PromiseOrValue<string> | null,
      encodedCallData?: null,
    ): LendPoolLoanUpdatedEventFilter;
    LendPoolLoanUpdated(
      newAddress?: PromiseOrValue<string> | null,
      encodedCallData?: null,
    ): LendPoolLoanUpdatedEventFilter;

    'LendPoolUpdated(address,bytes)'(
      newAddress?: PromiseOrValue<string> | null,
      encodedCallData?: null,
    ): LendPoolUpdatedEventFilter;
    LendPoolUpdated(newAddress?: PromiseOrValue<string> | null, encodedCallData?: null): LendPoolUpdatedEventFilter;

    'LtvManagerUpdated(address)'(newAddress?: PromiseOrValue<string> | null): LtvManagerUpdatedEventFilter;
    LtvManagerUpdated(newAddress?: PromiseOrValue<string> | null): LtvManagerUpdatedEventFilter;

    'MarketIdSet(string)'(newMarketId?: null): MarketIdSetEventFilter;
    MarketIdSet(newMarketId?: null): MarketIdSetEventFilter;

    'NFTXVaultFactoryUpdated(address)'(newAddress?: PromiseOrValue<string> | null): NFTXVaultFactoryUpdatedEventFilter;
    NFTXVaultFactoryUpdated(newAddress?: PromiseOrValue<string> | null): NFTXVaultFactoryUpdatedEventFilter;

    'NftOracleUpdated(address)'(newAddress?: PromiseOrValue<string> | null): NftOracleUpdatedEventFilter;
    NftOracleUpdated(newAddress?: PromiseOrValue<string> | null): NftOracleUpdatedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'ProxyCreated(bytes32,address)'(id?: null, newAddress?: PromiseOrValue<string> | null): ProxyCreatedEventFilter;
    ProxyCreated(id?: null, newAddress?: PromiseOrValue<string> | null): ProxyCreatedEventFilter;

    'ReserveOracleUpdated(address)'(newAddress?: PromiseOrValue<string> | null): ReserveOracleUpdatedEventFilter;
    ReserveOracleUpdated(newAddress?: PromiseOrValue<string> | null): ReserveOracleUpdatedEventFilter;

    'SushiSwapRouterUpdated(address)'(newAddress?: PromiseOrValue<string> | null): SushiSwapRouterUpdatedEventFilter;
    SushiSwapRouterUpdated(newAddress?: PromiseOrValue<string> | null): SushiSwapRouterUpdatedEventFilter;

    'UIDataProviderUpdated(address)'(newAddress?: PromiseOrValue<string> | null): UIDataProviderUpdatedEventFilter;
    UIDataProviderUpdated(newAddress?: PromiseOrValue<string> | null): UIDataProviderUpdatedEventFilter;

    'UNFTRegistryUpdated(address)'(newAddress?: PromiseOrValue<string> | null): UNFTRegistryUpdatedEventFilter;
    UNFTRegistryUpdated(newAddress?: PromiseOrValue<string> | null): UNFTRegistryUpdatedEventFilter;

    'UnlockdDataProviderUpdated(address)'(
      newAddress?: PromiseOrValue<string> | null,
    ): UnlockdDataProviderUpdatedEventFilter;
    UnlockdDataProviderUpdated(newAddress?: PromiseOrValue<string> | null): UnlockdDataProviderUpdatedEventFilter;

    'WalletBalanceProviderUpdated(address)'(
      newAddress?: PromiseOrValue<string> | null,
    ): WalletBalanceProviderUpdatedEventFilter;
    WalletBalanceProviderUpdated(newAddress?: PromiseOrValue<string> | null): WalletBalanceProviderUpdatedEventFilter;
  };

  estimateGas: {
    getAddress(id: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getEmergencyAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    getImplementation(proxyAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getIncentivesController(overrides?: CallOverrides): Promise<BigNumber>;

    getLSSVMRouter(overrides?: CallOverrides): Promise<BigNumber>;

    getLendPool(overrides?: CallOverrides): Promise<BigNumber>;

    getLendPoolConfigurator(overrides?: CallOverrides): Promise<BigNumber>;

    getLendPoolLiquidator(overrides?: CallOverrides): Promise<BigNumber>;

    getLendPoolLoan(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketId(overrides?: CallOverrides): Promise<BigNumber>;

    getNFTOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getNFTXVaultFactory(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    getReserveOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getSushiSwapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    getUIDataProvider(overrides?: CallOverrides): Promise<BigNumber>;

    getUNFTRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getUnlockdDataProvider(overrides?: CallOverrides): Promise<BigNumber>;

    getWalletBalanceProvider(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setAddress(
      id: PromiseOrValue<BytesLike>,
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setAddressAsProxy(
      id: PromiseOrValue<BytesLike>,
      implementationAddress: PromiseOrValue<string>,
      encodedCallData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setEmergencyAdmin(
      emergencyAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setIncentivesController(
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLSSVMRouter(
      router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLendPoolConfiguratorImpl(
      configurator: PromiseOrValue<string>,
      encodedCallData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLendPoolImpl(
      pool: PromiseOrValue<string>,
      encodedCallData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLendPoolLiquidator(
      liquidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLendPoolLoanImpl(
      loanAddress: PromiseOrValue<string>,
      encodedCallData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMarketId(
      marketId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setNFTOracle(
      nftOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setNFTXVaultFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPoolAdmin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setReserveOracle(
      reserveOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSushiSwapRouter(
      router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setUIDataProvider(
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setUNFTRegistry(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setUnlockdDataProvider(
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setWalletBalanceProvider(
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAddress(id: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEmergencyAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getImplementation(proxyAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIncentivesController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLSSVMRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLendPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLendPoolConfigurator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLendPoolLiquidator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLendPoolLoan(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarketId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNFTOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNFTXVaultFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserveOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSushiSwapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUIDataProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUNFTRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnlockdDataProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWalletBalanceProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setAddress(
      id: PromiseOrValue<BytesLike>,
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setAddressAsProxy(
      id: PromiseOrValue<BytesLike>,
      implementationAddress: PromiseOrValue<string>,
      encodedCallData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setEmergencyAdmin(
      emergencyAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setIncentivesController(
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLSSVMRouter(
      router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLendPoolConfiguratorImpl(
      configurator: PromiseOrValue<string>,
      encodedCallData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLendPoolImpl(
      pool: PromiseOrValue<string>,
      encodedCallData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLendPoolLiquidator(
      liquidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLendPoolLoanImpl(
      loanAddress: PromiseOrValue<string>,
      encodedCallData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMarketId(
      marketId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setNFTOracle(
      nftOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setNFTXVaultFactory(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPoolAdmin(
      admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setReserveOracle(
      reserveOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSushiSwapRouter(
      router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setUIDataProvider(
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setUNFTRegistry(
      factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setUnlockdDataProvider(
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setWalletBalanceProvider(
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
