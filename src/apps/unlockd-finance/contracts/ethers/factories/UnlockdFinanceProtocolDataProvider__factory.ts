/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type {
  UnlockdFinanceProtocolDataProvider,
  UnlockdFinanceProtocolDataProviderInterface,
} from '../UnlockdFinanceProtocolDataProvider';

const _abi = [
  {
    inputs: [
      {
        internalType: 'contract ILendPoolAddressesProvider',
        name: 'addressesProvider',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'ADDRESSES_PROVIDER',
    outputs: [
      {
        internalType: 'contract ILendPoolAddressesProvider',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getAllNftsTokenDatas',
    outputs: [
      {
        components: [
          {
            internalType: 'string',
            name: 'nftSymbol',
            type: 'string',
          },
          {
            internalType: 'address',
            name: 'nftAddress',
            type: 'address',
          },
          {
            internalType: 'string',
            name: 'uNftSymbol',
            type: 'string',
          },
          {
            internalType: 'address',
            name: 'uNftAddress',
            type: 'address',
          },
        ],
        internalType: 'struct UnlockdProtocolDataProvider.NftTokenData[]',
        name: '',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getAllReservesTokenDatas',
    outputs: [
      {
        components: [
          {
            internalType: 'string',
            name: 'tokenSymbol',
            type: 'string',
          },
          {
            internalType: 'address',
            name: 'tokenAddress',
            type: 'address',
          },
          {
            internalType: 'string',
            name: 'uTokenSymbol',
            type: 'string',
          },
          {
            internalType: 'address',
            name: 'uTokenAddress',
            type: 'address',
          },
          {
            internalType: 'string',
            name: 'debtTokenSymbol',
            type: 'string',
          },
          {
            internalType: 'address',
            name: 'debtTokenAddress',
            type: 'address',
          },
        ],
        internalType: 'struct UnlockdProtocolDataProvider.ReserveTokenData[]',
        name: '',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'nftAsset',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'nftTokenId',
        type: 'uint256',
      },
    ],
    name: 'getLoanDataByCollateral',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'loanId',
            type: 'uint256',
          },
          {
            internalType: 'uint8',
            name: 'state',
            type: 'uint8',
          },
          {
            internalType: 'address',
            name: 'borrower',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'nftAsset',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'nftTokenId',
            type: 'uint256',
          },
          {
            internalType: 'address',
            name: 'reserveAsset',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'scaledAmount',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'currentAmount',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'bidStartTimestamp',
            type: 'uint256',
          },
          {
            internalType: 'address',
            name: 'bidderAddress',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'bidPrice',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'bidBorrowAmount',
            type: 'uint256',
          },
        ],
        internalType: 'struct UnlockdProtocolDataProvider.LoanData',
        name: 'loanData',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'loanId',
        type: 'uint256',
      },
    ],
    name: 'getLoanDataByLoanId',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'loanId',
            type: 'uint256',
          },
          {
            internalType: 'uint8',
            name: 'state',
            type: 'uint8',
          },
          {
            internalType: 'address',
            name: 'borrower',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'nftAsset',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'nftTokenId',
            type: 'uint256',
          },
          {
            internalType: 'address',
            name: 'reserveAsset',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'scaledAmount',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'currentAmount',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'bidStartTimestamp',
            type: 'uint256',
          },
          {
            internalType: 'address',
            name: 'bidderAddress',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'bidPrice',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'bidBorrowAmount',
            type: 'uint256',
          },
        ],
        internalType: 'struct UnlockdProtocolDataProvider.LoanData',
        name: 'loanData',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'asset',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'tokenId',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'reserveAsset',
        type: 'address',
      },
    ],
    name: 'getNFTXPrice',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'asset',
        type: 'address',
      },
    ],
    name: 'getNftConfigurationData',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'ltv',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'liquidationThreshold',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'liquidationBonus',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'redeemDuration',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'auctionDuration',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'redeemFine',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'redeemThreshold',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'minBidFine',
            type: 'uint256',
          },
          {
            internalType: 'bool',
            name: 'isActive',
            type: 'bool',
          },
          {
            internalType: 'bool',
            name: 'isFrozen',
            type: 'bool',
          },
          {
            internalType: 'uint256',
            name: 'configTimestamp',
            type: 'uint256',
          },
        ],
        internalType: 'struct UnlockdProtocolDataProvider.NftConfigurationData',
        name: 'configData',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'asset',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'tokenId',
        type: 'uint256',
      },
    ],
    name: 'getNftConfigurationDataByTokenId',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'ltv',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'liquidationThreshold',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'liquidationBonus',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'redeemDuration',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'auctionDuration',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'redeemFine',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'redeemThreshold',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'minBidFine',
            type: 'uint256',
          },
          {
            internalType: 'bool',
            name: 'isActive',
            type: 'bool',
          },
          {
            internalType: 'bool',
            name: 'isFrozen',
            type: 'bool',
          },
          {
            internalType: 'uint256',
            name: 'configTimestamp',
            type: 'uint256',
          },
        ],
        internalType: 'struct UnlockdProtocolDataProvider.NftConfigurationData',
        name: 'configData',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'nftAsset',
        type: 'address',
      },
    ],
    name: 'getNftTokenData',
    outputs: [
      {
        components: [
          {
            internalType: 'string',
            name: 'nftSymbol',
            type: 'string',
          },
          {
            internalType: 'address',
            name: 'nftAddress',
            type: 'address',
          },
          {
            internalType: 'string',
            name: 'uNftSymbol',
            type: 'string',
          },
          {
            internalType: 'address',
            name: 'uNftAddress',
            type: 'address',
          },
        ],
        internalType: 'struct UnlockdProtocolDataProvider.NftTokenData',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'asset',
        type: 'address',
      },
    ],
    name: 'getReserveConfigurationData',
    outputs: [
      {
        internalType: 'uint256',
        name: 'decimals',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'reserveFactor',
        type: 'uint256',
      },
      {
        internalType: 'bool',
        name: 'borrowingEnabled',
        type: 'bool',
      },
      {
        internalType: 'bool',
        name: 'isActive',
        type: 'bool',
      },
      {
        internalType: 'bool',
        name: 'isFrozen',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'asset',
        type: 'address',
      },
    ],
    name: 'getReserveData',
    outputs: [
      {
        internalType: 'uint256',
        name: 'availableLiquidity',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'totalVariableDebt',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'liquidityRate',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'variableBorrowRate',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'liquidityIndex',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'variableBorrowIndex',
        type: 'uint256',
      },
      {
        internalType: 'uint40',
        name: 'lastUpdateTimestamp',
        type: 'uint40',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'asset',
        type: 'address',
      },
    ],
    name: 'getReserveTokenData',
    outputs: [
      {
        components: [
          {
            internalType: 'string',
            name: 'tokenSymbol',
            type: 'string',
          },
          {
            internalType: 'address',
            name: 'tokenAddress',
            type: 'address',
          },
          {
            internalType: 'string',
            name: 'uTokenSymbol',
            type: 'string',
          },
          {
            internalType: 'address',
            name: 'uTokenAddress',
            type: 'address',
          },
          {
            internalType: 'string',
            name: 'debtTokenSymbol',
            type: 'string',
          },
          {
            internalType: 'address',
            name: 'debtTokenAddress',
            type: 'address',
          },
        ],
        internalType: 'struct UnlockdProtocolDataProvider.ReserveTokenData',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'asset',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
    ],
    name: 'getUserReserveData',
    outputs: [
      {
        internalType: 'uint256',
        name: 'currentUTokenBalance',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'currentVariableDebt',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'scaledVariableDebt',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'liquidityRate',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

export class UnlockdFinanceProtocolDataProvider__factory {
  static readonly abi = _abi;
  static createInterface(): UnlockdFinanceProtocolDataProviderInterface {
    return new utils.Interface(_abi) as UnlockdFinanceProtocolDataProviderInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): UnlockdFinanceProtocolDataProvider {
    return new Contract(address, _abi, signerOrProvider) as UnlockdFinanceProtocolDataProvider;
  }
}
