/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace NitroPool {
  export type SettingsStruct = {
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    harvestStartTime: PromiseOrValue<BigNumberish>;
    depositEndTime: PromiseOrValue<BigNumberish>;
    lockDurationReq: PromiseOrValue<BigNumberish>;
    lockEndReq: PromiseOrValue<BigNumberish>;
    depositAmountReq: PromiseOrValue<BigNumberish>;
    whitelist: PromiseOrValue<boolean>;
    description: PromiseOrValue<string>;
  };

  export type SettingsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    string,
  ] & {
    startTime: BigNumber;
    endTime: BigNumber;
    harvestStartTime: BigNumber;
    depositEndTime: BigNumber;
    lockDurationReq: BigNumber;
    lockEndReq: BigNumber;
    depositAmountReq: BigNumber;
    whitelist: boolean;
    description: string;
  };

  export type WhitelistStatusStruct = {
    account: PromiseOrValue<string>;
    status: PromiseOrValue<boolean>;
  };

  export type WhitelistStatusStructOutput = [string, boolean] & {
    account: string;
    status: boolean;
  };
}

export interface CamelotNitroPoolInterface extends utils.Interface {
  functions: {
    'activateEmergencyClose()': FunctionFragment;
    'addRewards(uint256,uint256)': FunctionFragment;
    'creationTime()': FunctionFragment;
    'customReqContract()': FunctionFragment;
    'emergencyClose()': FunctionFragment;
    'emergencyWithdraw(uint256)': FunctionFragment;
    'factory()': FunctionFragment;
    'grailToken()': FunctionFragment;
    'harvest()': FunctionFragment;
    'isWhitelisted(address)': FunctionFragment;
    'lastRewardTime()': FunctionFragment;
    'nftPool()': FunctionFragment;
    'onERC721Received(address,address,uint256,bytes)': FunctionFragment;
    'onNFTAddToPosition(address,uint256,uint256)': FunctionFragment;
    'onNFTHarvest(address,address,uint256,uint256,uint256)': FunctionFragment;
    'onNFTWithdraw(address,uint256,uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingRewards(address)': FunctionFragment;
    'publish()': FunctionFragment;
    'publishTime()': FunctionFragment;
    'published()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'resetWhitelist()': FunctionFragment;
    'rewardsToken1()': FunctionFragment;
    'rewardsToken1PerSecond()': FunctionFragment;
    'rewardsToken2()': FunctionFragment;
    'rewardsToken2PerSecond()': FunctionFragment;
    'setCustomReqContract(address)': FunctionFragment;
    'setDateSettings(uint256,uint256,uint256)': FunctionFragment;
    'setDescription(string)': FunctionFragment;
    'setRequirements(uint256,uint256,uint256,bool)': FunctionFragment;
    'setRewardsToken2(address)': FunctionFragment;
    'setWhitelist((address,bool)[])': FunctionFragment;
    'settings()': FunctionFragment;
    'tokenIdOwner(uint256)': FunctionFragment;
    'totalDepositAmount()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updatePool()': FunctionFragment;
    'userInfo(address)': FunctionFragment;
    'userTokenId(address,uint256)': FunctionFragment;
    'userTokenIdsLength(address)': FunctionFragment;
    'whitelistAddress(uint256)': FunctionFragment;
    'whitelistLength()': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdrawRewards(uint256,uint256)': FunctionFragment;
    'xGrailToken()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'activateEmergencyClose'
      | 'addRewards'
      | 'creationTime'
      | 'customReqContract'
      | 'emergencyClose'
      | 'emergencyWithdraw'
      | 'factory'
      | 'grailToken'
      | 'harvest'
      | 'isWhitelisted'
      | 'lastRewardTime'
      | 'nftPool'
      | 'onERC721Received'
      | 'onNFTAddToPosition'
      | 'onNFTHarvest'
      | 'onNFTWithdraw'
      | 'owner'
      | 'pendingRewards'
      | 'publish'
      | 'publishTime'
      | 'published'
      | 'renounceOwnership'
      | 'resetWhitelist'
      | 'rewardsToken1'
      | 'rewardsToken1PerSecond'
      | 'rewardsToken2'
      | 'rewardsToken2PerSecond'
      | 'setCustomReqContract'
      | 'setDateSettings'
      | 'setDescription'
      | 'setRequirements'
      | 'setRewardsToken2'
      | 'setWhitelist'
      | 'settings'
      | 'tokenIdOwner'
      | 'totalDepositAmount'
      | 'transferOwnership'
      | 'updatePool'
      | 'userInfo'
      | 'userTokenId'
      | 'userTokenIdsLength'
      | 'whitelistAddress'
      | 'whitelistLength'
      | 'withdraw'
      | 'withdrawRewards'
      | 'xGrailToken',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'activateEmergencyClose', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addRewards',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'creationTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'customReqContract', values?: undefined): string;
  encodeFunctionData(functionFragment: 'emergencyClose', values?: undefined): string;
  encodeFunctionData(functionFragment: 'emergencyWithdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string;
  encodeFunctionData(functionFragment: 'grailToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'harvest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isWhitelisted', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lastRewardTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nftPool', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'onERC721Received',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'onNFTAddToPosition',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'onNFTHarvest',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'onNFTWithdraw',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingRewards', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'publish', values?: undefined): string;
  encodeFunctionData(functionFragment: 'publishTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'published', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'resetWhitelist', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardsToken1', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardsToken1PerSecond', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardsToken2', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardsToken2PerSecond', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setCustomReqContract', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setDateSettings',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setDescription', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setRequirements',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'setRewardsToken2', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setWhitelist', values: [NitroPool.WhitelistStatusStruct[]]): string;
  encodeFunctionData(functionFragment: 'settings', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenIdOwner', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'totalDepositAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updatePool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'userInfo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'userTokenId',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'userTokenIdsLength', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'whitelistAddress', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'whitelistLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'withdrawRewards',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'xGrailToken', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'activateEmergencyClose', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'creationTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'customReqContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyClose', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grailToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isWhitelisted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastRewardTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nftPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onERC721Received', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onNFTAddToPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onNFTHarvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onNFTWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'publish', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'publishTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'published', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resetWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsToken1', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsToken1PerSecond', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsToken2', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsToken2PerSecond', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCustomReqContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDateSettings', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDescription', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRequirements', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewardsToken2', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'settings', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenIdOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalDepositAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userTokenId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userTokenIdsLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xGrailToken', data: BytesLike): Result;

  events: {
    'ActivateEmergencyClose()': EventFragment;
    'AddRewardsToken1(uint256,uint256)': EventFragment;
    'AddRewardsToken2(uint256,uint256)': EventFragment;
    'Deposit(address,uint256,uint256)': EventFragment;
    'EmergencyWithdraw(address,uint256,uint256)': EventFragment;
    'Harvest(address,address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Publish()': EventFragment;
    'SetCustomReqContract(address)': EventFragment;
    'SetDateSettings(uint256,uint256,uint256)': EventFragment;
    'SetDescription(string)': EventFragment;
    'SetRequirements(uint256,uint256,uint256,bool)': EventFragment;
    'SetRewardsToken2(address)': EventFragment;
    'UpdatePool()': EventFragment;
    'WhitelistUpdated()': EventFragment;
    'Withdraw(address,uint256,uint256)': EventFragment;
    'WithdrawRewardsToken1(uint256,uint256)': EventFragment;
    'WithdrawRewardsToken2(uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ActivateEmergencyClose'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AddRewardsToken1'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AddRewardsToken2'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Harvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Publish'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetCustomReqContract'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetDateSettings'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetDescription'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetRequirements'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetRewardsToken2'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatePool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WhitelistUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawRewardsToken1'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawRewardsToken2'): EventFragment;
}

export interface ActivateEmergencyCloseEventObject {}
export type ActivateEmergencyCloseEvent = TypedEvent<[], ActivateEmergencyCloseEventObject>;

export type ActivateEmergencyCloseEventFilter = TypedEventFilter<ActivateEmergencyCloseEvent>;

export interface AddRewardsToken1EventObject {
  amount: BigNumber;
  feeAmount: BigNumber;
}
export type AddRewardsToken1Event = TypedEvent<[BigNumber, BigNumber], AddRewardsToken1EventObject>;

export type AddRewardsToken1EventFilter = TypedEventFilter<AddRewardsToken1Event>;

export interface AddRewardsToken2EventObject {
  amount: BigNumber;
  feeAmount: BigNumber;
}
export type AddRewardsToken2Event = TypedEvent<[BigNumber, BigNumber], AddRewardsToken2EventObject>;

export type AddRewardsToken2EventFilter = TypedEventFilter<AddRewardsToken2Event>;

export interface DepositEventObject {
  userAddress: string;
  tokenId: BigNumber;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EmergencyWithdrawEventObject {
  userAddress: string;
  tokenId: BigNumber;
  amount: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], EmergencyWithdrawEventObject>;

export type EmergencyWithdrawEventFilter = TypedEventFilter<EmergencyWithdrawEvent>;

export interface HarvestEventObject {
  userAddress: string;
  rewardsToken: string;
  pending: BigNumber;
}
export type HarvestEvent = TypedEvent<[string, string, BigNumber], HarvestEventObject>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PublishEventObject {}
export type PublishEvent = TypedEvent<[], PublishEventObject>;

export type PublishEventFilter = TypedEventFilter<PublishEvent>;

export interface SetCustomReqContractEventObject {
  contractAddress: string;
}
export type SetCustomReqContractEvent = TypedEvent<[string], SetCustomReqContractEventObject>;

export type SetCustomReqContractEventFilter = TypedEventFilter<SetCustomReqContractEvent>;

export interface SetDateSettingsEventObject {
  endTime: BigNumber;
  harvestStartTime: BigNumber;
  depositEndTime: BigNumber;
}
export type SetDateSettingsEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], SetDateSettingsEventObject>;

export type SetDateSettingsEventFilter = TypedEventFilter<SetDateSettingsEvent>;

export interface SetDescriptionEventObject {
  description: string;
}
export type SetDescriptionEvent = TypedEvent<[string], SetDescriptionEventObject>;

export type SetDescriptionEventFilter = TypedEventFilter<SetDescriptionEvent>;

export interface SetRequirementsEventObject {
  lockDurationReq: BigNumber;
  lockEndReq: BigNumber;
  depositAmountReq: BigNumber;
  whitelist: boolean;
}
export type SetRequirementsEvent = TypedEvent<[BigNumber, BigNumber, BigNumber, boolean], SetRequirementsEventObject>;

export type SetRequirementsEventFilter = TypedEventFilter<SetRequirementsEvent>;

export interface SetRewardsToken2EventObject {
  rewardsToken2: string;
}
export type SetRewardsToken2Event = TypedEvent<[string], SetRewardsToken2EventObject>;

export type SetRewardsToken2EventFilter = TypedEventFilter<SetRewardsToken2Event>;

export interface UpdatePoolEventObject {}
export type UpdatePoolEvent = TypedEvent<[], UpdatePoolEventObject>;

export type UpdatePoolEventFilter = TypedEventFilter<UpdatePoolEvent>;

export interface WhitelistUpdatedEventObject {}
export type WhitelistUpdatedEvent = TypedEvent<[], WhitelistUpdatedEventObject>;

export type WhitelistUpdatedEventFilter = TypedEventFilter<WhitelistUpdatedEvent>;

export interface WithdrawEventObject {
  userAddress: string;
  tokenId: BigNumber;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawRewardsToken1EventObject {
  amount: BigNumber;
  totalRewardsAmount: BigNumber;
}
export type WithdrawRewardsToken1Event = TypedEvent<[BigNumber, BigNumber], WithdrawRewardsToken1EventObject>;

export type WithdrawRewardsToken1EventFilter = TypedEventFilter<WithdrawRewardsToken1Event>;

export interface WithdrawRewardsToken2EventObject {
  amount: BigNumber;
  totalRewardsAmount: BigNumber;
}
export type WithdrawRewardsToken2Event = TypedEvent<[BigNumber, BigNumber], WithdrawRewardsToken2EventObject>;

export type WithdrawRewardsToken2EventFilter = TypedEventFilter<WithdrawRewardsToken2Event>;

export interface CamelotNitroPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CamelotNitroPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activateEmergencyClose(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    addRewards(
      amountToken1: PromiseOrValue<BigNumberish>,
      amountToken2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    creationTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    customReqContract(overrides?: CallOverrides): Promise<[string]>;

    emergencyClose(overrides?: CallOverrides): Promise<[boolean]>;

    emergencyWithdraw(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    grailToken(overrides?: CallOverrides): Promise<[string]>;

    harvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    isWhitelisted(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    lastRewardTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftPool(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    onNFTAddToPosition(
      operator: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    onNFTHarvest(
      operator: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      grailAmount: PromiseOrValue<BigNumberish>,
      xGrailAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    onNFTWithdraw(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingRewards(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { pending1: BigNumber; pending2: BigNumber }>;

    publish(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    publishTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    published(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    resetWhitelist(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    rewardsToken1(overrides?: CallOverrides): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        token: string;
        amount: BigNumber;
        remainingAmount: BigNumber;
        accRewardsPerShare: BigNumber;
      }
    >;

    rewardsToken1PerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsToken2(overrides?: CallOverrides): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        token: string;
        amount: BigNumber;
        remainingAmount: BigNumber;
        accRewardsPerShare: BigNumber;
      }
    >;

    rewardsToken2PerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCustomReqContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDateSettings(
      endTime_: PromiseOrValue<BigNumberish>,
      harvestStartTime_: PromiseOrValue<BigNumberish>,
      depositEndTime_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDescription(
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRequirements(
      lockDurationReq_: PromiseOrValue<BigNumberish>,
      lockEndReq_: PromiseOrValue<BigNumberish>,
      depositAmountReq_: PromiseOrValue<BigNumberish>,
      whitelist_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRewardsToken2(
      rewardsToken2_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setWhitelist(
      whitelistStatuses: NitroPool.WhitelistStatusStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    settings(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
        startTime: BigNumber;
        endTime: BigNumber;
        harvestStartTime: BigNumber;
        depositEndTime: BigNumber;
        lockDurationReq: BigNumber;
        lockEndReq: BigNumber;
        depositAmountReq: BigNumber;
        whitelist: boolean;
        description: string;
      }
    >;

    tokenIdOwner(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    totalDepositAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updatePool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalDepositAmount: BigNumber;
        rewardDebtToken1: BigNumber;
        rewardDebtToken2: BigNumber;
        pendingRewardsToken1: BigNumber;
        pendingRewardsToken2: BigNumber;
      }
    >;

    userTokenId(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    userTokenIdsLength(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelistAddress(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    whitelistLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawRewards(
      amountToken1: PromiseOrValue<BigNumberish>,
      amountToken2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    xGrailToken(overrides?: CallOverrides): Promise<[string]>;
  };

  activateEmergencyClose(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  addRewards(
    amountToken1: PromiseOrValue<BigNumberish>,
    amountToken2: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  creationTime(overrides?: CallOverrides): Promise<BigNumber>;

  customReqContract(overrides?: CallOverrides): Promise<string>;

  emergencyClose(overrides?: CallOverrides): Promise<boolean>;

  emergencyWithdraw(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  grailToken(overrides?: CallOverrides): Promise<string>;

  harvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  isWhitelisted(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  lastRewardTime(overrides?: CallOverrides): Promise<BigNumber>;

  nftPool(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  onNFTAddToPosition(
    operator: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  onNFTHarvest(
    operator: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    grailAmount: PromiseOrValue<BigNumberish>,
    xGrailAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  onNFTWithdraw(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingRewards(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { pending1: BigNumber; pending2: BigNumber }>;

  publish(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  publishTime(overrides?: CallOverrides): Promise<BigNumber>;

  published(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  resetWhitelist(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  rewardsToken1(overrides?: CallOverrides): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      token: string;
      amount: BigNumber;
      remainingAmount: BigNumber;
      accRewardsPerShare: BigNumber;
    }
  >;

  rewardsToken1PerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  rewardsToken2(overrides?: CallOverrides): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      token: string;
      amount: BigNumber;
      remainingAmount: BigNumber;
      accRewardsPerShare: BigNumber;
    }
  >;

  rewardsToken2PerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  setCustomReqContract(
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDateSettings(
    endTime_: PromiseOrValue<BigNumberish>,
    harvestStartTime_: PromiseOrValue<BigNumberish>,
    depositEndTime_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDescription(
    description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRequirements(
    lockDurationReq_: PromiseOrValue<BigNumberish>,
    lockEndReq_: PromiseOrValue<BigNumberish>,
    depositAmountReq_: PromiseOrValue<BigNumberish>,
    whitelist_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRewardsToken2(
    rewardsToken2_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setWhitelist(
    whitelistStatuses: NitroPool.WhitelistStatusStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  settings(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
      startTime: BigNumber;
      endTime: BigNumber;
      harvestStartTime: BigNumber;
      depositEndTime: BigNumber;
      lockDurationReq: BigNumber;
      lockEndReq: BigNumber;
      depositAmountReq: BigNumber;
      whitelist: boolean;
      description: string;
    }
  >;

  tokenIdOwner(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  totalDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updatePool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  userInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalDepositAmount: BigNumber;
      rewardDebtToken1: BigNumber;
      rewardDebtToken2: BigNumber;
      pendingRewardsToken1: BigNumber;
      pendingRewardsToken2: BigNumber;
    }
  >;

  userTokenId(
    account: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  userTokenIdsLength(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  whitelistAddress(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  whitelistLength(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawRewards(
    amountToken1: PromiseOrValue<BigNumberish>,
    amountToken2: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  xGrailToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    activateEmergencyClose(overrides?: CallOverrides): Promise<void>;

    addRewards(
      amountToken1: PromiseOrValue<BigNumberish>,
      amountToken2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    creationTime(overrides?: CallOverrides): Promise<BigNumber>;

    customReqContract(overrides?: CallOverrides): Promise<string>;

    emergencyClose(overrides?: CallOverrides): Promise<boolean>;

    emergencyWithdraw(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    grailToken(overrides?: CallOverrides): Promise<string>;

    harvest(overrides?: CallOverrides): Promise<void>;

    isWhitelisted(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    lastRewardTime(overrides?: CallOverrides): Promise<BigNumber>;

    nftPool(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>;

    onNFTAddToPosition(
      operator: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    onNFTHarvest(
      operator: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      grailAmount: PromiseOrValue<BigNumberish>,
      xGrailAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    onNFTWithdraw(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingRewards(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { pending1: BigNumber; pending2: BigNumber }>;

    publish(overrides?: CallOverrides): Promise<void>;

    publishTime(overrides?: CallOverrides): Promise<BigNumber>;

    published(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resetWhitelist(overrides?: CallOverrides): Promise<void>;

    rewardsToken1(overrides?: CallOverrides): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        token: string;
        amount: BigNumber;
        remainingAmount: BigNumber;
        accRewardsPerShare: BigNumber;
      }
    >;

    rewardsToken1PerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsToken2(overrides?: CallOverrides): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        token: string;
        amount: BigNumber;
        remainingAmount: BigNumber;
        accRewardsPerShare: BigNumber;
      }
    >;

    rewardsToken2PerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    setCustomReqContract(contractAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setDateSettings(
      endTime_: PromiseOrValue<BigNumberish>,
      harvestStartTime_: PromiseOrValue<BigNumberish>,
      depositEndTime_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDescription(description: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setRequirements(
      lockDurationReq_: PromiseOrValue<BigNumberish>,
      lockEndReq_: PromiseOrValue<BigNumberish>,
      depositAmountReq_: PromiseOrValue<BigNumberish>,
      whitelist_: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setRewardsToken2(rewardsToken2_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setWhitelist(whitelistStatuses: NitroPool.WhitelistStatusStruct[], overrides?: CallOverrides): Promise<void>;

    settings(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, string] & {
        startTime: BigNumber;
        endTime: BigNumber;
        harvestStartTime: BigNumber;
        depositEndTime: BigNumber;
        lockDurationReq: BigNumber;
        lockEndReq: BigNumber;
        depositAmountReq: BigNumber;
        whitelist: boolean;
        description: string;
      }
    >;

    tokenIdOwner(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    totalDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updatePool(overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalDepositAmount: BigNumber;
        rewardDebtToken1: BigNumber;
        rewardDebtToken2: BigNumber;
        pendingRewardsToken1: BigNumber;
        pendingRewardsToken2: BigNumber;
      }
    >;

    userTokenId(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    userTokenIdsLength(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    whitelistAddress(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    whitelistLength(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    withdrawRewards(
      amountToken1: PromiseOrValue<BigNumberish>,
      amountToken2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    xGrailToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'ActivateEmergencyClose()'(): ActivateEmergencyCloseEventFilter;
    ActivateEmergencyClose(): ActivateEmergencyCloseEventFilter;

    'AddRewardsToken1(uint256,uint256)'(amount?: null, feeAmount?: null): AddRewardsToken1EventFilter;
    AddRewardsToken1(amount?: null, feeAmount?: null): AddRewardsToken1EventFilter;

    'AddRewardsToken2(uint256,uint256)'(amount?: null, feeAmount?: null): AddRewardsToken2EventFilter;
    AddRewardsToken2(amount?: null, feeAmount?: null): AddRewardsToken2EventFilter;

    'Deposit(address,uint256,uint256)'(
      userAddress?: PromiseOrValue<string> | null,
      tokenId?: null,
      amount?: null,
    ): DepositEventFilter;
    Deposit(userAddress?: PromiseOrValue<string> | null, tokenId?: null, amount?: null): DepositEventFilter;

    'EmergencyWithdraw(address,uint256,uint256)'(
      userAddress?: PromiseOrValue<string> | null,
      tokenId?: null,
      amount?: null,
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(
      userAddress?: PromiseOrValue<string> | null,
      tokenId?: null,
      amount?: null,
    ): EmergencyWithdrawEventFilter;

    'Harvest(address,address,uint256)'(
      userAddress?: PromiseOrValue<string> | null,
      rewardsToken?: null,
      pending?: null,
    ): HarvestEventFilter;
    Harvest(userAddress?: PromiseOrValue<string> | null, rewardsToken?: null, pending?: null): HarvestEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'Publish()'(): PublishEventFilter;
    Publish(): PublishEventFilter;

    'SetCustomReqContract(address)'(contractAddress?: null): SetCustomReqContractEventFilter;
    SetCustomReqContract(contractAddress?: null): SetCustomReqContractEventFilter;

    'SetDateSettings(uint256,uint256,uint256)'(
      endTime?: null,
      harvestStartTime?: null,
      depositEndTime?: null,
    ): SetDateSettingsEventFilter;
    SetDateSettings(endTime?: null, harvestStartTime?: null, depositEndTime?: null): SetDateSettingsEventFilter;

    'SetDescription(string)'(description?: null): SetDescriptionEventFilter;
    SetDescription(description?: null): SetDescriptionEventFilter;

    'SetRequirements(uint256,uint256,uint256,bool)'(
      lockDurationReq?: null,
      lockEndReq?: null,
      depositAmountReq?: null,
      whitelist?: null,
    ): SetRequirementsEventFilter;
    SetRequirements(
      lockDurationReq?: null,
      lockEndReq?: null,
      depositAmountReq?: null,
      whitelist?: null,
    ): SetRequirementsEventFilter;

    'SetRewardsToken2(address)'(rewardsToken2?: null): SetRewardsToken2EventFilter;
    SetRewardsToken2(rewardsToken2?: null): SetRewardsToken2EventFilter;

    'UpdatePool()'(): UpdatePoolEventFilter;
    UpdatePool(): UpdatePoolEventFilter;

    'WhitelistUpdated()'(): WhitelistUpdatedEventFilter;
    WhitelistUpdated(): WhitelistUpdatedEventFilter;

    'Withdraw(address,uint256,uint256)'(
      userAddress?: PromiseOrValue<string> | null,
      tokenId?: null,
      amount?: null,
    ): WithdrawEventFilter;
    Withdraw(userAddress?: PromiseOrValue<string> | null, tokenId?: null, amount?: null): WithdrawEventFilter;

    'WithdrawRewardsToken1(uint256,uint256)'(
      amount?: null,
      totalRewardsAmount?: null,
    ): WithdrawRewardsToken1EventFilter;
    WithdrawRewardsToken1(amount?: null, totalRewardsAmount?: null): WithdrawRewardsToken1EventFilter;

    'WithdrawRewardsToken2(uint256,uint256)'(
      amount?: null,
      totalRewardsAmount?: null,
    ): WithdrawRewardsToken2EventFilter;
    WithdrawRewardsToken2(amount?: null, totalRewardsAmount?: null): WithdrawRewardsToken2EventFilter;
  };

  estimateGas: {
    activateEmergencyClose(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    addRewards(
      amountToken1: PromiseOrValue<BigNumberish>,
      amountToken2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    creationTime(overrides?: CallOverrides): Promise<BigNumber>;

    customReqContract(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyClose(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    grailToken(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    isWhitelisted(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lastRewardTime(overrides?: CallOverrides): Promise<BigNumber>;

    nftPool(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    onNFTAddToPosition(
      operator: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    onNFTHarvest(
      operator: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      grailAmount: PromiseOrValue<BigNumberish>,
      xGrailAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    onNFTWithdraw(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    publish(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    publishTime(overrides?: CallOverrides): Promise<BigNumber>;

    published(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    resetWhitelist(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    rewardsToken1(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsToken1PerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsToken2(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsToken2PerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    setCustomReqContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDateSettings(
      endTime_: PromiseOrValue<BigNumberish>,
      harvestStartTime_: PromiseOrValue<BigNumberish>,
      depositEndTime_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDescription(
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRequirements(
      lockDurationReq_: PromiseOrValue<BigNumberish>,
      lockEndReq_: PromiseOrValue<BigNumberish>,
      depositAmountReq_: PromiseOrValue<BigNumberish>,
      whitelist_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRewardsToken2(
      rewardsToken2_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setWhitelist(
      whitelistStatuses: NitroPool.WhitelistStatusStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    settings(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIdOwner(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    totalDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updatePool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    userInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userTokenId(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    userTokenIdsLength(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    whitelistAddress(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    whitelistLength(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawRewards(
      amountToken1: PromiseOrValue<BigNumberish>,
      amountToken2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    xGrailToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activateEmergencyClose(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    addRewards(
      amountToken1: PromiseOrValue<BigNumberish>,
      amountToken2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    creationTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    customReqContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyClose(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grailToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    isWhitelisted(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRewardTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    onNFTAddToPosition(
      operator: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    onNFTHarvest(
      operator: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      grailAmount: PromiseOrValue<BigNumberish>,
      xGrailAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    onNFTWithdraw(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRewards(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publish(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    publishTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    published(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    resetWhitelist(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    rewardsToken1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsToken1PerSecond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsToken2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsToken2PerSecond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCustomReqContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDateSettings(
      endTime_: PromiseOrValue<BigNumberish>,
      harvestStartTime_: PromiseOrValue<BigNumberish>,
      depositEndTime_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDescription(
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRequirements(
      lockDurationReq_: PromiseOrValue<BigNumberish>,
      lockEndReq_: PromiseOrValue<BigNumberish>,
      depositAmountReq_: PromiseOrValue<BigNumberish>,
      whitelist_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRewardsToken2(
      rewardsToken2_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setWhitelist(
      whitelistStatuses: NitroPool.WhitelistStatusStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    settings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenIdOwner(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDepositAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updatePool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    userInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userTokenId(
      account: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    userTokenIdsLength(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistAddress(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawRewards(
      amountToken1: PromiseOrValue<BigNumberish>,
      amountToken2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    xGrailToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
