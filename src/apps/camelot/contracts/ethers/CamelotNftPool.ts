/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface CamelotNftPoolInterface extends utils.Interface {
  functions: {
    'MAX_BOOST_MULTIPLIER_LIMIT()': FunctionFragment;
    'MAX_GLOBAL_MULTIPLIER_LIMIT()': FunctionFragment;
    'MAX_LOCK_MULTIPLIER_LIMIT()': FunctionFragment;
    'addToPosition(uint256,uint256)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'baseURI()': FunctionFragment;
    'boost(uint256,uint256)': FunctionFragment;
    'createPosition(uint256,uint256)': FunctionFragment;
    'emergencyUnlock()': FunctionFragment;
    'emergencyWithdraw(uint256)': FunctionFragment;
    'exists(uint256)': FunctionFragment;
    'factory()': FunctionFragment;
    'getApproved(uint256)': FunctionFragment;
    'getMultiplierByBoostPoints(uint256,uint256)': FunctionFragment;
    'getMultiplierByLockDuration(uint256)': FunctionFragment;
    'getMultiplierSettings()': FunctionFragment;
    'getPoolInfo()': FunctionFragment;
    'getStakingPosition(uint256)': FunctionFragment;
    'harvestPosition(uint256)': FunctionFragment;
    'harvestPositionTo(uint256,address)': FunctionFragment;
    'harvestPositionsTo(uint256[],address)': FunctionFragment;
    'hasDeposits()': FunctionFragment;
    'initialize(address,address,address,address)': FunctionFragment;
    'initialized()': FunctionFragment;
    'isApprovedForAll(address,address)': FunctionFragment;
    'isUnlockOperator(address)': FunctionFragment;
    'isUnlocked()': FunctionFragment;
    'lastTokenId()': FunctionFragment;
    'lockPosition(uint256,uint256)': FunctionFragment;
    'master()': FunctionFragment;
    'mergePositions(uint256[],uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'operator()': FunctionFragment;
    'owner()': FunctionFragment;
    'ownerOf(uint256)': FunctionFragment;
    'pendingRewards(uint256)': FunctionFragment;
    'renewLockPosition(uint256)': FunctionFragment;
    'safeTransferFrom(address,address,uint256)': FunctionFragment;
    'safeTransferFrom(address,address,uint256,bytes)': FunctionFragment;
    'setApprovalForAll(address,bool)': FunctionFragment;
    'setBoostMultiplierSettings(uint256,uint256)': FunctionFragment;
    'setEmergencyUnlock(bool)': FunctionFragment;
    'setLockMultiplierSettings(uint256,uint256)': FunctionFragment;
    'setOperator(address)': FunctionFragment;
    'setUnlockOperator(address,bool)': FunctionFragment;
    'setXGrailRewardsShare(uint256)': FunctionFragment;
    'splitPosition(uint256,uint256)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'symbol()': FunctionFragment;
    'tokenByIndex(uint256)': FunctionFragment;
    'tokenOfOwnerByIndex(address,uint256)': FunctionFragment;
    'tokenURI(uint256)': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'unboost(uint256,uint256)': FunctionFragment;
    'unlockOperator(uint256)': FunctionFragment;
    'unlockOperatorsLength()': FunctionFragment;
    'updatePool()': FunctionFragment;
    'withdrawFromPosition(uint256,uint256)': FunctionFragment;
    'xGrailRewardsShare()': FunctionFragment;
    'yieldBooster()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'MAX_BOOST_MULTIPLIER_LIMIT'
      | 'MAX_GLOBAL_MULTIPLIER_LIMIT'
      | 'MAX_LOCK_MULTIPLIER_LIMIT'
      | 'addToPosition'
      | 'approve'
      | 'balanceOf'
      | 'baseURI'
      | 'boost'
      | 'createPosition'
      | 'emergencyUnlock'
      | 'emergencyWithdraw'
      | 'exists'
      | 'factory'
      | 'getApproved'
      | 'getMultiplierByBoostPoints'
      | 'getMultiplierByLockDuration'
      | 'getMultiplierSettings'
      | 'getPoolInfo'
      | 'getStakingPosition'
      | 'harvestPosition'
      | 'harvestPositionTo'
      | 'harvestPositionsTo'
      | 'hasDeposits'
      | 'initialize'
      | 'initialized'
      | 'isApprovedForAll'
      | 'isUnlockOperator'
      | 'isUnlocked'
      | 'lastTokenId'
      | 'lockPosition'
      | 'master'
      | 'mergePositions'
      | 'name'
      | 'operator'
      | 'owner'
      | 'ownerOf'
      | 'pendingRewards'
      | 'renewLockPosition'
      | 'safeTransferFrom(address,address,uint256)'
      | 'safeTransferFrom(address,address,uint256,bytes)'
      | 'setApprovalForAll'
      | 'setBoostMultiplierSettings'
      | 'setEmergencyUnlock'
      | 'setLockMultiplierSettings'
      | 'setOperator'
      | 'setUnlockOperator'
      | 'setXGrailRewardsShare'
      | 'splitPosition'
      | 'supportsInterface'
      | 'symbol'
      | 'tokenByIndex'
      | 'tokenOfOwnerByIndex'
      | 'tokenURI'
      | 'totalSupply'
      | 'transferFrom'
      | 'unboost'
      | 'unlockOperator'
      | 'unlockOperatorsLength'
      | 'updatePool'
      | 'withdrawFromPosition'
      | 'xGrailRewardsShare'
      | 'yieldBooster',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'MAX_BOOST_MULTIPLIER_LIMIT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_GLOBAL_MULTIPLIER_LIMIT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_LOCK_MULTIPLIER_LIMIT', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addToPosition',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'baseURI', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'boost',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'createPosition',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'emergencyUnlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'emergencyWithdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'exists', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getApproved', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getMultiplierByBoostPoints',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getMultiplierByLockDuration', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getMultiplierSettings', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPoolInfo', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getStakingPosition', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'harvestPosition', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'harvestPositionTo',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'harvestPositionsTo',
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'hasDeposits', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'initialized', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'isUnlockOperator', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isUnlocked', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastTokenId', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'lockPosition',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'master', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'mergePositions',
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'operator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ownerOf', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'pendingRewards', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'renewLockPosition', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setBoostMultiplierSettings',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setEmergencyUnlock', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(
    functionFragment: 'setLockMultiplierSettings',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setOperator', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setUnlockOperator',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setXGrailRewardsShare', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'splitPosition',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenByIndex', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'tokenOfOwnerByIndex',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'tokenURI', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'unboost',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'unlockOperator', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'unlockOperatorsLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updatePool', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdrawFromPosition',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'xGrailRewardsShare', values?: undefined): string;
  encodeFunctionData(functionFragment: 'yieldBooster', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'MAX_BOOST_MULTIPLIER_LIMIT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_GLOBAL_MULTIPLIER_LIMIT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_LOCK_MULTIPLIER_LIMIT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addToPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'baseURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'boost', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyUnlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exists', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMultiplierByBoostPoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMultiplierByLockDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMultiplierSettings', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStakingPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvestPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvestPositionTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvestPositionsTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasDeposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialized', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isUnlockOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isUnlocked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastTokenId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'master', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mergePositions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'operator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renewLockPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBoostMultiplierSettings', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEmergencyUnlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLockMultiplierSettings', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUnlockOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setXGrailRewardsShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'splitPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenByIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenOfOwnerByIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unboost', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unlockOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unlockOperatorsLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawFromPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xGrailRewardsShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'yieldBooster', data: BytesLike): Result;

  events: {
    'AddToPosition(uint256,address,uint256)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'ApprovalForAll(address,address,bool)': EventFragment;
    'CreatePosition(uint256,uint256,uint256)': EventFragment;
    'EmergencyWithdraw(uint256,uint256)': EventFragment;
    'HarvestPosition(uint256,address,uint256)': EventFragment;
    'LockPosition(uint256,uint256)': EventFragment;
    'MergePositions(address,uint256[])': EventFragment;
    'PoolUpdated(uint256,uint256)': EventFragment;
    'SetBoost(uint256,uint256)': EventFragment;
    'SetBoostMultiplierSettings(uint256,uint256)': EventFragment;
    'SetEmergencyUnlock(bool)': EventFragment;
    'SetLockMultiplierSettings(uint256,uint256)': EventFragment;
    'SetOperator(address)': EventFragment;
    'SetUnlockOperator(address,bool)': EventFragment;
    'SetXGrailRewardsShare(uint256)': EventFragment;
    'SplitPosition(uint256,uint256,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'WithdrawFromPosition(uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddToPosition'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreatePosition'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'HarvestPosition'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LockPosition'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MergePositions'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetBoost'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetBoostMultiplierSettings'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetEmergencyUnlock'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetLockMultiplierSettings'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetOperator'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetUnlockOperator'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetXGrailRewardsShare'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SplitPosition'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawFromPosition'): EventFragment;
}

export interface AddToPositionEventObject {
  tokenId: BigNumber;
  user: string;
  amount: BigNumber;
}
export type AddToPositionEvent = TypedEvent<[BigNumber, string, BigNumber], AddToPositionEventObject>;

export type AddToPositionEventFilter = TypedEventFilter<AddToPositionEvent>;

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<[string, string, boolean], ApprovalForAllEventObject>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface CreatePositionEventObject {
  tokenId: BigNumber;
  amount: BigNumber;
  lockDuration: BigNumber;
}
export type CreatePositionEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], CreatePositionEventObject>;

export type CreatePositionEventFilter = TypedEventFilter<CreatePositionEvent>;

export interface EmergencyWithdrawEventObject {
  tokenId: BigNumber;
  amount: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<[BigNumber, BigNumber], EmergencyWithdrawEventObject>;

export type EmergencyWithdrawEventFilter = TypedEventFilter<EmergencyWithdrawEvent>;

export interface HarvestPositionEventObject {
  tokenId: BigNumber;
  to: string;
  pending: BigNumber;
}
export type HarvestPositionEvent = TypedEvent<[BigNumber, string, BigNumber], HarvestPositionEventObject>;

export type HarvestPositionEventFilter = TypedEventFilter<HarvestPositionEvent>;

export interface LockPositionEventObject {
  tokenId: BigNumber;
  lockDuration: BigNumber;
}
export type LockPositionEvent = TypedEvent<[BigNumber, BigNumber], LockPositionEventObject>;

export type LockPositionEventFilter = TypedEventFilter<LockPositionEvent>;

export interface MergePositionsEventObject {
  user: string;
  tokenIds: BigNumber[];
}
export type MergePositionsEvent = TypedEvent<[string, BigNumber[]], MergePositionsEventObject>;

export type MergePositionsEventFilter = TypedEventFilter<MergePositionsEvent>;

export interface PoolUpdatedEventObject {
  lastRewardTime: BigNumber;
  accRewardsPerShare: BigNumber;
}
export type PoolUpdatedEvent = TypedEvent<[BigNumber, BigNumber], PoolUpdatedEventObject>;

export type PoolUpdatedEventFilter = TypedEventFilter<PoolUpdatedEvent>;

export interface SetBoostEventObject {
  tokenId: BigNumber;
  boostPoints: BigNumber;
}
export type SetBoostEvent = TypedEvent<[BigNumber, BigNumber], SetBoostEventObject>;

export type SetBoostEventFilter = TypedEventFilter<SetBoostEvent>;

export interface SetBoostMultiplierSettingsEventObject {
  maxGlobalMultiplier: BigNumber;
  maxBoostMultiplier: BigNumber;
}
export type SetBoostMultiplierSettingsEvent = TypedEvent<[BigNumber, BigNumber], SetBoostMultiplierSettingsEventObject>;

export type SetBoostMultiplierSettingsEventFilter = TypedEventFilter<SetBoostMultiplierSettingsEvent>;

export interface SetEmergencyUnlockEventObject {
  emergencyUnlock: boolean;
}
export type SetEmergencyUnlockEvent = TypedEvent<[boolean], SetEmergencyUnlockEventObject>;

export type SetEmergencyUnlockEventFilter = TypedEventFilter<SetEmergencyUnlockEvent>;

export interface SetLockMultiplierSettingsEventObject {
  maxLockDuration: BigNumber;
  maxLockMultiplier: BigNumber;
}
export type SetLockMultiplierSettingsEvent = TypedEvent<[BigNumber, BigNumber], SetLockMultiplierSettingsEventObject>;

export type SetLockMultiplierSettingsEventFilter = TypedEventFilter<SetLockMultiplierSettingsEvent>;

export interface SetOperatorEventObject {
  operator: string;
}
export type SetOperatorEvent = TypedEvent<[string], SetOperatorEventObject>;

export type SetOperatorEventFilter = TypedEventFilter<SetOperatorEvent>;

export interface SetUnlockOperatorEventObject {
  operator: string;
  isAdded: boolean;
}
export type SetUnlockOperatorEvent = TypedEvent<[string, boolean], SetUnlockOperatorEventObject>;

export type SetUnlockOperatorEventFilter = TypedEventFilter<SetUnlockOperatorEvent>;

export interface SetXGrailRewardsShareEventObject {
  xGrailRewardsShare: BigNumber;
}
export type SetXGrailRewardsShareEvent = TypedEvent<[BigNumber], SetXGrailRewardsShareEventObject>;

export type SetXGrailRewardsShareEventFilter = TypedEventFilter<SetXGrailRewardsShareEvent>;

export interface SplitPositionEventObject {
  tokenId: BigNumber;
  splitAmount: BigNumber;
  newTokenId: BigNumber;
}
export type SplitPositionEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], SplitPositionEventObject>;

export type SplitPositionEventFilter = TypedEventFilter<SplitPositionEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawFromPositionEventObject {
  tokenId: BigNumber;
  amount: BigNumber;
}
export type WithdrawFromPositionEvent = TypedEvent<[BigNumber, BigNumber], WithdrawFromPositionEventObject>;

export type WithdrawFromPositionEventFilter = TypedEventFilter<WithdrawFromPositionEvent>;

export interface CamelotNftPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CamelotNftPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_BOOST_MULTIPLIER_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_GLOBAL_MULTIPLIER_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_LOCK_MULTIPLIER_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    addToPosition(
      tokenId: PromiseOrValue<BigNumberish>,
      amountToAdd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    boost(
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createPosition(
      amount: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    emergencyUnlock(overrides?: CallOverrides): Promise<[boolean]>;

    emergencyWithdraw(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    exists(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    getMultiplierByBoostPoints(
      amount: PromiseOrValue<BigNumberish>,
      boostPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getMultiplierByLockDuration(
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getMultiplierSettings(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        maxGlobalMultiplier: BigNumber;
        maxLockDuration: BigNumber;
        maxLockMultiplier: BigNumber;
        maxBoostMultiplier: BigNumber;
      }
    >;

    getPoolInfo(overrides?: CallOverrides): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        grailToken: string;
        xGrailToken: string;
        lastRewardTime: BigNumber;
        accRewardsPerShare: BigNumber;
        lpSupply: BigNumber;
        lpSupplyWithMultiplier: BigNumber;
        allocPoint: BigNumber;
      }
    >;

    getStakingPosition(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        amountWithMultiplier: BigNumber;
        startLockTime: BigNumber;
        lockDuration: BigNumber;
        lockMultiplier: BigNumber;
        rewardDebt: BigNumber;
        boostPoints: BigNumber;
        totalMultiplier: BigNumber;
      }
    >;

    harvestPosition(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    harvestPositionTo(
      tokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    harvestPositionsTo(
      tokenIds: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    hasDeposits(overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      master_: PromiseOrValue<string>,
      grailToken: PromiseOrValue<string>,
      xGrailToken: PromiseOrValue<string>,
      lpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isUnlockOperator(_operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isUnlocked(overrides?: CallOverrides): Promise<[boolean]>;

    lastTokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockPosition(
      tokenId: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    master(overrides?: CallOverrides): Promise<[string]>;

    mergePositions(
      tokenIds: PromiseOrValue<BigNumberish>[],
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    pendingRewards(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    renewLockPosition(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setBoostMultiplierSettings(
      maxGlobalMultiplier: PromiseOrValue<BigNumberish>,
      maxBoostMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setEmergencyUnlock(
      emergencyUnlock_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLockMultiplierSettings(
      maxLockDuration: PromiseOrValue<BigNumberish>,
      maxLockMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setOperator(
      operator_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setUnlockOperator(
      _operator: PromiseOrValue<string>,
      add: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setXGrailRewardsShare(
      xGrailRewardsShare_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    splitPosition(
      tokenId: PromiseOrValue<BigNumberish>,
      splitAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unboost(
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unlockOperator(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    unlockOperatorsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    updatePool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    withdrawFromPosition(
      tokenId: PromiseOrValue<BigNumberish>,
      amountToWithdraw: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    xGrailRewardsShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    yieldBooster(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_BOOST_MULTIPLIER_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_GLOBAL_MULTIPLIER_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_LOCK_MULTIPLIER_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  addToPosition(
    tokenId: PromiseOrValue<BigNumberish>,
    amountToAdd: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  approve(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  boost(
    tokenId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createPosition(
    amount: PromiseOrValue<BigNumberish>,
    lockDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  emergencyUnlock(overrides?: CallOverrides): Promise<boolean>;

  emergencyWithdraw(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  exists(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  factory(overrides?: CallOverrides): Promise<string>;

  getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  getMultiplierByBoostPoints(
    amount: PromiseOrValue<BigNumberish>,
    boostPoints: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getMultiplierByLockDuration(
    lockDuration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getMultiplierSettings(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      maxGlobalMultiplier: BigNumber;
      maxLockDuration: BigNumber;
      maxLockMultiplier: BigNumber;
      maxBoostMultiplier: BigNumber;
    }
  >;

  getPoolInfo(overrides?: CallOverrides): Promise<
    [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      lpToken: string;
      grailToken: string;
      xGrailToken: string;
      lastRewardTime: BigNumber;
      accRewardsPerShare: BigNumber;
      lpSupply: BigNumber;
      lpSupplyWithMultiplier: BigNumber;
      allocPoint: BigNumber;
    }
  >;

  getStakingPosition(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      amountWithMultiplier: BigNumber;
      startLockTime: BigNumber;
      lockDuration: BigNumber;
      lockMultiplier: BigNumber;
      rewardDebt: BigNumber;
      boostPoints: BigNumber;
      totalMultiplier: BigNumber;
    }
  >;

  harvestPosition(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  harvestPositionTo(
    tokenId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  harvestPositionsTo(
    tokenIds: PromiseOrValue<BigNumberish>[],
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  hasDeposits(overrides?: CallOverrides): Promise<boolean>;

  initialize(
    master_: PromiseOrValue<string>,
    grailToken: PromiseOrValue<string>,
    xGrailToken: PromiseOrValue<string>,
    lpToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isUnlockOperator(_operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isUnlocked(overrides?: CallOverrides): Promise<boolean>;

  lastTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  lockPosition(
    tokenId: PromiseOrValue<BigNumberish>,
    lockDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  master(overrides?: CallOverrides): Promise<string>;

  mergePositions(
    tokenIds: PromiseOrValue<BigNumberish>[],
    lockDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  operator(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  pendingRewards(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  renewLockPosition(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'safeTransferFrom(address,address,uint256)'(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'safeTransferFrom(address,address,uint256,bytes)'(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setBoostMultiplierSettings(
    maxGlobalMultiplier: PromiseOrValue<BigNumberish>,
    maxBoostMultiplier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setEmergencyUnlock(
    emergencyUnlock_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLockMultiplierSettings(
    maxLockDuration: PromiseOrValue<BigNumberish>,
    maxLockMultiplier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setOperator(
    operator_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setUnlockOperator(
    _operator: PromiseOrValue<string>,
    add: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setXGrailRewardsShare(
    xGrailRewardsShare_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  splitPosition(
    tokenId: PromiseOrValue<BigNumberish>,
    splitAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unboost(
    tokenId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unlockOperator(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  unlockOperatorsLength(overrides?: CallOverrides): Promise<BigNumber>;

  updatePool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  withdrawFromPosition(
    tokenId: PromiseOrValue<BigNumberish>,
    amountToWithdraw: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  xGrailRewardsShare(overrides?: CallOverrides): Promise<BigNumber>;

  yieldBooster(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_BOOST_MULTIPLIER_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_GLOBAL_MULTIPLIER_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LOCK_MULTIPLIER_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    addToPosition(
      tokenId: PromiseOrValue<BigNumberish>,
      amountToAdd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    boost(
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    createPosition(
      amount: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    emergencyUnlock(overrides?: CallOverrides): Promise<boolean>;

    emergencyWithdraw(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    exists(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    factory(overrides?: CallOverrides): Promise<string>;

    getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    getMultiplierByBoostPoints(
      amount: PromiseOrValue<BigNumberish>,
      boostPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getMultiplierByLockDuration(
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getMultiplierSettings(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        maxGlobalMultiplier: BigNumber;
        maxLockDuration: BigNumber;
        maxLockMultiplier: BigNumber;
        maxBoostMultiplier: BigNumber;
      }
    >;

    getPoolInfo(overrides?: CallOverrides): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        grailToken: string;
        xGrailToken: string;
        lastRewardTime: BigNumber;
        accRewardsPerShare: BigNumber;
        lpSupply: BigNumber;
        lpSupplyWithMultiplier: BigNumber;
        allocPoint: BigNumber;
      }
    >;

    getStakingPosition(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        amountWithMultiplier: BigNumber;
        startLockTime: BigNumber;
        lockDuration: BigNumber;
        lockMultiplier: BigNumber;
        rewardDebt: BigNumber;
        boostPoints: BigNumber;
        totalMultiplier: BigNumber;
      }
    >;

    harvestPosition(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    harvestPositionTo(
      tokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    harvestPositionsTo(
      tokenIds: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    hasDeposits(overrides?: CallOverrides): Promise<boolean>;

    initialize(
      master_: PromiseOrValue<string>,
      grailToken: PromiseOrValue<string>,
      xGrailToken: PromiseOrValue<string>,
      lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isUnlockOperator(_operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isUnlocked(overrides?: CallOverrides): Promise<boolean>;

    lastTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    lockPosition(
      tokenId: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    master(overrides?: CallOverrides): Promise<string>;

    mergePositions(
      tokenIds: PromiseOrValue<BigNumberish>[],
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    operator(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    pendingRewards(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    renewLockPosition(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setBoostMultiplierSettings(
      maxGlobalMultiplier: PromiseOrValue<BigNumberish>,
      maxBoostMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setEmergencyUnlock(emergencyUnlock_: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setLockMultiplierSettings(
      maxLockDuration: PromiseOrValue<BigNumberish>,
      maxLockMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setOperator(operator_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setUnlockOperator(
      _operator: PromiseOrValue<string>,
      add: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setXGrailRewardsShare(xGrailRewardsShare_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    splitPosition(
      tokenId: PromiseOrValue<BigNumberish>,
      splitAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    unboost(
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    unlockOperator(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    unlockOperatorsLength(overrides?: CallOverrides): Promise<BigNumber>;

    updatePool(overrides?: CallOverrides): Promise<void>;

    withdrawFromPosition(
      tokenId: PromiseOrValue<BigNumberish>,
      amountToWithdraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    xGrailRewardsShare(overrides?: CallOverrides): Promise<BigNumber>;

    yieldBooster(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'AddToPosition(uint256,address,uint256)'(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      user?: null,
      amount?: null,
    ): AddToPositionEventFilter;
    AddToPosition(tokenId?: PromiseOrValue<BigNumberish> | null, user?: null, amount?: null): AddToPositionEventFilter;

    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
    ): ApprovalEventFilter;

    'ApprovalForAll(address,address,bool)'(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null,
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null,
    ): ApprovalForAllEventFilter;

    'CreatePosition(uint256,uint256,uint256)'(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lockDuration?: null,
    ): CreatePositionEventFilter;
    CreatePosition(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      lockDuration?: null,
    ): CreatePositionEventFilter;

    'EmergencyWithdraw(uint256,uint256)'(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(tokenId?: PromiseOrValue<BigNumberish> | null, amount?: null): EmergencyWithdrawEventFilter;

    'HarvestPosition(uint256,address,uint256)'(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      to?: null,
      pending?: null,
    ): HarvestPositionEventFilter;
    HarvestPosition(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      to?: null,
      pending?: null,
    ): HarvestPositionEventFilter;

    'LockPosition(uint256,uint256)'(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      lockDuration?: null,
    ): LockPositionEventFilter;
    LockPosition(tokenId?: PromiseOrValue<BigNumberish> | null, lockDuration?: null): LockPositionEventFilter;

    'MergePositions(address,uint256[])'(
      user?: PromiseOrValue<string> | null,
      tokenIds?: null,
    ): MergePositionsEventFilter;
    MergePositions(user?: PromiseOrValue<string> | null, tokenIds?: null): MergePositionsEventFilter;

    'PoolUpdated(uint256,uint256)'(lastRewardTime?: null, accRewardsPerShare?: null): PoolUpdatedEventFilter;
    PoolUpdated(lastRewardTime?: null, accRewardsPerShare?: null): PoolUpdatedEventFilter;

    'SetBoost(uint256,uint256)'(tokenId?: PromiseOrValue<BigNumberish> | null, boostPoints?: null): SetBoostEventFilter;
    SetBoost(tokenId?: PromiseOrValue<BigNumberish> | null, boostPoints?: null): SetBoostEventFilter;

    'SetBoostMultiplierSettings(uint256,uint256)'(
      maxGlobalMultiplier?: null,
      maxBoostMultiplier?: null,
    ): SetBoostMultiplierSettingsEventFilter;
    SetBoostMultiplierSettings(
      maxGlobalMultiplier?: null,
      maxBoostMultiplier?: null,
    ): SetBoostMultiplierSettingsEventFilter;

    'SetEmergencyUnlock(bool)'(emergencyUnlock?: null): SetEmergencyUnlockEventFilter;
    SetEmergencyUnlock(emergencyUnlock?: null): SetEmergencyUnlockEventFilter;

    'SetLockMultiplierSettings(uint256,uint256)'(
      maxLockDuration?: null,
      maxLockMultiplier?: null,
    ): SetLockMultiplierSettingsEventFilter;
    SetLockMultiplierSettings(maxLockDuration?: null, maxLockMultiplier?: null): SetLockMultiplierSettingsEventFilter;

    'SetOperator(address)'(operator?: null): SetOperatorEventFilter;
    SetOperator(operator?: null): SetOperatorEventFilter;

    'SetUnlockOperator(address,bool)'(operator?: null, isAdded?: null): SetUnlockOperatorEventFilter;
    SetUnlockOperator(operator?: null, isAdded?: null): SetUnlockOperatorEventFilter;

    'SetXGrailRewardsShare(uint256)'(xGrailRewardsShare?: null): SetXGrailRewardsShareEventFilter;
    SetXGrailRewardsShare(xGrailRewardsShare?: null): SetXGrailRewardsShareEventFilter;

    'SplitPosition(uint256,uint256,uint256)'(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      splitAmount?: null,
      newTokenId?: null,
    ): SplitPositionEventFilter;
    SplitPosition(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      splitAmount?: null,
      newTokenId?: null,
    ): SplitPositionEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
    ): TransferEventFilter;

    'WithdrawFromPosition(uint256,uint256)'(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
    ): WithdrawFromPositionEventFilter;
    WithdrawFromPosition(tokenId?: PromiseOrValue<BigNumberish> | null, amount?: null): WithdrawFromPositionEventFilter;
  };

  estimateGas: {
    MAX_BOOST_MULTIPLIER_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_GLOBAL_MULTIPLIER_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LOCK_MULTIPLIER_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    addToPosition(
      tokenId: PromiseOrValue<BigNumberish>,
      amountToAdd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    boost(
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createPosition(
      amount: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    emergencyUnlock(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    exists(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getMultiplierByBoostPoints(
      amount: PromiseOrValue<BigNumberish>,
      boostPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getMultiplierByLockDuration(
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getMultiplierSettings(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingPosition(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    harvestPosition(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    harvestPositionTo(
      tokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    harvestPositionsTo(
      tokenIds: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    hasDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      master_: PromiseOrValue<string>,
      grailToken: PromiseOrValue<string>,
      xGrailToken: PromiseOrValue<string>,
      lpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isUnlockOperator(_operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isUnlocked(overrides?: CallOverrides): Promise<BigNumber>;

    lastTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    lockPosition(
      tokenId: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    master(overrides?: CallOverrides): Promise<BigNumber>;

    mergePositions(
      tokenIds: PromiseOrValue<BigNumberish>[],
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    renewLockPosition(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setBoostMultiplierSettings(
      maxGlobalMultiplier: PromiseOrValue<BigNumberish>,
      maxBoostMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setEmergencyUnlock(
      emergencyUnlock_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLockMultiplierSettings(
      maxLockDuration: PromiseOrValue<BigNumberish>,
      maxLockMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setOperator(
      operator_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setUnlockOperator(
      _operator: PromiseOrValue<string>,
      add: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setXGrailRewardsShare(
      xGrailRewardsShare_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    splitPosition(
      tokenId: PromiseOrValue<BigNumberish>,
      splitAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unboost(
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unlockOperator(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    unlockOperatorsLength(overrides?: CallOverrides): Promise<BigNumber>;

    updatePool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    withdrawFromPosition(
      tokenId: PromiseOrValue<BigNumberish>,
      amountToWithdraw: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    xGrailRewardsShare(overrides?: CallOverrides): Promise<BigNumber>;

    yieldBooster(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_BOOST_MULTIPLIER_LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_GLOBAL_MULTIPLIER_LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_LOCK_MULTIPLIER_LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addToPosition(
      tokenId: PromiseOrValue<BigNumberish>,
      amountToAdd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boost(
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createPosition(
      amount: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    emergencyUnlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    exists(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMultiplierByBoostPoints(
      amount: PromiseOrValue<BigNumberish>,
      boostPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getMultiplierByLockDuration(
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getMultiplierSettings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakingPosition(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestPosition(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    harvestPositionTo(
      tokenId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    harvestPositionsTo(
      tokenIds: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    hasDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      master_: PromiseOrValue<string>,
      grailToken: PromiseOrValue<string>,
      xGrailToken: PromiseOrValue<string>,
      lpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isUnlockOperator(_operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isUnlocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastTokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockPosition(
      tokenId: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    master(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mergePositions(
      tokenIds: PromiseOrValue<BigNumberish>[],
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRewards(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renewLockPosition(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setBoostMultiplierSettings(
      maxGlobalMultiplier: PromiseOrValue<BigNumberish>,
      maxBoostMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setEmergencyUnlock(
      emergencyUnlock_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLockMultiplierSettings(
      maxLockDuration: PromiseOrValue<BigNumberish>,
      maxLockMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setOperator(
      operator_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setUnlockOperator(
      _operator: PromiseOrValue<string>,
      add: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setXGrailRewardsShare(
      xGrailRewardsShare_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    splitPosition(
      tokenId: PromiseOrValue<BigNumberish>,
      splitAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unboost(
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unlockOperator(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlockOperatorsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    withdrawFromPosition(
      tokenId: PromiseOrValue<BigNumberish>,
      amountToWithdraw: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    xGrailRewardsShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yieldBooster(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
