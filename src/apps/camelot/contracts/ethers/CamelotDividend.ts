/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface CamelotDividendInterface extends utils.Interface {
  functions: {
    'DEFAULT_CYCLE_DIVIDENDS_PERCENT()': FunctionFragment;
    'MAX_CYCLE_DIVIDENDS_PERCENT()': FunctionFragment;
    'MAX_DISTRIBUTED_TOKENS()': FunctionFragment;
    'MIN_CYCLE_DIVIDENDS_PERCENT()': FunctionFragment;
    'addDividendsToPending(address,uint256)': FunctionFragment;
    'allocate(address,uint256,bytes)': FunctionFragment;
    'currentCycleStartTime()': FunctionFragment;
    'cycleDurationSeconds()': FunctionFragment;
    'deallocate(address,uint256,bytes)': FunctionFragment;
    'disableDistributedToken(address)': FunctionFragment;
    'distributedToken(uint256)': FunctionFragment;
    'distributedTokensLength()': FunctionFragment;
    'dividendsInfo(address)': FunctionFragment;
    'emergencyWithdraw(address)': FunctionFragment;
    'emergencyWithdrawAll()': FunctionFragment;
    'enableDistributedToken(address)': FunctionFragment;
    'harvestAllDividends()': FunctionFragment;
    'harvestDividends(address)': FunctionFragment;
    'isDistributedToken(address)': FunctionFragment;
    'massUpdateDividendsInfo()': FunctionFragment;
    'nextCycleStartTime()': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingDividendsAmount(address,address)': FunctionFragment;
    'removeTokenFromDistributedTokens(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'totalAllocation()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateCurrentCycleStartTime()': FunctionFragment;
    'updateCycleDividendsPercent(address,uint256)': FunctionFragment;
    'updateDividendsInfo(address)': FunctionFragment;
    'users(address,address)': FunctionFragment;
    'usersAllocation(address)': FunctionFragment;
    'xGrailToken()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DEFAULT_CYCLE_DIVIDENDS_PERCENT'
      | 'MAX_CYCLE_DIVIDENDS_PERCENT'
      | 'MAX_DISTRIBUTED_TOKENS'
      | 'MIN_CYCLE_DIVIDENDS_PERCENT'
      | 'addDividendsToPending'
      | 'allocate'
      | 'currentCycleStartTime'
      | 'cycleDurationSeconds'
      | 'deallocate'
      | 'disableDistributedToken'
      | 'distributedToken'
      | 'distributedTokensLength'
      | 'dividendsInfo'
      | 'emergencyWithdraw'
      | 'emergencyWithdrawAll'
      | 'enableDistributedToken'
      | 'harvestAllDividends'
      | 'harvestDividends'
      | 'isDistributedToken'
      | 'massUpdateDividendsInfo'
      | 'nextCycleStartTime'
      | 'owner'
      | 'pendingDividendsAmount'
      | 'removeTokenFromDistributedTokens'
      | 'renounceOwnership'
      | 'totalAllocation'
      | 'transferOwnership'
      | 'updateCurrentCycleStartTime'
      | 'updateCycleDividendsPercent'
      | 'updateDividendsInfo'
      | 'users'
      | 'usersAllocation'
      | 'xGrailToken',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DEFAULT_CYCLE_DIVIDENDS_PERCENT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_CYCLE_DIVIDENDS_PERCENT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_DISTRIBUTED_TOKENS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MIN_CYCLE_DIVIDENDS_PERCENT', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addDividendsToPending',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'allocate',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'currentCycleStartTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'cycleDurationSeconds', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'deallocate',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'disableDistributedToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'distributedToken', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'distributedTokensLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'dividendsInfo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'emergencyWithdraw', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'emergencyWithdrawAll', values?: undefined): string;
  encodeFunctionData(functionFragment: 'enableDistributedToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'harvestAllDividends', values?: undefined): string;
  encodeFunctionData(functionFragment: 'harvestDividends', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isDistributedToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'massUpdateDividendsInfo', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nextCycleStartTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'pendingDividendsAmount',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'removeTokenFromDistributedTokens', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalAllocation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateCurrentCycleStartTime', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'updateCycleDividendsPercent',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'updateDividendsInfo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'users', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'usersAllocation', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'xGrailToken', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'DEFAULT_CYCLE_DIVIDENDS_PERCENT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_CYCLE_DIVIDENDS_PERCENT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_DISTRIBUTED_TOKENS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MIN_CYCLE_DIVIDENDS_PERCENT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addDividendsToPending', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allocate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentCycleStartTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cycleDurationSeconds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deallocate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableDistributedToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distributedToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distributedTokensLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dividendsInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdrawAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableDistributedToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvestAllDividends', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvestDividends', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isDistributedToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'massUpdateDividendsInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nextCycleStartTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingDividendsAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeTokenFromDistributedTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAllocation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateCurrentCycleStartTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateCycleDividendsPercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateDividendsInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'users', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'usersAllocation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xGrailToken', data: BytesLike): Result;

  events: {
    'CycleDividendsPercentUpdated(address,uint256,uint256)': EventFragment;
    'DistributedTokenDisabled(address)': EventFragment;
    'DistributedTokenEnabled(address)': EventFragment;
    'DistributedTokenRemoved(address)': EventFragment;
    'DividendsAddedToPending(address,uint256)': EventFragment;
    'DividendsCollected(address,address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'UserUpdated(address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CycleDividendsPercentUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DistributedTokenDisabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DistributedTokenEnabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DistributedTokenRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DividendsAddedToPending'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DividendsCollected'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UserUpdated'): EventFragment;
}

export interface CycleDividendsPercentUpdatedEventObject {
  token: string;
  previousValue: BigNumber;
  newValue: BigNumber;
}
export type CycleDividendsPercentUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  CycleDividendsPercentUpdatedEventObject
>;

export type CycleDividendsPercentUpdatedEventFilter = TypedEventFilter<CycleDividendsPercentUpdatedEvent>;

export interface DistributedTokenDisabledEventObject {
  token: string;
}
export type DistributedTokenDisabledEvent = TypedEvent<[string], DistributedTokenDisabledEventObject>;

export type DistributedTokenDisabledEventFilter = TypedEventFilter<DistributedTokenDisabledEvent>;

export interface DistributedTokenEnabledEventObject {
  token: string;
}
export type DistributedTokenEnabledEvent = TypedEvent<[string], DistributedTokenEnabledEventObject>;

export type DistributedTokenEnabledEventFilter = TypedEventFilter<DistributedTokenEnabledEvent>;

export interface DistributedTokenRemovedEventObject {
  token: string;
}
export type DistributedTokenRemovedEvent = TypedEvent<[string], DistributedTokenRemovedEventObject>;

export type DistributedTokenRemovedEventFilter = TypedEventFilter<DistributedTokenRemovedEvent>;

export interface DividendsAddedToPendingEventObject {
  token: string;
  amount: BigNumber;
}
export type DividendsAddedToPendingEvent = TypedEvent<[string, BigNumber], DividendsAddedToPendingEventObject>;

export type DividendsAddedToPendingEventFilter = TypedEventFilter<DividendsAddedToPendingEvent>;

export interface DividendsCollectedEventObject {
  user: string;
  token: string;
  amount: BigNumber;
}
export type DividendsCollectedEvent = TypedEvent<[string, string, BigNumber], DividendsCollectedEventObject>;

export type DividendsCollectedEventFilter = TypedEventFilter<DividendsCollectedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface UserUpdatedEventObject {
  user: string;
  previousBalance: BigNumber;
  newBalance: BigNumber;
}
export type UserUpdatedEvent = TypedEvent<[string, BigNumber, BigNumber], UserUpdatedEventObject>;

export type UserUpdatedEventFilter = TypedEventFilter<UserUpdatedEvent>;

export interface CamelotDividend extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CamelotDividendInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_CYCLE_DIVIDENDS_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_CYCLE_DIVIDENDS_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_DISTRIBUTED_TOKENS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_CYCLE_DIVIDENDS_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    addDividendsToPending(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    allocate(
      userAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    currentCycleStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    cycleDurationSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    deallocate(
      userAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    disableDistributedToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    distributedToken(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    distributedTokensLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    dividendsInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        currentDistributionAmount: BigNumber;
        currentCycleDistributedAmount: BigNumber;
        pendingAmount: BigNumber;
        distributedAmount: BigNumber;
        accDividendsPerShare: BigNumber;
        lastUpdateTime: BigNumber;
        cycleDividendsPercent: BigNumber;
        distributionDisabled: boolean;
      }
    >;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    emergencyWithdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    enableDistributedToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    harvestAllDividends(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    harvestDividends(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isDistributedToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    massUpdateDividendsInfo(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    nextCycleStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingDividendsAmount(
      token: PromiseOrValue<string>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    removeTokenFromDistributedTokens(
      tokenToRemove: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    totalAllocation(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateCurrentCycleStartTime(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateCycleDividendsPercent(
      token: PromiseOrValue<string>,
      percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateDividendsInfo(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    users(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        pendingDividends: BigNumber;
        rewardDebt: BigNumber;
      }
    >;

    usersAllocation(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    xGrailToken(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_CYCLE_DIVIDENDS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_CYCLE_DIVIDENDS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_DISTRIBUTED_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_CYCLE_DIVIDENDS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  addDividendsToPending(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  allocate(
    userAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  currentCycleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  cycleDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  deallocate(
    userAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  disableDistributedToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  distributedToken(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  distributedTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

  dividendsInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      currentDistributionAmount: BigNumber;
      currentCycleDistributedAmount: BigNumber;
      pendingAmount: BigNumber;
      distributedAmount: BigNumber;
      accDividendsPerShare: BigNumber;
      lastUpdateTime: BigNumber;
      cycleDividendsPercent: BigNumber;
      distributionDisabled: boolean;
    }
  >;

  emergencyWithdraw(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  emergencyWithdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  enableDistributedToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  harvestAllDividends(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  harvestDividends(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isDistributedToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  massUpdateDividendsInfo(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  nextCycleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingDividendsAmount(
    token: PromiseOrValue<string>,
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  removeTokenFromDistributedTokens(
    tokenToRemove: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  totalAllocation(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateCurrentCycleStartTime(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  updateCycleDividendsPercent(
    token: PromiseOrValue<string>,
    percent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateDividendsInfo(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  users(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      pendingDividends: BigNumber;
      rewardDebt: BigNumber;
    }
  >;

  usersAllocation(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  xGrailToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_CYCLE_DIVIDENDS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_CYCLE_DIVIDENDS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DISTRIBUTED_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_CYCLE_DIVIDENDS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    addDividendsToPending(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    allocate(
      userAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    currentCycleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    cycleDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    deallocate(
      userAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    disableDistributedToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    distributedToken(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    distributedTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    dividendsInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        currentDistributionAmount: BigNumber;
        currentCycleDistributedAmount: BigNumber;
        pendingAmount: BigNumber;
        distributedAmount: BigNumber;
        accDividendsPerShare: BigNumber;
        lastUpdateTime: BigNumber;
        cycleDividendsPercent: BigNumber;
        distributionDisabled: boolean;
      }
    >;

    emergencyWithdraw(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    emergencyWithdrawAll(overrides?: CallOverrides): Promise<void>;

    enableDistributedToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    harvestAllDividends(overrides?: CallOverrides): Promise<void>;

    harvestDividends(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    isDistributedToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    massUpdateDividendsInfo(overrides?: CallOverrides): Promise<void>;

    nextCycleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingDividendsAmount(
      token: PromiseOrValue<string>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    removeTokenFromDistributedTokens(tokenToRemove: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    totalAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateCurrentCycleStartTime(overrides?: CallOverrides): Promise<void>;

    updateCycleDividendsPercent(
      token: PromiseOrValue<string>,
      percent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateDividendsInfo(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    users(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        pendingDividends: BigNumber;
        rewardDebt: BigNumber;
      }
    >;

    usersAllocation(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    xGrailToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'CycleDividendsPercentUpdated(address,uint256,uint256)'(
      token?: PromiseOrValue<string> | null,
      previousValue?: null,
      newValue?: null,
    ): CycleDividendsPercentUpdatedEventFilter;
    CycleDividendsPercentUpdated(
      token?: PromiseOrValue<string> | null,
      previousValue?: null,
      newValue?: null,
    ): CycleDividendsPercentUpdatedEventFilter;

    'DistributedTokenDisabled(address)'(token?: PromiseOrValue<string> | null): DistributedTokenDisabledEventFilter;
    DistributedTokenDisabled(token?: PromiseOrValue<string> | null): DistributedTokenDisabledEventFilter;

    'DistributedTokenEnabled(address)'(token?: PromiseOrValue<string> | null): DistributedTokenEnabledEventFilter;
    DistributedTokenEnabled(token?: PromiseOrValue<string> | null): DistributedTokenEnabledEventFilter;

    'DistributedTokenRemoved(address)'(token?: PromiseOrValue<string> | null): DistributedTokenRemovedEventFilter;
    DistributedTokenRemoved(token?: PromiseOrValue<string> | null): DistributedTokenRemovedEventFilter;

    'DividendsAddedToPending(address,uint256)'(
      token?: PromiseOrValue<string> | null,
      amount?: null,
    ): DividendsAddedToPendingEventFilter;
    DividendsAddedToPending(token?: PromiseOrValue<string> | null, amount?: null): DividendsAddedToPendingEventFilter;

    'DividendsCollected(address,address,uint256)'(
      user?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
    ): DividendsCollectedEventFilter;
    DividendsCollected(
      user?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
    ): DividendsCollectedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'UserUpdated(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      previousBalance?: null,
      newBalance?: null,
    ): UserUpdatedEventFilter;
    UserUpdated(
      user?: PromiseOrValue<string> | null,
      previousBalance?: null,
      newBalance?: null,
    ): UserUpdatedEventFilter;
  };

  estimateGas: {
    DEFAULT_CYCLE_DIVIDENDS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_CYCLE_DIVIDENDS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DISTRIBUTED_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_CYCLE_DIVIDENDS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    addDividendsToPending(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    allocate(
      userAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    currentCycleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    cycleDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    deallocate(
      userAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    disableDistributedToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    distributedToken(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    distributedTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    dividendsInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    emergencyWithdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    enableDistributedToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    harvestAllDividends(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    harvestDividends(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isDistributedToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    massUpdateDividendsInfo(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    nextCycleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDividendsAmount(
      token: PromiseOrValue<string>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    removeTokenFromDistributedTokens(
      tokenToRemove: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    totalAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateCurrentCycleStartTime(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    updateCycleDividendsPercent(
      token: PromiseOrValue<string>,
      percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateDividendsInfo(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    users(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    usersAllocation(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    xGrailToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_CYCLE_DIVIDENDS_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_CYCLE_DIVIDENDS_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_DISTRIBUTED_TOKENS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_CYCLE_DIVIDENDS_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addDividendsToPending(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    allocate(
      userAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    currentCycleStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cycleDurationSeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deallocate(
      userAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    disableDistributedToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    distributedToken(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributedTokensLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dividendsInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    enableDistributedToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    harvestAllDividends(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    harvestDividends(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isDistributedToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    massUpdateDividendsInfo(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    nextCycleStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingDividendsAmount(
      token: PromiseOrValue<string>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    removeTokenFromDistributedTokens(
      tokenToRemove: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    totalAllocation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateCurrentCycleStartTime(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateCycleDividendsPercent(
      token: PromiseOrValue<string>,
      percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateDividendsInfo(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    users(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    usersAllocation(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xGrailToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
