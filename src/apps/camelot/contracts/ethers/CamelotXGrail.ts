/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface CamelotXGrailInterface extends utils.Interface {
  functions: {
    'MAX_DEALLOCATION_FEE()': FunctionFragment;
    'MAX_FIXED_RATIO()': FunctionFragment;
    'allocate(address,uint256,bytes)': FunctionFragment;
    'allocateFromUsage(address,uint256)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'approveUsage(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'cancelRedeem(uint256)': FunctionFragment;
    'convert(uint256)': FunctionFragment;
    'convertTo(uint256,address)': FunctionFragment;
    'deallocate(address,uint256,bytes)': FunctionFragment;
    'deallocateFromUsage(address,uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'dividendsAddress()': FunctionFragment;
    'finalizeRedeem(uint256)': FunctionFragment;
    'getGrailByVestingDuration(uint256,uint256)': FunctionFragment;
    'getUsageAllocation(address,address)': FunctionFragment;
    'getUsageApproval(address,address)': FunctionFragment;
    'getUserRedeem(address,uint256)': FunctionFragment;
    'getUserRedeemsLength(address)': FunctionFragment;
    'getXGrailBalance(address)': FunctionFragment;
    'grailToken()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'isTransferWhitelisted(address)': FunctionFragment;
    'maxRedeemDuration()': FunctionFragment;
    'maxRedeemRatio()': FunctionFragment;
    'minRedeemDuration()': FunctionFragment;
    'minRedeemRatio()': FunctionFragment;
    'name()': FunctionFragment;
    'owner()': FunctionFragment;
    'redeem(uint256,uint256)': FunctionFragment;
    'redeemDividendsAdjustment()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'transferWhitelist(uint256)': FunctionFragment;
    'transferWhitelistLength()': FunctionFragment;
    'updateDeallocationFee(address,uint256)': FunctionFragment;
    'updateDividendsAddress(address)': FunctionFragment;
    'updateRedeemDividendsAddress(uint256)': FunctionFragment;
    'updateRedeemSettings(uint256,uint256,uint256,uint256,uint256)': FunctionFragment;
    'updateTransferWhitelist(address,bool)': FunctionFragment;
    'usageAllocations(address,address)': FunctionFragment;
    'usageApprovals(address,address)': FunctionFragment;
    'usagesDeallocationFee(address)': FunctionFragment;
    'userRedeems(address,uint256)': FunctionFragment;
    'xGrailBalances(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'MAX_DEALLOCATION_FEE'
      | 'MAX_FIXED_RATIO'
      | 'allocate'
      | 'allocateFromUsage'
      | 'allowance'
      | 'approve'
      | 'approveUsage'
      | 'balanceOf'
      | 'cancelRedeem'
      | 'convert'
      | 'convertTo'
      | 'deallocate'
      | 'deallocateFromUsage'
      | 'decimals'
      | 'decreaseAllowance'
      | 'dividendsAddress'
      | 'finalizeRedeem'
      | 'getGrailByVestingDuration'
      | 'getUsageAllocation'
      | 'getUsageApproval'
      | 'getUserRedeem'
      | 'getUserRedeemsLength'
      | 'getXGrailBalance'
      | 'grailToken'
      | 'increaseAllowance'
      | 'isTransferWhitelisted'
      | 'maxRedeemDuration'
      | 'maxRedeemRatio'
      | 'minRedeemDuration'
      | 'minRedeemRatio'
      | 'name'
      | 'owner'
      | 'redeem'
      | 'redeemDividendsAdjustment'
      | 'renounceOwnership'
      | 'symbol'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'transferWhitelist'
      | 'transferWhitelistLength'
      | 'updateDeallocationFee'
      | 'updateDividendsAddress'
      | 'updateRedeemDividendsAddress'
      | 'updateRedeemSettings'
      | 'updateTransferWhitelist'
      | 'usageAllocations'
      | 'usageApprovals'
      | 'usagesDeallocationFee'
      | 'userRedeems'
      | 'xGrailBalances',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'MAX_DEALLOCATION_FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_FIXED_RATIO', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'allocate',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'allocateFromUsage',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'approveUsage',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'cancelRedeem', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'convert', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'convertTo',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'deallocate',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'deallocateFromUsage',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'dividendsAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'finalizeRedeem', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getGrailByVestingDuration',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUsageAllocation',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUsageApproval',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserRedeem',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getUserRedeemsLength', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getXGrailBalance', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'grailToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'isTransferWhitelisted', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maxRedeemDuration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxRedeemRatio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minRedeemDuration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minRedeemRatio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'redeem',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'redeemDividendsAdjustment', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'transferWhitelist', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'transferWhitelistLength', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'updateDeallocationFee',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'updateDividendsAddress', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateRedeemDividendsAddress', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'updateRedeemSettings',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateTransferWhitelist',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'usageAllocations',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'usageApprovals',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'usagesDeallocationFee', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'userRedeems',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'xGrailBalances', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'MAX_DEALLOCATION_FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_FIXED_RATIO', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allocate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allocateFromUsage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approveUsage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancelRedeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convert', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deallocate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deallocateFromUsage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dividendsAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'finalizeRedeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getGrailByVestingDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUsageAllocation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUsageApproval', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserRedeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserRedeemsLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getXGrailBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grailToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isTransferWhitelisted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRedeemDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRedeemRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minRedeemDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minRedeemRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemDividendsAdjustment', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferWhitelistLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateDeallocationFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateDividendsAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateRedeemDividendsAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateRedeemSettings', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateTransferWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'usageAllocations', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'usageApprovals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'usagesDeallocationFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userRedeems', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xGrailBalances', data: BytesLike): Result;

  events: {
    'Allocate(address,address,uint256)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'ApproveUsage(address,address,uint256)': EventFragment;
    'CancelRedeem(address,uint256)': EventFragment;
    'Convert(address,address,uint256)': EventFragment;
    'Deallocate(address,address,uint256,uint256)': EventFragment;
    'FinalizeRedeem(address,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Redeem(address,uint256,uint256,uint256)': EventFragment;
    'SetTransferWhitelist(address,bool)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'UpdateDeallocationFee(address,uint256)': EventFragment;
    'UpdateDividendsAddress(address,address)': EventFragment;
    'UpdateRedeemDividendsAddress(address,uint256,address,address)': EventFragment;
    'UpdateRedeemSettings(uint256,uint256,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Allocate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ApproveUsage'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CancelRedeem'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Convert'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deallocate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FinalizeRedeem'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Redeem'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetTransferWhitelist'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateDeallocationFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateDividendsAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateRedeemDividendsAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateRedeemSettings'): EventFragment;
}

export interface AllocateEventObject {
  userAddress: string;
  usageAddress: string;
  amount: BigNumber;
}
export type AllocateEvent = TypedEvent<[string, string, BigNumber], AllocateEventObject>;

export type AllocateEventFilter = TypedEventFilter<AllocateEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApproveUsageEventObject {
  userAddress: string;
  usageAddress: string;
  amount: BigNumber;
}
export type ApproveUsageEvent = TypedEvent<[string, string, BigNumber], ApproveUsageEventObject>;

export type ApproveUsageEventFilter = TypedEventFilter<ApproveUsageEvent>;

export interface CancelRedeemEventObject {
  userAddress: string;
  xGrailAmount: BigNumber;
}
export type CancelRedeemEvent = TypedEvent<[string, BigNumber], CancelRedeemEventObject>;

export type CancelRedeemEventFilter = TypedEventFilter<CancelRedeemEvent>;

export interface ConvertEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type ConvertEvent = TypedEvent<[string, string, BigNumber], ConvertEventObject>;

export type ConvertEventFilter = TypedEventFilter<ConvertEvent>;

export interface DeallocateEventObject {
  userAddress: string;
  usageAddress: string;
  amount: BigNumber;
  fee: BigNumber;
}
export type DeallocateEvent = TypedEvent<[string, string, BigNumber, BigNumber], DeallocateEventObject>;

export type DeallocateEventFilter = TypedEventFilter<DeallocateEvent>;

export interface FinalizeRedeemEventObject {
  userAddress: string;
  xGrailAmount: BigNumber;
  grailAmount: BigNumber;
}
export type FinalizeRedeemEvent = TypedEvent<[string, BigNumber, BigNumber], FinalizeRedeemEventObject>;

export type FinalizeRedeemEventFilter = TypedEventFilter<FinalizeRedeemEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RedeemEventObject {
  userAddress: string;
  xGrailAmount: BigNumber;
  grailAmount: BigNumber;
  duration: BigNumber;
}
export type RedeemEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], RedeemEventObject>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface SetTransferWhitelistEventObject {
  account: string;
  add: boolean;
}
export type SetTransferWhitelistEvent = TypedEvent<[string, boolean], SetTransferWhitelistEventObject>;

export type SetTransferWhitelistEventFilter = TypedEventFilter<SetTransferWhitelistEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UpdateDeallocationFeeEventObject {
  usageAddress: string;
  fee: BigNumber;
}
export type UpdateDeallocationFeeEvent = TypedEvent<[string, BigNumber], UpdateDeallocationFeeEventObject>;

export type UpdateDeallocationFeeEventFilter = TypedEventFilter<UpdateDeallocationFeeEvent>;

export interface UpdateDividendsAddressEventObject {
  previousDividendsAddress: string;
  newDividendsAddress: string;
}
export type UpdateDividendsAddressEvent = TypedEvent<[string, string], UpdateDividendsAddressEventObject>;

export type UpdateDividendsAddressEventFilter = TypedEventFilter<UpdateDividendsAddressEvent>;

export interface UpdateRedeemDividendsAddressEventObject {
  userAddress: string;
  redeemIndex: BigNumber;
  previousDividendsAddress: string;
  newDividendsAddress: string;
}
export type UpdateRedeemDividendsAddressEvent = TypedEvent<
  [string, BigNumber, string, string],
  UpdateRedeemDividendsAddressEventObject
>;

export type UpdateRedeemDividendsAddressEventFilter = TypedEventFilter<UpdateRedeemDividendsAddressEvent>;

export interface UpdateRedeemSettingsEventObject {
  minRedeemRatio: BigNumber;
  maxRedeemRatio: BigNumber;
  minRedeemDuration: BigNumber;
  maxRedeemDuration: BigNumber;
  redeemDividendsAdjustment: BigNumber;
}
export type UpdateRedeemSettingsEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  UpdateRedeemSettingsEventObject
>;

export type UpdateRedeemSettingsEventFilter = TypedEventFilter<UpdateRedeemSettingsEvent>;

export interface CamelotXGrail extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CamelotXGrailInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_DEALLOCATION_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FIXED_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>;

    allocate(
      usageAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      usageData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    allocateFromUsage(
      userAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    approveUsage(
      usage: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelRedeem(
      redeemIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    convert(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    convertTo(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deallocate(
      usageAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      usageData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deallocateFromUsage(
      userAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    dividendsAddress(overrides?: CallOverrides): Promise<[string]>;

    finalizeRedeem(
      redeemIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getGrailByVestingDuration(
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getUsageAllocation(
      userAddress: PromiseOrValue<string>,
      usageAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getUsageApproval(
      userAddress: PromiseOrValue<string>,
      usageAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getUserRedeem(
      userAddress: PromiseOrValue<string>,
      redeemIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, BigNumber] & {
        grailAmount: BigNumber;
        xGrailAmount: BigNumber;
        endTime: BigNumber;
        dividendsContract: string;
        dividendsAllocation: BigNumber;
      }
    >;

    getUserRedeemsLength(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getXGrailBalance(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        allocatedAmount: BigNumber;
        redeemingAmount: BigNumber;
      }
    >;

    grailToken(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isTransferWhitelisted(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    maxRedeemDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxRedeemRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    minRedeemDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    minRedeemRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      xGrailAmount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    redeemDividendsAdjustment(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferWhitelist(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    transferWhitelistLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateDeallocationFee(
      usageAddress: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateDividendsAddress(
      dividendsAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateRedeemDividendsAddress(
      redeemIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateRedeemSettings(
      minRedeemRatio_: PromiseOrValue<BigNumberish>,
      maxRedeemRatio_: PromiseOrValue<BigNumberish>,
      minRedeemDuration_: PromiseOrValue<BigNumberish>,
      maxRedeemDuration_: PromiseOrValue<BigNumberish>,
      redeemDividendsAdjustment_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateTransferWhitelist(
      account: PromiseOrValue<string>,
      add: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    usageAllocations(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    usageApprovals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    usagesDeallocationFee(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    userRedeems(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, BigNumber] & {
        grailAmount: BigNumber;
        xGrailAmount: BigNumber;
        endTime: BigNumber;
        dividendsAddress: string;
        dividendsAllocation: BigNumber;
      }
    >;

    xGrailBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        allocatedAmount: BigNumber;
        redeemingAmount: BigNumber;
      }
    >;
  };

  MAX_DEALLOCATION_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FIXED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  allocate(
    usageAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    usageData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  allocateFromUsage(
    userAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  approveUsage(
    usage: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  cancelRedeem(
    redeemIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  convert(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  convertTo(
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deallocate(
    usageAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    usageData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deallocateFromUsage(
    userAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  dividendsAddress(overrides?: CallOverrides): Promise<string>;

  finalizeRedeem(
    redeemIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getGrailByVestingDuration(
    amount: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getUsageAllocation(
    userAddress: PromiseOrValue<string>,
    usageAddress: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getUsageApproval(
    userAddress: PromiseOrValue<string>,
    usageAddress: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getUserRedeem(
    userAddress: PromiseOrValue<string>,
    redeemIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, BigNumber] & {
      grailAmount: BigNumber;
      xGrailAmount: BigNumber;
      endTime: BigNumber;
      dividendsContract: string;
      dividendsAllocation: BigNumber;
    }
  >;

  getUserRedeemsLength(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getXGrailBalance(
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      allocatedAmount: BigNumber;
      redeemingAmount: BigNumber;
    }
  >;

  grailToken(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isTransferWhitelisted(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  maxRedeemDuration(overrides?: CallOverrides): Promise<BigNumber>;

  maxRedeemRatio(overrides?: CallOverrides): Promise<BigNumber>;

  minRedeemDuration(overrides?: CallOverrides): Promise<BigNumber>;

  minRedeemRatio(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  redeem(
    xGrailAmount: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  redeemDividendsAdjustment(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferWhitelist(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  transferWhitelistLength(overrides?: CallOverrides): Promise<BigNumber>;

  updateDeallocationFee(
    usageAddress: PromiseOrValue<string>,
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateDividendsAddress(
    dividendsAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateRedeemDividendsAddress(
    redeemIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateRedeemSettings(
    minRedeemRatio_: PromiseOrValue<BigNumberish>,
    maxRedeemRatio_: PromiseOrValue<BigNumberish>,
    minRedeemDuration_: PromiseOrValue<BigNumberish>,
    maxRedeemDuration_: PromiseOrValue<BigNumberish>,
    redeemDividendsAdjustment_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateTransferWhitelist(
    account: PromiseOrValue<string>,
    add: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  usageAllocations(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  usageApprovals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  usagesDeallocationFee(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  userRedeems(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, BigNumber] & {
      grailAmount: BigNumber;
      xGrailAmount: BigNumber;
      endTime: BigNumber;
      dividendsAddress: string;
      dividendsAllocation: BigNumber;
    }
  >;

  xGrailBalances(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      allocatedAmount: BigNumber;
      redeemingAmount: BigNumber;
    }
  >;

  callStatic: {
    MAX_DEALLOCATION_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FIXED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    allocate(
      usageAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      usageData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    allocateFromUsage(
      userAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    approveUsage(
      usage: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    cancelRedeem(redeemIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    convert(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    convertTo(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    deallocate(
      usageAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      usageData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    deallocateFromUsage(
      userAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    dividendsAddress(overrides?: CallOverrides): Promise<string>;

    finalizeRedeem(redeemIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    getGrailByVestingDuration(
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUsageAllocation(
      userAddress: PromiseOrValue<string>,
      usageAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUsageApproval(
      userAddress: PromiseOrValue<string>,
      usageAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserRedeem(
      userAddress: PromiseOrValue<string>,
      redeemIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, BigNumber] & {
        grailAmount: BigNumber;
        xGrailAmount: BigNumber;
        endTime: BigNumber;
        dividendsContract: string;
        dividendsAllocation: BigNumber;
      }
    >;

    getUserRedeemsLength(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getXGrailBalance(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        allocatedAmount: BigNumber;
        redeemingAmount: BigNumber;
      }
    >;

    grailToken(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isTransferWhitelisted(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    maxRedeemDuration(overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeemRatio(overrides?: CallOverrides): Promise<BigNumber>;

    minRedeemDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minRedeemRatio(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    redeem(
      xGrailAmount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    redeemDividendsAdjustment(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    transferWhitelist(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    transferWhitelistLength(overrides?: CallOverrides): Promise<BigNumber>;

    updateDeallocationFee(
      usageAddress: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateDividendsAddress(dividendsAddress_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateRedeemDividendsAddress(redeemIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateRedeemSettings(
      minRedeemRatio_: PromiseOrValue<BigNumberish>,
      maxRedeemRatio_: PromiseOrValue<BigNumberish>,
      minRedeemDuration_: PromiseOrValue<BigNumberish>,
      maxRedeemDuration_: PromiseOrValue<BigNumberish>,
      redeemDividendsAdjustment_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateTransferWhitelist(
      account: PromiseOrValue<string>,
      add: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    usageAllocations(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    usageApprovals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    usagesDeallocationFee(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userRedeems(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, BigNumber] & {
        grailAmount: BigNumber;
        xGrailAmount: BigNumber;
        endTime: BigNumber;
        dividendsAddress: string;
        dividendsAllocation: BigNumber;
      }
    >;

    xGrailBalances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        allocatedAmount: BigNumber;
        redeemingAmount: BigNumber;
      }
    >;
  };

  filters: {
    'Allocate(address,address,uint256)'(
      userAddress?: PromiseOrValue<string> | null,
      usageAddress?: PromiseOrValue<string> | null,
      amount?: null,
    ): AllocateEventFilter;
    Allocate(
      userAddress?: PromiseOrValue<string> | null,
      usageAddress?: PromiseOrValue<string> | null,
      amount?: null,
    ): AllocateEventFilter;

    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'ApproveUsage(address,address,uint256)'(
      userAddress?: PromiseOrValue<string> | null,
      usageAddress?: PromiseOrValue<string> | null,
      amount?: null,
    ): ApproveUsageEventFilter;
    ApproveUsage(
      userAddress?: PromiseOrValue<string> | null,
      usageAddress?: PromiseOrValue<string> | null,
      amount?: null,
    ): ApproveUsageEventFilter;

    'CancelRedeem(address,uint256)'(
      userAddress?: PromiseOrValue<string> | null,
      xGrailAmount?: null,
    ): CancelRedeemEventFilter;
    CancelRedeem(userAddress?: PromiseOrValue<string> | null, xGrailAmount?: null): CancelRedeemEventFilter;

    'Convert(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: null,
      amount?: null,
    ): ConvertEventFilter;
    Convert(from?: PromiseOrValue<string> | null, to?: null, amount?: null): ConvertEventFilter;

    'Deallocate(address,address,uint256,uint256)'(
      userAddress?: PromiseOrValue<string> | null,
      usageAddress?: PromiseOrValue<string> | null,
      amount?: null,
      fee?: null,
    ): DeallocateEventFilter;
    Deallocate(
      userAddress?: PromiseOrValue<string> | null,
      usageAddress?: PromiseOrValue<string> | null,
      amount?: null,
      fee?: null,
    ): DeallocateEventFilter;

    'FinalizeRedeem(address,uint256,uint256)'(
      userAddress?: PromiseOrValue<string> | null,
      xGrailAmount?: null,
      grailAmount?: null,
    ): FinalizeRedeemEventFilter;
    FinalizeRedeem(
      userAddress?: PromiseOrValue<string> | null,
      xGrailAmount?: null,
      grailAmount?: null,
    ): FinalizeRedeemEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'Redeem(address,uint256,uint256,uint256)'(
      userAddress?: PromiseOrValue<string> | null,
      xGrailAmount?: null,
      grailAmount?: null,
      duration?: null,
    ): RedeemEventFilter;
    Redeem(
      userAddress?: PromiseOrValue<string> | null,
      xGrailAmount?: null,
      grailAmount?: null,
      duration?: null,
    ): RedeemEventFilter;

    'SetTransferWhitelist(address,bool)'(account?: null, add?: null): SetTransferWhitelistEventFilter;
    SetTransferWhitelist(account?: null, add?: null): SetTransferWhitelistEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;

    'UpdateDeallocationFee(address,uint256)'(
      usageAddress?: PromiseOrValue<string> | null,
      fee?: null,
    ): UpdateDeallocationFeeEventFilter;
    UpdateDeallocationFee(usageAddress?: PromiseOrValue<string> | null, fee?: null): UpdateDeallocationFeeEventFilter;

    'UpdateDividendsAddress(address,address)'(
      previousDividendsAddress?: null,
      newDividendsAddress?: null,
    ): UpdateDividendsAddressEventFilter;
    UpdateDividendsAddress(
      previousDividendsAddress?: null,
      newDividendsAddress?: null,
    ): UpdateDividendsAddressEventFilter;

    'UpdateRedeemDividendsAddress(address,uint256,address,address)'(
      userAddress?: PromiseOrValue<string> | null,
      redeemIndex?: null,
      previousDividendsAddress?: null,
      newDividendsAddress?: null,
    ): UpdateRedeemDividendsAddressEventFilter;
    UpdateRedeemDividendsAddress(
      userAddress?: PromiseOrValue<string> | null,
      redeemIndex?: null,
      previousDividendsAddress?: null,
      newDividendsAddress?: null,
    ): UpdateRedeemDividendsAddressEventFilter;

    'UpdateRedeemSettings(uint256,uint256,uint256,uint256,uint256)'(
      minRedeemRatio?: null,
      maxRedeemRatio?: null,
      minRedeemDuration?: null,
      maxRedeemDuration?: null,
      redeemDividendsAdjustment?: null,
    ): UpdateRedeemSettingsEventFilter;
    UpdateRedeemSettings(
      minRedeemRatio?: null,
      maxRedeemRatio?: null,
      minRedeemDuration?: null,
      maxRedeemDuration?: null,
      redeemDividendsAdjustment?: null,
    ): UpdateRedeemSettingsEventFilter;
  };

  estimateGas: {
    MAX_DEALLOCATION_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FIXED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    allocate(
      usageAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      usageData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    allocateFromUsage(
      userAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    approveUsage(
      usage: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    cancelRedeem(
      redeemIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    convert(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    convertTo(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deallocate(
      usageAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      usageData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deallocateFromUsage(
      userAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    dividendsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    finalizeRedeem(
      redeemIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getGrailByVestingDuration(
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUsageAllocation(
      userAddress: PromiseOrValue<string>,
      usageAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUsageApproval(
      userAddress: PromiseOrValue<string>,
      usageAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserRedeem(
      userAddress: PromiseOrValue<string>,
      redeemIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserRedeemsLength(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getXGrailBalance(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    grailToken(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isTransferWhitelisted(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeemDuration(overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeemRatio(overrides?: CallOverrides): Promise<BigNumber>;

    minRedeemDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minRedeemRatio(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      xGrailAmount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    redeemDividendsAdjustment(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferWhitelist(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    transferWhitelistLength(overrides?: CallOverrides): Promise<BigNumber>;

    updateDeallocationFee(
      usageAddress: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateDividendsAddress(
      dividendsAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateRedeemDividendsAddress(
      redeemIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateRedeemSettings(
      minRedeemRatio_: PromiseOrValue<BigNumberish>,
      maxRedeemRatio_: PromiseOrValue<BigNumberish>,
      minRedeemDuration_: PromiseOrValue<BigNumberish>,
      maxRedeemDuration_: PromiseOrValue<BigNumberish>,
      redeemDividendsAdjustment_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateTransferWhitelist(
      account: PromiseOrValue<string>,
      add: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    usageAllocations(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    usageApprovals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    usagesDeallocationFee(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userRedeems(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    xGrailBalances(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_DEALLOCATION_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FIXED_RATIO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allocate(
      usageAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      usageData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    allocateFromUsage(
      userAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    approveUsage(
      usage: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelRedeem(
      redeemIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    convert(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    convertTo(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deallocate(
      usageAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      usageData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deallocateFromUsage(
      userAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    dividendsAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalizeRedeem(
      redeemIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getGrailByVestingDuration(
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUsageAllocation(
      userAddress: PromiseOrValue<string>,
      usageAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUsageApproval(
      userAddress: PromiseOrValue<string>,
      usageAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserRedeem(
      userAddress: PromiseOrValue<string>,
      redeemIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserRedeemsLength(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getXGrailBalance(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grailToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isTransferWhitelisted(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRedeemDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRedeemRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minRedeemDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minRedeemRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      xGrailAmount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    redeemDividendsAdjustment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferWhitelist(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferWhitelistLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateDeallocationFee(
      usageAddress: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateDividendsAddress(
      dividendsAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateRedeemDividendsAddress(
      redeemIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateRedeemSettings(
      minRedeemRatio_: PromiseOrValue<BigNumberish>,
      maxRedeemRatio_: PromiseOrValue<BigNumberish>,
      minRedeemDuration_: PromiseOrValue<BigNumberish>,
      maxRedeemDuration_: PromiseOrValue<BigNumberish>,
      redeemDividendsAdjustment_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateTransferWhitelist(
      account: PromiseOrValue<string>,
      add: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    usageAllocations(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    usageApprovals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    usagesDeallocationFee(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userRedeems(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    xGrailBalances(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
