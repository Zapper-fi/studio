/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace NitroPool {
  export type SettingsStruct = {
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    harvestStartTime: PromiseOrValue<BigNumberish>;
    depositEndTime: PromiseOrValue<BigNumberish>;
    lockDurationReq: PromiseOrValue<BigNumberish>;
    lockEndReq: PromiseOrValue<BigNumberish>;
    depositAmountReq: PromiseOrValue<BigNumberish>;
    whitelist: PromiseOrValue<boolean>;
    description: PromiseOrValue<string>;
  };

  export type SettingsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    string,
  ] & {
    startTime: BigNumber;
    endTime: BigNumber;
    harvestStartTime: BigNumber;
    depositEndTime: BigNumber;
    lockDurationReq: BigNumber;
    lockEndReq: BigNumber;
    depositAmountReq: BigNumber;
    whitelist: boolean;
    description: string;
  };
}

export interface CamelotNitroFactoryInterface extends utils.Interface {
  functions: {
    'MAX_DEFAULT_FEE()': FunctionFragment;
    'createNitroPool(address,address,address,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool,string))': FunctionFragment;
    'defaultFee()': FunctionFragment;
    'emergencyRecoveryAddress()': FunctionFragment;
    'exemptedAddressesLength()': FunctionFragment;
    'feeAddress()': FunctionFragment;
    'getExemptedAddress(uint256)': FunctionFragment;
    'getNftPoolPublishedNitroPool(address,uint256)': FunctionFragment;
    'getNitroPool(uint256)': FunctionFragment;
    'getNitroPoolFee(address,address)': FunctionFragment;
    'getOwnerNitroPool(address,uint256)': FunctionFragment;
    'getPublishedNitroPool(uint256)': FunctionFragment;
    'grailToken()': FunctionFragment;
    'isExemptedAddress(address)': FunctionFragment;
    'nftPoolPublishedNitroPoolsLength(address)': FunctionFragment;
    'nitroPoolsLength()': FunctionFragment;
    'owner()': FunctionFragment;
    'ownerNitroPoolsLength(address)': FunctionFragment;
    'publishNitroPool(address)': FunctionFragment;
    'publishedNitroPoolsLength()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setDefaultFee(uint256)': FunctionFragment;
    'setEmergencyRecoveryAddress(address)': FunctionFragment;
    'setExemptedAddress(address,bool)': FunctionFragment;
    'setFeeAddress(address)': FunctionFragment;
    'setNitroPoolOwner(address,address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'xGrailToken()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'MAX_DEFAULT_FEE'
      | 'createNitroPool'
      | 'defaultFee'
      | 'emergencyRecoveryAddress'
      | 'exemptedAddressesLength'
      | 'feeAddress'
      | 'getExemptedAddress'
      | 'getNftPoolPublishedNitroPool'
      | 'getNitroPool'
      | 'getNitroPoolFee'
      | 'getOwnerNitroPool'
      | 'getPublishedNitroPool'
      | 'grailToken'
      | 'isExemptedAddress'
      | 'nftPoolPublishedNitroPoolsLength'
      | 'nitroPoolsLength'
      | 'owner'
      | 'ownerNitroPoolsLength'
      | 'publishNitroPool'
      | 'publishedNitroPoolsLength'
      | 'renounceOwnership'
      | 'setDefaultFee'
      | 'setEmergencyRecoveryAddress'
      | 'setExemptedAddress'
      | 'setFeeAddress'
      | 'setNitroPoolOwner'
      | 'transferOwnership'
      | 'xGrailToken',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'MAX_DEFAULT_FEE', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'createNitroPool',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, NitroPool.SettingsStruct],
  ): string;
  encodeFunctionData(functionFragment: 'defaultFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'emergencyRecoveryAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'exemptedAddressesLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feeAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getExemptedAddress', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getNftPoolPublishedNitroPool',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getNitroPool', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getNitroPoolFee',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getOwnerNitroPool',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getPublishedNitroPool', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'grailToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isExemptedAddress', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'nftPoolPublishedNitroPoolsLength', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'nitroPoolsLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ownerNitroPoolsLength', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'publishNitroPool', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'publishedNitroPoolsLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setDefaultFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setEmergencyRecoveryAddress', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setExemptedAddress',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setFeeAddress', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setNitroPoolOwner',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'xGrailToken', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'MAX_DEFAULT_FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createNitroPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'defaultFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyRecoveryAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exemptedAddressesLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getExemptedAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNftPoolPublishedNitroPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNitroPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNitroPoolFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getOwnerNitroPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPublishedNitroPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grailToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isExemptedAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nftPoolPublishedNitroPoolsLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nitroPoolsLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerNitroPoolsLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'publishNitroPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'publishedNitroPoolsLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDefaultFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEmergencyRecoveryAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setExemptedAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setNitroPoolOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xGrailToken', data: BytesLike): Result;

  events: {
    'CreateNitroPool(address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'PublishNitroPool(address)': EventFragment;
    'SetDefaultFee(uint256)': EventFragment;
    'SetEmergencyRecoveryAddress(address)': EventFragment;
    'SetExemptedAddress(address,bool)': EventFragment;
    'SetFeeAddress(address)': EventFragment;
    'SetNitroPoolOwner(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CreateNitroPool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PublishNitroPool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetDefaultFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetEmergencyRecoveryAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetExemptedAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetFeeAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetNitroPoolOwner'): EventFragment;
}

export interface CreateNitroPoolEventObject {
  nitroAddress: string;
}
export type CreateNitroPoolEvent = TypedEvent<[string], CreateNitroPoolEventObject>;

export type CreateNitroPoolEventFilter = TypedEventFilter<CreateNitroPoolEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PublishNitroPoolEventObject {
  nitroAddress: string;
}
export type PublishNitroPoolEvent = TypedEvent<[string], PublishNitroPoolEventObject>;

export type PublishNitroPoolEventFilter = TypedEventFilter<PublishNitroPoolEvent>;

export interface SetDefaultFeeEventObject {
  fee: BigNumber;
}
export type SetDefaultFeeEvent = TypedEvent<[BigNumber], SetDefaultFeeEventObject>;

export type SetDefaultFeeEventFilter = TypedEventFilter<SetDefaultFeeEvent>;

export interface SetEmergencyRecoveryAddressEventObject {
  emergencyRecoveryAddress: string;
}
export type SetEmergencyRecoveryAddressEvent = TypedEvent<[string], SetEmergencyRecoveryAddressEventObject>;

export type SetEmergencyRecoveryAddressEventFilter = TypedEventFilter<SetEmergencyRecoveryAddressEvent>;

export interface SetExemptedAddressEventObject {
  exemptedAddress: string;
  isExempted: boolean;
}
export type SetExemptedAddressEvent = TypedEvent<[string, boolean], SetExemptedAddressEventObject>;

export type SetExemptedAddressEventFilter = TypedEventFilter<SetExemptedAddressEvent>;

export interface SetFeeAddressEventObject {
  feeAddress: string;
}
export type SetFeeAddressEvent = TypedEvent<[string], SetFeeAddressEventObject>;

export type SetFeeAddressEventFilter = TypedEventFilter<SetFeeAddressEvent>;

export interface SetNitroPoolOwnerEventObject {
  previousOwner: string;
  newOwner: string;
}
export type SetNitroPoolOwnerEvent = TypedEvent<[string, string], SetNitroPoolOwnerEventObject>;

export type SetNitroPoolOwnerEventFilter = TypedEventFilter<SetNitroPoolOwnerEvent>;

export interface CamelotNitroFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CamelotNitroFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_DEFAULT_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    createNitroPool(
      nftPoolAddress: PromiseOrValue<string>,
      rewardsToken1: PromiseOrValue<string>,
      rewardsToken2: PromiseOrValue<string>,
      settings: NitroPool.SettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    defaultFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyRecoveryAddress(overrides?: CallOverrides): Promise<[string]>;

    exemptedAddressesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeAddress(overrides?: CallOverrides): Promise<[string]>;

    getExemptedAddress(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    getNftPoolPublishedNitroPool(
      nftPoolAddress: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getNitroPool(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    getNitroPoolFee(
      nitroPoolAddress: PromiseOrValue<string>,
      ownerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getOwnerNitroPool(
      userAddress: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getPublishedNitroPool(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    grailToken(overrides?: CallOverrides): Promise<[string]>;

    isExemptedAddress(checkedAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    nftPoolPublishedNitroPoolsLength(
      nftPoolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    nitroPoolsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerNitroPoolsLength(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    publishNitroPool(
      nftAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    publishedNitroPoolsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setDefaultFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setEmergencyRecoveryAddress(
      emergencyRecoveryAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setExemptedAddress(
      exemptedAddress: PromiseOrValue<string>,
      isExempted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFeeAddress(
      feeAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setNitroPoolOwner(
      previousOwner: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    xGrailToken(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_DEFAULT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  createNitroPool(
    nftPoolAddress: PromiseOrValue<string>,
    rewardsToken1: PromiseOrValue<string>,
    rewardsToken2: PromiseOrValue<string>,
    settings: NitroPool.SettingsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  defaultFee(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyRecoveryAddress(overrides?: CallOverrides): Promise<string>;

  exemptedAddressesLength(overrides?: CallOverrides): Promise<BigNumber>;

  feeAddress(overrides?: CallOverrides): Promise<string>;

  getExemptedAddress(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  getNftPoolPublishedNitroPool(
    nftPoolAddress: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  getNitroPool(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  getNitroPoolFee(
    nitroPoolAddress: PromiseOrValue<string>,
    ownerAddress: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getOwnerNitroPool(
    userAddress: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  getPublishedNitroPool(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  grailToken(overrides?: CallOverrides): Promise<string>;

  isExemptedAddress(checkedAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  nftPoolPublishedNitroPoolsLength(
    nftPoolAddress: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  nitroPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerNitroPoolsLength(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  publishNitroPool(
    nftAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  publishedNitroPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setDefaultFee(
    newFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setEmergencyRecoveryAddress(
    emergencyRecoveryAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setExemptedAddress(
    exemptedAddress: PromiseOrValue<string>,
    isExempted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFeeAddress(
    feeAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setNitroPoolOwner(
    previousOwner: PromiseOrValue<string>,
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  xGrailToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_DEFAULT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    createNitroPool(
      nftPoolAddress: PromiseOrValue<string>,
      rewardsToken1: PromiseOrValue<string>,
      rewardsToken2: PromiseOrValue<string>,
      settings: NitroPool.SettingsStruct,
      overrides?: CallOverrides,
    ): Promise<string>;

    defaultFee(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyRecoveryAddress(overrides?: CallOverrides): Promise<string>;

    exemptedAddressesLength(overrides?: CallOverrides): Promise<BigNumber>;

    feeAddress(overrides?: CallOverrides): Promise<string>;

    getExemptedAddress(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    getNftPoolPublishedNitroPool(
      nftPoolAddress: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getNitroPool(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    getNitroPoolFee(
      nitroPoolAddress: PromiseOrValue<string>,
      ownerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getOwnerNitroPool(
      userAddress: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getPublishedNitroPool(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    grailToken(overrides?: CallOverrides): Promise<string>;

    isExemptedAddress(checkedAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    nftPoolPublishedNitroPoolsLength(
      nftPoolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    nitroPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerNitroPoolsLength(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    publishNitroPool(nftAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    publishedNitroPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDefaultFee(newFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setEmergencyRecoveryAddress(
      emergencyRecoveryAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setExemptedAddress(
      exemptedAddress: PromiseOrValue<string>,
      isExempted: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setFeeAddress(feeAddress_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setNitroPoolOwner(
      previousOwner: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    xGrailToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'CreateNitroPool(address)'(nitroAddress?: null): CreateNitroPoolEventFilter;
    CreateNitroPool(nitroAddress?: null): CreateNitroPoolEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'PublishNitroPool(address)'(nitroAddress?: null): PublishNitroPoolEventFilter;
    PublishNitroPool(nitroAddress?: null): PublishNitroPoolEventFilter;

    'SetDefaultFee(uint256)'(fee?: null): SetDefaultFeeEventFilter;
    SetDefaultFee(fee?: null): SetDefaultFeeEventFilter;

    'SetEmergencyRecoveryAddress(address)'(emergencyRecoveryAddress?: null): SetEmergencyRecoveryAddressEventFilter;
    SetEmergencyRecoveryAddress(emergencyRecoveryAddress?: null): SetEmergencyRecoveryAddressEventFilter;

    'SetExemptedAddress(address,bool)'(exemptedAddress?: null, isExempted?: null): SetExemptedAddressEventFilter;
    SetExemptedAddress(exemptedAddress?: null, isExempted?: null): SetExemptedAddressEventFilter;

    'SetFeeAddress(address)'(feeAddress?: null): SetFeeAddressEventFilter;
    SetFeeAddress(feeAddress?: null): SetFeeAddressEventFilter;

    'SetNitroPoolOwner(address,address)'(previousOwner?: null, newOwner?: null): SetNitroPoolOwnerEventFilter;
    SetNitroPoolOwner(previousOwner?: null, newOwner?: null): SetNitroPoolOwnerEventFilter;
  };

  estimateGas: {
    MAX_DEFAULT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    createNitroPool(
      nftPoolAddress: PromiseOrValue<string>,
      rewardsToken1: PromiseOrValue<string>,
      rewardsToken2: PromiseOrValue<string>,
      settings: NitroPool.SettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    defaultFee(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyRecoveryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    exemptedAddressesLength(overrides?: CallOverrides): Promise<BigNumber>;

    feeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getExemptedAddress(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getNftPoolPublishedNitroPool(
      nftPoolAddress: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getNitroPool(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getNitroPoolFee(
      nitroPoolAddress: PromiseOrValue<string>,
      ownerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getOwnerNitroPool(
      userAddress: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPublishedNitroPool(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    grailToken(overrides?: CallOverrides): Promise<BigNumber>;

    isExemptedAddress(checkedAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    nftPoolPublishedNitroPoolsLength(
      nftPoolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    nitroPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerNitroPoolsLength(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    publishNitroPool(
      nftAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    publishedNitroPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setDefaultFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setEmergencyRecoveryAddress(
      emergencyRecoveryAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setExemptedAddress(
      exemptedAddress: PromiseOrValue<string>,
      isExempted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFeeAddress(
      feeAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setNitroPoolOwner(
      previousOwner: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    xGrailToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_DEFAULT_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createNitroPool(
      nftPoolAddress: PromiseOrValue<string>,
      rewardsToken1: PromiseOrValue<string>,
      rewardsToken2: PromiseOrValue<string>,
      settings: NitroPool.SettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    defaultFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyRecoveryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exemptedAddressesLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExemptedAddress(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNftPoolPublishedNitroPool(
      nftPoolAddress: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getNitroPool(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNitroPoolFee(
      nitroPoolAddress: PromiseOrValue<string>,
      ownerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getOwnerNitroPool(
      userAddress: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPublishedNitroPool(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    grailToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isExemptedAddress(checkedAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftPoolPublishedNitroPoolsLength(
      nftPoolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    nitroPoolsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerNitroPoolsLength(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    publishNitroPool(
      nftAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    publishedNitroPoolsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setDefaultFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setEmergencyRecoveryAddress(
      emergencyRecoveryAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setExemptedAddress(
      exemptedAddress: PromiseOrValue<string>,
      isExempted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFeeAddress(
      feeAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setNitroPoolOwner(
      previousOwner: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    xGrailToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
