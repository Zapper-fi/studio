/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface BottoLiquidityMiningInterface extends utils.Interface {
  functions: {
    'botto()': FunctionFragment;
    'bottoEth()': FunctionFragment;
    'deposit(uint256,uint256,uint256)': FunctionFragment;
    'endTime()': FunctionFragment;
    'firstStakeTime()': FunctionFragment;
    'initialize(address,address)': FunctionFragment;
    'owner()': FunctionFragment;
    'payout()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rescueTokens(address,address,uint256)': FunctionFragment;
    'stake(uint256)': FunctionFragment;
    'startTime()': FunctionFragment;
    'totalClaimedRewards()': FunctionFragment;
    'totalRewards()': FunctionFragment;
    'totalStake()': FunctionFragment;
    'totalStakers()': FunctionFragment;
    'totalUserStake(address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'userClaimedRewards(address)': FunctionFragment;
    'withdraw()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'botto'
      | 'bottoEth'
      | 'deposit'
      | 'endTime'
      | 'firstStakeTime'
      | 'initialize'
      | 'owner'
      | 'payout'
      | 'renounceOwnership'
      | 'rescueTokens'
      | 'stake'
      | 'startTime'
      | 'totalClaimedRewards'
      | 'totalRewards'
      | 'totalStake'
      | 'totalStakers'
      | 'totalUserStake'
      | 'transferOwnership'
      | 'userClaimedRewards'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'botto', values?: undefined): string;
  encodeFunctionData(functionFragment: 'bottoEth', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'endTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'firstStakeTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'payout', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'rescueTokens',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'stake', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'startTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalClaimedRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalStake', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalStakers', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalUserStake', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'userClaimedRewards', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'botto', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bottoEth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'endTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'firstStakeTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'payout', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rescueTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalClaimedRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalStakers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalUserStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userClaimedRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Deposit(uint256,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Payout(address,uint256)': EventFragment;
    'Stake(address,uint256)': EventFragment;
    'Withdraw(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Payout'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Stake'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface DepositEventObject {
  totalRewards: BigNumber;
  startTime: BigNumber;
  endTime: BigNumber;
}
export type DepositEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PayoutEventObject {
  staker: string;
  reward: BigNumber;
}
export type PayoutEvent = TypedEvent<[string, BigNumber], PayoutEventObject>;

export type PayoutEventFilter = TypedEventFilter<PayoutEvent>;

export interface StakeEventObject {
  staker: string;
  bottoEthIn: BigNumber;
}
export type StakeEvent = TypedEvent<[string, BigNumber], StakeEventObject>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface WithdrawEventObject {
  staker: string;
  bottoEthOut: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface BottoLiquidityMining extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BottoLiquidityMiningInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    botto(overrides?: CallOverrides): Promise<[string]>;

    bottoEth(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _totalRewards: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    endTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    firstStakeTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _bottoEth: PromiseOrValue<string>,
      _botto: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payout(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    rescueTokens(
      tokenToRescue: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stake(
      bottoEthIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalClaimedRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStake(overrides?: CallOverrides): Promise<[BigNumber] & { total: BigNumber }>;

    totalStakers(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalUserStake(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { total: BigNumber }>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    userClaimedRewards(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;
  };

  botto(overrides?: CallOverrides): Promise<string>;

  bottoEth(overrides?: CallOverrides): Promise<string>;

  deposit(
    _totalRewards: PromiseOrValue<BigNumberish>,
    _startTime: PromiseOrValue<BigNumberish>,
    _endTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  firstStakeTime(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _bottoEth: PromiseOrValue<string>,
    _botto: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  payout(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  rescueTokens(
    tokenToRescue: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stake(
    bottoEthIn: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  totalClaimedRewards(overrides?: CallOverrides): Promise<BigNumber>;

  totalRewards(overrides?: CallOverrides): Promise<BigNumber>;

  totalStake(overrides?: CallOverrides): Promise<BigNumber>;

  totalStakers(overrides?: CallOverrides): Promise<BigNumber>;

  totalUserStake(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  userClaimedRewards(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  callStatic: {
    botto(overrides?: CallOverrides): Promise<string>;

    bottoEth(overrides?: CallOverrides): Promise<string>;

    deposit(
      _totalRewards: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    firstStakeTime(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _bottoEth: PromiseOrValue<string>,
      _botto: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    payout(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescueTokens(
      tokenToRescue: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    stake(bottoEthIn: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalStake(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakers(overrides?: CallOverrides): Promise<BigNumber>;

    totalUserStake(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    userClaimedRewards(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { bottoEthOut: BigNumber; reward: BigNumber }>;
  };

  filters: {
    'Deposit(uint256,uint256,uint256)'(totalRewards?: null, startTime?: null, endTime?: null): DepositEventFilter;
    Deposit(totalRewards?: null, startTime?: null, endTime?: null): DepositEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'Payout(address,uint256)'(staker?: PromiseOrValue<string> | null, reward?: null): PayoutEventFilter;
    Payout(staker?: PromiseOrValue<string> | null, reward?: null): PayoutEventFilter;

    'Stake(address,uint256)'(staker?: PromiseOrValue<string> | null, bottoEthIn?: null): StakeEventFilter;
    Stake(staker?: PromiseOrValue<string> | null, bottoEthIn?: null): StakeEventFilter;

    'Withdraw(address,uint256)'(staker?: PromiseOrValue<string> | null, bottoEthOut?: null): WithdrawEventFilter;
    Withdraw(staker?: PromiseOrValue<string> | null, bottoEthOut?: null): WithdrawEventFilter;
  };

  estimateGas: {
    botto(overrides?: CallOverrides): Promise<BigNumber>;

    bottoEth(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _totalRewards: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    firstStakeTime(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _bottoEth: PromiseOrValue<string>,
      _botto: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payout(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    rescueTokens(
      tokenToRescue: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stake(
      bottoEthIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalStake(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakers(overrides?: CallOverrides): Promise<BigNumber>;

    totalUserStake(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    userClaimedRewards(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    botto(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bottoEth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _totalRewards: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstStakeTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _bottoEth: PromiseOrValue<string>,
      _botto: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payout(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    rescueTokens(
      tokenToRescue: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stake(
      bottoEthIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalClaimedRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalUserStake(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    userClaimedRewards(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;
  };
}
