/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace VVSBoost {
  export type StakeStruct = {
    amount: BigNumberish;
    poolId: BigNumberish;
    weightedAmount: BigNumberish;
    stakeTimestamp: BigNumberish;
    unlockTimestamp: BigNumberish;
    active: boolean;
  };

  export type StakeStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
    amount: BigNumber;
    poolId: BigNumber;
    weightedAmount: BigNumber;
    stakeTimestamp: BigNumber;
    unlockTimestamp: BigNumber;
    active: boolean;
  };
}

export interface VvsBoostInterface extends utils.Interface {
  functions: {
    'PRECISION()': FunctionFragment;
    'accTokenPerShare()': FunctionFragment;
    'activePoolMap(uint256,uint256)': FunctionFragment;
    'add(uint256,uint256)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'batchUpgrade(uint256[],uint256[])': FunctionFragment;
    'batchWithdraw(uint256[])': FunctionFragment;
    'craftsman()': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'deposit(uint256,uint256)': FunctionFragment;
    'depositCraftsman()': FunctionFragment;
    'depositToken()': FunctionFragment;
    'depositTokenPid()': FunctionFragment;
    'getUserInfo(address)': FunctionFragment;
    'getUserStake(address,uint256)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initialize(address,address,address,address,uint256)': FunctionFragment;
    'lastRewardBlock()': FunctionFragment;
    'lastVVSBalance()': FunctionFragment;
    'name()': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingVVS(address)': FunctionFragment;
    'poolInfo(uint256)': FunctionFragment;
    'poolLength()': FunctionFragment;
    'proxiableUUID()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'set(uint256,uint256,uint256)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'upgrade(uint256,uint256)': FunctionFragment;
    'upgradeTo(address)': FunctionFragment;
    'upgradeToAndCall(address,bytes)': FunctionFragment;
    'userInfo(address)': FunctionFragment;
    'vvs()': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'xvvs()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'PRECISION'
      | 'accTokenPerShare'
      | 'activePoolMap'
      | 'add'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'batchUpgrade'
      | 'batchWithdraw'
      | 'craftsman'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit'
      | 'depositCraftsman'
      | 'depositToken'
      | 'depositTokenPid'
      | 'getUserInfo'
      | 'getUserStake'
      | 'increaseAllowance'
      | 'initialize'
      | 'lastRewardBlock'
      | 'lastVVSBalance'
      | 'name'
      | 'owner'
      | 'pendingVVS'
      | 'poolInfo'
      | 'poolLength'
      | 'proxiableUUID'
      | 'renounceOwnership'
      | 'set'
      | 'symbol'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'upgrade'
      | 'upgradeTo'
      | 'upgradeToAndCall'
      | 'userInfo'
      | 'vvs'
      | 'withdraw'
      | 'xvvs',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accTokenPerShare', values?: undefined): string;
  encodeFunctionData(functionFragment: 'activePoolMap', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'add', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'batchUpgrade', values: [BigNumberish[], BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'batchWithdraw', values: [BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'craftsman', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'depositCraftsman', values?: undefined): string;
  encodeFunctionData(functionFragment: 'depositToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'depositTokenPid', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getUserInfo', values: [string]): string;
  encodeFunctionData(functionFragment: 'getUserStake', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string, string, string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'lastRewardBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastVVSBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingVVS', values: [string]): string;
  encodeFunctionData(functionFragment: 'poolInfo', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'poolLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'proxiableUUID', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'set', values: [BigNumberish, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'upgrade', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'upgradeTo', values: [string]): string;
  encodeFunctionData(functionFragment: 'upgradeToAndCall', values: [string, BytesLike]): string;
  encodeFunctionData(functionFragment: 'userInfo', values: [string]): string;
  encodeFunctionData(functionFragment: 'vvs', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'xvvs', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accTokenPerShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activePoolMap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'add', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'batchUpgrade', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'batchWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'craftsman', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositCraftsman', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositTokenPid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastRewardBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastVVSBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingVVS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proxiableUUID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgrade', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeToAndCall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vvs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xvvs', data: BytesLike): Result;

  events: {
    'AddPool(uint256,uint256,uint256)': EventFragment;
    'AdminChanged(address,address)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'BeaconUpgraded(address)': EventFragment;
    'Deposit(address,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'SetPool(uint256,uint256,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Upgrade(address,uint256,uint256,uint256,uint256)': EventFragment;
    'Upgraded(address)': EventFragment;
    'Withdraw(address,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddPool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetPool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Upgrade'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface AddPoolEventObject {
  poolId: BigNumber;
  multiplier: BigNumber;
  lockPeriod: BigNumber;
}
export type AddPoolEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], AddPoolEventObject>;

export type AddPoolEventFilter = TypedEventFilter<AddPoolEvent>;

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<[string, string], AdminChangedEventObject>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<[string], BeaconUpgradedEventObject>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface DepositEventObject {
  user: string;
  pid: BigNumber;
  stakeId: BigNumber;
  amount: BigNumber;
  weightedAmount: BigNumber;
  unlockTimestamp: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface SetPoolEventObject {
  poolId: BigNumber;
  multiplier: BigNumber;
  lockPeriod: BigNumber;
}
export type SetPoolEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], SetPoolEventObject>;

export type SetPoolEventFilter = TypedEventFilter<SetPoolEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UpgradeEventObject {
  user: string;
  stakeId: BigNumber;
  newPid: BigNumber;
  newWeightedAmount: BigNumber;
  newUnlockTimestamp: BigNumber;
}
export type UpgradeEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber, BigNumber], UpgradeEventObject>;

export type UpgradeEventFilter = TypedEventFilter<UpgradeEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface WithdrawEventObject {
  user: string;
  stakeId: BigNumber;
  amount: BigNumber;
  weightedAmount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface VvsBoost extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VvsBoostInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    accTokenPerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    activePoolMap(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    add(
      _multiplier: BigNumberish,
      _lockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    batchUpgrade(
      _stakeIds: BigNumberish[],
      _newPids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    batchWithdraw(
      _stakeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    craftsman(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositCraftsman(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    depositToken(overrides?: CallOverrides): Promise<[string]>;

    depositTokenPid(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserInfo(
      _user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, VVSBoost.StakeStructOutput[]]>;

    getUserStake(
      _user: string,
      _stakeId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[VVSBoost.StakeStructOutput]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _craftsman: string,
      _vvs: string,
      _xvvs: string,
      _depositToken: string,
      _depositTokenPid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    lastRewardBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastVVSBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingVVS(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        multiplier: BigNumber;
        lockPeriod: BigNumber;
        totalStaked: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    set(
      _pid: BigNumberish,
      _multiplier: BigNumberish,
      _lockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    upgrade(
      _stakeId: BigNumberish,
      _newPid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        weightedAmount: BigNumber;
        rewardDebt: BigNumber;
      }
    >;

    vvs(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _stakeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    xvvs(overrides?: CallOverrides): Promise<[string]>;
  };

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  accTokenPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  activePoolMap(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  add(
    _multiplier: BigNumberish,
    _lockPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  batchUpgrade(
    _stakeIds: BigNumberish[],
    _newPids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  batchWithdraw(
    _stakeIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  craftsman(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  deposit(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositCraftsman(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  depositToken(overrides?: CallOverrides): Promise<string>;

  depositTokenPid(overrides?: CallOverrides): Promise<BigNumber>;

  getUserInfo(_user: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber, VVSBoost.StakeStructOutput[]]>;

  getUserStake(_user: string, _stakeId: BigNumberish, overrides?: CallOverrides): Promise<VVSBoost.StakeStructOutput>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _craftsman: string,
    _vvs: string,
    _xvvs: string,
    _depositToken: string,
    _depositTokenPid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

  lastVVSBalance(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingVVS(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      multiplier: BigNumber;
      lockPeriod: BigNumber;
      totalStaked: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  set(
    _pid: BigNumberish,
    _multiplier: BigNumberish,
    _lockPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  upgrade(
    _stakeId: BigNumberish,
    _newPid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      weightedAmount: BigNumber;
      rewardDebt: BigNumber;
    }
  >;

  vvs(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _stakeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  xvvs(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    accTokenPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    activePoolMap(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    add(_multiplier: BigNumberish, _lockPeriod: BigNumberish, overrides?: CallOverrides): Promise<void>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    batchUpgrade(_stakeIds: BigNumberish[], _newPids: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    batchWithdraw(_stakeIds: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    craftsman(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    deposit(_pid: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositCraftsman(overrides?: CallOverrides): Promise<void>;

    depositToken(overrides?: CallOverrides): Promise<string>;

    depositTokenPid(overrides?: CallOverrides): Promise<BigNumber>;

    getUserInfo(
      _user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, VVSBoost.StakeStructOutput[]]>;

    getUserStake(_user: string, _stakeId: BigNumberish, overrides?: CallOverrides): Promise<VVSBoost.StakeStructOutput>;

    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _craftsman: string,
      _vvs: string,
      _xvvs: string,
      _depositToken: string,
      _depositTokenPid: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    lastVVSBalance(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingVVS(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        multiplier: BigNumber;
        lockPeriod: BigNumber;
        totalStaked: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    set(
      _pid: BigNumberish,
      _multiplier: BigNumberish,
      _lockPeriod: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(from: string, to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    upgrade(_stakeId: BigNumberish, _newPid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    upgradeTo(newImplementation: string, overrides?: CallOverrides): Promise<void>;

    upgradeToAndCall(newImplementation: string, data: BytesLike, overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        weightedAmount: BigNumber;
        rewardDebt: BigNumber;
      }
    >;

    vvs(overrides?: CallOverrides): Promise<string>;

    withdraw(_stakeId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    xvvs(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'AddPool(uint256,uint256,uint256)'(
      poolId?: BigNumberish | null,
      multiplier?: null,
      lockPeriod?: null,
    ): AddPoolEventFilter;
    AddPool(poolId?: BigNumberish | null, multiplier?: null, lockPeriod?: null): AddPoolEventFilter;

    'AdminChanged(address,address)'(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
    AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;

    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;

    'BeaconUpgraded(address)'(beacon?: string | null): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    'Deposit(address,uint256,uint256,uint256,uint256,uint256)'(
      user?: string | null,
      pid?: BigNumberish | null,
      stakeId?: BigNumberish | null,
      amount?: null,
      weightedAmount?: null,
      unlockTimestamp?: null,
    ): DepositEventFilter;
    Deposit(
      user?: string | null,
      pid?: BigNumberish | null,
      stakeId?: BigNumberish | null,
      amount?: null,
      weightedAmount?: null,
      unlockTimestamp?: null,
    ): DepositEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    'SetPool(uint256,uint256,uint256)'(
      poolId?: BigNumberish | null,
      multiplier?: null,
      lockPeriod?: null,
    ): SetPoolEventFilter;
    SetPool(poolId?: BigNumberish | null, multiplier?: null, lockPeriod?: null): SetPoolEventFilter;

    'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;

    'Upgrade(address,uint256,uint256,uint256,uint256)'(
      user?: string | null,
      stakeId?: BigNumberish | null,
      newPid?: BigNumberish | null,
      newWeightedAmount?: null,
      newUnlockTimestamp?: null,
    ): UpgradeEventFilter;
    Upgrade(
      user?: string | null,
      stakeId?: BigNumberish | null,
      newPid?: BigNumberish | null,
      newWeightedAmount?: null,
      newUnlockTimestamp?: null,
    ): UpgradeEventFilter;

    'Upgraded(address)'(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    'Withdraw(address,uint256,uint256,uint256)'(
      user?: string | null,
      stakeId?: BigNumberish | null,
      amount?: null,
      weightedAmount?: null,
    ): WithdrawEventFilter;
    Withdraw(
      user?: string | null,
      stakeId?: BigNumberish | null,
      amount?: null,
      weightedAmount?: null,
    ): WithdrawEventFilter;
  };

  estimateGas: {
    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    accTokenPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    activePoolMap(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _multiplier: BigNumberish,
      _lockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    batchUpgrade(
      _stakeIds: BigNumberish[],
      _newPids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    batchWithdraw(
      _stakeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    craftsman(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    depositCraftsman(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    depositToken(overrides?: CallOverrides): Promise<BigNumber>;

    depositTokenPid(overrides?: CallOverrides): Promise<BigNumber>;

    getUserInfo(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUserStake(_user: string, _stakeId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initialize(
      _craftsman: string,
      _vvs: string,
      _xvvs: string,
      _depositToken: string,
      _depositTokenPid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    lastVVSBalance(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingVVS(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _multiplier: BigNumberish,
      _lockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    upgrade(
      _stakeId: BigNumberish,
      _newPid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    vvs(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(_stakeId: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    xvvs(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accTokenPerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activePoolMap(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    add(
      _multiplier: BigNumberish,
      _lockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchUpgrade(
      _stakeIds: BigNumberish[],
      _newPids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    batchWithdraw(
      _stakeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    craftsman(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositCraftsman(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    depositToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositTokenPid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserInfo(_user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserStake(_user: string, _stakeId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _craftsman: string,
      _vvs: string,
      _xvvs: string,
      _depositToken: string,
      _depositTokenPid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    lastRewardBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastVVSBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingVVS(_user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    set(
      _pid: BigNumberish,
      _multiplier: BigNumberish,
      _lockPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    upgrade(
      _stakeId: BigNumberish,
      _newPid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vvs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _stakeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    xvvs(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
