/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface EthArbMessengerInterface extends utils.Interface {
  functions: {
    'inbox()': FunctionFragment;
    'owner()': FunctionFragment;
    'relayMessage(address,address,uint256,uint256,uint256,uint256,bytes)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: 'inbox' | 'owner' | 'relayMessage' | 'renounceOwnership' | 'transferOwnership',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'inbox', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'relayMessage',
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;

  decodeFunctionResult(functionFragment: 'inbox', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'relayMessage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;

  events: {
    'OwnershipTransferred(address,address)': EventFragment;
    'RelayedMessage(address,address,uint256,address,uint256,uint256,uint256,uint256,bytes)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RelayedMessage'): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RelayedMessageEventObject {
  from: string;
  to: string;
  seqNum: BigNumber;
  userToRefund: string;
  l1CallValue: BigNumber;
  gasLimit: BigNumber;
  gasPrice: BigNumber;
  maxSubmissionCost: BigNumber;
  data: string;
}
export type RelayedMessageEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber, string],
  RelayedMessageEventObject
>;

export type RelayedMessageEventFilter = TypedEventFilter<RelayedMessageEvent>;

export interface EthArbMessenger extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EthArbMessengerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    inbox(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    relayMessage(
      target: string,
      userToRefund: string,
      l1CallValue: BigNumberish,
      gasLimit: BigNumberish,
      gasPrice: BigNumberish,
      maxSubmissionCost: BigNumberish,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  inbox(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  relayMessage(
    target: string,
    userToRefund: string,
    l1CallValue: BigNumberish,
    gasLimit: BigNumberish,
    gasPrice: BigNumberish,
    maxSubmissionCost: BigNumberish,
    message: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    inbox(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    relayMessage(
      target: string,
      userToRefund: string,
      l1CallValue: BigNumberish,
      gasLimit: BigNumberish,
      gasPrice: BigNumberish,
      maxSubmissionCost: BigNumberish,
      message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    'RelayedMessage(address,address,uint256,address,uint256,uint256,uint256,uint256,bytes)'(
      from?: string | null,
      to?: string | null,
      seqNum?: BigNumberish | null,
      userToRefund?: null,
      l1CallValue?: null,
      gasLimit?: null,
      gasPrice?: null,
      maxSubmissionCost?: null,
      data?: null,
    ): RelayedMessageEventFilter;
    RelayedMessage(
      from?: string | null,
      to?: string | null,
      seqNum?: BigNumberish | null,
      userToRefund?: null,
      l1CallValue?: null,
      gasLimit?: null,
      gasPrice?: null,
      maxSubmissionCost?: null,
      data?: null,
    ): RelayedMessageEventFilter;
  };

  estimateGas: {
    inbox(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    relayMessage(
      target: string,
      userToRefund: string,
      l1CallValue: BigNumberish,
      gasLimit: BigNumberish,
      gasPrice: BigNumberish,
      maxSubmissionCost: BigNumberish,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    inbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relayMessage(
      target: string,
      userToRefund: string,
      l1CallValue: BigNumberish,
      gasLimit: BigNumberish,
      gasPrice: BigNumberish,
      maxSubmissionCost: BigNumberish,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
