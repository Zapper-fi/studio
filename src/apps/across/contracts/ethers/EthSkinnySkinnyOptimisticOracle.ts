/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace SkinnyOptimisticOracleInterface {
  export type RequestStruct = {
    proposer: PromiseOrValue<string>;
    disputer: PromiseOrValue<string>;
    currency: PromiseOrValue<string>;
    settled: PromiseOrValue<boolean>;
    proposedPrice: PromiseOrValue<BigNumberish>;
    resolvedPrice: PromiseOrValue<BigNumberish>;
    expirationTime: PromiseOrValue<BigNumberish>;
    reward: PromiseOrValue<BigNumberish>;
    finalFee: PromiseOrValue<BigNumberish>;
    bond: PromiseOrValue<BigNumberish>;
    customLiveness: PromiseOrValue<BigNumberish>;
  };

  export type RequestStructOutput = [
    string,
    string,
    string,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    proposer: string;
    disputer: string;
    currency: string;
    settled: boolean;
    proposedPrice: BigNumber;
    resolvedPrice: BigNumber;
    expirationTime: BigNumber;
    reward: BigNumber;
    finalFee: BigNumber;
    bond: BigNumber;
    customLiveness: BigNumber;
  };
}

export interface EthSkinnySkinnyOptimisticOracleInterface extends utils.Interface {
  functions: {
    'ancillaryBytesLimit()': FunctionFragment;
    'defaultLiveness()': FunctionFragment;
    'disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))': FunctionFragment;
    'disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,address)': FunctionFragment;
    'finder()': FunctionFragment;
    'getCurrentTime()': FunctionFragment;
    'getState(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))': FunctionFragment;
    'hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))': FunctionFragment;
    'proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),int256)': FunctionFragment;
    'proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256),address,int256)': FunctionFragment;
    'requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,uint256,uint256,address,int256)': FunctionFragment;
    'requestPrice(bytes32,uint32,bytes,address,uint256,uint256,uint256)': FunctionFragment;
    'requests(bytes32)': FunctionFragment;
    'setCurrentTime(uint256)': FunctionFragment;
    'settle(address,bytes32,uint32,bytes,(address,address,address,bool,int256,int256,uint256,uint256,uint256,uint256,uint256))': FunctionFragment;
    'stampAncillaryData(bytes,address)': FunctionFragment;
    'timerAddress()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'ancillaryBytesLimit'
      | 'defaultLiveness'
      | 'disputePrice'
      | 'disputePriceFor'
      | 'finder'
      | 'getCurrentTime'
      | 'getState'
      | 'hasPrice'
      | 'proposePrice'
      | 'proposePriceFor'
      | 'requestAndProposePriceFor'
      | 'requestPrice'
      | 'requests'
      | 'setCurrentTime'
      | 'settle'
      | 'stampAncillaryData'
      | 'timerAddress',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'ancillaryBytesLimit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'defaultLiveness', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'disputePrice',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      SkinnyOptimisticOracleInterface.RequestStruct,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'disputePriceFor',
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      SkinnyOptimisticOracleInterface.RequestStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'finder', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getCurrentTime', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getState',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      SkinnyOptimisticOracleInterface.RequestStruct,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'hasPrice',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      SkinnyOptimisticOracleInterface.RequestStruct,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'proposePrice',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      SkinnyOptimisticOracleInterface.RequestStruct,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'proposePriceFor',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      SkinnyOptimisticOracleInterface.RequestStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'requestAndProposePriceFor',
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'requestPrice',
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'requests', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'setCurrentTime', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'settle',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      SkinnyOptimisticOracleInterface.RequestStruct,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'stampAncillaryData',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'timerAddress', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'ancillaryBytesLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'defaultLiveness', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disputePrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disputePriceFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'finder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCurrentTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proposePrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proposePriceFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requestAndProposePriceFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requestPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requests', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCurrentTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'settle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stampAncillaryData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timerAddress', data: BytesLike): Result;

  events: {
    'DisputePrice(address,bytes32,uint32,bytes,tuple)': EventFragment;
    'ProposePrice(address,bytes32,uint32,bytes,tuple)': EventFragment;
    'RequestPrice(address,bytes32,uint32,bytes,tuple)': EventFragment;
    'Settle(address,bytes32,uint32,bytes,tuple)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'DisputePrice'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProposePrice'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RequestPrice'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Settle'): EventFragment;
}

export interface DisputePriceEventObject {
  requester: string;
  identifier: string;
  timestamp: number;
  ancillaryData: string;
  request: SkinnyOptimisticOracleInterface.RequestStructOutput;
}
export type DisputePriceEvent = TypedEvent<
  [string, string, number, string, SkinnyOptimisticOracleInterface.RequestStructOutput],
  DisputePriceEventObject
>;

export type DisputePriceEventFilter = TypedEventFilter<DisputePriceEvent>;

export interface ProposePriceEventObject {
  requester: string;
  identifier: string;
  timestamp: number;
  ancillaryData: string;
  request: SkinnyOptimisticOracleInterface.RequestStructOutput;
}
export type ProposePriceEvent = TypedEvent<
  [string, string, number, string, SkinnyOptimisticOracleInterface.RequestStructOutput],
  ProposePriceEventObject
>;

export type ProposePriceEventFilter = TypedEventFilter<ProposePriceEvent>;

export interface RequestPriceEventObject {
  requester: string;
  identifier: string;
  timestamp: number;
  ancillaryData: string;
  request: SkinnyOptimisticOracleInterface.RequestStructOutput;
}
export type RequestPriceEvent = TypedEvent<
  [string, string, number, string, SkinnyOptimisticOracleInterface.RequestStructOutput],
  RequestPriceEventObject
>;

export type RequestPriceEventFilter = TypedEventFilter<RequestPriceEvent>;

export interface SettleEventObject {
  requester: string;
  identifier: string;
  timestamp: number;
  ancillaryData: string;
  request: SkinnyOptimisticOracleInterface.RequestStructOutput;
}
export type SettleEvent = TypedEvent<
  [string, string, number, string, SkinnyOptimisticOracleInterface.RequestStructOutput],
  SettleEventObject
>;

export type SettleEventFilter = TypedEventFilter<SettleEvent>;

export interface EthSkinnySkinnyOptimisticOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EthSkinnySkinnyOptimisticOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ancillaryBytesLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    defaultLiveness(overrides?: CallOverrides): Promise<[BigNumber]>;

    disputePrice(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    disputePriceFor(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      disputer: PromiseOrValue<string>,
      requester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    finder(overrides?: CallOverrides): Promise<[string]>;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getState(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    hasPrice(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    proposePrice(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      proposedPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    proposePriceFor(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      proposer: PromiseOrValue<string>,
      proposedPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    requestAndProposePriceFor(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      bond: PromiseOrValue<BigNumberish>,
      customLiveness: PromiseOrValue<BigNumberish>,
      proposer: PromiseOrValue<string>,
      proposedPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    requestPrice(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      bond: PromiseOrValue<BigNumberish>,
      customLiveness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    requests(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    setCurrentTime(
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    settle(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stampAncillaryData(
      ancillaryData: PromiseOrValue<BytesLike>,
      requester: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    timerAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  ancillaryBytesLimit(overrides?: CallOverrides): Promise<BigNumber>;

  defaultLiveness(overrides?: CallOverrides): Promise<BigNumber>;

  disputePrice(
    requester: PromiseOrValue<string>,
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    request: SkinnyOptimisticOracleInterface.RequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  disputePriceFor(
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    request: SkinnyOptimisticOracleInterface.RequestStruct,
    disputer: PromiseOrValue<string>,
    requester: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  finder(overrides?: CallOverrides): Promise<string>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  getState(
    requester: PromiseOrValue<string>,
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    request: SkinnyOptimisticOracleInterface.RequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  hasPrice(
    requester: PromiseOrValue<string>,
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    request: SkinnyOptimisticOracleInterface.RequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  proposePrice(
    requester: PromiseOrValue<string>,
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    request: SkinnyOptimisticOracleInterface.RequestStruct,
    proposedPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  proposePriceFor(
    requester: PromiseOrValue<string>,
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    request: SkinnyOptimisticOracleInterface.RequestStruct,
    proposer: PromiseOrValue<string>,
    proposedPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  requestAndProposePriceFor(
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    currency: PromiseOrValue<string>,
    reward: PromiseOrValue<BigNumberish>,
    bond: PromiseOrValue<BigNumberish>,
    customLiveness: PromiseOrValue<BigNumberish>,
    proposer: PromiseOrValue<string>,
    proposedPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  requestPrice(
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    currency: PromiseOrValue<string>,
    reward: PromiseOrValue<BigNumberish>,
    bond: PromiseOrValue<BigNumberish>,
    customLiveness: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  requests(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  setCurrentTime(
    time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  settle(
    requester: PromiseOrValue<string>,
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    request: SkinnyOptimisticOracleInterface.RequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stampAncillaryData(
    ancillaryData: PromiseOrValue<BytesLike>,
    requester: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<string>;

  timerAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ancillaryBytesLimit(overrides?: CallOverrides): Promise<BigNumber>;

    defaultLiveness(overrides?: CallOverrides): Promise<BigNumber>;

    disputePrice(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    disputePriceFor(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      disputer: PromiseOrValue<string>,
      requester: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<string>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getState(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: CallOverrides,
    ): Promise<number>;

    hasPrice(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    proposePrice(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      proposedPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    proposePriceFor(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      proposer: PromiseOrValue<string>,
      proposedPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    requestAndProposePriceFor(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      bond: PromiseOrValue<BigNumberish>,
      customLiveness: PromiseOrValue<BigNumberish>,
      proposer: PromiseOrValue<string>,
      proposedPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    requestPrice(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      bond: PromiseOrValue<BigNumberish>,
      customLiveness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    requests(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    setCurrentTime(time: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    settle(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { payout: BigNumber; resolvedPrice: BigNumber }>;

    stampAncillaryData(
      ancillaryData: PromiseOrValue<BytesLike>,
      requester: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>;

    timerAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'DisputePrice(address,bytes32,uint32,bytes,tuple)'(
      requester?: PromiseOrValue<string> | null,
      identifier?: PromiseOrValue<BytesLike> | null,
      timestamp?: null,
      ancillaryData?: null,
      request?: null,
    ): DisputePriceEventFilter;
    DisputePrice(
      requester?: PromiseOrValue<string> | null,
      identifier?: PromiseOrValue<BytesLike> | null,
      timestamp?: null,
      ancillaryData?: null,
      request?: null,
    ): DisputePriceEventFilter;

    'ProposePrice(address,bytes32,uint32,bytes,tuple)'(
      requester?: PromiseOrValue<string> | null,
      identifier?: PromiseOrValue<BytesLike> | null,
      timestamp?: null,
      ancillaryData?: null,
      request?: null,
    ): ProposePriceEventFilter;
    ProposePrice(
      requester?: PromiseOrValue<string> | null,
      identifier?: PromiseOrValue<BytesLike> | null,
      timestamp?: null,
      ancillaryData?: null,
      request?: null,
    ): ProposePriceEventFilter;

    'RequestPrice(address,bytes32,uint32,bytes,tuple)'(
      requester?: PromiseOrValue<string> | null,
      identifier?: PromiseOrValue<BytesLike> | null,
      timestamp?: null,
      ancillaryData?: null,
      request?: null,
    ): RequestPriceEventFilter;
    RequestPrice(
      requester?: PromiseOrValue<string> | null,
      identifier?: PromiseOrValue<BytesLike> | null,
      timestamp?: null,
      ancillaryData?: null,
      request?: null,
    ): RequestPriceEventFilter;

    'Settle(address,bytes32,uint32,bytes,tuple)'(
      requester?: PromiseOrValue<string> | null,
      identifier?: PromiseOrValue<BytesLike> | null,
      timestamp?: null,
      ancillaryData?: null,
      request?: null,
    ): SettleEventFilter;
    Settle(
      requester?: PromiseOrValue<string> | null,
      identifier?: PromiseOrValue<BytesLike> | null,
      timestamp?: null,
      ancillaryData?: null,
      request?: null,
    ): SettleEventFilter;
  };

  estimateGas: {
    ancillaryBytesLimit(overrides?: CallOverrides): Promise<BigNumber>;

    defaultLiveness(overrides?: CallOverrides): Promise<BigNumber>;

    disputePrice(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    disputePriceFor(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      disputer: PromiseOrValue<string>,
      requester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getState(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    hasPrice(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    proposePrice(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      proposedPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    proposePriceFor(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      proposer: PromiseOrValue<string>,
      proposedPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    requestAndProposePriceFor(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      bond: PromiseOrValue<BigNumberish>,
      customLiveness: PromiseOrValue<BigNumberish>,
      proposer: PromiseOrValue<string>,
      proposedPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    requestPrice(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      bond: PromiseOrValue<BigNumberish>,
      customLiveness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    requests(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    setCurrentTime(
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    settle(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stampAncillaryData(
      ancillaryData: PromiseOrValue<BytesLike>,
      requester: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    timerAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ancillaryBytesLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultLiveness(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disputePrice(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    disputePriceFor(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      disputer: PromiseOrValue<string>,
      requester: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getState(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    hasPrice(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    proposePrice(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      proposedPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    proposePriceFor(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      proposer: PromiseOrValue<string>,
      proposedPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    requestAndProposePriceFor(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      bond: PromiseOrValue<BigNumberish>,
      customLiveness: PromiseOrValue<BigNumberish>,
      proposer: PromiseOrValue<string>,
      proposedPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    requestPrice(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      bond: PromiseOrValue<BigNumberish>,
      customLiveness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    requests(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCurrentTime(
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    settle(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      request: SkinnyOptimisticOracleInterface.RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stampAncillaryData(
      ancillaryData: PromiseOrValue<BytesLike>,
      requester: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
