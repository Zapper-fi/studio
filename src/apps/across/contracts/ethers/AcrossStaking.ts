/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace AcceleratingDistributor {
  export type UserDepositStruct = {
    cumulativeBalance: PromiseOrValue<BigNumberish>;
    averageDepositTime: PromiseOrValue<BigNumberish>;
    rewardsAccumulatedPerToken: PromiseOrValue<BigNumberish>;
    rewardsOutstanding: PromiseOrValue<BigNumberish>;
  };

  export type UserDepositStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {
    cumulativeBalance: BigNumber;
    averageDepositTime: BigNumber;
    rewardsAccumulatedPerToken: BigNumber;
    rewardsOutstanding: BigNumber;
  };
}

export interface AcrossStakingInterface extends utils.Interface {
  functions: {
    'baseRewardPerToken(address)': FunctionFragment;
    'configureStakingToken(address,bool,uint256,uint256,uint256)': FunctionFragment;
    'exit(address)': FunctionFragment;
    'getAverageDepositTimePostDeposit(address,address,uint256)': FunctionFragment;
    'getCumulativeStaked(address)': FunctionFragment;
    'getCurrentTime()': FunctionFragment;
    'getOutstandingRewards(address,address)': FunctionFragment;
    'getTimeSinceAverageDeposit(address,address)': FunctionFragment;
    'getUserRewardMultiplier(address,address)': FunctionFragment;
    'getUserStake(address,address)': FunctionFragment;
    'multicall(bytes[])': FunctionFragment;
    'owner()': FunctionFragment;
    'recoverToken(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardToken()': FunctionFragment;
    'stake(address,uint256)': FunctionFragment;
    'stakeFor(address,uint256,address)': FunctionFragment;
    'stakingTokens(address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unstake(address,uint256)': FunctionFragment;
    'withdrawReward(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'baseRewardPerToken'
      | 'configureStakingToken'
      | 'exit'
      | 'getAverageDepositTimePostDeposit'
      | 'getCumulativeStaked'
      | 'getCurrentTime'
      | 'getOutstandingRewards'
      | 'getTimeSinceAverageDeposit'
      | 'getUserRewardMultiplier'
      | 'getUserStake'
      | 'multicall'
      | 'owner'
      | 'recoverToken'
      | 'renounceOwnership'
      | 'rewardToken'
      | 'stake'
      | 'stakeFor'
      | 'stakingTokens'
      | 'transferOwnership'
      | 'unstake'
      | 'withdrawReward',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'baseRewardPerToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'configureStakingToken',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'exit', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getAverageDepositTimePostDeposit',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getCumulativeStaked', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getCurrentTime', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getOutstandingRewards',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getTimeSinceAverageDeposit',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserRewardMultiplier',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserStake',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'multicall', values: [PromiseOrValue<BytesLike>[]]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'recoverToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stake', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'stakeFor',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'stakingTokens', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'unstake',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'withdrawReward', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'baseRewardPerToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'configureStakingToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAverageDepositTimePostDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCumulativeStaked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCurrentTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getOutstandingRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTimeSinceAverageDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserRewardMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'multicall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recoverToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakingTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawReward', data: BytesLike): Result;

  events: {
    'Exit(address,address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'RecoverToken(address,uint256)': EventFragment;
    'RewardsWithdrawn(address,address,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'Stake(address,address,uint256,uint256,uint256,uint256)': EventFragment;
    'TokenConfiguredForStaking(address,bool,uint256,uint256,uint256,uint256)': EventFragment;
    'Unstake(address,address,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Exit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RecoverToken'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardsWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Stake'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenConfiguredForStaking'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unstake'): EventFragment;
}

export interface ExitEventObject {
  token: string;
  user: string;
  tokenCumulativeStaked: BigNumber;
}
export type ExitEvent = TypedEvent<[string, string, BigNumber], ExitEventObject>;

export type ExitEventFilter = TypedEventFilter<ExitEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RecoverTokenEventObject {
  token: string;
  amount: BigNumber;
}
export type RecoverTokenEvent = TypedEvent<[string, BigNumber], RecoverTokenEventObject>;

export type RecoverTokenEventFilter = TypedEventFilter<RecoverTokenEvent>;

export interface RewardsWithdrawnEventObject {
  token: string;
  user: string;
  rewardsToSend: BigNumber;
  tokenLastUpdateTime: BigNumber;
  tokenRewardPerTokenStored: BigNumber;
  userRewardsOutstanding: BigNumber;
  userRewardsPaidPerToken: BigNumber;
}
export type RewardsWithdrawnEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  RewardsWithdrawnEventObject
>;

export type RewardsWithdrawnEventFilter = TypedEventFilter<RewardsWithdrawnEvent>;

export interface StakeEventObject {
  token: string;
  user: string;
  amount: BigNumber;
  averageDepositTime: BigNumber;
  cumulativeBalance: BigNumber;
  tokenCumulativeStaked: BigNumber;
}
export type StakeEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber, BigNumber], StakeEventObject>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface TokenConfiguredForStakingEventObject {
  token: string;
  enabled: boolean;
  baseEmissionRate: BigNumber;
  maxMultiplier: BigNumber;
  secondsToMaxMultiplier: BigNumber;
  lastUpdateTime: BigNumber;
}
export type TokenConfiguredForStakingEvent = TypedEvent<
  [string, boolean, BigNumber, BigNumber, BigNumber, BigNumber],
  TokenConfiguredForStakingEventObject
>;

export type TokenConfiguredForStakingEventFilter = TypedEventFilter<TokenConfiguredForStakingEvent>;

export interface UnstakeEventObject {
  token: string;
  user: string;
  amount: BigNumber;
  remainingCumulativeBalance: BigNumber;
  tokenCumulativeStaked: BigNumber;
}
export type UnstakeEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber], UnstakeEventObject>;

export type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;

export interface AcrossStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AcrossStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    baseRewardPerToken(stakedToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    configureStakingToken(
      stakedToken: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      baseEmissionRate: PromiseOrValue<BigNumberish>,
      maxMultiplier: PromiseOrValue<BigNumberish>,
      secondsToMaxMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    exit(
      stakedToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getAverageDepositTimePostDeposit(
      stakedToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getCumulativeStaked(stakedToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOutstandingRewards(
      stakedToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getTimeSinceAverageDeposit(
      stakedToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getUserRewardMultiplier(
      stakedToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getUserStake(
      stakedToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[AcceleratingDistributor.UserDepositStructOutput]>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recoverToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    stake(
      stakedToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stakeFor(
      stakedToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stakingTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        enabled: boolean;
        baseEmissionRate: BigNumber;
        maxMultiplier: BigNumber;
        secondsToMaxMultiplier: BigNumber;
        cumulativeStaked: BigNumber;
        rewardPerTokenStored: BigNumber;
        lastUpdateTime: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unstake(
      stakedToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawReward(
      stakedToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  baseRewardPerToken(stakedToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  configureStakingToken(
    stakedToken: PromiseOrValue<string>,
    enabled: PromiseOrValue<boolean>,
    baseEmissionRate: PromiseOrValue<BigNumberish>,
    maxMultiplier: PromiseOrValue<BigNumberish>,
    secondsToMaxMultiplier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  exit(
    stakedToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getAverageDepositTimePostDeposit(
    stakedToken: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getCumulativeStaked(stakedToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  getOutstandingRewards(
    stakedToken: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getTimeSinceAverageDeposit(
    stakedToken: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getUserRewardMultiplier(
    stakedToken: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getUserStake(
    stakedToken: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<AcceleratingDistributor.UserDepositStructOutput>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  recoverToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  stake(
    stakedToken: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stakeFor(
    stakedToken: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stakingTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      enabled: boolean;
      baseEmissionRate: BigNumber;
      maxMultiplier: BigNumber;
      secondsToMaxMultiplier: BigNumber;
      cumulativeStaked: BigNumber;
      rewardPerTokenStored: BigNumber;
      lastUpdateTime: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unstake(
    stakedToken: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawReward(
    stakedToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    baseRewardPerToken(stakedToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    configureStakingToken(
      stakedToken: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      baseEmissionRate: PromiseOrValue<BigNumberish>,
      maxMultiplier: PromiseOrValue<BigNumberish>,
      secondsToMaxMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    exit(stakedToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    getAverageDepositTimePostDeposit(
      stakedToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCumulativeStaked(stakedToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getOutstandingRewards(
      stakedToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getTimeSinceAverageDeposit(
      stakedToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserRewardMultiplier(
      stakedToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserStake(
      stakedToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<AcceleratingDistributor.UserDepositStructOutput>;

    multicall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    recoverToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    stake(
      stakedToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    stakeFor(
      stakedToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    stakingTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        enabled: boolean;
        baseEmissionRate: BigNumber;
        maxMultiplier: BigNumber;
        secondsToMaxMultiplier: BigNumber;
        cumulativeStaked: BigNumber;
        rewardPerTokenStored: BigNumber;
        lastUpdateTime: BigNumber;
      }
    >;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    unstake(
      stakedToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawReward(stakedToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Exit(address,address,uint256)'(
      token?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      tokenCumulativeStaked?: null,
    ): ExitEventFilter;
    Exit(
      token?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      tokenCumulativeStaked?: null,
    ): ExitEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'RecoverToken(address,uint256)'(token?: PromiseOrValue<string> | null, amount?: null): RecoverTokenEventFilter;
    RecoverToken(token?: PromiseOrValue<string> | null, amount?: null): RecoverTokenEventFilter;

    'RewardsWithdrawn(address,address,uint256,uint256,uint256,uint256,uint256)'(
      token?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      rewardsToSend?: null,
      tokenLastUpdateTime?: null,
      tokenRewardPerTokenStored?: null,
      userRewardsOutstanding?: null,
      userRewardsPaidPerToken?: null,
    ): RewardsWithdrawnEventFilter;
    RewardsWithdrawn(
      token?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      rewardsToSend?: null,
      tokenLastUpdateTime?: null,
      tokenRewardPerTokenStored?: null,
      userRewardsOutstanding?: null,
      userRewardsPaidPerToken?: null,
    ): RewardsWithdrawnEventFilter;

    'Stake(address,address,uint256,uint256,uint256,uint256)'(
      token?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      amount?: null,
      averageDepositTime?: null,
      cumulativeBalance?: null,
      tokenCumulativeStaked?: null,
    ): StakeEventFilter;
    Stake(
      token?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      amount?: null,
      averageDepositTime?: null,
      cumulativeBalance?: null,
      tokenCumulativeStaked?: null,
    ): StakeEventFilter;

    'TokenConfiguredForStaking(address,bool,uint256,uint256,uint256,uint256)'(
      token?: PromiseOrValue<string> | null,
      enabled?: null,
      baseEmissionRate?: null,
      maxMultiplier?: null,
      secondsToMaxMultiplier?: null,
      lastUpdateTime?: null,
    ): TokenConfiguredForStakingEventFilter;
    TokenConfiguredForStaking(
      token?: PromiseOrValue<string> | null,
      enabled?: null,
      baseEmissionRate?: null,
      maxMultiplier?: null,
      secondsToMaxMultiplier?: null,
      lastUpdateTime?: null,
    ): TokenConfiguredForStakingEventFilter;

    'Unstake(address,address,uint256,uint256,uint256)'(
      token?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      amount?: null,
      remainingCumulativeBalance?: null,
      tokenCumulativeStaked?: null,
    ): UnstakeEventFilter;
    Unstake(
      token?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      amount?: null,
      remainingCumulativeBalance?: null,
      tokenCumulativeStaked?: null,
    ): UnstakeEventFilter;
  };

  estimateGas: {
    baseRewardPerToken(stakedToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    configureStakingToken(
      stakedToken: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      baseEmissionRate: PromiseOrValue<BigNumberish>,
      maxMultiplier: PromiseOrValue<BigNumberish>,
      secondsToMaxMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    exit(
      stakedToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getAverageDepositTimePostDeposit(
      stakedToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCumulativeStaked(stakedToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getOutstandingRewards(
      stakedToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getTimeSinceAverageDeposit(
      stakedToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserRewardMultiplier(
      stakedToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserStake(
      stakedToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recoverToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      stakedToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stakeFor(
      stakedToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stakingTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unstake(
      stakedToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawReward(
      stakedToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    baseRewardPerToken(stakedToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    configureStakingToken(
      stakedToken: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      baseEmissionRate: PromiseOrValue<BigNumberish>,
      maxMultiplier: PromiseOrValue<BigNumberish>,
      secondsToMaxMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    exit(
      stakedToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getAverageDepositTimePostDeposit(
      stakedToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getCumulativeStaked(stakedToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOutstandingRewards(
      stakedToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTimeSinceAverageDeposit(
      stakedToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserRewardMultiplier(
      stakedToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserStake(
      stakedToken: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      stakedToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stakeFor(
      stakedToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stakingTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unstake(
      stakedToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawReward(
      stakedToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
