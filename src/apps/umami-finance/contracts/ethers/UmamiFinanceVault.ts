/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace Vault {
  export type VaultParamsStruct = {
    decimals: PromiseOrValue<BigNumberish>;
    minimumSupply: PromiseOrValue<BigNumberish>;
    cap: PromiseOrValue<BigNumberish>;
    asset: PromiseOrValue<string>;
    stakedGlp: PromiseOrValue<string>;
    esGMX: PromiseOrValue<string>;
    glpPricing: PromiseOrValue<string>;
    hedgePricing: PromiseOrValue<string>;
    sbtcStake: PromiseOrValue<string>;
    sethStake: PromiseOrValue<string>;
  };

  export type VaultParamsStructOutput = [
    number,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
  ] & {
    decimals: number;
    minimumSupply: BigNumber;
    cap: BigNumber;
    asset: string;
    stakedGlp: string;
    esGMX: string;
    glpPricing: string;
    hedgePricing: string;
    sbtcStake: string;
    sethStake: string;
  };

  export type LeverageSetStruct = {
    token: PromiseOrValue<string>;
    poolCommitter: PromiseOrValue<string>;
    leveragePool: PromiseOrValue<string>;
  };

  export type LeverageSetStructOutput = [string, string, string] & {
    token: string;
    poolCommitter: string;
    leveragePool: string;
  };
}

export interface UmamiFinanceVaultInterface extends utils.Interface {
  functions: {
    'ADMIN_ROLE()': FunctionFragment;
    'DAY()': FunctionFragment;
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'GLP_MANAGER()': FunctionFragment;
    'GLP_REWARD_ROUTER()': FunctionFragment;
    'KEEPER_ROLE()': FunctionFragment;
    'MAX_INT()': FunctionFragment;
    'SCALE()': FunctionFragment;
    'TCR()': FunctionFragment;
    'WETH()': FunctionFragment;
    'accountVaultBalance(address)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'asset()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'btcLeverageSets(uint256)': FunctionFragment;
    'cap()': FunctionFragment;
    'chainlinkOracle()': FunctionFragment;
    'checkpointTotalBalance()': FunctionFragment;
    'claimShorts()': FunctionFragment;
    'commitAndClose(uint112,uint112,uint112,bool,bool)': FunctionFragment;
    'completeWithdraw()': FunctionFragment;
    'convertToAssets(uint256)': FunctionFragment;
    'convertToShares(uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'deposit(uint256,address)': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'depositFee()': FunctionFragment;
    'encoder()': FunctionFragment;
    'epochDuration()': FunctionFragment;
    'ethLeverageSets(uint256)': FunctionFragment;
    'feeRecipient()': FunctionFragment;
    'getNextLockedQueued()': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'glpCloseSlippage()': FunctionFragment;
    'glpPricing()': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'hedgePricing()': FunctionFragment;
    'hedgeStakingActive()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initRounds(uint256)': FunctionFragment;
    'initiateMigration()': FunctionFragment;
    'initiateWithdraw(uint256)': FunctionFragment;
    'keeper()': FunctionFragment;
    'lastQueuedWithdrawAmount()': FunctionFragment;
    'lateWithdrawPeriod()': FunctionFragment;
    'lockedInStrategy()': FunctionFragment;
    'managementFee()': FunctionFragment;
    'migrateVault(address)': FunctionFragment;
    'migrationTimestamp()': FunctionFragment;
    'mint(uint256,address)': FunctionFragment;
    'name()': FunctionFragment;
    'openGlpPosition(uint256)': FunctionFragment;
    'pauseDeposits()': FunctionFragment;
    'paused()': FunctionFragment;
    'performanceFee()': FunctionFragment;
    'previewDeposit(uint256)': FunctionFragment;
    'previewMint(uint256)': FunctionFragment;
    'previewWithdraw(uint256)': FunctionFragment;
    'pricePerShare()': FunctionFragment;
    'queueHedgeRebalance(uint256,uint256,uint8,uint8)': FunctionFragment;
    'queueTracerClose(uint256,uint256)': FunctionFragment;
    'queueTracerOpen(uint256,uint256)': FunctionFragment;
    'recoverEth()': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeAllowances()': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'rollToNextPosition()': FunctionFragment;
    'roundPricePerShare(uint256)': FunctionFragment;
    'roundQueuedWithdrawalShares(uint256)': FunctionFragment;
    'router()': FunctionFragment;
    'setBtcLeveragePool((address,address,address),uint256)': FunctionFragment;
    'setCap(uint256)': FunctionFragment;
    'setDepositFee(uint256)': FunctionFragment;
    'setEpochDuration(uint256)': FunctionFragment;
    'setEthLeveragePool((address,address,address),uint256)': FunctionFragment;
    'setFeeRecipient(address)': FunctionFragment;
    'setHedgeStakingActive(bool)': FunctionFragment;
    'setLeverageSetIndex(uint256,uint256)': FunctionFragment;
    'setManagementFee(uint256)': FunctionFragment;
    'setPerformanceFee(uint256)': FunctionFragment;
    'setScale(uint256)': FunctionFragment;
    'setTcrStrategy(address)': FunctionFragment;
    'setWhitelistLibrary(address)': FunctionFragment;
    'setWithdrawalFee(uint256)': FunctionFragment;
    'shares(address)': FunctionFragment;
    'shortBurn()': FunctionFragment;
    'shortMint()': FunctionFragment;
    'strategyState()': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'swapSlippage()': FunctionFragment;
    'symbol()': FunctionFragment;
    'tcrStrategy()': FunctionFragment;
    'totalAssets()': FunctionFragment;
    'totalPending()': FunctionFragment;
    'totalSbtcBalance()': FunctionFragment;
    'totalSethBalance()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'unpauseDeposits()': FunctionFragment;
    'unstakeAllHedges()': FunctionFragment;
    'unstakePartialHedges(uint256,uint256)': FunctionFragment;
    'updateChainlinkWrapper(address)': FunctionFragment;
    'updateGlpPricing(address)': FunctionFragment;
    'updateHedgePricing(address)': FunctionFragment;
    'updateSbtcStaking(address)': FunctionFragment;
    'updateSethStaking(address)': FunctionFragment;
    'updateSwapSlippage(uint256)': FunctionFragment;
    'vaultParams()': FunctionFragment;
    'vaultState()': FunctionFragment;
    'whitelistDeposit(uint256,bytes32[])': FunctionFragment;
    'whitelistLibrary()': FunctionFragment;
    'withdrawalFee()': FunctionFragment;
    'withdrawals(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'ADMIN_ROLE'
      | 'DAY'
      | 'DEFAULT_ADMIN_ROLE'
      | 'GLP_MANAGER'
      | 'GLP_REWARD_ROUTER'
      | 'KEEPER_ROLE'
      | 'MAX_INT'
      | 'SCALE'
      | 'TCR'
      | 'WETH'
      | 'accountVaultBalance'
      | 'allowance'
      | 'approve'
      | 'asset'
      | 'balanceOf'
      | 'btcLeverageSets'
      | 'cap'
      | 'chainlinkOracle'
      | 'checkpointTotalBalance'
      | 'claimShorts'
      | 'commitAndClose'
      | 'completeWithdraw'
      | 'convertToAssets'
      | 'convertToShares'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit(uint256,address)'
      | 'deposit(uint256)'
      | 'depositFee'
      | 'encoder'
      | 'epochDuration'
      | 'ethLeverageSets'
      | 'feeRecipient'
      | 'getNextLockedQueued'
      | 'getRoleAdmin'
      | 'glpCloseSlippage'
      | 'glpPricing'
      | 'grantRole'
      | 'hasRole'
      | 'hedgePricing'
      | 'hedgeStakingActive'
      | 'increaseAllowance'
      | 'initRounds'
      | 'initiateMigration'
      | 'initiateWithdraw'
      | 'keeper'
      | 'lastQueuedWithdrawAmount'
      | 'lateWithdrawPeriod'
      | 'lockedInStrategy'
      | 'managementFee'
      | 'migrateVault'
      | 'migrationTimestamp'
      | 'mint'
      | 'name'
      | 'openGlpPosition'
      | 'pauseDeposits'
      | 'paused'
      | 'performanceFee'
      | 'previewDeposit'
      | 'previewMint'
      | 'previewWithdraw'
      | 'pricePerShare'
      | 'queueHedgeRebalance'
      | 'queueTracerClose'
      | 'queueTracerOpen'
      | 'recoverEth'
      | 'renounceRole'
      | 'revokeAllowances'
      | 'revokeRole'
      | 'rollToNextPosition'
      | 'roundPricePerShare'
      | 'roundQueuedWithdrawalShares'
      | 'router'
      | 'setBtcLeveragePool'
      | 'setCap'
      | 'setDepositFee'
      | 'setEpochDuration'
      | 'setEthLeveragePool'
      | 'setFeeRecipient'
      | 'setHedgeStakingActive'
      | 'setLeverageSetIndex'
      | 'setManagementFee'
      | 'setPerformanceFee'
      | 'setScale'
      | 'setTcrStrategy'
      | 'setWhitelistLibrary'
      | 'setWithdrawalFee'
      | 'shares'
      | 'shortBurn'
      | 'shortMint'
      | 'strategyState'
      | 'supportsInterface'
      | 'swapSlippage'
      | 'symbol'
      | 'tcrStrategy'
      | 'totalAssets'
      | 'totalPending'
      | 'totalSbtcBalance'
      | 'totalSethBalance'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'unpauseDeposits'
      | 'unstakeAllHedges'
      | 'unstakePartialHedges'
      | 'updateChainlinkWrapper'
      | 'updateGlpPricing'
      | 'updateHedgePricing'
      | 'updateSbtcStaking'
      | 'updateSethStaking'
      | 'updateSwapSlippage'
      | 'vaultParams'
      | 'vaultState'
      | 'whitelistDeposit'
      | 'whitelistLibrary'
      | 'withdrawalFee'
      | 'withdrawals',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DAY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'GLP_MANAGER', values?: undefined): string;
  encodeFunctionData(functionFragment: 'GLP_REWARD_ROUTER', values?: undefined): string;
  encodeFunctionData(functionFragment: 'KEEPER_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_INT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SCALE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'TCR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'WETH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accountVaultBalance', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'asset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'btcLeverageSets', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'cap', values?: undefined): string;
  encodeFunctionData(functionFragment: 'chainlinkOracle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'checkpointTotalBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimShorts', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'commitAndClose',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'completeWithdraw', values?: undefined): string;
  encodeFunctionData(functionFragment: 'convertToAssets', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'convertToShares', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit(uint256,address)',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'deposit(uint256)', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'depositFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'encoder', values?: undefined): string;
  encodeFunctionData(functionFragment: 'epochDuration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ethLeverageSets', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'feeRecipient', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getNextLockedQueued', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'glpCloseSlippage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'glpPricing', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'hedgePricing', values?: undefined): string;
  encodeFunctionData(functionFragment: 'hedgeStakingActive', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'initRounds', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'initiateMigration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initiateWithdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'keeper', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastQueuedWithdrawAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lateWithdrawPeriod', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lockedInStrategy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'managementFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'migrateVault', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'migrationTimestamp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mint', values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'openGlpPosition', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'pauseDeposits', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'performanceFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'previewDeposit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'previewMint', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'previewWithdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'pricePerShare', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'queueHedgeRebalance',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'queueTracerClose',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'queueTracerOpen',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'recoverEth', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'revokeAllowances', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'rollToNextPosition', values?: undefined): string;
  encodeFunctionData(functionFragment: 'roundPricePerShare', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'roundQueuedWithdrawalShares', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'router', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setBtcLeveragePool',
    values: [Vault.LeverageSetStruct, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setCap', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setDepositFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setEpochDuration', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setEthLeveragePool',
    values: [Vault.LeverageSetStruct, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setFeeRecipient', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setHedgeStakingActive', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(
    functionFragment: 'setLeverageSetIndex',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setManagementFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setPerformanceFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setScale', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setTcrStrategy', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setWhitelistLibrary', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setWithdrawalFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'shares', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'shortBurn', values?: undefined): string;
  encodeFunctionData(functionFragment: 'shortMint', values?: undefined): string;
  encodeFunctionData(functionFragment: 'strategyState', values?: undefined): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'swapSlippage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tcrStrategy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalAssets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalPending', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSbtcBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSethBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'unpauseDeposits', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unstakeAllHedges', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'unstakePartialHedges',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'updateChainlinkWrapper', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateGlpPricing', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateHedgePricing', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateSbtcStaking', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateSethStaking', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateSwapSlippage', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'vaultParams', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vaultState', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'whitelistDeposit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>[]],
  ): string;
  encodeFunctionData(functionFragment: 'whitelistLibrary', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawalFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawals', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DAY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'GLP_MANAGER', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'GLP_REWARD_ROUTER', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'KEEPER_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_INT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SCALE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'TCR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'WETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountVaultBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'btcLeverageSets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'chainlinkOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkpointTotalBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimShorts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'commitAndClose', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'completeWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertToAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertToShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit(uint256,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit(uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'encoder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'epochDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ethLeverageSets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeRecipient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNextLockedQueued', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'glpCloseSlippage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'glpPricing', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hedgePricing', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hedgeStakingActive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initRounds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initiateMigration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initiateWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'keeper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastQueuedWithdrawAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lateWithdrawPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockedInStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'managementFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migrateVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migrationTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'openGlpPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pauseDeposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'performanceFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pricePerShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queueHedgeRebalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queueTracerClose', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queueTracerOpen', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recoverEth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeAllowances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rollToNextPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'roundPricePerShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'roundQueuedWithdrawalShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'router', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBtcLeveragePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDepositFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEpochDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEthLeveragePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeRecipient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setHedgeStakingActive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLeverageSetIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setManagementFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPerformanceFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setScale', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTcrStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWhitelistLibrary', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWithdrawalFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'shares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'shortBurn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'shortMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategyState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapSlippage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tcrStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalPending', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSbtcBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSethBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpauseDeposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstakeAllHedges', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstakePartialHedges', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateChainlinkWrapper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateGlpPricing', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateHedgePricing', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateSbtcStaking', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateSethStaking', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateSwapSlippage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaultParams', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaultState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistLibrary', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawalFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawals', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'CapSet(uint256,uint256)': EventFragment;
    'CollectVaultFees(uint256,uint256,uint256,address)': EventFragment;
    'CommitAndClose(uint104,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'Deposit(address,address,uint256,uint256)': EventFragment;
    'DepositFeeSet(uint256,uint256)': EventFragment;
    'DepositRound(address,uint256,uint256)': EventFragment;
    'InitiateVaultMigration(uint256,uint256)': EventFragment;
    'InitiateWithdraw(address,uint256,uint256)': EventFragment;
    'ManagementFeeSet(uint256,uint256)': EventFragment;
    'Paused(address)': EventFragment;
    'PerformanceFeeSet(uint256,uint256)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'RollToNextPosition(uint256,uint256)': EventFragment;
    'TracerClose(uint256,uint256)': EventFragment;
    'TracerOpen(uint256,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
    'UpdatePricePerShare(uint104,uint256)': EventFragment;
    'Withdraw(address,uint256,uint256)': EventFragment;
    'WithdrawalFeeSet(uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CapSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollectVaultFees'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CommitAndClose'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositFeeSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositRound'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InitiateVaultMigration'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InitiateWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ManagementFeeSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PerformanceFeeSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RollToNextPosition'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TracerClose'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TracerOpen'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatePricePerShare'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawalFeeSet'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface CapSetEventObject {
  oldCap: BigNumber;
  newCap: BigNumber;
}
export type CapSetEvent = TypedEvent<[BigNumber, BigNumber], CapSetEventObject>;

export type CapSetEventFilter = TypedEventFilter<CapSetEvent>;

export interface CollectVaultFeesEventObject {
  performanceFee: BigNumber;
  vaultFee: BigNumber;
  round: BigNumber;
  feeRecipient: string;
}
export type CollectVaultFeesEvent = TypedEvent<[BigNumber, BigNumber, BigNumber, string], CollectVaultFeesEventObject>;

export type CollectVaultFeesEventFilter = TypedEventFilter<CollectVaultFeesEvent>;

export interface CommitAndCloseEventObject {
  _round: BigNumber;
  _timestamp: BigNumber;
  _profitAmount: BigNumber;
  _glpAllocation: BigNumber;
  _sbtcAllocation: BigNumber;
  _sethAllocation: BigNumber;
}
export type CommitAndCloseEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  CommitAndCloseEventObject
>;

export type CommitAndCloseEventFilter = TypedEventFilter<CommitAndCloseEvent>;

export interface DepositEventObject {
  caller: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type DepositEvent = TypedEvent<[string, string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DepositFeeSetEventObject {
  depositFee: BigNumber;
  newDepositFee: BigNumber;
}
export type DepositFeeSetEvent = TypedEvent<[BigNumber, BigNumber], DepositFeeSetEventObject>;

export type DepositFeeSetEventFilter = TypedEventFilter<DepositFeeSetEvent>;

export interface DepositRoundEventObject {
  account: string;
  amount: BigNumber;
  round: BigNumber;
}
export type DepositRoundEvent = TypedEvent<[string, BigNumber, BigNumber], DepositRoundEventObject>;

export type DepositRoundEventFilter = TypedEventFilter<DepositRoundEvent>;

export interface InitiateVaultMigrationEventObject {
  _timestamp: BigNumber;
  _migrationActiveTimestamp: BigNumber;
}
export type InitiateVaultMigrationEvent = TypedEvent<[BigNumber, BigNumber], InitiateVaultMigrationEventObject>;

export type InitiateVaultMigrationEventFilter = TypedEventFilter<InitiateVaultMigrationEvent>;

export interface InitiateWithdrawEventObject {
  account: string;
  shares: BigNumber;
  round: BigNumber;
}
export type InitiateWithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], InitiateWithdrawEventObject>;

export type InitiateWithdrawEventFilter = TypedEventFilter<InitiateWithdrawEvent>;

export interface ManagementFeeSetEventObject {
  managementFee: BigNumber;
  newManagementFee: BigNumber;
}
export type ManagementFeeSetEvent = TypedEvent<[BigNumber, BigNumber], ManagementFeeSetEventObject>;

export type ManagementFeeSetEventFilter = TypedEventFilter<ManagementFeeSetEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PerformanceFeeSetEventObject {
  performanceFee: BigNumber;
  newPerformanceFee: BigNumber;
}
export type PerformanceFeeSetEvent = TypedEvent<[BigNumber, BigNumber], PerformanceFeeSetEventObject>;

export type PerformanceFeeSetEventFilter = TypedEventFilter<PerformanceFeeSetEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface RollToNextPositionEventObject {
  _lockedInStrategy: BigNumber;
  _queuedWithdrawAmount: BigNumber;
}
export type RollToNextPositionEvent = TypedEvent<[BigNumber, BigNumber], RollToNextPositionEventObject>;

export type RollToNextPositionEventFilter = TypedEventFilter<RollToNextPositionEvent>;

export interface TracerCloseEventObject {
  _sbtcAllocation: BigNumber;
  _sethAllocation: BigNumber;
}
export type TracerCloseEvent = TypedEvent<[BigNumber, BigNumber], TracerCloseEventObject>;

export type TracerCloseEventFilter = TypedEventFilter<TracerCloseEvent>;

export interface TracerOpenEventObject {
  _sbtcAllocation: BigNumber;
  _sethAllocation: BigNumber;
}
export type TracerOpenEvent = TypedEvent<[BigNumber, BigNumber], TracerOpenEventObject>;

export type TracerOpenEventFilter = TypedEventFilter<TracerOpenEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpdatePricePerShareEventObject {
  _round: BigNumber;
  _pricePerShare: BigNumber;
}
export type UpdatePricePerShareEvent = TypedEvent<[BigNumber, BigNumber], UpdatePricePerShareEventObject>;

export type UpdatePricePerShareEventFilter = TypedEventFilter<UpdatePricePerShareEvent>;

export interface WithdrawEventObject {
  account: string;
  amount: BigNumber;
  shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawalFeeSetEventObject {
  withdrawalFee: BigNumber;
  newWithdrawalFee: BigNumber;
}
export type WithdrawalFeeSetEvent = TypedEvent<[BigNumber, BigNumber], WithdrawalFeeSetEventObject>;

export type WithdrawalFeeSetEventFilter = TypedEventFilter<WithdrawalFeeSetEvent>;

export interface UmamiFinanceVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UmamiFinanceVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DAY(overrides?: CallOverrides): Promise<[number]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    GLP_MANAGER(overrides?: CallOverrides): Promise<[string]>;

    GLP_REWARD_ROUTER(overrides?: CallOverrides): Promise<[string]>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MAX_INT(overrides?: CallOverrides): Promise<[BigNumber]>;

    SCALE(overrides?: CallOverrides): Promise<[BigNumber]>;

    TCR(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    accountVaultBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    btcLeverageSets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string] & {
        token: string;
        poolCommitter: string;
        leveragePool: string;
      }
    >;

    cap(overrides?: CallOverrides): Promise<[BigNumber]>;

    chainlinkOracle(overrides?: CallOverrides): Promise<[string]>;

    checkpointTotalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimShorts(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    commitAndClose(
      nextSbtcAllocation: PromiseOrValue<BigNumberish>,
      nextSethAllocation: PromiseOrValue<BigNumberish>,
      nextGlpAllocation: PromiseOrValue<BigNumberish>,
      _settlePositions: PromiseOrValue<boolean>,
      _handleTcrEmissions: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    completeWithdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    convertToAssets(_shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    convertToShares(_assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'deposit(uint256,address)'(
      amount: PromiseOrValue<BigNumberish>,
      creditor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'deposit(uint256)'(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    encoder(overrides?: CallOverrides): Promise<[string]>;

    epochDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    ethLeverageSets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string] & {
        token: string;
        poolCommitter: string;
        leveragePool: string;
      }
    >;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    getNextLockedQueued(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        lockedBalance: BigNumber;
        queuedWithdrawAmount: BigNumber;
      }
    >;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    glpCloseSlippage(overrides?: CallOverrides): Promise<[BigNumber]>;

    glpPricing(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    hedgePricing(overrides?: CallOverrides): Promise<[string]>;

    hedgeStakingActive(overrides?: CallOverrides): Promise<[boolean]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initRounds(
      numRounds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initiateMigration(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    initiateWithdraw(
      numShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    lastQueuedWithdrawAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    lateWithdrawPeriod(overrides?: CallOverrides): Promise<[boolean]>;

    lockedInStrategy(overrides?: CallOverrides): Promise<[BigNumber]>;

    managementFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    migrateVault(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    migrationTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      _shares: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    openGlpPosition(
      glpAllocation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    pauseDeposits(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    performanceFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    previewDeposit(_assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    previewMint(_shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    previewWithdraw(_shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    pricePerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    queueHedgeRebalance(
      sbtcAllocation: PromiseOrValue<BigNumberish>,
      sethAllocation: PromiseOrValue<BigNumberish>,
      sethAction: PromiseOrValue<BigNumberish>,
      sbtcAction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    queueTracerClose(
      sbtcAllocation: PromiseOrValue<BigNumberish>,
      sethAllocation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    queueTracerOpen(
      sbtcAllocation: PromiseOrValue<BigNumberish>,
      sethAllocation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    recoverEth(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    revokeAllowances(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    rollToNextPosition(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    roundPricePerShare(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    roundQueuedWithdrawalShares(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setBtcLeveragePool(
      _leverageSet: Vault.LeverageSetStruct,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setCap(
      newCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDepositFee(
      newDepositFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setEpochDuration(
      _newEpochDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setEthLeveragePool(
      _leverageSet: Vault.LeverageSetStruct,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFeeRecipient(
      newFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setHedgeStakingActive(
      _stakingActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLeverageSetIndex(
      _btcLeverageSet: PromiseOrValue<BigNumberish>,
      _ethLeverageSet: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setManagementFee(
      newManagementFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPerformanceFee(
      newPerformanceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setScale(
      _newScale: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTcrStrategy(
      _tcrStrategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setWhitelistLibrary(
      _newWhitelistLibrary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setWithdrawalFee(
      newWithdrawalFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    shares(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    shortBurn(overrides?: CallOverrides): Promise<[number]>;

    shortMint(overrides?: CallOverrides): Promise<[number]>;

    strategyState(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        activeSbtcAllocation: BigNumber;
        activeSethAllocation: BigNumber;
        activeGlpAllocation: BigNumber;
        activeBtcLeverageIndex: BigNumber;
        activeEthLeverageIndex: BigNumber;
        nextSbtcAllocation: BigNumber;
        nextSethAllocation: BigNumber;
        nextGlpAllocation: BigNumber;
      }
    >;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

    swapSlippage(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tcrStrategy(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber] & { totalBal: BigNumber }>;

    totalPending(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSbtcBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSethBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unpauseDeposits(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    unstakeAllHedges(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    unstakePartialHedges(
      _sbtcAmount: PromiseOrValue<BigNumberish>,
      _sethAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateChainlinkWrapper(
      _chainlinkWrapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateGlpPricing(
      _glpPricing: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateHedgePricing(
      _hedgePricing: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateSbtcStaking(
      _sbtcStaking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateSethStaking(
      _sethStaking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateSwapSlippage(
      _newSlippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    vaultParams(overrides?: CallOverrides): Promise<
      [number, BigNumber, BigNumber, string, string, string, string, string, string, string] & {
        decimals: number;
        minimumSupply: BigNumber;
        cap: BigNumber;
        asset: string;
        stakedGlp: string;
        esGMX: string;
        glpPricing: string;
        hedgePricing: string;
        sbtcStake: string;
        sethStake: string;
      }
    >;

    vaultState(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        round: BigNumber;
        lockedAmount: BigNumber;
        lastLockedAmount: BigNumber;
        totalPending: BigNumber;
        queuedWithdrawShares: BigNumber;
        epochStart: BigNumber;
        epochEnd: BigNumber;
      }
    >;

    whitelistDeposit(
      amount: PromiseOrValue<BigNumberish>,
      merkleproof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    whitelistLibrary(overrides?: CallOverrides): Promise<[string]>;

    withdrawalFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[number, BigNumber] & { round: number; shares: BigNumber }>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DAY(overrides?: CallOverrides): Promise<number>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  GLP_MANAGER(overrides?: CallOverrides): Promise<string>;

  GLP_REWARD_ROUTER(overrides?: CallOverrides): Promise<string>;

  KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

  MAX_INT(overrides?: CallOverrides): Promise<BigNumber>;

  SCALE(overrides?: CallOverrides): Promise<BigNumber>;

  TCR(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  accountVaultBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  btcLeverageSets(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, string] & {
      token: string;
      poolCommitter: string;
      leveragePool: string;
    }
  >;

  cap(overrides?: CallOverrides): Promise<BigNumber>;

  chainlinkOracle(overrides?: CallOverrides): Promise<string>;

  checkpointTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  claimShorts(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  commitAndClose(
    nextSbtcAllocation: PromiseOrValue<BigNumberish>,
    nextSethAllocation: PromiseOrValue<BigNumberish>,
    nextGlpAllocation: PromiseOrValue<BigNumberish>,
    _settlePositions: PromiseOrValue<boolean>,
    _handleTcrEmissions: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  completeWithdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  convertToAssets(_shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  convertToShares(_assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'deposit(uint256,address)'(
    amount: PromiseOrValue<BigNumberish>,
    creditor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'deposit(uint256)'(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositFee(overrides?: CallOverrides): Promise<BigNumber>;

  encoder(overrides?: CallOverrides): Promise<string>;

  epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

  ethLeverageSets(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, string] & {
      token: string;
      poolCommitter: string;
      leveragePool: string;
    }
  >;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  getNextLockedQueued(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber] & {
      lockedBalance: BigNumber;
      queuedWithdrawAmount: BigNumber;
    }
  >;

  getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  glpCloseSlippage(overrides?: CallOverrides): Promise<BigNumber>;

  glpPricing(overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  hedgePricing(overrides?: CallOverrides): Promise<string>;

  hedgeStakingActive(overrides?: CallOverrides): Promise<boolean>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initRounds(
    numRounds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initiateMigration(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  initiateWithdraw(
    numShares: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  keeper(overrides?: CallOverrides): Promise<string>;

  lastQueuedWithdrawAmount(overrides?: CallOverrides): Promise<BigNumber>;

  lateWithdrawPeriod(overrides?: CallOverrides): Promise<boolean>;

  lockedInStrategy(overrides?: CallOverrides): Promise<BigNumber>;

  managementFee(overrides?: CallOverrides): Promise<BigNumber>;

  migrateVault(
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  migrationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    _shares: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  openGlpPosition(
    glpAllocation: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  pauseDeposits(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

  previewDeposit(_assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  previewMint(_shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  previewWithdraw(_shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

  queueHedgeRebalance(
    sbtcAllocation: PromiseOrValue<BigNumberish>,
    sethAllocation: PromiseOrValue<BigNumberish>,
    sethAction: PromiseOrValue<BigNumberish>,
    sbtcAction: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  queueTracerClose(
    sbtcAllocation: PromiseOrValue<BigNumberish>,
    sethAllocation: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  queueTracerOpen(
    sbtcAllocation: PromiseOrValue<BigNumberish>,
    sethAllocation: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  recoverEth(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  revokeAllowances(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  rollToNextPosition(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  roundPricePerShare(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  roundQueuedWithdrawalShares(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  router(overrides?: CallOverrides): Promise<string>;

  setBtcLeveragePool(
    _leverageSet: Vault.LeverageSetStruct,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setCap(
    newCap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDepositFee(
    newDepositFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setEpochDuration(
    _newEpochDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setEthLeveragePool(
    _leverageSet: Vault.LeverageSetStruct,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFeeRecipient(
    newFeeRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setHedgeStakingActive(
    _stakingActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLeverageSetIndex(
    _btcLeverageSet: PromiseOrValue<BigNumberish>,
    _ethLeverageSet: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setManagementFee(
    newManagementFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPerformanceFee(
    newPerformanceFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setScale(
    _newScale: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTcrStrategy(
    _tcrStrategy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setWhitelistLibrary(
    _newWhitelistLibrary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setWithdrawalFee(
    newWithdrawalFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  shares(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  shortBurn(overrides?: CallOverrides): Promise<number>;

  shortMint(overrides?: CallOverrides): Promise<number>;

  strategyState(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      activeSbtcAllocation: BigNumber;
      activeSethAllocation: BigNumber;
      activeGlpAllocation: BigNumber;
      activeBtcLeverageIndex: BigNumber;
      activeEthLeverageIndex: BigNumber;
      nextSbtcAllocation: BigNumber;
      nextSethAllocation: BigNumber;
      nextGlpAllocation: BigNumber;
    }
  >;

  supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  swapSlippage(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tcrStrategy(overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalPending(overrides?: CallOverrides): Promise<BigNumber>;

  totalSbtcBalance(overrides?: CallOverrides): Promise<BigNumber>;

  totalSethBalance(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unpauseDeposits(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  unstakeAllHedges(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  unstakePartialHedges(
    _sbtcAmount: PromiseOrValue<BigNumberish>,
    _sethAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateChainlinkWrapper(
    _chainlinkWrapper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateGlpPricing(
    _glpPricing: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateHedgePricing(
    _hedgePricing: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateSbtcStaking(
    _sbtcStaking: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateSethStaking(
    _sethStaking: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateSwapSlippage(
    _newSlippage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  vaultParams(overrides?: CallOverrides): Promise<
    [number, BigNumber, BigNumber, string, string, string, string, string, string, string] & {
      decimals: number;
      minimumSupply: BigNumber;
      cap: BigNumber;
      asset: string;
      stakedGlp: string;
      esGMX: string;
      glpPricing: string;
      hedgePricing: string;
      sbtcStake: string;
      sethStake: string;
    }
  >;

  vaultState(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      round: BigNumber;
      lockedAmount: BigNumber;
      lastLockedAmount: BigNumber;
      totalPending: BigNumber;
      queuedWithdrawShares: BigNumber;
      epochStart: BigNumber;
      epochEnd: BigNumber;
    }
  >;

  whitelistDeposit(
    amount: PromiseOrValue<BigNumberish>,
    merkleproof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  whitelistLibrary(overrides?: CallOverrides): Promise<string>;

  withdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawals(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[number, BigNumber] & { round: number; shares: BigNumber }>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DAY(overrides?: CallOverrides): Promise<number>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    GLP_MANAGER(overrides?: CallOverrides): Promise<string>;

    GLP_REWARD_ROUTER(overrides?: CallOverrides): Promise<string>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<string>;

    MAX_INT(overrides?: CallOverrides): Promise<BigNumber>;

    SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    TCR(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    accountVaultBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    btcLeverageSets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string] & {
        token: string;
        poolCommitter: string;
        leveragePool: string;
      }
    >;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    chainlinkOracle(overrides?: CallOverrides): Promise<string>;

    checkpointTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    claimShorts(overrides?: CallOverrides): Promise<void>;

    commitAndClose(
      nextSbtcAllocation: PromiseOrValue<BigNumberish>,
      nextSethAllocation: PromiseOrValue<BigNumberish>,
      nextGlpAllocation: PromiseOrValue<BigNumberish>,
      _settlePositions: PromiseOrValue<boolean>,
      _handleTcrEmissions: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    completeWithdraw(overrides?: CallOverrides): Promise<void>;

    convertToAssets(_shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    convertToShares(_assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'deposit(uint256,address)'(
      amount: PromiseOrValue<BigNumberish>,
      creditor: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'deposit(uint256)'(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    encoder(overrides?: CallOverrides): Promise<string>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    ethLeverageSets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string] & {
        token: string;
        poolCommitter: string;
        leveragePool: string;
      }
    >;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    getNextLockedQueued(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        lockedBalance: BigNumber;
        queuedWithdrawAmount: BigNumber;
      }
    >;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    glpCloseSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    glpPricing(overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    hedgePricing(overrides?: CallOverrides): Promise<string>;

    hedgeStakingActive(overrides?: CallOverrides): Promise<boolean>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    initRounds(numRounds: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    initiateMigration(overrides?: CallOverrides): Promise<void>;

    initiateWithdraw(numShares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    keeper(overrides?: CallOverrides): Promise<string>;

    lastQueuedWithdrawAmount(overrides?: CallOverrides): Promise<BigNumber>;

    lateWithdrawPeriod(overrides?: CallOverrides): Promise<boolean>;

    lockedInStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    managementFee(overrides?: CallOverrides): Promise<BigNumber>;

    migrateVault(_receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    migrationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _shares: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    openGlpPosition(glpAllocation: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    pauseDeposits(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    previewDeposit(_assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewMint(_shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewWithdraw(_shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    queueHedgeRebalance(
      sbtcAllocation: PromiseOrValue<BigNumberish>,
      sethAllocation: PromiseOrValue<BigNumberish>,
      sethAction: PromiseOrValue<BigNumberish>,
      sbtcAction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    queueTracerClose(
      sbtcAllocation: PromiseOrValue<BigNumberish>,
      sethAllocation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    queueTracerOpen(
      sbtcAllocation: PromiseOrValue<BigNumberish>,
      sethAllocation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    recoverEth(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    revokeAllowances(overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    rollToNextPosition(overrides?: CallOverrides): Promise<void>;

    roundPricePerShare(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    roundQueuedWithdrawalShares(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<string>;

    setBtcLeveragePool(
      _leverageSet: Vault.LeverageSetStruct,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setCap(newCap: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setDepositFee(newDepositFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setEpochDuration(_newEpochDuration: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setEthLeveragePool(
      _leverageSet: Vault.LeverageSetStruct,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setFeeRecipient(newFeeRecipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setHedgeStakingActive(_stakingActive: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setLeverageSetIndex(
      _btcLeverageSet: PromiseOrValue<BigNumberish>,
      _ethLeverageSet: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setManagementFee(newManagementFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setPerformanceFee(newPerformanceFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setScale(_newScale: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setTcrStrategy(_tcrStrategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setWhitelistLibrary(_newWhitelistLibrary: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setWithdrawalFee(newWithdrawalFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    shares(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    shortBurn(overrides?: CallOverrides): Promise<number>;

    shortMint(overrides?: CallOverrides): Promise<number>;

    strategyState(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        activeSbtcAllocation: BigNumber;
        activeSethAllocation: BigNumber;
        activeGlpAllocation: BigNumber;
        activeBtcLeverageIndex: BigNumber;
        activeEthLeverageIndex: BigNumber;
        nextSbtcAllocation: BigNumber;
        nextSethAllocation: BigNumber;
        nextGlpAllocation: BigNumber;
      }
    >;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    swapSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tcrStrategy(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalPending(overrides?: CallOverrides): Promise<BigNumber>;

    totalSbtcBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalSethBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    unpauseDeposits(overrides?: CallOverrides): Promise<void>;

    unstakeAllHedges(overrides?: CallOverrides): Promise<void>;

    unstakePartialHedges(
      _sbtcAmount: PromiseOrValue<BigNumberish>,
      _sethAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateChainlinkWrapper(_chainlinkWrapper: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateGlpPricing(_glpPricing: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateHedgePricing(_hedgePricing: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateSbtcStaking(_sbtcStaking: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateSethStaking(_sethStaking: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateSwapSlippage(_newSlippage: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    vaultParams(overrides?: CallOverrides): Promise<
      [number, BigNumber, BigNumber, string, string, string, string, string, string, string] & {
        decimals: number;
        minimumSupply: BigNumber;
        cap: BigNumber;
        asset: string;
        stakedGlp: string;
        esGMX: string;
        glpPricing: string;
        hedgePricing: string;
        sbtcStake: string;
        sethStake: string;
      }
    >;

    vaultState(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        round: BigNumber;
        lockedAmount: BigNumber;
        lastLockedAmount: BigNumber;
        totalPending: BigNumber;
        queuedWithdrawShares: BigNumber;
        epochStart: BigNumber;
        epochEnd: BigNumber;
      }
    >;

    whitelistDeposit(
      amount: PromiseOrValue<BigNumberish>,
      merkleproof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    whitelistLibrary(overrides?: CallOverrides): Promise<string>;

    withdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[number, BigNumber] & { round: number; shares: BigNumber }>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'CapSet(uint256,uint256)'(oldCap?: null, newCap?: null): CapSetEventFilter;
    CapSet(oldCap?: null, newCap?: null): CapSetEventFilter;

    'CollectVaultFees(uint256,uint256,uint256,address)'(
      performanceFee?: null,
      vaultFee?: null,
      round?: null,
      feeRecipient?: PromiseOrValue<string> | null,
    ): CollectVaultFeesEventFilter;
    CollectVaultFees(
      performanceFee?: null,
      vaultFee?: null,
      round?: null,
      feeRecipient?: PromiseOrValue<string> | null,
    ): CollectVaultFeesEventFilter;

    'CommitAndClose(uint104,uint256,uint256,uint256,uint256,uint256)'(
      _round?: null,
      _timestamp?: null,
      _profitAmount?: null,
      _glpAllocation?: null,
      _sbtcAllocation?: null,
      _sethAllocation?: null,
    ): CommitAndCloseEventFilter;
    CommitAndClose(
      _round?: null,
      _timestamp?: null,
      _profitAmount?: null,
      _glpAllocation?: null,
      _sbtcAllocation?: null,
      _sethAllocation?: null,
    ): CommitAndCloseEventFilter;

    'Deposit(address,address,uint256,uint256)'(
      caller?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null,
    ): DepositEventFilter;
    Deposit(
      caller?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null,
    ): DepositEventFilter;

    'DepositFeeSet(uint256,uint256)'(depositFee?: null, newDepositFee?: null): DepositFeeSetEventFilter;
    DepositFeeSet(depositFee?: null, newDepositFee?: null): DepositFeeSetEventFilter;

    'DepositRound(address,uint256,uint256)'(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      round?: null,
    ): DepositRoundEventFilter;
    DepositRound(account?: PromiseOrValue<string> | null, amount?: null, round?: null): DepositRoundEventFilter;

    'InitiateVaultMigration(uint256,uint256)'(
      _timestamp?: null,
      _migrationActiveTimestamp?: null,
    ): InitiateVaultMigrationEventFilter;
    InitiateVaultMigration(_timestamp?: null, _migrationActiveTimestamp?: null): InitiateVaultMigrationEventFilter;

    'InitiateWithdraw(address,uint256,uint256)'(
      account?: PromiseOrValue<string> | null,
      shares?: null,
      round?: null,
    ): InitiateWithdrawEventFilter;
    InitiateWithdraw(account?: PromiseOrValue<string> | null, shares?: null, round?: null): InitiateWithdrawEventFilter;

    'ManagementFeeSet(uint256,uint256)'(managementFee?: null, newManagementFee?: null): ManagementFeeSetEventFilter;
    ManagementFeeSet(managementFee?: null, newManagementFee?: null): ManagementFeeSetEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'PerformanceFeeSet(uint256,uint256)'(performanceFee?: null, newPerformanceFee?: null): PerformanceFeeSetEventFilter;
    PerformanceFeeSet(performanceFee?: null, newPerformanceFee?: null): PerformanceFeeSetEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;

    'RollToNextPosition(uint256,uint256)'(
      _lockedInStrategy?: null,
      _queuedWithdrawAmount?: null,
    ): RollToNextPositionEventFilter;
    RollToNextPosition(_lockedInStrategy?: null, _queuedWithdrawAmount?: null): RollToNextPositionEventFilter;

    'TracerClose(uint256,uint256)'(_sbtcAllocation?: null, _sethAllocation?: null): TracerCloseEventFilter;
    TracerClose(_sbtcAllocation?: null, _sethAllocation?: null): TracerCloseEventFilter;

    'TracerOpen(uint256,uint256)'(_sbtcAllocation?: null, _sethAllocation?: null): TracerOpenEventFilter;
    TracerOpen(_sbtcAllocation?: null, _sethAllocation?: null): TracerOpenEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'UpdatePricePerShare(uint104,uint256)'(_round?: null, _pricePerShare?: null): UpdatePricePerShareEventFilter;
    UpdatePricePerShare(_round?: null, _pricePerShare?: null): UpdatePricePerShareEventFilter;

    'Withdraw(address,uint256,uint256)'(
      account?: PromiseOrValue<string> | null,
      amount?: null,
      shares?: null,
    ): WithdrawEventFilter;
    Withdraw(account?: PromiseOrValue<string> | null, amount?: null, shares?: null): WithdrawEventFilter;

    'WithdrawalFeeSet(uint256,uint256)'(withdrawalFee?: null, newWithdrawalFee?: null): WithdrawalFeeSetEventFilter;
    WithdrawalFeeSet(withdrawalFee?: null, newWithdrawalFee?: null): WithdrawalFeeSetEventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DAY(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    GLP_MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    GLP_REWARD_ROUTER(overrides?: CallOverrides): Promise<BigNumber>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_INT(overrides?: CallOverrides): Promise<BigNumber>;

    SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    TCR(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    accountVaultBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    btcLeverageSets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    chainlinkOracle(overrides?: CallOverrides): Promise<BigNumber>;

    checkpointTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    claimShorts(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    commitAndClose(
      nextSbtcAllocation: PromiseOrValue<BigNumberish>,
      nextSethAllocation: PromiseOrValue<BigNumberish>,
      nextGlpAllocation: PromiseOrValue<BigNumberish>,
      _settlePositions: PromiseOrValue<boolean>,
      _handleTcrEmissions: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    completeWithdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    convertToAssets(_shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    convertToShares(_assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'deposit(uint256,address)'(
      amount: PromiseOrValue<BigNumberish>,
      creditor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'deposit(uint256)'(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    encoder(overrides?: CallOverrides): Promise<BigNumber>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    ethLeverageSets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    getNextLockedQueued(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    glpCloseSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    glpPricing(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    hedgePricing(overrides?: CallOverrides): Promise<BigNumber>;

    hedgeStakingActive(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initRounds(
      numRounds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initiateMigration(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    initiateWithdraw(
      numShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    lastQueuedWithdrawAmount(overrides?: CallOverrides): Promise<BigNumber>;

    lateWithdrawPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    lockedInStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    managementFee(overrides?: CallOverrides): Promise<BigNumber>;

    migrateVault(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    migrationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _shares: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    openGlpPosition(
      glpAllocation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    pauseDeposits(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    previewDeposit(_assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewMint(_shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewWithdraw(_shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    queueHedgeRebalance(
      sbtcAllocation: PromiseOrValue<BigNumberish>,
      sethAllocation: PromiseOrValue<BigNumberish>,
      sethAction: PromiseOrValue<BigNumberish>,
      sbtcAction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    queueTracerClose(
      sbtcAllocation: PromiseOrValue<BigNumberish>,
      sethAllocation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    queueTracerOpen(
      sbtcAllocation: PromiseOrValue<BigNumberish>,
      sethAllocation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    recoverEth(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    revokeAllowances(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    rollToNextPosition(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    roundPricePerShare(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    roundQueuedWithdrawalShares(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setBtcLeveragePool(
      _leverageSet: Vault.LeverageSetStruct,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setCap(
      newCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDepositFee(
      newDepositFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setEpochDuration(
      _newEpochDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setEthLeveragePool(
      _leverageSet: Vault.LeverageSetStruct,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFeeRecipient(
      newFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setHedgeStakingActive(
      _stakingActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLeverageSetIndex(
      _btcLeverageSet: PromiseOrValue<BigNumberish>,
      _ethLeverageSet: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setManagementFee(
      newManagementFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPerformanceFee(
      newPerformanceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setScale(
      _newScale: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTcrStrategy(
      _tcrStrategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setWhitelistLibrary(
      _newWhitelistLibrary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setWithdrawalFee(
      newWithdrawalFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    shares(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    shortBurn(overrides?: CallOverrides): Promise<BigNumber>;

    shortMint(overrides?: CallOverrides): Promise<BigNumber>;

    strategyState(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    swapSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tcrStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalPending(overrides?: CallOverrides): Promise<BigNumber>;

    totalSbtcBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalSethBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unpauseDeposits(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    unstakeAllHedges(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    unstakePartialHedges(
      _sbtcAmount: PromiseOrValue<BigNumberish>,
      _sethAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateChainlinkWrapper(
      _chainlinkWrapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateGlpPricing(
      _glpPricing: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateHedgePricing(
      _hedgePricing: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateSbtcStaking(
      _sbtcStaking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateSethStaking(
      _sethStaking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateSwapSlippage(
      _newSlippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    vaultParams(overrides?: CallOverrides): Promise<BigNumber>;

    vaultState(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistDeposit(
      amount: PromiseOrValue<BigNumberish>,
      merkleproof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    whitelistLibrary(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawals(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GLP_MANAGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GLP_REWARD_ROUTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    KEEPER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_INT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SCALE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TCR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountVaultBalance(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    btcLeverageSets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainlinkOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkpointTotalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimShorts(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    commitAndClose(
      nextSbtcAllocation: PromiseOrValue<BigNumberish>,
      nextSethAllocation: PromiseOrValue<BigNumberish>,
      nextGlpAllocation: PromiseOrValue<BigNumberish>,
      _settlePositions: PromiseOrValue<boolean>,
      _handleTcrEmissions: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    completeWithdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    convertToAssets(_shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertToShares(_assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'deposit(uint256,address)'(
      amount: PromiseOrValue<BigNumberish>,
      creditor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'deposit(uint256)'(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    encoder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethLeverageSets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNextLockedQueued(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    glpCloseSlippage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    glpPricing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    hedgePricing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hedgeStakingActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initRounds(
      numRounds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initiateMigration(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    initiateWithdraw(
      numShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastQueuedWithdrawAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lateWithdrawPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedInStrategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managementFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateVault(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    migrationTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _shares: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openGlpPosition(
      glpAllocation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    pauseDeposits(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performanceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewDeposit(_assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewMint(_shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewWithdraw(_shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricePerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queueHedgeRebalance(
      sbtcAllocation: PromiseOrValue<BigNumberish>,
      sethAllocation: PromiseOrValue<BigNumberish>,
      sethAction: PromiseOrValue<BigNumberish>,
      sbtcAction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    queueTracerClose(
      sbtcAllocation: PromiseOrValue<BigNumberish>,
      sethAllocation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    queueTracerOpen(
      sbtcAllocation: PromiseOrValue<BigNumberish>,
      sethAllocation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    recoverEth(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    revokeAllowances(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    rollToNextPosition(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    roundPricePerShare(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roundQueuedWithdrawalShares(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBtcLeveragePool(
      _leverageSet: Vault.LeverageSetStruct,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setCap(
      newCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDepositFee(
      newDepositFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setEpochDuration(
      _newEpochDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setEthLeveragePool(
      _leverageSet: Vault.LeverageSetStruct,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFeeRecipient(
      newFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setHedgeStakingActive(
      _stakingActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLeverageSetIndex(
      _btcLeverageSet: PromiseOrValue<BigNumberish>,
      _ethLeverageSet: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setManagementFee(
      newManagementFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPerformanceFee(
      newPerformanceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setScale(
      _newScale: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTcrStrategy(
      _tcrStrategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setWhitelistLibrary(
      _newWhitelistLibrary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setWithdrawalFee(
      newWithdrawalFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    shares(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shortBurn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shortMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategyState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapSlippage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tcrStrategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPending(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSbtcBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSethBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unpauseDeposits(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    unstakeAllHedges(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    unstakePartialHedges(
      _sbtcAmount: PromiseOrValue<BigNumberish>,
      _sethAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateChainlinkWrapper(
      _chainlinkWrapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateGlpPricing(
      _glpPricing: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateHedgePricing(
      _hedgePricing: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateSbtcStaking(
      _sbtcStaking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateSethStaking(
      _sethStaking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateSwapSlippage(
      _newSlippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    vaultParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistDeposit(
      amount: PromiseOrValue<BigNumberish>,
      merkleproof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    whitelistLibrary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawals(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
