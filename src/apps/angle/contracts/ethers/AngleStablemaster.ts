/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export type SLPDataStruct = {
  lastBlockUpdated: BigNumberish;
  lockedInterests: BigNumberish;
  maxInterestsDistributed: BigNumberish;
  feesAside: BigNumberish;
  slippageFee: BigNumberish;
  feesForSLPs: BigNumberish;
  slippage: BigNumberish;
  interestsForSLPs: BigNumberish;
};

export type SLPDataStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
] & {
  lastBlockUpdated: BigNumber;
  lockedInterests: BigNumber;
  maxInterestsDistributed: BigNumber;
  feesAside: BigNumber;
  slippageFee: BigNumber;
  feesForSLPs: BigNumber;
  slippage: BigNumber;
  interestsForSLPs: BigNumber;
};

export type MintBurnDataStruct = {
  xFeeMint: BigNumberish[];
  yFeeMint: BigNumberish[];
  xFeeBurn: BigNumberish[];
  yFeeBurn: BigNumberish[];
  targetHAHedge: BigNumberish;
  bonusMalusMint: BigNumberish;
  bonusMalusBurn: BigNumberish;
  capOnStableMinted: BigNumberish;
};

export type MintBurnDataStructOutput = [
  BigNumber[],
  BigNumber[],
  BigNumber[],
  BigNumber[],
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
] & {
  xFeeMint: BigNumber[];
  yFeeMint: BigNumber[];
  xFeeBurn: BigNumber[];
  yFeeBurn: BigNumber[];
  targetHAHedge: BigNumber;
  bonusMalusMint: BigNumber;
  bonusMalusBurn: BigNumber;
  capOnStableMinted: BigNumber;
};

export interface AngleStablemasterInterface extends utils.Interface {
  functions: {
    'BASE_PARAMS()': FunctionFragment;
    'BASE_TOKENS()': FunctionFragment;
    'CORE_ROLE()': FunctionFragment;
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'GOVERNOR_ROLE()': FunctionFragment;
    'GUARDIAN_ROLE()': FunctionFragment;
    'SLP()': FunctionFragment;
    'STABLE()': FunctionFragment;
    'accumulateInterest(uint256)': FunctionFragment;
    'addGovernor(address)': FunctionFragment;
    'agToken()': FunctionFragment;
    'burn(uint256,address,address,address,uint256)': FunctionFragment;
    'collateralMap(address)': FunctionFragment;
    'convertToSLP(uint256,address)': FunctionFragment;
    'deploy(address[],address,address)': FunctionFragment;
    'deployCollateral(address,address,address,address,address)': FunctionFragment;
    'deposit(uint256,address,address)': FunctionFragment;
    'getCollateralRatio()': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'getStocksUsers()': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'mint(uint256,address,address,uint256)': FunctionFragment;
    'pause(bytes32,address)': FunctionFragment;
    'paused(bytes32)': FunctionFragment;
    'rebalanceStocksUsers(uint256,address,address)': FunctionFragment;
    'removeGovernor(address)': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeCollateral(address,address)': FunctionFragment;
    'revokeGuardian(address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'setCapOnStableAndMaxInterests(uint256,uint256,address)': FunctionFragment;
    'setCore(address)': FunctionFragment;
    'setFeeKeeper(uint64,uint64,uint64,uint64)': FunctionFragment;
    'setFeeManager(address,address,address)': FunctionFragment;
    'setGuardian(address,address)': FunctionFragment;
    'setIncentivesForSLPs(uint64,uint64,address)': FunctionFragment;
    'setOracle(address,address)': FunctionFragment;
    'setTargetHAHedge(uint64)': FunctionFragment;
    'setUserFees(address,uint64[],uint64[],uint8)': FunctionFragment;
    'signalLoss(uint256)': FunctionFragment;
    'unpause(bytes32,address)': FunctionFragment;
    'updateStocksUsers(uint256,address)': FunctionFragment;
    'withdraw(uint256,address,address,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BASE_PARAMS'
      | 'BASE_TOKENS'
      | 'CORE_ROLE'
      | 'DEFAULT_ADMIN_ROLE'
      | 'GOVERNOR_ROLE'
      | 'GUARDIAN_ROLE'
      | 'SLP'
      | 'STABLE'
      | 'accumulateInterest'
      | 'addGovernor'
      | 'agToken'
      | 'burn'
      | 'collateralMap'
      | 'convertToSLP'
      | 'deploy'
      | 'deployCollateral'
      | 'deposit'
      | 'getCollateralRatio'
      | 'getRoleAdmin'
      | 'getStocksUsers'
      | 'grantRole'
      | 'hasRole'
      | 'initialize'
      | 'mint'
      | 'pause'
      | 'paused'
      | 'rebalanceStocksUsers'
      | 'removeGovernor'
      | 'renounceRole'
      | 'revokeCollateral'
      | 'revokeGuardian'
      | 'revokeRole'
      | 'setCapOnStableAndMaxInterests'
      | 'setCore'
      | 'setFeeKeeper'
      | 'setFeeManager'
      | 'setGuardian'
      | 'setIncentivesForSLPs'
      | 'setOracle'
      | 'setTargetHAHedge'
      | 'setUserFees'
      | 'signalLoss'
      | 'unpause'
      | 'updateStocksUsers'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BASE_PARAMS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'BASE_TOKENS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'CORE_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'GOVERNOR_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'GUARDIAN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SLP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'STABLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accumulateInterest', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'addGovernor', values: [string]): string;
  encodeFunctionData(functionFragment: 'agToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'burn', values: [BigNumberish, string, string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'collateralMap', values: [string]): string;
  encodeFunctionData(functionFragment: 'convertToSLP', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'deploy', values: [string[], string, string]): string;
  encodeFunctionData(functionFragment: 'deployCollateral', values: [string, string, string, string, string]): string;
  encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish, string, string]): string;
  encodeFunctionData(functionFragment: 'getCollateralRatio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'getStocksUsers', values?: undefined): string;
  encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string]): string;
  encodeFunctionData(functionFragment: 'mint', values: [BigNumberish, string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'pause', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'paused', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'rebalanceStocksUsers', values: [BigNumberish, string, string]): string;
  encodeFunctionData(functionFragment: 'removeGovernor', values: [string]): string;
  encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'revokeCollateral', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'revokeGuardian', values: [string]): string;
  encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, string]): string;
  encodeFunctionData(
    functionFragment: 'setCapOnStableAndMaxInterests',
    values: [BigNumberish, BigNumberish, string],
  ): string;
  encodeFunctionData(functionFragment: 'setCore', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'setFeeKeeper',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'setFeeManager', values: [string, string, string]): string;
  encodeFunctionData(functionFragment: 'setGuardian', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'setIncentivesForSLPs', values: [BigNumberish, BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'setOracle', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'setTargetHAHedge', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'setUserFees',
    values: [string, BigNumberish[], BigNumberish[], BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'signalLoss', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'unpause', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'updateStocksUsers', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish, string, string, string]): string;

  decodeFunctionResult(functionFragment: 'BASE_PARAMS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'BASE_TOKENS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'CORE_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'GOVERNOR_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'GUARDIAN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SLP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'STABLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accumulateInterest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addGovernor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'agToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateralMap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertToSLP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deploy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deployCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCollateralRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStocksUsers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rebalanceStocksUsers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeGovernor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCapOnStableAndMaxInterests', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCore', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeKeeper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setIncentivesForSLPs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTargetHAHedge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUserFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'signalLoss', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateStocksUsers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'BurntStablecoins(address,uint256,uint256)': EventFragment;
    'CapOnStableAndMaxInterestsUpdated(address,uint256,uint256)': EventFragment;
    'CollateralDeployed(address,address,address,address)': EventFragment;
    'CollateralRevoked(address)': EventFragment;
    'FeeArrayUpdated(address,uint64[],uint64[],uint8)': EventFragment;
    'FeeManagerUpdated(address,address)': EventFragment;
    'MintedStablecoins(address,uint256,uint256)': EventFragment;
    'OracleUpdated(address,address)': EventFragment;
    'Paused(bytes32)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'SLPsIncentivesUpdated(address,uint64,uint64)': EventFragment;
    'SanRateUpdated(address,uint256)': EventFragment;
    'StocksUsersUpdated(address,uint256)': EventFragment;
    'Unpaused(bytes32)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'BurntStablecoins'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CapOnStableAndMaxInterestsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralDeployed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeArrayUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeManagerUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MintedStablecoins'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OracleUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SLPsIncentivesUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SanRateUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StocksUsersUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export interface BurntStablecoinsEventObject {
  _poolManager: string;
  amount: BigNumber;
  redeemInC: BigNumber;
}
export type BurntStablecoinsEvent = TypedEvent<[string, BigNumber, BigNumber], BurntStablecoinsEventObject>;

export type BurntStablecoinsEventFilter = TypedEventFilter<BurntStablecoinsEvent>;

export interface CapOnStableAndMaxInterestsUpdatedEventObject {
  _poolManager: string;
  _capOnStableMinted: BigNumber;
  _maxInterestsDistributed: BigNumber;
}
export type CapOnStableAndMaxInterestsUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  CapOnStableAndMaxInterestsUpdatedEventObject
>;

export type CapOnStableAndMaxInterestsUpdatedEventFilter = TypedEventFilter<CapOnStableAndMaxInterestsUpdatedEvent>;

export interface CollateralDeployedEventObject {
  _poolManager: string;
  _perpetualManager: string;
  _sanToken: string;
  _oracle: string;
}
export type CollateralDeployedEvent = TypedEvent<[string, string, string, string], CollateralDeployedEventObject>;

export type CollateralDeployedEventFilter = TypedEventFilter<CollateralDeployedEvent>;

export interface CollateralRevokedEventObject {
  _poolManager: string;
}
export type CollateralRevokedEvent = TypedEvent<[string], CollateralRevokedEventObject>;

export type CollateralRevokedEventFilter = TypedEventFilter<CollateralRevokedEvent>;

export interface FeeArrayUpdatedEventObject {
  _poolManager: string;
  _xFee: BigNumber[];
  _yFee: BigNumber[];
  _type: number;
}
export type FeeArrayUpdatedEvent = TypedEvent<[string, BigNumber[], BigNumber[], number], FeeArrayUpdatedEventObject>;

export type FeeArrayUpdatedEventFilter = TypedEventFilter<FeeArrayUpdatedEvent>;

export interface FeeManagerUpdatedEventObject {
  _poolManager: string;
  newFeeManager: string;
}
export type FeeManagerUpdatedEvent = TypedEvent<[string, string], FeeManagerUpdatedEventObject>;

export type FeeManagerUpdatedEventFilter = TypedEventFilter<FeeManagerUpdatedEvent>;

export interface MintedStablecoinsEventObject {
  _poolManager: string;
  amount: BigNumber;
  amountForUserInStable: BigNumber;
}
export type MintedStablecoinsEvent = TypedEvent<[string, BigNumber, BigNumber], MintedStablecoinsEventObject>;

export type MintedStablecoinsEventFilter = TypedEventFilter<MintedStablecoinsEvent>;

export interface OracleUpdatedEventObject {
  _poolManager: string;
  _oracle: string;
}
export type OracleUpdatedEvent = TypedEvent<[string, string], OracleUpdatedEventObject>;

export type OracleUpdatedEventFilter = TypedEventFilter<OracleUpdatedEvent>;

export interface PausedEventObject {
  name: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SLPsIncentivesUpdatedEventObject {
  _poolManager: string;
  _feesForSLPs: BigNumber;
  _interestsForSLPs: BigNumber;
}
export type SLPsIncentivesUpdatedEvent = TypedEvent<[string, BigNumber, BigNumber], SLPsIncentivesUpdatedEventObject>;

export type SLPsIncentivesUpdatedEventFilter = TypedEventFilter<SLPsIncentivesUpdatedEvent>;

export interface SanRateUpdatedEventObject {
  _token: string;
  _newSanRate: BigNumber;
}
export type SanRateUpdatedEvent = TypedEvent<[string, BigNumber], SanRateUpdatedEventObject>;

export type SanRateUpdatedEventFilter = TypedEventFilter<SanRateUpdatedEvent>;

export interface StocksUsersUpdatedEventObject {
  _poolManager: string;
  _stocksUsers: BigNumber;
}
export type StocksUsersUpdatedEvent = TypedEvent<[string, BigNumber], StocksUsersUpdatedEventObject>;

export type StocksUsersUpdatedEventFilter = TypedEventFilter<StocksUsersUpdatedEvent>;

export interface UnpausedEventObject {
  name: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface AngleStablemaster extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AngleStablemasterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE_PARAMS(overrides?: CallOverrides): Promise<[BigNumber]>;

    BASE_TOKENS(overrides?: CallOverrides): Promise<[BigNumber]>;

    CORE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    GUARDIAN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SLP(overrides?: CallOverrides): Promise<[string]>;

    STABLE(overrides?: CallOverrides): Promise<[string]>;

    accumulateInterest(
      gain: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addGovernor(
      governor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    agToken(overrides?: CallOverrides): Promise<[string]>;

    burn(
      amount: BigNumberish,
      burner: string,
      dest: string,
      poolManager: string,
      minCollatAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    collateralMap(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        SLPDataStructOutput,
        MintBurnDataStructOutput,
      ] & {
        token: string;
        sanToken: string;
        perpetualManager: string;
        oracle: string;
        stocksUsers: BigNumber;
        sanRate: BigNumber;
        collatBase: BigNumber;
        slpData: SLPDataStructOutput;
        feeData: MintBurnDataStructOutput;
      }
    >;

    convertToSLP(
      amount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deploy(
      governorList: string[],
      guardian: string,
      _agToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deployCollateral(
      poolManager: string,
      perpetualManager: string,
      feeManager: string,
      oracle: string,
      sanToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deposit(
      amount: BigNumberish,
      user: string,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getCollateralRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getStocksUsers(overrides?: CallOverrides): Promise<[BigNumber] & { _stocksUsers: BigNumber }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      core_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    mint(
      amount: BigNumberish,
      user: string,
      poolManager: string,
      minStableAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    pause(
      agent: BytesLike,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    paused(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    rebalanceStocksUsers(
      amount: BigNumberish,
      poolManagerUp: string,
      poolManagerDown: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    removeGovernor(
      governor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeCollateral(
      poolManager: string,
      settlementContract: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeGuardian(
      oldGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setCapOnStableAndMaxInterests(
      _capOnStableMinted: BigNumberish,
      _maxInterestsDistributed: BigNumberish,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setCore(newCore: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setFeeKeeper(
      _bonusMalusMint: BigNumberish,
      _bonusMalusBurn: BigNumberish,
      _slippage: BigNumberish,
      _slippageFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setFeeManager(
      newFeeManager: string,
      oldFeeManager: string,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setGuardian(
      newGuardian: string,
      oldGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setIncentivesForSLPs(
      _feesForSLPs: BigNumberish,
      _interestsForSLPs: BigNumberish,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setOracle(
      _oracle: string,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTargetHAHedge(
      _targetHAHedge: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setUserFees(
      poolManager: string,
      _xFee: BigNumberish[],
      _yFee: BigNumberish[],
      _mint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    signalLoss(
      loss: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    unpause(
      agent: BytesLike,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateStocksUsers(
      amount: BigNumberish,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      burner: string,
      dest: string,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  BASE_PARAMS(overrides?: CallOverrides): Promise<BigNumber>;

  BASE_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

  CORE_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  GOVERNOR_ROLE(overrides?: CallOverrides): Promise<string>;

  GUARDIAN_ROLE(overrides?: CallOverrides): Promise<string>;

  SLP(overrides?: CallOverrides): Promise<string>;

  STABLE(overrides?: CallOverrides): Promise<string>;

  accumulateInterest(
    gain: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  addGovernor(
    governor: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  agToken(overrides?: CallOverrides): Promise<string>;

  burn(
    amount: BigNumberish,
    burner: string,
    dest: string,
    poolManager: string,
    minCollatAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  collateralMap(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, string, string, BigNumber, BigNumber, BigNumber, SLPDataStructOutput, MintBurnDataStructOutput] & {
      token: string;
      sanToken: string;
      perpetualManager: string;
      oracle: string;
      stocksUsers: BigNumber;
      sanRate: BigNumber;
      collatBase: BigNumber;
      slpData: SLPDataStructOutput;
      feeData: MintBurnDataStructOutput;
    }
  >;

  convertToSLP(
    amount: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  deploy(
    governorList: string[],
    guardian: string,
    _agToken: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  deployCollateral(
    poolManager: string,
    perpetualManager: string,
    feeManager: string,
    oracle: string,
    sanToken: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  deposit(
    amount: BigNumberish,
    user: string,
    poolManager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getCollateralRatio(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getStocksUsers(overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

  initialize(core_: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  mint(
    amount: BigNumberish,
    user: string,
    poolManager: string,
    minStableAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  pause(
    agent: BytesLike,
    poolManager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  paused(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  rebalanceStocksUsers(
    amount: BigNumberish,
    poolManagerUp: string,
    poolManagerDown: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  removeGovernor(
    governor: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeCollateral(
    poolManager: string,
    settlementContract: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeGuardian(
    oldGuardian: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setCapOnStableAndMaxInterests(
    _capOnStableMinted: BigNumberish,
    _maxInterestsDistributed: BigNumberish,
    poolManager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setCore(newCore: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setFeeKeeper(
    _bonusMalusMint: BigNumberish,
    _bonusMalusBurn: BigNumberish,
    _slippage: BigNumberish,
    _slippageFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setFeeManager(
    newFeeManager: string,
    oldFeeManager: string,
    poolManager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setGuardian(
    newGuardian: string,
    oldGuardian: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setIncentivesForSLPs(
    _feesForSLPs: BigNumberish,
    _interestsForSLPs: BigNumberish,
    poolManager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setOracle(
    _oracle: string,
    poolManager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setTargetHAHedge(
    _targetHAHedge: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setUserFees(
    poolManager: string,
    _xFee: BigNumberish[],
    _yFee: BigNumberish[],
    _mint: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  signalLoss(
    loss: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  unpause(
    agent: BytesLike,
    poolManager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateStocksUsers(
    amount: BigNumberish,
    poolManager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    burner: string,
    dest: string,
    poolManager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    BASE_PARAMS(overrides?: CallOverrides): Promise<BigNumber>;

    BASE_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    CORE_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<string>;

    GUARDIAN_ROLE(overrides?: CallOverrides): Promise<string>;

    SLP(overrides?: CallOverrides): Promise<string>;

    STABLE(overrides?: CallOverrides): Promise<string>;

    accumulateInterest(gain: BigNumberish, overrides?: CallOverrides): Promise<void>;

    addGovernor(governor: string, overrides?: CallOverrides): Promise<void>;

    agToken(overrides?: CallOverrides): Promise<string>;

    burn(
      amount: BigNumberish,
      burner: string,
      dest: string,
      poolManager: string,
      minCollatAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    collateralMap(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        SLPDataStructOutput,
        MintBurnDataStructOutput,
      ] & {
        token: string;
        sanToken: string;
        perpetualManager: string;
        oracle: string;
        stocksUsers: BigNumber;
        sanRate: BigNumber;
        collatBase: BigNumber;
        slpData: SLPDataStructOutput;
        feeData: MintBurnDataStructOutput;
      }
    >;

    convertToSLP(amount: BigNumberish, user: string, overrides?: CallOverrides): Promise<void>;

    deploy(governorList: string[], guardian: string, _agToken: string, overrides?: CallOverrides): Promise<void>;

    deployCollateral(
      poolManager: string,
      perpetualManager: string,
      feeManager: string,
      oracle: string,
      sanToken: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    deposit(amount: BigNumberish, user: string, poolManager: string, overrides?: CallOverrides): Promise<void>;

    getCollateralRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getStocksUsers(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

    initialize(core_: string, overrides?: CallOverrides): Promise<void>;

    mint(
      amount: BigNumberish,
      user: string,
      poolManager: string,
      minStableAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    pause(agent: BytesLike, poolManager: string, overrides?: CallOverrides): Promise<void>;

    paused(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    rebalanceStocksUsers(
      amount: BigNumberish,
      poolManagerUp: string,
      poolManagerDown: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    removeGovernor(governor: string, overrides?: CallOverrides): Promise<void>;

    renounceRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    revokeCollateral(poolManager: string, settlementContract: string, overrides?: CallOverrides): Promise<void>;

    revokeGuardian(oldGuardian: string, overrides?: CallOverrides): Promise<void>;

    revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    setCapOnStableAndMaxInterests(
      _capOnStableMinted: BigNumberish,
      _maxInterestsDistributed: BigNumberish,
      poolManager: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setCore(newCore: string, overrides?: CallOverrides): Promise<void>;

    setFeeKeeper(
      _bonusMalusMint: BigNumberish,
      _bonusMalusBurn: BigNumberish,
      _slippage: BigNumberish,
      _slippageFee: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setFeeManager(
      newFeeManager: string,
      oldFeeManager: string,
      poolManager: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setGuardian(newGuardian: string, oldGuardian: string, overrides?: CallOverrides): Promise<void>;

    setIncentivesForSLPs(
      _feesForSLPs: BigNumberish,
      _interestsForSLPs: BigNumberish,
      poolManager: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setOracle(_oracle: string, poolManager: string, overrides?: CallOverrides): Promise<void>;

    setTargetHAHedge(_targetHAHedge: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setUserFees(
      poolManager: string,
      _xFee: BigNumberish[],
      _yFee: BigNumberish[],
      _mint: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    signalLoss(loss: BigNumberish, overrides?: CallOverrides): Promise<void>;

    unpause(agent: BytesLike, poolManager: string, overrides?: CallOverrides): Promise<void>;

    updateStocksUsers(amount: BigNumberish, poolManager: string, overrides?: CallOverrides): Promise<void>;

    withdraw(
      amount: BigNumberish,
      burner: string,
      dest: string,
      poolManager: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'BurntStablecoins(address,uint256,uint256)'(
      _poolManager?: string | null,
      amount?: null,
      redeemInC?: null,
    ): BurntStablecoinsEventFilter;
    BurntStablecoins(_poolManager?: string | null, amount?: null, redeemInC?: null): BurntStablecoinsEventFilter;

    'CapOnStableAndMaxInterestsUpdated(address,uint256,uint256)'(
      _poolManager?: string | null,
      _capOnStableMinted?: null,
      _maxInterestsDistributed?: null,
    ): CapOnStableAndMaxInterestsUpdatedEventFilter;
    CapOnStableAndMaxInterestsUpdated(
      _poolManager?: string | null,
      _capOnStableMinted?: null,
      _maxInterestsDistributed?: null,
    ): CapOnStableAndMaxInterestsUpdatedEventFilter;

    'CollateralDeployed(address,address,address,address)'(
      _poolManager?: string | null,
      _perpetualManager?: string | null,
      _sanToken?: string | null,
      _oracle?: null,
    ): CollateralDeployedEventFilter;
    CollateralDeployed(
      _poolManager?: string | null,
      _perpetualManager?: string | null,
      _sanToken?: string | null,
      _oracle?: null,
    ): CollateralDeployedEventFilter;

    'CollateralRevoked(address)'(_poolManager?: string | null): CollateralRevokedEventFilter;
    CollateralRevoked(_poolManager?: string | null): CollateralRevokedEventFilter;

    'FeeArrayUpdated(address,uint64[],uint64[],uint8)'(
      _poolManager?: string | null,
      _xFee?: null,
      _yFee?: null,
      _type?: null,
    ): FeeArrayUpdatedEventFilter;
    FeeArrayUpdated(_poolManager?: string | null, _xFee?: null, _yFee?: null, _type?: null): FeeArrayUpdatedEventFilter;

    'FeeManagerUpdated(address,address)'(
      _poolManager?: string | null,
      newFeeManager?: string | null,
    ): FeeManagerUpdatedEventFilter;
    FeeManagerUpdated(_poolManager?: string | null, newFeeManager?: string | null): FeeManagerUpdatedEventFilter;

    'MintedStablecoins(address,uint256,uint256)'(
      _poolManager?: string | null,
      amount?: null,
      amountForUserInStable?: null,
    ): MintedStablecoinsEventFilter;
    MintedStablecoins(
      _poolManager?: string | null,
      amount?: null,
      amountForUserInStable?: null,
    ): MintedStablecoinsEventFilter;

    'OracleUpdated(address,address)'(_poolManager?: string | null, _oracle?: string | null): OracleUpdatedEventFilter;
    OracleUpdated(_poolManager?: string | null, _oracle?: string | null): OracleUpdatedEventFilter;

    'Paused(bytes32)'(name?: null): PausedEventFilter;
    Paused(name?: null): PausedEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter;
    RoleGranted(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleRevokedEventFilter;

    'SLPsIncentivesUpdated(address,uint64,uint64)'(
      _poolManager?: string | null,
      _feesForSLPs?: null,
      _interestsForSLPs?: null,
    ): SLPsIncentivesUpdatedEventFilter;
    SLPsIncentivesUpdated(
      _poolManager?: string | null,
      _feesForSLPs?: null,
      _interestsForSLPs?: null,
    ): SLPsIncentivesUpdatedEventFilter;

    'SanRateUpdated(address,uint256)'(_token?: string | null, _newSanRate?: null): SanRateUpdatedEventFilter;
    SanRateUpdated(_token?: string | null, _newSanRate?: null): SanRateUpdatedEventFilter;

    'StocksUsersUpdated(address,uint256)'(
      _poolManager?: string | null,
      _stocksUsers?: null,
    ): StocksUsersUpdatedEventFilter;
    StocksUsersUpdated(_poolManager?: string | null, _stocksUsers?: null): StocksUsersUpdatedEventFilter;

    'Unpaused(bytes32)'(name?: null): UnpausedEventFilter;
    Unpaused(name?: null): UnpausedEventFilter;
  };

  estimateGas: {
    BASE_PARAMS(overrides?: CallOverrides): Promise<BigNumber>;

    BASE_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    CORE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    GUARDIAN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SLP(overrides?: CallOverrides): Promise<BigNumber>;

    STABLE(overrides?: CallOverrides): Promise<BigNumber>;

    accumulateInterest(
      gain: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    addGovernor(governor: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    agToken(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      amount: BigNumberish,
      burner: string,
      dest: string,
      poolManager: string,
      minCollatAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    collateralMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    convertToSLP(
      amount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    deploy(
      governorList: string[],
      guardian: string,
      _agToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    deployCollateral(
      poolManager: string,
      perpetualManager: string,
      feeManager: string,
      oracle: string,
      sanToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      user: string,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getCollateralRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getStocksUsers(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(core_: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    mint(
      amount: BigNumberish,
      user: string,
      poolManager: string,
      minStableAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    pause(
      agent: BytesLike,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    paused(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    rebalanceStocksUsers(
      amount: BigNumberish,
      poolManagerUp: string,
      poolManagerDown: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    removeGovernor(governor: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeCollateral(
      poolManager: string,
      settlementContract: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeGuardian(
      oldGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setCapOnStableAndMaxInterests(
      _capOnStableMinted: BigNumberish,
      _maxInterestsDistributed: BigNumberish,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setCore(newCore: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setFeeKeeper(
      _bonusMalusMint: BigNumberish,
      _bonusMalusBurn: BigNumberish,
      _slippage: BigNumberish,
      _slippageFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setFeeManager(
      newFeeManager: string,
      oldFeeManager: string,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setGuardian(
      newGuardian: string,
      oldGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setIncentivesForSLPs(
      _feesForSLPs: BigNumberish,
      _interestsForSLPs: BigNumberish,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setOracle(
      _oracle: string,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setTargetHAHedge(
      _targetHAHedge: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setUserFees(
      poolManager: string,
      _xFee: BigNumberish[],
      _yFee: BigNumberish[],
      _mint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    signalLoss(loss: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    unpause(
      agent: BytesLike,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateStocksUsers(
      amount: BigNumberish,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      burner: string,
      dest: string,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_PARAMS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BASE_TOKENS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CORE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GUARDIAN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SLP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STABLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accumulateInterest(
      gain: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    addGovernor(
      governor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    agToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      amount: BigNumberish,
      burner: string,
      dest: string,
      poolManager: string,
      minCollatAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    collateralMap(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertToSLP(
      amount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    deploy(
      governorList: string[],
      guardian: string,
      _agToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    deployCollateral(
      poolManager: string,
      perpetualManager: string,
      feeManager: string,
      oracle: string,
      sanToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      user: string,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getCollateralRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStocksUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      core_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    mint(
      amount: BigNumberish,
      user: string,
      poolManager: string,
      minStableAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    pause(
      agent: BytesLike,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    paused(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalanceStocksUsers(
      amount: BigNumberish,
      poolManagerUp: string,
      poolManagerDown: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    removeGovernor(
      governor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeCollateral(
      poolManager: string,
      settlementContract: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeGuardian(
      oldGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setCapOnStableAndMaxInterests(
      _capOnStableMinted: BigNumberish,
      _maxInterestsDistributed: BigNumberish,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setCore(
      newCore: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setFeeKeeper(
      _bonusMalusMint: BigNumberish,
      _bonusMalusBurn: BigNumberish,
      _slippage: BigNumberish,
      _slippageFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setFeeManager(
      newFeeManager: string,
      oldFeeManager: string,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setGuardian(
      newGuardian: string,
      oldGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setIncentivesForSLPs(
      _feesForSLPs: BigNumberish,
      _interestsForSLPs: BigNumberish,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setOracle(
      _oracle: string,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setTargetHAHedge(
      _targetHAHedge: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setUserFees(
      poolManager: string,
      _xFee: BigNumberish[],
      _yFee: BigNumberish[],
      _mint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    signalLoss(
      loss: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    unpause(
      agent: BytesLike,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateStocksUsers(
      amount: BigNumberish,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      burner: string,
      dest: string,
      poolManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
