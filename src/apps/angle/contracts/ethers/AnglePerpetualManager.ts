/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export type PairsStruct = { owner: string; netCashOutAmount: BigNumberish };

export type PairsStructOutput = [string, BigNumber] & {
  owner: string;
  netCashOutAmount: BigNumber;
};

export interface AnglePerpetualManagerInterface extends utils.Interface {
  functions: {
    'BASE_PARAMS()': FunctionFragment;
    'BASE_TOKENS()': FunctionFragment;
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'GUARDIAN_ROLE()': FunctionFragment;
    'POOLMANAGER_ROLE()': FunctionFragment;
    'addToPerpetual(uint256,uint256)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'baseURI()': FunctionFragment;
    'closePerpetual(uint256,address,uint256)': FunctionFragment;
    'deployCollateral(address[],address,address,address)': FunctionFragment;
    'earned(uint256)': FunctionFragment;
    'forceClosePerpetuals(uint256[])': FunctionFragment;
    'getApproved(uint256)': FunctionFragment;
    'getCashOutAmount(uint256,uint256)': FunctionFragment;
    'getReward(uint256)': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'haBonusMalusDeposit()': FunctionFragment;
    'haBonusMalusWithdraw()': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'initialize(address,address)': FunctionFragment;
    'isApprovedForAll(address,address)': FunctionFragment;
    'isApprovedOrOwner(address,uint256)': FunctionFragment;
    'keeperFeesClosingCap()': FunctionFragment;
    'keeperFeesLiquidationCap()': FunctionFragment;
    'keeperFeesLiquidationRatio()': FunctionFragment;
    'lastUpdateTime()': FunctionFragment;
    'limitHAHedge()': FunctionFragment;
    'liquidatePerpetuals(uint256[])': FunctionFragment;
    'lockTime()': FunctionFragment;
    'maintenanceMargin()': FunctionFragment;
    'maxLeverage()': FunctionFragment;
    'name()': FunctionFragment;
    'notifyRewardAmount(uint256)': FunctionFragment;
    'openPerpetual(address,uint256,uint256,uint256,uint256)': FunctionFragment;
    'oracle()': FunctionFragment;
    'ownerOf(uint256)': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'periodFinish()': FunctionFragment;
    'perpetualData(uint256)': FunctionFragment;
    'perpetualRewardPerTokenPaid(uint256)': FunctionFragment;
    'poolManager()': FunctionFragment;
    'recoverERC20(address,address,uint256)': FunctionFragment;
    'removeFromPerpetual(uint256,uint256,address)': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'rewardPerTokenStored()': FunctionFragment;
    'rewardRate()': FunctionFragment;
    'rewardToken()': FunctionFragment;
    'rewards(uint256)': FunctionFragment;
    'rewardsDistribution()': FunctionFragment;
    'rewardsDuration()': FunctionFragment;
    'safeTransferFrom(address,address,uint256)': FunctionFragment;
    'safeTransferFrom(address,address,uint256,bytes)': FunctionFragment;
    'setApprovalForAll(address,bool)': FunctionFragment;
    'setBaseURI(string)': FunctionFragment;
    'setBoundsPerpetual(uint64,uint64)': FunctionFragment;
    'setFeeKeeper(uint64,uint64)': FunctionFragment;
    'setFeeManager(address)': FunctionFragment;
    'setHAFees(uint64[],uint64[],uint8)': FunctionFragment;
    'setKeeperFeesCap(uint256,uint256)': FunctionFragment;
    'setKeeperFeesClosing(uint64[],uint64[])': FunctionFragment;
    'setKeeperFeesLiquidationRatio(uint64)': FunctionFragment;
    'setLockTime(uint64)': FunctionFragment;
    'setNewRewardsDistribution(address)': FunctionFragment;
    'setOracle(address)': FunctionFragment;
    'setRewardDistribution(uint256,address)': FunctionFragment;
    'setTargetAndLimitHAHedge(uint64,uint64)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'symbol()': FunctionFragment;
    'targetHAHedge()': FunctionFragment;
    'tokenURI(uint256)': FunctionFragment;
    'totalHedgeAmount()': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'unpause()': FunctionFragment;
    'xHAFeesDeposit(uint256)': FunctionFragment;
    'xHAFeesWithdraw(uint256)': FunctionFragment;
    'xKeeperFeesClosing(uint256)': FunctionFragment;
    'yHAFeesDeposit(uint256)': FunctionFragment;
    'yHAFeesWithdraw(uint256)': FunctionFragment;
    'yKeeperFeesClosing(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BASE_PARAMS'
      | 'BASE_TOKENS'
      | 'DEFAULT_ADMIN_ROLE'
      | 'GUARDIAN_ROLE'
      | 'POOLMANAGER_ROLE'
      | 'addToPerpetual'
      | 'approve'
      | 'balanceOf'
      | 'baseURI'
      | 'closePerpetual'
      | 'deployCollateral'
      | 'earned'
      | 'forceClosePerpetuals'
      | 'getApproved'
      | 'getCashOutAmount'
      | 'getReward'
      | 'getRoleAdmin'
      | 'grantRole'
      | 'haBonusMalusDeposit'
      | 'haBonusMalusWithdraw'
      | 'hasRole'
      | 'initialize'
      | 'isApprovedForAll'
      | 'isApprovedOrOwner'
      | 'keeperFeesClosingCap'
      | 'keeperFeesLiquidationCap'
      | 'keeperFeesLiquidationRatio'
      | 'lastUpdateTime'
      | 'limitHAHedge'
      | 'liquidatePerpetuals'
      | 'lockTime'
      | 'maintenanceMargin'
      | 'maxLeverage'
      | 'name'
      | 'notifyRewardAmount'
      | 'openPerpetual'
      | 'oracle'
      | 'ownerOf'
      | 'pause'
      | 'paused'
      | 'periodFinish'
      | 'perpetualData'
      | 'perpetualRewardPerTokenPaid'
      | 'poolManager'
      | 'recoverERC20'
      | 'removeFromPerpetual'
      | 'renounceRole'
      | 'revokeRole'
      | 'rewardPerTokenStored'
      | 'rewardRate'
      | 'rewardToken'
      | 'rewards'
      | 'rewardsDistribution'
      | 'rewardsDuration'
      | 'safeTransferFrom(address,address,uint256)'
      | 'safeTransferFrom(address,address,uint256,bytes)'
      | 'setApprovalForAll'
      | 'setBaseURI'
      | 'setBoundsPerpetual'
      | 'setFeeKeeper'
      | 'setFeeManager'
      | 'setHAFees'
      | 'setKeeperFeesCap'
      | 'setKeeperFeesClosing'
      | 'setKeeperFeesLiquidationRatio'
      | 'setLockTime'
      | 'setNewRewardsDistribution'
      | 'setOracle'
      | 'setRewardDistribution'
      | 'setTargetAndLimitHAHedge'
      | 'supportsInterface'
      | 'symbol'
      | 'targetHAHedge'
      | 'tokenURI'
      | 'totalHedgeAmount'
      | 'transferFrom'
      | 'unpause'
      | 'xHAFeesDeposit'
      | 'xHAFeesWithdraw'
      | 'xKeeperFeesClosing'
      | 'yHAFeesDeposit'
      | 'yHAFeesWithdraw'
      | 'yKeeperFeesClosing',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BASE_PARAMS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'BASE_TOKENS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'GUARDIAN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'POOLMANAGER_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addToPerpetual', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'baseURI', values?: undefined): string;
  encodeFunctionData(functionFragment: 'closePerpetual', values: [BigNumberish, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'deployCollateral', values: [string[], string, string, string]): string;
  encodeFunctionData(functionFragment: 'earned', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'forceClosePerpetuals', values: [BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'getApproved', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getCashOutAmount', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getReward', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'haBonusMalusDeposit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'haBonusMalusWithdraw', values?: undefined): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'isApprovedForAll', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'isApprovedOrOwner', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'keeperFeesClosingCap', values?: undefined): string;
  encodeFunctionData(functionFragment: 'keeperFeesLiquidationCap', values?: undefined): string;
  encodeFunctionData(functionFragment: 'keeperFeesLiquidationRatio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastUpdateTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'limitHAHedge', values?: undefined): string;
  encodeFunctionData(functionFragment: 'liquidatePerpetuals', values: [BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'lockTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maintenanceMargin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxLeverage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'notifyRewardAmount', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'openPerpetual',
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'oracle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ownerOf', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'periodFinish', values?: undefined): string;
  encodeFunctionData(functionFragment: 'perpetualData', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'perpetualRewardPerTokenPaid', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'poolManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'recoverERC20', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'removeFromPerpetual', values: [BigNumberish, BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'rewardPerTokenStored', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewards', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'rewardsDistribution', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardsDuration', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    values: [string, string, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'setApprovalForAll', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'setBaseURI', values: [string]): string;
  encodeFunctionData(functionFragment: 'setBoundsPerpetual', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setFeeKeeper', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setFeeManager', values: [string]): string;
  encodeFunctionData(functionFragment: 'setHAFees', values: [BigNumberish[], BigNumberish[], BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setKeeperFeesCap', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setKeeperFeesClosing', values: [BigNumberish[], BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'setKeeperFeesLiquidationRatio', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setLockTime', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setNewRewardsDistribution', values: [string]): string;
  encodeFunctionData(functionFragment: 'setOracle', values: [string]): string;
  encodeFunctionData(functionFragment: 'setRewardDistribution', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'setTargetAndLimitHAHedge', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'targetHAHedge', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenURI', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'totalHedgeAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'xHAFeesDeposit', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'xHAFeesWithdraw', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'xKeeperFeesClosing', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'yHAFeesDeposit', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'yHAFeesWithdraw', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'yKeeperFeesClosing', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'BASE_PARAMS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'BASE_TOKENS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'GUARDIAN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'POOLMANAGER_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addToPerpetual', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'baseURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closePerpetual', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deployCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'earned', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'forceClosePerpetuals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCashOutAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'haBonusMalusDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'haBonusMalusWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedOrOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'keeperFeesClosingCap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'keeperFeesLiquidationCap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'keeperFeesLiquidationRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastUpdateTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'limitHAHedge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidatePerpetuals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maintenanceMargin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxLeverage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'notifyRewardAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'openPerpetual', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'oracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'periodFinish', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'perpetualData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'perpetualRewardPerTokenPaid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recoverERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeFromPerpetual', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardPerTokenStored', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsDistribution', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBaseURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBoundsPerpetual', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeKeeper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setHAFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setKeeperFeesCap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setKeeperFeesClosing', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setKeeperFeesLiquidationRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLockTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setNewRewardsDistribution', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewardDistribution', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTargetAndLimitHAHedge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'targetHAHedge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalHedgeAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xHAFeesDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xHAFeesWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xKeeperFeesClosing', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'yHAFeesDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'yHAFeesWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'yKeeperFeesClosing', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'ApprovalForAll(address,address,bool)': EventFragment;
    'BaseURIUpdated(string)': EventFragment;
    'BoundsPerpetualUpdated(uint64,uint64)': EventFragment;
    'HAFeesUpdated(uint64[],uint64[],uint8)': EventFragment;
    'KeeperFeesCapUpdated(uint256,uint256)': EventFragment;
    'KeeperFeesClosingUpdated(uint64[],uint64[])': EventFragment;
    'KeeperFeesLiquidationRatioUpdated(uint64)': EventFragment;
    'KeeperTransferred(address,uint256)': EventFragment;
    'LockTimeUpdated(uint64)': EventFragment;
    'Paused(address)': EventFragment;
    'PerpetualClosed(uint256,uint256)': EventFragment;
    'PerpetualOpened(uint256,uint256,uint256,uint256)': EventFragment;
    'PerpetualUpdated(uint256,uint256)': EventFragment;
    'PerpetualsForceClosed(uint256[],tuple[],address,uint256)': EventFragment;
    'Recovered(address,address,uint256)': EventFragment;
    'RewardAdded(uint256)': EventFragment;
    'RewardPaid(address,uint256)': EventFragment;
    'RewardsDistributionDurationUpdated(uint256,address)': EventFragment;
    'RewardsDistributionUpdated(address)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'TargetAndLimitHAHedgeUpdated(uint64,uint64)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BaseURIUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BoundsPerpetualUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'HAFeesUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'KeeperFeesCapUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'KeeperFeesClosingUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'KeeperFeesLiquidationRatioUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'KeeperTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LockTimeUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PerpetualClosed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PerpetualOpened'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PerpetualUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PerpetualsForceClosed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Recovered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardPaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardsDistributionDurationUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardsDistributionUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TargetAndLimitHAHedgeUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<[string, string, boolean], ApprovalForAllEventObject>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BaseURIUpdatedEventObject {
  _baseURI: string;
}
export type BaseURIUpdatedEvent = TypedEvent<[string], BaseURIUpdatedEventObject>;

export type BaseURIUpdatedEventFilter = TypedEventFilter<BaseURIUpdatedEvent>;

export interface BoundsPerpetualUpdatedEventObject {
  _maxLeverage: BigNumber;
  _maintenanceMargin: BigNumber;
}
export type BoundsPerpetualUpdatedEvent = TypedEvent<[BigNumber, BigNumber], BoundsPerpetualUpdatedEventObject>;

export type BoundsPerpetualUpdatedEventFilter = TypedEventFilter<BoundsPerpetualUpdatedEvent>;

export interface HAFeesUpdatedEventObject {
  _xHAFees: BigNumber[];
  _yHAFees: BigNumber[];
  deposit: number;
}
export type HAFeesUpdatedEvent = TypedEvent<[BigNumber[], BigNumber[], number], HAFeesUpdatedEventObject>;

export type HAFeesUpdatedEventFilter = TypedEventFilter<HAFeesUpdatedEvent>;

export interface KeeperFeesCapUpdatedEventObject {
  _keeperFeesLiquidationCap: BigNumber;
  _keeperFeesClosingCap: BigNumber;
}
export type KeeperFeesCapUpdatedEvent = TypedEvent<[BigNumber, BigNumber], KeeperFeesCapUpdatedEventObject>;

export type KeeperFeesCapUpdatedEventFilter = TypedEventFilter<KeeperFeesCapUpdatedEvent>;

export interface KeeperFeesClosingUpdatedEventObject {
  xKeeperFeesClosing: BigNumber[];
  yKeeperFeesClosing: BigNumber[];
}
export type KeeperFeesClosingUpdatedEvent = TypedEvent<[BigNumber[], BigNumber[]], KeeperFeesClosingUpdatedEventObject>;

export type KeeperFeesClosingUpdatedEventFilter = TypedEventFilter<KeeperFeesClosingUpdatedEvent>;

export interface KeeperFeesLiquidationRatioUpdatedEventObject {
  _keeperFeesLiquidationRatio: BigNumber;
}
export type KeeperFeesLiquidationRatioUpdatedEvent = TypedEvent<
  [BigNumber],
  KeeperFeesLiquidationRatioUpdatedEventObject
>;

export type KeeperFeesLiquidationRatioUpdatedEventFilter = TypedEventFilter<KeeperFeesLiquidationRatioUpdatedEvent>;

export interface KeeperTransferredEventObject {
  keeperAddress: string;
  liquidationFees: BigNumber;
}
export type KeeperTransferredEvent = TypedEvent<[string, BigNumber], KeeperTransferredEventObject>;

export type KeeperTransferredEventFilter = TypedEventFilter<KeeperTransferredEvent>;

export interface LockTimeUpdatedEventObject {
  _lockTime: BigNumber;
}
export type LockTimeUpdatedEvent = TypedEvent<[BigNumber], LockTimeUpdatedEventObject>;

export type LockTimeUpdatedEventFilter = TypedEventFilter<LockTimeUpdatedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PerpetualClosedEventObject {
  _perpetualID: BigNumber;
  _closeAmount: BigNumber;
}
export type PerpetualClosedEvent = TypedEvent<[BigNumber, BigNumber], PerpetualClosedEventObject>;

export type PerpetualClosedEventFilter = TypedEventFilter<PerpetualClosedEvent>;

export interface PerpetualOpenedEventObject {
  _perpetualID: BigNumber;
  _entryRate: BigNumber;
  _margin: BigNumber;
  _committedAmount: BigNumber;
}
export type PerpetualOpenedEvent = TypedEvent<[BigNumber, BigNumber, BigNumber, BigNumber], PerpetualOpenedEventObject>;

export type PerpetualOpenedEventFilter = TypedEventFilter<PerpetualOpenedEvent>;

export interface PerpetualUpdatedEventObject {
  _perpetualID: BigNumber;
  _margin: BigNumber;
}
export type PerpetualUpdatedEvent = TypedEvent<[BigNumber, BigNumber], PerpetualUpdatedEventObject>;

export type PerpetualUpdatedEventFilter = TypedEventFilter<PerpetualUpdatedEvent>;

export interface PerpetualsForceClosedEventObject {
  perpetualIDs: BigNumber[];
  ownerAndCashOut: PairsStructOutput[];
  keeper: string;
  reward: BigNumber;
}
export type PerpetualsForceClosedEvent = TypedEvent<
  [BigNumber[], PairsStructOutput[], string, BigNumber],
  PerpetualsForceClosedEventObject
>;

export type PerpetualsForceClosedEventFilter = TypedEventFilter<PerpetualsForceClosedEvent>;

export interface RecoveredEventObject {
  tokenAddress: string;
  to: string;
  amount: BigNumber;
}
export type RecoveredEvent = TypedEvent<[string, string, BigNumber], RecoveredEventObject>;

export type RecoveredEventFilter = TypedEventFilter<RecoveredEvent>;

export interface RewardAddedEventObject {
  _reward: BigNumber;
}
export type RewardAddedEvent = TypedEvent<[BigNumber], RewardAddedEventObject>;

export type RewardAddedEventFilter = TypedEventFilter<RewardAddedEvent>;

export interface RewardPaidEventObject {
  _user: string;
  _reward: BigNumber;
}
export type RewardPaidEvent = TypedEvent<[string, BigNumber], RewardPaidEventObject>;

export type RewardPaidEventFilter = TypedEventFilter<RewardPaidEvent>;

export interface RewardsDistributionDurationUpdatedEventObject {
  _rewardsDuration: BigNumber;
  _rewardsDistributor: string;
}
export type RewardsDistributionDurationUpdatedEvent = TypedEvent<
  [BigNumber, string],
  RewardsDistributionDurationUpdatedEventObject
>;

export type RewardsDistributionDurationUpdatedEventFilter = TypedEventFilter<RewardsDistributionDurationUpdatedEvent>;

export interface RewardsDistributionUpdatedEventObject {
  _rewardsDistributor: string;
}
export type RewardsDistributionUpdatedEvent = TypedEvent<[string], RewardsDistributionUpdatedEventObject>;

export type RewardsDistributionUpdatedEventFilter = TypedEventFilter<RewardsDistributionUpdatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TargetAndLimitHAHedgeUpdatedEventObject {
  _targetHAHedge: BigNumber;
  _limitHAHedge: BigNumber;
}
export type TargetAndLimitHAHedgeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  TargetAndLimitHAHedgeUpdatedEventObject
>;

export type TargetAndLimitHAHedgeUpdatedEventFilter = TypedEventFilter<TargetAndLimitHAHedgeUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface AnglePerpetualManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AnglePerpetualManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE_PARAMS(overrides?: CallOverrides): Promise<[BigNumber]>;

    BASE_TOKENS(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    GUARDIAN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    POOLMANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addToPerpetual(
      perpetualID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      perpetualID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    closePerpetual(
      perpetualID: BigNumberish,
      to: string,
      minCashOutAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deployCollateral(
      governorList: string[],
      guardian: string,
      feeManager_: string,
      oracle_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    earned(perpetualID: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    forceClosePerpetuals(
      perpetualIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getApproved(perpetualID: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getCashOutAmount(
      perpetualID: BigNumberish,
      rate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    getReward(
      perpetualID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    haBonusMalusDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    haBonusMalusWithdraw(overrides?: CallOverrides): Promise<[BigNumber]>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      poolManager_: string,
      rewardToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<[boolean]>;

    isApprovedOrOwner(spender: string, perpetualID: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    keeperFeesClosingCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    keeperFeesLiquidationCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    keeperFeesLiquidationRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    limitHAHedge(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidatePerpetuals(
      perpetualIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    lockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    maintenanceMargin(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLeverage(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    notifyRewardAmount(
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    openPerpetual(
      owner: string,
      margin: BigNumberish,
      committedAmount: BigNumberish,
      maxOracleRate: BigNumberish,
      minNetMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(perpetualID: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    periodFinish(overrides?: CallOverrides): Promise<[BigNumber]>;

    perpetualData(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        entryRate: BigNumber;
        entryTimestamp: BigNumber;
        margin: BigNumber;
        committedAmount: BigNumber;
      }
    >;

    perpetualRewardPerTokenPaid(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    poolManager(overrides?: CallOverrides): Promise<[string]>;

    recoverERC20(
      tokenAddress: string,
      to: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    removeFromPerpetual(
      perpetualID: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    rewards(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsDistribution(overrides?: CallOverrides): Promise<[string]>;

    rewardsDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      perpetualID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      perpetualID: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setBoundsPerpetual(
      _maxLeverage: BigNumberish,
      _maintenanceMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setFeeKeeper(
      feeDeposit: BigNumberish,
      feeWithdraw: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setFeeManager(
      feeManager_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setHAFees(
      _xHAFees: BigNumberish[],
      _yHAFees: BigNumberish[],
      deposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setKeeperFeesCap(
      _keeperFeesLiquidationCap: BigNumberish,
      _keeperFeesClosingCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setKeeperFeesClosing(
      _xKeeperFeesClosing: BigNumberish[],
      _yKeeperFeesClosing: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setKeeperFeesLiquidationRatio(
      _keeperFeesLiquidationRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setLockTime(
      _lockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setNewRewardsDistribution(
      _rewardsDistribution: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setOracle(
      oracle_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRewardDistribution(
      _rewardsDuration: BigNumberish,
      _rewardsDistribution: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTargetAndLimitHAHedge(
      _targetHAHedge: BigNumberish,
      _limitHAHedge: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    targetHAHedge(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenURI(perpetualID: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    totalHedgeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      perpetualID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    xHAFeesDeposit(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    xHAFeesWithdraw(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    xKeeperFeesClosing(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    yHAFeesDeposit(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    yHAFeesWithdraw(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    yKeeperFeesClosing(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  BASE_PARAMS(overrides?: CallOverrides): Promise<BigNumber>;

  BASE_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  GUARDIAN_ROLE(overrides?: CallOverrides): Promise<string>;

  POOLMANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  addToPerpetual(
    perpetualID: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    perpetualID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  closePerpetual(
    perpetualID: BigNumberish,
    to: string,
    minCashOutAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  deployCollateral(
    governorList: string[],
    guardian: string,
    feeManager_: string,
    oracle_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  earned(perpetualID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  forceClosePerpetuals(
    perpetualIDs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getApproved(perpetualID: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getCashOutAmount(
    perpetualID: BigNumberish,
    rate: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>;

  getReward(
    perpetualID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  haBonusMalusDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  haBonusMalusWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

  hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

  initialize(
    poolManager_: string,
    rewardToken_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

  isApprovedOrOwner(spender: string, perpetualID: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  keeperFeesClosingCap(overrides?: CallOverrides): Promise<BigNumber>;

  keeperFeesLiquidationCap(overrides?: CallOverrides): Promise<BigNumber>;

  keeperFeesLiquidationRatio(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  limitHAHedge(overrides?: CallOverrides): Promise<BigNumber>;

  liquidatePerpetuals(
    perpetualIDs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  lockTime(overrides?: CallOverrides): Promise<BigNumber>;

  maintenanceMargin(overrides?: CallOverrides): Promise<BigNumber>;

  maxLeverage(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  notifyRewardAmount(
    reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  openPerpetual(
    owner: string,
    margin: BigNumberish,
    committedAmount: BigNumberish,
    maxOracleRate: BigNumberish,
    minNetMargin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  oracle(overrides?: CallOverrides): Promise<string>;

  ownerOf(perpetualID: BigNumberish, overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

  perpetualData(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      entryRate: BigNumber;
      entryTimestamp: BigNumber;
      margin: BigNumber;
      committedAmount: BigNumber;
    }
  >;

  perpetualRewardPerTokenPaid(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  poolManager(overrides?: CallOverrides): Promise<string>;

  recoverERC20(
    tokenAddress: string,
    to: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  removeFromPerpetual(
    perpetualID: BigNumberish,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

  rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  rewards(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  rewardsDistribution(overrides?: CallOverrides): Promise<string>;

  rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

  'safeTransferFrom(address,address,uint256)'(
    from: string,
    to: string,
    perpetualID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'safeTransferFrom(address,address,uint256,bytes)'(
    from: string,
    to: string,
    perpetualID: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setBaseURI(
    _baseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setBoundsPerpetual(
    _maxLeverage: BigNumberish,
    _maintenanceMargin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setFeeKeeper(
    feeDeposit: BigNumberish,
    feeWithdraw: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setFeeManager(
    feeManager_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setHAFees(
    _xHAFees: BigNumberish[],
    _yHAFees: BigNumberish[],
    deposit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setKeeperFeesCap(
    _keeperFeesLiquidationCap: BigNumberish,
    _keeperFeesClosingCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setKeeperFeesClosing(
    _xKeeperFeesClosing: BigNumberish[],
    _yKeeperFeesClosing: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setKeeperFeesLiquidationRatio(
    _keeperFeesLiquidationRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setLockTime(
    _lockTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setNewRewardsDistribution(
    _rewardsDistribution: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setOracle(oracle_: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setRewardDistribution(
    _rewardsDuration: BigNumberish,
    _rewardsDistribution: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setTargetAndLimitHAHedge(
    _targetHAHedge: BigNumberish,
    _limitHAHedge: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  targetHAHedge(overrides?: CallOverrides): Promise<BigNumber>;

  tokenURI(perpetualID: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalHedgeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    perpetualID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  xHAFeesDeposit(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  xHAFeesWithdraw(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  xKeeperFeesClosing(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  yHAFeesDeposit(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  yHAFeesWithdraw(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  yKeeperFeesClosing(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BASE_PARAMS(overrides?: CallOverrides): Promise<BigNumber>;

    BASE_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    GUARDIAN_ROLE(overrides?: CallOverrides): Promise<string>;

    POOLMANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    addToPerpetual(perpetualID: BigNumberish, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    approve(to: string, perpetualID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    closePerpetual(
      perpetualID: BigNumberish,
      to: string,
      minCashOutAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    deployCollateral(
      governorList: string[],
      guardian: string,
      feeManager_: string,
      oracle_: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    earned(perpetualID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    forceClosePerpetuals(perpetualIDs: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    getApproved(perpetualID: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getCashOutAmount(
      perpetualID: BigNumberish,
      rate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    getReward(perpetualID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    haBonusMalusDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    haBonusMalusWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

    initialize(poolManager_: string, rewardToken_: string, overrides?: CallOverrides): Promise<void>;

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

    isApprovedOrOwner(spender: string, perpetualID: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    keeperFeesClosingCap(overrides?: CallOverrides): Promise<BigNumber>;

    keeperFeesLiquidationCap(overrides?: CallOverrides): Promise<BigNumber>;

    keeperFeesLiquidationRatio(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    limitHAHedge(overrides?: CallOverrides): Promise<BigNumber>;

    liquidatePerpetuals(perpetualIDs: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    lockTime(overrides?: CallOverrides): Promise<BigNumber>;

    maintenanceMargin(overrides?: CallOverrides): Promise<BigNumber>;

    maxLeverage(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    notifyRewardAmount(reward: BigNumberish, overrides?: CallOverrides): Promise<void>;

    openPerpetual(
      owner: string,
      margin: BigNumberish,
      committedAmount: BigNumberish,
      maxOracleRate: BigNumberish,
      minNetMargin: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<string>;

    ownerOf(perpetualID: BigNumberish, overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    perpetualData(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        entryRate: BigNumber;
        entryTimestamp: BigNumber;
        margin: BigNumber;
        committedAmount: BigNumber;
      }
    >;

    perpetualRewardPerTokenPaid(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    poolManager(overrides?: CallOverrides): Promise<string>;

    recoverERC20(tokenAddress: string, to: string, tokenAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    removeFromPerpetual(
      perpetualID: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    rewards(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rewardsDistribution(overrides?: CallOverrides): Promise<string>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      perpetualID: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      perpetualID: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    setApprovalForAll(operator: string, approved: boolean, overrides?: CallOverrides): Promise<void>;

    setBaseURI(_baseURI: string, overrides?: CallOverrides): Promise<void>;

    setBoundsPerpetual(
      _maxLeverage: BigNumberish,
      _maintenanceMargin: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setFeeKeeper(feeDeposit: BigNumberish, feeWithdraw: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFeeManager(feeManager_: string, overrides?: CallOverrides): Promise<void>;

    setHAFees(
      _xHAFees: BigNumberish[],
      _yHAFees: BigNumberish[],
      deposit: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setKeeperFeesCap(
      _keeperFeesLiquidationCap: BigNumberish,
      _keeperFeesClosingCap: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setKeeperFeesClosing(
      _xKeeperFeesClosing: BigNumberish[],
      _yKeeperFeesClosing: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    setKeeperFeesLiquidationRatio(_keeperFeesLiquidationRatio: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setLockTime(_lockTime: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setNewRewardsDistribution(_rewardsDistribution: string, overrides?: CallOverrides): Promise<void>;

    setOracle(oracle_: string, overrides?: CallOverrides): Promise<void>;

    setRewardDistribution(
      _rewardsDuration: BigNumberish,
      _rewardsDistribution: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setTargetAndLimitHAHedge(
      _targetHAHedge: BigNumberish,
      _limitHAHedge: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    targetHAHedge(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(perpetualID: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalHedgeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(from: string, to: string, perpetualID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    xHAFeesDeposit(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    xHAFeesWithdraw(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    xKeeperFeesClosing(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    yHAFeesDeposit(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    yHAFeesWithdraw(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    yKeeperFeesClosing(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, approved?: string | null, tokenId?: BigNumberish | null): ApprovalEventFilter;

    'ApprovalForAll(address,address,bool)'(
      owner?: string | null,
      operator?: string | null,
      approved?: null,
    ): ApprovalForAllEventFilter;
    ApprovalForAll(owner?: string | null, operator?: string | null, approved?: null): ApprovalForAllEventFilter;

    'BaseURIUpdated(string)'(_baseURI?: null): BaseURIUpdatedEventFilter;
    BaseURIUpdated(_baseURI?: null): BaseURIUpdatedEventFilter;

    'BoundsPerpetualUpdated(uint64,uint64)'(
      _maxLeverage?: null,
      _maintenanceMargin?: null,
    ): BoundsPerpetualUpdatedEventFilter;
    BoundsPerpetualUpdated(_maxLeverage?: null, _maintenanceMargin?: null): BoundsPerpetualUpdatedEventFilter;

    'HAFeesUpdated(uint64[],uint64[],uint8)'(
      _xHAFees?: null,
      _yHAFees?: null,
      deposit?: null,
    ): HAFeesUpdatedEventFilter;
    HAFeesUpdated(_xHAFees?: null, _yHAFees?: null, deposit?: null): HAFeesUpdatedEventFilter;

    'KeeperFeesCapUpdated(uint256,uint256)'(
      _keeperFeesLiquidationCap?: null,
      _keeperFeesClosingCap?: null,
    ): KeeperFeesCapUpdatedEventFilter;
    KeeperFeesCapUpdated(
      _keeperFeesLiquidationCap?: null,
      _keeperFeesClosingCap?: null,
    ): KeeperFeesCapUpdatedEventFilter;

    'KeeperFeesClosingUpdated(uint64[],uint64[])'(
      xKeeperFeesClosing?: null,
      yKeeperFeesClosing?: null,
    ): KeeperFeesClosingUpdatedEventFilter;
    KeeperFeesClosingUpdated(xKeeperFeesClosing?: null, yKeeperFeesClosing?: null): KeeperFeesClosingUpdatedEventFilter;

    'KeeperFeesLiquidationRatioUpdated(uint64)'(
      _keeperFeesLiquidationRatio?: null,
    ): KeeperFeesLiquidationRatioUpdatedEventFilter;
    KeeperFeesLiquidationRatioUpdated(_keeperFeesLiquidationRatio?: null): KeeperFeesLiquidationRatioUpdatedEventFilter;

    'KeeperTransferred(address,uint256)'(keeperAddress?: null, liquidationFees?: null): KeeperTransferredEventFilter;
    KeeperTransferred(keeperAddress?: null, liquidationFees?: null): KeeperTransferredEventFilter;

    'LockTimeUpdated(uint64)'(_lockTime?: null): LockTimeUpdatedEventFilter;
    LockTimeUpdated(_lockTime?: null): LockTimeUpdatedEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'PerpetualClosed(uint256,uint256)'(_perpetualID?: null, _closeAmount?: null): PerpetualClosedEventFilter;
    PerpetualClosed(_perpetualID?: null, _closeAmount?: null): PerpetualClosedEventFilter;

    'PerpetualOpened(uint256,uint256,uint256,uint256)'(
      _perpetualID?: null,
      _entryRate?: null,
      _margin?: null,
      _committedAmount?: null,
    ): PerpetualOpenedEventFilter;
    PerpetualOpened(
      _perpetualID?: null,
      _entryRate?: null,
      _margin?: null,
      _committedAmount?: null,
    ): PerpetualOpenedEventFilter;

    'PerpetualUpdated(uint256,uint256)'(_perpetualID?: null, _margin?: null): PerpetualUpdatedEventFilter;
    PerpetualUpdated(_perpetualID?: null, _margin?: null): PerpetualUpdatedEventFilter;

    'PerpetualsForceClosed(uint256[],tuple[],address,uint256)'(
      perpetualIDs?: null,
      ownerAndCashOut?: null,
      keeper?: null,
      reward?: null,
    ): PerpetualsForceClosedEventFilter;
    PerpetualsForceClosed(
      perpetualIDs?: null,
      ownerAndCashOut?: null,
      keeper?: null,
      reward?: null,
    ): PerpetualsForceClosedEventFilter;

    'Recovered(address,address,uint256)'(
      tokenAddress?: string | null,
      to?: string | null,
      amount?: null,
    ): RecoveredEventFilter;
    Recovered(tokenAddress?: string | null, to?: string | null, amount?: null): RecoveredEventFilter;

    'RewardAdded(uint256)'(_reward?: null): RewardAddedEventFilter;
    RewardAdded(_reward?: null): RewardAddedEventFilter;

    'RewardPaid(address,uint256)'(_user?: string | null, _reward?: null): RewardPaidEventFilter;
    RewardPaid(_user?: string | null, _reward?: null): RewardPaidEventFilter;

    'RewardsDistributionDurationUpdated(uint256,address)'(
      _rewardsDuration?: null,
      _rewardsDistributor?: string | null,
    ): RewardsDistributionDurationUpdatedEventFilter;
    RewardsDistributionDurationUpdated(
      _rewardsDuration?: null,
      _rewardsDistributor?: string | null,
    ): RewardsDistributionDurationUpdatedEventFilter;

    'RewardsDistributionUpdated(address)'(_rewardsDistributor?: string | null): RewardsDistributionUpdatedEventFilter;
    RewardsDistributionUpdated(_rewardsDistributor?: string | null): RewardsDistributionUpdatedEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter;
    RoleGranted(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleRevokedEventFilter;

    'TargetAndLimitHAHedgeUpdated(uint64,uint64)'(
      _targetHAHedge?: null,
      _limitHAHedge?: null,
    ): TargetAndLimitHAHedgeUpdatedEventFilter;
    TargetAndLimitHAHedgeUpdated(_targetHAHedge?: null, _limitHAHedge?: null): TargetAndLimitHAHedgeUpdatedEventFilter;

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null,
    ): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, tokenId?: BigNumberish | null): TransferEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    BASE_PARAMS(overrides?: CallOverrides): Promise<BigNumber>;

    BASE_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    GUARDIAN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    POOLMANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addToPerpetual(
      perpetualID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    approve(
      to: string,
      perpetualID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    closePerpetual(
      perpetualID: BigNumberish,
      to: string,
      minCashOutAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    deployCollateral(
      governorList: string[],
      guardian: string,
      feeManager_: string,
      oracle_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    earned(perpetualID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    forceClosePerpetuals(
      perpetualIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getApproved(perpetualID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getCashOutAmount(perpetualID: BigNumberish, rate: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getReward(
      perpetualID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    haBonusMalusDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    haBonusMalusWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      poolManager_: string,
      rewardToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedOrOwner(spender: string, perpetualID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    keeperFeesClosingCap(overrides?: CallOverrides): Promise<BigNumber>;

    keeperFeesLiquidationCap(overrides?: CallOverrides): Promise<BigNumber>;

    keeperFeesLiquidationRatio(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    limitHAHedge(overrides?: CallOverrides): Promise<BigNumber>;

    liquidatePerpetuals(
      perpetualIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    lockTime(overrides?: CallOverrides): Promise<BigNumber>;

    maintenanceMargin(overrides?: CallOverrides): Promise<BigNumber>;

    maxLeverage(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    openPerpetual(
      owner: string,
      margin: BigNumberish,
      committedAmount: BigNumberish,
      maxOracleRate: BigNumberish,
      minNetMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(perpetualID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    perpetualData(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    perpetualRewardPerTokenPaid(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    poolManager(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: string,
      to: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    removeFromPerpetual(
      perpetualID: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rewardsDistribution(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      perpetualID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      perpetualID: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setBaseURI(_baseURI: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setBoundsPerpetual(
      _maxLeverage: BigNumberish,
      _maintenanceMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setFeeKeeper(
      feeDeposit: BigNumberish,
      feeWithdraw: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setFeeManager(feeManager_: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setHAFees(
      _xHAFees: BigNumberish[],
      _yHAFees: BigNumberish[],
      deposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setKeeperFeesCap(
      _keeperFeesLiquidationCap: BigNumberish,
      _keeperFeesClosingCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setKeeperFeesClosing(
      _xKeeperFeesClosing: BigNumberish[],
      _yKeeperFeesClosing: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setKeeperFeesLiquidationRatio(
      _keeperFeesLiquidationRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setLockTime(
      _lockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setNewRewardsDistribution(
      _rewardsDistribution: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setOracle(oracle_: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setRewardDistribution(
      _rewardsDuration: BigNumberish,
      _rewardsDistribution: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setTargetAndLimitHAHedge(
      _targetHAHedge: BigNumberish,
      _limitHAHedge: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    targetHAHedge(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(perpetualID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalHedgeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      perpetualID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    xHAFeesDeposit(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    xHAFeesWithdraw(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    xKeeperFeesClosing(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    yHAFeesDeposit(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    yHAFeesWithdraw(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    yKeeperFeesClosing(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_PARAMS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BASE_TOKENS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GUARDIAN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POOLMANAGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addToPerpetual(
      perpetualID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      perpetualID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closePerpetual(
      perpetualID: BigNumberish,
      to: string,
      minCashOutAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    deployCollateral(
      governorList: string[],
      guardian: string,
      feeManager_: string,
      oracle_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    earned(perpetualID: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forceClosePerpetuals(
      perpetualIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getApproved(perpetualID: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCashOutAmount(
      perpetualID: BigNumberish,
      rate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getReward(
      perpetualID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    haBonusMalusDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    haBonusMalusWithdraw(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      poolManager_: string,
      rewardToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedOrOwner(
      spender: string,
      perpetualID: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    keeperFeesClosingCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keeperFeesLiquidationCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keeperFeesLiquidationRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    limitHAHedge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidatePerpetuals(
      perpetualIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    lockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maintenanceMargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxLeverage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyRewardAmount(
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    openPerpetual(
      owner: string,
      margin: BigNumberish,
      committedAmount: BigNumberish,
      maxOracleRate: BigNumberish,
      minNetMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(perpetualID: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodFinish(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    perpetualData(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    perpetualRewardPerTokenPaid(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: string,
      to: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    removeFromPerpetual(
      perpetualID: BigNumberish,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewards(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsDistribution(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      perpetualID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      perpetualID: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setBoundsPerpetual(
      _maxLeverage: BigNumberish,
      _maintenanceMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setFeeKeeper(
      feeDeposit: BigNumberish,
      feeWithdraw: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setFeeManager(
      feeManager_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setHAFees(
      _xHAFees: BigNumberish[],
      _yHAFees: BigNumberish[],
      deposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setKeeperFeesCap(
      _keeperFeesLiquidationCap: BigNumberish,
      _keeperFeesClosingCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setKeeperFeesClosing(
      _xKeeperFeesClosing: BigNumberish[],
      _yKeeperFeesClosing: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setKeeperFeesLiquidationRatio(
      _keeperFeesLiquidationRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setLockTime(
      _lockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setNewRewardsDistribution(
      _rewardsDistribution: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setOracle(
      oracle_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRewardDistribution(
      _rewardsDuration: BigNumberish,
      _rewardsDistribution: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setTargetAndLimitHAHedge(
      _targetHAHedge: BigNumberish,
      _limitHAHedge: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetHAHedge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(perpetualID: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalHedgeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      perpetualID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    xHAFeesDeposit(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xHAFeesWithdraw(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xKeeperFeesClosing(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yHAFeesDeposit(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yHAFeesWithdraw(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yKeeperFeesClosing(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
