/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface AngleLiquidityGaugeInterface extends utils.Interface {
  functions: {
    'initialize(address,address,address,address,address,address)': FunctionFragment;
    'decimals()': FunctionFragment;
    'user_checkpoint(address)': FunctionFragment;
    'claimed_reward(address,address)': FunctionFragment;
    'claimable_reward(address,address)': FunctionFragment;
    'set_rewards_receiver(address)': FunctionFragment;
    'claim_rewards()': FunctionFragment;
    'claim_rewards(address)': FunctionFragment;
    'claim_rewards(address,address)': FunctionFragment;
    'kick(address)': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'deposit(uint256,address)': FunctionFragment;
    'deposit(uint256,address,bool)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdraw(uint256,bool)': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'add_reward(address,address)': FunctionFragment;
    'set_reward_distributor(address,address)': FunctionFragment;
    'deposit_reward_token(address,uint256)': FunctionFragment;
    'commit_transfer_ownership(address)': FunctionFragment;
    'accept_transfer_ownership()': FunctionFragment;
    'recover_erc20(address,address,uint256)': FunctionFragment;
    'ANGLE()': FunctionFragment;
    'voting_escrow()': FunctionFragment;
    'veBoost_proxy()': FunctionFragment;
    'staking_token()': FunctionFragment;
    'decimal_staking_token()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'name()': FunctionFragment;
    'symbol()': FunctionFragment;
    'working_balances(address)': FunctionFragment;
    'working_supply()': FunctionFragment;
    'integrate_checkpoint_of(address)': FunctionFragment;
    'reward_count()': FunctionFragment;
    'reward_tokens(uint256)': FunctionFragment;
    'reward_data(address)': FunctionFragment;
    'rewards_receiver(address)': FunctionFragment;
    'reward_integral_for(address,address)': FunctionFragment;
    'admin()': FunctionFragment;
    'future_admin()': FunctionFragment;
    'initialized()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'initialize'
      | 'decimals'
      | 'user_checkpoint'
      | 'claimed_reward'
      | 'claimable_reward'
      | 'set_rewards_receiver'
      | 'claim_rewards()'
      | 'claim_rewards(address)'
      | 'claim_rewards(address,address)'
      | 'kick'
      | 'deposit(uint256)'
      | 'deposit(uint256,address)'
      | 'deposit(uint256,address,bool)'
      | 'withdraw(uint256)'
      | 'withdraw(uint256,bool)'
      | 'transfer'
      | 'transferFrom'
      | 'approve'
      | 'increaseAllowance'
      | 'decreaseAllowance'
      | 'add_reward'
      | 'set_reward_distributor'
      | 'deposit_reward_token'
      | 'commit_transfer_ownership'
      | 'accept_transfer_ownership'
      | 'recover_erc20'
      | 'ANGLE'
      | 'voting_escrow'
      | 'veBoost_proxy'
      | 'staking_token'
      | 'decimal_staking_token'
      | 'balanceOf'
      | 'totalSupply'
      | 'allowance'
      | 'name'
      | 'symbol'
      | 'working_balances'
      | 'working_supply'
      | 'integrate_checkpoint_of'
      | 'reward_count'
      | 'reward_tokens'
      | 'reward_data'
      | 'rewards_receiver'
      | 'reward_integral_for'
      | 'admin'
      | 'future_admin'
      | 'initialized',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'initialize', values: [string, string, string, string, string, string]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'user_checkpoint', values: [string]): string;
  encodeFunctionData(functionFragment: 'claimed_reward', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'claimable_reward', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'set_rewards_receiver', values: [string]): string;
  encodeFunctionData(functionFragment: 'claim_rewards()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claim_rewards(address)', values: [string]): string;
  encodeFunctionData(functionFragment: 'claim_rewards(address,address)', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'kick', values: [string]): string;
  encodeFunctionData(functionFragment: 'deposit(uint256)', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'deposit(uint256,address)', values: [BigNumberish, string]): string;
  encodeFunctionData(
    functionFragment: 'deposit(uint256,address,bool)',
    values: [BigNumberish, string, boolean],
  ): string;
  encodeFunctionData(functionFragment: 'withdraw(uint256)', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdraw(uint256,bool)', values: [BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'add_reward', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'set_reward_distributor', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'deposit_reward_token', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'commit_transfer_ownership', values: [string]): string;
  encodeFunctionData(functionFragment: 'accept_transfer_ownership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'recover_erc20', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'ANGLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'voting_escrow', values?: undefined): string;
  encodeFunctionData(functionFragment: 'veBoost_proxy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'staking_token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimal_staking_token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'working_balances', values: [string]): string;
  encodeFunctionData(functionFragment: 'working_supply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'integrate_checkpoint_of', values: [string]): string;
  encodeFunctionData(functionFragment: 'reward_count', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reward_tokens', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'reward_data', values: [string]): string;
  encodeFunctionData(functionFragment: 'rewards_receiver', values: [string]): string;
  encodeFunctionData(functionFragment: 'reward_integral_for', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'future_admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialized', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'user_checkpoint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimed_reward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimable_reward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_rewards_receiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim_rewards()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim_rewards(address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim_rewards(address,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'kick', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit(uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit(uint256,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit(uint256,address,bool)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw(uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw(uint256,bool)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'add_reward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_reward_distributor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit_reward_token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'commit_transfer_ownership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accept_transfer_ownership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recover_erc20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ANGLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'voting_escrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'veBoost_proxy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'staking_token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimal_staking_token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'working_balances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'working_supply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'integrate_checkpoint_of', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward_count', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward_tokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward_data', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewards_receiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward_integral_for', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'future_admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialized', data: BytesLike): Result;

  events: {
    'Deposit(address,uint256)': EventFragment;
    'Withdraw(address,uint256)': EventFragment;
    'UpdateLiquidityLimit(address,uint256,uint256,uint256,uint256)': EventFragment;
    'CommitOwnership(address)': EventFragment;
    'ApplyOwnership(address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'RewardDataUpdate(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateLiquidityLimit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CommitOwnership'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ApplyOwnership'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardDataUpdate'): EventFragment;
}

export interface DepositEventObject {
  provider: string;
  value: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface WithdrawEventObject {
  provider: string;
  value: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface UpdateLiquidityLimitEventObject {
  user: string;
  original_balance: BigNumber;
  original_supply: BigNumber;
  working_balance: BigNumber;
  working_supply: BigNumber;
}
export type UpdateLiquidityLimitEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  UpdateLiquidityLimitEventObject
>;

export type UpdateLiquidityLimitEventFilter = TypedEventFilter<UpdateLiquidityLimitEvent>;

export interface CommitOwnershipEventObject {
  admin: string;
}
export type CommitOwnershipEvent = TypedEvent<[string], CommitOwnershipEventObject>;

export type CommitOwnershipEventFilter = TypedEventFilter<CommitOwnershipEvent>;

export interface ApplyOwnershipEventObject {
  admin: string;
}
export type ApplyOwnershipEvent = TypedEvent<[string], ApplyOwnershipEventObject>;

export type ApplyOwnershipEventFilter = TypedEventFilter<ApplyOwnershipEvent>;

export interface TransferEventObject {
  _from: string;
  _to: string;
  _value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ApprovalEventObject {
  _owner: string;
  _spender: string;
  _value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface RewardDataUpdateEventObject {
  _token: string;
  _amount: BigNumber;
}
export type RewardDataUpdateEvent = TypedEvent<[string, BigNumber], RewardDataUpdateEventObject>;

export type RewardDataUpdateEventFilter = TypedEventFilter<RewardDataUpdateEvent>;

export interface AngleLiquidityGauge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AngleLiquidityGaugeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    initialize(
      _staking_token: string,
      _admin: string,
      _ANGLE: string,
      _voting_escrow: string,
      _veBoost_proxy: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    user_checkpoint(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claimed_reward(_addr: string, _token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    claimable_reward(_user: string, _reward_token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    set_rewards_receiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'claim_rewards()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'claim_rewards(address)'(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'claim_rewards(address,address)'(
      _addr: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    kick(addr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'deposit(uint256)'(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'deposit(uint256,address)'(
      _value: BigNumberish,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'deposit(uint256,address,bool)'(
      _value: BigNumberish,
      _addr: string,
      _claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'withdraw(uint256)'(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'withdraw(uint256,bool)'(
      _value: BigNumberish,
      _claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    increaseAllowance(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    decreaseAllowance(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    add_reward(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    set_reward_distributor(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deposit_reward_token(
      _reward_token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    commit_transfer_ownership(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    accept_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    recover_erc20(
      token: string,
      addr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    ANGLE(overrides?: CallOverrides): Promise<[string]>;

    voting_escrow(overrides?: CallOverrides): Promise<[string]>;

    veBoost_proxy(overrides?: CallOverrides): Promise<[string]>;

    staking_token(overrides?: CallOverrides): Promise<[string]>;

    decimal_staking_token(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    working_balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    working_supply(overrides?: CallOverrides): Promise<[BigNumber]>;

    integrate_checkpoint_of(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    reward_count(overrides?: CallOverrides): Promise<[BigNumber]>;

    reward_tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    reward_data(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        distributor: string;
        period_finish: BigNumber;
        rate: BigNumber;
        last_update: BigNumber;
        integral: BigNumber;
      }
    >;

    rewards_receiver(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    reward_integral_for(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    future_admin(overrides?: CallOverrides): Promise<[string]>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;
  };

  initialize(
    _staking_token: string,
    _admin: string,
    _ANGLE: string,
    _voting_escrow: string,
    _veBoost_proxy: string,
    _distributor: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  user_checkpoint(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claimed_reward(_addr: string, _token: string, overrides?: CallOverrides): Promise<BigNumber>;

  claimable_reward(_user: string, _reward_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  set_rewards_receiver(
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'claim_rewards()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'claim_rewards(address)'(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'claim_rewards(address,address)'(
    _addr: string,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  kick(addr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'deposit(uint256)'(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'deposit(uint256,address)'(
    _value: BigNumberish,
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'deposit(uint256,address,bool)'(
    _value: BigNumberish,
    _addr: string,
    _claim_rewards: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'withdraw(uint256)'(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'withdraw(uint256,bool)'(
    _value: BigNumberish,
    _claim_rewards: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transfer(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  approve(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  increaseAllowance(
    _spender: string,
    _added_value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  decreaseAllowance(
    _spender: string,
    _subtracted_value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  add_reward(
    _reward_token: string,
    _distributor: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  set_reward_distributor(
    _reward_token: string,
    _distributor: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  deposit_reward_token(
    _reward_token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  commit_transfer_ownership(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  accept_transfer_ownership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  recover_erc20(
    token: string,
    addr: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  ANGLE(overrides?: CallOverrides): Promise<string>;

  voting_escrow(overrides?: CallOverrides): Promise<string>;

  veBoost_proxy(overrides?: CallOverrides): Promise<string>;

  staking_token(overrides?: CallOverrides): Promise<string>;

  decimal_staking_token(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  working_balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  working_supply(overrides?: CallOverrides): Promise<BigNumber>;

  integrate_checkpoint_of(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  reward_count(overrides?: CallOverrides): Promise<BigNumber>;

  reward_tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  reward_data(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      token: string;
      distributor: string;
      period_finish: BigNumber;
      rate: BigNumber;
      last_update: BigNumber;
      integral: BigNumber;
    }
  >;

  rewards_receiver(arg0: string, overrides?: CallOverrides): Promise<string>;

  reward_integral_for(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  future_admin(overrides?: CallOverrides): Promise<string>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    initialize(
      _staking_token: string,
      _admin: string,
      _ANGLE: string,
      _voting_escrow: string,
      _veBoost_proxy: string,
      _distributor: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    user_checkpoint(addr: string, overrides?: CallOverrides): Promise<boolean>;

    claimed_reward(_addr: string, _token: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimable_reward(_user: string, _reward_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    set_rewards_receiver(_receiver: string, overrides?: CallOverrides): Promise<void>;

    'claim_rewards()'(overrides?: CallOverrides): Promise<void>;

    'claim_rewards(address)'(_addr: string, overrides?: CallOverrides): Promise<void>;

    'claim_rewards(address,address)'(_addr: string, _receiver: string, overrides?: CallOverrides): Promise<void>;

    kick(addr: string, overrides?: CallOverrides): Promise<void>;

    'deposit(uint256)'(_value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'deposit(uint256,address)'(_value: BigNumberish, _addr: string, overrides?: CallOverrides): Promise<void>;

    'deposit(uint256,address,bool)'(
      _value: BigNumberish,
      _addr: string,
      _claim_rewards: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    'withdraw(uint256)'(_value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'withdraw(uint256,bool)'(_value: BigNumberish, _claim_rewards: boolean, overrides?: CallOverrides): Promise<void>;

    transfer(_to: string, _value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(_from: string, _to: string, _value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    approve(_spender: string, _value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    increaseAllowance(_spender: string, _added_value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    decreaseAllowance(_spender: string, _subtracted_value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    add_reward(_reward_token: string, _distributor: string, overrides?: CallOverrides): Promise<void>;

    set_reward_distributor(_reward_token: string, _distributor: string, overrides?: CallOverrides): Promise<void>;

    deposit_reward_token(_reward_token: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    commit_transfer_ownership(addr: string, overrides?: CallOverrides): Promise<void>;

    accept_transfer_ownership(overrides?: CallOverrides): Promise<void>;

    recover_erc20(token: string, addr: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    ANGLE(overrides?: CallOverrides): Promise<string>;

    voting_escrow(overrides?: CallOverrides): Promise<string>;

    veBoost_proxy(overrides?: CallOverrides): Promise<string>;

    staking_token(overrides?: CallOverrides): Promise<string>;

    decimal_staking_token(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    working_balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    working_supply(overrides?: CallOverrides): Promise<BigNumber>;

    integrate_checkpoint_of(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    reward_count(overrides?: CallOverrides): Promise<BigNumber>;

    reward_tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    reward_data(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        token: string;
        distributor: string;
        period_finish: BigNumber;
        rate: BigNumber;
        last_update: BigNumber;
        integral: BigNumber;
      }
    >;

    rewards_receiver(arg0: string, overrides?: CallOverrides): Promise<string>;

    reward_integral_for(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    future_admin(overrides?: CallOverrides): Promise<string>;

    initialized(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    'Deposit(address,uint256)'(provider?: string | null, value?: null): DepositEventFilter;
    Deposit(provider?: string | null, value?: null): DepositEventFilter;

    'Withdraw(address,uint256)'(provider?: string | null, value?: null): WithdrawEventFilter;
    Withdraw(provider?: string | null, value?: null): WithdrawEventFilter;

    'UpdateLiquidityLimit(address,uint256,uint256,uint256,uint256)'(
      user?: null,
      original_balance?: null,
      original_supply?: null,
      working_balance?: null,
      working_supply?: null,
    ): UpdateLiquidityLimitEventFilter;
    UpdateLiquidityLimit(
      user?: null,
      original_balance?: null,
      original_supply?: null,
      working_balance?: null,
      working_supply?: null,
    ): UpdateLiquidityLimitEventFilter;

    'CommitOwnership(address)'(admin?: null): CommitOwnershipEventFilter;
    CommitOwnership(admin?: null): CommitOwnershipEventFilter;

    'ApplyOwnership(address)'(admin?: null): ApplyOwnershipEventFilter;
    ApplyOwnership(admin?: null): ApplyOwnershipEventFilter;

    'Transfer(address,address,uint256)'(_from?: string | null, _to?: string | null, _value?: null): TransferEventFilter;
    Transfer(_from?: string | null, _to?: string | null, _value?: null): TransferEventFilter;

    'Approval(address,address,uint256)'(
      _owner?: string | null,
      _spender?: string | null,
      _value?: null,
    ): ApprovalEventFilter;
    Approval(_owner?: string | null, _spender?: string | null, _value?: null): ApprovalEventFilter;

    'RewardDataUpdate(address,uint256)'(_token?: string | null, _amount?: null): RewardDataUpdateEventFilter;
    RewardDataUpdate(_token?: string | null, _amount?: null): RewardDataUpdateEventFilter;
  };

  estimateGas: {
    initialize(
      _staking_token: string,
      _admin: string,
      _ANGLE: string,
      _voting_escrow: string,
      _veBoost_proxy: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    user_checkpoint(addr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    claimed_reward(_addr: string, _token: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimable_reward(_user: string, _reward_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    set_rewards_receiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'claim_rewards()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'claim_rewards(address)'(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'claim_rewards(address,address)'(
      _addr: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    kick(addr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'deposit(uint256)'(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'deposit(uint256,address)'(
      _value: BigNumberish,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'deposit(uint256,address,bool)'(
      _value: BigNumberish,
      _addr: string,
      _claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'withdraw(uint256)'(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'withdraw(uint256,bool)'(
      _value: BigNumberish,
      _claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    increaseAllowance(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    decreaseAllowance(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    add_reward(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    set_reward_distributor(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    deposit_reward_token(
      _reward_token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    commit_transfer_ownership(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    accept_transfer_ownership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    recover_erc20(
      token: string,
      addr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    ANGLE(overrides?: CallOverrides): Promise<BigNumber>;

    voting_escrow(overrides?: CallOverrides): Promise<BigNumber>;

    veBoost_proxy(overrides?: CallOverrides): Promise<BigNumber>;

    staking_token(overrides?: CallOverrides): Promise<BigNumber>;

    decimal_staking_token(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    working_balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    working_supply(overrides?: CallOverrides): Promise<BigNumber>;

    integrate_checkpoint_of(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    reward_count(overrides?: CallOverrides): Promise<BigNumber>;

    reward_tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    reward_data(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewards_receiver(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    reward_integral_for(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    future_admin(overrides?: CallOverrides): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    initialize(
      _staking_token: string,
      _admin: string,
      _ANGLE: string,
      _voting_escrow: string,
      _veBoost_proxy: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    user_checkpoint(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claimed_reward(_addr: string, _token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimable_reward(_user: string, _reward_token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    set_rewards_receiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'claim_rewards()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'claim_rewards(address)'(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'claim_rewards(address,address)'(
      _addr: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    kick(addr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'deposit(uint256)'(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'deposit(uint256,address)'(
      _value: BigNumberish,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'deposit(uint256,address,bool)'(
      _value: BigNumberish,
      _addr: string,
      _claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'withdraw(uint256)'(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'withdraw(uint256,bool)'(
      _value: BigNumberish,
      _claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    decreaseAllowance(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    add_reward(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    set_reward_distributor(
      _reward_token: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    deposit_reward_token(
      _reward_token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    commit_transfer_ownership(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    accept_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    recover_erc20(
      token: string,
      addr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    ANGLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voting_escrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    veBoost_proxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    staking_token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimal_staking_token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    working_balances(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    working_supply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    integrate_checkpoint_of(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_data(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewards_receiver(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_integral_for(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
