/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export type PaymentDataStruct = {
  stablecoinAmountToGive: BigNumberish;
  stablecoinAmountToReceive: BigNumberish;
  collateralAmountToGive: BigNumberish;
  collateralAmountToReceive: BigNumberish;
};

export type PaymentDataStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {
  stablecoinAmountToGive: BigNumber;
  stablecoinAmountToReceive: BigNumber;
  collateralAmountToGive: BigNumber;
  collateralAmountToReceive: BigNumber;
};

export type LiquidationOpportunityStruct = {
  maxStablecoinAmountToRepay: BigNumberish;
  maxCollateralAmountGiven: BigNumberish;
  thresholdRepayAmount: BigNumberish;
  discount: BigNumberish;
  currentDebt: BigNumberish;
};

export type LiquidationOpportunityStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
  maxStablecoinAmountToRepay: BigNumber;
  maxCollateralAmountGiven: BigNumber;
  thresholdRepayAmount: BigNumber;
  discount: BigNumber;
  currentDebt: BigNumber;
};

export type VaultParametersStruct = {
  debtCeiling: BigNumberish;
  collateralFactor: BigNumberish;
  targetHealthFactor: BigNumberish;
  interestRate: BigNumberish;
  liquidationSurcharge: BigNumberish;
  maxLiquidationDiscount: BigNumberish;
  whitelistingActivated: boolean;
  baseBoost: BigNumberish;
};

export type VaultParametersStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  BigNumber,
] & {
  debtCeiling: BigNumber;
  collateralFactor: BigNumber;
  targetHealthFactor: BigNumber;
  interestRate: BigNumber;
  liquidationSurcharge: BigNumber;
  maxLiquidationDiscount: BigNumber;
  whitelistingActivated: boolean;
  baseBoost: BigNumber;
};

export type LiquidatorDataStruct = {
  stablecoinAmountToReceive: BigNumberish;
  collateralAmountToGive: BigNumberish;
  badDebtFromLiquidation: BigNumberish;
  oracleValue: BigNumberish;
  newInterestAccumulator: BigNumberish;
};

export type LiquidatorDataStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
  stablecoinAmountToReceive: BigNumber;
  collateralAmountToGive: BigNumber;
  badDebtFromLiquidation: BigNumber;
  oracleValue: BigNumber;
  newInterestAccumulator: BigNumber;
};

export interface AngleVaultManagerInterface extends utils.Interface {
  functions: {
    'BASE_INTEREST()': FunctionFragment;
    'BASE_PARAMS()': FunctionFragment;
    'DOMAIN_SEPARATOR()': FunctionFragment;
    'HALF_BASE_INTEREST()': FunctionFragment;
    'accrueInterestToTreasury()': FunctionFragment;
    'angle(uint8[],bytes[],address,address)': FunctionFragment;
    'angle(uint8[],bytes[],address,address,address,bytes)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'badDebt()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'borrowFee()': FunctionFragment;
    'checkLiquidation(uint256,address)': FunctionFragment;
    'collateral()': FunctionFragment;
    'collateralFactor()': FunctionFragment;
    'createVault(address)': FunctionFragment;
    'debtCeiling()': FunctionFragment;
    'dust()': FunctionFragment;
    'getApproved(uint256)': FunctionFragment;
    'getControlledVaults(address)': FunctionFragment;
    'getDebtOut(uint256,uint256,uint256,uint256)': FunctionFragment;
    'getTotalDebt()': FunctionFragment;
    'getVaultDebt(uint256)': FunctionFragment;
    'initialize(address,address,address,(uint256,uint64,uint64,uint64,uint64,uint64,bool,uint256),string)': FunctionFragment;
    'interestAccumulator()': FunctionFragment;
    'interestRate()': FunctionFragment;
    'isApprovedForAll(address,address)': FunctionFragment;
    'isApprovedOrOwner(address,uint256)': FunctionFragment;
    'isWhitelisted(address)': FunctionFragment;
    'lastInterestAccumulatorUpdated()': FunctionFragment;
    'liquidate(uint256[],uint256[],address,address,address,bytes)': FunctionFragment;
    'liquidate(uint256[],uint256[],address,address)': FunctionFragment;
    'liquidationSurcharge()': FunctionFragment;
    'maxLiquidationDiscount()': FunctionFragment;
    'name()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'oracle()': FunctionFragment;
    'ownerOf(uint256)': FunctionFragment;
    'paused()': FunctionFragment;
    'permit(address,address,bool,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'repayFee()': FunctionFragment;
    'safeTransferFrom(address,address,uint256)': FunctionFragment;
    'safeTransferFrom(address,address,uint256,bytes)': FunctionFragment;
    'setApprovalForAll(address,bool)': FunctionFragment;
    'setBaseURI(string)': FunctionFragment;
    'setDebtCeiling(uint256)': FunctionFragment;
    'setLiquidationBoostParameters(address,uint256[],uint256[])': FunctionFragment;
    'setOracle(address)': FunctionFragment;
    'setTreasury(address)': FunctionFragment;
    'setUint64(uint64,bytes32)': FunctionFragment;
    'stablecoin()': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'surplus()': FunctionFragment;
    'symbol()': FunctionFragment;
    'targetHealthFactor()': FunctionFragment;
    'togglePause()': FunctionFragment;
    'toggleWhitelist(address)': FunctionFragment;
    'tokenURI(uint256)': FunctionFragment;
    'totalNormalizedDebt()': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'treasury()': FunctionFragment;
    'vaultData(uint256)': FunctionFragment;
    'vaultIDCount()': FunctionFragment;
    'veBoostProxy()': FunctionFragment;
    'whitelistingActivated()': FunctionFragment;
    'xLiquidationBoost(uint256)': FunctionFragment;
    'yLiquidationBoost(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BASE_INTEREST'
      | 'BASE_PARAMS'
      | 'DOMAIN_SEPARATOR'
      | 'HALF_BASE_INTEREST'
      | 'accrueInterestToTreasury'
      | 'angle(uint8[],bytes[],address,address)'
      | 'angle(uint8[],bytes[],address,address,address,bytes)'
      | 'approve'
      | 'badDebt'
      | 'balanceOf'
      | 'borrowFee'
      | 'checkLiquidation'
      | 'collateral'
      | 'collateralFactor'
      | 'createVault'
      | 'debtCeiling'
      | 'dust'
      | 'getApproved'
      | 'getControlledVaults'
      | 'getDebtOut'
      | 'getTotalDebt'
      | 'getVaultDebt'
      | 'initialize'
      | 'interestAccumulator'
      | 'interestRate'
      | 'isApprovedForAll'
      | 'isApprovedOrOwner'
      | 'isWhitelisted'
      | 'lastInterestAccumulatorUpdated'
      | 'liquidate(uint256[],uint256[],address,address,address,bytes)'
      | 'liquidate(uint256[],uint256[],address,address)'
      | 'liquidationSurcharge'
      | 'maxLiquidationDiscount'
      | 'name'
      | 'nonces'
      | 'oracle'
      | 'ownerOf'
      | 'paused'
      | 'permit'
      | 'repayFee'
      | 'safeTransferFrom(address,address,uint256)'
      | 'safeTransferFrom(address,address,uint256,bytes)'
      | 'setApprovalForAll'
      | 'setBaseURI'
      | 'setDebtCeiling'
      | 'setLiquidationBoostParameters'
      | 'setOracle'
      | 'setTreasury'
      | 'setUint64'
      | 'stablecoin'
      | 'supportsInterface'
      | 'surplus'
      | 'symbol'
      | 'targetHealthFactor'
      | 'togglePause'
      | 'toggleWhitelist'
      | 'tokenURI'
      | 'totalNormalizedDebt'
      | 'transferFrom'
      | 'treasury'
      | 'vaultData'
      | 'vaultIDCount'
      | 'veBoostProxy'
      | 'whitelistingActivated'
      | 'xLiquidationBoost'
      | 'yLiquidationBoost',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BASE_INTEREST', values?: undefined): string;
  encodeFunctionData(functionFragment: 'BASE_PARAMS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'HALF_BASE_INTEREST', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accrueInterestToTreasury', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'angle(uint8[],bytes[],address,address)',
    values: [BigNumberish[], BytesLike[], string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'angle(uint8[],bytes[],address,address,address,bytes)',
    values: [BigNumberish[], BytesLike[], string, string, string, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'badDebt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'borrowFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'checkLiquidation', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'collateral', values?: undefined): string;
  encodeFunctionData(functionFragment: 'collateralFactor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'createVault', values: [string]): string;
  encodeFunctionData(functionFragment: 'debtCeiling', values?: undefined): string;
  encodeFunctionData(functionFragment: 'dust', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getApproved', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getControlledVaults', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'getDebtOut',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'getTotalDebt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getVaultDebt', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, string, VaultParametersStruct, string],
  ): string;
  encodeFunctionData(functionFragment: 'interestAccumulator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'interestRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isApprovedForAll', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'isApprovedOrOwner', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'isWhitelisted', values: [string]): string;
  encodeFunctionData(functionFragment: 'lastInterestAccumulatorUpdated', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'liquidate(uint256[],uint256[],address,address,address,bytes)',
    values: [BigNumberish[], BigNumberish[], string, string, string, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidate(uint256[],uint256[],address,address)',
    values: [BigNumberish[], BigNumberish[], string, string],
  ): string;
  encodeFunctionData(functionFragment: 'liquidationSurcharge', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxLiquidationDiscount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [string]): string;
  encodeFunctionData(functionFragment: 'oracle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ownerOf', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'permit',
    values: [string, string, boolean, BigNumberish, BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'repayFee', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    values: [string, string, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'setApprovalForAll', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'setBaseURI', values: [string]): string;
  encodeFunctionData(functionFragment: 'setDebtCeiling', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'setLiquidationBoostParameters',
    values: [string, BigNumberish[], BigNumberish[]],
  ): string;
  encodeFunctionData(functionFragment: 'setOracle', values: [string]): string;
  encodeFunctionData(functionFragment: 'setTreasury', values: [string]): string;
  encodeFunctionData(functionFragment: 'setUint64', values: [BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'stablecoin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'surplus', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'targetHealthFactor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'togglePause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'toggleWhitelist', values: [string]): string;
  encodeFunctionData(functionFragment: 'tokenURI', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'totalNormalizedDebt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'treasury', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vaultData', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'vaultIDCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'veBoostProxy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'whitelistingActivated', values?: undefined): string;
  encodeFunctionData(functionFragment: 'xLiquidationBoost', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'yLiquidationBoost', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'BASE_INTEREST', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'BASE_PARAMS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'HALF_BASE_INTEREST', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accrueInterestToTreasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'angle(uint8[],bytes[],address,address)', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'angle(uint8[],bytes[],address,address,address,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'badDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkLiquidation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateralFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'debtCeiling', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dust', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getControlledVaults', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDebtOut', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVaultDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'interestAccumulator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'interestRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedOrOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isWhitelisted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastInterestAccumulatorUpdated', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'liquidate(uint256[],uint256[],address,address,address,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'liquidate(uint256[],uint256[],address,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidationSurcharge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxLiquidationDiscount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'oracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBaseURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDebtCeiling', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLiquidationBoostParameters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTreasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUint64', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stablecoin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'surplus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'targetHealthFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'togglePause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'toggleWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalNormalizedDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaultData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaultIDCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'veBoostProxy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistingActivated', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xLiquidationBoost', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'yLiquidationBoost', data: BytesLike): Result;

  events: {
    'AccruedToTreasury(uint256,uint256)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'ApprovalForAll(address,address,bool)': EventFragment;
    'CollateralAmountUpdated(uint256,uint256,uint8)': EventFragment;
    'DebtCeilingUpdated(uint256)': EventFragment;
    'DebtTransferred(uint256,uint256,address,uint256)': EventFragment;
    'FiledUint64(uint64,bytes32)': EventFragment;
    'InterestAccumulatorUpdated(uint256,uint256)': EventFragment;
    'InternalDebtUpdated(uint256,uint256,uint8)': EventFragment;
    'LiquidatedVaults(uint256[])': EventFragment;
    'LiquidationBoostParametersUpdated(address,uint256[],uint256[])': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AccruedToTreasury'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralAmountUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DebtCeilingUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DebtTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FiledUint64'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InterestAccumulatorUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InternalDebtUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidatedVaults'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidationBoostParametersUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface AccruedToTreasuryEventObject {
  surplusEndValue: BigNumber;
  badDebtEndValue: BigNumber;
}
export type AccruedToTreasuryEvent = TypedEvent<[BigNumber, BigNumber], AccruedToTreasuryEventObject>;

export type AccruedToTreasuryEventFilter = TypedEventFilter<AccruedToTreasuryEvent>;

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<[string, string, boolean], ApprovalForAllEventObject>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface CollateralAmountUpdatedEventObject {
  vaultID: BigNumber;
  collateralAmount: BigNumber;
  isIncrease: number;
}
export type CollateralAmountUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, number],
  CollateralAmountUpdatedEventObject
>;

export type CollateralAmountUpdatedEventFilter = TypedEventFilter<CollateralAmountUpdatedEvent>;

export interface DebtCeilingUpdatedEventObject {
  debtCeiling: BigNumber;
}
export type DebtCeilingUpdatedEvent = TypedEvent<[BigNumber], DebtCeilingUpdatedEventObject>;

export type DebtCeilingUpdatedEventFilter = TypedEventFilter<DebtCeilingUpdatedEvent>;

export interface DebtTransferredEventObject {
  srcVaultID: BigNumber;
  dstVaultID: BigNumber;
  dstVaultManager: string;
  amount: BigNumber;
}
export type DebtTransferredEvent = TypedEvent<[BigNumber, BigNumber, string, BigNumber], DebtTransferredEventObject>;

export type DebtTransferredEventFilter = TypedEventFilter<DebtTransferredEvent>;

export interface FiledUint64EventObject {
  param: BigNumber;
  what: string;
}
export type FiledUint64Event = TypedEvent<[BigNumber, string], FiledUint64EventObject>;

export type FiledUint64EventFilter = TypedEventFilter<FiledUint64Event>;

export interface InterestAccumulatorUpdatedEventObject {
  value: BigNumber;
  timestamp: BigNumber;
}
export type InterestAccumulatorUpdatedEvent = TypedEvent<[BigNumber, BigNumber], InterestAccumulatorUpdatedEventObject>;

export type InterestAccumulatorUpdatedEventFilter = TypedEventFilter<InterestAccumulatorUpdatedEvent>;

export interface InternalDebtUpdatedEventObject {
  vaultID: BigNumber;
  internalAmount: BigNumber;
  isIncrease: number;
}
export type InternalDebtUpdatedEvent = TypedEvent<[BigNumber, BigNumber, number], InternalDebtUpdatedEventObject>;

export type InternalDebtUpdatedEventFilter = TypedEventFilter<InternalDebtUpdatedEvent>;

export interface LiquidatedVaultsEventObject {
  vaultIDs: BigNumber[];
}
export type LiquidatedVaultsEvent = TypedEvent<[BigNumber[]], LiquidatedVaultsEventObject>;

export type LiquidatedVaultsEventFilter = TypedEventFilter<LiquidatedVaultsEvent>;

export interface LiquidationBoostParametersUpdatedEventObject {
  _veBoostProxy: string;
  xBoost: BigNumber[];
  yBoost: BigNumber[];
}
export type LiquidationBoostParametersUpdatedEvent = TypedEvent<
  [string, BigNumber[], BigNumber[]],
  LiquidationBoostParametersUpdatedEventObject
>;

export type LiquidationBoostParametersUpdatedEventFilter = TypedEventFilter<LiquidationBoostParametersUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface AngleVaultManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AngleVaultManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE_INTEREST(overrides?: CallOverrides): Promise<[BigNumber]>;

    BASE_PARAMS(overrides?: CallOverrides): Promise<[BigNumber]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    HALF_BASE_INTEREST(overrides?: CallOverrides): Promise<[BigNumber]>;

    accrueInterestToTreasury(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'angle(uint8[],bytes[],address,address)'(
      actions: BigNumberish[],
      datas: BytesLike[],
      from: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'angle(uint8[],bytes[],address,address,address,bytes)'(
      actions: BigNumberish[],
      datas: BytesLike[],
      from: string,
      to: string,
      who: string,
      repayData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    badDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkLiquidation(
      vaultID: BigNumberish,
      liquidator: string,
      overrides?: CallOverrides,
    ): Promise<
      [LiquidationOpportunityStructOutput] & {
        liqOpp: LiquidationOpportunityStructOutput;
      }
    >;

    collateral(overrides?: CallOverrides): Promise<[string]>;

    collateralFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    createVault(
      toVault: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    debtCeiling(overrides?: CallOverrides): Promise<[BigNumber]>;

    dust(overrides?: CallOverrides): Promise<[BigNumber]>;

    getApproved(vaultID: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getControlledVaults(spender: string, overrides?: CallOverrides): Promise<[BigNumber[], BigNumber]>;

    getDebtOut(
      vaultID: BigNumberish,
      stablecoinAmount: BigNumberish,
      senderBorrowFee: BigNumberish,
      senderRepayFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getTotalDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVaultDebt(vaultID: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _treasury: string,
      _collateral: string,
      _oracle: string,
      params: VaultParametersStruct,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    interestAccumulator(overrides?: CallOverrides): Promise<[BigNumber]>;

    interestRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<[boolean]>;

    isApprovedOrOwner(spender: string, vaultID: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    lastInterestAccumulatorUpdated(overrides?: CallOverrides): Promise<[BigNumber]>;

    'liquidate(uint256[],uint256[],address,address,address,bytes)'(
      vaultIDs: BigNumberish[],
      amounts: BigNumberish[],
      from: string,
      to: string,
      who: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'liquidate(uint256[],uint256[],address,address)'(
      vaultIDs: BigNumberish[],
      amounts: BigNumberish[],
      from: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    liquidationSurcharge(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLiquidationDiscount(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(vaultID: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    permit(
      owner: string,
      spender: string,
      approved: boolean,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    repayFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      vaultID: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setBaseURI(
      baseURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDebtCeiling(
      _debtCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setLiquidationBoostParameters(
      _veBoostProxy: string,
      xBoost: BigNumberish[],
      yBoost: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setUint64(
      param: BigNumberish,
      what: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    stablecoin(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    surplus(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    targetHealthFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    togglePause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    toggleWhitelist(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    tokenURI(vaultID: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    totalNormalizedDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    vaultData(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        collateralAmount: BigNumber;
        normalizedDebt: BigNumber;
      }
    >;

    vaultIDCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    veBoostProxy(overrides?: CallOverrides): Promise<[string]>;

    whitelistingActivated(overrides?: CallOverrides): Promise<[boolean]>;

    xLiquidationBoost(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    yLiquidationBoost(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  BASE_INTEREST(overrides?: CallOverrides): Promise<BigNumber>;

  BASE_PARAMS(overrides?: CallOverrides): Promise<BigNumber>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  HALF_BASE_INTEREST(overrides?: CallOverrides): Promise<BigNumber>;

  accrueInterestToTreasury(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'angle(uint8[],bytes[],address,address)'(
    actions: BigNumberish[],
    datas: BytesLike[],
    from: string,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'angle(uint8[],bytes[],address,address,address,bytes)'(
    actions: BigNumberish[],
    datas: BytesLike[],
    from: string,
    to: string,
    who: string,
    repayData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    vaultID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  badDebt(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  borrowFee(overrides?: CallOverrides): Promise<BigNumber>;

  checkLiquidation(
    vaultID: BigNumberish,
    liquidator: string,
    overrides?: CallOverrides,
  ): Promise<LiquidationOpportunityStructOutput>;

  collateral(overrides?: CallOverrides): Promise<string>;

  collateralFactor(overrides?: CallOverrides): Promise<BigNumber>;

  createVault(
    toVault: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  debtCeiling(overrides?: CallOverrides): Promise<BigNumber>;

  dust(overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(vaultID: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getControlledVaults(spender: string, overrides?: CallOverrides): Promise<[BigNumber[], BigNumber]>;

  getDebtOut(
    vaultID: BigNumberish,
    stablecoinAmount: BigNumberish,
    senderBorrowFee: BigNumberish,
    senderRepayFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getTotalDebt(overrides?: CallOverrides): Promise<BigNumber>;

  getVaultDebt(vaultID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _treasury: string,
    _collateral: string,
    _oracle: string,
    params: VaultParametersStruct,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  interestAccumulator(overrides?: CallOverrides): Promise<BigNumber>;

  interestRate(overrides?: CallOverrides): Promise<BigNumber>;

  isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

  isApprovedOrOwner(spender: string, vaultID: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  lastInterestAccumulatorUpdated(overrides?: CallOverrides): Promise<BigNumber>;

  'liquidate(uint256[],uint256[],address,address,address,bytes)'(
    vaultIDs: BigNumberish[],
    amounts: BigNumberish[],
    from: string,
    to: string,
    who: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'liquidate(uint256[],uint256[],address,address)'(
    vaultIDs: BigNumberish[],
    amounts: BigNumberish[],
    from: string,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  liquidationSurcharge(overrides?: CallOverrides): Promise<BigNumber>;

  maxLiquidationDiscount(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  oracle(overrides?: CallOverrides): Promise<string>;

  ownerOf(vaultID: BigNumberish, overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  permit(
    owner: string,
    spender: string,
    approved: boolean,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  repayFee(overrides?: CallOverrides): Promise<BigNumber>;

  'safeTransferFrom(address,address,uint256)'(
    from: string,
    to: string,
    vaultID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'safeTransferFrom(address,address,uint256,bytes)'(
    from: string,
    to: string,
    vaultID: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setBaseURI(
    baseURI_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setDebtCeiling(
    _debtCeiling: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setLiquidationBoostParameters(
    _veBoostProxy: string,
    xBoost: BigNumberish[],
    yBoost: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setOracle(_oracle: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setTreasury(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setUint64(
    param: BigNumberish,
    what: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  stablecoin(overrides?: CallOverrides): Promise<string>;

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  surplus(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  targetHealthFactor(overrides?: CallOverrides): Promise<BigNumber>;

  togglePause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  toggleWhitelist(
    target: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  tokenURI(vaultID: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalNormalizedDebt(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    vaultID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  vaultData(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      collateralAmount: BigNumber;
      normalizedDebt: BigNumber;
    }
  >;

  vaultIDCount(overrides?: CallOverrides): Promise<BigNumber>;

  veBoostProxy(overrides?: CallOverrides): Promise<string>;

  whitelistingActivated(overrides?: CallOverrides): Promise<boolean>;

  xLiquidationBoost(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  yLiquidationBoost(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BASE_INTEREST(overrides?: CallOverrides): Promise<BigNumber>;

    BASE_PARAMS(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    HALF_BASE_INTEREST(overrides?: CallOverrides): Promise<BigNumber>;

    accrueInterestToTreasury(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        surplusValue: BigNumber;
        badDebtValue: BigNumber;
      }
    >;

    'angle(uint8[],bytes[],address,address)'(
      actions: BigNumberish[],
      datas: BytesLike[],
      from: string,
      to: string,
      overrides?: CallOverrides,
    ): Promise<PaymentDataStructOutput>;

    'angle(uint8[],bytes[],address,address,address,bytes)'(
      actions: BigNumberish[],
      datas: BytesLike[],
      from: string,
      to: string,
      who: string,
      repayData: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PaymentDataStructOutput>;

    approve(to: string, vaultID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    badDebt(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowFee(overrides?: CallOverrides): Promise<BigNumber>;

    checkLiquidation(
      vaultID: BigNumberish,
      liquidator: string,
      overrides?: CallOverrides,
    ): Promise<LiquidationOpportunityStructOutput>;

    collateral(overrides?: CallOverrides): Promise<string>;

    collateralFactor(overrides?: CallOverrides): Promise<BigNumber>;

    createVault(toVault: string, overrides?: CallOverrides): Promise<BigNumber>;

    debtCeiling(overrides?: CallOverrides): Promise<BigNumber>;

    dust(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(vaultID: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getControlledVaults(spender: string, overrides?: CallOverrides): Promise<[BigNumber[], BigNumber]>;

    getDebtOut(
      vaultID: BigNumberish,
      stablecoinAmount: BigNumberish,
      senderBorrowFee: BigNumberish,
      senderRepayFee: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    getTotalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultDebt(vaultID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _treasury: string,
      _collateral: string,
      _oracle: string,
      params: VaultParametersStruct,
      _symbol: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    interestAccumulator(overrides?: CallOverrides): Promise<BigNumber>;

    interestRate(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

    isApprovedOrOwner(spender: string, vaultID: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastInterestAccumulatorUpdated(overrides?: CallOverrides): Promise<BigNumber>;

    'liquidate(uint256[],uint256[],address,address,address,bytes)'(
      vaultIDs: BigNumberish[],
      amounts: BigNumberish[],
      from: string,
      to: string,
      who: string,
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<LiquidatorDataStructOutput>;

    'liquidate(uint256[],uint256[],address,address)'(
      vaultIDs: BigNumberish[],
      amounts: BigNumberish[],
      from: string,
      to: string,
      overrides?: CallOverrides,
    ): Promise<LiquidatorDataStructOutput>;

    liquidationSurcharge(overrides?: CallOverrides): Promise<BigNumber>;

    maxLiquidationDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<string>;

    ownerOf(vaultID: BigNumberish, overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    permit(
      owner: string,
      spender: string,
      approved: boolean,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    repayFee(overrides?: CallOverrides): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      vaultID: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      vaultID: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    setApprovalForAll(operator: string, approved: boolean, overrides?: CallOverrides): Promise<void>;

    setBaseURI(baseURI_: string, overrides?: CallOverrides): Promise<void>;

    setDebtCeiling(_debtCeiling: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setLiquidationBoostParameters(
      _veBoostProxy: string,
      xBoost: BigNumberish[],
      yBoost: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>;

    setOracle(_oracle: string, overrides?: CallOverrides): Promise<void>;

    setTreasury(_treasury: string, overrides?: CallOverrides): Promise<void>;

    setUint64(param: BigNumberish, what: BytesLike, overrides?: CallOverrides): Promise<void>;

    stablecoin(overrides?: CallOverrides): Promise<string>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    surplus(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    targetHealthFactor(overrides?: CallOverrides): Promise<BigNumber>;

    togglePause(overrides?: CallOverrides): Promise<void>;

    toggleWhitelist(target: string, overrides?: CallOverrides): Promise<void>;

    tokenURI(vaultID: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalNormalizedDebt(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(from: string, to: string, vaultID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    vaultData(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        collateralAmount: BigNumber;
        normalizedDebt: BigNumber;
      }
    >;

    vaultIDCount(overrides?: CallOverrides): Promise<BigNumber>;

    veBoostProxy(overrides?: CallOverrides): Promise<string>;

    whitelistingActivated(overrides?: CallOverrides): Promise<boolean>;

    xLiquidationBoost(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    yLiquidationBoost(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'AccruedToTreasury(uint256,uint256)'(surplusEndValue?: null, badDebtEndValue?: null): AccruedToTreasuryEventFilter;
    AccruedToTreasury(surplusEndValue?: null, badDebtEndValue?: null): AccruedToTreasuryEventFilter;

    'Approval(address,address,uint256)'(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, approved?: string | null, tokenId?: BigNumberish | null): ApprovalEventFilter;

    'ApprovalForAll(address,address,bool)'(
      owner?: string | null,
      operator?: string | null,
      approved?: null,
    ): ApprovalForAllEventFilter;
    ApprovalForAll(owner?: string | null, operator?: string | null, approved?: null): ApprovalForAllEventFilter;

    'CollateralAmountUpdated(uint256,uint256,uint8)'(
      vaultID?: null,
      collateralAmount?: null,
      isIncrease?: null,
    ): CollateralAmountUpdatedEventFilter;
    CollateralAmountUpdated(
      vaultID?: null,
      collateralAmount?: null,
      isIncrease?: null,
    ): CollateralAmountUpdatedEventFilter;

    'DebtCeilingUpdated(uint256)'(debtCeiling?: null): DebtCeilingUpdatedEventFilter;
    DebtCeilingUpdated(debtCeiling?: null): DebtCeilingUpdatedEventFilter;

    'DebtTransferred(uint256,uint256,address,uint256)'(
      srcVaultID?: null,
      dstVaultID?: null,
      dstVaultManager?: null,
      amount?: null,
    ): DebtTransferredEventFilter;
    DebtTransferred(
      srcVaultID?: null,
      dstVaultID?: null,
      dstVaultManager?: null,
      amount?: null,
    ): DebtTransferredEventFilter;

    'FiledUint64(uint64,bytes32)'(param?: null, what?: null): FiledUint64EventFilter;
    FiledUint64(param?: null, what?: null): FiledUint64EventFilter;

    'InterestAccumulatorUpdated(uint256,uint256)'(
      value?: null,
      timestamp?: null,
    ): InterestAccumulatorUpdatedEventFilter;
    InterestAccumulatorUpdated(value?: null, timestamp?: null): InterestAccumulatorUpdatedEventFilter;

    'InternalDebtUpdated(uint256,uint256,uint8)'(
      vaultID?: null,
      internalAmount?: null,
      isIncrease?: null,
    ): InternalDebtUpdatedEventFilter;
    InternalDebtUpdated(vaultID?: null, internalAmount?: null, isIncrease?: null): InternalDebtUpdatedEventFilter;

    'LiquidatedVaults(uint256[])'(vaultIDs?: null): LiquidatedVaultsEventFilter;
    LiquidatedVaults(vaultIDs?: null): LiquidatedVaultsEventFilter;

    'LiquidationBoostParametersUpdated(address,uint256[],uint256[])'(
      _veBoostProxy?: string | null,
      xBoost?: null,
      yBoost?: null,
    ): LiquidationBoostParametersUpdatedEventFilter;
    LiquidationBoostParametersUpdated(
      _veBoostProxy?: string | null,
      xBoost?: null,
      yBoost?: null,
    ): LiquidationBoostParametersUpdatedEventFilter;

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null,
    ): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, tokenId?: BigNumberish | null): TransferEventFilter;
  };

  estimateGas: {
    BASE_INTEREST(overrides?: CallOverrides): Promise<BigNumber>;

    BASE_PARAMS(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    HALF_BASE_INTEREST(overrides?: CallOverrides): Promise<BigNumber>;

    accrueInterestToTreasury(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'angle(uint8[],bytes[],address,address)'(
      actions: BigNumberish[],
      datas: BytesLike[],
      from: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'angle(uint8[],bytes[],address,address,address,bytes)'(
      actions: BigNumberish[],
      datas: BytesLike[],
      from: string,
      to: string,
      who: string,
      repayData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    approve(
      to: string,
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    badDebt(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowFee(overrides?: CallOverrides): Promise<BigNumber>;

    checkLiquidation(vaultID: BigNumberish, liquidator: string, overrides?: CallOverrides): Promise<BigNumber>;

    collateral(overrides?: CallOverrides): Promise<BigNumber>;

    collateralFactor(overrides?: CallOverrides): Promise<BigNumber>;

    createVault(toVault: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    debtCeiling(overrides?: CallOverrides): Promise<BigNumber>;

    dust(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(vaultID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getControlledVaults(spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDebtOut(
      vaultID: BigNumberish,
      stablecoinAmount: BigNumberish,
      senderBorrowFee: BigNumberish,
      senderRepayFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getTotalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultDebt(vaultID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _treasury: string,
      _collateral: string,
      _oracle: string,
      params: VaultParametersStruct,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    interestAccumulator(overrides?: CallOverrides): Promise<BigNumber>;

    interestRate(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedOrOwner(spender: string, vaultID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastInterestAccumulatorUpdated(overrides?: CallOverrides): Promise<BigNumber>;

    'liquidate(uint256[],uint256[],address,address,address,bytes)'(
      vaultIDs: BigNumberish[],
      amounts: BigNumberish[],
      from: string,
      to: string,
      who: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'liquidate(uint256[],uint256[],address,address)'(
      vaultIDs: BigNumberish[],
      amounts: BigNumberish[],
      from: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    liquidationSurcharge(overrides?: CallOverrides): Promise<BigNumber>;

    maxLiquidationDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(vaultID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      approved: boolean,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    repayFee(overrides?: CallOverrides): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      vaultID: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setBaseURI(baseURI_: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setDebtCeiling(
      _debtCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setLiquidationBoostParameters(
      _veBoostProxy: string,
      xBoost: BigNumberish[],
      yBoost: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setOracle(_oracle: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setTreasury(_treasury: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setUint64(
      param: BigNumberish,
      what: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    stablecoin(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    surplus(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    targetHealthFactor(overrides?: CallOverrides): Promise<BigNumber>;

    togglePause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    toggleWhitelist(target: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    tokenURI(vaultID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalNormalizedDebt(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    vaultData(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    vaultIDCount(overrides?: CallOverrides): Promise<BigNumber>;

    veBoostProxy(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistingActivated(overrides?: CallOverrides): Promise<BigNumber>;

    xLiquidationBoost(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    yLiquidationBoost(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_INTEREST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BASE_PARAMS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    HALF_BASE_INTEREST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accrueInterestToTreasury(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'angle(uint8[],bytes[],address,address)'(
      actions: BigNumberish[],
      datas: BytesLike[],
      from: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'angle(uint8[],bytes[],address,address,address,bytes)'(
      actions: BigNumberish[],
      datas: BytesLike[],
      from: string,
      to: string,
      who: string,
      repayData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    badDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkLiquidation(
      vaultID: BigNumberish,
      liquidator: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createVault(
      toVault: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    debtCeiling(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dust(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(vaultID: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getControlledVaults(spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDebtOut(
      vaultID: BigNumberish,
      stablecoinAmount: BigNumberish,
      senderBorrowFee: BigNumberish,
      senderRepayFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getTotalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultDebt(vaultID: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _treasury: string,
      _collateral: string,
      _oracle: string,
      params: VaultParametersStruct,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    interestAccumulator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interestRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedOrOwner(spender: string, vaultID: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastInterestAccumulatorUpdated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'liquidate(uint256[],uint256[],address,address,address,bytes)'(
      vaultIDs: BigNumberish[],
      amounts: BigNumberish[],
      from: string,
      to: string,
      who: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'liquidate(uint256[],uint256[],address,address)'(
      vaultIDs: BigNumberish[],
      amounts: BigNumberish[],
      from: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    liquidationSurcharge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxLiquidationDiscount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(vaultID: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      approved: boolean,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    repayFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      vaultID: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      baseURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setDebtCeiling(
      _debtCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setLiquidationBoostParameters(
      _veBoostProxy: string,
      xBoost: BigNumberish[],
      yBoost: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setUint64(
      param: BigNumberish,
      what: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    stablecoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    surplus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetHealthFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    togglePause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    toggleWhitelist(
      target: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    tokenURI(vaultID: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalNormalizedDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultData(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultIDCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    veBoostProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistingActivated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xLiquidationBoost(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yLiquidationBoost(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
