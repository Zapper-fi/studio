/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface AnglePoolManagerInterface extends utils.Interface {
  functions: {
    'BASE_PARAMS()': FunctionFragment;
    'BASE_TOKENS()': FunctionFragment;
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'GOVERNOR_ROLE()': FunctionFragment;
    'GUARDIAN_ROLE()': FunctionFragment;
    'STABLEMASTER_ROLE()': FunctionFragment;
    'STRATEGY_ROLE()': FunctionFragment;
    'addGovernor(address)': FunctionFragment;
    'addStrategy(address,uint256)': FunctionFragment;
    'adminDebt()': FunctionFragment;
    'creditAvailable()': FunctionFragment;
    'debtOutstanding()': FunctionFragment;
    'debtRatio()': FunctionFragment;
    'deployCollateral(address[],address,address,address,address)': FunctionFragment;
    'estimatedAPR()': FunctionFragment;
    'feeManager()': FunctionFragment;
    'getBalance()': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'getTotalAsset()': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'initialize(address,address)': FunctionFragment;
    'interestsAccumulated()': FunctionFragment;
    'interestsForSurplus()': FunctionFragment;
    'perpetualManager()': FunctionFragment;
    'pushSurplus()': FunctionFragment;
    'recoverERC20(address,address,uint256)': FunctionFragment;
    'removeGovernor(address)': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'report(uint256,uint256,uint256)': FunctionFragment;
    'revokeGuardian(address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'revokeStrategy(address)': FunctionFragment;
    'setFeeManager(address)': FunctionFragment;
    'setGuardian(address,address)': FunctionFragment;
    'setInterestsForSurplus(uint64)': FunctionFragment;
    'setStrategyEmergencyExit(address)': FunctionFragment;
    'setSurplusConverter(address)': FunctionFragment;
    'stableMaster()': FunctionFragment;
    'strategies(address)': FunctionFragment;
    'strategyList(uint256)': FunctionFragment;
    'surplusConverter()': FunctionFragment;
    'token()': FunctionFragment;
    'totalDebt()': FunctionFragment;
    'updateStrategyDebtRatio(address,uint256)': FunctionFragment;
    'withdrawFromStrategy(address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BASE_PARAMS'
      | 'BASE_TOKENS'
      | 'DEFAULT_ADMIN_ROLE'
      | 'GOVERNOR_ROLE'
      | 'GUARDIAN_ROLE'
      | 'STABLEMASTER_ROLE'
      | 'STRATEGY_ROLE'
      | 'addGovernor'
      | 'addStrategy'
      | 'adminDebt'
      | 'creditAvailable'
      | 'debtOutstanding'
      | 'debtRatio'
      | 'deployCollateral'
      | 'estimatedAPR'
      | 'feeManager'
      | 'getBalance'
      | 'getRoleAdmin'
      | 'getTotalAsset'
      | 'grantRole'
      | 'hasRole'
      | 'initialize'
      | 'interestsAccumulated'
      | 'interestsForSurplus'
      | 'perpetualManager'
      | 'pushSurplus'
      | 'recoverERC20'
      | 'removeGovernor'
      | 'renounceRole'
      | 'report'
      | 'revokeGuardian'
      | 'revokeRole'
      | 'revokeStrategy'
      | 'setFeeManager'
      | 'setGuardian'
      | 'setInterestsForSurplus'
      | 'setStrategyEmergencyExit'
      | 'setSurplusConverter'
      | 'stableMaster'
      | 'strategies'
      | 'strategyList'
      | 'surplusConverter'
      | 'token'
      | 'totalDebt'
      | 'updateStrategyDebtRatio'
      | 'withdrawFromStrategy',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BASE_PARAMS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'BASE_TOKENS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'GOVERNOR_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'GUARDIAN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'STABLEMASTER_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'STRATEGY_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addGovernor', values: [string]): string;
  encodeFunctionData(functionFragment: 'addStrategy', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'adminDebt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'creditAvailable', values?: undefined): string;
  encodeFunctionData(functionFragment: 'debtOutstanding', values?: undefined): string;
  encodeFunctionData(functionFragment: 'debtRatio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deployCollateral', values: [string[], string, string, string, string]): string;
  encodeFunctionData(functionFragment: 'estimatedAPR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feeManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'getTotalAsset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'interestsAccumulated', values?: undefined): string;
  encodeFunctionData(functionFragment: 'interestsForSurplus', values?: undefined): string;
  encodeFunctionData(functionFragment: 'perpetualManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pushSurplus', values?: undefined): string;
  encodeFunctionData(functionFragment: 'recoverERC20', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'removeGovernor', values: [string]): string;
  encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'report', values: [BigNumberish, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'revokeGuardian', values: [string]): string;
  encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'revokeStrategy', values: [string]): string;
  encodeFunctionData(functionFragment: 'setFeeManager', values: [string]): string;
  encodeFunctionData(functionFragment: 'setGuardian', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'setInterestsForSurplus', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setStrategyEmergencyExit', values: [string]): string;
  encodeFunctionData(functionFragment: 'setSurplusConverter', values: [string]): string;
  encodeFunctionData(functionFragment: 'stableMaster', values?: undefined): string;
  encodeFunctionData(functionFragment: 'strategies', values: [string]): string;
  encodeFunctionData(functionFragment: 'strategyList', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'surplusConverter', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalDebt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateStrategyDebtRatio', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawFromStrategy', values: [string, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'BASE_PARAMS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'BASE_TOKENS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'GOVERNOR_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'GUARDIAN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'STABLEMASTER_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'STRATEGY_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addGovernor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adminDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'creditAvailable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'debtOutstanding', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'debtRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deployCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'estimatedAPR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'interestsAccumulated', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'interestsForSurplus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'perpetualManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pushSurplus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recoverERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeGovernor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'report', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setInterestsForSurplus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setStrategyEmergencyExit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSurplusConverter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stableMaster', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategies', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategyList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'surplusConverter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateStrategyDebtRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawFromStrategy', data: BytesLike): Result;

  events: {
    'FeesDistributed(uint256)': EventFragment;
    'InterestsForSurplusUpdated(uint64)': EventFragment;
    'Recovered(address,address,uint256)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'StrategyAdded(address,uint256)': EventFragment;
    'StrategyReported(address,uint256,uint256,uint256,uint256)': EventFragment;
    'StrategyRevoked(address)': EventFragment;
    'SurplusConverterUpdated(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'FeesDistributed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InterestsForSurplusUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Recovered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyReported'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SurplusConverterUpdated'): EventFragment;
}

export interface FeesDistributedEventObject {
  amountDistributed: BigNumber;
}
export type FeesDistributedEvent = TypedEvent<[BigNumber], FeesDistributedEventObject>;

export type FeesDistributedEventFilter = TypedEventFilter<FeesDistributedEvent>;

export interface InterestsForSurplusUpdatedEventObject {
  _interestsForSurplus: BigNumber;
}
export type InterestsForSurplusUpdatedEvent = TypedEvent<[BigNumber], InterestsForSurplusUpdatedEventObject>;

export type InterestsForSurplusUpdatedEventFilter = TypedEventFilter<InterestsForSurplusUpdatedEvent>;

export interface RecoveredEventObject {
  token: string;
  to: string;
  amount: BigNumber;
}
export type RecoveredEvent = TypedEvent<[string, string, BigNumber], RecoveredEventObject>;

export type RecoveredEventFilter = TypedEventFilter<RecoveredEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface StrategyAddedEventObject {
  strategy: string;
  debtRatio: BigNumber;
}
export type StrategyAddedEvent = TypedEvent<[string, BigNumber], StrategyAddedEventObject>;

export type StrategyAddedEventFilter = TypedEventFilter<StrategyAddedEvent>;

export interface StrategyReportedEventObject {
  strategy: string;
  gain: BigNumber;
  loss: BigNumber;
  debtPayment: BigNumber;
  totalDebt: BigNumber;
}
export type StrategyReportedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  StrategyReportedEventObject
>;

export type StrategyReportedEventFilter = TypedEventFilter<StrategyReportedEvent>;

export interface StrategyRevokedEventObject {
  strategy: string;
}
export type StrategyRevokedEvent = TypedEvent<[string], StrategyRevokedEventObject>;

export type StrategyRevokedEventFilter = TypedEventFilter<StrategyRevokedEvent>;

export interface SurplusConverterUpdatedEventObject {
  newSurplusConverter: string;
  oldSurplusConverter: string;
}
export type SurplusConverterUpdatedEvent = TypedEvent<[string, string], SurplusConverterUpdatedEventObject>;

export type SurplusConverterUpdatedEventFilter = TypedEventFilter<SurplusConverterUpdatedEvent>;

export interface AnglePoolManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AnglePoolManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE_PARAMS(overrides?: CallOverrides): Promise<[BigNumber]>;

    BASE_TOKENS(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    GUARDIAN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    STABLEMASTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    STRATEGY_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addGovernor(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addStrategy(
      strategy: string,
      _debtRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    adminDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    creditAvailable(overrides?: CallOverrides): Promise<[BigNumber]>;

    debtOutstanding(overrides?: CallOverrides): Promise<[BigNumber]>;

    debtRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    deployCollateral(
      governorList: string[],
      guardian: string,
      _perpetualManager: string,
      _feeManager: string,
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    estimatedAPR(overrides?: CallOverrides): Promise<[BigNumber] & { apr: BigNumber }>;

    feeManager(overrides?: CallOverrides): Promise<[string]>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getTotalAsset(overrides?: CallOverrides): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      _token: string,
      _stableMaster: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    interestsAccumulated(overrides?: CallOverrides): Promise<[BigNumber]>;

    interestsForSurplus(overrides?: CallOverrides): Promise<[BigNumber]>;

    perpetualManager(overrides?: CallOverrides): Promise<[string]>;

    pushSurplus(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    recoverERC20(
      tokenAddress: string,
      to: string,
      amountToRecover: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    removeGovernor(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    report(
      gain: BigNumberish,
      loss: BigNumberish,
      debtPayment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeGuardian(
      guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeStrategy(
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setFeeManager(
      _feeManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setGuardian(
      _guardian: string,
      guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setInterestsForSurplus(
      _interestsForSurplus: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setStrategyEmergencyExit(
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setSurplusConverter(
      newSurplusConverter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    stableMaster(overrides?: CallOverrides): Promise<[string]>;

    strategies(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        lastReport: BigNumber;
        totalStrategyDebt: BigNumber;
        debtRatio: BigNumber;
      }
    >;

    strategyList(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    surplusConverter(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateStrategyDebtRatio(
      strategy: string,
      _debtRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawFromStrategy(
      strategy: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  BASE_PARAMS(overrides?: CallOverrides): Promise<BigNumber>;

  BASE_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  GOVERNOR_ROLE(overrides?: CallOverrides): Promise<string>;

  GUARDIAN_ROLE(overrides?: CallOverrides): Promise<string>;

  STABLEMASTER_ROLE(overrides?: CallOverrides): Promise<string>;

  STRATEGY_ROLE(overrides?: CallOverrides): Promise<string>;

  addGovernor(
    _governor: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  addStrategy(
    strategy: string,
    _debtRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  adminDebt(overrides?: CallOverrides): Promise<BigNumber>;

  creditAvailable(overrides?: CallOverrides): Promise<BigNumber>;

  debtOutstanding(overrides?: CallOverrides): Promise<BigNumber>;

  debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

  deployCollateral(
    governorList: string[],
    guardian: string,
    _perpetualManager: string,
    _feeManager: string,
    _oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  estimatedAPR(overrides?: CallOverrides): Promise<BigNumber>;

  feeManager(overrides?: CallOverrides): Promise<string>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getTotalAsset(overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

  initialize(
    _token: string,
    _stableMaster: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  interestsAccumulated(overrides?: CallOverrides): Promise<BigNumber>;

  interestsForSurplus(overrides?: CallOverrides): Promise<BigNumber>;

  perpetualManager(overrides?: CallOverrides): Promise<string>;

  pushSurplus(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  recoverERC20(
    tokenAddress: string,
    to: string,
    amountToRecover: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  removeGovernor(
    _governor: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  report(
    gain: BigNumberish,
    loss: BigNumberish,
    debtPayment: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeGuardian(
    guardian: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeStrategy(
    strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setFeeManager(
    _feeManager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setGuardian(
    _guardian: string,
    guardian: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setInterestsForSurplus(
    _interestsForSurplus: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setStrategyEmergencyExit(
    strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setSurplusConverter(
    newSurplusConverter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  stableMaster(overrides?: CallOverrides): Promise<string>;

  strategies(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      lastReport: BigNumber;
      totalStrategyDebt: BigNumber;
      debtRatio: BigNumber;
    }
  >;

  strategyList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  surplusConverter(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

  updateStrategyDebtRatio(
    strategy: string,
    _debtRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawFromStrategy(
    strategy: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    BASE_PARAMS(overrides?: CallOverrides): Promise<BigNumber>;

    BASE_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<string>;

    GUARDIAN_ROLE(overrides?: CallOverrides): Promise<string>;

    STABLEMASTER_ROLE(overrides?: CallOverrides): Promise<string>;

    STRATEGY_ROLE(overrides?: CallOverrides): Promise<string>;

    addGovernor(_governor: string, overrides?: CallOverrides): Promise<void>;

    addStrategy(strategy: string, _debtRatio: BigNumberish, overrides?: CallOverrides): Promise<void>;

    adminDebt(overrides?: CallOverrides): Promise<BigNumber>;

    creditAvailable(overrides?: CallOverrides): Promise<BigNumber>;

    debtOutstanding(overrides?: CallOverrides): Promise<BigNumber>;

    debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

    deployCollateral(
      governorList: string[],
      guardian: string,
      _perpetualManager: string,
      _feeManager: string,
      _oracle: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    estimatedAPR(overrides?: CallOverrides): Promise<BigNumber>;

    feeManager(overrides?: CallOverrides): Promise<string>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getTotalAsset(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

    initialize(_token: string, _stableMaster: string, overrides?: CallOverrides): Promise<void>;

    interestsAccumulated(overrides?: CallOverrides): Promise<BigNumber>;

    interestsForSurplus(overrides?: CallOverrides): Promise<BigNumber>;

    perpetualManager(overrides?: CallOverrides): Promise<string>;

    pushSurplus(overrides?: CallOverrides): Promise<void>;

    recoverERC20(
      tokenAddress: string,
      to: string,
      amountToRecover: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    removeGovernor(_governor: string, overrides?: CallOverrides): Promise<void>;

    renounceRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    report(gain: BigNumberish, loss: BigNumberish, debtPayment: BigNumberish, overrides?: CallOverrides): Promise<void>;

    revokeGuardian(guardian: string, overrides?: CallOverrides): Promise<void>;

    revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    revokeStrategy(strategy: string, overrides?: CallOverrides): Promise<void>;

    setFeeManager(_feeManager: string, overrides?: CallOverrides): Promise<void>;

    setGuardian(_guardian: string, guardian: string, overrides?: CallOverrides): Promise<void>;

    setInterestsForSurplus(_interestsForSurplus: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setStrategyEmergencyExit(strategy: string, overrides?: CallOverrides): Promise<void>;

    setSurplusConverter(newSurplusConverter: string, overrides?: CallOverrides): Promise<void>;

    stableMaster(overrides?: CallOverrides): Promise<string>;

    strategies(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        lastReport: BigNumber;
        totalStrategyDebt: BigNumber;
        debtRatio: BigNumber;
      }
    >;

    strategyList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    surplusConverter(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    updateStrategyDebtRatio(strategy: string, _debtRatio: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawFromStrategy(strategy: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'FeesDistributed(uint256)'(amountDistributed?: null): FeesDistributedEventFilter;
    FeesDistributed(amountDistributed?: null): FeesDistributedEventFilter;

    'InterestsForSurplusUpdated(uint64)'(_interestsForSurplus?: null): InterestsForSurplusUpdatedEventFilter;
    InterestsForSurplusUpdated(_interestsForSurplus?: null): InterestsForSurplusUpdatedEventFilter;

    'Recovered(address,address,uint256)'(
      token?: string | null,
      to?: string | null,
      amount?: null,
    ): RecoveredEventFilter;
    Recovered(token?: string | null, to?: string | null, amount?: null): RecoveredEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter;
    RoleGranted(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleRevokedEventFilter;

    'StrategyAdded(address,uint256)'(strategy?: string | null, debtRatio?: null): StrategyAddedEventFilter;
    StrategyAdded(strategy?: string | null, debtRatio?: null): StrategyAddedEventFilter;

    'StrategyReported(address,uint256,uint256,uint256,uint256)'(
      strategy?: string | null,
      gain?: null,
      loss?: null,
      debtPayment?: null,
      totalDebt?: null,
    ): StrategyReportedEventFilter;
    StrategyReported(
      strategy?: string | null,
      gain?: null,
      loss?: null,
      debtPayment?: null,
      totalDebt?: null,
    ): StrategyReportedEventFilter;

    'StrategyRevoked(address)'(strategy?: string | null): StrategyRevokedEventFilter;
    StrategyRevoked(strategy?: string | null): StrategyRevokedEventFilter;

    'SurplusConverterUpdated(address,address)'(
      newSurplusConverter?: string | null,
      oldSurplusConverter?: string | null,
    ): SurplusConverterUpdatedEventFilter;
    SurplusConverterUpdated(
      newSurplusConverter?: string | null,
      oldSurplusConverter?: string | null,
    ): SurplusConverterUpdatedEventFilter;
  };

  estimateGas: {
    BASE_PARAMS(overrides?: CallOverrides): Promise<BigNumber>;

    BASE_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    GUARDIAN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    STABLEMASTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    STRATEGY_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addGovernor(_governor: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    addStrategy(
      strategy: string,
      _debtRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    adminDebt(overrides?: CallOverrides): Promise<BigNumber>;

    creditAvailable(overrides?: CallOverrides): Promise<BigNumber>;

    debtOutstanding(overrides?: CallOverrides): Promise<BigNumber>;

    debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

    deployCollateral(
      governorList: string[],
      guardian: string,
      _perpetualManager: string,
      _feeManager: string,
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    estimatedAPR(overrides?: CallOverrides): Promise<BigNumber>;

    feeManager(overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalAsset(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _token: string,
      _stableMaster: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    interestsAccumulated(overrides?: CallOverrides): Promise<BigNumber>;

    interestsForSurplus(overrides?: CallOverrides): Promise<BigNumber>;

    perpetualManager(overrides?: CallOverrides): Promise<BigNumber>;

    pushSurplus(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: string,
      to: string,
      amountToRecover: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    removeGovernor(_governor: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    report(
      gain: BigNumberish,
      loss: BigNumberish,
      debtPayment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeGuardian(guardian: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeStrategy(strategy: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setFeeManager(_feeManager: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setGuardian(
      _guardian: string,
      guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setInterestsForSurplus(
      _interestsForSurplus: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setStrategyEmergencyExit(
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setSurplusConverter(
      newSurplusConverter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    stableMaster(overrides?: CallOverrides): Promise<BigNumber>;

    strategies(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    strategyList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    surplusConverter(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    updateStrategyDebtRatio(
      strategy: string,
      _debtRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawFromStrategy(
      strategy: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_PARAMS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BASE_TOKENS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GUARDIAN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STABLEMASTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STRATEGY_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addGovernor(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    addStrategy(
      strategy: string,
      _debtRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    adminDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditAvailable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtOutstanding(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployCollateral(
      governorList: string[],
      guardian: string,
      _perpetualManager: string,
      _feeManager: string,
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    estimatedAPR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _token: string,
      _stableMaster: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    interestsAccumulated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interestsForSurplus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    perpetualManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pushSurplus(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: string,
      to: string,
      amountToRecover: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    removeGovernor(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    report(
      gain: BigNumberish,
      loss: BigNumberish,
      debtPayment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeGuardian(
      guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeStrategy(
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setFeeManager(
      _feeManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setGuardian(
      _guardian: string,
      guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setInterestsForSurplus(
      _interestsForSurplus: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setStrategyEmergencyExit(
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setSurplusConverter(
      newSurplusConverter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    stableMaster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategies(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategyList(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    surplusConverter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateStrategyDebtRatio(
      strategy: string,
      _debtRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawFromStrategy(
      strategy: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
