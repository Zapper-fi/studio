/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace MultiMerkleStash {
  export type ClaimParamStruct = {
    token: string;
    index: BigNumberish;
    amount: BigNumberish;
    merkleProof: BytesLike[];
  };

  export type ClaimParamStructOutput = [string, BigNumber, BigNumber, string[]] & {
    token: string;
    index: BigNumber;
    amount: BigNumber;
    merkleProof: string[];
  };
}

export interface VotiumMultiMerkleInterface extends utils.Interface {
  functions: {
    'claim(address,uint256,address,uint256,bytes32[])': FunctionFragment;
    'claimMulti(address,(address,uint256,uint256,bytes32[])[])': FunctionFragment;
    'isClaimed(address,uint256)': FunctionFragment;
    'merkleRoot(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'update(address)': FunctionFragment;
    'updateMerkleRoot(address,bytes32)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'claim'
      | 'claimMulti'
      | 'isClaimed'
      | 'merkleRoot'
      | 'owner'
      | 'transferOwnership'
      | 'update'
      | 'updateMerkleRoot',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'claim',
    values: [string, BigNumberish, string, BigNumberish, BytesLike[]],
  ): string;
  encodeFunctionData(functionFragment: 'claimMulti', values: [string, MultiMerkleStash.ClaimParamStruct[]]): string;
  encodeFunctionData(functionFragment: 'isClaimed', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'merkleRoot', values: [string]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'update', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateMerkleRoot', values: [string, BytesLike]): string;

  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimMulti', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isClaimed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'merkleRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'update', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMerkleRoot', data: BytesLike): Result;

  events: {
    'Claimed(address,uint256,uint256,address,uint256)': EventFragment;
    'MerkleRootUpdated(address,bytes32,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Claimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MerkleRootUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export interface ClaimedEventObject {
  token: string;
  index: BigNumber;
  amount: BigNumber;
  account: string;
  update: BigNumber;
}
export type ClaimedEvent = TypedEvent<[string, BigNumber, BigNumber, string, BigNumber], ClaimedEventObject>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface MerkleRootUpdatedEventObject {
  token: string;
  merkleRoot: string;
  update: BigNumber;
}
export type MerkleRootUpdatedEvent = TypedEvent<[string, string, BigNumber], MerkleRootUpdatedEventObject>;

export type MerkleRootUpdatedEventFilter = TypedEventFilter<MerkleRootUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface VotiumMultiMerkle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotiumMultiMerkleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      token: string,
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claimMulti(
      account: string,
      claims: MultiMerkleStash.ClaimParamStruct[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isClaimed(token: string, index: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    merkleRoot(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    update(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    updateMerkleRoot(
      token: string,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  claim(
    token: string,
    index: BigNumberish,
    account: string,
    amount: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claimMulti(
    account: string,
    claims: MultiMerkleStash.ClaimParamStruct[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isClaimed(token: string, index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  merkleRoot(arg0: string, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  update(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  updateMerkleRoot(
    token: string,
    _merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    claim(
      token: string,
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<void>;

    claimMulti(account: string, claims: MultiMerkleStash.ClaimParamStruct[], overrides?: CallOverrides): Promise<void>;

    isClaimed(token: string, index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    merkleRoot(arg0: string, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    update(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    updateMerkleRoot(token: string, _merkleRoot: BytesLike, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Claimed(address,uint256,uint256,address,uint256)'(
      token?: string | null,
      index?: null,
      amount?: null,
      account?: string | null,
      update?: BigNumberish | null,
    ): ClaimedEventFilter;
    Claimed(
      token?: string | null,
      index?: null,
      amount?: null,
      account?: string | null,
      update?: BigNumberish | null,
    ): ClaimedEventFilter;

    'MerkleRootUpdated(address,bytes32,uint256)'(
      token?: string | null,
      merkleRoot?: BytesLike | null,
      update?: BigNumberish | null,
    ): MerkleRootUpdatedEventFilter;
    MerkleRootUpdated(
      token?: string | null,
      merkleRoot?: BytesLike | null,
      update?: BigNumberish | null,
    ): MerkleRootUpdatedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    claim(
      token: string,
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    claimMulti(
      account: string,
      claims: MultiMerkleStash.ClaimParamStruct[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isClaimed(token: string, index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    merkleRoot(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    update(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    updateMerkleRoot(
      token: string,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      token: string,
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claimMulti(
      account: string,
      claims: MultiMerkleStash.ClaimParamStruct[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isClaimed(token: string, index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    merkleRoot(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    update(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateMerkleRoot(
      token: string,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
