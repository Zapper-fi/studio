/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface OlympusZapperZapInterface extends utils.Interface {
  functions: {
    'OHM()': FunctionFragment;
    'ZapIn(address,uint256,address,uint256,address,bytes,address,address,uint256,bool)': FunctionFragment;
    'ZapOut(address,uint256,address,uint256,address,bytes,address)': FunctionFragment;
    'affiliateBalance(address,address)': FunctionFragment;
    'affiliates(address)': FunctionFragment;
    'affilliateWithdraw(address[])': FunctionFragment;
    'approvedTargets(address)': FunctionFragment;
    'bondPrice(address,address)': FunctionFragment;
    'feeWhitelist(address)': FunctionFragment;
    'goodwill()': FunctionFragment;
    'olympusDAO()': FunctionFragment;
    'owner()': FunctionFragment;
    'principalToDepository(address,address)': FunctionFragment;
    'removeLiquidityReturn(address,uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'sOHM()': FunctionFragment;
    'setApprovedTargets(address[],bool[])': FunctionFragment;
    'set_affiliate(address,bool)': FunctionFragment;
    'set_feeWhitelist(address,bool)': FunctionFragment;
    'set_new_affiliateSplit(uint256)': FunctionFragment;
    'set_new_goodwill(uint256)': FunctionFragment;
    'staking()': FunctionFragment;
    'stopped()': FunctionFragment;
    'toggleContractActive()': FunctionFragment;
    'totalAffiliateBalance(address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'update_BondDepos(address[],address[],address[])': FunctionFragment;
    'update_OlympusDAO(address)': FunctionFragment;
    'update_Staking(address)': FunctionFragment;
    'update_sOHM(address)': FunctionFragment;
    'update_wsOHM(address)': FunctionFragment;
    'withdrawTokens(address[])': FunctionFragment;
    'wsOHM()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'OHM'
      | 'ZapIn'
      | 'ZapOut'
      | 'affiliateBalance'
      | 'affiliates'
      | 'affilliateWithdraw'
      | 'approvedTargets'
      | 'bondPrice'
      | 'feeWhitelist'
      | 'goodwill'
      | 'olympusDAO'
      | 'owner'
      | 'principalToDepository'
      | 'removeLiquidityReturn'
      | 'renounceOwnership'
      | 'sOHM'
      | 'setApprovedTargets'
      | 'set_affiliate'
      | 'set_feeWhitelist'
      | 'set_new_affiliateSplit'
      | 'set_new_goodwill'
      | 'staking'
      | 'stopped'
      | 'toggleContractActive'
      | 'totalAffiliateBalance'
      | 'transferOwnership'
      | 'update_BondDepos'
      | 'update_OlympusDAO'
      | 'update_Staking'
      | 'update_sOHM'
      | 'update_wsOHM'
      | 'withdrawTokens'
      | 'wsOHM',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'OHM', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'ZapIn',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'ZapOut',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'affiliateBalance',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'affiliates', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'affilliateWithdraw', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'approvedTargets', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'bondPrice', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'feeWhitelist', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'goodwill', values?: undefined): string;
  encodeFunctionData(functionFragment: 'olympusDAO', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'principalToDepository',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'removeLiquidityReturn',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'sOHM', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setApprovedTargets',
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'set_affiliate',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'set_feeWhitelist',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'set_new_affiliateSplit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'set_new_goodwill', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'staking', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stopped', values?: undefined): string;
  encodeFunctionData(functionFragment: 'toggleContractActive', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalAffiliateBalance', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'update_BondDepos',
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[], PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(functionFragment: 'update_OlympusDAO', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'update_Staking', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'update_sOHM', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'update_wsOHM', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'withdrawTokens', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'wsOHM', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'OHM', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ZapIn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ZapOut', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'affiliateBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'affiliates', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'affilliateWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approvedTargets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bondPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'goodwill', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'olympusDAO', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'principalToDepository', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeLiquidityReturn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sOHM', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovedTargets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_affiliate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_feeWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_new_affiliateSplit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set_new_goodwill', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'staking', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stopped', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'toggleContractActive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAffiliateBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'update_BondDepos', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'update_OlympusDAO', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'update_Staking', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'update_sOHM', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'update_wsOHM', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'wsOHM', data: BytesLike): Result;

  events: {
    'OwnershipTransferred(address,address)': EventFragment;
    'zapIn(address,address,uint256,address)': EventFragment;
    'zapOut(address,address,uint256,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'zapIn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'zapOut'): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface zapInEventObject {
  sender: string;
  token: string;
  tokensRec: BigNumber;
  affiliate: string;
}
export type zapInEvent = TypedEvent<[string, string, BigNumber, string], zapInEventObject>;

export type zapInEventFilter = TypedEventFilter<zapInEvent>;

export interface zapOutEventObject {
  sender: string;
  token: string;
  tokensRec: BigNumber;
  affiliate: string;
}
export type zapOutEvent = TypedEvent<[string, string, BigNumber, string], zapOutEventObject>;

export type zapOutEventFilter = TypedEventFilter<zapOutEvent>;

export interface OlympusZapperZap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OlympusZapperZapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    OHM(overrides?: CallOverrides): Promise<[string]>;

    ZapIn(
      fromToken: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      toToken: PromiseOrValue<string>,
      minToToken: PromiseOrValue<BigNumberish>,
      swapTarget: PromiseOrValue<string>,
      swapData: PromiseOrValue<BytesLike>,
      affiliate: PromiseOrValue<string>,
      bondPayoutToken: PromiseOrValue<string>,
      maxBondPrice: PromiseOrValue<BigNumberish>,
      bond: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    ZapOut(
      fromToken: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      toToken: PromiseOrValue<string>,
      minToTokens: PromiseOrValue<BigNumberish>,
      swapTarget: PromiseOrValue<string>,
      swapData: PromiseOrValue<BytesLike>,
      affiliate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    affiliateBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    affiliates(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    affilliateWithdraw(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    approvedTargets(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    bondPrice(
      principal: PromiseOrValue<string>,
      payoutToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    feeWhitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    goodwill(overrides?: CallOverrides): Promise<[BigNumber]>;

    olympusDAO(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    principalToDepository(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    removeLiquidityReturn(
      fromToken: PromiseOrValue<string>,
      fromAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { ohmAmount: BigNumber }>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    sOHM(overrides?: CallOverrides): Promise<[string]>;

    setApprovedTargets(
      targets: PromiseOrValue<string>[],
      isApproved: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    set_affiliate(
      _affiliate: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    set_feeWhitelist(
      zapAddress: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    set_new_affiliateSplit(
      _new_affiliateSplit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    set_new_goodwill(
      _new_goodwill: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    staking(overrides?: CallOverrides): Promise<[string]>;

    stopped(overrides?: CallOverrides): Promise<[boolean]>;

    toggleContractActive(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    totalAffiliateBalance(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    update_BondDepos(
      principals: PromiseOrValue<string>[],
      payoutTokens: PromiseOrValue<string>[],
      depos: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    update_OlympusDAO(
      _olympusDAO: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    update_Staking(
      _staking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    update_sOHM(
      _sOHM: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    update_wsOHM(
      _wsOHM: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawTokens(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    wsOHM(overrides?: CallOverrides): Promise<[string]>;
  };

  OHM(overrides?: CallOverrides): Promise<string>;

  ZapIn(
    fromToken: PromiseOrValue<string>,
    amountIn: PromiseOrValue<BigNumberish>,
    toToken: PromiseOrValue<string>,
    minToToken: PromiseOrValue<BigNumberish>,
    swapTarget: PromiseOrValue<string>,
    swapData: PromiseOrValue<BytesLike>,
    affiliate: PromiseOrValue<string>,
    bondPayoutToken: PromiseOrValue<string>,
    maxBondPrice: PromiseOrValue<BigNumberish>,
    bond: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  ZapOut(
    fromToken: PromiseOrValue<string>,
    amountIn: PromiseOrValue<BigNumberish>,
    toToken: PromiseOrValue<string>,
    minToTokens: PromiseOrValue<BigNumberish>,
    swapTarget: PromiseOrValue<string>,
    swapData: PromiseOrValue<BytesLike>,
    affiliate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  affiliateBalance(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  affiliates(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  affilliateWithdraw(
    tokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  approvedTargets(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  bondPrice(
    principal: PromiseOrValue<string>,
    payoutToken: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  feeWhitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  goodwill(overrides?: CallOverrides): Promise<BigNumber>;

  olympusDAO(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  principalToDepository(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<string>;

  removeLiquidityReturn(
    fromToken: PromiseOrValue<string>,
    fromAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  sOHM(overrides?: CallOverrides): Promise<string>;

  setApprovedTargets(
    targets: PromiseOrValue<string>[],
    isApproved: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  set_affiliate(
    _affiliate: PromiseOrValue<string>,
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  set_feeWhitelist(
    zapAddress: PromiseOrValue<string>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  set_new_affiliateSplit(
    _new_affiliateSplit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  set_new_goodwill(
    _new_goodwill: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  staking(overrides?: CallOverrides): Promise<string>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  toggleContractActive(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  totalAffiliateBalance(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  update_BondDepos(
    principals: PromiseOrValue<string>[],
    payoutTokens: PromiseOrValue<string>[],
    depos: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  update_OlympusDAO(
    _olympusDAO: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  update_Staking(
    _staking: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  update_sOHM(
    _sOHM: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  update_wsOHM(
    _wsOHM: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawTokens(
    tokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  wsOHM(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    OHM(overrides?: CallOverrides): Promise<string>;

    ZapIn(
      fromToken: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      toToken: PromiseOrValue<string>,
      minToToken: PromiseOrValue<BigNumberish>,
      swapTarget: PromiseOrValue<string>,
      swapData: PromiseOrValue<BytesLike>,
      affiliate: PromiseOrValue<string>,
      bondPayoutToken: PromiseOrValue<string>,
      maxBondPrice: PromiseOrValue<BigNumberish>,
      bond: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    ZapOut(
      fromToken: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      toToken: PromiseOrValue<string>,
      minToTokens: PromiseOrValue<BigNumberish>,
      swapTarget: PromiseOrValue<string>,
      swapData: PromiseOrValue<BytesLike>,
      affiliate: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    affiliateBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    affiliates(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    affilliateWithdraw(tokens: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    approvedTargets(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    bondPrice(
      principal: PromiseOrValue<string>,
      payoutToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    feeWhitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    goodwill(overrides?: CallOverrides): Promise<BigNumber>;

    olympusDAO(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    principalToDepository(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>;

    removeLiquidityReturn(
      fromToken: PromiseOrValue<string>,
      fromAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sOHM(overrides?: CallOverrides): Promise<string>;

    setApprovedTargets(
      targets: PromiseOrValue<string>[],
      isApproved: PromiseOrValue<boolean>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    set_affiliate(
      _affiliate: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    set_feeWhitelist(
      zapAddress: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    set_new_affiliateSplit(_new_affiliateSplit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    set_new_goodwill(_new_goodwill: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    staking(overrides?: CallOverrides): Promise<string>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    toggleContractActive(overrides?: CallOverrides): Promise<void>;

    totalAffiliateBalance(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    update_BondDepos(
      principals: PromiseOrValue<string>[],
      payoutTokens: PromiseOrValue<string>[],
      depos: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    update_OlympusDAO(_olympusDAO: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    update_Staking(_staking: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    update_sOHM(_sOHM: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    update_wsOHM(_wsOHM: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    withdrawTokens(tokens: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    wsOHM(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'zapIn(address,address,uint256,address)'(
      sender?: null,
      token?: null,
      tokensRec?: null,
      affiliate?: null,
    ): zapInEventFilter;
    zapIn(sender?: null, token?: null, tokensRec?: null, affiliate?: null): zapInEventFilter;

    'zapOut(address,address,uint256,address)'(
      sender?: null,
      token?: null,
      tokensRec?: null,
      affiliate?: null,
    ): zapOutEventFilter;
    zapOut(sender?: null, token?: null, tokensRec?: null, affiliate?: null): zapOutEventFilter;
  };

  estimateGas: {
    OHM(overrides?: CallOverrides): Promise<BigNumber>;

    ZapIn(
      fromToken: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      toToken: PromiseOrValue<string>,
      minToToken: PromiseOrValue<BigNumberish>,
      swapTarget: PromiseOrValue<string>,
      swapData: PromiseOrValue<BytesLike>,
      affiliate: PromiseOrValue<string>,
      bondPayoutToken: PromiseOrValue<string>,
      maxBondPrice: PromiseOrValue<BigNumberish>,
      bond: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    ZapOut(
      fromToken: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      toToken: PromiseOrValue<string>,
      minToTokens: PromiseOrValue<BigNumberish>,
      swapTarget: PromiseOrValue<string>,
      swapData: PromiseOrValue<BytesLike>,
      affiliate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    affiliateBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    affiliates(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    affilliateWithdraw(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    approvedTargets(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    bondPrice(
      principal: PromiseOrValue<string>,
      payoutToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    feeWhitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    goodwill(overrides?: CallOverrides): Promise<BigNumber>;

    olympusDAO(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    principalToDepository(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    removeLiquidityReturn(
      fromToken: PromiseOrValue<string>,
      fromAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    sOHM(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovedTargets(
      targets: PromiseOrValue<string>[],
      isApproved: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    set_affiliate(
      _affiliate: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    set_feeWhitelist(
      zapAddress: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    set_new_affiliateSplit(
      _new_affiliateSplit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    set_new_goodwill(
      _new_goodwill: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    staking(overrides?: CallOverrides): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    toggleContractActive(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    totalAffiliateBalance(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    update_BondDepos(
      principals: PromiseOrValue<string>[],
      payoutTokens: PromiseOrValue<string>[],
      depos: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    update_OlympusDAO(
      _olympusDAO: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    update_Staking(
      _staking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    update_sOHM(
      _sOHM: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    update_wsOHM(
      _wsOHM: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawTokens(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    wsOHM(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    OHM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZapIn(
      fromToken: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      toToken: PromiseOrValue<string>,
      minToToken: PromiseOrValue<BigNumberish>,
      swapTarget: PromiseOrValue<string>,
      swapData: PromiseOrValue<BytesLike>,
      affiliate: PromiseOrValue<string>,
      bondPayoutToken: PromiseOrValue<string>,
      maxBondPrice: PromiseOrValue<BigNumberish>,
      bond: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    ZapOut(
      fromToken: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      toToken: PromiseOrValue<string>,
      minToTokens: PromiseOrValue<BigNumberish>,
      swapTarget: PromiseOrValue<string>,
      swapData: PromiseOrValue<BytesLike>,
      affiliate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    affiliateBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    affiliates(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    affilliateWithdraw(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    approvedTargets(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondPrice(
      principal: PromiseOrValue<string>,
      payoutToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    feeWhitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    goodwill(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    olympusDAO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    principalToDepository(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    removeLiquidityReturn(
      fromToken: PromiseOrValue<string>,
      fromAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    sOHM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApprovedTargets(
      targets: PromiseOrValue<string>[],
      isApproved: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    set_affiliate(
      _affiliate: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    set_feeWhitelist(
      zapAddress: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    set_new_affiliateSplit(
      _new_affiliateSplit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    set_new_goodwill(
      _new_goodwill: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    staking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleContractActive(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    totalAffiliateBalance(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    update_BondDepos(
      principals: PromiseOrValue<string>[],
      payoutTokens: PromiseOrValue<string>[],
      depos: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    update_OlympusDAO(
      _olympusDAO: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    update_Staking(
      _staking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    update_sOHM(
      _sOHM: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    update_wsOHM(
      _wsOHM: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    wsOHM(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
