/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type { OlympusLiquidityRegistry, OlympusLiquidityRegistryInterface } from '../OlympusLiquidityRegistry';

const _abi = [
  {
    inputs: [
      {
        internalType: 'contract Kernel',
        name: 'kernel_',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'caller_',
        type: 'address',
      },
    ],
    name: 'KernelAdapter_OnlyKernel',
    type: 'error',
  },
  {
    inputs: [],
    name: 'LQREG_RemovalMismatch',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'policy_',
        type: 'address',
      },
    ],
    name: 'Module_PolicyNotPermitted',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'vault',
        type: 'address',
      },
    ],
    name: 'VaultAdded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'vault',
        type: 'address',
      },
    ],
    name: 'VaultRemoved',
    type: 'event',
  },
  {
    inputs: [],
    name: 'INIT',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'KEYCODE',
    outputs: [
      {
        internalType: 'Keycode',
        name: '',
        type: 'bytes5',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'VERSION',
    outputs: [
      {
        internalType: 'uint8',
        name: 'major',
        type: 'uint8',
      },
      {
        internalType: 'uint8',
        name: 'minor',
        type: 'uint8',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'activeVaultCount',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'activeVaults',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'vault_',
        type: 'address',
      },
    ],
    name: 'addVault',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract Kernel',
        name: 'newKernel_',
        type: 'address',
      },
    ],
    name: 'changeKernel',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'kernel',
    outputs: [
      {
        internalType: 'contract Kernel',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'index_',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'vault_',
        type: 'address',
      },
    ],
    name: 'removeVault',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

export class OlympusLiquidityRegistry__factory {
  static readonly abi = _abi;
  static createInterface(): OlympusLiquidityRegistryInterface {
    return new utils.Interface(_abi) as OlympusLiquidityRegistryInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): OlympusLiquidityRegistry {
    return new Contract(address, _abi, signerOrProvider) as OlympusLiquidityRegistry;
  }
}
