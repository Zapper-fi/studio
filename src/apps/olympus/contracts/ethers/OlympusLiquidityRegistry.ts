/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface OlympusLiquidityRegistryInterface extends utils.Interface {
  functions: {
    'INIT()': FunctionFragment;
    'KEYCODE()': FunctionFragment;
    'VERSION()': FunctionFragment;
    'activeVaultCount()': FunctionFragment;
    'activeVaults(uint256)': FunctionFragment;
    'addVault(address)': FunctionFragment;
    'changeKernel(address)': FunctionFragment;
    'kernel()': FunctionFragment;
    'removeVault(uint256,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'INIT'
      | 'KEYCODE'
      | 'VERSION'
      | 'activeVaultCount'
      | 'activeVaults'
      | 'addVault'
      | 'changeKernel'
      | 'kernel'
      | 'removeVault',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'INIT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'KEYCODE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'VERSION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'activeVaultCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'activeVaults', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'addVault', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'changeKernel', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'kernel', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'removeVault',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(functionFragment: 'INIT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'KEYCODE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'VERSION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activeVaultCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activeVaults', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeKernel', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'kernel', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeVault', data: BytesLike): Result;

  events: {
    'VaultAdded(address)': EventFragment;
    'VaultRemoved(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'VaultAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VaultRemoved'): EventFragment;
}

export interface VaultAddedEventObject {
  vault: string;
}
export type VaultAddedEvent = TypedEvent<[string], VaultAddedEventObject>;

export type VaultAddedEventFilter = TypedEventFilter<VaultAddedEvent>;

export interface VaultRemovedEventObject {
  vault: string;
}
export type VaultRemovedEvent = TypedEvent<[string], VaultRemovedEventObject>;

export type VaultRemovedEventFilter = TypedEventFilter<VaultRemovedEvent>;

export interface OlympusLiquidityRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OlympusLiquidityRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    INIT(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    KEYCODE(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[number, number] & { major: number; minor: number }>;

    activeVaultCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    activeVaults(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    addVault(
      vault_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeKernel(
      newKernel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    removeVault(
      index_: PromiseOrValue<BigNumberish>,
      vault_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  INIT(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  KEYCODE(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<[number, number] & { major: number; minor: number }>;

  activeVaultCount(overrides?: CallOverrides): Promise<BigNumber>;

  activeVaults(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  addVault(
    vault_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeKernel(
    newKernel_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  kernel(overrides?: CallOverrides): Promise<string>;

  removeVault(
    index_: PromiseOrValue<BigNumberish>,
    vault_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    INIT(overrides?: CallOverrides): Promise<void>;

    KEYCODE(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<[number, number] & { major: number; minor: number }>;

    activeVaultCount(overrides?: CallOverrides): Promise<BigNumber>;

    activeVaults(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    addVault(vault_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    changeKernel(newKernel_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    kernel(overrides?: CallOverrides): Promise<string>;

    removeVault(
      index_: PromiseOrValue<BigNumberish>,
      vault_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'VaultAdded(address)'(vault?: PromiseOrValue<string> | null): VaultAddedEventFilter;
    VaultAdded(vault?: PromiseOrValue<string> | null): VaultAddedEventFilter;

    'VaultRemoved(address)'(vault?: PromiseOrValue<string> | null): VaultRemovedEventFilter;
    VaultRemoved(vault?: PromiseOrValue<string> | null): VaultRemovedEventFilter;
  };

  estimateGas: {
    INIT(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    KEYCODE(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    activeVaultCount(overrides?: CallOverrides): Promise<BigNumber>;

    activeVaults(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    addVault(
      vault_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeKernel(
      newKernel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    removeVault(
      index_: PromiseOrValue<BigNumberish>,
      vault_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    INIT(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    KEYCODE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeVaultCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeVaults(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addVault(
      vault_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeKernel(
      newKernel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeVault(
      index_: PromiseOrValue<BigNumberish>,
      vault_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
