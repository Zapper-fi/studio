/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface AbracadabraMagicGlpHarvestorInterface extends utils.Interface {
  functions: {
    'BIPS()': FunctionFragment;
    'claimOwnership()': FunctionFragment;
    'claimable()': FunctionFragment;
    'feeCollector()': FunctionFragment;
    'feePercentBips()': FunctionFragment;
    'glpRewardRouter()': FunctionFragment;
    'lastExecution()': FunctionFragment;
    'operators(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingOwner()': FunctionFragment;
    'rewardRouterV2()': FunctionFragment;
    'run(uint256)': FunctionFragment;
    'setFeeParameters(address,uint16)': FunctionFragment;
    'setOperator(address,bool)': FunctionFragment;
    'setRewardRouterV2(address)': FunctionFragment;
    'totalRewardsBalanceAfterClaiming()': FunctionFragment;
    'transferOwnership(address,bool,bool)': FunctionFragment;
    'vault()': FunctionFragment;
    'weth()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BIPS'
      | 'claimOwnership'
      | 'claimable'
      | 'feeCollector'
      | 'feePercentBips'
      | 'glpRewardRouter'
      | 'lastExecution'
      | 'operators'
      | 'owner'
      | 'pendingOwner'
      | 'rewardRouterV2'
      | 'run'
      | 'setFeeParameters'
      | 'setOperator'
      | 'setRewardRouterV2'
      | 'totalRewardsBalanceAfterClaiming'
      | 'transferOwnership'
      | 'vault'
      | 'weth',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BIPS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimable', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feeCollector', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feePercentBips', values?: undefined): string;
  encodeFunctionData(functionFragment: 'glpRewardRouter', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastExecution', values?: undefined): string;
  encodeFunctionData(functionFragment: 'operators', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardRouterV2', values?: undefined): string;
  encodeFunctionData(functionFragment: 'run', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setFeeParameters',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setOperator',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setRewardRouterV2', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'totalRewardsBalanceAfterClaiming', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'vault', values?: undefined): string;
  encodeFunctionData(functionFragment: 'weth', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'BIPS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeCollector', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feePercentBips', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'glpRewardRouter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastExecution', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'operators', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardRouterV2', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'run', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeParameters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewardRouterV2', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalRewardsBalanceAfterClaiming', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'weth', data: BytesLike): Result;

  events: {
    'LogFeeParametersChanged(address,uint16)': EventFragment;
    'LogHarvest(uint256,uint256,uint256)': EventFragment;
    'LogRewardRouterV2Changed(address,address)': EventFragment;
    'OperatorChanged(address,bool)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'LogFeeParametersChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogHarvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogRewardRouterV2Changed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OperatorChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export interface LogFeeParametersChangedEventObject {
  feeCollector: string;
  feeAmount: number;
}
export type LogFeeParametersChangedEvent = TypedEvent<[string, number], LogFeeParametersChangedEventObject>;

export type LogFeeParametersChangedEventFilter = TypedEventFilter<LogFeeParametersChangedEvent>;

export interface LogHarvestEventObject {
  total: BigNumber;
  amount: BigNumber;
  fee: BigNumber;
}
export type LogHarvestEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], LogHarvestEventObject>;

export type LogHarvestEventFilter = TypedEventFilter<LogHarvestEvent>;

export interface LogRewardRouterV2ChangedEventObject {
  arg0: string;
  arg1: string;
}
export type LogRewardRouterV2ChangedEvent = TypedEvent<[string, string], LogRewardRouterV2ChangedEventObject>;

export type LogRewardRouterV2ChangedEventFilter = TypedEventFilter<LogRewardRouterV2ChangedEvent>;

export interface OperatorChangedEventObject {
  arg0: string;
  arg1: boolean;
}
export type OperatorChangedEvent = TypedEvent<[string, boolean], OperatorChangedEventObject>;

export type OperatorChangedEventFilter = TypedEventFilter<OperatorChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface AbracadabraMagicGlpHarvestor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AbracadabraMagicGlpHarvestorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BIPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    claimable(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    feePercentBips(overrides?: CallOverrides): Promise<[number]>;

    glpRewardRouter(overrides?: CallOverrides): Promise<[string]>;

    lastExecution(overrides?: CallOverrides): Promise<[BigNumber]>;

    operators(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    rewardRouterV2(overrides?: CallOverrides): Promise<[string]>;

    run(
      minGlp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFeeParameters(
      _feeCollector: PromiseOrValue<string>,
      _feePercentBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setOperator(
      operator: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRewardRouterV2(
      _rewardRouterV2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    totalRewardsBalanceAfterClaiming(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  BIPS(overrides?: CallOverrides): Promise<BigNumber>;

  claimOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  claimable(overrides?: CallOverrides): Promise<BigNumber>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  feePercentBips(overrides?: CallOverrides): Promise<number>;

  glpRewardRouter(overrides?: CallOverrides): Promise<string>;

  lastExecution(overrides?: CallOverrides): Promise<BigNumber>;

  operators(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  rewardRouterV2(overrides?: CallOverrides): Promise<string>;

  run(
    minGlp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFeeParameters(
    _feeCollector: PromiseOrValue<string>,
    _feePercentBips: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setOperator(
    operator: PromiseOrValue<string>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRewardRouterV2(
    _rewardRouterV2: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  totalRewardsBalanceAfterClaiming(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    direct: PromiseOrValue<boolean>,
    renounce: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BIPS(overrides?: CallOverrides): Promise<BigNumber>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    claimable(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    feePercentBips(overrides?: CallOverrides): Promise<number>;

    glpRewardRouter(overrides?: CallOverrides): Promise<string>;

    lastExecution(overrides?: CallOverrides): Promise<BigNumber>;

    operators(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    rewardRouterV2(overrides?: CallOverrides): Promise<string>;

    run(minGlp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setFeeParameters(
      _feeCollector: PromiseOrValue<string>,
      _feePercentBips: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setOperator(
      operator: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setRewardRouterV2(_rewardRouterV2: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    totalRewardsBalanceAfterClaiming(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'LogFeeParametersChanged(address,uint16)'(
      feeCollector?: PromiseOrValue<string> | null,
      feeAmount?: null,
    ): LogFeeParametersChangedEventFilter;
    LogFeeParametersChanged(
      feeCollector?: PromiseOrValue<string> | null,
      feeAmount?: null,
    ): LogFeeParametersChangedEventFilter;

    'LogHarvest(uint256,uint256,uint256)'(total?: null, amount?: null, fee?: null): LogHarvestEventFilter;
    LogHarvest(total?: null, amount?: null, fee?: null): LogHarvestEventFilter;

    'LogRewardRouterV2Changed(address,address)'(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
    ): LogRewardRouterV2ChangedEventFilter;
    LogRewardRouterV2Changed(
      arg0?: PromiseOrValue<string> | null,
      arg1?: PromiseOrValue<string> | null,
    ): LogRewardRouterV2ChangedEventFilter;

    'OperatorChanged(address,bool)'(arg0?: PromiseOrValue<string> | null, arg1?: null): OperatorChangedEventFilter;
    OperatorChanged(arg0?: PromiseOrValue<string> | null, arg1?: null): OperatorChangedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    BIPS(overrides?: CallOverrides): Promise<BigNumber>;

    claimOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    claimable(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    feePercentBips(overrides?: CallOverrides): Promise<BigNumber>;

    glpRewardRouter(overrides?: CallOverrides): Promise<BigNumber>;

    lastExecution(overrides?: CallOverrides): Promise<BigNumber>;

    operators(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRouterV2(overrides?: CallOverrides): Promise<BigNumber>;

    run(
      minGlp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFeeParameters(
      _feeCollector: PromiseOrValue<string>,
      _feePercentBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setOperator(
      operator: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRewardRouterV2(
      _rewardRouterV2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    totalRewardsBalanceAfterClaiming(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BIPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    claimable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePercentBips(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    glpRewardRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastExecution(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operators(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardRouterV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    run(
      minGlp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFeeParameters(
      _feeCollector: PromiseOrValue<string>,
      _feePercentBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setOperator(
      operator: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRewardRouterV2(
      _rewardRouterV2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    totalRewardsBalanceAfterClaiming(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
