/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface AbracadabraCouldronTokenContractInterface extends utils.Interface {
  functions: {
    'accrue()': FunctionFragment;
    'accrueInfo()': FunctionFragment;
    'addCollateral(address,bool,uint256)': FunctionFragment;
    'bentoBox()': FunctionFragment;
    'borrow(address,uint256)': FunctionFragment;
    'claimOwnership()': FunctionFragment;
    'collateral()': FunctionFragment;
    'cook(uint8[],uint256[],bytes[])': FunctionFragment;
    'exchangeRate()': FunctionFragment;
    'feeTo()': FunctionFragment;
    'init(bytes)': FunctionFragment;
    'liquidate(address[],uint256[],address,address)': FunctionFragment;
    'magicInternetMoney()': FunctionFragment;
    'masterContract()': FunctionFragment;
    'oracle()': FunctionFragment;
    'oracleData()': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingOwner()': FunctionFragment;
    'reduceSupply(uint256)': FunctionFragment;
    'removeCollateral(address,uint256)': FunctionFragment;
    'repay(address,bool,uint256)': FunctionFragment;
    'setFeeTo(address)': FunctionFragment;
    'totalBorrow()': FunctionFragment;
    'totalCollateralShare()': FunctionFragment;
    'transferOwnership(address,bool,bool)': FunctionFragment;
    'updateExchangeRate()': FunctionFragment;
    'userBorrowPart(address)': FunctionFragment;
    'userCollateralShare(address)': FunctionFragment;
    'withdrawFees()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'accrue'
      | 'accrueInfo'
      | 'addCollateral'
      | 'bentoBox'
      | 'borrow'
      | 'claimOwnership'
      | 'collateral'
      | 'cook'
      | 'exchangeRate'
      | 'feeTo'
      | 'init'
      | 'liquidate'
      | 'magicInternetMoney'
      | 'masterContract'
      | 'oracle'
      | 'oracleData'
      | 'owner'
      | 'pendingOwner'
      | 'reduceSupply'
      | 'removeCollateral'
      | 'repay'
      | 'setFeeTo'
      | 'totalBorrow'
      | 'totalCollateralShare'
      | 'transferOwnership'
      | 'updateExchangeRate'
      | 'userBorrowPart'
      | 'userCollateralShare'
      | 'withdrawFees',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'accrue', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accrueInfo', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addCollateral', values: [string, boolean, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'bentoBox', values?: undefined): string;
  encodeFunctionData(functionFragment: 'borrow', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'claimOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'collateral', values?: undefined): string;
  encodeFunctionData(functionFragment: 'cook', values: [BigNumberish[], BigNumberish[], BytesLike[]]): string;
  encodeFunctionData(functionFragment: 'exchangeRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feeTo', values?: undefined): string;
  encodeFunctionData(functionFragment: 'init', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'liquidate', values: [string[], BigNumberish[], string, string]): string;
  encodeFunctionData(functionFragment: 'magicInternetMoney', values?: undefined): string;
  encodeFunctionData(functionFragment: 'masterContract', values?: undefined): string;
  encodeFunctionData(functionFragment: 'oracle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'oracleData', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reduceSupply', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'removeCollateral', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'repay', values: [string, boolean, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setFeeTo', values: [string]): string;
  encodeFunctionData(functionFragment: 'totalBorrow', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalCollateralShare', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string, boolean, boolean]): string;
  encodeFunctionData(functionFragment: 'updateExchangeRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'userBorrowPart', values: [string]): string;
  encodeFunctionData(functionFragment: 'userCollateralShare', values: [string]): string;
  encodeFunctionData(functionFragment: 'withdrawFees', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'accrue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accrueInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bentoBox', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cook', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exchangeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'init', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'magicInternetMoney', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'masterContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'oracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'oracleData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reduceSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalBorrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalCollateralShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateExchangeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userBorrowPart', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userCollateralShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawFees', data: BytesLike): Result;

  events: {
    'LogAccrue(uint128)': EventFragment;
    'LogAddCollateral(address,address,uint256)': EventFragment;
    'LogBorrow(address,address,uint256,uint256)': EventFragment;
    'LogExchangeRate(uint256)': EventFragment;
    'LogFeeTo(address)': EventFragment;
    'LogRemoveCollateral(address,address,uint256)': EventFragment;
    'LogRepay(address,address,uint256,uint256)': EventFragment;
    'LogWithdrawFees(address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'LogAccrue'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogAddCollateral'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogBorrow'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogExchangeRate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogFeeTo'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogRemoveCollateral'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogRepay'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogWithdrawFees'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export interface LogAccrueEventObject {
  accruedAmount: BigNumber;
}
export type LogAccrueEvent = TypedEvent<[BigNumber], LogAccrueEventObject>;

export type LogAccrueEventFilter = TypedEventFilter<LogAccrueEvent>;

export interface LogAddCollateralEventObject {
  from: string;
  to: string;
  share: BigNumber;
}
export type LogAddCollateralEvent = TypedEvent<[string, string, BigNumber], LogAddCollateralEventObject>;

export type LogAddCollateralEventFilter = TypedEventFilter<LogAddCollateralEvent>;

export interface LogBorrowEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  part: BigNumber;
}
export type LogBorrowEvent = TypedEvent<[string, string, BigNumber, BigNumber], LogBorrowEventObject>;

export type LogBorrowEventFilter = TypedEventFilter<LogBorrowEvent>;

export interface LogExchangeRateEventObject {
  rate: BigNumber;
}
export type LogExchangeRateEvent = TypedEvent<[BigNumber], LogExchangeRateEventObject>;

export type LogExchangeRateEventFilter = TypedEventFilter<LogExchangeRateEvent>;

export interface LogFeeToEventObject {
  newFeeTo: string;
}
export type LogFeeToEvent = TypedEvent<[string], LogFeeToEventObject>;

export type LogFeeToEventFilter = TypedEventFilter<LogFeeToEvent>;

export interface LogRemoveCollateralEventObject {
  from: string;
  to: string;
  share: BigNumber;
}
export type LogRemoveCollateralEvent = TypedEvent<[string, string, BigNumber], LogRemoveCollateralEventObject>;

export type LogRemoveCollateralEventFilter = TypedEventFilter<LogRemoveCollateralEvent>;

export interface LogRepayEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  part: BigNumber;
}
export type LogRepayEvent = TypedEvent<[string, string, BigNumber, BigNumber], LogRepayEventObject>;

export type LogRepayEventFilter = TypedEventFilter<LogRepayEvent>;

export interface LogWithdrawFeesEventObject {
  feeTo: string;
  feesEarnedFraction: BigNumber;
}
export type LogWithdrawFeesEvent = TypedEvent<[string, BigNumber], LogWithdrawFeesEventObject>;

export type LogWithdrawFeesEventFilter = TypedEventFilter<LogWithdrawFeesEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface AbracadabraCouldronTokenContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AbracadabraCouldronTokenContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accrue(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    accrueInfo(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { lastAccrued: BigNumber; feesEarned: BigNumber }>;

    addCollateral(
      to: string,
      skim: boolean,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    bentoBox(overrides?: CallOverrides): Promise<[string]>;

    borrow(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claimOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    collateral(overrides?: CallOverrides): Promise<[string]>;

    cook(
      actions: BigNumberish[],
      values: BigNumberish[],
      datas: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    init(
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    liquidate(
      users: string[],
      maxBorrowParts: BigNumberish[],
      to: string,
      swapper: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    magicInternetMoney(overrides?: CallOverrides): Promise<[string]>;

    masterContract(overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    oracleData(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    reduceSupply(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    removeCollateral(
      to: string,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    repay(
      to: string,
      skim: boolean,
      part: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setFeeTo(
      newFeeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    totalBorrow(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { elastic: BigNumber; base: BigNumber }>;

    totalCollateralShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateExchangeRate(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    userBorrowPart(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    userCollateralShare(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFees(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;
  };

  accrue(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  accrueInfo(
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { lastAccrued: BigNumber; feesEarned: BigNumber }>;

  addCollateral(
    to: string,
    skim: boolean,
    share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  bentoBox(overrides?: CallOverrides): Promise<string>;

  borrow(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claimOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  collateral(overrides?: CallOverrides): Promise<string>;

  cook(
    actions: BigNumberish[],
    values: BigNumberish[],
    datas: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  init(
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  liquidate(
    users: string[],
    maxBorrowParts: BigNumberish[],
    to: string,
    swapper: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  magicInternetMoney(overrides?: CallOverrides): Promise<string>;

  masterContract(overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  oracleData(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  reduceSupply(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  removeCollateral(
    to: string,
    share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  repay(
    to: string,
    skim: boolean,
    part: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setFeeTo(newFeeTo: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  totalBorrow(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { elastic: BigNumber; base: BigNumber }>;

  totalCollateralShare(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    direct: boolean,
    renounce: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateExchangeRate(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  userBorrowPart(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  userCollateralShare(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFees(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  callStatic: {
    accrue(overrides?: CallOverrides): Promise<void>;

    accrueInfo(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { lastAccrued: BigNumber; feesEarned: BigNumber }>;

    addCollateral(to: string, skim: boolean, share: BigNumberish, overrides?: CallOverrides): Promise<void>;

    bentoBox(overrides?: CallOverrides): Promise<string>;

    borrow(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { part: BigNumber; share: BigNumber }>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    collateral(overrides?: CallOverrides): Promise<string>;

    cook(
      actions: BigNumberish[],
      values: BigNumberish[],
      datas: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { value1: BigNumber; value2: BigNumber }>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    init(data: BytesLike, overrides?: CallOverrides): Promise<void>;

    liquidate(
      users: string[],
      maxBorrowParts: BigNumberish[],
      to: string,
      swapper: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    magicInternetMoney(overrides?: CallOverrides): Promise<string>;

    masterContract(overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    oracleData(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    reduceSupply(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    removeCollateral(to: string, share: BigNumberish, overrides?: CallOverrides): Promise<void>;

    repay(to: string, skim: boolean, part: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setFeeTo(newFeeTo: string, overrides?: CallOverrides): Promise<void>;

    totalBorrow(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { elastic: BigNumber; base: BigNumber }>;

    totalCollateralShare(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: string, direct: boolean, renounce: boolean, overrides?: CallOverrides): Promise<void>;

    updateExchangeRate(
      overrides?: CallOverrides,
    ): Promise<[boolean, BigNumber] & { updated: boolean; rate: BigNumber }>;

    userBorrowPart(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userCollateralShare(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFees(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'LogAccrue(uint128)'(accruedAmount?: null): LogAccrueEventFilter;
    LogAccrue(accruedAmount?: null): LogAccrueEventFilter;

    'LogAddCollateral(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      share?: null,
    ): LogAddCollateralEventFilter;
    LogAddCollateral(from?: string | null, to?: string | null, share?: null): LogAddCollateralEventFilter;

    'LogBorrow(address,address,uint256,uint256)'(
      from?: string | null,
      to?: string | null,
      amount?: null,
      part?: null,
    ): LogBorrowEventFilter;
    LogBorrow(from?: string | null, to?: string | null, amount?: null, part?: null): LogBorrowEventFilter;

    'LogExchangeRate(uint256)'(rate?: null): LogExchangeRateEventFilter;
    LogExchangeRate(rate?: null): LogExchangeRateEventFilter;

    'LogFeeTo(address)'(newFeeTo?: string | null): LogFeeToEventFilter;
    LogFeeTo(newFeeTo?: string | null): LogFeeToEventFilter;

    'LogRemoveCollateral(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      share?: null,
    ): LogRemoveCollateralEventFilter;
    LogRemoveCollateral(from?: string | null, to?: string | null, share?: null): LogRemoveCollateralEventFilter;

    'LogRepay(address,address,uint256,uint256)'(
      from?: string | null,
      to?: string | null,
      amount?: null,
      part?: null,
    ): LogRepayEventFilter;
    LogRepay(from?: string | null, to?: string | null, amount?: null, part?: null): LogRepayEventFilter;

    'LogWithdrawFees(address,uint256)'(feeTo?: string | null, feesEarnedFraction?: null): LogWithdrawFeesEventFilter;
    LogWithdrawFees(feeTo?: string | null, feesEarnedFraction?: null): LogWithdrawFeesEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    accrue(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    accrueInfo(overrides?: CallOverrides): Promise<BigNumber>;

    addCollateral(
      to: string,
      skim: boolean,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    bentoBox(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    claimOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    collateral(overrides?: CallOverrides): Promise<BigNumber>;

    cook(
      actions: BigNumberish[],
      values: BigNumberish[],
      datas: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    init(data: BytesLike, overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    liquidate(
      users: string[],
      maxBorrowParts: BigNumberish[],
      to: string,
      swapper: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    magicInternetMoney(overrides?: CallOverrides): Promise<BigNumber>;

    masterContract(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    oracleData(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    reduceSupply(amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    removeCollateral(
      to: string,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    repay(
      to: string,
      skim: boolean,
      part: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setFeeTo(newFeeTo: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    totalBorrow(overrides?: CallOverrides): Promise<BigNumber>;

    totalCollateralShare(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateExchangeRate(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userBorrowPart(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userCollateralShare(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFees(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    accrue(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    accrueInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addCollateral(
      to: string,
      skim: boolean,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    bentoBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claimOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cook(
      actions: BigNumberish[],
      values: BigNumberish[],
      datas: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    liquidate(
      users: string[],
      maxBorrowParts: BigNumberish[],
      to: string,
      swapper: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    magicInternetMoney(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    masterContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reduceSupply(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    removeCollateral(
      to: string,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    repay(
      to: string,
      skim: boolean,
      part: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setFeeTo(
      newFeeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    totalBorrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCollateralShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateExchangeRate(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    userBorrowPart(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userCollateralShare(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFees(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;
  };
}
