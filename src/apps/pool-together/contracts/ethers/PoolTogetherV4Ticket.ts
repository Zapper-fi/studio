/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace ObservationLib {
  export type ObservationStruct = {
    amount: BigNumberish;
    timestamp: BigNumberish;
  };

  export type ObservationStructOutput = [BigNumber, number] & {
    amount: BigNumber;
    timestamp: number;
  };
}

export declare namespace TwabLib {
  export type AccountDetailsStruct = {
    balance: BigNumberish;
    nextTwabIndex: BigNumberish;
    cardinality: BigNumberish;
  };

  export type AccountDetailsStructOutput = [BigNumber, number, number] & {
    balance: BigNumber;
    nextTwabIndex: number;
    cardinality: number;
  };
}

export interface PoolTogetherV4TicketInterface extends utils.Interface {
  functions: {
    'DOMAIN_SEPARATOR()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'controller()': FunctionFragment;
    'controllerBurn(address,uint256)': FunctionFragment;
    'controllerBurnFrom(address,address,uint256)': FunctionFragment;
    'controllerDelegateFor(address,address)': FunctionFragment;
    'controllerMint(address,uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'delegate(address)': FunctionFragment;
    'delegateOf(address)': FunctionFragment;
    'delegateWithSignature(address,address,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'getAccountDetails(address)': FunctionFragment;
    'getAverageBalanceBetween(address,uint64,uint64)': FunctionFragment;
    'getAverageBalancesBetween(address,uint64[],uint64[])': FunctionFragment;
    'getAverageTotalSuppliesBetween(uint64[],uint64[])': FunctionFragment;
    'getBalanceAt(address,uint64)': FunctionFragment;
    'getBalancesAt(address,uint64[])': FunctionFragment;
    'getTotalSuppliesAt(uint64[])': FunctionFragment;
    'getTotalSupplyAt(uint64)': FunctionFragment;
    'getTwab(address,uint16)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DOMAIN_SEPARATOR'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'controller'
      | 'controllerBurn'
      | 'controllerBurnFrom'
      | 'controllerDelegateFor'
      | 'controllerMint'
      | 'decimals'
      | 'decreaseAllowance'
      | 'delegate'
      | 'delegateOf'
      | 'delegateWithSignature'
      | 'getAccountDetails'
      | 'getAverageBalanceBetween'
      | 'getAverageBalancesBetween'
      | 'getAverageTotalSuppliesBetween'
      | 'getBalanceAt'
      | 'getBalancesAt'
      | 'getTotalSuppliesAt'
      | 'getTotalSupplyAt'
      | 'getTwab'
      | 'increaseAllowance'
      | 'name'
      | 'nonces'
      | 'permit'
      | 'symbol'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'controller', values?: undefined): string;
  encodeFunctionData(functionFragment: 'controllerBurn', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'controllerBurnFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'controllerDelegateFor', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'controllerMint', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'delegate', values: [string]): string;
  encodeFunctionData(functionFragment: 'delegateOf', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'delegateWithSignature',
    values: [string, string, BigNumberish, BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'getAccountDetails', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'getAverageBalanceBetween',
    values: [string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getAverageBalancesBetween',
    values: [string, BigNumberish[], BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'getAverageTotalSuppliesBetween',
    values: [BigNumberish[], BigNumberish[]],
  ): string;
  encodeFunctionData(functionFragment: 'getBalanceAt', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getBalancesAt', values: [string, BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'getTotalSuppliesAt', values: [BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'getTotalSupplyAt', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getTwab', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'permit',
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'controller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'controllerBurn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'controllerBurnFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'controllerDelegateFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'controllerMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegateOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegateWithSignature', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountDetails', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAverageBalanceBetween', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAverageBalancesBetween', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAverageTotalSuppliesBetween', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBalanceAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBalancesAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalSuppliesAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalSupplyAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTwab', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Delegated(address,address)': EventFragment;
    'Deployed(string,string,uint8,address)': EventFragment;
    'NewTotalSupplyTwab(tuple)': EventFragment;
    'NewUserTwab(address,tuple)': EventFragment;
    'TicketInitialized(string,string,uint8,address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Delegated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deployed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewTotalSupplyTwab'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewUserTwab'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TicketInitialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DelegatedEventObject {
  delegator: string;
  delegate: string;
}
export type DelegatedEvent = TypedEvent<[string, string], DelegatedEventObject>;

export type DelegatedEventFilter = TypedEventFilter<DelegatedEvent>;

export interface DeployedEventObject {
  name: string;
  symbol: string;
  decimals: number;
  controller: string;
}
export type DeployedEvent = TypedEvent<[string, string, number, string], DeployedEventObject>;

export type DeployedEventFilter = TypedEventFilter<DeployedEvent>;

export interface NewTotalSupplyTwabEventObject {
  newTotalSupplyTwab: ObservationLib.ObservationStructOutput;
}
export type NewTotalSupplyTwabEvent = TypedEvent<
  [ObservationLib.ObservationStructOutput],
  NewTotalSupplyTwabEventObject
>;

export type NewTotalSupplyTwabEventFilter = TypedEventFilter<NewTotalSupplyTwabEvent>;

export interface NewUserTwabEventObject {
  delegate: string;
  newTwab: ObservationLib.ObservationStructOutput;
}
export type NewUserTwabEvent = TypedEvent<[string, ObservationLib.ObservationStructOutput], NewUserTwabEventObject>;

export type NewUserTwabEventFilter = TypedEventFilter<NewUserTwabEvent>;

export interface TicketInitializedEventObject {
  name: string;
  symbol: string;
  decimals: number;
  controller: string;
}
export type TicketInitializedEvent = TypedEvent<[string, string, number, string], TicketInitializedEventObject>;

export type TicketInitializedEventFilter = TypedEventFilter<TicketInitializedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface PoolTogetherV4Ticket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolTogetherV4TicketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    controllerBurn(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    controllerBurnFrom(
      _operator: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    controllerDelegateFor(
      _user: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    controllerMint(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    delegate(_to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    delegateOf(_user: string, overrides?: CallOverrides): Promise<[string]>;

    delegateWithSignature(
      _user: string,
      _newDelegate: string,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getAccountDetails(_user: string, overrides?: CallOverrides): Promise<[TwabLib.AccountDetailsStructOutput]>;

    getAverageBalanceBetween(
      _user: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getAverageBalancesBetween(
      _user: string,
      _startTimes: BigNumberish[],
      _endTimes: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]]>;

    getAverageTotalSuppliesBetween(
      _startTimes: BigNumberish[],
      _endTimes: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]]>;

    getBalanceAt(_user: string, _target: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    getBalancesAt(_user: string, _targets: BigNumberish[], overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getTotalSuppliesAt(_targets: BigNumberish[], overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getTotalSupplyAt(_target: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTwab(
      _user: string,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[ObservationLib.ObservationStructOutput]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  controller(overrides?: CallOverrides): Promise<string>;

  controllerBurn(
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  controllerBurnFrom(
    _operator: string,
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  controllerDelegateFor(
    _user: string,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  controllerMint(
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  delegate(_to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  delegateOf(_user: string, overrides?: CallOverrides): Promise<string>;

  delegateWithSignature(
    _user: string,
    _newDelegate: string,
    _deadline: BigNumberish,
    _v: BigNumberish,
    _r: BytesLike,
    _s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getAccountDetails(_user: string, overrides?: CallOverrides): Promise<TwabLib.AccountDetailsStructOutput>;

  getAverageBalanceBetween(
    _user: string,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getAverageBalancesBetween(
    _user: string,
    _startTimes: BigNumberish[],
    _endTimes: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  getAverageTotalSuppliesBetween(
    _startTimes: BigNumberish[],
    _endTimes: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  getBalanceAt(_user: string, _target: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getBalancesAt(_user: string, _targets: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber[]>;

  getTotalSuppliesAt(_targets: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber[]>;

  getTotalSupplyAt(_target: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getTwab(
    _user: string,
    _index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<ObservationLib.ObservationStructOutput>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<string>;

    controllerBurn(_user: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    controllerBurnFrom(
      _operator: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    controllerDelegateFor(_user: string, _to: string, overrides?: CallOverrides): Promise<void>;

    controllerMint(_user: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    delegate(_to: string, overrides?: CallOverrides): Promise<void>;

    delegateOf(_user: string, overrides?: CallOverrides): Promise<string>;

    delegateWithSignature(
      _user: string,
      _newDelegate: string,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    getAccountDetails(_user: string, overrides?: CallOverrides): Promise<TwabLib.AccountDetailsStructOutput>;

    getAverageBalanceBetween(
      _user: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAverageBalancesBetween(
      _user: string,
      _startTimes: BigNumberish[],
      _endTimes: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    getAverageTotalSuppliesBetween(
      _startTimes: BigNumberish[],
      _endTimes: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    getBalanceAt(_user: string, _target: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getBalancesAt(_user: string, _targets: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber[]>;

    getTotalSuppliesAt(_targets: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber[]>;

    getTotalSupplyAt(_target: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getTwab(
      _user: string,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<ObservationLib.ObservationStructOutput>;

    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(sender: string, recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;

    'Delegated(address,address)'(delegator?: string | null, delegate?: string | null): DelegatedEventFilter;
    Delegated(delegator?: string | null, delegate?: string | null): DelegatedEventFilter;

    'Deployed(string,string,uint8,address)'(
      name?: null,
      symbol?: null,
      decimals?: null,
      controller?: string | null,
    ): DeployedEventFilter;
    Deployed(name?: null, symbol?: null, decimals?: null, controller?: string | null): DeployedEventFilter;

    'NewTotalSupplyTwab(tuple)'(newTotalSupplyTwab?: null): NewTotalSupplyTwabEventFilter;
    NewTotalSupplyTwab(newTotalSupplyTwab?: null): NewTotalSupplyTwabEventFilter;

    'NewUserTwab(address,tuple)'(delegate?: string | null, newTwab?: null): NewUserTwabEventFilter;
    NewUserTwab(delegate?: string | null, newTwab?: null): NewUserTwabEventFilter;

    'TicketInitialized(string,string,uint8,address)'(
      name?: null,
      symbol?: null,
      decimals?: null,
      controller?: string | null,
    ): TicketInitializedEventFilter;
    TicketInitialized(
      name?: null,
      symbol?: null,
      decimals?: null,
      controller?: string | null,
    ): TicketInitializedEventFilter;

    'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    controllerBurn(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    controllerBurnFrom(
      _operator: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    controllerDelegateFor(
      _user: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    controllerMint(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    delegate(_to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    delegateOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    delegateWithSignature(
      _user: string,
      _newDelegate: string,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getAccountDetails(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAverageBalanceBetween(
      _user: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAverageBalancesBetween(
      _user: string,
      _startTimes: BigNumberish[],
      _endTimes: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAverageTotalSuppliesBetween(
      _startTimes: BigNumberish[],
      _endTimes: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getBalanceAt(_user: string, _target: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getBalancesAt(_user: string, _targets: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber>;

    getTotalSuppliesAt(_targets: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber>;

    getTotalSupplyAt(_target: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getTwab(_user: string, _index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controllerBurn(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    controllerBurnFrom(
      _operator: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    controllerDelegateFor(
      _user: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    controllerMint(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    delegate(_to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    delegateOf(_user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegateWithSignature(
      _user: string,
      _newDelegate: string,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getAccountDetails(_user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAverageBalanceBetween(
      _user: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAverageBalancesBetween(
      _user: string,
      _startTimes: BigNumberish[],
      _endTimes: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAverageTotalSuppliesBetween(
      _startTimes: BigNumberish[],
      _endTimes: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getBalanceAt(_user: string, _target: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBalancesAt(_user: string, _targets: BigNumberish[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalSuppliesAt(_targets: BigNumberish[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalSupplyAt(_target: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTwab(_user: string, _index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
