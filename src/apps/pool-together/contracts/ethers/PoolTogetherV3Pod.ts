/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface PoolTogetherV3PodInterface extends utils.Interface {
  functions: {
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balance()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'balanceOfUnderlying(address)': FunctionFragment;
    'batch()': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'depositTo(address,uint256)': FunctionFragment;
    'drop()': FunctionFragment;
    'emergencyTokenApproveZero(address,address)': FunctionFragment;
    'faucet()': FunctionFragment;
    'getEarlyExitFee(uint256)': FunctionFragment;
    'getPricePerShare()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initialize(address,address,uint8)': FunctionFragment;
    'manager()': FunctionFragment;
    'name()': FunctionFragment;
    'owner()': FunctionFragment;
    'prizePool()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setManager(address)': FunctionFragment;
    'setTokenDrop(address)': FunctionFragment;
    'setTokenFaucet(address)': FunctionFragment;
    'symbol()': FunctionFragment;
    'ticket()': FunctionFragment;
    'token()': FunctionFragment;
    'tokenDrop()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'withdraw(uint256,uint256)': FunctionFragment;
    'withdrawERC20(address,uint256)': FunctionFragment;
    'withdrawERC721(address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'allowance'
      | 'approve'
      | 'balance'
      | 'balanceOf'
      | 'balanceOfUnderlying'
      | 'batch'
      | 'decimals'
      | 'decreaseAllowance'
      | 'depositTo'
      | 'drop'
      | 'emergencyTokenApproveZero'
      | 'faucet'
      | 'getEarlyExitFee'
      | 'getPricePerShare'
      | 'increaseAllowance'
      | 'initialize'
      | 'manager'
      | 'name'
      | 'owner'
      | 'prizePool'
      | 'renounceOwnership'
      | 'setManager'
      | 'setTokenDrop'
      | 'setTokenFaucet'
      | 'symbol'
      | 'ticket'
      | 'token'
      | 'tokenDrop'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'withdraw'
      | 'withdrawERC20'
      | 'withdrawERC721',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'balanceOfUnderlying', values: [string]): string;
  encodeFunctionData(functionFragment: 'batch', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'depositTo', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'drop', values?: undefined): string;
  encodeFunctionData(functionFragment: 'emergencyTokenApproveZero', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'faucet', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getEarlyExitFee', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getPricePerShare', values?: undefined): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'manager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'prizePool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setManager', values: [string]): string;
  encodeFunctionData(functionFragment: 'setTokenDrop', values: [string]): string;
  encodeFunctionData(functionFragment: 'setTokenFaucet', values: [string]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ticket', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenDrop', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawERC20', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawERC721', values: [string, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfUnderlying', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'batch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'drop', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyTokenApproveZero', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'faucet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEarlyExitFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPricePerShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'manager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'prizePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTokenDrop', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTokenFaucet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ticket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenDrop', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawERC721', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'BatchFloat(uint256)': EventFragment;
    'Claimed(address,uint256)': EventFragment;
    'Deposited(address,uint256,uint256)': EventFragment;
    'ERC20Withdrawn(address,uint256)': EventFragment;
    'ERC721Withdrawn(address,uint256)': EventFragment;
    'ManagementTransferred(address,address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'PodClaimed(uint256)': EventFragment;
    'TokenDropSet(address)': EventFragment;
    'TokenFaucetSet(address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Withdrawal(address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BatchFloat'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Claimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ERC20Withdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ERC721Withdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ManagementTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PodClaimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenDropSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenFaucetSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdrawal'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BatchFloatEventObject {
  amount: BigNumber;
}
export type BatchFloatEvent = TypedEvent<[BigNumber], BatchFloatEventObject>;

export type BatchFloatEventFilter = TypedEventFilter<BatchFloatEvent>;

export interface ClaimedEventObject {
  user: string;
  balance: BigNumber;
}
export type ClaimedEvent = TypedEvent<[string, BigNumber], ClaimedEventObject>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface DepositedEventObject {
  user: string;
  amount: BigNumber;
  shares: BigNumber;
}
export type DepositedEvent = TypedEvent<[string, BigNumber, BigNumber], DepositedEventObject>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface ERC20WithdrawnEventObject {
  target: string;
  amount: BigNumber;
}
export type ERC20WithdrawnEvent = TypedEvent<[string, BigNumber], ERC20WithdrawnEventObject>;

export type ERC20WithdrawnEventFilter = TypedEventFilter<ERC20WithdrawnEvent>;

export interface ERC721WithdrawnEventObject {
  target: string;
  tokenId: BigNumber;
}
export type ERC721WithdrawnEvent = TypedEvent<[string, BigNumber], ERC721WithdrawnEventObject>;

export type ERC721WithdrawnEventFilter = TypedEventFilter<ERC721WithdrawnEvent>;

export interface ManagementTransferredEventObject {
  previousmanager: string;
  newmanager: string;
}
export type ManagementTransferredEvent = TypedEvent<[string, string], ManagementTransferredEventObject>;

export type ManagementTransferredEventFilter = TypedEventFilter<ManagementTransferredEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PodClaimedEventObject {
  amount: BigNumber;
}
export type PodClaimedEvent = TypedEvent<[BigNumber], PodClaimedEventObject>;

export type PodClaimedEventFilter = TypedEventFilter<PodClaimedEvent>;

export interface TokenDropSetEventObject {
  drop: string;
}
export type TokenDropSetEvent = TypedEvent<[string], TokenDropSetEventObject>;

export type TokenDropSetEventFilter = TypedEventFilter<TokenDropSetEvent>;

export interface TokenFaucetSetEventObject {
  drop: string;
}
export type TokenFaucetSetEvent = TypedEvent<[string], TokenFaucetSetEventObject>;

export type TokenFaucetSetEventFilter = TypedEventFilter<TokenFaucetSetEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawalEventObject {
  user: string;
  amount: BigNumber;
  shares: BigNumber;
}
export type WithdrawalEvent = TypedEvent<[string, BigNumber, BigNumber], WithdrawalEventObject>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface PoolTogetherV3Pod extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolTogetherV3PodInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfUnderlying(user: string, overrides?: CallOverrides): Promise<[BigNumber] & { amount: BigNumber }>;

    batch(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositTo(
      to: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    drop(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    emergencyTokenApproveZero(
      _token: string,
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    faucet(overrides?: CallOverrides): Promise<[string]>;

    getEarlyExitFee(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getPricePerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _prizePoolTarget: string,
      _ticket: string,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    prizePool(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setManager(
      newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTokenDrop(
      _tokenDrop: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTokenFaucet(
      _faucet: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    ticket(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenDrop(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      shareAmount: BigNumberish,
      maxFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawERC20(
      _target: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawERC721(
      _target: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balance(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfUnderlying(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  batch(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositTo(
    to: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  drop(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  emergencyTokenApproveZero(
    _token: string,
    _target: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  faucet(overrides?: CallOverrides): Promise<string>;

  getEarlyExitFee(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getPricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _prizePoolTarget: string,
    _ticket: string,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  manager(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  prizePool(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setManager(
    newManager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setTokenDrop(
    _tokenDrop: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setTokenFaucet(
    _faucet: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  ticket(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenDrop(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    shareAmount: BigNumberish,
    maxFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawERC20(
    _target: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawERC721(
    _target: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfUnderlying(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    batch(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    depositTo(to: string, tokenAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    drop(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyTokenApproveZero(_token: string, _target: string, overrides?: CallOverrides): Promise<void>;

    faucet(overrides?: CallOverrides): Promise<string>;

    getEarlyExitFee(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _prizePoolTarget: string,
      _ticket: string,
      _decimals: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    manager(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    prizePool(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setManager(newManager: string, overrides?: CallOverrides): Promise<boolean>;

    setTokenDrop(_tokenDrop: string, overrides?: CallOverrides): Promise<boolean>;

    setTokenFaucet(_faucet: string, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    ticket(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenDrop(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(sender: string, recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    withdraw(shareAmount: BigNumberish, maxFee: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawERC20(_target: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    withdrawERC721(_target: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;

    'BatchFloat(uint256)'(amount?: null): BatchFloatEventFilter;
    BatchFloat(amount?: null): BatchFloatEventFilter;

    'Claimed(address,uint256)'(user?: string | null, balance?: null): ClaimedEventFilter;
    Claimed(user?: string | null, balance?: null): ClaimedEventFilter;

    'Deposited(address,uint256,uint256)'(user?: string | null, amount?: null, shares?: null): DepositedEventFilter;
    Deposited(user?: string | null, amount?: null, shares?: null): DepositedEventFilter;

    'ERC20Withdrawn(address,uint256)'(target?: string | null, amount?: null): ERC20WithdrawnEventFilter;
    ERC20Withdrawn(target?: string | null, amount?: null): ERC20WithdrawnEventFilter;

    'ERC721Withdrawn(address,uint256)'(target?: string | null, tokenId?: null): ERC721WithdrawnEventFilter;
    ERC721Withdrawn(target?: string | null, tokenId?: null): ERC721WithdrawnEventFilter;

    'ManagementTransferred(address,address)'(
      previousmanager?: string | null,
      newmanager?: string | null,
    ): ManagementTransferredEventFilter;
    ManagementTransferred(
      previousmanager?: string | null,
      newmanager?: string | null,
    ): ManagementTransferredEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    'PodClaimed(uint256)'(amount?: null): PodClaimedEventFilter;
    PodClaimed(amount?: null): PodClaimedEventFilter;

    'TokenDropSet(address)'(drop?: string | null): TokenDropSetEventFilter;
    TokenDropSet(drop?: string | null): TokenDropSetEventFilter;

    'TokenFaucetSet(address)'(drop?: string | null): TokenFaucetSetEventFilter;
    TokenFaucetSet(drop?: string | null): TokenFaucetSetEventFilter;

    'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;

    'Withdrawal(address,uint256,uint256)'(user?: string | null, amount?: null, shares?: null): WithdrawalEventFilter;
    Withdrawal(user?: string | null, amount?: null, shares?: null): WithdrawalEventFilter;
  };

  estimateGas: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfUnderlying(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    batch(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    depositTo(
      to: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    drop(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    emergencyTokenApproveZero(
      _token: string,
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    faucet(overrides?: CallOverrides): Promise<BigNumber>;

    getEarlyExitFee(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getPricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initialize(
      _prizePoolTarget: string,
      _ticket: string,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    prizePool(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setManager(newManager: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setTokenDrop(_tokenDrop: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setTokenFaucet(_faucet: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    ticket(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenDrop(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdraw(
      shareAmount: BigNumberish,
      maxFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawERC20(
      _target: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawERC721(
      _target: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfUnderlying(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batch(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositTo(
      to: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    drop(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    emergencyTokenApproveZero(
      _token: string,
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    faucet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEarlyExitFee(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getPricePerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _prizePoolTarget: string,
      _ticket: string,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prizePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setManager(
      newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setTokenDrop(
      _tokenDrop: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setTokenFaucet(
      _faucet: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenDrop(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      shareAmount: BigNumberish,
      maxFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      _target: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawERC721(
      _target: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
