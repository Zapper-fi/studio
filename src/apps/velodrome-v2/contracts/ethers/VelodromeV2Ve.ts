/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace IVotingEscrow {
  export type CheckpointStruct = {
    fromTimestamp: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    delegatedBalance: PromiseOrValue<BigNumberish>;
    delegatee: PromiseOrValue<BigNumberish>;
  };

  export type CheckpointStructOutput = [BigNumber, string, BigNumber, BigNumber] & {
    fromTimestamp: BigNumber;
    owner: string;
    delegatedBalance: BigNumber;
    delegatee: BigNumber;
  };

  export type LockedBalanceStruct = {
    amount: PromiseOrValue<BigNumberish>;
    end: PromiseOrValue<BigNumberish>;
    isPermanent: PromiseOrValue<boolean>;
  };

  export type LockedBalanceStructOutput = [BigNumber, BigNumber, boolean] & {
    amount: BigNumber;
    end: BigNumber;
    isPermanent: boolean;
  };

  export type GlobalPointStruct = {
    bias: PromiseOrValue<BigNumberish>;
    slope: PromiseOrValue<BigNumberish>;
    ts: PromiseOrValue<BigNumberish>;
    blk: PromiseOrValue<BigNumberish>;
    permanentLockBalance: PromiseOrValue<BigNumberish>;
  };

  export type GlobalPointStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    bias: BigNumber;
    slope: BigNumber;
    ts: BigNumber;
    blk: BigNumber;
    permanentLockBalance: BigNumber;
  };

  export type UserPointStruct = {
    bias: PromiseOrValue<BigNumberish>;
    slope: PromiseOrValue<BigNumberish>;
    ts: PromiseOrValue<BigNumberish>;
    blk: PromiseOrValue<BigNumberish>;
    permanent: PromiseOrValue<BigNumberish>;
  };

  export type UserPointStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    bias: BigNumber;
    slope: BigNumber;
    ts: BigNumber;
    blk: BigNumber;
    permanent: BigNumber;
  };
}

export interface VelodromeV2VeInterface extends utils.Interface {
  functions: {
    'CLOCK_MODE()': FunctionFragment;
    'DELEGATION_TYPEHASH()': FunctionFragment;
    'DOMAIN_TYPEHASH()': FunctionFragment;
    'allowedManager()': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'artProxy()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'balanceOfNFT(uint256)': FunctionFragment;
    'balanceOfNFTAt(uint256,uint256)': FunctionFragment;
    'canSplit(address)': FunctionFragment;
    'checkpoint()': FunctionFragment;
    'checkpoints(uint256,uint48)': FunctionFragment;
    'clock()': FunctionFragment;
    'createLock(uint256,uint256)': FunctionFragment;
    'createLockFor(uint256,uint256,address)': FunctionFragment;
    'createManagedLockFor(address)': FunctionFragment;
    'deactivated(uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'delegate(uint256,uint256)': FunctionFragment;
    'delegateBySig(uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'delegates(uint256)': FunctionFragment;
    'depositFor(uint256,uint256)': FunctionFragment;
    'depositManaged(uint256,uint256)': FunctionFragment;
    'distributor()': FunctionFragment;
    'epoch()': FunctionFragment;
    'escrowType(uint256)': FunctionFragment;
    'factoryRegistry()': FunctionFragment;
    'forwarder()': FunctionFragment;
    'getApproved(uint256)': FunctionFragment;
    'getPastTotalSupply(uint256)': FunctionFragment;
    'getPastVotes(address,uint256,uint256)': FunctionFragment;
    'idToManaged(uint256)': FunctionFragment;
    'increaseAmount(uint256,uint256)': FunctionFragment;
    'increaseUnlockTime(uint256,uint256)': FunctionFragment;
    'isApprovedForAll(address,address)': FunctionFragment;
    'isApprovedOrOwner(address,uint256)': FunctionFragment;
    'isTrustedForwarder(address)': FunctionFragment;
    'lockPermanent(uint256)': FunctionFragment;
    'locked(uint256)': FunctionFragment;
    'managedToFree(uint256)': FunctionFragment;
    'managedToLocked(uint256)': FunctionFragment;
    'merge(uint256,uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'numCheckpoints(uint256)': FunctionFragment;
    'ownerOf(uint256)': FunctionFragment;
    'ownerToNFTokenIdList(address,uint256)': FunctionFragment;
    'permanentLockBalance()': FunctionFragment;
    'pointHistory(uint256)': FunctionFragment;
    'safeTransferFrom(address,address,uint256)': FunctionFragment;
    'safeTransferFrom(address,address,uint256,bytes)': FunctionFragment;
    'setAllowedManager(address)': FunctionFragment;
    'setApprovalForAll(address,bool)': FunctionFragment;
    'setArtProxy(address)': FunctionFragment;
    'setManagedState(uint256,bool)': FunctionFragment;
    'setTeam(address)': FunctionFragment;
    'setVoterAndDistributor(address,address)': FunctionFragment;
    'slopeChanges(uint256)': FunctionFragment;
    'split(uint256,uint256)': FunctionFragment;
    'supply()': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'symbol()': FunctionFragment;
    'team()': FunctionFragment;
    'toggleSplit(address,bool)': FunctionFragment;
    'token()': FunctionFragment;
    'tokenId()': FunctionFragment;
    'tokenURI(uint256)': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'totalSupplyAt(uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'unlockPermanent(uint256)': FunctionFragment;
    'userPointEpoch(uint256)': FunctionFragment;
    'userPointHistory(uint256,uint256)': FunctionFragment;
    'version()': FunctionFragment;
    'voted(uint256)': FunctionFragment;
    'voter()': FunctionFragment;
    'voting(uint256,bool)': FunctionFragment;
    'weights(uint256,uint256)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdrawManaged(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'CLOCK_MODE'
      | 'DELEGATION_TYPEHASH'
      | 'DOMAIN_TYPEHASH'
      | 'allowedManager'
      | 'approve'
      | 'artProxy'
      | 'balanceOf'
      | 'balanceOfNFT'
      | 'balanceOfNFTAt'
      | 'canSplit'
      | 'checkpoint'
      | 'checkpoints'
      | 'clock'
      | 'createLock'
      | 'createLockFor'
      | 'createManagedLockFor'
      | 'deactivated'
      | 'decimals'
      | 'delegate'
      | 'delegateBySig'
      | 'delegates'
      | 'depositFor'
      | 'depositManaged'
      | 'distributor'
      | 'epoch'
      | 'escrowType'
      | 'factoryRegistry'
      | 'forwarder'
      | 'getApproved'
      | 'getPastTotalSupply'
      | 'getPastVotes'
      | 'idToManaged'
      | 'increaseAmount'
      | 'increaseUnlockTime'
      | 'isApprovedForAll'
      | 'isApprovedOrOwner'
      | 'isTrustedForwarder'
      | 'lockPermanent'
      | 'locked'
      | 'managedToFree'
      | 'managedToLocked'
      | 'merge'
      | 'name'
      | 'nonces'
      | 'numCheckpoints'
      | 'ownerOf'
      | 'ownerToNFTokenIdList'
      | 'permanentLockBalance'
      | 'pointHistory'
      | 'safeTransferFrom(address,address,uint256)'
      | 'safeTransferFrom(address,address,uint256,bytes)'
      | 'setAllowedManager'
      | 'setApprovalForAll'
      | 'setArtProxy'
      | 'setManagedState'
      | 'setTeam'
      | 'setVoterAndDistributor'
      | 'slopeChanges'
      | 'split'
      | 'supply'
      | 'supportsInterface'
      | 'symbol'
      | 'team'
      | 'toggleSplit'
      | 'token'
      | 'tokenId'
      | 'tokenURI'
      | 'totalSupply'
      | 'totalSupplyAt'
      | 'transferFrom'
      | 'unlockPermanent'
      | 'userPointEpoch'
      | 'userPointHistory'
      | 'version'
      | 'voted'
      | 'voter'
      | 'voting'
      | 'weights'
      | 'withdraw'
      | 'withdrawManaged',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'CLOCK_MODE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DELEGATION_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DOMAIN_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowedManager', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'artProxy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'balanceOfNFT', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'balanceOfNFTAt',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'canSplit', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'checkpoint', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'checkpoints',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'clock', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'createLock',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'createLockFor',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'createManagedLockFor', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'deactivated', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'delegate',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'delegateBySig',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'delegates', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'depositFor',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositManaged',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'distributor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'epoch', values?: undefined): string;
  encodeFunctionData(functionFragment: 'escrowType', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'factoryRegistry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'forwarder', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getApproved', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getPastTotalSupply', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getPastVotes',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'idToManaged', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'increaseAmount',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseUnlockTime',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'isApprovedOrOwner',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'isTrustedForwarder', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lockPermanent', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'locked', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'managedToFree', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'managedToLocked', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'merge',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'numCheckpoints', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'ownerOf', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'ownerToNFTokenIdList',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'permanentLockBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pointHistory', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'setAllowedManager', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setArtProxy', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setManagedState',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setTeam', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setVoterAndDistributor',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'slopeChanges', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'split',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'supply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'team', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'toggleSplit',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenURI', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupplyAt', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'unlockPermanent', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'userPointEpoch', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'userPointHistory',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'version', values?: undefined): string;
  encodeFunctionData(functionFragment: 'voted', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'voter', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'voting',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'weights',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'withdrawManaged', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'CLOCK_MODE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DELEGATION_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DOMAIN_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowedManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'artProxy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfNFT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfNFTAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'canSplit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkpoint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkpoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'clock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createLock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createLockFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createManagedLockFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deactivated', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegateBySig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegates', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositManaged', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distributor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'epoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'escrowType', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'factoryRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'forwarder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPastTotalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPastVotes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'idToManaged', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseUnlockTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedOrOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isTrustedForwarder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockPermanent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'locked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'managedToFree', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'managedToLocked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'merge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numCheckpoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerToNFTokenIdList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'permanentLockBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pointHistory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAllowedManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setArtProxy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setManagedState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTeam', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setVoterAndDistributor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'slopeChanges', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'split', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'team', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'toggleSplit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupplyAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unlockPermanent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userPointEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userPointHistory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'voted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'voter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'voting', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'weights', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawManaged', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'ApprovalForAll(address,address,bool)': EventFragment;
    'BatchMetadataUpdate(uint256,uint256)': EventFragment;
    'CreateManaged(address,uint256,address,address,address)': EventFragment;
    'DelegateChanged(address,uint256,uint256)': EventFragment;
    'DelegateVotesChanged(address,uint256,uint256)': EventFragment;
    'Deposit(address,uint256,uint8,uint256,uint256,uint256)': EventFragment;
    'DepositManaged(address,uint256,uint256,uint256,uint256)': EventFragment;
    'LockPermanent(address,uint256,uint256,uint256)': EventFragment;
    'Merge(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'MetadataUpdate(uint256)': EventFragment;
    'SetAllowedManager(address)': EventFragment;
    'Split(uint256,uint256,uint256,address,uint256,uint256,uint256,uint256)': EventFragment;
    'Supply(uint256,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'UnlockPermanent(address,uint256,uint256,uint256)': EventFragment;
    'Withdraw(address,uint256,uint256,uint256)': EventFragment;
    'WithdrawManaged(address,uint256,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BatchMetadataUpdate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreateManaged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DelegateChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DelegateVotesChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositManaged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LockPermanent'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Merge'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MetadataUpdate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetAllowedManager'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Split'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Supply'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UnlockPermanent'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawManaged'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<[string, string, boolean], ApprovalForAllEventObject>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BatchMetadataUpdateEventObject {
  _fromTokenId: BigNumber;
  _toTokenId: BigNumber;
}
export type BatchMetadataUpdateEvent = TypedEvent<[BigNumber, BigNumber], BatchMetadataUpdateEventObject>;

export type BatchMetadataUpdateEventFilter = TypedEventFilter<BatchMetadataUpdateEvent>;

export interface CreateManagedEventObject {
  _to: string;
  _mTokenId: BigNumber;
  _from: string;
  _lockedManagedReward: string;
  _freeManagedReward: string;
}
export type CreateManagedEvent = TypedEvent<[string, BigNumber, string, string, string], CreateManagedEventObject>;

export type CreateManagedEventFilter = TypedEventFilter<CreateManagedEvent>;

export interface DelegateChangedEventObject {
  delegator: string;
  fromDelegate: BigNumber;
  toDelegate: BigNumber;
}
export type DelegateChangedEvent = TypedEvent<[string, BigNumber, BigNumber], DelegateChangedEventObject>;

export type DelegateChangedEventFilter = TypedEventFilter<DelegateChangedEvent>;

export interface DelegateVotesChangedEventObject {
  delegate: string;
  previousBalance: BigNumber;
  newBalance: BigNumber;
}
export type DelegateVotesChangedEvent = TypedEvent<[string, BigNumber, BigNumber], DelegateVotesChangedEventObject>;

export type DelegateVotesChangedEventFilter = TypedEventFilter<DelegateVotesChangedEvent>;

export interface DepositEventObject {
  provider: string;
  tokenId: BigNumber;
  depositType: number;
  value: BigNumber;
  locktime: BigNumber;
  ts: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber, number, BigNumber, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DepositManagedEventObject {
  _owner: string;
  _tokenId: BigNumber;
  _mTokenId: BigNumber;
  _weight: BigNumber;
  _ts: BigNumber;
}
export type DepositManagedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  DepositManagedEventObject
>;

export type DepositManagedEventFilter = TypedEventFilter<DepositManagedEvent>;

export interface LockPermanentEventObject {
  _owner: string;
  _tokenId: BigNumber;
  amount: BigNumber;
  _ts: BigNumber;
}
export type LockPermanentEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], LockPermanentEventObject>;

export type LockPermanentEventFilter = TypedEventFilter<LockPermanentEvent>;

export interface MergeEventObject {
  _sender: string;
  _from: BigNumber;
  _to: BigNumber;
  _amountFrom: BigNumber;
  _amountTo: BigNumber;
  _amountFinal: BigNumber;
  _locktime: BigNumber;
  _ts: BigNumber;
}
export type MergeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  MergeEventObject
>;

export type MergeEventFilter = TypedEventFilter<MergeEvent>;

export interface MetadataUpdateEventObject {
  _tokenId: BigNumber;
}
export type MetadataUpdateEvent = TypedEvent<[BigNumber], MetadataUpdateEventObject>;

export type MetadataUpdateEventFilter = TypedEventFilter<MetadataUpdateEvent>;

export interface SetAllowedManagerEventObject {
  _allowedManager: string;
}
export type SetAllowedManagerEvent = TypedEvent<[string], SetAllowedManagerEventObject>;

export type SetAllowedManagerEventFilter = TypedEventFilter<SetAllowedManagerEvent>;

export interface SplitEventObject {
  _from: BigNumber;
  _tokenId1: BigNumber;
  _tokenId2: BigNumber;
  _sender: string;
  _splitAmount1: BigNumber;
  _splitAmount2: BigNumber;
  _locktime: BigNumber;
  _ts: BigNumber;
}
export type SplitEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber],
  SplitEventObject
>;

export type SplitEventFilter = TypedEventFilter<SplitEvent>;

export interface SupplyEventObject {
  prevSupply: BigNumber;
  supply: BigNumber;
}
export type SupplyEvent = TypedEvent<[BigNumber, BigNumber], SupplyEventObject>;

export type SupplyEventFilter = TypedEventFilter<SupplyEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnlockPermanentEventObject {
  _owner: string;
  _tokenId: BigNumber;
  amount: BigNumber;
  _ts: BigNumber;
}
export type UnlockPermanentEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], UnlockPermanentEventObject>;

export type UnlockPermanentEventFilter = TypedEventFilter<UnlockPermanentEvent>;

export interface WithdrawEventObject {
  provider: string;
  tokenId: BigNumber;
  value: BigNumber;
  ts: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawManagedEventObject {
  _owner: string;
  _tokenId: BigNumber;
  _mTokenId: BigNumber;
  _weight: BigNumber;
  _ts: BigNumber;
}
export type WithdrawManagedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  WithdrawManagedEventObject
>;

export type WithdrawManagedEventFilter = TypedEventFilter<WithdrawManagedEvent>;

export interface VelodromeV2Ve extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VelodromeV2VeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CLOCK_MODE(overrides?: CallOverrides): Promise<[string]>;

    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    allowedManager(overrides?: CallOverrides): Promise<[string]>;

    approve(
      _approved: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    artProxy(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfNFT(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfNFTAt(
      _tokenId: PromiseOrValue<BigNumberish>,
      _t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    canSplit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    checkpoint(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    checkpoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[IVotingEscrow.CheckpointStructOutput]>;

    clock(overrides?: CallOverrides): Promise<[number]>;

    createLock(
      _value: PromiseOrValue<BigNumberish>,
      _lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createLockFor(
      _value: PromiseOrValue<BigNumberish>,
      _lockDuration: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createManagedLockFor(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deactivated(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    delegate(
      delegator: PromiseOrValue<BigNumberish>,
      delegatee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    delegateBySig(
      delegator: PromiseOrValue<BigNumberish>,
      delegatee: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    delegates(delegator: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    depositFor(
      _tokenId: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositManaged(
      _tokenId: PromiseOrValue<BigNumberish>,
      _mTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    distributor(overrides?: CallOverrides): Promise<[string]>;

    epoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    escrowType(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number]>;

    factoryRegistry(overrides?: CallOverrides): Promise<[string]>;

    forwarder(overrides?: CallOverrides): Promise<[string]>;

    getApproved(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    getPastTotalSupply(_timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPastVotes(
      _account: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    idToManaged(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAmount(
      _tokenId: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    increaseUnlockTime(
      _tokenId: PromiseOrValue<BigNumberish>,
      _lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isApprovedOrOwner(
      _spender: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    lockPermanent(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    locked(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[IVotingEscrow.LockedBalanceStructOutput]>;

    managedToFree(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    managedToLocked(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    merge(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    numCheckpoints(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number]>;

    ownerOf(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    ownerToNFTokenIdList(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    permanentLockBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    pointHistory(
      _loc: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[IVotingEscrow.GlobalPointStructOutput]>;

    'safeTransferFrom(address,address,uint256)'(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setAllowedManager(
      _allowedManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      _operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setArtProxy(
      _proxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setManagedState(
      _mTokenId: PromiseOrValue<BigNumberish>,
      _state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTeam(
      _team: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setVoterAndDistributor(
      _voter: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    slopeChanges(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    split(
      _from: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supply(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(_interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    team(overrides?: CallOverrides): Promise<[string]>;

    toggleSplit(
      _account: PromiseOrValue<string>,
      _bool: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenURI(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyAt(_timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unlockPermanent(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    userPointEpoch(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    userPointHistory(
      _tokenId: PromiseOrValue<BigNumberish>,
      _loc: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[IVotingEscrow.UserPointStructOutput]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    voted(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    voter(overrides?: CallOverrides): Promise<[string]>;

    voting(
      _tokenId: PromiseOrValue<BigNumberish>,
      _voted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    weights(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    withdraw(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawManaged(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  CLOCK_MODE(overrides?: CallOverrides): Promise<string>;

  DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  allowedManager(overrides?: CallOverrides): Promise<string>;

  approve(
    _approved: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  artProxy(overrides?: CallOverrides): Promise<string>;

  balanceOf(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfNFT(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfNFTAt(
    _tokenId: PromiseOrValue<BigNumberish>,
    _t: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  canSplit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  checkpoint(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  checkpoints(
    _tokenId: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<IVotingEscrow.CheckpointStructOutput>;

  clock(overrides?: CallOverrides): Promise<number>;

  createLock(
    _value: PromiseOrValue<BigNumberish>,
    _lockDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createLockFor(
    _value: PromiseOrValue<BigNumberish>,
    _lockDuration: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createManagedLockFor(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deactivated(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  decimals(overrides?: CallOverrides): Promise<number>;

  delegate(
    delegator: PromiseOrValue<BigNumberish>,
    delegatee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  delegateBySig(
    delegator: PromiseOrValue<BigNumberish>,
    delegatee: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    expiry: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  delegates(delegator: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  depositFor(
    _tokenId: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositManaged(
    _tokenId: PromiseOrValue<BigNumberish>,
    _mTokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  distributor(overrides?: CallOverrides): Promise<string>;

  epoch(overrides?: CallOverrides): Promise<BigNumber>;

  escrowType(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;

  factoryRegistry(overrides?: CallOverrides): Promise<string>;

  forwarder(overrides?: CallOverrides): Promise<string>;

  getApproved(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  getPastTotalSupply(_timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getPastVotes(
    _account: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  idToManaged(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  increaseAmount(
    _tokenId: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  increaseUnlockTime(
    _tokenId: PromiseOrValue<BigNumberish>,
    _lockDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    _owner: PromiseOrValue<string>,
    _operator: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isApprovedOrOwner(
    _spender: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  lockPermanent(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  locked(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<IVotingEscrow.LockedBalanceStructOutput>;

  managedToFree(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  managedToLocked(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  merge(
    _from: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  numCheckpoints(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;

  ownerOf(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  ownerToNFTokenIdList(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  permanentLockBalance(overrides?: CallOverrides): Promise<BigNumber>;

  pointHistory(
    _loc: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<IVotingEscrow.GlobalPointStructOutput>;

  'safeTransferFrom(address,address,uint256)'(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'safeTransferFrom(address,address,uint256,bytes)'(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setAllowedManager(
    _allowedManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    _operator: PromiseOrValue<string>,
    _approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setArtProxy(
    _proxy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setManagedState(
    _mTokenId: PromiseOrValue<BigNumberish>,
    _state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTeam(
    _team: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setVoterAndDistributor(
    _voter: PromiseOrValue<string>,
    _distributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  slopeChanges(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  split(
    _from: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  supply(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(_interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  team(overrides?: CallOverrides): Promise<string>;

  toggleSplit(
    _account: PromiseOrValue<string>,
    _bool: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenId(overrides?: CallOverrides): Promise<BigNumber>;

  tokenURI(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyAt(_timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unlockPermanent(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  userPointEpoch(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  userPointHistory(
    _tokenId: PromiseOrValue<BigNumberish>,
    _loc: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<IVotingEscrow.UserPointStructOutput>;

  version(overrides?: CallOverrides): Promise<string>;

  voted(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  voter(overrides?: CallOverrides): Promise<string>;

  voting(
    _tokenId: PromiseOrValue<BigNumberish>,
    _voted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  weights(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  withdraw(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawManaged(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    CLOCK_MODE(overrides?: CallOverrides): Promise<string>;

    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    allowedManager(overrides?: CallOverrides): Promise<string>;

    approve(
      _approved: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    artProxy(overrides?: CallOverrides): Promise<string>;

    balanceOf(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfNFT(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfNFTAt(
      _tokenId: PromiseOrValue<BigNumberish>,
      _t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    canSplit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    checkpoint(overrides?: CallOverrides): Promise<void>;

    checkpoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<IVotingEscrow.CheckpointStructOutput>;

    clock(overrides?: CallOverrides): Promise<number>;

    createLock(
      _value: PromiseOrValue<BigNumberish>,
      _lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    createLockFor(
      _value: PromiseOrValue<BigNumberish>,
      _lockDuration: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    createManagedLockFor(_to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    deactivated(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    decimals(overrides?: CallOverrides): Promise<number>;

    delegate(
      delegator: PromiseOrValue<BigNumberish>,
      delegatee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    delegateBySig(
      delegator: PromiseOrValue<BigNumberish>,
      delegatee: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    delegates(delegator: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    depositFor(
      _tokenId: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositManaged(
      _tokenId: PromiseOrValue<BigNumberish>,
      _mTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    distributor(overrides?: CallOverrides): Promise<string>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    escrowType(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;

    factoryRegistry(overrides?: CallOverrides): Promise<string>;

    forwarder(overrides?: CallOverrides): Promise<string>;

    getApproved(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    getPastTotalSupply(_timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getPastVotes(
      _account: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    idToManaged(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAmount(
      _tokenId: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    increaseUnlockTime(
      _tokenId: PromiseOrValue<BigNumberish>,
      _lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    isApprovedForAll(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isApprovedOrOwner(
      _spender: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    lockPermanent(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    locked(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<IVotingEscrow.LockedBalanceStructOutput>;

    managedToFree(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    managedToLocked(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    merge(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    numCheckpoints(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;

    ownerOf(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    ownerToNFTokenIdList(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    permanentLockBalance(overrides?: CallOverrides): Promise<BigNumber>;

    pointHistory(
      _loc: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<IVotingEscrow.GlobalPointStructOutput>;

    'safeTransferFrom(address,address,uint256)'(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setAllowedManager(_allowedManager: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setApprovalForAll(
      _operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setArtProxy(_proxy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setManagedState(
      _mTokenId: PromiseOrValue<BigNumberish>,
      _state: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setTeam(_team: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setVoterAndDistributor(
      _voter: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    slopeChanges(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    split(
      _from: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { _tokenId1: BigNumber; _tokenId2: BigNumber }>;

    supply(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(_interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    team(overrides?: CallOverrides): Promise<string>;

    toggleSplit(
      _account: PromiseOrValue<string>,
      _bool: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(_timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    unlockPermanent(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    userPointEpoch(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    userPointHistory(
      _tokenId: PromiseOrValue<BigNumberish>,
      _loc: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<IVotingEscrow.UserPointStructOutput>;

    version(overrides?: CallOverrides): Promise<string>;

    voted(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    voter(overrides?: CallOverrides): Promise<string>;

    voting(
      _tokenId: PromiseOrValue<BigNumberish>,
      _voted: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    weights(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    withdraw(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    withdrawManaged(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
    ): ApprovalEventFilter;

    'ApprovalForAll(address,address,bool)'(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null,
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null,
    ): ApprovalForAllEventFilter;

    'BatchMetadataUpdate(uint256,uint256)'(_fromTokenId?: null, _toTokenId?: null): BatchMetadataUpdateEventFilter;
    BatchMetadataUpdate(_fromTokenId?: null, _toTokenId?: null): BatchMetadataUpdateEventFilter;

    'CreateManaged(address,uint256,address,address,address)'(
      _to?: PromiseOrValue<string> | null,
      _mTokenId?: PromiseOrValue<BigNumberish> | null,
      _from?: PromiseOrValue<string> | null,
      _lockedManagedReward?: null,
      _freeManagedReward?: null,
    ): CreateManagedEventFilter;
    CreateManaged(
      _to?: PromiseOrValue<string> | null,
      _mTokenId?: PromiseOrValue<BigNumberish> | null,
      _from?: PromiseOrValue<string> | null,
      _lockedManagedReward?: null,
      _freeManagedReward?: null,
    ): CreateManagedEventFilter;

    'DelegateChanged(address,uint256,uint256)'(
      delegator?: PromiseOrValue<string> | null,
      fromDelegate?: PromiseOrValue<BigNumberish> | null,
      toDelegate?: PromiseOrValue<BigNumberish> | null,
    ): DelegateChangedEventFilter;
    DelegateChanged(
      delegator?: PromiseOrValue<string> | null,
      fromDelegate?: PromiseOrValue<BigNumberish> | null,
      toDelegate?: PromiseOrValue<BigNumberish> | null,
    ): DelegateChangedEventFilter;

    'DelegateVotesChanged(address,uint256,uint256)'(
      delegate?: PromiseOrValue<string> | null,
      previousBalance?: null,
      newBalance?: null,
    ): DelegateVotesChangedEventFilter;
    DelegateVotesChanged(
      delegate?: PromiseOrValue<string> | null,
      previousBalance?: null,
      newBalance?: null,
    ): DelegateVotesChangedEventFilter;

    'Deposit(address,uint256,uint8,uint256,uint256,uint256)'(
      provider?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      depositType?: PromiseOrValue<BigNumberish> | null,
      value?: null,
      locktime?: null,
      ts?: null,
    ): DepositEventFilter;
    Deposit(
      provider?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      depositType?: PromiseOrValue<BigNumberish> | null,
      value?: null,
      locktime?: null,
      ts?: null,
    ): DepositEventFilter;

    'DepositManaged(address,uint256,uint256,uint256,uint256)'(
      _owner?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _mTokenId?: PromiseOrValue<BigNumberish> | null,
      _weight?: null,
      _ts?: null,
    ): DepositManagedEventFilter;
    DepositManaged(
      _owner?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _mTokenId?: PromiseOrValue<BigNumberish> | null,
      _weight?: null,
      _ts?: null,
    ): DepositManagedEventFilter;

    'LockPermanent(address,uint256,uint256,uint256)'(
      _owner?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      _ts?: null,
    ): LockPermanentEventFilter;
    LockPermanent(
      _owner?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      _ts?: null,
    ): LockPermanentEventFilter;

    'Merge(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)'(
      _sender?: PromiseOrValue<string> | null,
      _from?: PromiseOrValue<BigNumberish> | null,
      _to?: PromiseOrValue<BigNumberish> | null,
      _amountFrom?: null,
      _amountTo?: null,
      _amountFinal?: null,
      _locktime?: null,
      _ts?: null,
    ): MergeEventFilter;
    Merge(
      _sender?: PromiseOrValue<string> | null,
      _from?: PromiseOrValue<BigNumberish> | null,
      _to?: PromiseOrValue<BigNumberish> | null,
      _amountFrom?: null,
      _amountTo?: null,
      _amountFinal?: null,
      _locktime?: null,
      _ts?: null,
    ): MergeEventFilter;

    'MetadataUpdate(uint256)'(_tokenId?: null): MetadataUpdateEventFilter;
    MetadataUpdate(_tokenId?: null): MetadataUpdateEventFilter;

    'SetAllowedManager(address)'(_allowedManager?: PromiseOrValue<string> | null): SetAllowedManagerEventFilter;
    SetAllowedManager(_allowedManager?: PromiseOrValue<string> | null): SetAllowedManagerEventFilter;

    'Split(uint256,uint256,uint256,address,uint256,uint256,uint256,uint256)'(
      _from?: PromiseOrValue<BigNumberish> | null,
      _tokenId1?: PromiseOrValue<BigNumberish> | null,
      _tokenId2?: PromiseOrValue<BigNumberish> | null,
      _sender?: null,
      _splitAmount1?: null,
      _splitAmount2?: null,
      _locktime?: null,
      _ts?: null,
    ): SplitEventFilter;
    Split(
      _from?: PromiseOrValue<BigNumberish> | null,
      _tokenId1?: PromiseOrValue<BigNumberish> | null,
      _tokenId2?: PromiseOrValue<BigNumberish> | null,
      _sender?: null,
      _splitAmount1?: null,
      _splitAmount2?: null,
      _locktime?: null,
      _ts?: null,
    ): SplitEventFilter;

    'Supply(uint256,uint256)'(prevSupply?: null, supply?: null): SupplyEventFilter;
    Supply(prevSupply?: null, supply?: null): SupplyEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
    ): TransferEventFilter;

    'UnlockPermanent(address,uint256,uint256,uint256)'(
      _owner?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      _ts?: null,
    ): UnlockPermanentEventFilter;
    UnlockPermanent(
      _owner?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      _ts?: null,
    ): UnlockPermanentEventFilter;

    'Withdraw(address,uint256,uint256,uint256)'(
      provider?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      value?: null,
      ts?: null,
    ): WithdrawEventFilter;
    Withdraw(
      provider?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      value?: null,
      ts?: null,
    ): WithdrawEventFilter;

    'WithdrawManaged(address,uint256,uint256,uint256,uint256)'(
      _owner?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _mTokenId?: PromiseOrValue<BigNumberish> | null,
      _weight?: null,
      _ts?: null,
    ): WithdrawManagedEventFilter;
    WithdrawManaged(
      _owner?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _mTokenId?: PromiseOrValue<BigNumberish> | null,
      _weight?: null,
      _ts?: null,
    ): WithdrawManagedEventFilter;
  };

  estimateGas: {
    CLOCK_MODE(overrides?: CallOverrides): Promise<BigNumber>;

    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    allowedManager(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _approved: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    artProxy(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfNFT(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfNFTAt(
      _tokenId: PromiseOrValue<BigNumberish>,
      _t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    canSplit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    checkpoint(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    checkpoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    clock(overrides?: CallOverrides): Promise<BigNumber>;

    createLock(
      _value: PromiseOrValue<BigNumberish>,
      _lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createLockFor(
      _value: PromiseOrValue<BigNumberish>,
      _lockDuration: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createManagedLockFor(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deactivated(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    delegate(
      delegator: PromiseOrValue<BigNumberish>,
      delegatee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    delegateBySig(
      delegator: PromiseOrValue<BigNumberish>,
      delegatee: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    delegates(delegator: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    depositFor(
      _tokenId: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositManaged(
      _tokenId: PromiseOrValue<BigNumberish>,
      _mTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    distributor(overrides?: CallOverrides): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    escrowType(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    factoryRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    forwarder(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getPastTotalSupply(_timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getPastVotes(
      _account: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    idToManaged(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAmount(
      _tokenId: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    increaseUnlockTime(
      _tokenId: PromiseOrValue<BigNumberish>,
      _lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isApprovedForAll(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isApprovedOrOwner(
      _spender: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lockPermanent(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    locked(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    managedToFree(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    managedToLocked(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    merge(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    numCheckpoints(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    ownerToNFTokenIdList(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    permanentLockBalance(overrides?: CallOverrides): Promise<BigNumber>;

    pointHistory(_loc: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256)'(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setAllowedManager(
      _allowedManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setApprovalForAll(
      _operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setArtProxy(
      _proxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setManagedState(
      _mTokenId: PromiseOrValue<BigNumberish>,
      _state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTeam(
      _team: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setVoterAndDistributor(
      _voter: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    slopeChanges(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    split(
      _from: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    supply(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(_interfaceID: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    team(overrides?: CallOverrides): Promise<BigNumber>;

    toggleSplit(
      _account: PromiseOrValue<string>,
      _bool: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(_timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unlockPermanent(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    userPointEpoch(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    userPointHistory(
      _tokenId: PromiseOrValue<BigNumberish>,
      _loc: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    voted(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    voter(overrides?: CallOverrides): Promise<BigNumber>;

    voting(
      _tokenId: PromiseOrValue<BigNumberish>,
      _voted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    weights(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    withdraw(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawManaged(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CLOCK_MODE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowedManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      _approved: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    artProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfNFT(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfNFTAt(
      _tokenId: PromiseOrValue<BigNumberish>,
      _t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    canSplit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkpoint(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    checkpoints(
      _tokenId: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    clock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createLock(
      _value: PromiseOrValue<BigNumberish>,
      _lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createLockFor(
      _value: PromiseOrValue<BigNumberish>,
      _lockDuration: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createManagedLockFor(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deactivated(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegate(
      delegator: PromiseOrValue<BigNumberish>,
      delegatee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    delegateBySig(
      delegator: PromiseOrValue<BigNumberish>,
      delegatee: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    delegates(delegator: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositFor(
      _tokenId: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositManaged(
      _tokenId: PromiseOrValue<BigNumberish>,
      _mTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    distributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    escrowType(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factoryRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPastTotalSupply(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPastVotes(
      _account: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    idToManaged(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAmount(
      _tokenId: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    increaseUnlockTime(
      _tokenId: PromiseOrValue<BigNumberish>,
      _lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isApprovedOrOwner(
      _spender: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockPermanent(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    locked(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managedToFree(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managedToLocked(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    merge(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numCheckpoints(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerToNFTokenIdList(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    permanentLockBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pointHistory(_loc: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256)'(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setAllowedManager(
      _allowedManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      _operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setArtProxy(
      _proxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setManagedState(
      _mTokenId: PromiseOrValue<BigNumberish>,
      _state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTeam(
      _team: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setVoterAndDistributor(
      _voter: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    slopeChanges(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    split(
      _from: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    supply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    team(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleSplit(
      _account: PromiseOrValue<string>,
      _bool: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyAt(_timestamp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unlockPermanent(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    userPointEpoch(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userPointHistory(
      _tokenId: PromiseOrValue<BigNumberish>,
      _loc: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voted(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voting(
      _tokenId: PromiseOrValue<BigNumberish>,
      _voted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    weights(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    withdraw(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawManaged(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
