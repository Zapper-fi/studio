/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface PolygonValidatorShareInterface extends utils.Interface {
  functions: {
    'activeAmount()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'buyVoucher(uint256,uint256)': FunctionFragment;
    'commissionRate_deprecated()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'delegation()': FunctionFragment;
    'drain(address,address,uint256)': FunctionFragment;
    'eventsHub()': FunctionFragment;
    'exchangeRate()': FunctionFragment;
    'getLiquidRewards(address)': FunctionFragment;
    'getRewardPerShare()': FunctionFragment;
    'getTotalStake(address)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initalRewardPerShare(address)': FunctionFragment;
    'initialize(uint256,address,address)': FunctionFragment;
    'isOwner()': FunctionFragment;
    'lastCommissionUpdate_deprecated()': FunctionFragment;
    'lock()': FunctionFragment;
    'locked()': FunctionFragment;
    'migrateIn(address,uint256)': FunctionFragment;
    'migrateOut(address,uint256)': FunctionFragment;
    'minAmount()': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'restake()': FunctionFragment;
    'rewardPerShare()': FunctionFragment;
    'sellVoucher(uint256,uint256)': FunctionFragment;
    'sellVoucher_new(uint256,uint256)': FunctionFragment;
    'slash(uint256,uint256,uint256)': FunctionFragment;
    'stakeManager()': FunctionFragment;
    'stakingLogger()': FunctionFragment;
    'totalStake_deprecated()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unbondNonces(address)': FunctionFragment;
    'unbonds(address)': FunctionFragment;
    'unbonds_new(address,uint256)': FunctionFragment;
    'unlock()': FunctionFragment;
    'unstakeClaimTokens()': FunctionFragment;
    'unstakeClaimTokens_new(uint256)': FunctionFragment;
    'updateDelegation(bool)': FunctionFragment;
    'validatorId()': FunctionFragment;
    'validatorRewards_deprecated()': FunctionFragment;
    'withdrawExchangeRate()': FunctionFragment;
    'withdrawPool()': FunctionFragment;
    'withdrawRewards()': FunctionFragment;
    'withdrawShares()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'activeAmount'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'buyVoucher'
      | 'commissionRate_deprecated'
      | 'decreaseAllowance'
      | 'delegation'
      | 'drain'
      | 'eventsHub'
      | 'exchangeRate'
      | 'getLiquidRewards'
      | 'getRewardPerShare'
      | 'getTotalStake'
      | 'increaseAllowance'
      | 'initalRewardPerShare'
      | 'initialize'
      | 'isOwner'
      | 'lastCommissionUpdate_deprecated'
      | 'lock'
      | 'locked'
      | 'migrateIn'
      | 'migrateOut'
      | 'minAmount'
      | 'owner'
      | 'renounceOwnership'
      | 'restake'
      | 'rewardPerShare'
      | 'sellVoucher'
      | 'sellVoucher_new'
      | 'slash'
      | 'stakeManager'
      | 'stakingLogger'
      | 'totalStake_deprecated'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'unbondNonces'
      | 'unbonds'
      | 'unbonds_new'
      | 'unlock'
      | 'unstakeClaimTokens'
      | 'unstakeClaimTokens_new'
      | 'updateDelegation'
      | 'validatorId'
      | 'validatorRewards_deprecated'
      | 'withdrawExchangeRate'
      | 'withdrawPool'
      | 'withdrawRewards'
      | 'withdrawShares',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'activeAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'buyVoucher', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'commissionRate_deprecated', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'delegation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'drain', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'eventsHub', values?: undefined): string;
  encodeFunctionData(functionFragment: 'exchangeRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLiquidRewards', values: [string]): string;
  encodeFunctionData(functionFragment: 'getRewardPerShare', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getTotalStake', values: [string]): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'initalRewardPerShare', values: [string]): string;
  encodeFunctionData(functionFragment: 'initialize', values: [BigNumberish, string, string]): string;
  encodeFunctionData(functionFragment: 'isOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastCommissionUpdate_deprecated', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'locked', values?: undefined): string;
  encodeFunctionData(functionFragment: 'migrateIn', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'migrateOut', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'minAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'restake', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardPerShare', values?: undefined): string;
  encodeFunctionData(functionFragment: 'sellVoucher', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'sellVoucher_new', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'slash', values: [BigNumberish, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'stakeManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stakingLogger', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalStake_deprecated', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'unbondNonces', values: [string]): string;
  encodeFunctionData(functionFragment: 'unbonds', values: [string]): string;
  encodeFunctionData(functionFragment: 'unbonds_new', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'unlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unstakeClaimTokens', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unstakeClaimTokens_new', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateDelegation', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'validatorId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'validatorRewards_deprecated', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawExchangeRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawShares', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'activeAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'buyVoucher', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'commissionRate_deprecated', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'drain', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'eventsHub', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exchangeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLiquidRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardPerShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initalRewardPerShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastCommissionUpdate_deprecated', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'locked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migrateIn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migrateOut', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'restake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardPerShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sellVoucher', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sellVoucher_new', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'slash', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakingLogger', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalStake_deprecated', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unbondNonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unbonds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unbonds_new', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstakeClaimTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstakeClaimTokens_new', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateDelegation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'validatorId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'validatorRewards_deprecated', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawExchangeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawShares', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface PolygonValidatorShare extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PolygonValidatorShareInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    buyVoucher(
      _amount: BigNumberish,
      _minSharesToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    commissionRate_deprecated(overrides?: CallOverrides): Promise<[BigNumber]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    delegation(overrides?: CallOverrides): Promise<[boolean]>;

    drain(
      token: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    eventsHub(overrides?: CallOverrides): Promise<[string]>;

    exchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLiquidRewards(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardPerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalStake(user: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initalRewardPerShare(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _validatorId: BigNumberish,
      _stakingLogger: string,
      _stakeManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    lastCommissionUpdate_deprecated(overrides?: CallOverrides): Promise<[BigNumber]>;

    lock(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    locked(overrides?: CallOverrides): Promise<[boolean]>;

    migrateIn(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    migrateOut(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    minAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    restake(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    rewardPerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellVoucher(
      claimAmount: BigNumberish,
      maximumSharesToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    sellVoucher_new(
      claimAmount: BigNumberish,
      maximumSharesToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    slash(
      validatorStake: BigNumberish,
      delegatedAmount: BigNumberish,
      totalAmountToSlash: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    stakeManager(overrides?: CallOverrides): Promise<[string]>;

    stakingLogger(overrides?: CallOverrides): Promise<[string]>;

    totalStake_deprecated(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    unbondNonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    unbonds(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { shares: BigNumber; withdrawEpoch: BigNumber }>;

    unbonds_new(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { shares: BigNumber; withdrawEpoch: BigNumber }>;

    unlock(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    unstakeClaimTokens(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    unstakeClaimTokens_new(
      unbondNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateDelegation(
      _delegation: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    validatorId(overrides?: CallOverrides): Promise<[BigNumber]>;

    validatorRewards_deprecated(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawExchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    withdrawShares(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  activeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  buyVoucher(
    _amount: BigNumberish,
    _minSharesToMint: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  commissionRate_deprecated(overrides?: CallOverrides): Promise<BigNumber>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  delegation(overrides?: CallOverrides): Promise<boolean>;

  drain(
    token: string,
    destination: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  eventsHub(overrides?: CallOverrides): Promise<string>;

  exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  getLiquidRewards(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getRewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalStake(user: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initalRewardPerShare(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _validatorId: BigNumberish,
    _stakingLogger: string,
    _stakeManager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  lastCommissionUpdate_deprecated(overrides?: CallOverrides): Promise<BigNumber>;

  lock(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  locked(overrides?: CallOverrides): Promise<boolean>;

  migrateIn(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  migrateOut(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  minAmount(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  restake(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  rewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  sellVoucher(
    claimAmount: BigNumberish,
    maximumSharesToBurn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  sellVoucher_new(
    claimAmount: BigNumberish,
    maximumSharesToBurn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  slash(
    validatorStake: BigNumberish,
    delegatedAmount: BigNumberish,
    totalAmountToSlash: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  stakeManager(overrides?: CallOverrides): Promise<string>;

  stakingLogger(overrides?: CallOverrides): Promise<string>;

  totalStake_deprecated(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  unbondNonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  unbonds(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { shares: BigNumber; withdrawEpoch: BigNumber }>;

  unbonds_new(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { shares: BigNumber; withdrawEpoch: BigNumber }>;

  unlock(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  unstakeClaimTokens(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  unstakeClaimTokens_new(
    unbondNonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateDelegation(
    _delegation: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  validatorId(overrides?: CallOverrides): Promise<BigNumber>;

  validatorRewards_deprecated(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawPool(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  withdrawShares(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    activeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyVoucher(_amount: BigNumberish, _minSharesToMint: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    commissionRate_deprecated(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    delegation(overrides?: CallOverrides): Promise<boolean>;

    drain(token: string, destination: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    eventsHub(overrides?: CallOverrides): Promise<string>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidRewards(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalStake(user: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    initalRewardPerShare(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _validatorId: BigNumberish,
      _stakingLogger: string,
      _stakeManager: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    lastCommissionUpdate_deprecated(overrides?: CallOverrides): Promise<BigNumber>;

    lock(overrides?: CallOverrides): Promise<void>;

    locked(overrides?: CallOverrides): Promise<boolean>;

    migrateIn(user: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    migrateOut(user: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    minAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    restake(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    rewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    sellVoucher(claimAmount: BigNumberish, maximumSharesToBurn: BigNumberish, overrides?: CallOverrides): Promise<void>;

    sellVoucher_new(
      claimAmount: BigNumberish,
      maximumSharesToBurn: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    slash(
      validatorStake: BigNumberish,
      delegatedAmount: BigNumberish,
      totalAmountToSlash: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    stakeManager(overrides?: CallOverrides): Promise<string>;

    stakingLogger(overrides?: CallOverrides): Promise<string>;

    totalStake_deprecated(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(to: string, value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(from: string, to: string, value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    unbondNonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    unbonds(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { shares: BigNumber; withdrawEpoch: BigNumber }>;

    unbonds_new(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { shares: BigNumber; withdrawEpoch: BigNumber }>;

    unlock(overrides?: CallOverrides): Promise<void>;

    unstakeClaimTokens(overrides?: CallOverrides): Promise<void>;

    unstakeClaimTokens_new(unbondNonce: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateDelegation(_delegation: boolean, overrides?: CallOverrides): Promise<void>;

    validatorId(overrides?: CallOverrides): Promise<BigNumber>;

    validatorRewards_deprecated(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawPool(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawRewards(overrides?: CallOverrides): Promise<void>;

    withdrawShares(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
  };

  estimateGas: {
    activeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyVoucher(
      _amount: BigNumberish,
      _minSharesToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    commissionRate_deprecated(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    delegation(overrides?: CallOverrides): Promise<BigNumber>;

    drain(
      token: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    eventsHub(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidRewards(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalStake(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initalRewardPerShare(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _validatorId: BigNumberish,
      _stakingLogger: string,
      _stakeManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    lastCommissionUpdate_deprecated(overrides?: CallOverrides): Promise<BigNumber>;

    lock(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    locked(overrides?: CallOverrides): Promise<BigNumber>;

    migrateIn(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    migrateOut(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    minAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    restake(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    rewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    sellVoucher(
      claimAmount: BigNumberish,
      maximumSharesToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    sellVoucher_new(
      claimAmount: BigNumberish,
      maximumSharesToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    slash(
      validatorStake: BigNumberish,
      delegatedAmount: BigNumberish,
      totalAmountToSlash: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    stakeManager(overrides?: CallOverrides): Promise<BigNumber>;

    stakingLogger(overrides?: CallOverrides): Promise<BigNumber>;

    totalStake_deprecated(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    unbondNonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    unbonds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    unbonds_new(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    unlock(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    unstakeClaimTokens(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    unstakeClaimTokens_new(
      unbondNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateDelegation(
      _delegation: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    validatorId(overrides?: CallOverrides): Promise<BigNumber>;

    validatorRewards_deprecated(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawPool(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdrawShares(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyVoucher(
      _amount: BigNumberish,
      _minSharesToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    commissionRate_deprecated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    delegation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    drain(
      token: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    eventsHub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidRewards(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardPerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalStake(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initalRewardPerShare(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _validatorId: BigNumberish,
      _stakingLogger: string,
      _stakeManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastCommissionUpdate_deprecated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lock(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    locked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateIn(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    migrateOut(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    minAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    restake(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    rewardPerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellVoucher(
      claimAmount: BigNumberish,
      maximumSharesToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    sellVoucher_new(
      claimAmount: BigNumberish,
      maximumSharesToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    slash(
      validatorStake: BigNumberish,
      delegatedAmount: BigNumberish,
      totalAmountToSlash: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    stakeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingLogger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStake_deprecated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    unbondNonces(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unbonds(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unbonds_new(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlock(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    unstakeClaimTokens(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    unstakeClaimTokens_new(
      unbondNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateDelegation(
      _delegation: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    validatorId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validatorRewards_deprecated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawExchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    withdrawShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
