/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface SolidLizardRewardsInterface extends utils.Interface {
  functions: {
    'adjustToDistribute(uint256,uint256,uint256,uint256)': FunctionFragment;
    'adjustVeSupply(uint256,uint256,int128,int128)': FunctionFragment;
    'checkpointToken()': FunctionFragment;
    'checkpointTotalSupply()': FunctionFragment;
    'claim(uint256)': FunctionFragment;
    'claimMany(uint256[])': FunctionFragment;
    'claimable(uint256)': FunctionFragment;
    'depositor()': FunctionFragment;
    'findTimestampUserEpoch(address,uint256,uint256,uint256)': FunctionFragment;
    'lastTokenTime()': FunctionFragment;
    'setDepositor(address)': FunctionFragment;
    'startTime()': FunctionFragment;
    'timeCursor()': FunctionFragment;
    'timeCursorOf(uint256)': FunctionFragment;
    'timestamp()': FunctionFragment;
    'token()': FunctionFragment;
    'tokenLastBalance()': FunctionFragment;
    'tokensPerWeek(uint256)': FunctionFragment;
    'userEpochOf(uint256)': FunctionFragment;
    'veForAt(uint256,uint256)': FunctionFragment;
    'veSupply(uint256)': FunctionFragment;
    'votingEscrow()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'adjustToDistribute'
      | 'adjustVeSupply'
      | 'checkpointToken'
      | 'checkpointTotalSupply'
      | 'claim'
      | 'claimMany'
      | 'claimable'
      | 'depositor'
      | 'findTimestampUserEpoch'
      | 'lastTokenTime'
      | 'setDepositor'
      | 'startTime'
      | 'timeCursor'
      | 'timeCursorOf'
      | 'timestamp'
      | 'token'
      | 'tokenLastBalance'
      | 'tokensPerWeek'
      | 'userEpochOf'
      | 'veForAt'
      | 'veSupply'
      | 'votingEscrow',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'adjustToDistribute',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'adjustVeSupply',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'checkpointToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'checkpointTotalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claim', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'claimMany', values: [PromiseOrValue<BigNumberish>[]]): string;
  encodeFunctionData(functionFragment: 'claimable', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'depositor', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'findTimestampUserEpoch',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'lastTokenTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setDepositor', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'startTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'timeCursor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'timeCursorOf', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'timestamp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenLastBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokensPerWeek', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'userEpochOf', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'veForAt',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'veSupply', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'votingEscrow', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'adjustToDistribute', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adjustVeSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkpointToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkpointTotalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimMany', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'findTimestampUserEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastTokenTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDepositor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timeCursor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timeCursorOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenLastBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokensPerWeek', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userEpochOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'veForAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'veSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'votingEscrow', data: BytesLike): Result;

  events: {
    'CheckpointToken(uint256,uint256)': EventFragment;
    'Claimed(uint256,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CheckpointToken'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Claimed'): EventFragment;
}

export interface CheckpointTokenEventObject {
  time: BigNumber;
  tokens: BigNumber;
}
export type CheckpointTokenEvent = TypedEvent<[BigNumber, BigNumber], CheckpointTokenEventObject>;

export type CheckpointTokenEventFilter = TypedEventFilter<CheckpointTokenEvent>;

export interface ClaimedEventObject {
  tokenId: BigNumber;
  amount: BigNumber;
  claimEpoch: BigNumber;
  maxEpoch: BigNumber;
}
export type ClaimedEvent = TypedEvent<[BigNumber, BigNumber, BigNumber, BigNumber], ClaimedEventObject>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface SolidLizardRewards extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SolidLizardRewardsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adjustToDistribute(
      toDistribute: PromiseOrValue<BigNumberish>,
      t0: PromiseOrValue<BigNumberish>,
      t1: PromiseOrValue<BigNumberish>,
      sinceLastCall: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    adjustVeSupply(
      t: PromiseOrValue<BigNumberish>,
      ptTs: PromiseOrValue<BigNumberish>,
      ptBias: PromiseOrValue<BigNumberish>,
      ptSlope: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    checkpointToken(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    checkpointTotalSupply(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    claim(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimMany(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimable(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    depositor(overrides?: CallOverrides): Promise<[string]>;

    findTimestampUserEpoch(
      ve: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      maxUserEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    lastTokenTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    setDepositor(
      _depositor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    timeCursor(overrides?: CallOverrides): Promise<[BigNumber]>;

    timeCursorOf(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    timestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenLastBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensPerWeek(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    userEpochOf(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    veForAt(
      _tokenId: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    veSupply(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    votingEscrow(overrides?: CallOverrides): Promise<[string]>;
  };

  adjustToDistribute(
    toDistribute: PromiseOrValue<BigNumberish>,
    t0: PromiseOrValue<BigNumberish>,
    t1: PromiseOrValue<BigNumberish>,
    sinceLastCall: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  adjustVeSupply(
    t: PromiseOrValue<BigNumberish>,
    ptTs: PromiseOrValue<BigNumberish>,
    ptBias: PromiseOrValue<BigNumberish>,
    ptSlope: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  checkpointToken(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  checkpointTotalSupply(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  claim(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimMany(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimable(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  depositor(overrides?: CallOverrides): Promise<string>;

  findTimestampUserEpoch(
    ve: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    _timestamp: PromiseOrValue<BigNumberish>,
    maxUserEpoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  lastTokenTime(overrides?: CallOverrides): Promise<BigNumber>;

  setDepositor(
    _depositor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  timeCursor(overrides?: CallOverrides): Promise<BigNumber>;

  timeCursorOf(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  timestamp(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenLastBalance(overrides?: CallOverrides): Promise<BigNumber>;

  tokensPerWeek(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  userEpochOf(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  veForAt(
    _tokenId: PromiseOrValue<BigNumberish>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  veSupply(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  votingEscrow(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    adjustToDistribute(
      toDistribute: PromiseOrValue<BigNumberish>,
      t0: PromiseOrValue<BigNumberish>,
      t1: PromiseOrValue<BigNumberish>,
      sinceLastCall: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    adjustVeSupply(
      t: PromiseOrValue<BigNumberish>,
      ptTs: PromiseOrValue<BigNumberish>,
      ptBias: PromiseOrValue<BigNumberish>,
      ptSlope: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    checkpointToken(overrides?: CallOverrides): Promise<void>;

    checkpointTotalSupply(overrides?: CallOverrides): Promise<void>;

    claim(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    claimMany(_tokenIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<boolean>;

    claimable(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    depositor(overrides?: CallOverrides): Promise<string>;

    findTimestampUserEpoch(
      ve: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      maxUserEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lastTokenTime(overrides?: CallOverrides): Promise<BigNumber>;

    setDepositor(_depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    timeCursor(overrides?: CallOverrides): Promise<BigNumber>;

    timeCursorOf(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenLastBalance(overrides?: CallOverrides): Promise<BigNumber>;

    tokensPerWeek(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    userEpochOf(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    veForAt(
      _tokenId: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    veSupply(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    votingEscrow(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'CheckpointToken(uint256,uint256)'(time?: null, tokens?: null): CheckpointTokenEventFilter;
    CheckpointToken(time?: null, tokens?: null): CheckpointTokenEventFilter;

    'Claimed(uint256,uint256,uint256,uint256)'(
      tokenId?: null,
      amount?: null,
      claimEpoch?: null,
      maxEpoch?: null,
    ): ClaimedEventFilter;
    Claimed(tokenId?: null, amount?: null, claimEpoch?: null, maxEpoch?: null): ClaimedEventFilter;
  };

  estimateGas: {
    adjustToDistribute(
      toDistribute: PromiseOrValue<BigNumberish>,
      t0: PromiseOrValue<BigNumberish>,
      t1: PromiseOrValue<BigNumberish>,
      sinceLastCall: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    adjustVeSupply(
      t: PromiseOrValue<BigNumberish>,
      ptTs: PromiseOrValue<BigNumberish>,
      ptBias: PromiseOrValue<BigNumberish>,
      ptSlope: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    checkpointToken(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    checkpointTotalSupply(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    claim(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimMany(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimable(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    depositor(overrides?: CallOverrides): Promise<BigNumber>;

    findTimestampUserEpoch(
      ve: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      maxUserEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lastTokenTime(overrides?: CallOverrides): Promise<BigNumber>;

    setDepositor(
      _depositor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    timeCursor(overrides?: CallOverrides): Promise<BigNumber>;

    timeCursorOf(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenLastBalance(overrides?: CallOverrides): Promise<BigNumber>;

    tokensPerWeek(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    userEpochOf(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    veForAt(
      _tokenId: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    veSupply(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    votingEscrow(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    adjustToDistribute(
      toDistribute: PromiseOrValue<BigNumberish>,
      t0: PromiseOrValue<BigNumberish>,
      t1: PromiseOrValue<BigNumberish>,
      sinceLastCall: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    adjustVeSupply(
      t: PromiseOrValue<BigNumberish>,
      ptTs: PromiseOrValue<BigNumberish>,
      ptBias: PromiseOrValue<BigNumberish>,
      ptSlope: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    checkpointToken(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    checkpointTotalSupply(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    claim(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimMany(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimable(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    findTimestampUserEpoch(
      ve: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      maxUserEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lastTokenTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDepositor(
      _depositor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeCursor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeCursorOf(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenLastBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensPerWeek(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userEpochOf(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    veForAt(
      _tokenId: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    veSupply(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingEscrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
