/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface JpegdBondDepositoryInterface extends utils.Interface {
  functions: {
    'adjustment()': FunctionFragment;
    'bondInfo(address)': FunctionFragment;
    'bondPrice()': FunctionFragment;
    'changeOlympusTreasury(address)': FunctionFragment;
    'currentDebt()': FunctionFragment;
    'currentOlympusFee()': FunctionFragment;
    'debtDecay()': FunctionFragment;
    'debtRatio()': FunctionFragment;
    'deposit(uint256,uint256,address)': FunctionFragment;
    'initializeBond(uint256,uint256,uint256,uint256,uint256,uint256)': FunctionFragment;
    'lastDecay()': FunctionFragment;
    'maxPayout()': FunctionFragment;
    'paySubsidy()': FunctionFragment;
    'payoutFor(uint256)': FunctionFragment;
    'pendingPayoutFor(address)': FunctionFragment;
    'percentVestedFor(address)': FunctionFragment;
    'policy()': FunctionFragment;
    'redeem(address)': FunctionFragment;
    'setAdjustment(bool,uint256,uint256,uint256)': FunctionFragment;
    'setBondTerms(uint8,uint256)': FunctionFragment;
    'terms()': FunctionFragment;
    'totalDebt()': FunctionFragment;
    'totalPayoutGiven()': FunctionFragment;
    'totalPrincipalBonded()': FunctionFragment;
    'transferManagment(address)': FunctionFragment;
    'trueBondPrice()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'adjustment'
      | 'bondInfo'
      | 'bondPrice'
      | 'changeOlympusTreasury'
      | 'currentDebt'
      | 'currentOlympusFee'
      | 'debtDecay'
      | 'debtRatio'
      | 'deposit'
      | 'initializeBond'
      | 'lastDecay'
      | 'maxPayout'
      | 'paySubsidy'
      | 'payoutFor'
      | 'pendingPayoutFor'
      | 'percentVestedFor'
      | 'policy'
      | 'redeem'
      | 'setAdjustment'
      | 'setBondTerms'
      | 'terms'
      | 'totalDebt'
      | 'totalPayoutGiven'
      | 'totalPrincipalBonded'
      | 'transferManagment'
      | 'trueBondPrice',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'adjustment', values?: undefined): string;
  encodeFunctionData(functionFragment: 'bondInfo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'bondPrice', values?: undefined): string;
  encodeFunctionData(functionFragment: 'changeOlympusTreasury', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'currentDebt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'currentOlympusFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'debtDecay', values?: undefined): string;
  encodeFunctionData(functionFragment: 'debtRatio', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'initializeBond',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'lastDecay', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxPayout', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paySubsidy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'payoutFor', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'pendingPayoutFor', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'percentVestedFor', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'policy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'redeem', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setAdjustment',
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'setBondTerms',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'terms', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalDebt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalPayoutGiven', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalPrincipalBonded', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferManagment', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'trueBondPrice', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'adjustment', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bondInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bondPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeOlympusTreasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentOlympusFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'debtDecay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'debtRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initializeBond', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastDecay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxPayout', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paySubsidy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'payoutFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingPayoutFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'percentVestedFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'policy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAdjustment', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBondTerms', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'terms', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalPayoutGiven', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalPrincipalBonded', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferManagment', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'trueBondPrice', data: BytesLike): Result;

  events: {
    'BondCreated(uint256,uint256,uint256)': EventFragment;
    'BondPriceChanged(uint256,uint256)': EventFragment;
    'BondRedeemed(address,uint256,uint256)': EventFragment;
    'ControlVariableAdjustment(uint256,uint256,uint256,bool)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'BondCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BondPriceChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BondRedeemed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ControlVariableAdjustment'): EventFragment;
}

export interface BondCreatedEventObject {
  deposit: BigNumber;
  payout: BigNumber;
  expires: BigNumber;
}
export type BondCreatedEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], BondCreatedEventObject>;

export type BondCreatedEventFilter = TypedEventFilter<BondCreatedEvent>;

export interface BondPriceChangedEventObject {
  internalPrice: BigNumber;
  debtRatio: BigNumber;
}
export type BondPriceChangedEvent = TypedEvent<[BigNumber, BigNumber], BondPriceChangedEventObject>;

export type BondPriceChangedEventFilter = TypedEventFilter<BondPriceChangedEvent>;

export interface BondRedeemedEventObject {
  recipient: string;
  payout: BigNumber;
  remaining: BigNumber;
}
export type BondRedeemedEvent = TypedEvent<[string, BigNumber, BigNumber], BondRedeemedEventObject>;

export type BondRedeemedEventFilter = TypedEventFilter<BondRedeemedEvent>;

export interface ControlVariableAdjustmentEventObject {
  initialBCV: BigNumber;
  newBCV: BigNumber;
  adjustment: BigNumber;
  addition: boolean;
}
export type ControlVariableAdjustmentEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, boolean],
  ControlVariableAdjustmentEventObject
>;

export type ControlVariableAdjustmentEventFilter = TypedEventFilter<ControlVariableAdjustmentEvent>;

export interface JpegdBondDepository extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JpegdBondDepositoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adjustment(overrides?: CallOverrides): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        add: boolean;
        rate: BigNumber;
        target: BigNumber;
        buffer: BigNumber;
        lastBlock: BigNumber;
      }
    >;

    bondInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        payout: BigNumber;
        vesting: BigNumber;
        lastBlock: BigNumber;
        truePricePaid: BigNumber;
      }
    >;

    bondPrice(overrides?: CallOverrides): Promise<[BigNumber] & { price_: BigNumber }>;

    changeOlympusTreasury(
      _olympusTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    currentDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentOlympusFee(overrides?: CallOverrides): Promise<[BigNumber] & { currentFee_: BigNumber }>;

    debtDecay(overrides?: CallOverrides): Promise<[BigNumber] & { decay_: BigNumber }>;

    debtRatio(overrides?: CallOverrides): Promise<[BigNumber] & { debtRatio_: BigNumber }>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      _maxPrice: PromiseOrValue<BigNumberish>,
      _depositor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initializeBond(
      _controlVariable: PromiseOrValue<BigNumberish>,
      _vestingTerm: PromiseOrValue<BigNumberish>,
      _minimumPrice: PromiseOrValue<BigNumberish>,
      _maxPayout: PromiseOrValue<BigNumberish>,
      _maxDebt: PromiseOrValue<BigNumberish>,
      _initialDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    lastDecay(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxPayout(overrides?: CallOverrides): Promise<[BigNumber]>;

    paySubsidy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    payoutFor(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { _payout: BigNumber; _fee: BigNumber }>;

    pendingPayoutFor(
      _depositor: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { pendingPayout_: BigNumber }>;

    percentVestedFor(
      _depositor: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { percentVested_: BigNumber }>;

    policy(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      _depositor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setAdjustment(
      _addition: PromiseOrValue<boolean>,
      _increment: PromiseOrValue<BigNumberish>,
      _target: PromiseOrValue<BigNumberish>,
      _buffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setBondTerms(
      _parameter: PromiseOrValue<BigNumberish>,
      _input: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    terms(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        controlVariable: BigNumber;
        vestingTerm: BigNumber;
        minimumPrice: BigNumber;
        maxPayout: BigNumber;
        maxDebt: BigNumber;
      }
    >;

    totalDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPayoutGiven(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPrincipalBonded(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferManagment(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    trueBondPrice(overrides?: CallOverrides): Promise<[BigNumber] & { price_: BigNumber }>;
  };

  adjustment(overrides?: CallOverrides): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
      add: boolean;
      rate: BigNumber;
      target: BigNumber;
      buffer: BigNumber;
      lastBlock: BigNumber;
    }
  >;

  bondInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      payout: BigNumber;
      vesting: BigNumber;
      lastBlock: BigNumber;
      truePricePaid: BigNumber;
    }
  >;

  bondPrice(overrides?: CallOverrides): Promise<BigNumber>;

  changeOlympusTreasury(
    _olympusTreasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  currentDebt(overrides?: CallOverrides): Promise<BigNumber>;

  currentOlympusFee(overrides?: CallOverrides): Promise<BigNumber>;

  debtDecay(overrides?: CallOverrides): Promise<BigNumber>;

  debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _amount: PromiseOrValue<BigNumberish>,
    _maxPrice: PromiseOrValue<BigNumberish>,
    _depositor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initializeBond(
    _controlVariable: PromiseOrValue<BigNumberish>,
    _vestingTerm: PromiseOrValue<BigNumberish>,
    _minimumPrice: PromiseOrValue<BigNumberish>,
    _maxPayout: PromiseOrValue<BigNumberish>,
    _maxDebt: PromiseOrValue<BigNumberish>,
    _initialDebt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  lastDecay(overrides?: CallOverrides): Promise<BigNumber>;

  maxPayout(overrides?: CallOverrides): Promise<BigNumber>;

  paySubsidy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  payoutFor(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { _payout: BigNumber; _fee: BigNumber }>;

  pendingPayoutFor(_depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  percentVestedFor(_depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  policy(overrides?: CallOverrides): Promise<string>;

  redeem(
    _depositor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setAdjustment(
    _addition: PromiseOrValue<boolean>,
    _increment: PromiseOrValue<BigNumberish>,
    _target: PromiseOrValue<BigNumberish>,
    _buffer: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setBondTerms(
    _parameter: PromiseOrValue<BigNumberish>,
    _input: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  terms(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      controlVariable: BigNumber;
      vestingTerm: BigNumber;
      minimumPrice: BigNumber;
      maxPayout: BigNumber;
      maxDebt: BigNumber;
    }
  >;

  totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

  totalPayoutGiven(overrides?: CallOverrides): Promise<BigNumber>;

  totalPrincipalBonded(overrides?: CallOverrides): Promise<BigNumber>;

  transferManagment(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  trueBondPrice(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    adjustment(overrides?: CallOverrides): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        add: boolean;
        rate: BigNumber;
        target: BigNumber;
        buffer: BigNumber;
        lastBlock: BigNumber;
      }
    >;

    bondInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        payout: BigNumber;
        vesting: BigNumber;
        lastBlock: BigNumber;
        truePricePaid: BigNumber;
      }
    >;

    bondPrice(overrides?: CallOverrides): Promise<BigNumber>;

    changeOlympusTreasury(_olympusTreasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    currentDebt(overrides?: CallOverrides): Promise<BigNumber>;

    currentOlympusFee(overrides?: CallOverrides): Promise<BigNumber>;

    debtDecay(overrides?: CallOverrides): Promise<BigNumber>;

    debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      _maxPrice: PromiseOrValue<BigNumberish>,
      _depositor: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initializeBond(
      _controlVariable: PromiseOrValue<BigNumberish>,
      _vestingTerm: PromiseOrValue<BigNumberish>,
      _minimumPrice: PromiseOrValue<BigNumberish>,
      _maxPayout: PromiseOrValue<BigNumberish>,
      _maxDebt: PromiseOrValue<BigNumberish>,
      _initialDebt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    lastDecay(overrides?: CallOverrides): Promise<BigNumber>;

    maxPayout(overrides?: CallOverrides): Promise<BigNumber>;

    paySubsidy(overrides?: CallOverrides): Promise<BigNumber>;

    payoutFor(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { _payout: BigNumber; _fee: BigNumber }>;

    pendingPayoutFor(_depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    percentVestedFor(_depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    policy(overrides?: CallOverrides): Promise<string>;

    redeem(_depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    setAdjustment(
      _addition: PromiseOrValue<boolean>,
      _increment: PromiseOrValue<BigNumberish>,
      _target: PromiseOrValue<BigNumberish>,
      _buffer: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setBondTerms(
      _parameter: PromiseOrValue<BigNumberish>,
      _input: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    terms(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        controlVariable: BigNumber;
        vestingTerm: BigNumber;
        minimumPrice: BigNumber;
        maxPayout: BigNumber;
        maxDebt: BigNumber;
      }
    >;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    totalPayoutGiven(overrides?: CallOverrides): Promise<BigNumber>;

    totalPrincipalBonded(overrides?: CallOverrides): Promise<BigNumber>;

    transferManagment(_newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    trueBondPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'BondCreated(uint256,uint256,uint256)'(deposit?: null, payout?: null, expires?: null): BondCreatedEventFilter;
    BondCreated(deposit?: null, payout?: null, expires?: null): BondCreatedEventFilter;

    'BondPriceChanged(uint256,uint256)'(internalPrice?: null, debtRatio?: null): BondPriceChangedEventFilter;
    BondPriceChanged(internalPrice?: null, debtRatio?: null): BondPriceChangedEventFilter;

    'BondRedeemed(address,uint256,uint256)'(recipient?: null, payout?: null, remaining?: null): BondRedeemedEventFilter;
    BondRedeemed(recipient?: null, payout?: null, remaining?: null): BondRedeemedEventFilter;

    'ControlVariableAdjustment(uint256,uint256,uint256,bool)'(
      initialBCV?: null,
      newBCV?: null,
      adjustment?: null,
      addition?: null,
    ): ControlVariableAdjustmentEventFilter;
    ControlVariableAdjustment(
      initialBCV?: null,
      newBCV?: null,
      adjustment?: null,
      addition?: null,
    ): ControlVariableAdjustmentEventFilter;
  };

  estimateGas: {
    adjustment(overrides?: CallOverrides): Promise<BigNumber>;

    bondInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    bondPrice(overrides?: CallOverrides): Promise<BigNumber>;

    changeOlympusTreasury(
      _olympusTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    currentDebt(overrides?: CallOverrides): Promise<BigNumber>;

    currentOlympusFee(overrides?: CallOverrides): Promise<BigNumber>;

    debtDecay(overrides?: CallOverrides): Promise<BigNumber>;

    debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      _maxPrice: PromiseOrValue<BigNumberish>,
      _depositor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initializeBond(
      _controlVariable: PromiseOrValue<BigNumberish>,
      _vestingTerm: PromiseOrValue<BigNumberish>,
      _minimumPrice: PromiseOrValue<BigNumberish>,
      _maxPayout: PromiseOrValue<BigNumberish>,
      _maxDebt: PromiseOrValue<BigNumberish>,
      _initialDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    lastDecay(overrides?: CallOverrides): Promise<BigNumber>;

    maxPayout(overrides?: CallOverrides): Promise<BigNumber>;

    paySubsidy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    payoutFor(_value: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    pendingPayoutFor(_depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    percentVestedFor(_depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    policy(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      _depositor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setAdjustment(
      _addition: PromiseOrValue<boolean>,
      _increment: PromiseOrValue<BigNumberish>,
      _target: PromiseOrValue<BigNumberish>,
      _buffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setBondTerms(
      _parameter: PromiseOrValue<BigNumberish>,
      _input: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    terms(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    totalPayoutGiven(overrides?: CallOverrides): Promise<BigNumber>;

    totalPrincipalBonded(overrides?: CallOverrides): Promise<BigNumber>;

    transferManagment(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    trueBondPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    adjustment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondInfo(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeOlympusTreasury(
      _olympusTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    currentDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentOlympusFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtDecay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      _maxPrice: PromiseOrValue<BigNumberish>,
      _depositor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initializeBond(
      _controlVariable: PromiseOrValue<BigNumberish>,
      _vestingTerm: PromiseOrValue<BigNumberish>,
      _minimumPrice: PromiseOrValue<BigNumberish>,
      _maxPayout: PromiseOrValue<BigNumberish>,
      _maxDebt: PromiseOrValue<BigNumberish>,
      _initialDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    lastDecay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxPayout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paySubsidy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    payoutFor(_value: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingPayoutFor(_depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    percentVestedFor(_depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    policy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      _depositor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setAdjustment(
      _addition: PromiseOrValue<boolean>,
      _increment: PromiseOrValue<BigNumberish>,
      _target: PromiseOrValue<BigNumberish>,
      _buffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setBondTerms(
      _parameter: PromiseOrValue<BigNumberish>,
      _input: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    terms(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPayoutGiven(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPrincipalBonded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferManagment(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    trueBondPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
