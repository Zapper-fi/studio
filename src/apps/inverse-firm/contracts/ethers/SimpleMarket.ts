/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface SimpleMarketInterface extends utils.Interface {
  functions: {
    'DOMAIN_SEPARATOR()': FunctionFragment;
    'borrow(uint256)': FunctionFragment;
    'borrowController()': FunctionFragment;
    'borrowOnBehalf(address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'borrowPaused()': FunctionFragment;
    'collateral()': FunctionFragment;
    'collateralFactorBps()': FunctionFragment;
    'dbr()': FunctionFragment;
    'debts(address)': FunctionFragment;
    'deposit(address,uint256)': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'depositAndBorrow(uint256,uint256)': FunctionFragment;
    'dola()': FunctionFragment;
    'escrowImplementation()': FunctionFragment;
    'escrows(address)': FunctionFragment;
    'forceReplenish(address,uint256)': FunctionFragment;
    'forceReplenishAll(address)': FunctionFragment;
    'getCollateralValue(address)': FunctionFragment;
    'getCreditLimit(address)': FunctionFragment;
    'getWithdrawalLimit(address)': FunctionFragment;
    'gov()': FunctionFragment;
    'invalidateNonce()': FunctionFragment;
    'lender()': FunctionFragment;
    'liquidate(address,uint256)': FunctionFragment;
    'liquidationFactorBps()': FunctionFragment;
    'liquidationFeeBps()': FunctionFragment;
    'liquidationIncentiveBps()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'oracle()': FunctionFragment;
    'pauseBorrows(bool)': FunctionFragment;
    'pauseGuardian()': FunctionFragment;
    'predictEscrow(address)': FunctionFragment;
    'recall(uint256)': FunctionFragment;
    'repay(address,uint256)': FunctionFragment;
    'repayAndWithdraw(uint256,uint256)': FunctionFragment;
    'replenishmentIncentiveBps()': FunctionFragment;
    'setBorrowController(address)': FunctionFragment;
    'setCollateralFactorBps(uint256)': FunctionFragment;
    'setGov(address)': FunctionFragment;
    'setLender(address)': FunctionFragment;
    'setLiquidationFactorBps(uint256)': FunctionFragment;
    'setLiquidationFeeBps(uint256)': FunctionFragment;
    'setLiquidationIncentiveBps(uint256)': FunctionFragment;
    'setOracle(address)': FunctionFragment;
    'setPauseGuardian(address)': FunctionFragment;
    'setReplenismentIncentiveBps(uint256)': FunctionFragment;
    'totalDebt()': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdrawOnBehalf(address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DOMAIN_SEPARATOR'
      | 'borrow'
      | 'borrowController'
      | 'borrowOnBehalf'
      | 'borrowPaused'
      | 'collateral'
      | 'collateralFactorBps'
      | 'dbr'
      | 'debts'
      | 'deposit(address,uint256)'
      | 'deposit(uint256)'
      | 'depositAndBorrow'
      | 'dola'
      | 'escrowImplementation'
      | 'escrows'
      | 'forceReplenish'
      | 'forceReplenishAll'
      | 'getCollateralValue'
      | 'getCreditLimit'
      | 'getWithdrawalLimit'
      | 'gov'
      | 'invalidateNonce'
      | 'lender'
      | 'liquidate'
      | 'liquidationFactorBps'
      | 'liquidationFeeBps'
      | 'liquidationIncentiveBps'
      | 'nonces'
      | 'oracle'
      | 'pauseBorrows'
      | 'pauseGuardian'
      | 'predictEscrow'
      | 'recall'
      | 'repay'
      | 'repayAndWithdraw'
      | 'replenishmentIncentiveBps'
      | 'setBorrowController'
      | 'setCollateralFactorBps'
      | 'setGov'
      | 'setLender'
      | 'setLiquidationFactorBps'
      | 'setLiquidationFeeBps'
      | 'setLiquidationIncentiveBps'
      | 'setOracle'
      | 'setPauseGuardian'
      | 'setReplenismentIncentiveBps'
      | 'totalDebt'
      | 'withdraw'
      | 'withdrawOnBehalf',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'borrow', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'borrowController', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'borrowOnBehalf',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'borrowPaused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'collateral', values?: undefined): string;
  encodeFunctionData(functionFragment: 'collateralFactorBps', values?: undefined): string;
  encodeFunctionData(functionFragment: 'dbr', values?: undefined): string;
  encodeFunctionData(functionFragment: 'debts', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'deposit(address,uint256)',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'deposit(uint256)', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'depositAndBorrow',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'dola', values?: undefined): string;
  encodeFunctionData(functionFragment: 'escrowImplementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'escrows', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'forceReplenish',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'forceReplenishAll', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getCollateralValue', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getCreditLimit', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getWithdrawalLimit', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'gov', values?: undefined): string;
  encodeFunctionData(functionFragment: 'invalidateNonce', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lender', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'liquidate',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'liquidationFactorBps', values?: undefined): string;
  encodeFunctionData(functionFragment: 'liquidationFeeBps', values?: undefined): string;
  encodeFunctionData(functionFragment: 'liquidationIncentiveBps', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'oracle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pauseBorrows', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'pauseGuardian', values?: undefined): string;
  encodeFunctionData(functionFragment: 'predictEscrow', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'recall', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'repay', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'repayAndWithdraw',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'replenishmentIncentiveBps', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setBorrowController', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setCollateralFactorBps', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setGov', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setLender', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setLiquidationFactorBps', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setLiquidationFeeBps', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setLiquidationIncentiveBps', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setOracle', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setPauseGuardian', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setReplenismentIncentiveBps', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'totalDebt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'withdrawOnBehalf',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;

  decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowOnBehalf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateralFactorBps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dbr', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'debts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit(address,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit(uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositAndBorrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dola', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'escrowImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'escrows', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'forceReplenish', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'forceReplenishAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCollateralValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCreditLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getWithdrawalLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gov', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'invalidateNonce', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lender', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidationFactorBps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidationFeeBps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidationIncentiveBps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'oracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pauseBorrows', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pauseGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'predictEscrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayAndWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'replenishmentIncentiveBps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBorrowController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCollateralFactorBps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGov', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLender', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLiquidationFactorBps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLiquidationFeeBps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLiquidationIncentiveBps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPauseGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setReplenismentIncentiveBps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawOnBehalf', data: BytesLike): Result;

  events: {
    'Borrow(address,uint256)': EventFragment;
    'CreateEscrow(address,address)': EventFragment;
    'Deposit(address,uint256)': EventFragment;
    'Liquidate(address,address,uint256,uint256)': EventFragment;
    'Repay(address,address,uint256)': EventFragment;
    'Withdraw(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Borrow'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreateEscrow'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Liquidate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Repay'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface BorrowEventObject {
  account: string;
  amount: BigNumber;
}
export type BorrowEvent = TypedEvent<[string, BigNumber], BorrowEventObject>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface CreateEscrowEventObject {
  user: string;
  escrow: string;
}
export type CreateEscrowEvent = TypedEvent<[string, string], CreateEscrowEventObject>;

export type CreateEscrowEventFilter = TypedEventFilter<CreateEscrowEvent>;

export interface DepositEventObject {
  account: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface LiquidateEventObject {
  account: string;
  liquidator: string;
  repaidDebt: BigNumber;
  liquidatorReward: BigNumber;
}
export type LiquidateEvent = TypedEvent<[string, string, BigNumber, BigNumber], LiquidateEventObject>;

export type LiquidateEventFilter = TypedEventFilter<LiquidateEvent>;

export interface RepayEventObject {
  account: string;
  repayer: string;
  amount: BigNumber;
}
export type RepayEvent = TypedEvent<[string, string, BigNumber], RepayEventObject>;

export type RepayEventFilter = TypedEventFilter<RepayEvent>;

export interface WithdrawEventObject {
  account: string;
  to: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface SimpleMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SimpleMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    borrow(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    borrowController(overrides?: CallOverrides): Promise<[string]>;

    borrowOnBehalf(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    borrowPaused(overrides?: CallOverrides): Promise<[boolean]>;

    collateral(overrides?: CallOverrides): Promise<[string]>;

    collateralFactorBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    dbr(overrides?: CallOverrides): Promise<[string]>;

    debts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    'deposit(address,uint256)'(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'deposit(uint256)'(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositAndBorrow(
      amountDeposit: PromiseOrValue<BigNumberish>,
      amountBorrow: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    dola(overrides?: CallOverrides): Promise<[string]>;

    escrowImplementation(overrides?: CallOverrides): Promise<[string]>;

    escrows(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    forceReplenish(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    forceReplenishAll(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getCollateralValue(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getCreditLimit(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getWithdrawalLimit(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    invalidateNonce(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    lender(overrides?: CallOverrides): Promise<[string]>;

    liquidate(
      user: PromiseOrValue<string>,
      repaidDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    liquidationFactorBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidationFeeBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidationIncentiveBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    pauseBorrows(
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    pauseGuardian(overrides?: CallOverrides): Promise<[string]>;

    predictEscrow(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string] & { predicted: string }>;

    recall(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    repay(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    repayAndWithdraw(
      repayAmount: PromiseOrValue<BigNumberish>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    replenishmentIncentiveBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBorrowController(
      _borrowController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setCollateralFactorBps(
      _collateralFactorBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLender(
      _lender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLiquidationFactorBps(
      _liquidationFactorBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLiquidationFeeBps(
      _liquidationFeeBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLiquidationIncentiveBps(
      _liquidationIncentiveBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setOracle(
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPauseGuardian(
      _pauseGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setReplenismentIncentiveBps(
      _replenishmentIncentiveBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    totalDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawOnBehalf(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  borrow(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  borrowController(overrides?: CallOverrides): Promise<string>;

  borrowOnBehalf(
    from: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  borrowPaused(overrides?: CallOverrides): Promise<boolean>;

  collateral(overrides?: CallOverrides): Promise<string>;

  collateralFactorBps(overrides?: CallOverrides): Promise<BigNumber>;

  dbr(overrides?: CallOverrides): Promise<string>;

  debts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  'deposit(address,uint256)'(
    user: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'deposit(uint256)'(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositAndBorrow(
    amountDeposit: PromiseOrValue<BigNumberish>,
    amountBorrow: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  dola(overrides?: CallOverrides): Promise<string>;

  escrowImplementation(overrides?: CallOverrides): Promise<string>;

  escrows(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  forceReplenish(
    user: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  forceReplenishAll(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getCollateralValue(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getCreditLimit(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getWithdrawalLimit(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  invalidateNonce(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  lender(overrides?: CallOverrides): Promise<string>;

  liquidate(
    user: PromiseOrValue<string>,
    repaidDebt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  liquidationFactorBps(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationIncentiveBps(overrides?: CallOverrides): Promise<BigNumber>;

  nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  oracle(overrides?: CallOverrides): Promise<string>;

  pauseBorrows(
    _value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  pauseGuardian(overrides?: CallOverrides): Promise<string>;

  predictEscrow(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  recall(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  repay(
    user: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  repayAndWithdraw(
    repayAmount: PromiseOrValue<BigNumberish>,
    withdrawAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  replenishmentIncentiveBps(overrides?: CallOverrides): Promise<BigNumber>;

  setBorrowController(
    _borrowController: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setCollateralFactorBps(
    _collateralFactorBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setGov(
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLender(
    _lender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLiquidationFactorBps(
    _liquidationFactorBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLiquidationFeeBps(
    _liquidationFeeBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLiquidationIncentiveBps(
    _liquidationIncentiveBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setOracle(
    _oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPauseGuardian(
    _pauseGuardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setReplenismentIncentiveBps(
    _replenishmentIncentiveBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawOnBehalf(
    from: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    borrow(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    borrowController(overrides?: CallOverrides): Promise<string>;

    borrowOnBehalf(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    borrowPaused(overrides?: CallOverrides): Promise<boolean>;

    collateral(overrides?: CallOverrides): Promise<string>;

    collateralFactorBps(overrides?: CallOverrides): Promise<BigNumber>;

    dbr(overrides?: CallOverrides): Promise<string>;

    debts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    'deposit(address,uint256)'(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    'deposit(uint256)'(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    depositAndBorrow(
      amountDeposit: PromiseOrValue<BigNumberish>,
      amountBorrow: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    dola(overrides?: CallOverrides): Promise<string>;

    escrowImplementation(overrides?: CallOverrides): Promise<string>;

    escrows(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    forceReplenish(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    forceReplenishAll(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    getCollateralValue(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getCreditLimit(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawalLimit(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    invalidateNonce(overrides?: CallOverrides): Promise<void>;

    lender(overrides?: CallOverrides): Promise<string>;

    liquidate(
      user: PromiseOrValue<string>,
      repaidDebt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    liquidationFactorBps(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationIncentiveBps(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<string>;

    pauseBorrows(_value: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    pauseGuardian(overrides?: CallOverrides): Promise<string>;

    predictEscrow(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    recall(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    repay(user: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    repayAndWithdraw(
      repayAmount: PromiseOrValue<BigNumberish>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    replenishmentIncentiveBps(overrides?: CallOverrides): Promise<BigNumber>;

    setBorrowController(_borrowController: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setCollateralFactorBps(
      _collateralFactorBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setGov(_gov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setLender(_lender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setLiquidationFactorBps(
      _liquidationFactorBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setLiquidationFeeBps(_liquidationFeeBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setLiquidationIncentiveBps(
      _liquidationIncentiveBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setOracle(_oracle: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setPauseGuardian(_pauseGuardian: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setReplenismentIncentiveBps(
      _replenishmentIncentiveBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    withdrawOnBehalf(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'Borrow(address,uint256)'(account?: PromiseOrValue<string> | null, amount?: null): BorrowEventFilter;
    Borrow(account?: PromiseOrValue<string> | null, amount?: null): BorrowEventFilter;

    'CreateEscrow(address,address)'(user?: PromiseOrValue<string> | null, escrow?: null): CreateEscrowEventFilter;
    CreateEscrow(user?: PromiseOrValue<string> | null, escrow?: null): CreateEscrowEventFilter;

    'Deposit(address,uint256)'(account?: PromiseOrValue<string> | null, amount?: null): DepositEventFilter;
    Deposit(account?: PromiseOrValue<string> | null, amount?: null): DepositEventFilter;

    'Liquidate(address,address,uint256,uint256)'(
      account?: PromiseOrValue<string> | null,
      liquidator?: PromiseOrValue<string> | null,
      repaidDebt?: null,
      liquidatorReward?: null,
    ): LiquidateEventFilter;
    Liquidate(
      account?: PromiseOrValue<string> | null,
      liquidator?: PromiseOrValue<string> | null,
      repaidDebt?: null,
      liquidatorReward?: null,
    ): LiquidateEventFilter;

    'Repay(address,address,uint256)'(
      account?: PromiseOrValue<string> | null,
      repayer?: PromiseOrValue<string> | null,
      amount?: null,
    ): RepayEventFilter;
    Repay(
      account?: PromiseOrValue<string> | null,
      repayer?: PromiseOrValue<string> | null,
      amount?: null,
    ): RepayEventFilter;

    'Withdraw(address,address,uint256)'(
      account?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
    ): WithdrawEventFilter;
    Withdraw(
      account?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
    ): WithdrawEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    borrowController(overrides?: CallOverrides): Promise<BigNumber>;

    borrowOnBehalf(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    borrowPaused(overrides?: CallOverrides): Promise<BigNumber>;

    collateral(overrides?: CallOverrides): Promise<BigNumber>;

    collateralFactorBps(overrides?: CallOverrides): Promise<BigNumber>;

    dbr(overrides?: CallOverrides): Promise<BigNumber>;

    debts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    'deposit(address,uint256)'(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'deposit(uint256)'(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositAndBorrow(
      amountDeposit: PromiseOrValue<BigNumberish>,
      amountBorrow: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    dola(overrides?: CallOverrides): Promise<BigNumber>;

    escrowImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    escrows(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    forceReplenish(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    forceReplenishAll(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getCollateralValue(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getCreditLimit(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawalLimit(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    invalidateNonce(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    lender(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      user: PromiseOrValue<string>,
      repaidDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    liquidationFactorBps(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationIncentiveBps(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    pauseBorrows(
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    pauseGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    predictEscrow(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    recall(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    repay(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    repayAndWithdraw(
      repayAmount: PromiseOrValue<BigNumberish>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    replenishmentIncentiveBps(overrides?: CallOverrides): Promise<BigNumber>;

    setBorrowController(
      _borrowController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setCollateralFactorBps(
      _collateralFactorBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setGov(_gov: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setLender(
      _lender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLiquidationFactorBps(
      _liquidationFactorBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLiquidationFeeBps(
      _liquidationFeeBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLiquidationIncentiveBps(
      _liquidationIncentiveBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setOracle(
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPauseGuardian(
      _pauseGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setReplenismentIncentiveBps(
      _replenishmentIncentiveBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawOnBehalf(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    borrowController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowOnBehalf(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    borrowPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralFactorBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dbr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'deposit(address,uint256)'(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'deposit(uint256)'(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositAndBorrow(
      amountDeposit: PromiseOrValue<BigNumberish>,
      amountBorrow: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    dola(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    escrowImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    escrows(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forceReplenish(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    forceReplenishAll(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getCollateralValue(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCreditLimit(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWithdrawalLimit(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    invalidateNonce(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    lender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidate(
      user: PromiseOrValue<string>,
      repaidDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    liquidationFactorBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidationFeeBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidationIncentiveBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseBorrows(
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    pauseGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    predictEscrow(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recall(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    repay(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    repayAndWithdraw(
      repayAmount: PromiseOrValue<BigNumberish>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    replenishmentIncentiveBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBorrowController(
      _borrowController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setCollateralFactorBps(
      _collateralFactorBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLender(
      _lender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLiquidationFactorBps(
      _liquidationFactorBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLiquidationFeeBps(
      _liquidationFeeBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLiquidationIncentiveBps(
      _liquidationIncentiveBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setOracle(
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPauseGuardian(
      _pauseGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setReplenismentIncentiveBps(
      _replenishmentIncentiveBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    totalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawOnBehalf(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
