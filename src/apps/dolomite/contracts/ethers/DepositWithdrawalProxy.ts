/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface DepositWithdrawalProxyInterface extends utils.Interface {
  functions: {
    'DOLOMITE_MARGIN()': FunctionFragment;
    'depositETH(uint256)': FunctionFragment;
    'depositETHIntoDefaultAccount()': FunctionFragment;
    'depositPar(uint256,uint256,uint256)': FunctionFragment;
    'depositParIntoDefaultAccount(uint256,uint256)': FunctionFragment;
    'depositWei(uint256,uint256,uint256)': FunctionFragment;
    'depositWeiIntoDefaultAccount(uint256,uint256)': FunctionFragment;
    'initializeETHMarket(address)': FunctionFragment;
    'withdrawETH(uint256,uint256,uint8)': FunctionFragment;
    'withdrawETHFromDefaultAccount(uint256,uint8)': FunctionFragment;
    'withdrawPar(uint256,uint256,uint256,uint8)': FunctionFragment;
    'withdrawParFromDefaultAccount(uint256,uint256,uint8)': FunctionFragment;
    'withdrawWei(uint256,uint256,uint256,uint8)': FunctionFragment;
    'withdrawWeiFromDefaultAccount(uint256,uint256,uint8)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DOLOMITE_MARGIN'
      | 'depositETH'
      | 'depositETHIntoDefaultAccount'
      | 'depositPar'
      | 'depositParIntoDefaultAccount'
      | 'depositWei'
      | 'depositWeiIntoDefaultAccount'
      | 'initializeETHMarket'
      | 'withdrawETH'
      | 'withdrawETHFromDefaultAccount'
      | 'withdrawPar'
      | 'withdrawParFromDefaultAccount'
      | 'withdrawWei'
      | 'withdrawWeiFromDefaultAccount',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DOLOMITE_MARGIN', values?: undefined): string;
  encodeFunctionData(functionFragment: 'depositETH', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'depositETHIntoDefaultAccount', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'depositPar',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositParIntoDefaultAccount',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositWei',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositWeiIntoDefaultAccount',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'initializeETHMarket', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'withdrawETH',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawETHFromDefaultAccount',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawPar',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawParFromDefaultAccount',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawWei',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawWeiFromDefaultAccount',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'DOLOMITE_MARGIN', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositETHIntoDefaultAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositPar', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositParIntoDefaultAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositWei', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositWeiIntoDefaultAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initializeETHMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawETHFromDefaultAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawPar', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawParFromDefaultAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawWei', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawWeiFromDefaultAccount', data: BytesLike): Result;

  events: {};
}

export interface DepositWithdrawalProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DepositWithdrawalProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<[string]>;

    depositETH(
      _toAccountNumber: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositETHIntoDefaultAccount(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositPar(
      _toAccountNumber: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _amountPar: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositParIntoDefaultAccount(
      _marketId: PromiseOrValue<BigNumberish>,
      _amountPar: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositWei(
      _toAccountNumber: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositWeiIntoDefaultAccount(
      _marketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initializeETHMarket(
      _weth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawETH(
      _fromAccountNumber: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawETHFromDefaultAccount(
      _amountWei: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawPar(
      _fromAccountNumber: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _amountPar: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawParFromDefaultAccount(
      _marketId: PromiseOrValue<BigNumberish>,
      _amountPar: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawWei(
      _fromAccountNumber: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawWeiFromDefaultAccount(
      _marketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

  depositETH(
    _toAccountNumber: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositETHIntoDefaultAccount(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositPar(
    _toAccountNumber: PromiseOrValue<BigNumberish>,
    _marketId: PromiseOrValue<BigNumberish>,
    _amountPar: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositParIntoDefaultAccount(
    _marketId: PromiseOrValue<BigNumberish>,
    _amountPar: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositWei(
    _toAccountNumber: PromiseOrValue<BigNumberish>,
    _marketId: PromiseOrValue<BigNumberish>,
    _amountWei: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositWeiIntoDefaultAccount(
    _marketId: PromiseOrValue<BigNumberish>,
    _amountWei: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initializeETHMarket(
    _weth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawETH(
    _fromAccountNumber: PromiseOrValue<BigNumberish>,
    _amountWei: PromiseOrValue<BigNumberish>,
    _balanceCheckFlag: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawETHFromDefaultAccount(
    _amountWei: PromiseOrValue<BigNumberish>,
    _balanceCheckFlag: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawPar(
    _fromAccountNumber: PromiseOrValue<BigNumberish>,
    _marketId: PromiseOrValue<BigNumberish>,
    _amountPar: PromiseOrValue<BigNumberish>,
    _balanceCheckFlag: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawParFromDefaultAccount(
    _marketId: PromiseOrValue<BigNumberish>,
    _amountPar: PromiseOrValue<BigNumberish>,
    _balanceCheckFlag: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawWei(
    _fromAccountNumber: PromiseOrValue<BigNumberish>,
    _marketId: PromiseOrValue<BigNumberish>,
    _amountWei: PromiseOrValue<BigNumberish>,
    _balanceCheckFlag: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawWeiFromDefaultAccount(
    _marketId: PromiseOrValue<BigNumberish>,
    _amountWei: PromiseOrValue<BigNumberish>,
    _balanceCheckFlag: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

    depositETH(_toAccountNumber: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    depositETHIntoDefaultAccount(overrides?: CallOverrides): Promise<void>;

    depositPar(
      _toAccountNumber: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _amountPar: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositParIntoDefaultAccount(
      _marketId: PromiseOrValue<BigNumberish>,
      _amountPar: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositWei(
      _toAccountNumber: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositWeiIntoDefaultAccount(
      _marketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    initializeETHMarket(_weth: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    withdrawETH(
      _fromAccountNumber: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawETHFromDefaultAccount(
      _amountWei: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawPar(
      _fromAccountNumber: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _amountPar: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawParFromDefaultAccount(
      _marketId: PromiseOrValue<BigNumberish>,
      _amountPar: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawWei(
      _fromAccountNumber: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawWeiFromDefaultAccount(
      _marketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<BigNumber>;

    depositETH(
      _toAccountNumber: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositETHIntoDefaultAccount(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    depositPar(
      _toAccountNumber: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _amountPar: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositParIntoDefaultAccount(
      _marketId: PromiseOrValue<BigNumberish>,
      _amountPar: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositWei(
      _toAccountNumber: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositWeiIntoDefaultAccount(
      _marketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initializeETHMarket(
      _weth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawETH(
      _fromAccountNumber: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawETHFromDefaultAccount(
      _amountWei: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawPar(
      _fromAccountNumber: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _amountPar: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawParFromDefaultAccount(
      _marketId: PromiseOrValue<BigNumberish>,
      _amountPar: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawWei(
      _fromAccountNumber: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawWeiFromDefaultAccount(
      _marketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositETH(
      _toAccountNumber: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositETHIntoDefaultAccount(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositPar(
      _toAccountNumber: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _amountPar: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositParIntoDefaultAccount(
      _marketId: PromiseOrValue<BigNumberish>,
      _amountPar: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositWei(
      _toAccountNumber: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositWeiIntoDefaultAccount(
      _marketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initializeETHMarket(
      _weth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      _fromAccountNumber: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawETHFromDefaultAccount(
      _amountWei: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawPar(
      _fromAccountNumber: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _amountPar: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawParFromDefaultAccount(
      _marketId: PromiseOrValue<BigNumberish>,
      _amountPar: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawWei(
      _fromAccountNumber: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawWeiFromDefaultAccount(
      _marketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
