/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface BorrowPositionProxyInterface extends utils.Interface {
  functions: {
    'DOLOMITE_MARGIN()': FunctionFragment;
    'closeBorrowPosition(uint256,uint256,uint256[])': FunctionFragment;
    'openBorrowPosition(uint256,uint256,uint256,uint256,uint8)': FunctionFragment;
    'repayAllForBorrowPosition(uint256,uint256,uint256,uint8)': FunctionFragment;
    'transferBetweenAccounts(uint256,uint256,uint256,uint256,uint8)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DOLOMITE_MARGIN'
      | 'closeBorrowPosition'
      | 'openBorrowPosition'
      | 'repayAllForBorrowPosition'
      | 'transferBetweenAccounts',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DOLOMITE_MARGIN', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'closeBorrowPosition',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'openBorrowPosition',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'repayAllForBorrowPosition',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferBetweenAccounts',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;

  decodeFunctionResult(functionFragment: 'DOLOMITE_MARGIN', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeBorrowPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'openBorrowPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayAllForBorrowPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferBetweenAccounts', data: BytesLike): Result;

  events: {
    'BorrowPositionOpen(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'BorrowPositionOpen'): EventFragment;
}

export interface BorrowPositionOpenEventObject {
  _borrower: string;
  _borrowAccountIndex: BigNumber;
}
export type BorrowPositionOpenEvent = TypedEvent<[string, BigNumber], BorrowPositionOpenEventObject>;

export type BorrowPositionOpenEventFilter = TypedEventFilter<BorrowPositionOpenEvent>;

export interface BorrowPositionProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BorrowPositionProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<[string]>;

    closeBorrowPosition(
      _borrowAccountIndex: PromiseOrValue<BigNumberish>,
      _toAccountIndex: PromiseOrValue<BigNumberish>,
      _collateralMarketIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    openBorrowPosition(
      _fromAccountIndex: PromiseOrValue<BigNumberish>,
      _toAccountIndex: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    repayAllForBorrowPosition(
      _fromAccountIndex: PromiseOrValue<BigNumberish>,
      _borrowAccountIndex: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferBetweenAccounts(
      _fromAccountIndex: PromiseOrValue<BigNumberish>,
      _toAccountIndex: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

  closeBorrowPosition(
    _borrowAccountIndex: PromiseOrValue<BigNumberish>,
    _toAccountIndex: PromiseOrValue<BigNumberish>,
    _collateralMarketIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  openBorrowPosition(
    _fromAccountIndex: PromiseOrValue<BigNumberish>,
    _toAccountIndex: PromiseOrValue<BigNumberish>,
    _marketId: PromiseOrValue<BigNumberish>,
    _amountWei: PromiseOrValue<BigNumberish>,
    _balanceCheckFlag: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  repayAllForBorrowPosition(
    _fromAccountIndex: PromiseOrValue<BigNumberish>,
    _borrowAccountIndex: PromiseOrValue<BigNumberish>,
    _marketId: PromiseOrValue<BigNumberish>,
    _balanceCheckFlag: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferBetweenAccounts(
    _fromAccountIndex: PromiseOrValue<BigNumberish>,
    _toAccountIndex: PromiseOrValue<BigNumberish>,
    _marketId: PromiseOrValue<BigNumberish>,
    _amountWei: PromiseOrValue<BigNumberish>,
    _balanceCheckFlag: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

    closeBorrowPosition(
      _borrowAccountIndex: PromiseOrValue<BigNumberish>,
      _toAccountIndex: PromiseOrValue<BigNumberish>,
      _collateralMarketIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    openBorrowPosition(
      _fromAccountIndex: PromiseOrValue<BigNumberish>,
      _toAccountIndex: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    repayAllForBorrowPosition(
      _fromAccountIndex: PromiseOrValue<BigNumberish>,
      _borrowAccountIndex: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferBetweenAccounts(
      _fromAccountIndex: PromiseOrValue<BigNumberish>,
      _toAccountIndex: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'BorrowPositionOpen(address,uint256)'(
      _borrower?: PromiseOrValue<string> | null,
      _borrowAccountIndex?: PromiseOrValue<BigNumberish> | null,
    ): BorrowPositionOpenEventFilter;
    BorrowPositionOpen(
      _borrower?: PromiseOrValue<string> | null,
      _borrowAccountIndex?: PromiseOrValue<BigNumberish> | null,
    ): BorrowPositionOpenEventFilter;
  };

  estimateGas: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<BigNumber>;

    closeBorrowPosition(
      _borrowAccountIndex: PromiseOrValue<BigNumberish>,
      _toAccountIndex: PromiseOrValue<BigNumberish>,
      _collateralMarketIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    openBorrowPosition(
      _fromAccountIndex: PromiseOrValue<BigNumberish>,
      _toAccountIndex: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    repayAllForBorrowPosition(
      _fromAccountIndex: PromiseOrValue<BigNumberish>,
      _borrowAccountIndex: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferBetweenAccounts(
      _fromAccountIndex: PromiseOrValue<BigNumberish>,
      _toAccountIndex: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closeBorrowPosition(
      _borrowAccountIndex: PromiseOrValue<BigNumberish>,
      _toAccountIndex: PromiseOrValue<BigNumberish>,
      _collateralMarketIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    openBorrowPosition(
      _fromAccountIndex: PromiseOrValue<BigNumberish>,
      _toAccountIndex: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    repayAllForBorrowPosition(
      _fromAccountIndex: PromiseOrValue<BigNumberish>,
      _borrowAccountIndex: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferBetweenAccounts(
      _fromAccountIndex: PromiseOrValue<BigNumberish>,
      _toAccountIndex: PromiseOrValue<BigNumberish>,
      _marketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      _balanceCheckFlag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
