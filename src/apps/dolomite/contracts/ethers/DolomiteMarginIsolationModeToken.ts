/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace IWrappedTokenUserVaultFactory {
  export type QueuedTransferStruct = {
    from: PromiseOrValue<string>;
    to: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    vault: PromiseOrValue<string>;
    isExecuted: PromiseOrValue<boolean>;
  };

  export type QueuedTransferStructOutput = [string, string, BigNumber, string, boolean] & {
    from: string;
    to: string;
    amount: BigNumber;
    vault: string;
    isExecuted: boolean;
  };
}

export interface DolomiteMarginIsolationModeTokenInterface extends utils.Interface {
  functions: {
    'BORROW_POSITION_PROXY()': FunctionFragment;
    'DOLOMITE_MARGIN()': FunctionFragment;
    'NONE()': FunctionFragment;
    'UNDERLYING_TOKEN()': FunctionFragment;
    'WETH()': FunctionFragment;
    'WETH_MARKET_ID()': FunctionFragment;
    'allowableCollateralMarketIds()': FunctionFragment;
    'allowableDebtMarketIds()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'calculateVaultByAccount(address)': FunctionFragment;
    'createVault(address)': FunctionFragment;
    'createVaultAndAcceptFullAccountTransfer(address)': FunctionFragment;
    'createVaultAndDepositIntoDolomiteMargin(uint256,uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'depositIntoDolomiteMargin(uint256,uint256)': FunctionFragment;
    'depositOtherTokenIntoDolomiteMarginForVaultOwner(uint256,uint256,uint256)': FunctionFragment;
    'enqueueTransferFromDolomiteMargin(address,uint256)': FunctionFragment;
    'enqueueTransferIntoDolomiteMargin(address,uint256)': FunctionFragment;
    'getAccountByVault(address)': FunctionFragment;
    'getQueuedTransferByCursor(uint256)': FunctionFragment;
    'getVaultByAccount(address)': FunctionFragment;
    'gmxRegistry()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initialize(address[])': FunctionFragment;
    'isInitialized()': FunctionFragment;
    'isIsolationAsset()': FunctionFragment;
    'isTokenConverterTrusted(address)': FunctionFragment;
    'marketId()': FunctionFragment;
    'name()': FunctionFragment;
    'setGmxRegistry(address)': FunctionFragment;
    'setIsTokenConverterTrusted(address,bool)': FunctionFragment;
    'setUserVaultImplementation(address)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferCursor()': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'userVaultImplementation()': FunctionFragment;
    'withdrawFromDolomiteMargin(uint256,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BORROW_POSITION_PROXY'
      | 'DOLOMITE_MARGIN'
      | 'NONE'
      | 'UNDERLYING_TOKEN'
      | 'WETH'
      | 'WETH_MARKET_ID'
      | 'allowableCollateralMarketIds'
      | 'allowableDebtMarketIds'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'calculateVaultByAccount'
      | 'createVault'
      | 'createVaultAndAcceptFullAccountTransfer'
      | 'createVaultAndDepositIntoDolomiteMargin'
      | 'decimals'
      | 'decreaseAllowance'
      | 'depositIntoDolomiteMargin'
      | 'depositOtherTokenIntoDolomiteMarginForVaultOwner'
      | 'enqueueTransferFromDolomiteMargin'
      | 'enqueueTransferIntoDolomiteMargin'
      | 'getAccountByVault'
      | 'getQueuedTransferByCursor'
      | 'getVaultByAccount'
      | 'gmxRegistry'
      | 'increaseAllowance'
      | 'initialize'
      | 'isInitialized'
      | 'isIsolationAsset'
      | 'isTokenConverterTrusted'
      | 'marketId'
      | 'name'
      | 'setGmxRegistry'
      | 'setIsTokenConverterTrusted'
      | 'setUserVaultImplementation'
      | 'symbol'
      | 'totalSupply'
      | 'transfer'
      | 'transferCursor'
      | 'transferFrom'
      | 'userVaultImplementation'
      | 'withdrawFromDolomiteMargin',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BORROW_POSITION_PROXY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DOLOMITE_MARGIN', values?: undefined): string;
  encodeFunctionData(functionFragment: 'NONE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'UNDERLYING_TOKEN', values?: undefined): string;
  encodeFunctionData(functionFragment: 'WETH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'WETH_MARKET_ID', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowableCollateralMarketIds', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowableDebtMarketIds', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'calculateVaultByAccount', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'createVault', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'createVaultAndAcceptFullAccountTransfer',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'createVaultAndDepositIntoDolomiteMargin',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositIntoDolomiteMargin',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositOtherTokenIntoDolomiteMarginForVaultOwner',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'enqueueTransferFromDolomiteMargin',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'enqueueTransferIntoDolomiteMargin',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getAccountByVault', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getQueuedTransferByCursor', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getVaultByAccount', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'gmxRegistry', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'initialize', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'isInitialized', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isIsolationAsset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isTokenConverterTrusted', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'marketId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setGmxRegistry', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setIsTokenConverterTrusted',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setUserVaultImplementation', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'transferCursor', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'userVaultImplementation', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdrawFromDolomiteMargin',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'BORROW_POSITION_PROXY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DOLOMITE_MARGIN', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'NONE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'UNDERLYING_TOKEN', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'WETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'WETH_MARKET_ID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowableCollateralMarketIds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowableDebtMarketIds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateVaultByAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createVaultAndAcceptFullAccountTransfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createVaultAndDepositIntoDolomiteMargin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositIntoDolomiteMargin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositOtherTokenIntoDolomiteMarginForVaultOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enqueueTransferFromDolomiteMargin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enqueueTransferIntoDolomiteMargin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountByVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getQueuedTransferByCursor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVaultByAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gmxRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isInitialized', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isIsolationAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isTokenConverterTrusted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGmxRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setIsTokenConverterTrusted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUserVaultImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferCursor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userVaultImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawFromDolomiteMargin', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'GmxRegistrySet(address)': EventFragment;
    'Initialized()': EventFragment;
    'TokenConverterSet(address,bool)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'TransferQueued(uint256,address,address,uint256,address)': EventFragment;
    'UserVaultImplementationSet(address,address)': EventFragment;
    'VaultCreated(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GmxRegistrySet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenConverterSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferQueued'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UserVaultImplementationSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VaultCreated'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface GmxRegistrySetEventObject {
  _gmxRegistry: string;
}
export type GmxRegistrySetEvent = TypedEvent<[string], GmxRegistrySetEventObject>;

export type GmxRegistrySetEventFilter = TypedEventFilter<GmxRegistrySetEvent>;

export interface InitializedEventObject {}
export type InitializedEvent = TypedEvent<[], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface TokenConverterSetEventObject {
  tokenConverter: string;
  isTrusted: boolean;
}
export type TokenConverterSetEvent = TypedEvent<[string, boolean], TokenConverterSetEventObject>;

export type TokenConverterSetEventFilter = TypedEventFilter<TokenConverterSetEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TransferQueuedEventObject {
  transferCursor: BigNumber;
  from: string;
  to: string;
  amountWei: BigNumber;
  vault: string;
}
export type TransferQueuedEvent = TypedEvent<[BigNumber, string, string, BigNumber, string], TransferQueuedEventObject>;

export type TransferQueuedEventFilter = TypedEventFilter<TransferQueuedEvent>;

export interface UserVaultImplementationSetEventObject {
  previousUserVaultImplementation: string;
  newUserVaultImplementation: string;
}
export type UserVaultImplementationSetEvent = TypedEvent<[string, string], UserVaultImplementationSetEventObject>;

export type UserVaultImplementationSetEventFilter = TypedEventFilter<UserVaultImplementationSetEvent>;

export interface VaultCreatedEventObject {
  account: string;
  vault: string;
}
export type VaultCreatedEvent = TypedEvent<[string, string], VaultCreatedEventObject>;

export type VaultCreatedEventFilter = TypedEventFilter<VaultCreatedEvent>;

export interface DolomiteMarginIsolationModeToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DolomiteMarginIsolationModeTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BORROW_POSITION_PROXY(overrides?: CallOverrides): Promise<[string]>;

    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<[string]>;

    NONE(overrides?: CallOverrides): Promise<[BigNumber]>;

    UNDERLYING_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    WETH_MARKET_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowableCollateralMarketIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    allowableDebtMarketIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateVaultByAccount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string] & { _vault: string }>;

    createVault(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createVaultAndAcceptFullAccountTransfer(
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createVaultAndDepositIntoDolomiteMargin(
      _toAccountNumber: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositIntoDolomiteMargin(
      _toAccountNumber: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositOtherTokenIntoDolomiteMarginForVaultOwner(
      _toAccountNumber: PromiseOrValue<BigNumberish>,
      _otherMarketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    enqueueTransferFromDolomiteMargin(
      _vault: PromiseOrValue<string>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    enqueueTransferIntoDolomiteMargin(
      _vault: PromiseOrValue<string>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getAccountByVault(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string] & { _account: string }>;

    getQueuedTransferByCursor(
      _transferCursor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[IWrappedTokenUserVaultFactory.QueuedTransferStructOutput]>;

    getVaultByAccount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string] & { _vault: string }>;

    gmxRegistry(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _tokenConverters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isIsolationAsset(overrides?: CallOverrides): Promise<[boolean]>;

    isTokenConverterTrusted(_tokenConverter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    marketId(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    setGmxRegistry(
      _gmxRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setIsTokenConverterTrusted(
      _tokenConverter: PromiseOrValue<string>,
      _isTrusted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setUserVaultImplementation(
      _userVaultImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferCursor(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    userVaultImplementation(overrides?: CallOverrides): Promise<[string]>;

    withdrawFromDolomiteMargin(
      _fromAccountNumber: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  BORROW_POSITION_PROXY(overrides?: CallOverrides): Promise<string>;

  DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

  NONE(overrides?: CallOverrides): Promise<BigNumber>;

  UNDERLYING_TOKEN(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  WETH_MARKET_ID(overrides?: CallOverrides): Promise<BigNumber>;

  allowableCollateralMarketIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  allowableDebtMarketIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  calculateVaultByAccount(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  createVault(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createVaultAndAcceptFullAccountTransfer(
    _sender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createVaultAndDepositIntoDolomiteMargin(
    _toAccountNumber: PromiseOrValue<BigNumberish>,
    _amountWei: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositIntoDolomiteMargin(
    _toAccountNumber: PromiseOrValue<BigNumberish>,
    _amountWei: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositOtherTokenIntoDolomiteMarginForVaultOwner(
    _toAccountNumber: PromiseOrValue<BigNumberish>,
    _otherMarketId: PromiseOrValue<BigNumberish>,
    _amountWei: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  enqueueTransferFromDolomiteMargin(
    _vault: PromiseOrValue<string>,
    _amountWei: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  enqueueTransferIntoDolomiteMargin(
    _vault: PromiseOrValue<string>,
    _amountWei: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getAccountByVault(_vault: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  getQueuedTransferByCursor(
    _transferCursor: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<IWrappedTokenUserVaultFactory.QueuedTransferStructOutput>;

  getVaultByAccount(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  gmxRegistry(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _tokenConverters: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  isIsolationAsset(overrides?: CallOverrides): Promise<boolean>;

  isTokenConverterTrusted(_tokenConverter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  marketId(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  setGmxRegistry(
    _gmxRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setIsTokenConverterTrusted(
    _tokenConverter: PromiseOrValue<string>,
    _isTrusted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setUserVaultImplementation(
    _userVaultImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferCursor(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  userVaultImplementation(overrides?: CallOverrides): Promise<string>;

  withdrawFromDolomiteMargin(
    _fromAccountNumber: PromiseOrValue<BigNumberish>,
    _amountWei: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    BORROW_POSITION_PROXY(overrides?: CallOverrides): Promise<string>;

    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<string>;

    NONE(overrides?: CallOverrides): Promise<BigNumber>;

    UNDERLYING_TOKEN(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    WETH_MARKET_ID(overrides?: CallOverrides): Promise<BigNumber>;

    allowableCollateralMarketIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    allowableDebtMarketIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    calculateVaultByAccount(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    createVault(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    createVaultAndAcceptFullAccountTransfer(
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>;

    createVaultAndDepositIntoDolomiteMargin(
      _toAccountNumber: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    depositIntoDolomiteMargin(
      _toAccountNumber: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositOtherTokenIntoDolomiteMarginForVaultOwner(
      _toAccountNumber: PromiseOrValue<BigNumberish>,
      _otherMarketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    enqueueTransferFromDolomiteMargin(
      _vault: PromiseOrValue<string>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    enqueueTransferIntoDolomiteMargin(
      _vault: PromiseOrValue<string>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getAccountByVault(_vault: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    getQueuedTransferByCursor(
      _transferCursor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<IWrappedTokenUserVaultFactory.QueuedTransferStructOutput>;

    getVaultByAccount(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    gmxRegistry(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    initialize(_tokenConverters: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    isIsolationAsset(overrides?: CallOverrides): Promise<boolean>;

    isTokenConverterTrusted(_tokenConverter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    marketId(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    setGmxRegistry(_gmxRegistry: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setIsTokenConverterTrusted(
      _tokenConverter: PromiseOrValue<string>,
      _isTrusted: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setUserVaultImplementation(
      _userVaultImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferCursor(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    userVaultImplementation(overrides?: CallOverrides): Promise<string>;

    withdrawFromDolomiteMargin(
      _fromAccountNumber: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'GmxRegistrySet(address)'(_gmxRegistry?: null): GmxRegistrySetEventFilter;
    GmxRegistrySet(_gmxRegistry?: null): GmxRegistrySetEventFilter;

    'Initialized()'(): InitializedEventFilter;
    Initialized(): InitializedEventFilter;

    'TokenConverterSet(address,bool)'(
      tokenConverter?: PromiseOrValue<string> | null,
      isTrusted?: null,
    ): TokenConverterSetEventFilter;
    TokenConverterSet(tokenConverter?: PromiseOrValue<string> | null, isTrusted?: null): TokenConverterSetEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;

    'TransferQueued(uint256,address,address,uint256,address)'(
      transferCursor?: PromiseOrValue<BigNumberish> | null,
      from?: null,
      to?: null,
      amountWei?: null,
      vault?: null,
    ): TransferQueuedEventFilter;
    TransferQueued(
      transferCursor?: PromiseOrValue<BigNumberish> | null,
      from?: null,
      to?: null,
      amountWei?: null,
      vault?: null,
    ): TransferQueuedEventFilter;

    'UserVaultImplementationSet(address,address)'(
      previousUserVaultImplementation?: PromiseOrValue<string> | null,
      newUserVaultImplementation?: PromiseOrValue<string> | null,
    ): UserVaultImplementationSetEventFilter;
    UserVaultImplementationSet(
      previousUserVaultImplementation?: PromiseOrValue<string> | null,
      newUserVaultImplementation?: PromiseOrValue<string> | null,
    ): UserVaultImplementationSetEventFilter;

    'VaultCreated(address,address)'(account?: PromiseOrValue<string> | null, vault?: null): VaultCreatedEventFilter;
    VaultCreated(account?: PromiseOrValue<string> | null, vault?: null): VaultCreatedEventFilter;
  };

  estimateGas: {
    BORROW_POSITION_PROXY(overrides?: CallOverrides): Promise<BigNumber>;

    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<BigNumber>;

    NONE(overrides?: CallOverrides): Promise<BigNumber>;

    UNDERLYING_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_MARKET_ID(overrides?: CallOverrides): Promise<BigNumber>;

    allowableCollateralMarketIds(overrides?: CallOverrides): Promise<BigNumber>;

    allowableDebtMarketIds(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    calculateVaultByAccount(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    createVault(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createVaultAndAcceptFullAccountTransfer(
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createVaultAndDepositIntoDolomiteMargin(
      _toAccountNumber: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositIntoDolomiteMargin(
      _toAccountNumber: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositOtherTokenIntoDolomiteMarginForVaultOwner(
      _toAccountNumber: PromiseOrValue<BigNumberish>,
      _otherMarketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    enqueueTransferFromDolomiteMargin(
      _vault: PromiseOrValue<string>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    enqueueTransferIntoDolomiteMargin(
      _vault: PromiseOrValue<string>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getAccountByVault(_vault: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getQueuedTransferByCursor(
      _transferCursor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getVaultByAccount(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    gmxRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initialize(
      _tokenConverters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isIsolationAsset(overrides?: CallOverrides): Promise<BigNumber>;

    isTokenConverterTrusted(_tokenConverter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    marketId(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    setGmxRegistry(
      _gmxRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setIsTokenConverterTrusted(
      _tokenConverter: PromiseOrValue<string>,
      _isTrusted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setUserVaultImplementation(
      _userVaultImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferCursor(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    userVaultImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFromDolomiteMargin(
      _fromAccountNumber: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BORROW_POSITION_PROXY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOLOMITE_MARGIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NONE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNDERLYING_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH_MARKET_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowableCollateralMarketIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowableDebtMarketIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateVaultByAccount(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createVault(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createVaultAndAcceptFullAccountTransfer(
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createVaultAndDepositIntoDolomiteMargin(
      _toAccountNumber: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositIntoDolomiteMargin(
      _toAccountNumber: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositOtherTokenIntoDolomiteMarginForVaultOwner(
      _toAccountNumber: PromiseOrValue<BigNumberish>,
      _otherMarketId: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    enqueueTransferFromDolomiteMargin(
      _vault: PromiseOrValue<string>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    enqueueTransferIntoDolomiteMargin(
      _vault: PromiseOrValue<string>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getAccountByVault(_vault: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getQueuedTransferByCursor(
      _transferCursor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getVaultByAccount(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gmxRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _tokenConverters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isIsolationAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTokenConverterTrusted(
      _tokenConverter: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    marketId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGmxRegistry(
      _gmxRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setIsTokenConverterTrusted(
      _tokenConverter: PromiseOrValue<string>,
      _isTrusted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setUserVaultImplementation(
      _userVaultImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferCursor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    userVaultImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFromDolomiteMargin(
      _fromAccountNumber: PromiseOrValue<BigNumberish>,
      _amountWei: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
