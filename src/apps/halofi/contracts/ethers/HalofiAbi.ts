/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface HalofiAbiInterface extends utils.Interface {
  functions: {
    'MULTIPLIER()': FunctionFragment;
    'activePlayersCount()': FunctionFragment;
    'adminFee()': FunctionFragment;
    'adminFeeAmount(uint256)': FunctionFragment;
    'adminFeeSet()': FunctionFragment;
    'adminFeeWithdraw(uint256)': FunctionFragment;
    'adminWithdraw()': FunctionFragment;
    'allowRenouncingOwnership()': FunctionFragment;
    'cumulativePlayerIndexSum(uint256)': FunctionFragment;
    'depositCount()': FunctionFragment;
    'depositRoundInterestSharePercentage()': FunctionFragment;
    'disableClaimingRewardTokens()': FunctionFragment;
    'disableRewardTokenClaim()': FunctionFragment;
    'earlyWithdraw(uint256)': FunctionFragment;
    'earlyWithdrawalFee()': FunctionFragment;
    'emergencyWithdraw()': FunctionFragment;
    'enableEmergencyWithdraw()': FunctionFragment;
    'firstSegmentStart()': FunctionFragment;
    'flexibleSegmentPayment()': FunctionFragment;
    'getCurrentSegment()': FunctionFragment;
    'getNumberOfPlayers()': FunctionFragment;
    'impermanentLossShare()': FunctionFragment;
    'inboundToken()': FunctionFragment;
    'incentiveToken()': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'isGameCompleted()': FunctionFragment;
    'isInitialized()': FunctionFragment;
    'isTransactionalToken()': FunctionFragment;
    'isWinner(address)': FunctionFragment;
    'iterablePlayers(uint256)': FunctionFragment;
    'joinGame(uint256,uint256)': FunctionFragment;
    'lowerEarlyWithdrawFee(uint64)': FunctionFragment;
    'makeDeposit(uint256,uint256)': FunctionFragment;
    'maxFlexibleSegmentPaymentAmount()': FunctionFragment;
    'maxPlayersCount()': FunctionFragment;
    'netTotalGamePrincipal()': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'playerIndex(address,uint256)': FunctionFragment;
    'players(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardTokenAmounts(uint256)': FunctionFragment;
    'rewardTokens(uint256)': FunctionFragment;
    'segmentCounter(uint256)': FunctionFragment;
    'segmentLength()': FunctionFragment;
    'segmentPayment()': FunctionFragment;
    'setIncentiveToken(address)': FunctionFragment;
    'strategy()': FunctionFragment;
    'totalGameInterest()': FunctionFragment;
    'totalGamePrincipal()': FunctionFragment;
    'totalIncentiveAmount()': FunctionFragment;
    'totalWinnerDepositsPerSegment(uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unlockRenounceOwnership()': FunctionFragment;
    'unpause()': FunctionFragment;
    'waitingRoundSegmentLength()': FunctionFragment;
    'waitingRoundSegmentStart()': FunctionFragment;
    'winnerCount()': FunctionFragment;
    'winnersLeftToWithdraw()': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'MULTIPLIER'
      | 'activePlayersCount'
      | 'adminFee'
      | 'adminFeeAmount'
      | 'adminFeeSet'
      | 'adminFeeWithdraw'
      | 'adminWithdraw'
      | 'allowRenouncingOwnership'
      | 'cumulativePlayerIndexSum'
      | 'depositCount'
      | 'depositRoundInterestSharePercentage'
      | 'disableClaimingRewardTokens'
      | 'disableRewardTokenClaim'
      | 'earlyWithdraw'
      | 'earlyWithdrawalFee'
      | 'emergencyWithdraw'
      | 'enableEmergencyWithdraw'
      | 'firstSegmentStart'
      | 'flexibleSegmentPayment'
      | 'getCurrentSegment'
      | 'getNumberOfPlayers'
      | 'impermanentLossShare'
      | 'inboundToken'
      | 'incentiveToken'
      | 'initialize'
      | 'isGameCompleted'
      | 'isInitialized'
      | 'isTransactionalToken'
      | 'isWinner'
      | 'iterablePlayers'
      | 'joinGame'
      | 'lowerEarlyWithdrawFee'
      | 'makeDeposit'
      | 'maxFlexibleSegmentPaymentAmount'
      | 'maxPlayersCount'
      | 'netTotalGamePrincipal'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'playerIndex'
      | 'players'
      | 'renounceOwnership'
      | 'rewardTokenAmounts'
      | 'rewardTokens'
      | 'segmentCounter'
      | 'segmentLength'
      | 'segmentPayment'
      | 'setIncentiveToken'
      | 'strategy'
      | 'totalGameInterest'
      | 'totalGamePrincipal'
      | 'totalIncentiveAmount'
      | 'totalWinnerDepositsPerSegment'
      | 'transferOwnership'
      | 'unlockRenounceOwnership'
      | 'unpause'
      | 'waitingRoundSegmentLength'
      | 'waitingRoundSegmentStart'
      | 'winnerCount'
      | 'winnersLeftToWithdraw'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'MULTIPLIER', values?: undefined): string;
  encodeFunctionData(functionFragment: 'activePlayersCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'adminFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'adminFeeAmount', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'adminFeeSet', values?: undefined): string;
  encodeFunctionData(functionFragment: 'adminFeeWithdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'adminWithdraw', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowRenouncingOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'cumulativePlayerIndexSum', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'depositCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'depositRoundInterestSharePercentage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'disableClaimingRewardTokens', values?: undefined): string;
  encodeFunctionData(functionFragment: 'disableRewardTokenClaim', values?: undefined): string;
  encodeFunctionData(functionFragment: 'earlyWithdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'earlyWithdrawalFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'emergencyWithdraw', values?: undefined): string;
  encodeFunctionData(functionFragment: 'enableEmergencyWithdraw', values?: undefined): string;
  encodeFunctionData(functionFragment: 'firstSegmentStart', values?: undefined): string;
  encodeFunctionData(functionFragment: 'flexibleSegmentPayment', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getCurrentSegment', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getNumberOfPlayers', values?: undefined): string;
  encodeFunctionData(functionFragment: 'impermanentLossShare', values?: undefined): string;
  encodeFunctionData(functionFragment: 'inboundToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'incentiveToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isGameCompleted', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isInitialized', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isTransactionalToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isWinner', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'iterablePlayers', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'joinGame',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'lowerEarlyWithdrawFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'makeDeposit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'maxFlexibleSegmentPaymentAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxPlayersCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'netTotalGamePrincipal', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'playerIndex',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'players', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardTokenAmounts', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'rewardTokens', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'segmentCounter', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'segmentLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'segmentPayment', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setIncentiveToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'strategy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalGameInterest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalGamePrincipal', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalIncentiveAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalWinnerDepositsPerSegment', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'unlockRenounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'waitingRoundSegmentLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'waitingRoundSegmentStart', values?: undefined): string;
  encodeFunctionData(functionFragment: 'winnerCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'winnersLeftToWithdraw', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'MULTIPLIER', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activePlayersCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adminFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adminFeeAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adminFeeSet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adminFeeWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adminWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowRenouncingOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cumulativePlayerIndexSum', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositRoundInterestSharePercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableClaimingRewardTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableRewardTokenClaim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'earlyWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'earlyWithdrawalFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableEmergencyWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'firstSegmentStart', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'flexibleSegmentPayment', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCurrentSegment', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNumberOfPlayers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'impermanentLossShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'inboundToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'incentiveToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isGameCompleted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isInitialized', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isTransactionalToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isWinner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'iterablePlayers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'joinGame', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lowerEarlyWithdrawFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'makeDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxFlexibleSegmentPaymentAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxPlayersCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'netTotalGamePrincipal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'playerIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'players', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokenAmounts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'segmentCounter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'segmentLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'segmentPayment', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setIncentiveToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalGameInterest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalGamePrincipal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalIncentiveAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalWinnerDepositsPerSegment', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unlockRenounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'waitingRoundSegmentLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'waitingRoundSegmentStart', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'winnerCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'winnersLeftToWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'AdminFee(uint256[])': EventFragment;
    'AdminWithdrawal(address,uint256,uint256,uint256[])': EventFragment;
    'ClaimRewardTokensDisabled(uint64)': EventFragment;
    'Deposit(address,uint256,uint256,uint256)': EventFragment;
    'EarlyWithdrawal(address,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'EarlyWithdrawalFeeChanged(uint64,uint64,uint64)': EventFragment;
    'EmergencyWithdrawalEnabled(uint64,uint64,uint64)': EventFragment;
    'EndGameStats(address,uint256,uint256,uint256,uint256,uint256[],uint256,uint256)': EventFragment;
    'ExternalTokenGetBalanceError(address,bytes)': EventFragment;
    'ExternalTokenTransferError(address,bytes)': EventFragment;
    'IncentiveTokenSet(address)': EventFragment;
    'Initialized(uint64,uint64)': EventFragment;
    'JoinedGame(address,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'Unpaused(address)': EventFragment;
    'UpdateGameStats(address,uint256,uint256,uint256,uint256,uint256,uint256[],uint256)': EventFragment;
    'WithdrawInboundTokens(address,uint256)': EventFragment;
    'WithdrawIncentiveToken(address,uint256)': EventFragment;
    'WithdrawRewardTokens(address,uint256[])': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AdminWithdrawal'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ClaimRewardTokensDisabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EarlyWithdrawal'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EarlyWithdrawalFeeChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdrawalEnabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EndGameStats'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExternalTokenGetBalanceError'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExternalTokenTransferError'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'IncentiveTokenSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'JoinedGame'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateGameStats'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawInboundTokens'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawIncentiveToken'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawRewardTokens'): EventFragment;
}

export interface AdminFeeEventObject {
  adminFeeAmounts: BigNumber[];
}
export type AdminFeeEvent = TypedEvent<[BigNumber[]], AdminFeeEventObject>;

export type AdminFeeEventFilter = TypedEventFilter<AdminFeeEvent>;

export interface AdminWithdrawalEventObject {
  admin: string;
  totalGameInterest: BigNumber;
  adminIncentiveAmount: BigNumber;
  adminFeeAmounts: BigNumber[];
}
export type AdminWithdrawalEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber[]], AdminWithdrawalEventObject>;

export type AdminWithdrawalEventFilter = TypedEventFilter<AdminWithdrawalEvent>;

export interface ClaimRewardTokensDisabledEventObject {
  currentSegment: BigNumber;
}
export type ClaimRewardTokensDisabledEvent = TypedEvent<[BigNumber], ClaimRewardTokensDisabledEventObject>;

export type ClaimRewardTokensDisabledEventFilter = TypedEventFilter<ClaimRewardTokensDisabledEvent>;

export interface DepositEventObject {
  player: string;
  segment: BigNumber;
  amount: BigNumber;
  netAmount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EarlyWithdrawalEventObject {
  player: string;
  amount: BigNumber;
  totalGamePrincipal: BigNumber;
  netTotalGamePrincipal: BigNumber;
  depositedAmount: BigNumber;
  depositedNetAmount: BigNumber;
}
export type EarlyWithdrawalEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  EarlyWithdrawalEventObject
>;

export type EarlyWithdrawalEventFilter = TypedEventFilter<EarlyWithdrawalEvent>;

export interface EarlyWithdrawalFeeChangedEventObject {
  currentSegment: BigNumber;
  oldFee: BigNumber;
  newFee: BigNumber;
}
export type EarlyWithdrawalFeeChangedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  EarlyWithdrawalFeeChangedEventObject
>;

export type EarlyWithdrawalFeeChangedEventFilter = TypedEventFilter<EarlyWithdrawalFeeChangedEvent>;

export interface EmergencyWithdrawalEnabledEventObject {
  currentSegment: BigNumber;
  winnerCount: BigNumber;
  depositRoundInterestSharePercentage: BigNumber;
}
export type EmergencyWithdrawalEnabledEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  EmergencyWithdrawalEnabledEventObject
>;

export type EmergencyWithdrawalEnabledEventFilter = TypedEventFilter<EmergencyWithdrawalEnabledEvent>;

export interface EndGameStatsEventObject {
  player: string;
  totalBalance: BigNumber;
  totalGamePrincipal: BigNumber;
  netTotalGamePricipal: BigNumber;
  totalGameInterest: BigNumber;
  grossRewardTokenAmount: BigNumber[];
  totalIncentiveAmount: BigNumber;
  impermanentLossShare: BigNumber;
}
export type EndGameStatsEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber[], BigNumber, BigNumber],
  EndGameStatsEventObject
>;

export type EndGameStatsEventFilter = TypedEventFilter<EndGameStatsEvent>;

export interface ExternalTokenGetBalanceErrorEventObject {
  token: string;
  reason: string;
}
export type ExternalTokenGetBalanceErrorEvent = TypedEvent<[string, string], ExternalTokenGetBalanceErrorEventObject>;

export type ExternalTokenGetBalanceErrorEventFilter = TypedEventFilter<ExternalTokenGetBalanceErrorEvent>;

export interface ExternalTokenTransferErrorEventObject {
  token: string;
  reason: string;
}
export type ExternalTokenTransferErrorEvent = TypedEvent<[string, string], ExternalTokenTransferErrorEventObject>;

export type ExternalTokenTransferErrorEventFilter = TypedEventFilter<ExternalTokenTransferErrorEvent>;

export interface IncentiveTokenSetEventObject {
  token: string;
}
export type IncentiveTokenSetEvent = TypedEvent<[string], IncentiveTokenSetEventObject>;

export type IncentiveTokenSetEventFilter = TypedEventFilter<IncentiveTokenSetEvent>;

export interface InitializedEventObject {
  firstSegmentStart: BigNumber;
  waitingRoundSegmentStart: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber, BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface JoinedGameEventObject {
  player: string;
  amount: BigNumber;
  netAmount: BigNumber;
}
export type JoinedGameEvent = TypedEvent<[string, BigNumber, BigNumber], JoinedGameEventObject>;

export type JoinedGameEventFilter = TypedEventFilter<JoinedGameEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpdateGameStatsEventObject {
  player: string;
  totalBalance: BigNumber;
  totalGamePrincipal: BigNumber;
  netTotalGamePrincipal: BigNumber;
  totalGameInterest: BigNumber;
  totalIncentiveAmount: BigNumber;
  totalRewardAmounts: BigNumber[];
  impermanentLossShare: BigNumber;
}
export type UpdateGameStatsEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber[], BigNumber],
  UpdateGameStatsEventObject
>;

export type UpdateGameStatsEventFilter = TypedEventFilter<UpdateGameStatsEvent>;

export interface WithdrawInboundTokensEventObject {
  player: string;
  amount: BigNumber;
}
export type WithdrawInboundTokensEvent = TypedEvent<[string, BigNumber], WithdrawInboundTokensEventObject>;

export type WithdrawInboundTokensEventFilter = TypedEventFilter<WithdrawInboundTokensEvent>;

export interface WithdrawIncentiveTokenEventObject {
  player: string;
  amount: BigNumber;
}
export type WithdrawIncentiveTokenEvent = TypedEvent<[string, BigNumber], WithdrawIncentiveTokenEventObject>;

export type WithdrawIncentiveTokenEventFilter = TypedEventFilter<WithdrawIncentiveTokenEvent>;

export interface WithdrawRewardTokensEventObject {
  player: string;
  amounts: BigNumber[];
}
export type WithdrawRewardTokensEvent = TypedEvent<[string, BigNumber[]], WithdrawRewardTokensEventObject>;

export type WithdrawRewardTokensEventFilter = TypedEventFilter<WithdrawRewardTokensEvent>;

export interface HalofiAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HalofiAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    activePlayersCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    adminFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    adminFeeAmount(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    adminFeeSet(overrides?: CallOverrides): Promise<[boolean]>;

    adminFeeWithdraw(
      _minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    adminWithdraw(overrides?: CallOverrides): Promise<[boolean]>;

    allowRenouncingOwnership(overrides?: CallOverrides): Promise<[boolean]>;

    cumulativePlayerIndexSum(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    depositCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositRoundInterestSharePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    disableClaimingRewardTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    disableRewardTokenClaim(overrides?: CallOverrides): Promise<[boolean]>;

    earlyWithdraw(
      _minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    earlyWithdrawalFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyWithdraw(overrides?: CallOverrides): Promise<[boolean]>;

    enableEmergencyWithdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    firstSegmentStart(overrides?: CallOverrides): Promise<[BigNumber]>;

    flexibleSegmentPayment(overrides?: CallOverrides): Promise<[boolean]>;

    getCurrentSegment(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNumberOfPlayers(overrides?: CallOverrides): Promise<[BigNumber]>;

    impermanentLossShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    inboundToken(overrides?: CallOverrides): Promise<[string]>;

    incentiveToken(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _incentiveToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isGameCompleted(overrides?: CallOverrides): Promise<[boolean]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isTransactionalToken(overrides?: CallOverrides): Promise<[boolean]>;

    isWinner(_player: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    iterablePlayers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    joinGame(
      _minAmount: PromiseOrValue<BigNumberish>,
      _depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    lowerEarlyWithdrawFee(
      _newEarlyWithdrawFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    makeDeposit(
      _minAmount: PromiseOrValue<BigNumberish>,
      _depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    maxFlexibleSegmentPaymentAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxPlayersCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    netTotalGamePrincipal(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    playerIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    players(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, boolean, boolean, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        withdrawn: boolean;
        canRejoin: boolean;
        isWinner: boolean;
        addr: string;
        withdrawalSegment: BigNumber;
        mostRecentSegmentPaid: BigNumber;
        amountPaid: BigNumber;
        netAmountPaid: BigNumber;
        depositAmount: BigNumber;
      }
    >;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    rewardTokenAmounts(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    segmentCounter(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    segmentLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    segmentPayment(overrides?: CallOverrides): Promise<[BigNumber]>;

    setIncentiveToken(
      _incentiveToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    strategy(overrides?: CallOverrides): Promise<[string]>;

    totalGameInterest(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalGamePrincipal(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalIncentiveAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalWinnerDepositsPerSegment(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unlockRenounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    waitingRoundSegmentLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    waitingRoundSegmentStart(overrides?: CallOverrides): Promise<[BigNumber]>;

    winnerCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    winnersLeftToWithdraw(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  activePlayersCount(overrides?: CallOverrides): Promise<BigNumber>;

  adminFee(overrides?: CallOverrides): Promise<BigNumber>;

  adminFeeAmount(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  adminFeeSet(overrides?: CallOverrides): Promise<boolean>;

  adminFeeWithdraw(
    _minAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  adminWithdraw(overrides?: CallOverrides): Promise<boolean>;

  allowRenouncingOwnership(overrides?: CallOverrides): Promise<boolean>;

  cumulativePlayerIndexSum(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  depositCount(overrides?: CallOverrides): Promise<BigNumber>;

  depositRoundInterestSharePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  disableClaimingRewardTokens(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  disableRewardTokenClaim(overrides?: CallOverrides): Promise<boolean>;

  earlyWithdraw(
    _minAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  earlyWithdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyWithdraw(overrides?: CallOverrides): Promise<boolean>;

  enableEmergencyWithdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  firstSegmentStart(overrides?: CallOverrides): Promise<BigNumber>;

  flexibleSegmentPayment(overrides?: CallOverrides): Promise<boolean>;

  getCurrentSegment(overrides?: CallOverrides): Promise<BigNumber>;

  getNumberOfPlayers(overrides?: CallOverrides): Promise<BigNumber>;

  impermanentLossShare(overrides?: CallOverrides): Promise<BigNumber>;

  inboundToken(overrides?: CallOverrides): Promise<string>;

  incentiveToken(overrides?: CallOverrides): Promise<string>;

  initialize(
    _incentiveToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isGameCompleted(overrides?: CallOverrides): Promise<boolean>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  isTransactionalToken(overrides?: CallOverrides): Promise<boolean>;

  isWinner(_player: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  iterablePlayers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  joinGame(
    _minAmount: PromiseOrValue<BigNumberish>,
    _depositAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  lowerEarlyWithdrawFee(
    _newEarlyWithdrawFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  makeDeposit(
    _minAmount: PromiseOrValue<BigNumberish>,
    _depositAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  maxFlexibleSegmentPaymentAmount(overrides?: CallOverrides): Promise<BigNumber>;

  maxPlayersCount(overrides?: CallOverrides): Promise<BigNumber>;

  netTotalGamePrincipal(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  playerIndex(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  players(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [boolean, boolean, boolean, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      withdrawn: boolean;
      canRejoin: boolean;
      isWinner: boolean;
      addr: string;
      withdrawalSegment: BigNumber;
      mostRecentSegmentPaid: BigNumber;
      amountPaid: BigNumber;
      netAmountPaid: BigNumber;
      depositAmount: BigNumber;
    }
  >;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  rewardTokenAmounts(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  rewardTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  segmentCounter(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  segmentLength(overrides?: CallOverrides): Promise<BigNumber>;

  segmentPayment(overrides?: CallOverrides): Promise<BigNumber>;

  setIncentiveToken(
    _incentiveToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  strategy(overrides?: CallOverrides): Promise<string>;

  totalGameInterest(overrides?: CallOverrides): Promise<BigNumber>;

  totalGamePrincipal(overrides?: CallOverrides): Promise<BigNumber>;

  totalIncentiveAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalWinnerDepositsPerSegment(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unlockRenounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  waitingRoundSegmentLength(overrides?: CallOverrides): Promise<BigNumber>;

  waitingRoundSegmentStart(overrides?: CallOverrides): Promise<BigNumber>;

  winnerCount(overrides?: CallOverrides): Promise<BigNumber>;

  winnersLeftToWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _minAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    activePlayersCount(overrides?: CallOverrides): Promise<BigNumber>;

    adminFee(overrides?: CallOverrides): Promise<BigNumber>;

    adminFeeAmount(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    adminFeeSet(overrides?: CallOverrides): Promise<boolean>;

    adminFeeWithdraw(_minAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    adminWithdraw(overrides?: CallOverrides): Promise<boolean>;

    allowRenouncingOwnership(overrides?: CallOverrides): Promise<boolean>;

    cumulativePlayerIndexSum(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    depositCount(overrides?: CallOverrides): Promise<BigNumber>;

    depositRoundInterestSharePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    disableClaimingRewardTokens(overrides?: CallOverrides): Promise<void>;

    disableRewardTokenClaim(overrides?: CallOverrides): Promise<boolean>;

    earlyWithdraw(_minAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    earlyWithdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(overrides?: CallOverrides): Promise<boolean>;

    enableEmergencyWithdraw(overrides?: CallOverrides): Promise<void>;

    firstSegmentStart(overrides?: CallOverrides): Promise<BigNumber>;

    flexibleSegmentPayment(overrides?: CallOverrides): Promise<boolean>;

    getCurrentSegment(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfPlayers(overrides?: CallOverrides): Promise<BigNumber>;

    impermanentLossShare(overrides?: CallOverrides): Promise<BigNumber>;

    inboundToken(overrides?: CallOverrides): Promise<string>;

    incentiveToken(overrides?: CallOverrides): Promise<string>;

    initialize(_incentiveToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    isGameCompleted(overrides?: CallOverrides): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    isTransactionalToken(overrides?: CallOverrides): Promise<boolean>;

    isWinner(_player: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    iterablePlayers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    joinGame(
      _minAmount: PromiseOrValue<BigNumberish>,
      _depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    lowerEarlyWithdrawFee(_newEarlyWithdrawFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    makeDeposit(
      _minAmount: PromiseOrValue<BigNumberish>,
      _depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    maxFlexibleSegmentPaymentAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxPlayersCount(overrides?: CallOverrides): Promise<BigNumber>;

    netTotalGamePrincipal(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    playerIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    players(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, boolean, boolean, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        withdrawn: boolean;
        canRejoin: boolean;
        isWinner: boolean;
        addr: string;
        withdrawalSegment: BigNumber;
        mostRecentSegmentPaid: BigNumber;
        amountPaid: BigNumber;
        netAmountPaid: BigNumber;
        depositAmount: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardTokenAmounts(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    segmentCounter(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    segmentLength(overrides?: CallOverrides): Promise<BigNumber>;

    segmentPayment(overrides?: CallOverrides): Promise<BigNumber>;

    setIncentiveToken(_incentiveToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    strategy(overrides?: CallOverrides): Promise<string>;

    totalGameInterest(overrides?: CallOverrides): Promise<BigNumber>;

    totalGamePrincipal(overrides?: CallOverrides): Promise<BigNumber>;

    totalIncentiveAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalWinnerDepositsPerSegment(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    unlockRenounceOwnership(overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    waitingRoundSegmentLength(overrides?: CallOverrides): Promise<BigNumber>;

    waitingRoundSegmentStart(overrides?: CallOverrides): Promise<BigNumber>;

    winnerCount(overrides?: CallOverrides): Promise<BigNumber>;

    winnersLeftToWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(_minAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'AdminFee(uint256[])'(adminFeeAmounts?: null): AdminFeeEventFilter;
    AdminFee(adminFeeAmounts?: null): AdminFeeEventFilter;

    'AdminWithdrawal(address,uint256,uint256,uint256[])'(
      admin?: PromiseOrValue<string> | null,
      totalGameInterest?: null,
      adminIncentiveAmount?: null,
      adminFeeAmounts?: null,
    ): AdminWithdrawalEventFilter;
    AdminWithdrawal(
      admin?: PromiseOrValue<string> | null,
      totalGameInterest?: null,
      adminIncentiveAmount?: null,
      adminFeeAmounts?: null,
    ): AdminWithdrawalEventFilter;

    'ClaimRewardTokensDisabled(uint64)'(currentSegment?: null): ClaimRewardTokensDisabledEventFilter;
    ClaimRewardTokensDisabled(currentSegment?: null): ClaimRewardTokensDisabledEventFilter;

    'Deposit(address,uint256,uint256,uint256)'(
      player?: PromiseOrValue<string> | null,
      segment?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      netAmount?: null,
    ): DepositEventFilter;
    Deposit(
      player?: PromiseOrValue<string> | null,
      segment?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      netAmount?: null,
    ): DepositEventFilter;

    'EarlyWithdrawal(address,uint256,uint256,uint256,uint256,uint256)'(
      player?: PromiseOrValue<string> | null,
      amount?: null,
      totalGamePrincipal?: null,
      netTotalGamePrincipal?: null,
      depositedAmount?: null,
      depositedNetAmount?: null,
    ): EarlyWithdrawalEventFilter;
    EarlyWithdrawal(
      player?: PromiseOrValue<string> | null,
      amount?: null,
      totalGamePrincipal?: null,
      netTotalGamePrincipal?: null,
      depositedAmount?: null,
      depositedNetAmount?: null,
    ): EarlyWithdrawalEventFilter;

    'EarlyWithdrawalFeeChanged(uint64,uint64,uint64)'(
      currentSegment?: null,
      oldFee?: null,
      newFee?: null,
    ): EarlyWithdrawalFeeChangedEventFilter;
    EarlyWithdrawalFeeChanged(
      currentSegment?: null,
      oldFee?: null,
      newFee?: null,
    ): EarlyWithdrawalFeeChangedEventFilter;

    'EmergencyWithdrawalEnabled(uint64,uint64,uint64)'(
      currentSegment?: null,
      winnerCount?: null,
      depositRoundInterestSharePercentage?: null,
    ): EmergencyWithdrawalEnabledEventFilter;
    EmergencyWithdrawalEnabled(
      currentSegment?: null,
      winnerCount?: null,
      depositRoundInterestSharePercentage?: null,
    ): EmergencyWithdrawalEnabledEventFilter;

    'EndGameStats(address,uint256,uint256,uint256,uint256,uint256[],uint256,uint256)'(
      player?: PromiseOrValue<string> | null,
      totalBalance?: null,
      totalGamePrincipal?: null,
      netTotalGamePricipal?: null,
      totalGameInterest?: null,
      grossRewardTokenAmount?: null,
      totalIncentiveAmount?: null,
      impermanentLossShare?: null,
    ): EndGameStatsEventFilter;
    EndGameStats(
      player?: PromiseOrValue<string> | null,
      totalBalance?: null,
      totalGamePrincipal?: null,
      netTotalGamePricipal?: null,
      totalGameInterest?: null,
      grossRewardTokenAmount?: null,
      totalIncentiveAmount?: null,
      impermanentLossShare?: null,
    ): EndGameStatsEventFilter;

    'ExternalTokenGetBalanceError(address,bytes)'(
      token?: PromiseOrValue<string> | null,
      reason?: null,
    ): ExternalTokenGetBalanceErrorEventFilter;
    ExternalTokenGetBalanceError(
      token?: PromiseOrValue<string> | null,
      reason?: null,
    ): ExternalTokenGetBalanceErrorEventFilter;

    'ExternalTokenTransferError(address,bytes)'(
      token?: PromiseOrValue<string> | null,
      reason?: null,
    ): ExternalTokenTransferErrorEventFilter;
    ExternalTokenTransferError(
      token?: PromiseOrValue<string> | null,
      reason?: null,
    ): ExternalTokenTransferErrorEventFilter;

    'IncentiveTokenSet(address)'(token?: null): IncentiveTokenSetEventFilter;
    IncentiveTokenSet(token?: null): IncentiveTokenSetEventFilter;

    'Initialized(uint64,uint64)'(firstSegmentStart?: null, waitingRoundSegmentStart?: null): InitializedEventFilter;
    Initialized(firstSegmentStart?: null, waitingRoundSegmentStart?: null): InitializedEventFilter;

    'JoinedGame(address,uint256,uint256)'(
      player?: PromiseOrValue<string> | null,
      amount?: null,
      netAmount?: null,
    ): JoinedGameEventFilter;
    JoinedGame(player?: PromiseOrValue<string> | null, amount?: null, netAmount?: null): JoinedGameEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'UpdateGameStats(address,uint256,uint256,uint256,uint256,uint256,uint256[],uint256)'(
      player?: PromiseOrValue<string> | null,
      totalBalance?: null,
      totalGamePrincipal?: null,
      netTotalGamePrincipal?: null,
      totalGameInterest?: null,
      totalIncentiveAmount?: null,
      totalRewardAmounts?: null,
      impermanentLossShare?: null,
    ): UpdateGameStatsEventFilter;
    UpdateGameStats(
      player?: PromiseOrValue<string> | null,
      totalBalance?: null,
      totalGamePrincipal?: null,
      netTotalGamePrincipal?: null,
      totalGameInterest?: null,
      totalIncentiveAmount?: null,
      totalRewardAmounts?: null,
      impermanentLossShare?: null,
    ): UpdateGameStatsEventFilter;

    'WithdrawInboundTokens(address,uint256)'(
      player?: PromiseOrValue<string> | null,
      amount?: null,
    ): WithdrawInboundTokensEventFilter;
    WithdrawInboundTokens(player?: PromiseOrValue<string> | null, amount?: null): WithdrawInboundTokensEventFilter;

    'WithdrawIncentiveToken(address,uint256)'(
      player?: PromiseOrValue<string> | null,
      amount?: null,
    ): WithdrawIncentiveTokenEventFilter;
    WithdrawIncentiveToken(player?: PromiseOrValue<string> | null, amount?: null): WithdrawIncentiveTokenEventFilter;

    'WithdrawRewardTokens(address,uint256[])'(
      player?: PromiseOrValue<string> | null,
      amounts?: null,
    ): WithdrawRewardTokensEventFilter;
    WithdrawRewardTokens(player?: PromiseOrValue<string> | null, amounts?: null): WithdrawRewardTokensEventFilter;
  };

  estimateGas: {
    MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    activePlayersCount(overrides?: CallOverrides): Promise<BigNumber>;

    adminFee(overrides?: CallOverrides): Promise<BigNumber>;

    adminFeeAmount(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    adminFeeSet(overrides?: CallOverrides): Promise<BigNumber>;

    adminFeeWithdraw(
      _minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    adminWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    allowRenouncingOwnership(overrides?: CallOverrides): Promise<BigNumber>;

    cumulativePlayerIndexSum(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    depositCount(overrides?: CallOverrides): Promise<BigNumber>;

    depositRoundInterestSharePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    disableClaimingRewardTokens(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    disableRewardTokenClaim(overrides?: CallOverrides): Promise<BigNumber>;

    earlyWithdraw(
      _minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    earlyWithdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    enableEmergencyWithdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    firstSegmentStart(overrides?: CallOverrides): Promise<BigNumber>;

    flexibleSegmentPayment(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentSegment(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfPlayers(overrides?: CallOverrides): Promise<BigNumber>;

    impermanentLossShare(overrides?: CallOverrides): Promise<BigNumber>;

    inboundToken(overrides?: CallOverrides): Promise<BigNumber>;

    incentiveToken(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _incentiveToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isGameCompleted(overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isTransactionalToken(overrides?: CallOverrides): Promise<BigNumber>;

    isWinner(_player: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    iterablePlayers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    joinGame(
      _minAmount: PromiseOrValue<BigNumberish>,
      _depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    lowerEarlyWithdrawFee(
      _newEarlyWithdrawFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    makeDeposit(
      _minAmount: PromiseOrValue<BigNumberish>,
      _depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    maxFlexibleSegmentPaymentAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxPlayersCount(overrides?: CallOverrides): Promise<BigNumber>;

    netTotalGamePrincipal(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    playerIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    players(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    rewardTokenAmounts(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    segmentCounter(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    segmentLength(overrides?: CallOverrides): Promise<BigNumber>;

    segmentPayment(overrides?: CallOverrides): Promise<BigNumber>;

    setIncentiveToken(
      _incentiveToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    strategy(overrides?: CallOverrides): Promise<BigNumber>;

    totalGameInterest(overrides?: CallOverrides): Promise<BigNumber>;

    totalGamePrincipal(overrides?: CallOverrides): Promise<BigNumber>;

    totalIncentiveAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalWinnerDepositsPerSegment(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unlockRenounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    waitingRoundSegmentLength(overrides?: CallOverrides): Promise<BigNumber>;

    waitingRoundSegmentStart(overrides?: CallOverrides): Promise<BigNumber>;

    winnerCount(overrides?: CallOverrides): Promise<BigNumber>;

    winnersLeftToWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MULTIPLIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activePlayersCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminFeeAmount(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminFeeSet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminFeeWithdraw(
      _minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    adminWithdraw(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowRenouncingOwnership(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cumulativePlayerIndexSum(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    depositCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositRoundInterestSharePercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableClaimingRewardTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    disableRewardTokenClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earlyWithdraw(
      _minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    earlyWithdrawalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enableEmergencyWithdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    firstSegmentStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flexibleSegmentPayment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentSegment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumberOfPlayers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    impermanentLossShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inboundToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incentiveToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _incentiveToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isGameCompleted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTransactionalToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWinner(_player: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    iterablePlayers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    joinGame(
      _minAmount: PromiseOrValue<BigNumberish>,
      _depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    lowerEarlyWithdrawFee(
      _newEarlyWithdrawFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    makeDeposit(
      _minAmount: PromiseOrValue<BigNumberish>,
      _depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    maxFlexibleSegmentPaymentAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxPlayersCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    netTotalGamePrincipal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playerIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    players(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    rewardTokenAmounts(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    segmentCounter(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    segmentLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    segmentPayment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setIncentiveToken(
      _incentiveToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    strategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalGameInterest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalGamePrincipal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalIncentiveAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalWinnerDepositsPerSegment(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unlockRenounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    waitingRoundSegmentLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    waitingRoundSegmentStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    winnerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    winnersLeftToWithdraw(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
