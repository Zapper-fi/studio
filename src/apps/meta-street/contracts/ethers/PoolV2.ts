/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace WeightedInterestRateModel {
  export type ParametersStruct = {
    tickThreshold: PromiseOrValue<BigNumberish>;
    tickExponential: PromiseOrValue<BigNumberish>;
  };

  export type ParametersStructOutput = [BigNumber, BigNumber] & {
    tickThreshold: BigNumber;
    tickExponential: BigNumber;
  };
}

export declare namespace LoanReceipt {
  export type NodeReceiptStruct = {
    tick: PromiseOrValue<BigNumberish>;
    used: PromiseOrValue<BigNumberish>;
    pending: PromiseOrValue<BigNumberish>;
  };

  export type NodeReceiptStructOutput = [BigNumber, BigNumber, BigNumber] & {
    tick: BigNumber;
    used: BigNumber;
    pending: BigNumber;
  };

  export type LoanReceiptV2Struct = {
    version: PromiseOrValue<BigNumberish>;
    principal: PromiseOrValue<BigNumberish>;
    repayment: PromiseOrValue<BigNumberish>;
    adminFee: PromiseOrValue<BigNumberish>;
    borrower: PromiseOrValue<string>;
    maturity: PromiseOrValue<BigNumberish>;
    duration: PromiseOrValue<BigNumberish>;
    collateralToken: PromiseOrValue<string>;
    collateralTokenId: PromiseOrValue<BigNumberish>;
    collateralWrapperContextLen: PromiseOrValue<BigNumberish>;
    collateralWrapperContext: PromiseOrValue<BytesLike>;
    nodeReceipts: LoanReceipt.NodeReceiptStruct[];
  };

  export type LoanReceiptV2StructOutput = [
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    number,
    string,
    LoanReceipt.NodeReceiptStructOutput[],
  ] & {
    version: number;
    principal: BigNumber;
    repayment: BigNumber;
    adminFee: BigNumber;
    borrower: string;
    maturity: BigNumber;
    duration: BigNumber;
    collateralToken: string;
    collateralTokenId: BigNumber;
    collateralWrapperContextLen: number;
    collateralWrapperContext: string;
    nodeReceipts: LoanReceipt.NodeReceiptStructOutput[];
  };
}

export declare namespace ILiquidity {
  export type NodeInfoStruct = {
    tick: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>;
    shares: PromiseOrValue<BigNumberish>;
    available: PromiseOrValue<BigNumberish>;
    pending: PromiseOrValue<BigNumberish>;
    redemptions: PromiseOrValue<BigNumberish>;
    prev: PromiseOrValue<BigNumberish>;
    next: PromiseOrValue<BigNumberish>;
  };

  export type NodeInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    tick: BigNumber;
    value: BigNumber;
    shares: BigNumber;
    available: BigNumber;
    pending: BigNumber;
    redemptions: BigNumber;
    prev: BigNumber;
    next: BigNumber;
  };

  export type AccrualInfoStruct = {
    accrued: PromiseOrValue<BigNumberish>;
    rate: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type AccrualInfoStructOutput = [BigNumber, BigNumber, BigNumber] & {
    accrued: BigNumber;
    rate: BigNumber;
    timestamp: BigNumber;
  };
}

export declare namespace Pool {
  export type RedemptionStruct = {
    pending: PromiseOrValue<BigNumberish>;
    index: PromiseOrValue<BigNumberish>;
    target: PromiseOrValue<BigNumberish>;
  };

  export type RedemptionStructOutput = [BigNumber, BigNumber, BigNumber] & {
    pending: BigNumber;
    index: BigNumber;
    target: BigNumber;
  };
}

export interface PoolV2Interface extends utils.Interface {
  functions: {
    'BORROWER_SURPLUS_SPLIT_BASIS_POINTS()': FunctionFragment;
    'COLLATERAL_FILTER_NAME()': FunctionFragment;
    'COLLATERAL_FILTER_VERSION()': FunctionFragment;
    'IMPLEMENTATION_NAME()': FunctionFragment;
    'IMPLEMENTATION_VERSION()': FunctionFragment;
    'INTEREST_RATE_MODEL_NAME()': FunctionFragment;
    'INTEREST_RATE_MODEL_VERSION()': FunctionFragment;
    'TICK_LIMIT_SPACING_BASIS_POINTS()': FunctionFragment;
    'admin()': FunctionFragment;
    'adminFeeBalance()': FunctionFragment;
    'adminFeeRate()': FunctionFragment;
    'borrow(uint256,uint64,address,uint256,uint256,uint128[],bytes)': FunctionFragment;
    'collateralLiquidator()': FunctionFragment;
    'collateralToken()': FunctionFragment;
    'collateralWrappers()': FunctionFragment;
    'currencyToken()': FunctionFragment;
    'decodeLoanReceipt(bytes)': FunctionFragment;
    'delegationRegistry()': FunctionFragment;
    'deposit(uint128,uint256,uint256)': FunctionFragment;
    'deposits(address,uint128)': FunctionFragment;
    'durations()': FunctionFragment;
    'initialize(bytes)': FunctionFragment;
    'liquidate(bytes)': FunctionFragment;
    'liquidityNode(uint128)': FunctionFragment;
    'liquidityNodeWithAccrual(uint128)': FunctionFragment;
    'liquidityNodes(uint128,uint128)': FunctionFragment;
    'loans(bytes32)': FunctionFragment;
    'multicall(bytes[])': FunctionFragment;
    'onCollateralLiquidated(bytes,uint256)': FunctionFragment;
    'quote(uint256,uint64,address,uint256[],uint256,uint128[],bytes)': FunctionFragment;
    'rates()': FunctionFragment;
    'rebalance(uint128,uint128,uint128,uint256)': FunctionFragment;
    'redeem(uint128,uint256)': FunctionFragment;
    'redemptionAvailable(address,uint128,uint128)': FunctionFragment;
    'redemptions(address,uint128,uint128)': FunctionFragment;
    'refinance(bytes,uint256,uint64,uint256,uint128[])': FunctionFragment;
    'repay(bytes)': FunctionFragment;
    'setAdminFeeRate(uint32)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'withdraw(uint128,uint128)': FunctionFragment;
    'withdrawAdminFees(address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BORROWER_SURPLUS_SPLIT_BASIS_POINTS'
      | 'COLLATERAL_FILTER_NAME'
      | 'COLLATERAL_FILTER_VERSION'
      | 'IMPLEMENTATION_NAME'
      | 'IMPLEMENTATION_VERSION'
      | 'INTEREST_RATE_MODEL_NAME'
      | 'INTEREST_RATE_MODEL_VERSION'
      | 'TICK_LIMIT_SPACING_BASIS_POINTS'
      | 'admin'
      | 'adminFeeBalance'
      | 'adminFeeRate'
      | 'borrow'
      | 'collateralLiquidator'
      | 'collateralToken'
      | 'collateralWrappers'
      | 'currencyToken'
      | 'decodeLoanReceipt'
      | 'delegationRegistry'
      | 'deposit'
      | 'deposits'
      | 'durations'
      | 'initialize'
      | 'liquidate'
      | 'liquidityNode'
      | 'liquidityNodeWithAccrual'
      | 'liquidityNodes'
      | 'loans'
      | 'multicall'
      | 'onCollateralLiquidated'
      | 'quote'
      | 'rates'
      | 'rebalance'
      | 'redeem'
      | 'redemptionAvailable'
      | 'redemptions'
      | 'refinance'
      | 'repay'
      | 'setAdminFeeRate'
      | 'supportsInterface'
      | 'withdraw'
      | 'withdrawAdminFees',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BORROWER_SURPLUS_SPLIT_BASIS_POINTS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'COLLATERAL_FILTER_NAME', values?: undefined): string;
  encodeFunctionData(functionFragment: 'COLLATERAL_FILTER_VERSION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'IMPLEMENTATION_NAME', values?: undefined): string;
  encodeFunctionData(functionFragment: 'IMPLEMENTATION_VERSION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'INTEREST_RATE_MODEL_NAME', values?: undefined): string;
  encodeFunctionData(functionFragment: 'INTEREST_RATE_MODEL_VERSION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'TICK_LIMIT_SPACING_BASIS_POINTS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'adminFeeBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'adminFeeRate', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'borrow',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'collateralLiquidator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'collateralToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'collateralWrappers', values?: undefined): string;
  encodeFunctionData(functionFragment: 'currencyToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decodeLoanReceipt', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'delegationRegistry', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposits',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'durations', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'liquidate', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'liquidityNode', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'liquidityNodeWithAccrual', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'liquidityNodes',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'loans', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'multicall', values: [PromiseOrValue<BytesLike>[]]): string;
  encodeFunctionData(
    functionFragment: 'onCollateralLiquidated',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'quote',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'rates', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'rebalance',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'redeem',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'redemptionAvailable',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'redemptions',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'refinance',
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
    ],
  ): string;
  encodeFunctionData(functionFragment: 'repay', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'setAdminFeeRate', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawAdminFees',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'BORROWER_SURPLUS_SPLIT_BASIS_POINTS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'COLLATERAL_FILTER_NAME', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'COLLATERAL_FILTER_VERSION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'IMPLEMENTATION_NAME', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'IMPLEMENTATION_VERSION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'INTEREST_RATE_MODEL_NAME', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'INTEREST_RATE_MODEL_VERSION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'TICK_LIMIT_SPACING_BASIS_POINTS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adminFeeBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adminFeeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateralLiquidator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateralToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateralWrappers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currencyToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decodeLoanReceipt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegationRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'durations', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidityNode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidityNodeWithAccrual', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidityNodes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'loans', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'multicall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onCollateralLiquidated', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'quote', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rates', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rebalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redemptionAvailable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redemptions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'refinance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAdminFeeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAdminFees', data: BytesLike): Result;

  events: {
    'AdminFeeRateUpdated(uint256)': EventFragment;
    'AdminFeesWithdrawn(address,uint256)': EventFragment;
    'CollateralLiquidated(bytes32,uint256,uint256)': EventFragment;
    'Deposited(address,uint128,uint256,uint256)': EventFragment;
    'LoanLiquidated(bytes32)': EventFragment;
    'LoanOriginated(bytes32,bytes)': EventFragment;
    'LoanRepaid(bytes32,uint256)': EventFragment;
    'Redeemed(address,uint128,uint128,uint256)': EventFragment;
    'Withdrawn(address,uint128,uint128,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminFeeRateUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AdminFeesWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralLiquidated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LoanLiquidated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LoanOriginated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LoanRepaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Redeemed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdrawn'): EventFragment;
}

export interface AdminFeeRateUpdatedEventObject {
  rate: BigNumber;
}
export type AdminFeeRateUpdatedEvent = TypedEvent<[BigNumber], AdminFeeRateUpdatedEventObject>;

export type AdminFeeRateUpdatedEventFilter = TypedEventFilter<AdminFeeRateUpdatedEvent>;

export interface AdminFeesWithdrawnEventObject {
  account: string;
  amount: BigNumber;
}
export type AdminFeesWithdrawnEvent = TypedEvent<[string, BigNumber], AdminFeesWithdrawnEventObject>;

export type AdminFeesWithdrawnEventFilter = TypedEventFilter<AdminFeesWithdrawnEvent>;

export interface CollateralLiquidatedEventObject {
  loanReceiptHash: string;
  proceeds: BigNumber;
  borrowerProceeds: BigNumber;
}
export type CollateralLiquidatedEvent = TypedEvent<[string, BigNumber, BigNumber], CollateralLiquidatedEventObject>;

export type CollateralLiquidatedEventFilter = TypedEventFilter<CollateralLiquidatedEvent>;

export interface DepositedEventObject {
  account: string;
  tick: BigNumber;
  amount: BigNumber;
  shares: BigNumber;
}
export type DepositedEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], DepositedEventObject>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface LoanLiquidatedEventObject {
  loanReceiptHash: string;
}
export type LoanLiquidatedEvent = TypedEvent<[string], LoanLiquidatedEventObject>;

export type LoanLiquidatedEventFilter = TypedEventFilter<LoanLiquidatedEvent>;

export interface LoanOriginatedEventObject {
  loanReceiptHash: string;
  loanReceipt: string;
}
export type LoanOriginatedEvent = TypedEvent<[string, string], LoanOriginatedEventObject>;

export type LoanOriginatedEventFilter = TypedEventFilter<LoanOriginatedEvent>;

export interface LoanRepaidEventObject {
  loanReceiptHash: string;
  repayment: BigNumber;
}
export type LoanRepaidEvent = TypedEvent<[string, BigNumber], LoanRepaidEventObject>;

export type LoanRepaidEventFilter = TypedEventFilter<LoanRepaidEvent>;

export interface RedeemedEventObject {
  account: string;
  tick: BigNumber;
  redemptionId: BigNumber;
  shares: BigNumber;
}
export type RedeemedEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], RedeemedEventObject>;

export type RedeemedEventFilter = TypedEventFilter<RedeemedEvent>;

export interface WithdrawnEventObject {
  account: string;
  tick: BigNumber;
  redemptionId: BigNumber;
  shares: BigNumber;
  amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber, BigNumber], WithdrawnEventObject>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface PoolV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BORROWER_SURPLUS_SPLIT_BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    COLLATERAL_FILTER_NAME(overrides?: CallOverrides): Promise<[string]>;

    COLLATERAL_FILTER_VERSION(overrides?: CallOverrides): Promise<[string]>;

    IMPLEMENTATION_NAME(overrides?: CallOverrides): Promise<[string]>;

    IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<[string]>;

    INTEREST_RATE_MODEL_NAME(overrides?: CallOverrides): Promise<[string]>;

    INTEREST_RATE_MODEL_VERSION(overrides?: CallOverrides): Promise<[string]>;

    TICK_LIMIT_SPACING_BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    adminFeeBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    adminFeeRate(overrides?: CallOverrides): Promise<[number]>;

    borrow(
      principal: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      collateralToken: PromiseOrValue<string>,
      collateralTokenId: PromiseOrValue<BigNumberish>,
      maxRepayment: PromiseOrValue<BigNumberish>,
      ticks: PromiseOrValue<BigNumberish>[],
      options: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    collateralLiquidator(overrides?: CallOverrides): Promise<[string]>;

    collateralToken(overrides?: CallOverrides): Promise<[string]>;

    collateralWrappers(overrides?: CallOverrides): Promise<[string[]]>;

    currencyToken(overrides?: CallOverrides): Promise<[string]>;

    decodeLoanReceipt(
      loanReceipt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[LoanReceipt.LoanReceiptV2StructOutput]>;

    delegationRegistry(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      tick: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      minShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deposits(
      account: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { shares: BigNumber; redemptionId: BigNumber }>;

    durations(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    initialize(
      params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    liquidate(
      encodedLoanReceipt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    liquidityNode(
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[ILiquidity.NodeInfoStructOutput]>;

    liquidityNodeWithAccrual(
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[ILiquidity.NodeInfoStructOutput, ILiquidity.AccrualInfoStructOutput]>;

    liquidityNodes(
      startTick: PromiseOrValue<BigNumberish>,
      endTick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[ILiquidity.NodeInfoStructOutput[]]>;

    loans(receiptHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[number]>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    onCollateralLiquidated(
      encodedLoanReceipt: PromiseOrValue<BytesLike>,
      proceeds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    quote(
      principal: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      collateralToken: PromiseOrValue<string>,
      collateralTokenIds: PromiseOrValue<BigNumberish>[],
      collateralTokenCount: PromiseOrValue<BigNumberish>,
      ticks: PromiseOrValue<BigNumberish>[],
      options: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    rates(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    rebalance(
      srcTick: PromiseOrValue<BigNumberish>,
      dstTick: PromiseOrValue<BigNumberish>,
      redemptionId: PromiseOrValue<BigNumberish>,
      minShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    redeem(
      tick: PromiseOrValue<BigNumberish>,
      shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    redemptionAvailable(
      account: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      redemptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        shares: BigNumber;
        amount: BigNumber;
        sharesAhead: BigNumber;
      }
    >;

    redemptions(
      account: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      redemptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[Pool.RedemptionStructOutput]>;

    refinance(
      encodedLoanReceipt: PromiseOrValue<BytesLike>,
      principal: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      maxRepayment: PromiseOrValue<BigNumberish>,
      ticks: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    repay(
      encodedLoanReceipt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setAdminFeeRate(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

    withdraw(
      tick: PromiseOrValue<BigNumberish>,
      redemptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawAdminFees(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  BORROWER_SURPLUS_SPLIT_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  COLLATERAL_FILTER_NAME(overrides?: CallOverrides): Promise<string>;

  COLLATERAL_FILTER_VERSION(overrides?: CallOverrides): Promise<string>;

  IMPLEMENTATION_NAME(overrides?: CallOverrides): Promise<string>;

  IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<string>;

  INTEREST_RATE_MODEL_NAME(overrides?: CallOverrides): Promise<string>;

  INTEREST_RATE_MODEL_VERSION(overrides?: CallOverrides): Promise<string>;

  TICK_LIMIT_SPACING_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  adminFeeBalance(overrides?: CallOverrides): Promise<BigNumber>;

  adminFeeRate(overrides?: CallOverrides): Promise<number>;

  borrow(
    principal: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    collateralToken: PromiseOrValue<string>,
    collateralTokenId: PromiseOrValue<BigNumberish>,
    maxRepayment: PromiseOrValue<BigNumberish>,
    ticks: PromiseOrValue<BigNumberish>[],
    options: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  collateralLiquidator(overrides?: CallOverrides): Promise<string>;

  collateralToken(overrides?: CallOverrides): Promise<string>;

  collateralWrappers(overrides?: CallOverrides): Promise<string[]>;

  currencyToken(overrides?: CallOverrides): Promise<string>;

  decodeLoanReceipt(
    loanReceipt: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<LoanReceipt.LoanReceiptV2StructOutput>;

  delegationRegistry(overrides?: CallOverrides): Promise<string>;

  deposit(
    tick: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    minShares: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deposits(
    account: PromiseOrValue<string>,
    tick: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { shares: BigNumber; redemptionId: BigNumber }>;

  durations(overrides?: CallOverrides): Promise<BigNumber[]>;

  initialize(
    params: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  liquidate(
    encodedLoanReceipt: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  liquidityNode(
    tick: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<ILiquidity.NodeInfoStructOutput>;

  liquidityNodeWithAccrual(
    tick: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[ILiquidity.NodeInfoStructOutput, ILiquidity.AccrualInfoStructOutput]>;

  liquidityNodes(
    startTick: PromiseOrValue<BigNumberish>,
    endTick: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<ILiquidity.NodeInfoStructOutput[]>;

  loans(receiptHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<number>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  onCollateralLiquidated(
    encodedLoanReceipt: PromiseOrValue<BytesLike>,
    proceeds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  quote(
    principal: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    collateralToken: PromiseOrValue<string>,
    collateralTokenIds: PromiseOrValue<BigNumberish>[],
    collateralTokenCount: PromiseOrValue<BigNumberish>,
    ticks: PromiseOrValue<BigNumberish>[],
    options: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  rates(overrides?: CallOverrides): Promise<BigNumber[]>;

  rebalance(
    srcTick: PromiseOrValue<BigNumberish>,
    dstTick: PromiseOrValue<BigNumberish>,
    redemptionId: PromiseOrValue<BigNumberish>,
    minShares: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  redeem(
    tick: PromiseOrValue<BigNumberish>,
    shares: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  redemptionAvailable(
    account: PromiseOrValue<string>,
    tick: PromiseOrValue<BigNumberish>,
    redemptionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      shares: BigNumber;
      amount: BigNumber;
      sharesAhead: BigNumber;
    }
  >;

  redemptions(
    account: PromiseOrValue<string>,
    tick: PromiseOrValue<BigNumberish>,
    redemptionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<Pool.RedemptionStructOutput>;

  refinance(
    encodedLoanReceipt: PromiseOrValue<BytesLike>,
    principal: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    maxRepayment: PromiseOrValue<BigNumberish>,
    ticks: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  repay(
    encodedLoanReceipt: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setAdminFeeRate(
    rate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  withdraw(
    tick: PromiseOrValue<BigNumberish>,
    redemptionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawAdminFees(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    BORROWER_SURPLUS_SPLIT_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    COLLATERAL_FILTER_NAME(overrides?: CallOverrides): Promise<string>;

    COLLATERAL_FILTER_VERSION(overrides?: CallOverrides): Promise<string>;

    IMPLEMENTATION_NAME(overrides?: CallOverrides): Promise<string>;

    IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<string>;

    INTEREST_RATE_MODEL_NAME(overrides?: CallOverrides): Promise<string>;

    INTEREST_RATE_MODEL_VERSION(overrides?: CallOverrides): Promise<string>;

    TICK_LIMIT_SPACING_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    adminFeeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    adminFeeRate(overrides?: CallOverrides): Promise<number>;

    borrow(
      principal: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      collateralToken: PromiseOrValue<string>,
      collateralTokenId: PromiseOrValue<BigNumberish>,
      maxRepayment: PromiseOrValue<BigNumberish>,
      ticks: PromiseOrValue<BigNumberish>[],
      options: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    collateralLiquidator(overrides?: CallOverrides): Promise<string>;

    collateralToken(overrides?: CallOverrides): Promise<string>;

    collateralWrappers(overrides?: CallOverrides): Promise<string[]>;

    currencyToken(overrides?: CallOverrides): Promise<string>;

    decodeLoanReceipt(
      loanReceipt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<LoanReceipt.LoanReceiptV2StructOutput>;

    delegationRegistry(overrides?: CallOverrides): Promise<string>;

    deposit(
      tick: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      minShares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    deposits(
      account: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { shares: BigNumber; redemptionId: BigNumber }>;

    durations(overrides?: CallOverrides): Promise<BigNumber[]>;

    initialize(params: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    liquidate(encodedLoanReceipt: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    liquidityNode(
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<ILiquidity.NodeInfoStructOutput>;

    liquidityNodeWithAccrual(
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[ILiquidity.NodeInfoStructOutput, ILiquidity.AccrualInfoStructOutput]>;

    liquidityNodes(
      startTick: PromiseOrValue<BigNumberish>,
      endTick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<ILiquidity.NodeInfoStructOutput[]>;

    loans(receiptHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<number>;

    multicall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string[]>;

    onCollateralLiquidated(
      encodedLoanReceipt: PromiseOrValue<BytesLike>,
      proceeds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    quote(
      principal: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      collateralToken: PromiseOrValue<string>,
      collateralTokenIds: PromiseOrValue<BigNumberish>[],
      collateralTokenCount: PromiseOrValue<BigNumberish>,
      ticks: PromiseOrValue<BigNumberish>[],
      options: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    rates(overrides?: CallOverrides): Promise<BigNumber[]>;

    rebalance(
      srcTick: PromiseOrValue<BigNumberish>,
      dstTick: PromiseOrValue<BigNumberish>,
      redemptionId: PromiseOrValue<BigNumberish>,
      minShares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    redeem(
      tick: PromiseOrValue<BigNumberish>,
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    redemptionAvailable(
      account: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      redemptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        shares: BigNumber;
        amount: BigNumber;
        sharesAhead: BigNumber;
      }
    >;

    redemptions(
      account: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      redemptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<Pool.RedemptionStructOutput>;

    refinance(
      encodedLoanReceipt: PromiseOrValue<BytesLike>,
      principal: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      maxRepayment: PromiseOrValue<BigNumberish>,
      ticks: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    repay(encodedLoanReceipt: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    setAdminFeeRate(rate: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    withdraw(
      tick: PromiseOrValue<BigNumberish>,
      redemptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    withdrawAdminFees(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'AdminFeeRateUpdated(uint256)'(rate?: null): AdminFeeRateUpdatedEventFilter;
    AdminFeeRateUpdated(rate?: null): AdminFeeRateUpdatedEventFilter;

    'AdminFeesWithdrawn(address,uint256)'(
      account?: PromiseOrValue<string> | null,
      amount?: null,
    ): AdminFeesWithdrawnEventFilter;
    AdminFeesWithdrawn(account?: PromiseOrValue<string> | null, amount?: null): AdminFeesWithdrawnEventFilter;

    'CollateralLiquidated(bytes32,uint256,uint256)'(
      loanReceiptHash?: PromiseOrValue<BytesLike> | null,
      proceeds?: null,
      borrowerProceeds?: null,
    ): CollateralLiquidatedEventFilter;
    CollateralLiquidated(
      loanReceiptHash?: PromiseOrValue<BytesLike> | null,
      proceeds?: null,
      borrowerProceeds?: null,
    ): CollateralLiquidatedEventFilter;

    'Deposited(address,uint128,uint256,uint256)'(
      account?: PromiseOrValue<string> | null,
      tick?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      shares?: null,
    ): DepositedEventFilter;
    Deposited(
      account?: PromiseOrValue<string> | null,
      tick?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      shares?: null,
    ): DepositedEventFilter;

    'LoanLiquidated(bytes32)'(loanReceiptHash?: PromiseOrValue<BytesLike> | null): LoanLiquidatedEventFilter;
    LoanLiquidated(loanReceiptHash?: PromiseOrValue<BytesLike> | null): LoanLiquidatedEventFilter;

    'LoanOriginated(bytes32,bytes)'(
      loanReceiptHash?: PromiseOrValue<BytesLike> | null,
      loanReceipt?: null,
    ): LoanOriginatedEventFilter;
    LoanOriginated(loanReceiptHash?: PromiseOrValue<BytesLike> | null, loanReceipt?: null): LoanOriginatedEventFilter;

    'LoanRepaid(bytes32,uint256)'(
      loanReceiptHash?: PromiseOrValue<BytesLike> | null,
      repayment?: null,
    ): LoanRepaidEventFilter;
    LoanRepaid(loanReceiptHash?: PromiseOrValue<BytesLike> | null, repayment?: null): LoanRepaidEventFilter;

    'Redeemed(address,uint128,uint128,uint256)'(
      account?: PromiseOrValue<string> | null,
      tick?: PromiseOrValue<BigNumberish> | null,
      redemptionId?: PromiseOrValue<BigNumberish> | null,
      shares?: null,
    ): RedeemedEventFilter;
    Redeemed(
      account?: PromiseOrValue<string> | null,
      tick?: PromiseOrValue<BigNumberish> | null,
      redemptionId?: PromiseOrValue<BigNumberish> | null,
      shares?: null,
    ): RedeemedEventFilter;

    'Withdrawn(address,uint128,uint128,uint256,uint256)'(
      account?: PromiseOrValue<string> | null,
      tick?: PromiseOrValue<BigNumberish> | null,
      redemptionId?: PromiseOrValue<BigNumberish> | null,
      shares?: null,
      amount?: null,
    ): WithdrawnEventFilter;
    Withdrawn(
      account?: PromiseOrValue<string> | null,
      tick?: PromiseOrValue<BigNumberish> | null,
      redemptionId?: PromiseOrValue<BigNumberish> | null,
      shares?: null,
      amount?: null,
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    BORROWER_SURPLUS_SPLIT_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    COLLATERAL_FILTER_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    COLLATERAL_FILTER_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    IMPLEMENTATION_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    INTEREST_RATE_MODEL_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    INTEREST_RATE_MODEL_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    TICK_LIMIT_SPACING_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    adminFeeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    adminFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      principal: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      collateralToken: PromiseOrValue<string>,
      collateralTokenId: PromiseOrValue<BigNumberish>,
      maxRepayment: PromiseOrValue<BigNumberish>,
      ticks: PromiseOrValue<BigNumberish>[],
      options: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    collateralLiquidator(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    collateralWrappers(overrides?: CallOverrides): Promise<BigNumber>;

    currencyToken(overrides?: CallOverrides): Promise<BigNumber>;

    decodeLoanReceipt(loanReceipt: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    delegationRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      tick: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      minShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deposits(
      account: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    durations(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    liquidate(
      encodedLoanReceipt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    liquidityNode(tick: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    liquidityNodeWithAccrual(tick: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    liquidityNodes(
      startTick: PromiseOrValue<BigNumberish>,
      endTick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    loans(receiptHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    onCollateralLiquidated(
      encodedLoanReceipt: PromiseOrValue<BytesLike>,
      proceeds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    quote(
      principal: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      collateralToken: PromiseOrValue<string>,
      collateralTokenIds: PromiseOrValue<BigNumberish>[],
      collateralTokenCount: PromiseOrValue<BigNumberish>,
      ticks: PromiseOrValue<BigNumberish>[],
      options: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    rates(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(
      srcTick: PromiseOrValue<BigNumberish>,
      dstTick: PromiseOrValue<BigNumberish>,
      redemptionId: PromiseOrValue<BigNumberish>,
      minShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    redeem(
      tick: PromiseOrValue<BigNumberish>,
      shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    redemptionAvailable(
      account: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      redemptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    redemptions(
      account: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      redemptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    refinance(
      encodedLoanReceipt: PromiseOrValue<BytesLike>,
      principal: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      maxRepayment: PromiseOrValue<BigNumberish>,
      ticks: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    repay(
      encodedLoanReceipt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setAdminFeeRate(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      tick: PromiseOrValue<BigNumberish>,
      redemptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawAdminFees(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BORROWER_SURPLUS_SPLIT_BASIS_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    COLLATERAL_FILTER_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    COLLATERAL_FILTER_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IMPLEMENTATION_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INTEREST_RATE_MODEL_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INTEREST_RATE_MODEL_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TICK_LIMIT_SPACING_BASIS_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminFeeBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      principal: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      collateralToken: PromiseOrValue<string>,
      collateralTokenId: PromiseOrValue<BigNumberish>,
      maxRepayment: PromiseOrValue<BigNumberish>,
      ticks: PromiseOrValue<BigNumberish>[],
      options: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    collateralLiquidator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralWrappers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currencyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decodeLoanReceipt(loanReceipt: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegationRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      tick: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      minShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deposits(
      account: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    durations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    liquidate(
      encodedLoanReceipt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    liquidityNode(tick: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityNodeWithAccrual(
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    liquidityNodes(
      startTick: PromiseOrValue<BigNumberish>,
      endTick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    loans(receiptHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    onCollateralLiquidated(
      encodedLoanReceipt: PromiseOrValue<BytesLike>,
      proceeds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    quote(
      principal: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      collateralToken: PromiseOrValue<string>,
      collateralTokenIds: PromiseOrValue<BigNumberish>[],
      collateralTokenCount: PromiseOrValue<BigNumberish>,
      ticks: PromiseOrValue<BigNumberish>[],
      options: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    rates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalance(
      srcTick: PromiseOrValue<BigNumberish>,
      dstTick: PromiseOrValue<BigNumberish>,
      redemptionId: PromiseOrValue<BigNumberish>,
      minShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    redeem(
      tick: PromiseOrValue<BigNumberish>,
      shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    redemptionAvailable(
      account: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      redemptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    redemptions(
      account: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      redemptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    refinance(
      encodedLoanReceipt: PromiseOrValue<BytesLike>,
      principal: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      maxRepayment: PromiseOrValue<BigNumberish>,
      ticks: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    repay(
      encodedLoanReceipt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setAdminFeeRate(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      tick: PromiseOrValue<BigNumberish>,
      redemptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawAdminFees(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
