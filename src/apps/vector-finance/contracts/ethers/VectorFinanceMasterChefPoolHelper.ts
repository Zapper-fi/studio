/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface VectorFinanceMasterChefPoolHelperInterface extends utils.Interface {
  functions: {
    'balance(address)': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'depositToken()': FunctionFragment;
    'depositTokenBalance()': FunctionFragment;
    'earned(address)': FunctionFragment;
    'getReward()': FunctionFragment;
    'harvest()': FunctionFragment;
    'mainStaking()': FunctionFragment;
    'masterVtx()': FunctionFragment;
    'pendingPTP()': FunctionFragment;
    'pid()': FunctionFragment;
    'rewardPerToken(address)': FunctionFragment;
    'rewarder()': FunctionFragment;
    'stake(uint256)': FunctionFragment;
    'stakingToken()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'update()': FunctionFragment;
    'withdraw(uint256,uint256)': FunctionFragment;
    'xptp()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'balance'
      | 'deposit'
      | 'depositToken'
      | 'depositTokenBalance'
      | 'earned'
      | 'getReward'
      | 'harvest'
      | 'mainStaking'
      | 'masterVtx'
      | 'pendingPTP'
      | 'pid'
      | 'rewardPerToken'
      | 'rewarder'
      | 'stake'
      | 'stakingToken'
      | 'totalSupply'
      | 'update'
      | 'withdraw'
      | 'xptp',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'balance', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'deposit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'depositToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'depositTokenBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'earned', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'harvest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mainStaking', values?: undefined): string;
  encodeFunctionData(functionFragment: 'masterVtx', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingPTP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pid', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardPerToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'rewarder', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stake', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'stakingToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'update', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'xptp', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'balance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositTokenBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'earned', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mainStaking', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'masterVtx', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingPTP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardPerToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewarder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakingToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'update', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xptp', data: BytesLike): Result;

  events: {
    'NewDeposit(address,uint256)': EventFragment;
    'NewWithdraw(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'NewDeposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewWithdraw'): EventFragment;
}

export interface NewDepositEventObject {
  user: string;
  amount: BigNumber;
}
export type NewDepositEvent = TypedEvent<[string, BigNumber], NewDepositEventObject>;

export type NewDepositEventFilter = TypedEventFilter<NewDepositEvent>;

export interface NewWithdrawEventObject {
  user: string;
  amount: BigNumber;
}
export type NewWithdrawEvent = TypedEvent<[string, BigNumber], NewWithdrawEventObject>;

export type NewWithdrawEventFilter = TypedEventFilter<NewWithdrawEvent>;

export interface VectorFinanceMasterChefPoolHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VectorFinanceMasterChefPoolHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balance(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositToken(overrides?: CallOverrides): Promise<[string]>;

    depositTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    earned(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { vtxAmount: BigNumber; tokenAmount: BigNumber }>;

    getReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    harvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    mainStaking(overrides?: CallOverrides): Promise<[string]>;

    masterVtx(overrides?: CallOverrides): Promise<[string]>;

    pendingPTP(overrides?: CallOverrides): Promise<[BigNumber] & { pendingTokens: BigNumber }>;

    pid(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPerToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    rewarder(overrides?: CallOverrides): Promise<[string]>;

    stake(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    update(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    xptp(overrides?: CallOverrides): Promise<[string]>;
  };

  balance(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositToken(overrides?: CallOverrides): Promise<string>;

  depositTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  earned(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { vtxAmount: BigNumber; tokenAmount: BigNumber }>;

  getReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  harvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  mainStaking(overrides?: CallOverrides): Promise<string>;

  masterVtx(overrides?: CallOverrides): Promise<string>;

  pendingPTP(overrides?: CallOverrides): Promise<BigNumber>;

  pid(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPerToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  rewarder(overrides?: CallOverrides): Promise<string>;

  stake(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  update(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    minAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  xptp(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    balance(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    depositToken(overrides?: CallOverrides): Promise<string>;

    depositTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    earned(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { vtxAmount: BigNumber; tokenAmount: BigNumber }>;

    getReward(overrides?: CallOverrides): Promise<void>;

    harvest(overrides?: CallOverrides): Promise<void>;

    mainStaking(overrides?: CallOverrides): Promise<string>;

    masterVtx(overrides?: CallOverrides): Promise<string>;

    pendingPTP(overrides?: CallOverrides): Promise<BigNumber>;

    pid(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    rewarder(overrides?: CallOverrides): Promise<string>;

    stake(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    update(overrides?: CallOverrides): Promise<void>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    xptp(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'NewDeposit(address,uint256)'(user?: PromiseOrValue<string> | null, amount?: null): NewDepositEventFilter;
    NewDeposit(user?: PromiseOrValue<string> | null, amount?: null): NewDepositEventFilter;

    'NewWithdraw(address,uint256)'(user?: PromiseOrValue<string> | null, amount?: null): NewWithdrawEventFilter;
    NewWithdraw(user?: PromiseOrValue<string> | null, amount?: null): NewWithdrawEventFilter;
  };

  estimateGas: {
    balance(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositToken(overrides?: CallOverrides): Promise<BigNumber>;

    depositTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    earned(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    harvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    mainStaking(overrides?: CallOverrides): Promise<BigNumber>;

    masterVtx(overrides?: CallOverrides): Promise<BigNumber>;

    pendingPTP(overrides?: CallOverrides): Promise<BigNumber>;

    pid(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    rewarder(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    update(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    xptp(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balance(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositTokenBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earned(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    harvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    mainStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    masterVtx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingPTP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    update(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    xptp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
