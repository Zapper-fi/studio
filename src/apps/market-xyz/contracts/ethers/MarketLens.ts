/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace MarketLens {
  export type PoolAssetStruct = {
    cToken: string;
    underlyingToken: string;
    underlyingName: string;
    underlyingSymbol: string;
    underlyingDecimals: BigNumberish;
    underlyingBalance: BigNumberish;
    supplyRatePerBlock: BigNumberish;
    borrowRatePerBlock: BigNumberish;
    totalSupply: BigNumberish;
    totalBorrow: BigNumberish;
    supplyBalance: BigNumberish;
    borrowBalance: BigNumberish;
    liquidity: BigNumberish;
    membership: boolean;
    exchangeRate: BigNumberish;
    underlyingPrice: BigNumberish;
    oracle: string;
    collateralFactor: BigNumberish;
    reserveFactor: BigNumberish;
    adminFee: BigNumberish;
    fuseFee: BigNumberish;
    borrowGuardianPaused: boolean;
  };

  export type PoolAssetStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
  ] & {
    cToken: string;
    underlyingToken: string;
    underlyingName: string;
    underlyingSymbol: string;
    underlyingDecimals: BigNumber;
    underlyingBalance: BigNumber;
    supplyRatePerBlock: BigNumber;
    borrowRatePerBlock: BigNumber;
    totalSupply: BigNumber;
    totalBorrow: BigNumber;
    supplyBalance: BigNumber;
    borrowBalance: BigNumber;
    liquidity: BigNumber;
    membership: boolean;
    exchangeRate: BigNumber;
    underlyingPrice: BigNumber;
    oracle: string;
    collateralFactor: BigNumber;
    reserveFactor: BigNumber;
    adminFee: BigNumber;
    fuseFee: BigNumber;
    borrowGuardianPaused: boolean;
  };

  export type PoolUserStruct = {
    account: string;
    totalBorrow: BigNumberish;
    totalCollateral: BigNumberish;
    health: BigNumberish;
    assets: MarketLens.PoolAssetStruct[];
  };

  export type PoolUserStructOutput = [string, BigNumber, BigNumber, BigNumber, MarketLens.PoolAssetStructOutput[]] & {
    account: string;
    totalBorrow: BigNumber;
    totalCollateral: BigNumber;
    health: BigNumber;
    assets: MarketLens.PoolAssetStructOutput[];
  };
}

export declare namespace FusePoolDirectory {
  export type FusePoolStruct = {
    name: string;
    creator: string;
    comptroller: string;
    blockPosted: BigNumberish;
    timestampPosted: BigNumberish;
  };

  export type FusePoolStructOutput = [string, string, string, BigNumber, BigNumber] & {
    name: string;
    creator: string;
    comptroller: string;
    blockPosted: BigNumber;
    timestampPosted: BigNumber;
  };
}

export interface MarketLensInterface extends utils.Interface {
  functions: {
    'getAllPoolsLength(address)': FunctionFragment;
    'getPoolAssetsWithData(address)': FunctionFragment;
    'getPoolSummary(address)': FunctionFragment;
    'getPoolUserSummary(address,address)': FunctionFragment;
    'getPoolUsersWithData(address,uint256)': FunctionFragment;
    'getPublicPoolsWithData(address)': FunctionFragment;
    'wrappedNative()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'getAllPoolsLength'
      | 'getPoolAssetsWithData'
      | 'getPoolSummary'
      | 'getPoolUserSummary'
      | 'getPoolUsersWithData'
      | 'getPublicPoolsWithData'
      | 'wrappedNative',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'getAllPoolsLength', values: [string]): string;
  encodeFunctionData(functionFragment: 'getPoolAssetsWithData', values: [string]): string;
  encodeFunctionData(functionFragment: 'getPoolSummary', values: [string]): string;
  encodeFunctionData(functionFragment: 'getPoolUserSummary', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'getPoolUsersWithData', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getPublicPoolsWithData', values: [string]): string;
  encodeFunctionData(functionFragment: 'wrappedNative', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'getAllPoolsLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolAssetsWithData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolSummary', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolUserSummary', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolUsersWithData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPublicPoolsWithData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'wrappedNative', data: BytesLike): Result;

  events: {};
}

export interface MarketLens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketLensInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAllPoolsLength(directory: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoolAssetsWithData(
      comptroller: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getPoolSummary(
      comptroller: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getPoolUserSummary(
      comptroller: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getPoolUsersWithData(
      comptroller: string,
      maxHealth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getPublicPoolsWithData(
      directory: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    wrappedNative(overrides?: CallOverrides): Promise<[string]>;
  };

  getAllPoolsLength(directory: string, overrides?: CallOverrides): Promise<BigNumber>;

  getPoolAssetsWithData(
    comptroller: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getPoolSummary(
    comptroller: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getPoolUserSummary(
    comptroller: string,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getPoolUsersWithData(
    comptroller: string,
    maxHealth: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getPublicPoolsWithData(
    directory: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  wrappedNative(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getAllPoolsLength(directory: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolAssetsWithData(comptroller: string, overrides?: CallOverrides): Promise<MarketLens.PoolAssetStructOutput[]>;

    getPoolSummary(comptroller: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber, string[], string[]]>;

    getPoolUserSummary(
      comptroller: string,
      account: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    getPoolUsersWithData(
      comptroller: string,
      maxHealth: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[MarketLens.PoolUserStructOutput[], BigNumber, BigNumber]>;

    getPublicPoolsWithData(
      directory: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        BigNumber[],
        FusePoolDirectory.FusePoolStructOutput[],
        BigNumber[],
        BigNumber[],
        string[][],
        string[][],
        boolean[],
      ]
    >;

    wrappedNative(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getAllPoolsLength(directory: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolAssetsWithData(
      comptroller: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getPoolSummary(
      comptroller: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getPoolUserSummary(
      comptroller: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getPoolUsersWithData(
      comptroller: string,
      maxHealth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getPublicPoolsWithData(
      directory: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    wrappedNative(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllPoolsLength(directory: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolAssetsWithData(
      comptroller: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getPoolSummary(
      comptroller: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getPoolUserSummary(
      comptroller: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getPoolUsersWithData(
      comptroller: string,
      maxHealth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getPublicPoolsWithData(
      directory: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    wrappedNative(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
