/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace FusePoolDirectory {
  export type FusePoolStruct = {
    name: string;
    creator: string;
    comptroller: string;
    blockPosted: BigNumberish;
    timestampPosted: BigNumberish;
  };

  export type FusePoolStructOutput = [string, string, string, BigNumber, BigNumber] & {
    name: string;
    creator: string;
    comptroller: string;
    blockPosted: BigNumber;
    timestampPosted: BigNumber;
  };
}

export interface PoolDirectoryInterface extends utils.Interface {
  functions: {
    '_editAdminWhitelist(address[],bool)': FunctionFragment;
    '_editDeployerWhitelist(address[],bool)': FunctionFragment;
    '_setDeployerWhitelistEnforcement(bool)': FunctionFragment;
    'adminDeployer()': FunctionFragment;
    'adminWhitelist(address)': FunctionFragment;
    'deployPool(string,address,bool,uint256,uint256,address)': FunctionFragment;
    'deployerWhitelist(address)': FunctionFragment;
    'enforceDeployerWhitelist()': FunctionFragment;
    'getAllPools()': FunctionFragment;
    'getAllPoolsLength()': FunctionFragment;
    'getPoolsByAccount(address)': FunctionFragment;
    'getPublicPools()': FunctionFragment;
    'getPublicPoolsByVerification(bool)': FunctionFragment;
    'initialize(bool,address[])': FunctionFragment;
    'owner()': FunctionFragment;
    'poolExists(address)': FunctionFragment;
    'pools(uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setAdminDeployer(address)': FunctionFragment;
    'setPoolName(uint256,string)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | '_editAdminWhitelist'
      | '_editDeployerWhitelist'
      | '_setDeployerWhitelistEnforcement'
      | 'adminDeployer'
      | 'adminWhitelist'
      | 'deployPool'
      | 'deployerWhitelist'
      | 'enforceDeployerWhitelist'
      | 'getAllPools'
      | 'getAllPoolsLength'
      | 'getPoolsByAccount'
      | 'getPublicPools'
      | 'getPublicPoolsByVerification'
      | 'initialize'
      | 'owner'
      | 'poolExists'
      | 'pools'
      | 'renounceOwnership'
      | 'setAdminDeployer'
      | 'setPoolName'
      | 'transferOwnership',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: '_editAdminWhitelist', values: [string[], boolean]): string;
  encodeFunctionData(functionFragment: '_editDeployerWhitelist', values: [string[], boolean]): string;
  encodeFunctionData(functionFragment: '_setDeployerWhitelistEnforcement', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'adminDeployer', values?: undefined): string;
  encodeFunctionData(functionFragment: 'adminWhitelist', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'deployPool',
    values: [string, string, boolean, BigNumberish, BigNumberish, string],
  ): string;
  encodeFunctionData(functionFragment: 'deployerWhitelist', values: [string]): string;
  encodeFunctionData(functionFragment: 'enforceDeployerWhitelist', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAllPools', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAllPoolsLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPoolsByAccount', values: [string]): string;
  encodeFunctionData(functionFragment: 'getPublicPools', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPublicPoolsByVerification', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'initialize', values: [boolean, string[]]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolExists', values: [string]): string;
  encodeFunctionData(functionFragment: 'pools', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setAdminDeployer', values: [string]): string;
  encodeFunctionData(functionFragment: 'setPoolName', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;

  decodeFunctionResult(functionFragment: '_editAdminWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_editDeployerWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setDeployerWhitelistEnforcement', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adminDeployer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adminWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deployPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deployerWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enforceDeployerWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllPools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllPoolsLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolsByAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPublicPools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPublicPoolsByVerification', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolExists', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAdminDeployer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPoolName', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;

  events: {
    'AdminDeployerUpdated(address,address)': EventFragment;
    'AdminWhitelistUpdated(address[],bool)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'PoolRegistered(uint256,tuple)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminDeployerUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AdminWhitelistUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolRegistered'): EventFragment;
}

export interface AdminDeployerUpdatedEventObject {
  oldAdminDeployer: string;
  newAdminDeployer: string;
}
export type AdminDeployerUpdatedEvent = TypedEvent<[string, string], AdminDeployerUpdatedEventObject>;

export type AdminDeployerUpdatedEventFilter = TypedEventFilter<AdminDeployerUpdatedEvent>;

export interface AdminWhitelistUpdatedEventObject {
  admins: string[];
  status: boolean;
}
export type AdminWhitelistUpdatedEvent = TypedEvent<[string[], boolean], AdminWhitelistUpdatedEventObject>;

export type AdminWhitelistUpdatedEventFilter = TypedEventFilter<AdminWhitelistUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PoolRegisteredEventObject {
  index: BigNumber;
  pool: FusePoolDirectory.FusePoolStructOutput;
}
export type PoolRegisteredEvent = TypedEvent<
  [BigNumber, FusePoolDirectory.FusePoolStructOutput],
  PoolRegisteredEventObject
>;

export type PoolRegisteredEventFilter = TypedEventFilter<PoolRegisteredEvent>;

export interface PoolDirectory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolDirectoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _editAdminWhitelist(
      admins: string[],
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    _editDeployerWhitelist(
      deployers: string[],
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    _setDeployerWhitelistEnforcement(
      enforce: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    adminDeployer(overrides?: CallOverrides): Promise<[string]>;

    adminWhitelist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    deployPool(
      name: string,
      implementation: string,
      enforceWhitelist: boolean,
      closeFactor: BigNumberish,
      liquidationIncentive: BigNumberish,
      priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deployerWhitelist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    enforceDeployerWhitelist(overrides?: CallOverrides): Promise<[boolean]>;

    getAllPools(overrides?: CallOverrides): Promise<[FusePoolDirectory.FusePoolStructOutput[]]>;

    getAllPoolsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoolsByAccount(
      account: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[], FusePoolDirectory.FusePoolStructOutput[]]>;

    getPublicPools(overrides?: CallOverrides): Promise<[BigNumber[], FusePoolDirectory.FusePoolStructOutput[]]>;

    getPublicPoolsByVerification(
      whitelistedAdmin: boolean,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[], FusePoolDirectory.FusePoolStructOutput[]]>;

    initialize(
      _enforceDeployerWhitelist: boolean,
      _deployerWhitelist: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolExists(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        name: string;
        creator: string;
        comptroller: string;
        blockPosted: BigNumber;
        timestampPosted: BigNumber;
      }
    >;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setAdminDeployer(
      newAdminDeployer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPoolName(
      index: BigNumberish,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  _editAdminWhitelist(
    admins: string[],
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  _editDeployerWhitelist(
    deployers: string[],
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  _setDeployerWhitelistEnforcement(
    enforce: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  adminDeployer(overrides?: CallOverrides): Promise<string>;

  adminWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  deployPool(
    name: string,
    implementation: string,
    enforceWhitelist: boolean,
    closeFactor: BigNumberish,
    liquidationIncentive: BigNumberish,
    priceOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  deployerWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  enforceDeployerWhitelist(overrides?: CallOverrides): Promise<boolean>;

  getAllPools(overrides?: CallOverrides): Promise<FusePoolDirectory.FusePoolStructOutput[]>;

  getAllPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

  getPoolsByAccount(
    account: string,
    overrides?: CallOverrides,
  ): Promise<[BigNumber[], FusePoolDirectory.FusePoolStructOutput[]]>;

  getPublicPools(overrides?: CallOverrides): Promise<[BigNumber[], FusePoolDirectory.FusePoolStructOutput[]]>;

  getPublicPoolsByVerification(
    whitelistedAdmin: boolean,
    overrides?: CallOverrides,
  ): Promise<[BigNumber[], FusePoolDirectory.FusePoolStructOutput[]]>;

  initialize(
    _enforceDeployerWhitelist: boolean,
    _deployerWhitelist: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolExists(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  pools(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, string, BigNumber, BigNumber] & {
      name: string;
      creator: string;
      comptroller: string;
      blockPosted: BigNumber;
      timestampPosted: BigNumber;
    }
  >;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setAdminDeployer(
    newAdminDeployer: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPoolName(
    index: BigNumberish,
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    _editAdminWhitelist(admins: string[], status: boolean, overrides?: CallOverrides): Promise<void>;

    _editDeployerWhitelist(deployers: string[], status: boolean, overrides?: CallOverrides): Promise<void>;

    _setDeployerWhitelistEnforcement(enforce: boolean, overrides?: CallOverrides): Promise<void>;

    adminDeployer(overrides?: CallOverrides): Promise<string>;

    adminWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    deployPool(
      name: string,
      implementation: string,
      enforceWhitelist: boolean,
      closeFactor: BigNumberish,
      liquidationIncentive: BigNumberish,
      priceOracle: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, string]>;

    deployerWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    enforceDeployerWhitelist(overrides?: CallOverrides): Promise<boolean>;

    getAllPools(overrides?: CallOverrides): Promise<FusePoolDirectory.FusePoolStructOutput[]>;

    getAllPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolsByAccount(
      account: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[], FusePoolDirectory.FusePoolStructOutput[]]>;

    getPublicPools(overrides?: CallOverrides): Promise<[BigNumber[], FusePoolDirectory.FusePoolStructOutput[]]>;

    getPublicPoolsByVerification(
      whitelistedAdmin: boolean,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[], FusePoolDirectory.FusePoolStructOutput[]]>;

    initialize(
      _enforceDeployerWhitelist: boolean,
      _deployerWhitelist: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolExists(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        name: string;
        creator: string;
        comptroller: string;
        blockPosted: BigNumber;
        timestampPosted: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdminDeployer(newAdminDeployer: string, overrides?: CallOverrides): Promise<void>;

    setPoolName(index: BigNumberish, name: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'AdminDeployerUpdated(address,address)'(
      oldAdminDeployer?: null,
      newAdminDeployer?: null,
    ): AdminDeployerUpdatedEventFilter;
    AdminDeployerUpdated(oldAdminDeployer?: null, newAdminDeployer?: null): AdminDeployerUpdatedEventFilter;

    'AdminWhitelistUpdated(address[],bool)'(admins?: null, status?: null): AdminWhitelistUpdatedEventFilter;
    AdminWhitelistUpdated(admins?: null, status?: null): AdminWhitelistUpdatedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    'PoolRegistered(uint256,tuple)'(index?: null, pool?: null): PoolRegisteredEventFilter;
    PoolRegistered(index?: null, pool?: null): PoolRegisteredEventFilter;
  };

  estimateGas: {
    _editAdminWhitelist(
      admins: string[],
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    _editDeployerWhitelist(
      deployers: string[],
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    _setDeployerWhitelistEnforcement(
      enforce: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    adminDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    adminWhitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    deployPool(
      name: string,
      implementation: string,
      enforceWhitelist: boolean,
      closeFactor: BigNumberish,
      liquidationIncentive: BigNumberish,
      priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    deployerWhitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    enforceDeployerWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    getAllPools(overrides?: CallOverrides): Promise<BigNumber>;

    getAllPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolsByAccount(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPublicPools(overrides?: CallOverrides): Promise<BigNumber>;

    getPublicPoolsByVerification(whitelistedAdmin: boolean, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _enforceDeployerWhitelist: boolean,
      _deployerWhitelist: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolExists(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setAdminDeployer(
      newAdminDeployer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setPoolName(
      index: BigNumberish,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _editAdminWhitelist(
      admins: string[],
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    _editDeployerWhitelist(
      deployers: string[],
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    _setDeployerWhitelistEnforcement(
      enforce: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    adminDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminWhitelist(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployPool(
      name: string,
      implementation: string,
      enforceWhitelist: boolean,
      closeFactor: BigNumberish,
      liquidationIncentive: BigNumberish,
      priceOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    deployerWhitelist(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enforceDeployerWhitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllPoolsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolsByAccount(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPublicPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPublicPoolsByVerification(whitelistedAdmin: boolean, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _enforceDeployerWhitelist: boolean,
      _deployerWhitelist: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolExists(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setAdminDeployer(
      newAdminDeployer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPoolName(
      index: BigNumberish,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
