/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface ArtGobblersInterface extends utils.Interface {
  functions: {
    'BASE_URI()': FunctionFragment;
    'FIRST_LEGENDARY_GOBBLER_ID()': FunctionFragment;
    'LEGENDARY_AUCTION_INTERVAL()': FunctionFragment;
    'LEGENDARY_GOBBLER_INITIAL_START_PRICE()': FunctionFragment;
    'LEGENDARY_SUPPLY()': FunctionFragment;
    'MAX_MINTABLE()': FunctionFragment;
    'MAX_SUPPLY()': FunctionFragment;
    'MINTLIST_SUPPLY()': FunctionFragment;
    'PROVENANCE_HASH()': FunctionFragment;
    'RESERVED_SUPPLY()': FunctionFragment;
    'UNREVEALED_URI()': FunctionFragment;
    'acceptRandomSeed(bytes32,uint256)': FunctionFragment;
    'addGoo(uint256)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'burnGooForPages(address,uint256)': FunctionFragment;
    'claimGobbler(bytes32[])': FunctionFragment;
    'community()': FunctionFragment;
    'currentNonLegendaryId()': FunctionFragment;
    'getApproved(uint256)': FunctionFragment;
    'getCopiesOfArtGobbledByGobbler(uint256,address,uint256)': FunctionFragment;
    'getGobblerData(uint256)': FunctionFragment;
    'getGobblerEmissionMultiple(uint256)': FunctionFragment;
    'getTargetSaleTime(int256)': FunctionFragment;
    'getUserData(address)': FunctionFragment;
    'getUserEmissionMultiple(address)': FunctionFragment;
    'getVRGDAPrice(int256,uint256)': FunctionFragment;
    'gobble(uint256,address,uint256,bool)': FunctionFragment;
    'gobblerPrice()': FunctionFragment;
    'gobblerRevealsData()': FunctionFragment;
    'goo()': FunctionFragment;
    'gooBalance(address)': FunctionFragment;
    'hasClaimedMintlistGobbler(address)': FunctionFragment;
    'isApprovedForAll(address,address)': FunctionFragment;
    'legendaryGobblerAuctionData()': FunctionFragment;
    'legendaryGobblerPrice()': FunctionFragment;
    'merkleRoot()': FunctionFragment;
    'mintFromGoo(uint256,bool)': FunctionFragment;
    'mintLegendaryGobbler(uint256[])': FunctionFragment;
    'mintReservedGobblers(uint256)': FunctionFragment;
    'mintStart()': FunctionFragment;
    'name()': FunctionFragment;
    'numMintedForReserves()': FunctionFragment;
    'numMintedFromGoo()': FunctionFragment;
    'onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)': FunctionFragment;
    'onERC1155Received(address,address,uint256,uint256,bytes)': FunctionFragment;
    'owner()': FunctionFragment;
    'ownerOf(uint256)': FunctionFragment;
    'pages()': FunctionFragment;
    'randProvider()': FunctionFragment;
    'removeGoo(uint256)': FunctionFragment;
    'requestRandomSeed()': FunctionFragment;
    'revealGobblers(uint256)': FunctionFragment;
    'safeTransferFrom(address,address,uint256)': FunctionFragment;
    'safeTransferFrom(address,address,uint256,bytes)': FunctionFragment;
    'setApprovalForAll(address,bool)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'symbol()': FunctionFragment;
    'targetPrice()': FunctionFragment;
    'team()': FunctionFragment;
    'tokenURI(uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'upgradeRandProvider(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BASE_URI'
      | 'FIRST_LEGENDARY_GOBBLER_ID'
      | 'LEGENDARY_AUCTION_INTERVAL'
      | 'LEGENDARY_GOBBLER_INITIAL_START_PRICE'
      | 'LEGENDARY_SUPPLY'
      | 'MAX_MINTABLE'
      | 'MAX_SUPPLY'
      | 'MINTLIST_SUPPLY'
      | 'PROVENANCE_HASH'
      | 'RESERVED_SUPPLY'
      | 'UNREVEALED_URI'
      | 'acceptRandomSeed'
      | 'addGoo'
      | 'approve'
      | 'balanceOf'
      | 'burnGooForPages'
      | 'claimGobbler'
      | 'community'
      | 'currentNonLegendaryId'
      | 'getApproved'
      | 'getCopiesOfArtGobbledByGobbler'
      | 'getGobblerData'
      | 'getGobblerEmissionMultiple'
      | 'getTargetSaleTime'
      | 'getUserData'
      | 'getUserEmissionMultiple'
      | 'getVRGDAPrice'
      | 'gobble'
      | 'gobblerPrice'
      | 'gobblerRevealsData'
      | 'goo'
      | 'gooBalance'
      | 'hasClaimedMintlistGobbler'
      | 'isApprovedForAll'
      | 'legendaryGobblerAuctionData'
      | 'legendaryGobblerPrice'
      | 'merkleRoot'
      | 'mintFromGoo'
      | 'mintLegendaryGobbler'
      | 'mintReservedGobblers'
      | 'mintStart'
      | 'name'
      | 'numMintedForReserves'
      | 'numMintedFromGoo'
      | 'onERC1155BatchReceived'
      | 'onERC1155Received'
      | 'owner'
      | 'ownerOf'
      | 'pages'
      | 'randProvider'
      | 'removeGoo'
      | 'requestRandomSeed'
      | 'revealGobblers'
      | 'safeTransferFrom(address,address,uint256)'
      | 'safeTransferFrom(address,address,uint256,bytes)'
      | 'setApprovalForAll'
      | 'supportsInterface'
      | 'symbol'
      | 'targetPrice'
      | 'team'
      | 'tokenURI'
      | 'transferFrom'
      | 'transferOwnership'
      | 'upgradeRandProvider',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BASE_URI', values?: undefined): string;
  encodeFunctionData(functionFragment: 'FIRST_LEGENDARY_GOBBLER_ID', values?: undefined): string;
  encodeFunctionData(functionFragment: 'LEGENDARY_AUCTION_INTERVAL', values?: undefined): string;
  encodeFunctionData(functionFragment: 'LEGENDARY_GOBBLER_INITIAL_START_PRICE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'LEGENDARY_SUPPLY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_MINTABLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_SUPPLY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MINTLIST_SUPPLY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PROVENANCE_HASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'RESERVED_SUPPLY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'UNREVEALED_URI', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'acceptRandomSeed',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'addGoo', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'burnGooForPages',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'claimGobbler', values: [PromiseOrValue<BytesLike>[]]): string;
  encodeFunctionData(functionFragment: 'community', values?: undefined): string;
  encodeFunctionData(functionFragment: 'currentNonLegendaryId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getApproved', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getCopiesOfArtGobbledByGobbler',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getGobblerData', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getGobblerEmissionMultiple', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getTargetSaleTime', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getUserData', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getUserEmissionMultiple', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getVRGDAPrice',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'gobble',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'gobblerPrice', values?: undefined): string;
  encodeFunctionData(functionFragment: 'gobblerRevealsData', values?: undefined): string;
  encodeFunctionData(functionFragment: 'goo', values?: undefined): string;
  encodeFunctionData(functionFragment: 'gooBalance', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'hasClaimedMintlistGobbler', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'legendaryGobblerAuctionData', values?: undefined): string;
  encodeFunctionData(functionFragment: 'legendaryGobblerPrice', values?: undefined): string;
  encodeFunctionData(functionFragment: 'merkleRoot', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'mintFromGoo',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'mintLegendaryGobbler', values: [PromiseOrValue<BigNumberish>[]]): string;
  encodeFunctionData(functionFragment: 'mintReservedGobblers', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'mintStart', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'numMintedForReserves', values?: undefined): string;
  encodeFunctionData(functionFragment: 'numMintedFromGoo', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'onERC1155BatchReceived',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'onERC1155Received',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ownerOf', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'pages', values?: undefined): string;
  encodeFunctionData(functionFragment: 'randProvider', values?: undefined): string;
  encodeFunctionData(functionFragment: 'removeGoo', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'requestRandomSeed', values?: undefined): string;
  encodeFunctionData(functionFragment: 'revealGobblers', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'targetPrice', values?: undefined): string;
  encodeFunctionData(functionFragment: 'team', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenURI', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'upgradeRandProvider', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'BASE_URI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'FIRST_LEGENDARY_GOBBLER_ID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'LEGENDARY_AUCTION_INTERVAL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'LEGENDARY_GOBBLER_INITIAL_START_PRICE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'LEGENDARY_SUPPLY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_MINTABLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_SUPPLY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MINTLIST_SUPPLY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PROVENANCE_HASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'RESERVED_SUPPLY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'UNREVEALED_URI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptRandomSeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addGoo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burnGooForPages', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimGobbler', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'community', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentNonLegendaryId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCopiesOfArtGobbledByGobbler', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getGobblerData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getGobblerEmissionMultiple', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTargetSaleTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserEmissionMultiple', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVRGDAPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gobble', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gobblerPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gobblerRevealsData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'goo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gooBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasClaimedMintlistGobbler', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'legendaryGobblerAuctionData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'legendaryGobblerPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'merkleRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintFromGoo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintLegendaryGobbler', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintReservedGobblers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintStart', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numMintedForReserves', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numMintedFromGoo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onERC1155BatchReceived', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onERC1155Received', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pages', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'randProvider', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeGoo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requestRandomSeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revealGobblers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'targetPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'team', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeRandProvider', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'ApprovalForAll(address,address,bool)': EventFragment;
    'ArtGobbled(address,uint256,address,uint256)': EventFragment;
    'GobblerClaimed(address,uint256)': EventFragment;
    'GobblerPurchased(address,uint256,uint256)': EventFragment;
    'GobblersRevealed(address,uint256,uint256)': EventFragment;
    'GooBalanceUpdated(address,uint256)': EventFragment;
    'LegendaryGobblerMinted(address,uint256,uint256[])': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'RandProviderUpgraded(address,address)': EventFragment;
    'RandomnessFulfilled(uint256)': EventFragment;
    'RandomnessRequested(address,uint256)': EventFragment;
    'ReservedGobblersMinted(address,uint256,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ArtGobbled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GobblerClaimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GobblerPurchased'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GobblersRevealed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GooBalanceUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LegendaryGobblerMinted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RandProviderUpgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RandomnessFulfilled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RandomnessRequested'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReservedGobblersMinted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  id: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<[string, string, boolean], ApprovalForAllEventObject>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface ArtGobbledEventObject {
  user: string;
  gobblerId: BigNumber;
  nft: string;
  id: BigNumber;
}
export type ArtGobbledEvent = TypedEvent<[string, BigNumber, string, BigNumber], ArtGobbledEventObject>;

export type ArtGobbledEventFilter = TypedEventFilter<ArtGobbledEvent>;

export interface GobblerClaimedEventObject {
  user: string;
  gobblerId: BigNumber;
}
export type GobblerClaimedEvent = TypedEvent<[string, BigNumber], GobblerClaimedEventObject>;

export type GobblerClaimedEventFilter = TypedEventFilter<GobblerClaimedEvent>;

export interface GobblerPurchasedEventObject {
  user: string;
  gobblerId: BigNumber;
  price: BigNumber;
}
export type GobblerPurchasedEvent = TypedEvent<[string, BigNumber, BigNumber], GobblerPurchasedEventObject>;

export type GobblerPurchasedEventFilter = TypedEventFilter<GobblerPurchasedEvent>;

export interface GobblersRevealedEventObject {
  user: string;
  numGobblers: BigNumber;
  lastRevealedId: BigNumber;
}
export type GobblersRevealedEvent = TypedEvent<[string, BigNumber, BigNumber], GobblersRevealedEventObject>;

export type GobblersRevealedEventFilter = TypedEventFilter<GobblersRevealedEvent>;

export interface GooBalanceUpdatedEventObject {
  user: string;
  newGooBalance: BigNumber;
}
export type GooBalanceUpdatedEvent = TypedEvent<[string, BigNumber], GooBalanceUpdatedEventObject>;

export type GooBalanceUpdatedEventFilter = TypedEventFilter<GooBalanceUpdatedEvent>;

export interface LegendaryGobblerMintedEventObject {
  user: string;
  gobblerId: BigNumber;
  burnedGobblerIds: BigNumber[];
}
export type LegendaryGobblerMintedEvent = TypedEvent<
  [string, BigNumber, BigNumber[]],
  LegendaryGobblerMintedEventObject
>;

export type LegendaryGobblerMintedEventFilter = TypedEventFilter<LegendaryGobblerMintedEvent>;

export interface OwnershipTransferredEventObject {
  user: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RandProviderUpgradedEventObject {
  user: string;
  newRandProvider: string;
}
export type RandProviderUpgradedEvent = TypedEvent<[string, string], RandProviderUpgradedEventObject>;

export type RandProviderUpgradedEventFilter = TypedEventFilter<RandProviderUpgradedEvent>;

export interface RandomnessFulfilledEventObject {
  randomness: BigNumber;
}
export type RandomnessFulfilledEvent = TypedEvent<[BigNumber], RandomnessFulfilledEventObject>;

export type RandomnessFulfilledEventFilter = TypedEventFilter<RandomnessFulfilledEvent>;

export interface RandomnessRequestedEventObject {
  user: string;
  toBeRevealed: BigNumber;
}
export type RandomnessRequestedEvent = TypedEvent<[string, BigNumber], RandomnessRequestedEventObject>;

export type RandomnessRequestedEventFilter = TypedEventFilter<RandomnessRequestedEvent>;

export interface ReservedGobblersMintedEventObject {
  user: string;
  lastMintedGobblerId: BigNumber;
  numGobblersEach: BigNumber;
}
export type ReservedGobblersMintedEvent = TypedEvent<[string, BigNumber, BigNumber], ReservedGobblersMintedEventObject>;

export type ReservedGobblersMintedEventFilter = TypedEventFilter<ReservedGobblersMintedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  id: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ArtGobblers extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ArtGobblersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE_URI(overrides?: CallOverrides): Promise<[string]>;

    FIRST_LEGENDARY_GOBBLER_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    LEGENDARY_AUCTION_INTERVAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    LEGENDARY_GOBBLER_INITIAL_START_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    LEGENDARY_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_MINTABLE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINTLIST_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    PROVENANCE_HASH(overrides?: CallOverrides): Promise<[string]>;

    RESERVED_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    UNREVEALED_URI(overrides?: CallOverrides): Promise<[string]>;

    acceptRandomSeed(
      arg0: PromiseOrValue<BytesLike>,
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addGoo(
      gooAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    burnGooForPages(
      user: PromiseOrValue<string>,
      gooAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimGobbler(
      proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    community(overrides?: CallOverrides): Promise<[string]>;

    currentNonLegendaryId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getApproved(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    getCopiesOfArtGobbledByGobbler(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getGobblerData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, number] & {
        owner: string;
        idx: BigNumber;
        emissionMultiple: number;
      }
    >;

    getGobblerEmissionMultiple(
      gobblerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getTargetSaleTime(sold: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [number, number, BigNumber, BigNumber] & {
        gobblersOwned: number;
        emissionMultiple: number;
        lastBalance: BigNumber;
        lastTimestamp: BigNumber;
      }
    >;

    getUserEmissionMultiple(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getVRGDAPrice(
      timeSinceStart: PromiseOrValue<BigNumberish>,
      sold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    gobble(
      gobblerId: PromiseOrValue<BigNumberish>,
      nft: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      isERC1155: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    gobblerPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    gobblerRevealsData(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        randomSeed: BigNumber;
        nextRevealTimestamp: BigNumber;
        lastRevealedId: BigNumber;
        toBeRevealed: BigNumber;
        waitingForSeed: boolean;
      }
    >;

    goo(overrides?: CallOverrides): Promise<[string]>;

    gooBalance(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    hasClaimedMintlistGobbler(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    legendaryGobblerAuctionData(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { startPrice: BigNumber; numSold: BigNumber }>;

    legendaryGobblerPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    merkleRoot(overrides?: CallOverrides): Promise<[string]>;

    mintFromGoo(
      maxPrice: PromiseOrValue<BigNumberish>,
      useVirtualBalance: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mintLegendaryGobbler(
      gobblerIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mintReservedGobblers(
      numGobblersEach: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mintStart(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    numMintedForReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    numMintedFromGoo(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & { owner: string }>;

    pages(overrides?: CallOverrides): Promise<[string]>;

    randProvider(overrides?: CallOverrides): Promise<[string]>;

    removeGoo(
      gooAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    requestRandomSeed(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    revealGobblers(
      numGobblers: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    targetPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    team(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(gobblerId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    upgradeRandProvider(
      newRandProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  BASE_URI(overrides?: CallOverrides): Promise<string>;

  FIRST_LEGENDARY_GOBBLER_ID(overrides?: CallOverrides): Promise<BigNumber>;

  LEGENDARY_AUCTION_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

  LEGENDARY_GOBBLER_INITIAL_START_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  LEGENDARY_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_MINTABLE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  MINTLIST_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  PROVENANCE_HASH(overrides?: CallOverrides): Promise<string>;

  RESERVED_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  UNREVEALED_URI(overrides?: CallOverrides): Promise<string>;

  acceptRandomSeed(
    arg0: PromiseOrValue<BytesLike>,
    randomness: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addGoo(
    gooAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  approve(
    spender: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  burnGooForPages(
    user: PromiseOrValue<string>,
    gooAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimGobbler(
    proof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  community(overrides?: CallOverrides): Promise<string>;

  currentNonLegendaryId(overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  getCopiesOfArtGobbledByGobbler(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getGobblerData(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, number] & {
      owner: string;
      idx: BigNumber;
      emissionMultiple: number;
    }
  >;

  getGobblerEmissionMultiple(gobblerId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getTargetSaleTime(sold: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getUserData(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [number, number, BigNumber, BigNumber] & {
      gobblersOwned: number;
      emissionMultiple: number;
      lastBalance: BigNumber;
      lastTimestamp: BigNumber;
    }
  >;

  getUserEmissionMultiple(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getVRGDAPrice(
    timeSinceStart: PromiseOrValue<BigNumberish>,
    sold: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  gobble(
    gobblerId: PromiseOrValue<BigNumberish>,
    nft: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    isERC1155: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  gobblerPrice(overrides?: CallOverrides): Promise<BigNumber>;

  gobblerRevealsData(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      randomSeed: BigNumber;
      nextRevealTimestamp: BigNumber;
      lastRevealedId: BigNumber;
      toBeRevealed: BigNumber;
      waitingForSeed: boolean;
    }
  >;

  goo(overrides?: CallOverrides): Promise<string>;

  gooBalance(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  hasClaimedMintlistGobbler(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isApprovedForAll(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  legendaryGobblerAuctionData(
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { startPrice: BigNumber; numSold: BigNumber }>;

  legendaryGobblerPrice(overrides?: CallOverrides): Promise<BigNumber>;

  merkleRoot(overrides?: CallOverrides): Promise<string>;

  mintFromGoo(
    maxPrice: PromiseOrValue<BigNumberish>,
    useVirtualBalance: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mintLegendaryGobbler(
    gobblerIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mintReservedGobblers(
    numGobblersEach: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mintStart(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  numMintedForReserves(overrides?: CallOverrides): Promise<BigNumber>;

  numMintedFromGoo(overrides?: CallOverrides): Promise<BigNumber>;

  onERC1155BatchReceived(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>[],
    arg3: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  pages(overrides?: CallOverrides): Promise<string>;

  randProvider(overrides?: CallOverrides): Promise<string>;

  removeGoo(
    gooAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  requestRandomSeed(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  revealGobblers(
    numGobblers: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'safeTransferFrom(address,address,uint256)'(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'safeTransferFrom(address,address,uint256,bytes)'(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  targetPrice(overrides?: CallOverrides): Promise<BigNumber>;

  team(overrides?: CallOverrides): Promise<string>;

  tokenURI(gobblerId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  upgradeRandProvider(
    newRandProvider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    BASE_URI(overrides?: CallOverrides): Promise<string>;

    FIRST_LEGENDARY_GOBBLER_ID(overrides?: CallOverrides): Promise<BigNumber>;

    LEGENDARY_AUCTION_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    LEGENDARY_GOBBLER_INITIAL_START_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    LEGENDARY_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_MINTABLE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    MINTLIST_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    PROVENANCE_HASH(overrides?: CallOverrides): Promise<string>;

    RESERVED_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    UNREVEALED_URI(overrides?: CallOverrides): Promise<string>;

    acceptRandomSeed(
      arg0: PromiseOrValue<BytesLike>,
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    addGoo(gooAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    burnGooForPages(
      user: PromiseOrValue<string>,
      gooAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    claimGobbler(proof: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<BigNumber>;

    community(overrides?: CallOverrides): Promise<string>;

    currentNonLegendaryId(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    getCopiesOfArtGobbledByGobbler(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getGobblerData(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, number] & {
        owner: string;
        idx: BigNumber;
        emissionMultiple: number;
      }
    >;

    getGobblerEmissionMultiple(gobblerId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getTargetSaleTime(sold: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getUserData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [number, number, BigNumber, BigNumber] & {
        gobblersOwned: number;
        emissionMultiple: number;
        lastBalance: BigNumber;
        lastTimestamp: BigNumber;
      }
    >;

    getUserEmissionMultiple(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getVRGDAPrice(
      timeSinceStart: PromiseOrValue<BigNumberish>,
      sold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    gobble(
      gobblerId: PromiseOrValue<BigNumberish>,
      nft: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      isERC1155: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    gobblerPrice(overrides?: CallOverrides): Promise<BigNumber>;

    gobblerRevealsData(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        randomSeed: BigNumber;
        nextRevealTimestamp: BigNumber;
        lastRevealedId: BigNumber;
        toBeRevealed: BigNumber;
        waitingForSeed: boolean;
      }
    >;

    goo(overrides?: CallOverrides): Promise<string>;

    gooBalance(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    hasClaimedMintlistGobbler(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    legendaryGobblerAuctionData(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { startPrice: BigNumber; numSold: BigNumber }>;

    legendaryGobblerPrice(overrides?: CallOverrides): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<string>;

    mintFromGoo(
      maxPrice: PromiseOrValue<BigNumberish>,
      useVirtualBalance: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mintLegendaryGobbler(gobblerIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber>;

    mintReservedGobblers(numGobblersEach: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    mintStart(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    numMintedForReserves(overrides?: CallOverrides): Promise<BigNumber>;

    numMintedFromGoo(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    pages(overrides?: CallOverrides): Promise<string>;

    randProvider(overrides?: CallOverrides): Promise<string>;

    removeGoo(gooAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    requestRandomSeed(overrides?: CallOverrides): Promise<string>;

    revealGobblers(numGobblers: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    targetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    team(overrides?: CallOverrides): Promise<string>;

    tokenURI(gobblerId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    upgradeRandProvider(newRandProvider: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
    ): ApprovalEventFilter;

    'ApprovalForAll(address,address,bool)'(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null,
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null,
    ): ApprovalForAllEventFilter;

    'ArtGobbled(address,uint256,address,uint256)'(
      user?: PromiseOrValue<string> | null,
      gobblerId?: PromiseOrValue<BigNumberish> | null,
      nft?: PromiseOrValue<string> | null,
      id?: null,
    ): ArtGobbledEventFilter;
    ArtGobbled(
      user?: PromiseOrValue<string> | null,
      gobblerId?: PromiseOrValue<BigNumberish> | null,
      nft?: PromiseOrValue<string> | null,
      id?: null,
    ): ArtGobbledEventFilter;

    'GobblerClaimed(address,uint256)'(
      user?: PromiseOrValue<string> | null,
      gobblerId?: PromiseOrValue<BigNumberish> | null,
    ): GobblerClaimedEventFilter;
    GobblerClaimed(
      user?: PromiseOrValue<string> | null,
      gobblerId?: PromiseOrValue<BigNumberish> | null,
    ): GobblerClaimedEventFilter;

    'GobblerPurchased(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      gobblerId?: PromiseOrValue<BigNumberish> | null,
      price?: null,
    ): GobblerPurchasedEventFilter;
    GobblerPurchased(
      user?: PromiseOrValue<string> | null,
      gobblerId?: PromiseOrValue<BigNumberish> | null,
      price?: null,
    ): GobblerPurchasedEventFilter;

    'GobblersRevealed(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      numGobblers?: null,
      lastRevealedId?: null,
    ): GobblersRevealedEventFilter;
    GobblersRevealed(
      user?: PromiseOrValue<string> | null,
      numGobblers?: null,
      lastRevealedId?: null,
    ): GobblersRevealedEventFilter;

    'GooBalanceUpdated(address,uint256)'(
      user?: PromiseOrValue<string> | null,
      newGooBalance?: null,
    ): GooBalanceUpdatedEventFilter;
    GooBalanceUpdated(user?: PromiseOrValue<string> | null, newGooBalance?: null): GooBalanceUpdatedEventFilter;

    'LegendaryGobblerMinted(address,uint256,uint256[])'(
      user?: PromiseOrValue<string> | null,
      gobblerId?: PromiseOrValue<BigNumberish> | null,
      burnedGobblerIds?: null,
    ): LegendaryGobblerMintedEventFilter;
    LegendaryGobblerMinted(
      user?: PromiseOrValue<string> | null,
      gobblerId?: PromiseOrValue<BigNumberish> | null,
      burnedGobblerIds?: null,
    ): LegendaryGobblerMintedEventFilter;

    'OwnershipTransferred(address,address)'(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'RandProviderUpgraded(address,address)'(
      user?: PromiseOrValue<string> | null,
      newRandProvider?: PromiseOrValue<string> | null,
    ): RandProviderUpgradedEventFilter;
    RandProviderUpgraded(
      user?: PromiseOrValue<string> | null,
      newRandProvider?: PromiseOrValue<string> | null,
    ): RandProviderUpgradedEventFilter;

    'RandomnessFulfilled(uint256)'(randomness?: null): RandomnessFulfilledEventFilter;
    RandomnessFulfilled(randomness?: null): RandomnessFulfilledEventFilter;

    'RandomnessRequested(address,uint256)'(
      user?: PromiseOrValue<string> | null,
      toBeRevealed?: null,
    ): RandomnessRequestedEventFilter;
    RandomnessRequested(user?: PromiseOrValue<string> | null, toBeRevealed?: null): RandomnessRequestedEventFilter;

    'ReservedGobblersMinted(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      lastMintedGobblerId?: null,
      numGobblersEach?: null,
    ): ReservedGobblersMintedEventFilter;
    ReservedGobblersMinted(
      user?: PromiseOrValue<string> | null,
      lastMintedGobblerId?: null,
      numGobblersEach?: null,
    ): ReservedGobblersMintedEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
    ): TransferEventFilter;
  };

  estimateGas: {
    BASE_URI(overrides?: CallOverrides): Promise<BigNumber>;

    FIRST_LEGENDARY_GOBBLER_ID(overrides?: CallOverrides): Promise<BigNumber>;

    LEGENDARY_AUCTION_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    LEGENDARY_GOBBLER_INITIAL_START_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    LEGENDARY_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_MINTABLE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    MINTLIST_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    PROVENANCE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    RESERVED_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    UNREVEALED_URI(overrides?: CallOverrides): Promise<BigNumber>;

    acceptRandomSeed(
      arg0: PromiseOrValue<BytesLike>,
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addGoo(
      gooAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    burnGooForPages(
      user: PromiseOrValue<string>,
      gooAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimGobbler(
      proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    community(overrides?: CallOverrides): Promise<BigNumber>;

    currentNonLegendaryId(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getCopiesOfArtGobbledByGobbler(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getGobblerData(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getGobblerEmissionMultiple(gobblerId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getTargetSaleTime(sold: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getUserData(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getUserEmissionMultiple(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getVRGDAPrice(
      timeSinceStart: PromiseOrValue<BigNumberish>,
      sold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    gobble(
      gobblerId: PromiseOrValue<BigNumberish>,
      nft: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      isERC1155: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    gobblerPrice(overrides?: CallOverrides): Promise<BigNumber>;

    gobblerRevealsData(overrides?: CallOverrides): Promise<BigNumber>;

    goo(overrides?: CallOverrides): Promise<BigNumber>;

    gooBalance(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    hasClaimedMintlistGobbler(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    legendaryGobblerAuctionData(overrides?: CallOverrides): Promise<BigNumber>;

    legendaryGobblerPrice(overrides?: CallOverrides): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    mintFromGoo(
      maxPrice: PromiseOrValue<BigNumberish>,
      useVirtualBalance: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mintLegendaryGobbler(
      gobblerIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mintReservedGobblers(
      numGobblersEach: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mintStart(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    numMintedForReserves(overrides?: CallOverrides): Promise<BigNumber>;

    numMintedFromGoo(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    pages(overrides?: CallOverrides): Promise<BigNumber>;

    randProvider(overrides?: CallOverrides): Promise<BigNumber>;

    removeGoo(
      gooAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    requestRandomSeed(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    revealGobblers(
      numGobblers: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    targetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    team(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(gobblerId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    upgradeRandProvider(
      newRandProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_URI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FIRST_LEGENDARY_GOBBLER_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LEGENDARY_AUCTION_INTERVAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LEGENDARY_GOBBLER_INITIAL_START_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LEGENDARY_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_MINTABLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINTLIST_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROVENANCE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RESERVED_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNREVEALED_URI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptRandomSeed(
      arg0: PromiseOrValue<BytesLike>,
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addGoo(
      gooAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnGooForPages(
      user: PromiseOrValue<string>,
      gooAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimGobbler(
      proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    community(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentNonLegendaryId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCopiesOfArtGobbledByGobbler(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getGobblerData(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGobblerEmissionMultiple(
      gobblerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTargetSaleTime(sold: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserData(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserEmissionMultiple(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVRGDAPrice(
      timeSinceStart: PromiseOrValue<BigNumberish>,
      sold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    gobble(
      gobblerId: PromiseOrValue<BigNumberish>,
      nft: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      isERC1155: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    gobblerPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gobblerRevealsData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    goo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gooBalance(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasClaimedMintlistGobbler(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    legendaryGobblerAuctionData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    legendaryGobblerPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintFromGoo(
      maxPrice: PromiseOrValue<BigNumberish>,
      useVirtualBalance: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mintLegendaryGobbler(
      gobblerIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mintReservedGobblers(
      numGobblersEach: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mintStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numMintedForReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numMintedFromGoo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pages(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    randProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeGoo(
      gooAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    requestRandomSeed(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    revealGobblers(
      numGobblers: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    team(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(gobblerId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    upgradeRandProvider(
      newRandProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
