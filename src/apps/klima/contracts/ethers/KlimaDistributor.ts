/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface KlimaDistributorInterface extends utils.Interface {
  functions: {
    'KLIMA()': FunctionFragment;
    'addRecipient(address,uint256)': FunctionFragment;
    'adjustments(uint256)': FunctionFragment;
    'distribute()': FunctionFragment;
    'epochLength()': FunctionFragment;
    'info(uint256)': FunctionFragment;
    'nextEpochBlock()': FunctionFragment;
    'nextRewardAt(uint256)': FunctionFragment;
    'nextRewardFor(address)': FunctionFragment;
    'policy()': FunctionFragment;
    'pullPolicy()': FunctionFragment;
    'pushPolicy(address)': FunctionFragment;
    'removeRecipient(uint256,address)': FunctionFragment;
    'renouncePolicy()': FunctionFragment;
    'setAdjustment(uint256,bool,uint256,uint256)': FunctionFragment;
    'treasury()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'KLIMA'
      | 'addRecipient'
      | 'adjustments'
      | 'distribute'
      | 'epochLength'
      | 'info'
      | 'nextEpochBlock'
      | 'nextRewardAt'
      | 'nextRewardFor'
      | 'policy'
      | 'pullPolicy'
      | 'pushPolicy'
      | 'removeRecipient'
      | 'renouncePolicy'
      | 'setAdjustment'
      | 'treasury',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'KLIMA', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addRecipient',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'adjustments', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'distribute', values?: undefined): string;
  encodeFunctionData(functionFragment: 'epochLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'info', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'nextEpochBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nextRewardAt', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'nextRewardFor', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'policy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pullPolicy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pushPolicy', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'removeRecipient',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'renouncePolicy', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setAdjustment',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'treasury', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'KLIMA', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addRecipient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adjustments', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distribute', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'epochLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'info', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nextEpochBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nextRewardAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nextRewardFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'policy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pullPolicy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pushPolicy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeRecipient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renouncePolicy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAdjustment', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result;

  events: {
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface KlimaDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KlimaDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    KLIMA(overrides?: CallOverrides): Promise<[string]>;

    addRecipient(
      _recipient: PromiseOrValue<string>,
      _rewardRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    adjustments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        add: boolean;
        rate: BigNumber;
        target: BigNumber;
      }
    >;

    distribute(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    epochLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    info(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, string] & { rate: BigNumber; recipient: string }>;

    nextEpochBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextRewardAt(_rate: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    nextRewardFor(_recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    policy(overrides?: CallOverrides): Promise<[string]>;

    pullPolicy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    pushPolicy(
      newPolicy_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeRecipient(
      _index: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renouncePolicy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setAdjustment(
      _index: PromiseOrValue<BigNumberish>,
      _add: PromiseOrValue<boolean>,
      _rate: PromiseOrValue<BigNumberish>,
      _target: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;
  };

  KLIMA(overrides?: CallOverrides): Promise<string>;

  addRecipient(
    _recipient: PromiseOrValue<string>,
    _rewardRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  adjustments(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      add: boolean;
      rate: BigNumber;
      target: BigNumber;
    }
  >;

  distribute(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  epochLength(overrides?: CallOverrides): Promise<BigNumber>;

  info(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, string] & { rate: BigNumber; recipient: string }>;

  nextEpochBlock(overrides?: CallOverrides): Promise<BigNumber>;

  nextRewardAt(_rate: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  nextRewardFor(_recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  policy(overrides?: CallOverrides): Promise<string>;

  pullPolicy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  pushPolicy(
    newPolicy_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeRecipient(
    _index: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renouncePolicy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setAdjustment(
    _index: PromiseOrValue<BigNumberish>,
    _add: PromiseOrValue<boolean>,
    _rate: PromiseOrValue<BigNumberish>,
    _target: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    KLIMA(overrides?: CallOverrides): Promise<string>;

    addRecipient(
      _recipient: PromiseOrValue<string>,
      _rewardRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    adjustments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        add: boolean;
        rate: BigNumber;
        target: BigNumber;
      }
    >;

    distribute(overrides?: CallOverrides): Promise<boolean>;

    epochLength(overrides?: CallOverrides): Promise<BigNumber>;

    info(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, string] & { rate: BigNumber; recipient: string }>;

    nextEpochBlock(overrides?: CallOverrides): Promise<BigNumber>;

    nextRewardAt(_rate: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    nextRewardFor(_recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    policy(overrides?: CallOverrides): Promise<string>;

    pullPolicy(overrides?: CallOverrides): Promise<void>;

    pushPolicy(newPolicy_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    removeRecipient(
      _index: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    renouncePolicy(overrides?: CallOverrides): Promise<void>;

    setAdjustment(
      _index: PromiseOrValue<BigNumberish>,
      _add: PromiseOrValue<boolean>,
      _rate: PromiseOrValue<BigNumberish>,
      _target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    KLIMA(overrides?: CallOverrides): Promise<BigNumber>;

    addRecipient(
      _recipient: PromiseOrValue<string>,
      _rewardRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    adjustments(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    distribute(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    epochLength(overrides?: CallOverrides): Promise<BigNumber>;

    info(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    nextEpochBlock(overrides?: CallOverrides): Promise<BigNumber>;

    nextRewardAt(_rate: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    nextRewardFor(_recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    policy(overrides?: CallOverrides): Promise<BigNumber>;

    pullPolicy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    pushPolicy(
      newPolicy_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeRecipient(
      _index: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renouncePolicy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setAdjustment(
      _index: PromiseOrValue<BigNumberish>,
      _add: PromiseOrValue<boolean>,
      _rate: PromiseOrValue<BigNumberish>,
      _target: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    KLIMA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRecipient(
      _recipient: PromiseOrValue<string>,
      _rewardRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    adjustments(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distribute(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    epochLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    info(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextEpochBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextRewardAt(_rate: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextRewardFor(_recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    policy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pullPolicy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    pushPolicy(
      newPolicy_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeRecipient(
      _index: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renouncePolicy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setAdjustment(
      _index: PromiseOrValue<BigNumberish>,
      _add: PromiseOrValue<boolean>,
      _rate: PromiseOrValue<BigNumberish>,
      _target: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
