/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface TraderJoeStableStakingInterface extends utils.Interface {
  functions: {
    'ACC_REWARD_PER_SHARE_PRECISION()': FunctionFragment;
    'DEPOSIT_FEE_PERCENT_PRECISION()': FunctionFragment;
    'accRewardPerShare(address)': FunctionFragment;
    'addRewardToken(address)': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'depositFeePercent()': FunctionFragment;
    'emergencyWithdraw()': FunctionFragment;
    'feeCollector()': FunctionFragment;
    'getUserInfo(address,address)': FunctionFragment;
    'initialize(address,address,address,uint256)': FunctionFragment;
    'internalJoeBalance()': FunctionFragment;
    'isRewardToken(address)': FunctionFragment;
    'joe()': FunctionFragment;
    'lastRewardBalance(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingReward(address,address)': FunctionFragment;
    'removeRewardToken(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardTokens(uint256)': FunctionFragment;
    'rewardTokensLength()': FunctionFragment;
    'setDepositFeePercent(uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateReward(address)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'ACC_REWARD_PER_SHARE_PRECISION'
      | 'DEPOSIT_FEE_PERCENT_PRECISION'
      | 'accRewardPerShare'
      | 'addRewardToken'
      | 'deposit'
      | 'depositFeePercent'
      | 'emergencyWithdraw'
      | 'feeCollector'
      | 'getUserInfo'
      | 'initialize'
      | 'internalJoeBalance'
      | 'isRewardToken'
      | 'joe'
      | 'lastRewardBalance'
      | 'owner'
      | 'pendingReward'
      | 'removeRewardToken'
      | 'renounceOwnership'
      | 'rewardTokens'
      | 'rewardTokensLength'
      | 'setDepositFeePercent'
      | 'transferOwnership'
      | 'updateReward'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'ACC_REWARD_PER_SHARE_PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DEPOSIT_FEE_PERCENT_PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accRewardPerShare', values: [string]): string;
  encodeFunctionData(functionFragment: 'addRewardToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'depositFeePercent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'emergencyWithdraw', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feeCollector', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getUserInfo', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string, string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'internalJoeBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isRewardToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'joe', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastRewardBalance', values: [string]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingReward', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'removeRewardToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardTokens', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'rewardTokensLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setDepositFeePercent', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateReward', values: [string]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'ACC_REWARD_PER_SHARE_PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEPOSIT_FEE_PERCENT_PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accRewardPerShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addRewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositFeePercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeCollector', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'internalJoeBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isRewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'joe', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastRewardBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeRewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokensLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDepositFeePercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'ClaimReward(address,address,uint256)': EventFragment;
    'Deposit(address,uint256,uint256)': EventFragment;
    'DepositFeeChanged(uint256,uint256)': EventFragment;
    'EmergencyWithdraw(address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'RewardTokenAdded(address)': EventFragment;
    'RewardTokenRemoved(address)': EventFragment;
    'Withdraw(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ClaimReward'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositFeeChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardTokenAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardTokenRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface ClaimRewardEventObject {
  user: string;
  rewardToken: string;
  amount: BigNumber;
}
export type ClaimRewardEvent = TypedEvent<[string, string, BigNumber], ClaimRewardEventObject>;

export type ClaimRewardEventFilter = TypedEventFilter<ClaimRewardEvent>;

export interface DepositEventObject {
  user: string;
  amount: BigNumber;
  fee: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DepositFeeChangedEventObject {
  newFee: BigNumber;
  oldFee: BigNumber;
}
export type DepositFeeChangedEvent = TypedEvent<[BigNumber, BigNumber], DepositFeeChangedEventObject>;

export type DepositFeeChangedEventFilter = TypedEventFilter<DepositFeeChangedEvent>;

export interface EmergencyWithdrawEventObject {
  user: string;
  amount: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<[string, BigNumber], EmergencyWithdrawEventObject>;

export type EmergencyWithdrawEventFilter = TypedEventFilter<EmergencyWithdrawEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RewardTokenAddedEventObject {
  token: string;
}
export type RewardTokenAddedEvent = TypedEvent<[string], RewardTokenAddedEventObject>;

export type RewardTokenAddedEventFilter = TypedEventFilter<RewardTokenAddedEvent>;

export interface RewardTokenRemovedEventObject {
  token: string;
}
export type RewardTokenRemovedEvent = TypedEvent<[string], RewardTokenRemovedEventObject>;

export type RewardTokenRemovedEventFilter = TypedEventFilter<RewardTokenRemovedEvent>;

export interface WithdrawEventObject {
  user: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface TraderJoeStableStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TraderJoeStableStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ACC_REWARD_PER_SHARE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEPOSIT_FEE_PERCENT_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    accRewardPerShare(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    addRewardToken(
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    getUserInfo(_user: string, _rewardToken: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    initialize(
      _rewardToken: string,
      _joe: string,
      _feeCollector: string,
      _depositFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    internalJoeBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    isRewardToken(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    joe(overrides?: CallOverrides): Promise<[string]>;

    lastRewardBalance(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingReward(_user: string, _token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    removeRewardToken(
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    rewardTokensLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    setDepositFeePercent(
      _depositFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateReward(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  ACC_REWARD_PER_SHARE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  DEPOSIT_FEE_PERCENT_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  accRewardPerShare(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  addRewardToken(
    _rewardToken: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  getUserInfo(_user: string, _rewardToken: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  initialize(
    _rewardToken: string,
    _joe: string,
    _feeCollector: string,
    _depositFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  internalJoeBalance(overrides?: CallOverrides): Promise<BigNumber>;

  isRewardToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  joe(overrides?: CallOverrides): Promise<string>;

  lastRewardBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingReward(_user: string, _token: string, overrides?: CallOverrides): Promise<BigNumber>;

  removeRewardToken(
    _rewardToken: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  rewardTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

  setDepositFeePercent(
    _depositFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateReward(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    ACC_REWARD_PER_SHARE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    DEPOSIT_FEE_PERCENT_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    accRewardPerShare(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    addRewardToken(_rewardToken: string, overrides?: CallOverrides): Promise<void>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(overrides?: CallOverrides): Promise<void>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    getUserInfo(_user: string, _rewardToken: string, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    initialize(
      _rewardToken: string,
      _joe: string,
      _feeCollector: string,
      _depositFeePercent: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    internalJoeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    isRewardToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    joe(overrides?: CallOverrides): Promise<string>;

    lastRewardBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingReward(_user: string, _token: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeRewardToken(_rewardToken: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    rewardTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    setDepositFeePercent(_depositFeePercent: BigNumberish, overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    updateReward(_token: string, overrides?: CallOverrides): Promise<void>;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'ClaimReward(address,address,uint256)'(
      user?: string | null,
      rewardToken?: string | null,
      amount?: null,
    ): ClaimRewardEventFilter;
    ClaimReward(user?: string | null, rewardToken?: string | null, amount?: null): ClaimRewardEventFilter;

    'Deposit(address,uint256,uint256)'(user?: string | null, amount?: null, fee?: null): DepositEventFilter;
    Deposit(user?: string | null, amount?: null, fee?: null): DepositEventFilter;

    'DepositFeeChanged(uint256,uint256)'(newFee?: null, oldFee?: null): DepositFeeChangedEventFilter;
    DepositFeeChanged(newFee?: null, oldFee?: null): DepositFeeChangedEventFilter;

    'EmergencyWithdraw(address,uint256)'(user?: string | null, amount?: null): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(user?: string | null, amount?: null): EmergencyWithdrawEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    'RewardTokenAdded(address)'(token?: null): RewardTokenAddedEventFilter;
    RewardTokenAdded(token?: null): RewardTokenAddedEventFilter;

    'RewardTokenRemoved(address)'(token?: null): RewardTokenRemovedEventFilter;
    RewardTokenRemoved(token?: null): RewardTokenRemovedEventFilter;

    'Withdraw(address,uint256)'(user?: string | null, amount?: null): WithdrawEventFilter;
    Withdraw(user?: string | null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    ACC_REWARD_PER_SHARE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    DEPOSIT_FEE_PERCENT_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    accRewardPerShare(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    addRewardToken(
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    deposit(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    depositFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    getUserInfo(_user: string, _rewardToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _rewardToken: string,
      _joe: string,
      _feeCollector: string,
      _depositFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    internalJoeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    isRewardToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    joe(overrides?: CallOverrides): Promise<BigNumber>;

    lastRewardBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingReward(_user: string, _token: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeRewardToken(
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    setDepositFeePercent(
      _depositFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateReward(_token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdraw(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    ACC_REWARD_PER_SHARE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEPOSIT_FEE_PERCENT_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accRewardPerShare(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRewardToken(
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserInfo(_user: string, _rewardToken: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _rewardToken: string,
      _joe: string,
      _feeCollector: string,
      _depositFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    internalJoeBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRewardToken(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    joe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRewardBalance(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingReward(_user: string, _token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeRewardToken(
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokensLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDepositFeePercent(
      _depositFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateReward(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
