/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface StrikeComptrollerInterface extends utils.Interface {
  functions: {
    '_become(address)': FunctionFragment;
    '_borrowGuardianPaused()': FunctionFragment;
    '_dropStrikeMarket(address)': FunctionFragment;
    '_grantSTRK(address,uint256)': FunctionFragment;
    '_mintGuardianPaused()': FunctionFragment;
    '_setBorrowPaused(address,bool)': FunctionFragment;
    '_setCloseFactor(uint256)': FunctionFragment;
    '_setCollateralFactor(address,uint256)': FunctionFragment;
    '_setContributorStrikeSpeed(address,uint256)': FunctionFragment;
    '_setLiquidationIncentive(uint256)': FunctionFragment;
    '_setMaxAssets(uint256)': FunctionFragment;
    '_setMintPaused(address,bool)': FunctionFragment;
    '_setPauseGuardian(address)': FunctionFragment;
    '_setPriceOracle(address)': FunctionFragment;
    '_setReserveInfo(address,address)': FunctionFragment;
    '_setSeizePaused(bool)': FunctionFragment;
    '_setStrikeSpeeds(address[],uint256[],uint256[])': FunctionFragment;
    '_setStrkStakingInfo(address)': FunctionFragment;
    '_setTransferPaused(bool)': FunctionFragment;
    '_supportMarket(address)': FunctionFragment;
    'accountAssets(address,uint256)': FunctionFragment;
    'admin()': FunctionFragment;
    'allMarkets(uint256)': FunctionFragment;
    'borrowAllowed(address,address,uint256)': FunctionFragment;
    'borrowGuardianPaused(address)': FunctionFragment;
    'borrowVerify(address,address,uint256)': FunctionFragment;
    'canClaimStrikeBySuppling(address)': FunctionFragment;
    'checkMembership(address,address)': FunctionFragment;
    'claimStrike(address[],address[],bool,bool)': FunctionFragment;
    'claimStrike(address)': FunctionFragment;
    'claimStrike(address,address[])': FunctionFragment;
    'closeFactorMantissa()': FunctionFragment;
    'comptrollerImplementation()': FunctionFragment;
    'enterMarkets(address[])': FunctionFragment;
    'exitMarket(address)': FunctionFragment;
    'getAccountLiquidity(address)': FunctionFragment;
    'getAllMarkets()': FunctionFragment;
    'getAssetsIn(address)': FunctionFragment;
    'getBlockNumber()': FunctionFragment;
    'getHypotheticalAccountLiquidity(address,address,uint256,uint256)': FunctionFragment;
    'getSTRKAddress()': FunctionFragment;
    'isComptroller()': FunctionFragment;
    'lastContributorBlock(address)': FunctionFragment;
    'liquidateBorrowAllowed(address,address,address,address,uint256)': FunctionFragment;
    'liquidateBorrowVerify(address,address,address,address,uint256,uint256)': FunctionFragment;
    'liquidateCalculateSeizeTokens(address,address,uint256)': FunctionFragment;
    'liquidationIncentiveMantissa()': FunctionFragment;
    'markets(address)': FunctionFragment;
    'maxAssets()': FunctionFragment;
    'mintAllowed(address,address,uint256)': FunctionFragment;
    'mintGuardianPaused(address)': FunctionFragment;
    'mintVerify(address,address,uint256,uint256)': FunctionFragment;
    'oracle()': FunctionFragment;
    'pauseGuardian()': FunctionFragment;
    'pendingAdmin()': FunctionFragment;
    'pendingComptrollerImplementation()': FunctionFragment;
    'redeemAllowed(address,address,uint256)': FunctionFragment;
    'redeemVerify(address,address,uint256,uint256)': FunctionFragment;
    'repayBorrowAllowed(address,address,address,uint256)': FunctionFragment;
    'repayBorrowVerify(address,address,address,uint256,uint256)': FunctionFragment;
    'reserveAddress()': FunctionFragment;
    'reserveGuardian()': FunctionFragment;
    'seizeAllowed(address,address,address,address,uint256)': FunctionFragment;
    'seizeGuardianPaused()': FunctionFragment;
    'seizeVerify(address,address,address,address,uint256)': FunctionFragment;
    'strikeAccrued(address)': FunctionFragment;
    'strikeBorrowSpeeds(address)': FunctionFragment;
    'strikeBorrowState(address)': FunctionFragment;
    'strikeBorrowerIndex(address,address)': FunctionFragment;
    'strikeClaimThreshold()': FunctionFragment;
    'strikeContributorSpeeds(address)': FunctionFragment;
    'strikeInitialIndex()': FunctionFragment;
    'strikeRate()': FunctionFragment;
    'strikeSpeeds(address)': FunctionFragment;
    'strikeSupplierIndex(address,address)': FunctionFragment;
    'strikeSupplySpeeds(address)': FunctionFragment;
    'strikeSupplyState(address)': FunctionFragment;
    'strkStaking()': FunctionFragment;
    'transferAllowed(address,address,address,uint256)': FunctionFragment;
    'transferGuardianPaused()': FunctionFragment;
    'transferVerify(address,address,address,uint256)': FunctionFragment;
    'updateContributorRewards(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | '_become'
      | '_borrowGuardianPaused'
      | '_dropStrikeMarket'
      | '_grantSTRK'
      | '_mintGuardianPaused'
      | '_setBorrowPaused'
      | '_setCloseFactor'
      | '_setCollateralFactor'
      | '_setContributorStrikeSpeed'
      | '_setLiquidationIncentive'
      | '_setMaxAssets'
      | '_setMintPaused'
      | '_setPauseGuardian'
      | '_setPriceOracle'
      | '_setReserveInfo'
      | '_setSeizePaused'
      | '_setStrikeSpeeds'
      | '_setStrkStakingInfo'
      | '_setTransferPaused'
      | '_supportMarket'
      | 'accountAssets'
      | 'admin'
      | 'allMarkets'
      | 'borrowAllowed'
      | 'borrowGuardianPaused'
      | 'borrowVerify'
      | 'canClaimStrikeBySuppling'
      | 'checkMembership'
      | 'claimStrike(address[],address[],bool,bool)'
      | 'claimStrike(address)'
      | 'claimStrike(address,address[])'
      | 'closeFactorMantissa'
      | 'comptrollerImplementation'
      | 'enterMarkets'
      | 'exitMarket'
      | 'getAccountLiquidity'
      | 'getAllMarkets'
      | 'getAssetsIn'
      | 'getBlockNumber'
      | 'getHypotheticalAccountLiquidity'
      | 'getSTRKAddress'
      | 'isComptroller'
      | 'lastContributorBlock'
      | 'liquidateBorrowAllowed'
      | 'liquidateBorrowVerify'
      | 'liquidateCalculateSeizeTokens'
      | 'liquidationIncentiveMantissa'
      | 'markets'
      | 'maxAssets'
      | 'mintAllowed'
      | 'mintGuardianPaused'
      | 'mintVerify'
      | 'oracle'
      | 'pauseGuardian'
      | 'pendingAdmin'
      | 'pendingComptrollerImplementation'
      | 'redeemAllowed'
      | 'redeemVerify'
      | 'repayBorrowAllowed'
      | 'repayBorrowVerify'
      | 'reserveAddress'
      | 'reserveGuardian'
      | 'seizeAllowed'
      | 'seizeGuardianPaused'
      | 'seizeVerify'
      | 'strikeAccrued'
      | 'strikeBorrowSpeeds'
      | 'strikeBorrowState'
      | 'strikeBorrowerIndex'
      | 'strikeClaimThreshold'
      | 'strikeContributorSpeeds'
      | 'strikeInitialIndex'
      | 'strikeRate'
      | 'strikeSpeeds'
      | 'strikeSupplierIndex'
      | 'strikeSupplySpeeds'
      | 'strikeSupplyState'
      | 'strkStaking'
      | 'transferAllowed'
      | 'transferGuardianPaused'
      | 'transferVerify'
      | 'updateContributorRewards',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: '_become', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: '_borrowGuardianPaused', values?: undefined): string;
  encodeFunctionData(functionFragment: '_dropStrikeMarket', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: '_grantSTRK',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: '_mintGuardianPaused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: '_setBorrowPaused',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: '_setCloseFactor', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: '_setCollateralFactor',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: '_setContributorStrikeSpeed',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: '_setLiquidationIncentive', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: '_setMaxAssets', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: '_setMintPaused',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: '_setPauseGuardian', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: '_setPriceOracle', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: '_setReserveInfo',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: '_setSeizePaused', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(
    functionFragment: '_setStrikeSpeeds',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(functionFragment: '_setStrkStakingInfo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: '_setTransferPaused', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: '_supportMarket', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'accountAssets',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allMarkets', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'borrowAllowed',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'borrowGuardianPaused', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'borrowVerify',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'canClaimStrikeBySuppling', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'checkMembership',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'claimStrike(address[],address[],bool,bool)',
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[], PromiseOrValue<boolean>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'claimStrike(address)', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'claimStrike(address,address[])',
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(functionFragment: 'closeFactorMantissa', values?: undefined): string;
  encodeFunctionData(functionFragment: 'comptrollerImplementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'enterMarkets', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'exitMarket', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAccountLiquidity', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAllMarkets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAssetsIn', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getBlockNumber', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getHypotheticalAccountLiquidity',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'getSTRKAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isComptroller', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastContributorBlock', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'liquidateBorrowAllowed',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateBorrowVerify',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateCalculateSeizeTokens',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'liquidationIncentiveMantissa', values?: undefined): string;
  encodeFunctionData(functionFragment: 'markets', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maxAssets', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'mintAllowed',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'mintGuardianPaused', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'mintVerify',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'oracle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pauseGuardian', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingAdmin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingComptrollerImplementation', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'redeemAllowed',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'redeemVerify',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'repayBorrowAllowed',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'repayBorrowVerify',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'reserveAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reserveGuardian', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'seizeAllowed',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'seizeGuardianPaused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'seizeVerify',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'strikeAccrued', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'strikeBorrowSpeeds', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'strikeBorrowState', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'strikeBorrowerIndex',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'strikeClaimThreshold', values?: undefined): string;
  encodeFunctionData(functionFragment: 'strikeContributorSpeeds', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'strikeInitialIndex', values?: undefined): string;
  encodeFunctionData(functionFragment: 'strikeRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'strikeSpeeds', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'strikeSupplierIndex',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'strikeSupplySpeeds', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'strikeSupplyState', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'strkStaking', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transferAllowed',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'transferGuardianPaused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transferVerify',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'updateContributorRewards', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: '_become', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_borrowGuardianPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_dropStrikeMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_grantSTRK', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_mintGuardianPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setBorrowPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setCloseFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setCollateralFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setContributorStrikeSpeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setLiquidationIncentive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setMaxAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setMintPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setPauseGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setPriceOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setReserveInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setSeizePaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setStrikeSpeeds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setStrkStakingInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setTransferPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_supportMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowGuardianPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'canClaimStrikeBySuppling', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkMembership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimStrike(address[],address[],bool,bool)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimStrike(address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimStrike(address,address[])', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeFactorMantissa', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'comptrollerImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enterMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exitMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAssetsIn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBlockNumber', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getHypotheticalAccountLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSTRKAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isComptroller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastContributorBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateBorrowAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateBorrowVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateCalculateSeizeTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidationIncentiveMantissa', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'markets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintGuardianPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'oracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pauseGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingComptrollerImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayBorrowAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayBorrowVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reserveAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reserveGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'seizeAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'seizeGuardianPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'seizeVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strikeAccrued', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strikeBorrowSpeeds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strikeBorrowState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strikeBorrowerIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strikeClaimThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strikeContributorSpeeds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strikeInitialIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strikeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strikeSpeeds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strikeSupplierIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strikeSupplySpeeds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strikeSupplyState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strkStaking', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferGuardianPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateContributorRewards', data: BytesLike): Result;

  events: {
    'ActionPaused(string,bool)': EventFragment;
    'ContributorStrikeSpeedUpdated(address,uint256)': EventFragment;
    'DistributedBorrowerStrike(address,address,uint256,uint256)': EventFragment;
    'DistributedSupplierStrike(address,address,uint256,uint256)': EventFragment;
    'Failure(uint256,uint256,uint256)': EventFragment;
    'MarketEntered(address,address)': EventFragment;
    'MarketExited(address,address)': EventFragment;
    'MarketListed(address)': EventFragment;
    'MarketStriked(address,bool)': EventFragment;
    'NewCloseFactor(uint256,uint256)': EventFragment;
    'NewCollateralFactor(address,uint256,uint256)': EventFragment;
    'NewLiquidationIncentive(uint256,uint256)': EventFragment;
    'NewMaxAssets(uint256,uint256)': EventFragment;
    'NewPauseGuardian(address,address)': EventFragment;
    'NewPriceOracle(address,address)': EventFragment;
    'NewReserveGuardian(address,address,address,address)': EventFragment;
    'NewStrikeRate(uint256,uint256)': EventFragment;
    'NewStrkStakingInfo(address,address)': EventFragment;
    'StrikeBorrowSpeedUpdated(address,uint256)': EventFragment;
    'StrikeGranted(address,uint256)': EventFragment;
    'StrikeSpeedUpdated(address,uint256)': EventFragment;
    'StrikeSupplySpeedUpdated(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ActionPaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ContributorStrikeSpeedUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DistributedBorrowerStrike'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DistributedSupplierStrike'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Failure'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketEntered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketExited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketListed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketStriked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewCloseFactor'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewCollateralFactor'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewLiquidationIncentive'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewMaxAssets'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewPauseGuardian'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewPriceOracle'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewReserveGuardian'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewStrikeRate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewStrkStakingInfo'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrikeBorrowSpeedUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrikeGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrikeSpeedUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrikeSupplySpeedUpdated'): EventFragment;
}

export interface ActionPausedEventObject {
  action: string;
  pauseState: boolean;
}
export type ActionPausedEvent = TypedEvent<[string, boolean], ActionPausedEventObject>;

export type ActionPausedEventFilter = TypedEventFilter<ActionPausedEvent>;

export interface ContributorStrikeSpeedUpdatedEventObject {
  contributor: string;
  newStrikeSpeed: BigNumber;
}
export type ContributorStrikeSpeedUpdatedEvent = TypedEvent<
  [string, BigNumber],
  ContributorStrikeSpeedUpdatedEventObject
>;

export type ContributorStrikeSpeedUpdatedEventFilter = TypedEventFilter<ContributorStrikeSpeedUpdatedEvent>;

export interface DistributedBorrowerStrikeEventObject {
  sToken: string;
  borrower: string;
  strikeDelta: BigNumber;
  strikeBorrowIndex: BigNumber;
}
export type DistributedBorrowerStrikeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DistributedBorrowerStrikeEventObject
>;

export type DistributedBorrowerStrikeEventFilter = TypedEventFilter<DistributedBorrowerStrikeEvent>;

export interface DistributedSupplierStrikeEventObject {
  sToken: string;
  supplier: string;
  strikeDelta: BigNumber;
  strikeSupplyIndex: BigNumber;
}
export type DistributedSupplierStrikeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DistributedSupplierStrikeEventObject
>;

export type DistributedSupplierStrikeEventFilter = TypedEventFilter<DistributedSupplierStrikeEvent>;

export interface FailureEventObject {
  error: BigNumber;
  info: BigNumber;
  detail: BigNumber;
}
export type FailureEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], FailureEventObject>;

export type FailureEventFilter = TypedEventFilter<FailureEvent>;

export interface MarketEnteredEventObject {
  sToken: string;
  account: string;
}
export type MarketEnteredEvent = TypedEvent<[string, string], MarketEnteredEventObject>;

export type MarketEnteredEventFilter = TypedEventFilter<MarketEnteredEvent>;

export interface MarketExitedEventObject {
  sToken: string;
  account: string;
}
export type MarketExitedEvent = TypedEvent<[string, string], MarketExitedEventObject>;

export type MarketExitedEventFilter = TypedEventFilter<MarketExitedEvent>;

export interface MarketListedEventObject {
  sToken: string;
}
export type MarketListedEvent = TypedEvent<[string], MarketListedEventObject>;

export type MarketListedEventFilter = TypedEventFilter<MarketListedEvent>;

export interface MarketStrikedEventObject {
  sToken: string;
  isStriked: boolean;
}
export type MarketStrikedEvent = TypedEvent<[string, boolean], MarketStrikedEventObject>;

export type MarketStrikedEventFilter = TypedEventFilter<MarketStrikedEvent>;

export interface NewCloseFactorEventObject {
  oldCloseFactorMantissa: BigNumber;
  newCloseFactorMantissa: BigNumber;
}
export type NewCloseFactorEvent = TypedEvent<[BigNumber, BigNumber], NewCloseFactorEventObject>;

export type NewCloseFactorEventFilter = TypedEventFilter<NewCloseFactorEvent>;

export interface NewCollateralFactorEventObject {
  sToken: string;
  oldCollateralFactorMantissa: BigNumber;
  newCollateralFactorMantissa: BigNumber;
}
export type NewCollateralFactorEvent = TypedEvent<[string, BigNumber, BigNumber], NewCollateralFactorEventObject>;

export type NewCollateralFactorEventFilter = TypedEventFilter<NewCollateralFactorEvent>;

export interface NewLiquidationIncentiveEventObject {
  oldLiquidationIncentiveMantissa: BigNumber;
  newLiquidationIncentiveMantissa: BigNumber;
}
export type NewLiquidationIncentiveEvent = TypedEvent<[BigNumber, BigNumber], NewLiquidationIncentiveEventObject>;

export type NewLiquidationIncentiveEventFilter = TypedEventFilter<NewLiquidationIncentiveEvent>;

export interface NewMaxAssetsEventObject {
  oldMaxAssets: BigNumber;
  newMaxAssets: BigNumber;
}
export type NewMaxAssetsEvent = TypedEvent<[BigNumber, BigNumber], NewMaxAssetsEventObject>;

export type NewMaxAssetsEventFilter = TypedEventFilter<NewMaxAssetsEvent>;

export interface NewPauseGuardianEventObject {
  oldPauseGuardian: string;
  newPauseGuardian: string;
}
export type NewPauseGuardianEvent = TypedEvent<[string, string], NewPauseGuardianEventObject>;

export type NewPauseGuardianEventFilter = TypedEventFilter<NewPauseGuardianEvent>;

export interface NewPriceOracleEventObject {
  oldPriceOracle: string;
  newPriceOracle: string;
}
export type NewPriceOracleEvent = TypedEvent<[string, string], NewPriceOracleEventObject>;

export type NewPriceOracleEventFilter = TypedEventFilter<NewPriceOracleEvent>;

export interface NewReserveGuardianEventObject {
  oldReserveGuardian: string;
  newReserveGuardian: string;
  oldReserveAddress: string;
  newReserveAddress: string;
}
export type NewReserveGuardianEvent = TypedEvent<[string, string, string, string], NewReserveGuardianEventObject>;

export type NewReserveGuardianEventFilter = TypedEventFilter<NewReserveGuardianEvent>;

export interface NewStrikeRateEventObject {
  oldStrikeRate: BigNumber;
  newStrikeRate: BigNumber;
}
export type NewStrikeRateEvent = TypedEvent<[BigNumber, BigNumber], NewStrikeRateEventObject>;

export type NewStrikeRateEventFilter = TypedEventFilter<NewStrikeRateEvent>;

export interface NewStrkStakingInfoEventObject {
  oldStrkStaking: string;
  newStrkStaking: string;
}
export type NewStrkStakingInfoEvent = TypedEvent<[string, string], NewStrkStakingInfoEventObject>;

export type NewStrkStakingInfoEventFilter = TypedEventFilter<NewStrkStakingInfoEvent>;

export interface StrikeBorrowSpeedUpdatedEventObject {
  sToken: string;
  newSpeed: BigNumber;
}
export type StrikeBorrowSpeedUpdatedEvent = TypedEvent<[string, BigNumber], StrikeBorrowSpeedUpdatedEventObject>;

export type StrikeBorrowSpeedUpdatedEventFilter = TypedEventFilter<StrikeBorrowSpeedUpdatedEvent>;

export interface StrikeGrantedEventObject {
  recipient: string;
  amount: BigNumber;
}
export type StrikeGrantedEvent = TypedEvent<[string, BigNumber], StrikeGrantedEventObject>;

export type StrikeGrantedEventFilter = TypedEventFilter<StrikeGrantedEvent>;

export interface StrikeSpeedUpdatedEventObject {
  sToken: string;
  newSpeed: BigNumber;
}
export type StrikeSpeedUpdatedEvent = TypedEvent<[string, BigNumber], StrikeSpeedUpdatedEventObject>;

export type StrikeSpeedUpdatedEventFilter = TypedEventFilter<StrikeSpeedUpdatedEvent>;

export interface StrikeSupplySpeedUpdatedEventObject {
  sToken: string;
  newSpeed: BigNumber;
}
export type StrikeSupplySpeedUpdatedEvent = TypedEvent<[string, BigNumber], StrikeSupplySpeedUpdatedEventObject>;

export type StrikeSupplySpeedUpdatedEventFilter = TypedEventFilter<StrikeSupplySpeedUpdatedEvent>;

export interface StrikeComptroller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StrikeComptrollerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _become(
      unitroller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _borrowGuardianPaused(overrides?: CallOverrides): Promise<[boolean]>;

    _dropStrikeMarket(
      sToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _grantSTRK(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _mintGuardianPaused(overrides?: CallOverrides): Promise<[boolean]>;

    _setBorrowPaused(
      sToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setCloseFactor(
      newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setCollateralFactor(
      sToken: PromiseOrValue<string>,
      newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setContributorStrikeSpeed(
      contributor: PromiseOrValue<string>,
      strikeSpeed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setMaxAssets(
      newMaxAssets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setMintPaused(
      sToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setPauseGuardian(
      newPauseGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setPriceOracle(
      newOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setReserveInfo(
      newReserveGuardian: PromiseOrValue<string>,
      newReserveAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setSeizePaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setStrikeSpeeds(
      sToken: PromiseOrValue<string>[],
      supplySpeeds: PromiseOrValue<BigNumberish>[],
      borrowSpeeds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setStrkStakingInfo(
      newStrkStaking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setTransferPaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _supportMarket(
      sToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    accountAssets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    borrowAllowed(
      sToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    borrowGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    borrowVerify(
      sToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    canClaimStrikeBySuppling(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    checkMembership(
      account: PromiseOrValue<string>,
      sToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    'claimStrike(address[],address[],bool,bool)'(
      holders: PromiseOrValue<string>[],
      sTokens: PromiseOrValue<string>[],
      borrowers: PromiseOrValue<boolean>,
      suppliers: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'claimStrike(address)'(
      holder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'claimStrike(address,address[])'(
      holder: PromiseOrValue<string>,
      sTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<[string]>;

    enterMarkets(
      sTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    exitMarket(
      sTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getAccountLiquidity(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getAllMarkets(overrides?: CallOverrides): Promise<[string[]]>;

    getAssetsIn(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string[]]>;

    getBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    getHypotheticalAccountLiquidity(
      account: PromiseOrValue<string>,
      sTokenModify: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getSTRKAddress(overrides?: CallOverrides): Promise<[string]>;

    isComptroller(overrides?: CallOverrides): Promise<[boolean]>;

    lastContributorBlock(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidateBorrowAllowed(
      sTokenBorrowed: PromiseOrValue<string>,
      sTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    liquidateBorrowVerify(
      sTokenBorrowed: PromiseOrValue<string>,
      sTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    liquidateCalculateSeizeTokens(
      sTokenBorrowed: PromiseOrValue<string>,
      sTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    markets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, BigNumber, boolean] & {
        isListed: boolean;
        collateralFactorMantissa: BigNumber;
        isStriked: boolean;
      }
    >;

    maxAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintAllowed(
      sToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mintGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    mintVerify(
      sToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      actualMintAmount: PromiseOrValue<BigNumberish>,
      mintTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    pauseGuardian(overrides?: CallOverrides): Promise<[string]>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    pendingComptrollerImplementation(overrides?: CallOverrides): Promise<[string]>;

    redeemAllowed(
      sToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    redeemVerify(
      sToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemAmount: PromiseOrValue<BigNumberish>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    repayBorrowAllowed(
      sToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    repayBorrowVerify(
      sToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      borrowerIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    reserveAddress(overrides?: CallOverrides): Promise<[string]>;

    reserveGuardian(overrides?: CallOverrides): Promise<[string]>;

    seizeAllowed(
      sTokenCollateral: PromiseOrValue<string>,
      sTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    seizeGuardianPaused(overrides?: CallOverrides): Promise<[boolean]>;

    seizeVerify(
      sTokenCollateral: PromiseOrValue<string>,
      sTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    strikeAccrued(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    strikeBorrowSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    strikeBorrowState(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    strikeBorrowerIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    strikeClaimThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    strikeContributorSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    strikeInitialIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    strikeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    strikeSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    strikeSupplierIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    strikeSupplySpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    strikeSupplyState(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    strkStaking(overrides?: CallOverrides): Promise<[string]>;

    transferAllowed(
      sToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferGuardianPaused(overrides?: CallOverrides): Promise<[boolean]>;

    transferVerify(
      sToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateContributorRewards(
      contributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  _become(
    unitroller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _borrowGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

  _dropStrikeMarket(
    sToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _grantSTRK(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _mintGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

  _setBorrowPaused(
    sToken: PromiseOrValue<string>,
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setCloseFactor(
    newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setCollateralFactor(
    sToken: PromiseOrValue<string>,
    newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setContributorStrikeSpeed(
    contributor: PromiseOrValue<string>,
    strikeSpeed: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setLiquidationIncentive(
    newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setMaxAssets(
    newMaxAssets: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setMintPaused(
    sToken: PromiseOrValue<string>,
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setPauseGuardian(
    newPauseGuardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setPriceOracle(
    newOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setReserveInfo(
    newReserveGuardian: PromiseOrValue<string>,
    newReserveAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setSeizePaused(
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setStrikeSpeeds(
    sToken: PromiseOrValue<string>[],
    supplySpeeds: PromiseOrValue<BigNumberish>[],
    borrowSpeeds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setStrkStakingInfo(
    newStrkStaking: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setTransferPaused(
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _supportMarket(
    sToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  accountAssets(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  borrowAllowed(
    sToken: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  borrowGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  borrowVerify(
    sToken: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  canClaimStrikeBySuppling(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  checkMembership(
    account: PromiseOrValue<string>,
    sToken: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  'claimStrike(address[],address[],bool,bool)'(
    holders: PromiseOrValue<string>[],
    sTokens: PromiseOrValue<string>[],
    borrowers: PromiseOrValue<boolean>,
    suppliers: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'claimStrike(address)'(
    holder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'claimStrike(address,address[])'(
    holder: PromiseOrValue<string>,
    sTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  comptrollerImplementation(overrides?: CallOverrides): Promise<string>;

  enterMarkets(
    sTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  exitMarket(
    sTokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getAccountLiquidity(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

  getAssetsIn(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

  getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getHypotheticalAccountLiquidity(
    account: PromiseOrValue<string>,
    sTokenModify: PromiseOrValue<string>,
    redeemTokens: PromiseOrValue<BigNumberish>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getSTRKAddress(overrides?: CallOverrides): Promise<string>;

  isComptroller(overrides?: CallOverrides): Promise<boolean>;

  lastContributorBlock(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  liquidateBorrowAllowed(
    sTokenBorrowed: PromiseOrValue<string>,
    sTokenCollateral: PromiseOrValue<string>,
    liquidator: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    repayAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  liquidateBorrowVerify(
    sTokenBorrowed: PromiseOrValue<string>,
    sTokenCollateral: PromiseOrValue<string>,
    liquidator: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    actualRepayAmount: PromiseOrValue<BigNumberish>,
    seizeTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  liquidateCalculateSeizeTokens(
    sTokenBorrowed: PromiseOrValue<string>,
    sTokenCollateral: PromiseOrValue<string>,
    actualRepayAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>;

  liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  markets(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [boolean, BigNumber, boolean] & {
      isListed: boolean;
      collateralFactorMantissa: BigNumber;
      isStriked: boolean;
    }
  >;

  maxAssets(overrides?: CallOverrides): Promise<BigNumber>;

  mintAllowed(
    sToken: PromiseOrValue<string>,
    minter: PromiseOrValue<string>,
    mintAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mintGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  mintVerify(
    sToken: PromiseOrValue<string>,
    minter: PromiseOrValue<string>,
    actualMintAmount: PromiseOrValue<BigNumberish>,
    mintTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  oracle(overrides?: CallOverrides): Promise<string>;

  pauseGuardian(overrides?: CallOverrides): Promise<string>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  pendingComptrollerImplementation(overrides?: CallOverrides): Promise<string>;

  redeemAllowed(
    sToken: PromiseOrValue<string>,
    redeemer: PromiseOrValue<string>,
    redeemTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  redeemVerify(
    sToken: PromiseOrValue<string>,
    redeemer: PromiseOrValue<string>,
    redeemAmount: PromiseOrValue<BigNumberish>,
    redeemTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  repayBorrowAllowed(
    sToken: PromiseOrValue<string>,
    payer: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    repayAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  repayBorrowVerify(
    sToken: PromiseOrValue<string>,
    payer: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    actualRepayAmount: PromiseOrValue<BigNumberish>,
    borrowerIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  reserveAddress(overrides?: CallOverrides): Promise<string>;

  reserveGuardian(overrides?: CallOverrides): Promise<string>;

  seizeAllowed(
    sTokenCollateral: PromiseOrValue<string>,
    sTokenBorrowed: PromiseOrValue<string>,
    liquidator: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    seizeTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  seizeGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

  seizeVerify(
    sTokenCollateral: PromiseOrValue<string>,
    sTokenBorrowed: PromiseOrValue<string>,
    liquidator: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    seizeTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  strikeAccrued(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  strikeBorrowSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  strikeBorrowState(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

  strikeBorrowerIndex(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  strikeClaimThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  strikeContributorSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  strikeInitialIndex(overrides?: CallOverrides): Promise<BigNumber>;

  strikeRate(overrides?: CallOverrides): Promise<BigNumber>;

  strikeSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  strikeSupplierIndex(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  strikeSupplySpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  strikeSupplyState(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

  strkStaking(overrides?: CallOverrides): Promise<string>;

  transferAllowed(
    sToken: PromiseOrValue<string>,
    src: PromiseOrValue<string>,
    dst: PromiseOrValue<string>,
    transferTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

  transferVerify(
    sToken: PromiseOrValue<string>,
    src: PromiseOrValue<string>,
    dst: PromiseOrValue<string>,
    transferTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateContributorRewards(
    contributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    _become(unitroller: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    _borrowGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

    _dropStrikeMarket(sToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    _grantSTRK(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    _mintGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

    _setBorrowPaused(
      sToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    _setCloseFactor(
      newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    _setCollateralFactor(
      sToken: PromiseOrValue<string>,
      newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    _setContributorStrikeSpeed(
      contributor: PromiseOrValue<string>,
      strikeSpeed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    _setMaxAssets(newMaxAssets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    _setMintPaused(
      sToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    _setPauseGuardian(newPauseGuardian: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    _setPriceOracle(newOracle: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    _setReserveInfo(
      newReserveGuardian: PromiseOrValue<string>,
      newReserveAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    _setSeizePaused(state: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<boolean>;

    _setStrikeSpeeds(
      sToken: PromiseOrValue<string>[],
      supplySpeeds: PromiseOrValue<BigNumberish>[],
      borrowSpeeds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    _setStrkStakingInfo(newStrkStaking: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    _setTransferPaused(state: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<boolean>;

    _supportMarket(sToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    accountAssets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    borrowAllowed(
      sToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    borrowGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    borrowVerify(
      sToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    canClaimStrikeBySuppling(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    checkMembership(
      account: PromiseOrValue<string>,
      sToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'claimStrike(address[],address[],bool,bool)'(
      holders: PromiseOrValue<string>[],
      sTokens: PromiseOrValue<string>[],
      borrowers: PromiseOrValue<boolean>,
      suppliers: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    'claimStrike(address)'(holder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    'claimStrike(address,address[])'(
      holder: PromiseOrValue<string>,
      sTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<string>;

    enterMarkets(sTokens: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<BigNumber[]>;

    exitMarket(sTokenAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountLiquidity(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

    getAssetsIn(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getHypotheticalAccountLiquidity(
      account: PromiseOrValue<string>,
      sTokenModify: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getSTRKAddress(overrides?: CallOverrides): Promise<string>;

    isComptroller(overrides?: CallOverrides): Promise<boolean>;

    lastContributorBlock(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    liquidateBorrowAllowed(
      sTokenBorrowed: PromiseOrValue<string>,
      sTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    liquidateBorrowVerify(
      sTokenBorrowed: PromiseOrValue<string>,
      sTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    liquidateCalculateSeizeTokens(
      sTokenBorrowed: PromiseOrValue<string>,
      sTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    markets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, BigNumber, boolean] & {
        isListed: boolean;
        collateralFactorMantissa: BigNumber;
        isStriked: boolean;
      }
    >;

    maxAssets(overrides?: CallOverrides): Promise<BigNumber>;

    mintAllowed(
      sToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mintGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    mintVerify(
      sToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      actualMintAmount: PromiseOrValue<BigNumberish>,
      mintTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    oracle(overrides?: CallOverrides): Promise<string>;

    pauseGuardian(overrides?: CallOverrides): Promise<string>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    pendingComptrollerImplementation(overrides?: CallOverrides): Promise<string>;

    redeemAllowed(
      sToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    redeemVerify(
      sToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemAmount: PromiseOrValue<BigNumberish>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    repayBorrowAllowed(
      sToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    repayBorrowVerify(
      sToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      borrowerIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    reserveAddress(overrides?: CallOverrides): Promise<string>;

    reserveGuardian(overrides?: CallOverrides): Promise<string>;

    seizeAllowed(
      sTokenCollateral: PromiseOrValue<string>,
      sTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    seizeGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

    seizeVerify(
      sTokenCollateral: PromiseOrValue<string>,
      sTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    strikeAccrued(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    strikeBorrowSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    strikeBorrowState(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    strikeBorrowerIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    strikeClaimThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    strikeContributorSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    strikeInitialIndex(overrides?: CallOverrides): Promise<BigNumber>;

    strikeRate(overrides?: CallOverrides): Promise<BigNumber>;

    strikeSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    strikeSupplierIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    strikeSupplySpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    strikeSupplyState(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    strkStaking(overrides?: CallOverrides): Promise<string>;

    transferAllowed(
      sToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transferGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

    transferVerify(
      sToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateContributorRewards(contributor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'ActionPaused(string,bool)'(action?: null, pauseState?: null): ActionPausedEventFilter;
    ActionPaused(action?: null, pauseState?: null): ActionPausedEventFilter;

    'ContributorStrikeSpeedUpdated(address,uint256)'(
      contributor?: PromiseOrValue<string> | null,
      newStrikeSpeed?: null,
    ): ContributorStrikeSpeedUpdatedEventFilter;
    ContributorStrikeSpeedUpdated(
      contributor?: PromiseOrValue<string> | null,
      newStrikeSpeed?: null,
    ): ContributorStrikeSpeedUpdatedEventFilter;

    'DistributedBorrowerStrike(address,address,uint256,uint256)'(
      sToken?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      strikeDelta?: null,
      strikeBorrowIndex?: null,
    ): DistributedBorrowerStrikeEventFilter;
    DistributedBorrowerStrike(
      sToken?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      strikeDelta?: null,
      strikeBorrowIndex?: null,
    ): DistributedBorrowerStrikeEventFilter;

    'DistributedSupplierStrike(address,address,uint256,uint256)'(
      sToken?: PromiseOrValue<string> | null,
      supplier?: PromiseOrValue<string> | null,
      strikeDelta?: null,
      strikeSupplyIndex?: null,
    ): DistributedSupplierStrikeEventFilter;
    DistributedSupplierStrike(
      sToken?: PromiseOrValue<string> | null,
      supplier?: PromiseOrValue<string> | null,
      strikeDelta?: null,
      strikeSupplyIndex?: null,
    ): DistributedSupplierStrikeEventFilter;

    'Failure(uint256,uint256,uint256)'(error?: null, info?: null, detail?: null): FailureEventFilter;
    Failure(error?: null, info?: null, detail?: null): FailureEventFilter;

    'MarketEntered(address,address)'(sToken?: null, account?: null): MarketEnteredEventFilter;
    MarketEntered(sToken?: null, account?: null): MarketEnteredEventFilter;

    'MarketExited(address,address)'(sToken?: null, account?: null): MarketExitedEventFilter;
    MarketExited(sToken?: null, account?: null): MarketExitedEventFilter;

    'MarketListed(address)'(sToken?: null): MarketListedEventFilter;
    MarketListed(sToken?: null): MarketListedEventFilter;

    'MarketStriked(address,bool)'(sToken?: null, isStriked?: null): MarketStrikedEventFilter;
    MarketStriked(sToken?: null, isStriked?: null): MarketStrikedEventFilter;

    'NewCloseFactor(uint256,uint256)'(
      oldCloseFactorMantissa?: null,
      newCloseFactorMantissa?: null,
    ): NewCloseFactorEventFilter;
    NewCloseFactor(oldCloseFactorMantissa?: null, newCloseFactorMantissa?: null): NewCloseFactorEventFilter;

    'NewCollateralFactor(address,uint256,uint256)'(
      sToken?: null,
      oldCollateralFactorMantissa?: null,
      newCollateralFactorMantissa?: null,
    ): NewCollateralFactorEventFilter;
    NewCollateralFactor(
      sToken?: null,
      oldCollateralFactorMantissa?: null,
      newCollateralFactorMantissa?: null,
    ): NewCollateralFactorEventFilter;

    'NewLiquidationIncentive(uint256,uint256)'(
      oldLiquidationIncentiveMantissa?: null,
      newLiquidationIncentiveMantissa?: null,
    ): NewLiquidationIncentiveEventFilter;
    NewLiquidationIncentive(
      oldLiquidationIncentiveMantissa?: null,
      newLiquidationIncentiveMantissa?: null,
    ): NewLiquidationIncentiveEventFilter;

    'NewMaxAssets(uint256,uint256)'(oldMaxAssets?: null, newMaxAssets?: null): NewMaxAssetsEventFilter;
    NewMaxAssets(oldMaxAssets?: null, newMaxAssets?: null): NewMaxAssetsEventFilter;

    'NewPauseGuardian(address,address)'(oldPauseGuardian?: null, newPauseGuardian?: null): NewPauseGuardianEventFilter;
    NewPauseGuardian(oldPauseGuardian?: null, newPauseGuardian?: null): NewPauseGuardianEventFilter;

    'NewPriceOracle(address,address)'(oldPriceOracle?: null, newPriceOracle?: null): NewPriceOracleEventFilter;
    NewPriceOracle(oldPriceOracle?: null, newPriceOracle?: null): NewPriceOracleEventFilter;

    'NewReserveGuardian(address,address,address,address)'(
      oldReserveGuardian?: null,
      newReserveGuardian?: null,
      oldReserveAddress?: null,
      newReserveAddress?: null,
    ): NewReserveGuardianEventFilter;
    NewReserveGuardian(
      oldReserveGuardian?: null,
      newReserveGuardian?: null,
      oldReserveAddress?: null,
      newReserveAddress?: null,
    ): NewReserveGuardianEventFilter;

    'NewStrikeRate(uint256,uint256)'(oldStrikeRate?: null, newStrikeRate?: null): NewStrikeRateEventFilter;
    NewStrikeRate(oldStrikeRate?: null, newStrikeRate?: null): NewStrikeRateEventFilter;

    'NewStrkStakingInfo(address,address)'(oldStrkStaking?: null, newStrkStaking?: null): NewStrkStakingInfoEventFilter;
    NewStrkStakingInfo(oldStrkStaking?: null, newStrkStaking?: null): NewStrkStakingInfoEventFilter;

    'StrikeBorrowSpeedUpdated(address,uint256)'(
      sToken?: PromiseOrValue<string> | null,
      newSpeed?: null,
    ): StrikeBorrowSpeedUpdatedEventFilter;
    StrikeBorrowSpeedUpdated(
      sToken?: PromiseOrValue<string> | null,
      newSpeed?: null,
    ): StrikeBorrowSpeedUpdatedEventFilter;

    'StrikeGranted(address,uint256)'(recipient?: null, amount?: null): StrikeGrantedEventFilter;
    StrikeGranted(recipient?: null, amount?: null): StrikeGrantedEventFilter;

    'StrikeSpeedUpdated(address,uint256)'(
      sToken?: PromiseOrValue<string> | null,
      newSpeed?: null,
    ): StrikeSpeedUpdatedEventFilter;
    StrikeSpeedUpdated(sToken?: PromiseOrValue<string> | null, newSpeed?: null): StrikeSpeedUpdatedEventFilter;

    'StrikeSupplySpeedUpdated(address,uint256)'(
      sToken?: PromiseOrValue<string> | null,
      newSpeed?: null,
    ): StrikeSupplySpeedUpdatedEventFilter;
    StrikeSupplySpeedUpdated(
      sToken?: PromiseOrValue<string> | null,
      newSpeed?: null,
    ): StrikeSupplySpeedUpdatedEventFilter;
  };

  estimateGas: {
    _become(
      unitroller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _borrowGuardianPaused(overrides?: CallOverrides): Promise<BigNumber>;

    _dropStrikeMarket(
      sToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _grantSTRK(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _mintGuardianPaused(overrides?: CallOverrides): Promise<BigNumber>;

    _setBorrowPaused(
      sToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setCloseFactor(
      newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setCollateralFactor(
      sToken: PromiseOrValue<string>,
      newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setContributorStrikeSpeed(
      contributor: PromiseOrValue<string>,
      strikeSpeed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setMaxAssets(
      newMaxAssets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setMintPaused(
      sToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setPauseGuardian(
      newPauseGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setPriceOracle(
      newOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setReserveInfo(
      newReserveGuardian: PromiseOrValue<string>,
      newReserveAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setSeizePaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setStrikeSpeeds(
      sToken: PromiseOrValue<string>[],
      supplySpeeds: PromiseOrValue<BigNumberish>[],
      borrowSpeeds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setStrkStakingInfo(
      newStrkStaking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setTransferPaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _supportMarket(
      sToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    accountAssets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowAllowed(
      sToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    borrowGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowVerify(
      sToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    canClaimStrikeBySuppling(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    checkMembership(
      account: PromiseOrValue<string>,
      sToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'claimStrike(address[],address[],bool,bool)'(
      holders: PromiseOrValue<string>[],
      sTokens: PromiseOrValue<string>[],
      borrowers: PromiseOrValue<boolean>,
      suppliers: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'claimStrike(address)'(
      holder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'claimStrike(address,address[])'(
      holder: PromiseOrValue<string>,
      sTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    enterMarkets(
      sTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    exitMarket(
      sTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getAccountLiquidity(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAllMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetsIn(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getHypotheticalAccountLiquidity(
      account: PromiseOrValue<string>,
      sTokenModify: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSTRKAddress(overrides?: CallOverrides): Promise<BigNumber>;

    isComptroller(overrides?: CallOverrides): Promise<BigNumber>;

    lastContributorBlock(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    liquidateBorrowAllowed(
      sTokenBorrowed: PromiseOrValue<string>,
      sTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    liquidateBorrowVerify(
      sTokenBorrowed: PromiseOrValue<string>,
      sTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    liquidateCalculateSeizeTokens(
      sTokenBorrowed: PromiseOrValue<string>,
      sTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    markets(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxAssets(overrides?: CallOverrides): Promise<BigNumber>;

    mintAllowed(
      sToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mintGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    mintVerify(
      sToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      actualMintAmount: PromiseOrValue<BigNumberish>,
      mintTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    pauseGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    pendingComptrollerImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    redeemAllowed(
      sToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    redeemVerify(
      sToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemAmount: PromiseOrValue<BigNumberish>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    repayBorrowAllowed(
      sToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    repayBorrowVerify(
      sToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      borrowerIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    reserveAddress(overrides?: CallOverrides): Promise<BigNumber>;

    reserveGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    seizeAllowed(
      sTokenCollateral: PromiseOrValue<string>,
      sTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    seizeGuardianPaused(overrides?: CallOverrides): Promise<BigNumber>;

    seizeVerify(
      sTokenCollateral: PromiseOrValue<string>,
      sTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    strikeAccrued(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    strikeBorrowSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    strikeBorrowState(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    strikeBorrowerIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    strikeClaimThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    strikeContributorSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    strikeInitialIndex(overrides?: CallOverrides): Promise<BigNumber>;

    strikeRate(overrides?: CallOverrides): Promise<BigNumber>;

    strikeSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    strikeSupplierIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    strikeSupplySpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    strikeSupplyState(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    strkStaking(overrides?: CallOverrides): Promise<BigNumber>;

    transferAllowed(
      sToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferGuardianPaused(overrides?: CallOverrides): Promise<BigNumber>;

    transferVerify(
      sToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateContributorRewards(
      contributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _become(
      unitroller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _borrowGuardianPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _dropStrikeMarket(
      sToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _grantSTRK(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _mintGuardianPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _setBorrowPaused(
      sToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setCloseFactor(
      newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setCollateralFactor(
      sToken: PromiseOrValue<string>,
      newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setContributorStrikeSpeed(
      contributor: PromiseOrValue<string>,
      strikeSpeed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setMaxAssets(
      newMaxAssets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setMintPaused(
      sToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setPauseGuardian(
      newPauseGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setPriceOracle(
      newOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setReserveInfo(
      newReserveGuardian: PromiseOrValue<string>,
      newReserveAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setSeizePaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setStrikeSpeeds(
      sToken: PromiseOrValue<string>[],
      supplySpeeds: PromiseOrValue<BigNumberish>[],
      borrowSpeeds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setStrkStakingInfo(
      newStrkStaking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setTransferPaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _supportMarket(
      sToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    accountAssets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowAllowed(
      sToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    borrowGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowVerify(
      sToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    canClaimStrikeBySuppling(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkMembership(
      account: PromiseOrValue<string>,
      sToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'claimStrike(address[],address[],bool,bool)'(
      holders: PromiseOrValue<string>[],
      sTokens: PromiseOrValue<string>[],
      borrowers: PromiseOrValue<boolean>,
      suppliers: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'claimStrike(address)'(
      holder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'claimStrike(address,address[])'(
      holder: PromiseOrValue<string>,
      sTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enterMarkets(
      sTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    exitMarket(
      sTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getAccountLiquidity(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetsIn(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHypotheticalAccountLiquidity(
      account: PromiseOrValue<string>,
      sTokenModify: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getSTRKAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isComptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastContributorBlock(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateBorrowAllowed(
      sTokenBorrowed: PromiseOrValue<string>,
      sTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    liquidateBorrowVerify(
      sTokenBorrowed: PromiseOrValue<string>,
      sTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    liquidateCalculateSeizeTokens(
      sTokenBorrowed: PromiseOrValue<string>,
      sTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    markets(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintAllowed(
      sToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mintGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintVerify(
      sToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      actualMintAmount: PromiseOrValue<BigNumberish>,
      mintTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingComptrollerImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemAllowed(
      sToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    redeemVerify(
      sToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemAmount: PromiseOrValue<BigNumberish>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    repayBorrowAllowed(
      sToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    repayBorrowVerify(
      sToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      borrowerIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    reserveAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seizeAllowed(
      sTokenCollateral: PromiseOrValue<string>,
      sTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    seizeGuardianPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seizeVerify(
      sTokenCollateral: PromiseOrValue<string>,
      sTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    strikeAccrued(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strikeBorrowSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strikeBorrowState(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strikeBorrowerIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    strikeClaimThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strikeContributorSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strikeInitialIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strikeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strikeSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strikeSupplierIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    strikeSupplySpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strikeSupplyState(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strkStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferAllowed(
      sToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferGuardianPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferVerify(
      sToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateContributorRewards(
      contributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
