/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace BadgerTree {
  export type MerkleDataStruct = {
    root: PromiseOrValue<BytesLike>;
    contentHash: PromiseOrValue<BytesLike>;
    timestamp: PromiseOrValue<BigNumberish>;
    blockNumber: PromiseOrValue<BigNumberish>;
  };

  export type MerkleDataStructOutput = [string, string, BigNumber, BigNumber] & {
    root: string;
    contentHash: string;
    timestamp: BigNumber;
    blockNumber: BigNumber;
  };
}

export interface BadgerTreeInterface extends utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'GUARDIAN_ROLE()': FunctionFragment;
    'ROOT_UPDATER_ROLE()': FunctionFragment;
    'approveRoot(bytes32,bytes32,uint256)': FunctionFragment;
    'claim(address[],uint256[],uint256,uint256,bytes32[])': FunctionFragment;
    'claimed(address,address)': FunctionFragment;
    'currentCycle()': FunctionFragment;
    'encodeClaim(address[],uint256[],uint256,uint256)': FunctionFragment;
    'getClaimedFor(address,address[])': FunctionFragment;
    'getCurrentMerkleData()': FunctionFragment;
    'getPendingMerkleData()': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'getRoleMember(bytes32,uint256)': FunctionFragment;
    'getRoleMemberCount(bytes32)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasPendingRoot()': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'initialize(address,address,address)': FunctionFragment;
    'lastProposeBlockNumber()': FunctionFragment;
    'lastProposeTimestamp()': FunctionFragment;
    'lastPublishBlockNumber()': FunctionFragment;
    'lastPublishTimestamp()': FunctionFragment;
    'merkleContentHash()': FunctionFragment;
    'merkleRoot()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'pendingCycle()': FunctionFragment;
    'pendingMerkleContentHash()': FunctionFragment;
    'pendingMerkleRoot()': FunctionFragment;
    'proposeRoot(bytes32,bytes32,uint256)': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'totalClaimed(address)': FunctionFragment;
    'unpause()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DEFAULT_ADMIN_ROLE'
      | 'GUARDIAN_ROLE'
      | 'ROOT_UPDATER_ROLE'
      | 'approveRoot'
      | 'claim'
      | 'claimed'
      | 'currentCycle'
      | 'encodeClaim'
      | 'getClaimedFor'
      | 'getCurrentMerkleData'
      | 'getPendingMerkleData'
      | 'getRoleAdmin'
      | 'getRoleMember'
      | 'getRoleMemberCount'
      | 'grantRole'
      | 'hasPendingRoot'
      | 'hasRole'
      | 'initialize'
      | 'lastProposeBlockNumber'
      | 'lastProposeTimestamp'
      | 'lastPublishBlockNumber'
      | 'lastPublishTimestamp'
      | 'merkleContentHash'
      | 'merkleRoot'
      | 'pause'
      | 'paused'
      | 'pendingCycle'
      | 'pendingMerkleContentHash'
      | 'pendingMerkleRoot'
      | 'proposeRoot'
      | 'renounceRole'
      | 'revokeRole'
      | 'totalClaimed'
      | 'unpause',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'GUARDIAN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ROOT_UPDATER_ROLE', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'approveRoot',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'claim',
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
    ],
  ): string;
  encodeFunctionData(functionFragment: 'claimed', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'currentCycle', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'encodeClaim',
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getClaimedFor',
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(functionFragment: 'getCurrentMerkleData', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPendingMerkleData', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'getRoleMember',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getRoleMemberCount', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'hasPendingRoot', values?: undefined): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'lastProposeBlockNumber', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastProposeTimestamp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastPublishBlockNumber', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastPublishTimestamp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'merkleContentHash', values?: undefined): string;
  encodeFunctionData(functionFragment: 'merkleRoot', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingCycle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingMerkleContentHash', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingMerkleRoot', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'proposeRoot',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'totalClaimed', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'GUARDIAN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ROOT_UPDATER_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approveRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentCycle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'encodeClaim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getClaimedFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCurrentMerkleData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPendingMerkleData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleMember', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleMemberCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasPendingRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastProposeBlockNumber', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastProposeTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastPublishBlockNumber', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastPublishTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'merkleContentHash', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'merkleRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingCycle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingMerkleContentHash', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingMerkleRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proposeRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalClaimed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;

  events: {
    'Claimed(address,address,uint256,uint256,uint256,uint256)': EventFragment;
    'InsufficientFundsForRoot(bytes32)': EventFragment;
    'Paused(address)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'RootProposed(uint256,bytes32,bytes32,uint256,uint256)': EventFragment;
    'RootUpdated(uint256,bytes32,bytes32,uint256,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Claimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InsufficientFundsForRoot'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RootProposed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RootUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export interface ClaimedEventObject {
  user: string;
  token: string;
  amount: BigNumber;
  cycle: BigNumber;
  timestamp: BigNumber;
  blockNumber: BigNumber;
}
export type ClaimedEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber, BigNumber], ClaimedEventObject>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface InsufficientFundsForRootEventObject {
  root: string;
}
export type InsufficientFundsForRootEvent = TypedEvent<[string], InsufficientFundsForRootEventObject>;

export type InsufficientFundsForRootEventFilter = TypedEventFilter<InsufficientFundsForRootEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface RootProposedEventObject {
  cycle: BigNumber;
  root: string;
  contentHash: string;
  timestamp: BigNumber;
  blockNumber: BigNumber;
}
export type RootProposedEvent = TypedEvent<[BigNumber, string, string, BigNumber, BigNumber], RootProposedEventObject>;

export type RootProposedEventFilter = TypedEventFilter<RootProposedEvent>;

export interface RootUpdatedEventObject {
  cycle: BigNumber;
  root: string;
  contentHash: string;
  timestamp: BigNumber;
  blockNumber: BigNumber;
}
export type RootUpdatedEvent = TypedEvent<[BigNumber, string, string, BigNumber, BigNumber], RootUpdatedEventObject>;

export type RootUpdatedEventFilter = TypedEventFilter<RootUpdatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface BadgerTree extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BadgerTreeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    GUARDIAN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ROOT_UPDATER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    approveRoot(
      root: PromiseOrValue<BytesLike>,
      contentHash: PromiseOrValue<BytesLike>,
      cycle: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claim(
      tokens: PromiseOrValue<string>[],
      cumulativeAmounts: PromiseOrValue<BigNumberish>[],
      index: PromiseOrValue<BigNumberish>,
      cycle: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    currentCycle(overrides?: CallOverrides): Promise<[BigNumber]>;

    encodeClaim(
      tokens: PromiseOrValue<string>[],
      cumulativeAmounts: PromiseOrValue<BigNumberish>[],
      index: PromiseOrValue<BigNumberish>,
      cycle: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string, string] & { encoded: string; hash: string }>;

    getClaimedFor(
      user: PromiseOrValue<string>,
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<[string[], BigNumber[]]>;

    getCurrentMerkleData(overrides?: CallOverrides): Promise<[BadgerTree.MerkleDataStructOutput]>;

    getPendingMerkleData(overrides?: CallOverrides): Promise<[BadgerTree.MerkleDataStructOutput]>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    hasPendingRoot(overrides?: CallOverrides): Promise<[boolean]>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    initialize(
      admin: PromiseOrValue<string>,
      initialUpdater: PromiseOrValue<string>,
      initialGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    lastProposeBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastProposeTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastPublishBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastPublishTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    merkleContentHash(overrides?: CallOverrides): Promise<[string]>;

    merkleRoot(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingCycle(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingMerkleContentHash(overrides?: CallOverrides): Promise<[string]>;

    pendingMerkleRoot(overrides?: CallOverrides): Promise<[string]>;

    proposeRoot(
      root: PromiseOrValue<BytesLike>,
      contentHash: PromiseOrValue<BytesLike>,
      cycle: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    totalClaimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  GUARDIAN_ROLE(overrides?: CallOverrides): Promise<string>;

  ROOT_UPDATER_ROLE(overrides?: CallOverrides): Promise<string>;

  approveRoot(
    root: PromiseOrValue<BytesLike>,
    contentHash: PromiseOrValue<BytesLike>,
    cycle: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claim(
    tokens: PromiseOrValue<string>[],
    cumulativeAmounts: PromiseOrValue<BigNumberish>[],
    index: PromiseOrValue<BigNumberish>,
    cycle: PromiseOrValue<BigNumberish>,
    merkleProof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimed(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  currentCycle(overrides?: CallOverrides): Promise<BigNumber>;

  encodeClaim(
    tokens: PromiseOrValue<string>[],
    cumulativeAmounts: PromiseOrValue<BigNumberish>[],
    index: PromiseOrValue<BigNumberish>,
    cycle: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[string, string] & { encoded: string; hash: string }>;

  getClaimedFor(
    user: PromiseOrValue<string>,
    tokens: PromiseOrValue<string>[],
    overrides?: CallOverrides,
  ): Promise<[string[], BigNumber[]]>;

  getCurrentMerkleData(overrides?: CallOverrides): Promise<BadgerTree.MerkleDataStructOutput>;

  getPendingMerkleData(overrides?: CallOverrides): Promise<BadgerTree.MerkleDataStructOutput>;

  getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  hasPendingRoot(overrides?: CallOverrides): Promise<boolean>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  initialize(
    admin: PromiseOrValue<string>,
    initialUpdater: PromiseOrValue<string>,
    initialGuardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  lastProposeBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  lastProposeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  lastPublishBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  lastPublishTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  merkleContentHash(overrides?: CallOverrides): Promise<string>;

  merkleRoot(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingCycle(overrides?: CallOverrides): Promise<BigNumber>;

  pendingMerkleContentHash(overrides?: CallOverrides): Promise<string>;

  pendingMerkleRoot(overrides?: CallOverrides): Promise<string>;

  proposeRoot(
    root: PromiseOrValue<BytesLike>,
    contentHash: PromiseOrValue<BytesLike>,
    cycle: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  totalClaimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    GUARDIAN_ROLE(overrides?: CallOverrides): Promise<string>;

    ROOT_UPDATER_ROLE(overrides?: CallOverrides): Promise<string>;

    approveRoot(
      root: PromiseOrValue<BytesLike>,
      contentHash: PromiseOrValue<BytesLike>,
      cycle: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    claim(
      tokens: PromiseOrValue<string>[],
      cumulativeAmounts: PromiseOrValue<BigNumberish>[],
      index: PromiseOrValue<BigNumberish>,
      cycle: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    claimed(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    currentCycle(overrides?: CallOverrides): Promise<BigNumber>;

    encodeClaim(
      tokens: PromiseOrValue<string>[],
      cumulativeAmounts: PromiseOrValue<BigNumberish>[],
      index: PromiseOrValue<BigNumberish>,
      cycle: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string, string] & { encoded: string; hash: string }>;

    getClaimedFor(
      user: PromiseOrValue<string>,
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<[string[], BigNumber[]]>;

    getCurrentMerkleData(overrides?: CallOverrides): Promise<BadgerTree.MerkleDataStructOutput>;

    getPendingMerkleData(overrides?: CallOverrides): Promise<BadgerTree.MerkleDataStructOutput>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    hasPendingRoot(overrides?: CallOverrides): Promise<boolean>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    initialize(
      admin: PromiseOrValue<string>,
      initialUpdater: PromiseOrValue<string>,
      initialGuardian: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    lastProposeBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    lastProposeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    lastPublishBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    lastPublishTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    merkleContentHash(overrides?: CallOverrides): Promise<string>;

    merkleRoot(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingCycle(overrides?: CallOverrides): Promise<BigNumber>;

    pendingMerkleContentHash(overrides?: CallOverrides): Promise<string>;

    pendingMerkleRoot(overrides?: CallOverrides): Promise<string>;

    proposeRoot(
      root: PromiseOrValue<BytesLike>,
      contentHash: PromiseOrValue<BytesLike>,
      cycle: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    totalClaimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Claimed(address,address,uint256,uint256,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      cycle?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null,
      blockNumber?: null,
    ): ClaimedEventFilter;
    Claimed(
      user?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      cycle?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null,
      blockNumber?: null,
    ): ClaimedEventFilter;

    'InsufficientFundsForRoot(bytes32)'(root?: PromiseOrValue<BytesLike> | null): InsufficientFundsForRootEventFilter;
    InsufficientFundsForRoot(root?: PromiseOrValue<BytesLike> | null): InsufficientFundsForRootEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;

    'RootProposed(uint256,bytes32,bytes32,uint256,uint256)'(
      cycle?: PromiseOrValue<BigNumberish> | null,
      root?: PromiseOrValue<BytesLike> | null,
      contentHash?: PromiseOrValue<BytesLike> | null,
      timestamp?: null,
      blockNumber?: null,
    ): RootProposedEventFilter;
    RootProposed(
      cycle?: PromiseOrValue<BigNumberish> | null,
      root?: PromiseOrValue<BytesLike> | null,
      contentHash?: PromiseOrValue<BytesLike> | null,
      timestamp?: null,
      blockNumber?: null,
    ): RootProposedEventFilter;

    'RootUpdated(uint256,bytes32,bytes32,uint256,uint256)'(
      cycle?: PromiseOrValue<BigNumberish> | null,
      root?: PromiseOrValue<BytesLike> | null,
      contentHash?: PromiseOrValue<BytesLike> | null,
      timestamp?: null,
      blockNumber?: null,
    ): RootUpdatedEventFilter;
    RootUpdated(
      cycle?: PromiseOrValue<BigNumberish> | null,
      root?: PromiseOrValue<BytesLike> | null,
      contentHash?: PromiseOrValue<BytesLike> | null,
      timestamp?: null,
      blockNumber?: null,
    ): RootUpdatedEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    GUARDIAN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT_UPDATER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    approveRoot(
      root: PromiseOrValue<BytesLike>,
      contentHash: PromiseOrValue<BytesLike>,
      cycle: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claim(
      tokens: PromiseOrValue<string>[],
      cumulativeAmounts: PromiseOrValue<BigNumberish>[],
      index: PromiseOrValue<BigNumberish>,
      cycle: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimed(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    currentCycle(overrides?: CallOverrides): Promise<BigNumber>;

    encodeClaim(
      tokens: PromiseOrValue<string>[],
      cumulativeAmounts: PromiseOrValue<BigNumberish>[],
      index: PromiseOrValue<BigNumberish>,
      cycle: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getClaimedFor(
      user: PromiseOrValue<string>,
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCurrentMerkleData(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingMerkleData(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    hasPendingRoot(overrides?: CallOverrides): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(
      admin: PromiseOrValue<string>,
      initialUpdater: PromiseOrValue<string>,
      initialGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    lastProposeBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    lastProposeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    lastPublishBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    lastPublishTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    merkleContentHash(overrides?: CallOverrides): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingCycle(overrides?: CallOverrides): Promise<BigNumber>;

    pendingMerkleContentHash(overrides?: CallOverrides): Promise<BigNumber>;

    pendingMerkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    proposeRoot(
      root: PromiseOrValue<BytesLike>,
      contentHash: PromiseOrValue<BytesLike>,
      cycle: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    totalClaimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GUARDIAN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROOT_UPDATER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approveRoot(
      root: PromiseOrValue<BytesLike>,
      contentHash: PromiseOrValue<BytesLike>,
      cycle: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claim(
      tokens: PromiseOrValue<string>[],
      cumulativeAmounts: PromiseOrValue<BigNumberish>[],
      index: PromiseOrValue<BigNumberish>,
      cycle: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    currentCycle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    encodeClaim(
      tokens: PromiseOrValue<string>[],
      cumulativeAmounts: PromiseOrValue<BigNumberish>[],
      index: PromiseOrValue<BigNumberish>,
      cycle: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getClaimedFor(
      user: PromiseOrValue<string>,
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getCurrentMerkleData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingMerkleData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    hasPendingRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      admin: PromiseOrValue<string>,
      initialUpdater: PromiseOrValue<string>,
      initialGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    lastProposeBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastProposeTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastPublishBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastPublishTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    merkleContentHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingCycle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingMerkleContentHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingMerkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeRoot(
      root: PromiseOrValue<BytesLike>,
      contentHash: PromiseOrValue<BytesLike>,
      cycle: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    totalClaimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;
  };
}
