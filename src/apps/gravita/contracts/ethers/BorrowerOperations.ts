/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface BorrowerOperationsInterface extends utils.Interface {
  functions: {
    'DECIMAL_PRECISION()': FunctionFragment;
    'NAME()': FunctionFragment;
    'activePool()': FunctionFragment;
    'addColl(address,uint256,address,address)': FunctionFragment;
    'adjustVessel(address,uint256,uint256,uint256,bool,address,address)': FunctionFragment;
    'adminContract()': FunctionFragment;
    'authorizeUpgrade(address)': FunctionFragment;
    'borrowerOperations()': FunctionFragment;
    'claimCollateral(address)': FunctionFragment;
    'closeVessel(address)': FunctionFragment;
    'collSurplusPool()': FunctionFragment;
    'communityIssuance()': FunctionFragment;
    'debtToken()': FunctionFragment;
    'defaultPool()': FunctionFragment;
    'feeCollector()': FunctionFragment;
    'gasPoolAddress()': FunctionFragment;
    'getCompositeDebt(address,uint256)': FunctionFragment;
    'getEntireSystemColl(address)': FunctionFragment;
    'getEntireSystemDebt(address)': FunctionFragment;
    'grvtStaking()': FunctionFragment;
    'initialize()': FunctionFragment;
    'openVessel(address,uint256,uint256,address,address)': FunctionFragment;
    'owner()': FunctionFragment;
    'priceFeed()': FunctionFragment;
    'proxiableUUID()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'repayDebtTokens(address,uint256,address,address)': FunctionFragment;
    'sortedVessels()': FunctionFragment;
    'stabilityPool()': FunctionFragment;
    'timelockAddress()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'treasuryAddress()': FunctionFragment;
    'upgradeTo(address)': FunctionFragment;
    'upgradeToAndCall(address,bytes)': FunctionFragment;
    'vesselManager()': FunctionFragment;
    'vesselManagerOperations()': FunctionFragment;
    'withdrawColl(address,uint256,address,address)': FunctionFragment;
    'withdrawDebtTokens(address,uint256,address,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DECIMAL_PRECISION'
      | 'NAME'
      | 'activePool'
      | 'addColl'
      | 'adjustVessel'
      | 'adminContract'
      | 'authorizeUpgrade'
      | 'borrowerOperations'
      | 'claimCollateral'
      | 'closeVessel'
      | 'collSurplusPool'
      | 'communityIssuance'
      | 'debtToken'
      | 'defaultPool'
      | 'feeCollector'
      | 'gasPoolAddress'
      | 'getCompositeDebt'
      | 'getEntireSystemColl'
      | 'getEntireSystemDebt'
      | 'grvtStaking'
      | 'initialize'
      | 'openVessel'
      | 'owner'
      | 'priceFeed'
      | 'proxiableUUID'
      | 'renounceOwnership'
      | 'repayDebtTokens'
      | 'sortedVessels'
      | 'stabilityPool'
      | 'timelockAddress'
      | 'transferOwnership'
      | 'treasuryAddress'
      | 'upgradeTo'
      | 'upgradeToAndCall'
      | 'vesselManager'
      | 'vesselManagerOperations'
      | 'withdrawColl'
      | 'withdrawDebtTokens',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DECIMAL_PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'NAME', values?: undefined): string;
  encodeFunctionData(functionFragment: 'activePool', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addColl',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'adjustVessel',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'adminContract', values?: undefined): string;
  encodeFunctionData(functionFragment: 'authorizeUpgrade', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'borrowerOperations', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimCollateral', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'closeVessel', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'collSurplusPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'communityIssuance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'debtToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'defaultPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feeCollector', values?: undefined): string;
  encodeFunctionData(functionFragment: 'gasPoolAddress', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getCompositeDebt',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getEntireSystemColl', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getEntireSystemDebt', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'grvtStaking', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'openVessel',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'priceFeed', values?: undefined): string;
  encodeFunctionData(functionFragment: 'proxiableUUID', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'repayDebtTokens',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'sortedVessels', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stabilityPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'timelockAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'treasuryAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'upgradeTo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'vesselManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vesselManagerOperations', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdrawColl',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawDebtTokens',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(functionFragment: 'DECIMAL_PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'NAME', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addColl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adjustVessel', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adminContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'authorizeUpgrade', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowerOperations', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeVessel', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collSurplusPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'communityIssuance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'debtToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'defaultPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeCollector', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gasPoolAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCompositeDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEntireSystemColl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEntireSystemDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grvtStaking', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'openVessel', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'priceFeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proxiableUUID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayDebtTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sortedVessels', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stabilityPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timelockAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasuryAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeToAndCall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vesselManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vesselManagerOperations', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawColl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawDebtTokens', data: BytesLike): Result;

  events: {
    'AdminChanged(address,address)': EventFragment;
    'BeaconUpgraded(address)': EventFragment;
    'BorrowingFeePaid(address,address,uint256)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Upgraded(address)': EventFragment;
    'VesselCreated(address,address,uint256)': EventFragment;
    'VesselUpdated(address,address,uint256,uint256,uint256,uint8)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BorrowingFeePaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VesselCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VesselUpdated'): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<[string, string], AdminChangedEventObject>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<[string], BeaconUpgradedEventObject>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface BorrowingFeePaidEventObject {
  _asset: string;
  _borrower: string;
  _feeAmount: BigNumber;
}
export type BorrowingFeePaidEvent = TypedEvent<[string, string, BigNumber], BorrowingFeePaidEventObject>;

export type BorrowingFeePaidEventFilter = TypedEventFilter<BorrowingFeePaidEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface VesselCreatedEventObject {
  _asset: string;
  _borrower: string;
  arrayIndex: BigNumber;
}
export type VesselCreatedEvent = TypedEvent<[string, string, BigNumber], VesselCreatedEventObject>;

export type VesselCreatedEventFilter = TypedEventFilter<VesselCreatedEvent>;

export interface VesselUpdatedEventObject {
  _asset: string;
  _borrower: string;
  _debt: BigNumber;
  _coll: BigNumber;
  stake: BigNumber;
  operation: number;
}
export type VesselUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, number],
  VesselUpdatedEventObject
>;

export type VesselUpdatedEventFilter = TypedEventFilter<VesselUpdatedEvent>;

export interface BorrowerOperations extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BorrowerOperationsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    activePool(overrides?: CallOverrides): Promise<[string]>;

    addColl(
      _asset: PromiseOrValue<string>,
      _assetSent: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    adjustVessel(
      _asset: PromiseOrValue<string>,
      _assetSent: PromiseOrValue<BigNumberish>,
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _debtTokenChange: PromiseOrValue<BigNumberish>,
      _isDebtIncrease: PromiseOrValue<boolean>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    adminContract(overrides?: CallOverrides): Promise<[string]>;

    authorizeUpgrade(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    borrowerOperations(overrides?: CallOverrides): Promise<[string]>;

    claimCollateral(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    closeVessel(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    collSurplusPool(overrides?: CallOverrides): Promise<[string]>;

    communityIssuance(overrides?: CallOverrides): Promise<[string]>;

    debtToken(overrides?: CallOverrides): Promise<[string]>;

    defaultPool(overrides?: CallOverrides): Promise<[string]>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    gasPoolAddress(overrides?: CallOverrides): Promise<[string]>;

    getCompositeDebt(
      _asset: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getEntireSystemColl(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { entireSystemColl: BigNumber }>;

    getEntireSystemDebt(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { entireSystemDebt: BigNumber }>;

    grvtStaking(overrides?: CallOverrides): Promise<[string]>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    openVessel(
      _asset: PromiseOrValue<string>,
      _assetAmount: PromiseOrValue<BigNumberish>,
      _debtTokenAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    repayDebtTokens(
      _asset: PromiseOrValue<string>,
      _debtTokenAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    sortedVessels(overrides?: CallOverrides): Promise<[string]>;

    stabilityPool(overrides?: CallOverrides): Promise<[string]>;

    timelockAddress(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    vesselManager(overrides?: CallOverrides): Promise<[string]>;

    vesselManagerOperations(overrides?: CallOverrides): Promise<[string]>;

    withdrawColl(
      _asset: PromiseOrValue<string>,
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawDebtTokens(
      _asset: PromiseOrValue<string>,
      _debtTokenAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  NAME(overrides?: CallOverrides): Promise<string>;

  activePool(overrides?: CallOverrides): Promise<string>;

  addColl(
    _asset: PromiseOrValue<string>,
    _assetSent: PromiseOrValue<BigNumberish>,
    _upperHint: PromiseOrValue<string>,
    _lowerHint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  adjustVessel(
    _asset: PromiseOrValue<string>,
    _assetSent: PromiseOrValue<BigNumberish>,
    _collWithdrawal: PromiseOrValue<BigNumberish>,
    _debtTokenChange: PromiseOrValue<BigNumberish>,
    _isDebtIncrease: PromiseOrValue<boolean>,
    _upperHint: PromiseOrValue<string>,
    _lowerHint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  adminContract(overrides?: CallOverrides): Promise<string>;

  authorizeUpgrade(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  borrowerOperations(overrides?: CallOverrides): Promise<string>;

  claimCollateral(
    _asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  closeVessel(
    _asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  collSurplusPool(overrides?: CallOverrides): Promise<string>;

  communityIssuance(overrides?: CallOverrides): Promise<string>;

  debtToken(overrides?: CallOverrides): Promise<string>;

  defaultPool(overrides?: CallOverrides): Promise<string>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  gasPoolAddress(overrides?: CallOverrides): Promise<string>;

  getCompositeDebt(
    _asset: PromiseOrValue<string>,
    _debt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getEntireSystemColl(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getEntireSystemDebt(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  grvtStaking(overrides?: CallOverrides): Promise<string>;

  initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  openVessel(
    _asset: PromiseOrValue<string>,
    _assetAmount: PromiseOrValue<BigNumberish>,
    _debtTokenAmount: PromiseOrValue<BigNumberish>,
    _upperHint: PromiseOrValue<string>,
    _lowerHint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  repayDebtTokens(
    _asset: PromiseOrValue<string>,
    _debtTokenAmount: PromiseOrValue<BigNumberish>,
    _upperHint: PromiseOrValue<string>,
    _lowerHint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  sortedVessels(overrides?: CallOverrides): Promise<string>;

  stabilityPool(overrides?: CallOverrides): Promise<string>;

  timelockAddress(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  vesselManager(overrides?: CallOverrides): Promise<string>;

  vesselManagerOperations(overrides?: CallOverrides): Promise<string>;

  withdrawColl(
    _asset: PromiseOrValue<string>,
    _collWithdrawal: PromiseOrValue<BigNumberish>,
    _upperHint: PromiseOrValue<string>,
    _lowerHint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawDebtTokens(
    _asset: PromiseOrValue<string>,
    _debtTokenAmount: PromiseOrValue<BigNumberish>,
    _upperHint: PromiseOrValue<string>,
    _lowerHint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<string>;

    activePool(overrides?: CallOverrides): Promise<string>;

    addColl(
      _asset: PromiseOrValue<string>,
      _assetSent: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    adjustVessel(
      _asset: PromiseOrValue<string>,
      _assetSent: PromiseOrValue<BigNumberish>,
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _debtTokenChange: PromiseOrValue<BigNumberish>,
      _isDebtIncrease: PromiseOrValue<boolean>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    adminContract(overrides?: CallOverrides): Promise<string>;

    authorizeUpgrade(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    borrowerOperations(overrides?: CallOverrides): Promise<string>;

    claimCollateral(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    closeVessel(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    collSurplusPool(overrides?: CallOverrides): Promise<string>;

    communityIssuance(overrides?: CallOverrides): Promise<string>;

    debtToken(overrides?: CallOverrides): Promise<string>;

    defaultPool(overrides?: CallOverrides): Promise<string>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    gasPoolAddress(overrides?: CallOverrides): Promise<string>;

    getCompositeDebt(
      _asset: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getEntireSystemColl(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getEntireSystemDebt(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    grvtStaking(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    openVessel(
      _asset: PromiseOrValue<string>,
      _assetAmount: PromiseOrValue<BigNumberish>,
      _debtTokenAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repayDebtTokens(
      _asset: PromiseOrValue<string>,
      _debtTokenAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    sortedVessels(overrides?: CallOverrides): Promise<string>;

    stabilityPool(overrides?: CallOverrides): Promise<string>;

    timelockAddress(overrides?: CallOverrides): Promise<string>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;

    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    vesselManager(overrides?: CallOverrides): Promise<string>;

    vesselManagerOperations(overrides?: CallOverrides): Promise<string>;

    withdrawColl(
      _asset: PromiseOrValue<string>,
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawDebtTokens(
      _asset: PromiseOrValue<string>,
      _debtTokenAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'AdminChanged(address,address)'(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
    AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;

    'BeaconUpgraded(address)'(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;

    'BorrowingFeePaid(address,address,uint256)'(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: PromiseOrValue<string> | null,
      _feeAmount?: null,
    ): BorrowingFeePaidEventFilter;
    BorrowingFeePaid(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: PromiseOrValue<string> | null,
      _feeAmount?: null,
    ): BorrowingFeePaidEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'Upgraded(address)'(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
    Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;

    'VesselCreated(address,address,uint256)'(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: PromiseOrValue<string> | null,
      arrayIndex?: null,
    ): VesselCreatedEventFilter;
    VesselCreated(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: PromiseOrValue<string> | null,
      arrayIndex?: null,
    ): VesselCreatedEventFilter;

    'VesselUpdated(address,address,uint256,uint256,uint256,uint8)'(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: PromiseOrValue<string> | null,
      _debt?: null,
      _coll?: null,
      stake?: null,
      operation?: null,
    ): VesselUpdatedEventFilter;
    VesselUpdated(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: PromiseOrValue<string> | null,
      _debt?: null,
      _coll?: null,
      stake?: null,
      operation?: null,
    ): VesselUpdatedEventFilter;
  };

  estimateGas: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    activePool(overrides?: CallOverrides): Promise<BigNumber>;

    addColl(
      _asset: PromiseOrValue<string>,
      _assetSent: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    adjustVessel(
      _asset: PromiseOrValue<string>,
      _assetSent: PromiseOrValue<BigNumberish>,
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _debtTokenChange: PromiseOrValue<BigNumberish>,
      _isDebtIncrease: PromiseOrValue<boolean>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    adminContract(overrides?: CallOverrides): Promise<BigNumber>;

    authorizeUpgrade(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    borrowerOperations(overrides?: CallOverrides): Promise<BigNumber>;

    claimCollateral(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    closeVessel(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    collSurplusPool(overrides?: CallOverrides): Promise<BigNumber>;

    communityIssuance(overrides?: CallOverrides): Promise<BigNumber>;

    debtToken(overrides?: CallOverrides): Promise<BigNumber>;

    defaultPool(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    gasPoolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getCompositeDebt(
      _asset: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getEntireSystemColl(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getEntireSystemDebt(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    grvtStaking(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    openVessel(
      _asset: PromiseOrValue<string>,
      _assetAmount: PromiseOrValue<BigNumberish>,
      _debtTokenAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    repayDebtTokens(
      _asset: PromiseOrValue<string>,
      _debtTokenAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    sortedVessels(overrides?: CallOverrides): Promise<BigNumber>;

    stabilityPool(overrides?: CallOverrides): Promise<BigNumber>;

    timelockAddress(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    vesselManager(overrides?: CallOverrides): Promise<BigNumber>;

    vesselManagerOperations(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawColl(
      _asset: PromiseOrValue<string>,
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawDebtTokens(
      _asset: PromiseOrValue<string>,
      _debtTokenAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addColl(
      _asset: PromiseOrValue<string>,
      _assetSent: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    adjustVessel(
      _asset: PromiseOrValue<string>,
      _assetSent: PromiseOrValue<BigNumberish>,
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _debtTokenChange: PromiseOrValue<BigNumberish>,
      _isDebtIncrease: PromiseOrValue<boolean>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    adminContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authorizeUpgrade(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    borrowerOperations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimCollateral(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    closeVessel(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    collSurplusPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    communityIssuance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasPoolAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCompositeDebt(
      _asset: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getEntireSystemColl(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEntireSystemDebt(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grvtStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    openVessel(
      _asset: PromiseOrValue<string>,
      _assetAmount: PromiseOrValue<BigNumberish>,
      _debtTokenAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    repayDebtTokens(
      _asset: PromiseOrValue<string>,
      _debtTokenAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    sortedVessels(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stabilityPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelockAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    vesselManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vesselManagerOperations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawColl(
      _asset: PromiseOrValue<string>,
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawDebtTokens(
      _asset: PromiseOrValue<string>,
      _debtTokenAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
