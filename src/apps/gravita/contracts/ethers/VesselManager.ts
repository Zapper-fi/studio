/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface VesselManagerInterface extends utils.Interface {
  functions: {
    'BETA()': FunctionFragment;
    'DECIMAL_PRECISION()': FunctionFragment;
    'L_Colls(address)': FunctionFragment;
    'L_Debts(address)': FunctionFragment;
    'MINUTE_DECAY_FACTOR()': FunctionFragment;
    'NAME()': FunctionFragment;
    'SECONDS_IN_ONE_MINUTE()': FunctionFragment;
    'VesselOwners(address,uint256)': FunctionFragment;
    'Vessels(address,address)': FunctionFragment;
    'activePool()': FunctionFragment;
    'addVesselOwnerToArray(address,address)': FunctionFragment;
    'adminContract()': FunctionFragment;
    'applyPendingRewards(address,address)': FunctionFragment;
    'authorizeUpgrade(address)': FunctionFragment;
    'baseRate(address)': FunctionFragment;
    'borrowerOperations()': FunctionFragment;
    'checkRecoveryMode(address,uint256)': FunctionFragment;
    'closeVessel(address,address)': FunctionFragment;
    'closeVesselLiquidation(address,address)': FunctionFragment;
    'collSurplusPool()': FunctionFragment;
    'communityIssuance()': FunctionFragment;
    'debtToken()': FunctionFragment;
    'decreaseVesselColl(address,address,uint256)': FunctionFragment;
    'decreaseVesselDebt(address,address,uint256)': FunctionFragment;
    'defaultPool()': FunctionFragment;
    'executeFullRedemption(address,address,uint256)': FunctionFragment;
    'executePartialRedemption(address,address,uint256,uint256,uint256,address,address)': FunctionFragment;
    'feeCollector()': FunctionFragment;
    'finalizeRedemption(address,address,uint256,uint256,uint256)': FunctionFragment;
    'gasPoolAddress()': FunctionFragment;
    'getBorrowingFee(address,uint256)': FunctionFragment;
    'getBorrowingRate(address)': FunctionFragment;
    'getCurrentICR(address,address,uint256)': FunctionFragment;
    'getEntireDebtAndColl(address,address)': FunctionFragment;
    'getEntireSystemColl(address)': FunctionFragment;
    'getEntireSystemDebt(address)': FunctionFragment;
    'getNominalICR(address,address)': FunctionFragment;
    'getPendingAssetReward(address,address)': FunctionFragment;
    'getPendingDebtTokenReward(address,address)': FunctionFragment;
    'getRedemptionFee(address,uint256)': FunctionFragment;
    'getRedemptionFeeWithDecay(address,uint256)': FunctionFragment;
    'getRedemptionRate(address)': FunctionFragment;
    'getRedemptionRateWithDecay(address)': FunctionFragment;
    'getTCR(address,uint256)': FunctionFragment;
    'getVesselColl(address,address)': FunctionFragment;
    'getVesselDebt(address,address)': FunctionFragment;
    'getVesselFromVesselOwnersArray(address,uint256)': FunctionFragment;
    'getVesselOwnersCount(address)': FunctionFragment;
    'getVesselStake(address,address)': FunctionFragment;
    'getVesselStatus(address,address)': FunctionFragment;
    'grvtStaking()': FunctionFragment;
    'hasPendingRewards(address,address)': FunctionFragment;
    'increaseVesselColl(address,address,uint256)': FunctionFragment;
    'increaseVesselDebt(address,address,uint256)': FunctionFragment;
    'initialize()': FunctionFragment;
    'isSetupInitialized()': FunctionFragment;
    'isValidFirstRedemptionHint(address,address,uint256)': FunctionFragment;
    'isVesselActive(address,address)': FunctionFragment;
    'lastCollError_Redistribution(address)': FunctionFragment;
    'lastDebtError_Redistribution(address)': FunctionFragment;
    'lastFeeOperationTime(address)': FunctionFragment;
    'movePendingVesselRewardsToActivePool(address,uint256,uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'priceFeed()': FunctionFragment;
    'proxiableUUID()': FunctionFragment;
    'redistributeDebtAndColl(address,uint256,uint256,uint256,uint256)': FunctionFragment;
    'removeStake(address,address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardSnapshots(address,address)': FunctionFragment;
    'sendGasCompensation(address,address,uint256,uint256)': FunctionFragment;
    'setVesselStatus(address,address,uint256)': FunctionFragment;
    'sortedVessels()': FunctionFragment;
    'stabilityPool()': FunctionFragment;
    'timelockAddress()': FunctionFragment;
    'totalCollateralSnapshot(address)': FunctionFragment;
    'totalStakes(address)': FunctionFragment;
    'totalStakesSnapshot(address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'treasuryAddress()': FunctionFragment;
    'updateBaseRateFromRedemption(address,uint256,uint256,uint256)': FunctionFragment;
    'updateStakeAndTotalStakes(address,address)': FunctionFragment;
    'updateSystemSnapshots_excludeCollRemainder(address,uint256)': FunctionFragment;
    'updateVesselRewardSnapshots(address,address)': FunctionFragment;
    'upgradeTo(address)': FunctionFragment;
    'upgradeToAndCall(address,bytes)': FunctionFragment;
    'vesselManager()': FunctionFragment;
    'vesselManagerOperations()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BETA'
      | 'DECIMAL_PRECISION'
      | 'L_Colls'
      | 'L_Debts'
      | 'MINUTE_DECAY_FACTOR'
      | 'NAME'
      | 'SECONDS_IN_ONE_MINUTE'
      | 'VesselOwners'
      | 'Vessels'
      | 'activePool'
      | 'addVesselOwnerToArray'
      | 'adminContract'
      | 'applyPendingRewards'
      | 'authorizeUpgrade'
      | 'baseRate'
      | 'borrowerOperations'
      | 'checkRecoveryMode'
      | 'closeVessel'
      | 'closeVesselLiquidation'
      | 'collSurplusPool'
      | 'communityIssuance'
      | 'debtToken'
      | 'decreaseVesselColl'
      | 'decreaseVesselDebt'
      | 'defaultPool'
      | 'executeFullRedemption'
      | 'executePartialRedemption'
      | 'feeCollector'
      | 'finalizeRedemption'
      | 'gasPoolAddress'
      | 'getBorrowingFee'
      | 'getBorrowingRate'
      | 'getCurrentICR'
      | 'getEntireDebtAndColl'
      | 'getEntireSystemColl'
      | 'getEntireSystemDebt'
      | 'getNominalICR'
      | 'getPendingAssetReward'
      | 'getPendingDebtTokenReward'
      | 'getRedemptionFee'
      | 'getRedemptionFeeWithDecay'
      | 'getRedemptionRate'
      | 'getRedemptionRateWithDecay'
      | 'getTCR'
      | 'getVesselColl'
      | 'getVesselDebt'
      | 'getVesselFromVesselOwnersArray'
      | 'getVesselOwnersCount'
      | 'getVesselStake'
      | 'getVesselStatus'
      | 'grvtStaking'
      | 'hasPendingRewards'
      | 'increaseVesselColl'
      | 'increaseVesselDebt'
      | 'initialize'
      | 'isSetupInitialized'
      | 'isValidFirstRedemptionHint'
      | 'isVesselActive'
      | 'lastCollError_Redistribution'
      | 'lastDebtError_Redistribution'
      | 'lastFeeOperationTime'
      | 'movePendingVesselRewardsToActivePool'
      | 'owner'
      | 'priceFeed'
      | 'proxiableUUID'
      | 'redistributeDebtAndColl'
      | 'removeStake'
      | 'renounceOwnership'
      | 'rewardSnapshots'
      | 'sendGasCompensation'
      | 'setVesselStatus'
      | 'sortedVessels'
      | 'stabilityPool'
      | 'timelockAddress'
      | 'totalCollateralSnapshot'
      | 'totalStakes'
      | 'totalStakesSnapshot'
      | 'transferOwnership'
      | 'treasuryAddress'
      | 'updateBaseRateFromRedemption'
      | 'updateStakeAndTotalStakes'
      | 'updateSystemSnapshots_excludeCollRemainder'
      | 'updateVesselRewardSnapshots'
      | 'upgradeTo'
      | 'upgradeToAndCall'
      | 'vesselManager'
      | 'vesselManagerOperations',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BETA', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DECIMAL_PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'L_Colls', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'L_Debts', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'MINUTE_DECAY_FACTOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'NAME', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SECONDS_IN_ONE_MINUTE', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'VesselOwners',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'Vessels', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'activePool', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addVesselOwnerToArray',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'adminContract', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'applyPendingRewards',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'authorizeUpgrade', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'baseRate', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'borrowerOperations', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'checkRecoveryMode',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'closeVessel', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'closeVesselLiquidation',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'collSurplusPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'communityIssuance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'debtToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseVesselColl',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'decreaseVesselDebt',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'defaultPool', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'executeFullRedemption',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'executePartialRedemption',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'feeCollector', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'finalizeRedemption',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'gasPoolAddress', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getBorrowingFee',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getBorrowingRate', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getCurrentICR',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getEntireDebtAndColl',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getEntireSystemColl', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getEntireSystemDebt', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getNominalICR',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getPendingAssetReward',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getPendingDebtTokenReward',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRedemptionFee',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRedemptionFeeWithDecay',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getRedemptionRate', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getRedemptionRateWithDecay', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getTCR',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getVesselColl',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getVesselDebt',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getVesselFromVesselOwnersArray',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getVesselOwnersCount', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getVesselStake',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getVesselStatus',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'grvtStaking', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'hasPendingRewards',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseVesselColl',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseVesselDebt',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'initialize', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isSetupInitialized', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'isValidFirstRedemptionHint',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'isVesselActive',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'lastCollError_Redistribution', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lastDebtError_Redistribution', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lastFeeOperationTime', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'movePendingVesselRewardsToActivePool',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'priceFeed', values?: undefined): string;
  encodeFunctionData(functionFragment: 'proxiableUUID', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'redistributeDebtAndColl',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'removeStake', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'rewardSnapshots',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'sendGasCompensation',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'setVesselStatus',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'sortedVessels', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stabilityPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'timelockAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalCollateralSnapshot', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'totalStakes', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'totalStakesSnapshot', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'treasuryAddress', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'updateBaseRateFromRedemption',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateStakeAndTotalStakes',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateSystemSnapshots_excludeCollRemainder',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateVesselRewardSnapshots',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'upgradeTo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'vesselManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vesselManagerOperations', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'BETA', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DECIMAL_PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'L_Colls', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'L_Debts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MINUTE_DECAY_FACTOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'NAME', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SECONDS_IN_ONE_MINUTE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'VesselOwners', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'Vessels', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addVesselOwnerToArray', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adminContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'applyPendingRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'authorizeUpgrade', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'baseRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowerOperations', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkRecoveryMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeVessel', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeVesselLiquidation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collSurplusPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'communityIssuance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'debtToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseVesselColl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseVesselDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'defaultPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'executeFullRedemption', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'executePartialRedemption', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeCollector', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'finalizeRedemption', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gasPoolAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBorrowingFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBorrowingRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCurrentICR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEntireDebtAndColl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEntireSystemColl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEntireSystemDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNominalICR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPendingAssetReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPendingDebtTokenReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRedemptionFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRedemptionFeeWithDecay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRedemptionRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRedemptionRateWithDecay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTCR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVesselColl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVesselDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVesselFromVesselOwnersArray', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVesselOwnersCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVesselStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVesselStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grvtStaking', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasPendingRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseVesselColl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseVesselDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isSetupInitialized', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isValidFirstRedemptionHint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isVesselActive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastCollError_Redistribution', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastDebtError_Redistribution', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastFeeOperationTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'movePendingVesselRewardsToActivePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'priceFeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proxiableUUID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redistributeDebtAndColl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardSnapshots', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sendGasCompensation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setVesselStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sortedVessels', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stabilityPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timelockAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalCollateralSnapshot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalStakes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalStakesSnapshot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasuryAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateBaseRateFromRedemption', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateStakeAndTotalStakes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateSystemSnapshots_excludeCollRemainder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateVesselRewardSnapshots', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeToAndCall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vesselManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vesselManagerOperations', data: BytesLike): Result;

  events: {
    'AdminChanged(address,address)': EventFragment;
    'BaseRateUpdated(address,uint256)': EventFragment;
    'BeaconUpgraded(address)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'LTermsUpdated(address,uint256,uint256)': EventFragment;
    'LastFeeOpTimeUpdated(address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'SystemSnapshotsUpdated(address,uint256,uint256)': EventFragment;
    'TotalStakesUpdated(address,uint256)': EventFragment;
    'Upgraded(address)': EventFragment;
    'VesselIndexUpdated(address,address,uint256)': EventFragment;
    'VesselSnapshotsUpdated(address,uint256,uint256)': EventFragment;
    'VesselUpdated(address,address,uint256,uint256,uint256,uint8)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BaseRateUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LTermsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LastFeeOpTimeUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SystemSnapshotsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TotalStakesUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VesselIndexUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VesselSnapshotsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VesselUpdated'): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<[string, string], AdminChangedEventObject>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BaseRateUpdatedEventObject {
  _asset: string;
  _baseRate: BigNumber;
}
export type BaseRateUpdatedEvent = TypedEvent<[string, BigNumber], BaseRateUpdatedEventObject>;

export type BaseRateUpdatedEventFilter = TypedEventFilter<BaseRateUpdatedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<[string], BeaconUpgradedEventObject>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LTermsUpdatedEventObject {
  _asset: string;
  _L_Coll: BigNumber;
  _L_Debt: BigNumber;
}
export type LTermsUpdatedEvent = TypedEvent<[string, BigNumber, BigNumber], LTermsUpdatedEventObject>;

export type LTermsUpdatedEventFilter = TypedEventFilter<LTermsUpdatedEvent>;

export interface LastFeeOpTimeUpdatedEventObject {
  _asset: string;
  _lastFeeOpTime: BigNumber;
}
export type LastFeeOpTimeUpdatedEvent = TypedEvent<[string, BigNumber], LastFeeOpTimeUpdatedEventObject>;

export type LastFeeOpTimeUpdatedEventFilter = TypedEventFilter<LastFeeOpTimeUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface SystemSnapshotsUpdatedEventObject {
  _asset: string;
  _totalStakesSnapshot: BigNumber;
  _totalCollateralSnapshot: BigNumber;
}
export type SystemSnapshotsUpdatedEvent = TypedEvent<[string, BigNumber, BigNumber], SystemSnapshotsUpdatedEventObject>;

export type SystemSnapshotsUpdatedEventFilter = TypedEventFilter<SystemSnapshotsUpdatedEvent>;

export interface TotalStakesUpdatedEventObject {
  _asset: string;
  _newTotalStakes: BigNumber;
}
export type TotalStakesUpdatedEvent = TypedEvent<[string, BigNumber], TotalStakesUpdatedEventObject>;

export type TotalStakesUpdatedEventFilter = TypedEventFilter<TotalStakesUpdatedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface VesselIndexUpdatedEventObject {
  _asset: string;
  _borrower: string;
  _newIndex: BigNumber;
}
export type VesselIndexUpdatedEvent = TypedEvent<[string, string, BigNumber], VesselIndexUpdatedEventObject>;

export type VesselIndexUpdatedEventFilter = TypedEventFilter<VesselIndexUpdatedEvent>;

export interface VesselSnapshotsUpdatedEventObject {
  _asset: string;
  _L_Coll: BigNumber;
  _L_Debt: BigNumber;
}
export type VesselSnapshotsUpdatedEvent = TypedEvent<[string, BigNumber, BigNumber], VesselSnapshotsUpdatedEventObject>;

export type VesselSnapshotsUpdatedEventFilter = TypedEventFilter<VesselSnapshotsUpdatedEvent>;

export interface VesselUpdatedEventObject {
  _asset: string;
  _borrower: string;
  _debt: BigNumber;
  _coll: BigNumber;
  _stake: BigNumber;
  _operation: number;
}
export type VesselUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, number],
  VesselUpdatedEventObject
>;

export type VesselUpdatedEventFilter = TypedEventFilter<VesselUpdatedEvent>;

export interface VesselManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VesselManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BETA(overrides?: CallOverrides): Promise<[BigNumber]>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    L_Colls(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    L_Debts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    MINUTE_DECAY_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    SECONDS_IN_ONE_MINUTE(overrides?: CallOverrides): Promise<[BigNumber]>;

    VesselOwners(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    Vessels(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        debt: BigNumber;
        coll: BigNumber;
        stake: BigNumber;
        status: number;
        arrayIndex: BigNumber;
      }
    >;

    activePool(overrides?: CallOverrides): Promise<[string]>;

    addVesselOwnerToArray(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    adminContract(overrides?: CallOverrides): Promise<[string]>;

    applyPendingRewards(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    authorizeUpgrade(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    baseRate(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowerOperations(overrides?: CallOverrides): Promise<[string]>;

    checkRecoveryMode(
      _asset: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    closeVessel(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    closeVesselLiquidation(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    collSurplusPool(overrides?: CallOverrides): Promise<[string]>;

    communityIssuance(overrides?: CallOverrides): Promise<[string]>;

    debtToken(overrides?: CallOverrides): Promise<[string]>;

    decreaseVesselColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _collDecrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    decreaseVesselDebt(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _debtDecrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    defaultPool(overrides?: CallOverrides): Promise<[string]>;

    executeFullRedemption(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _newColl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    executePartialRedemption(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _newDebt: PromiseOrValue<BigNumberish>,
      _newColl: PromiseOrValue<BigNumberish>,
      _newNICR: PromiseOrValue<BigNumberish>,
      _upperPartialRedemptionHint: PromiseOrValue<string>,
      _lowerPartialRedemptionHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    finalizeRedemption(
      _asset: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _debtToRedeem: PromiseOrValue<BigNumberish>,
      _assetFeeAmount: PromiseOrValue<BigNumberish>,
      _assetRedeemedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    gasPoolAddress(overrides?: CallOverrides): Promise<[string]>;

    getBorrowingFee(
      _asset: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getBorrowingRate(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentICR(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getEntireDebtAndColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        debt: BigNumber;
        coll: BigNumber;
        pendingDebtReward: BigNumber;
        pendingCollReward: BigNumber;
      }
    >;

    getEntireSystemColl(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { entireSystemColl: BigNumber }>;

    getEntireSystemDebt(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { entireSystemDebt: BigNumber }>;

    getNominalICR(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getPendingAssetReward(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getPendingDebtTokenReward(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getRedemptionFee(
      _asset: PromiseOrValue<string>,
      _assetDraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getRedemptionFeeWithDecay(
      _asset: PromiseOrValue<string>,
      _assetDraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getRedemptionRate(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getRedemptionRateWithDecay(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTCR(
      _asset: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getVesselColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getVesselDebt(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getVesselFromVesselOwnersArray(
      _asset: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getVesselOwnersCount(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getVesselStake(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getVesselStatus(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    grvtStaking(overrides?: CallOverrides): Promise<[string]>;

    hasPendingRewards(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    increaseVesselColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _collIncrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    increaseVesselDebt(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _debtIncrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    isSetupInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isValidFirstRedemptionHint(
      _asset: PromiseOrValue<string>,
      _firstRedemptionHint: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isVesselActive(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    lastCollError_Redistribution(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    lastDebtError_Redistribution(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    lastFeeOperationTime(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    movePendingVesselRewardsToActivePool(
      _asset: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      _assetAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    redistributeDebtAndColl(
      _asset: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      _coll: PromiseOrValue<BigNumberish>,
      _debtToOffset: PromiseOrValue<BigNumberish>,
      _collToSendToStabilityPool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeStake(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    rewardSnapshots(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { asset: BigNumber; debt: BigNumber }>;

    sendGasCompensation(
      _asset: PromiseOrValue<string>,
      _liquidator: PromiseOrValue<string>,
      _debtTokenAmount: PromiseOrValue<BigNumberish>,
      _assetAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setVesselStatus(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _num: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    sortedVessels(overrides?: CallOverrides): Promise<[string]>;

    stabilityPool(overrides?: CallOverrides): Promise<[string]>;

    timelockAddress(overrides?: CallOverrides): Promise<[string]>;

    totalCollateralSnapshot(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStakes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStakesSnapshot(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    updateBaseRateFromRedemption(
      _asset: PromiseOrValue<string>,
      _assetDrawn: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _totalDebtTokenSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateStakeAndTotalStakes(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateSystemSnapshots_excludeCollRemainder(
      _asset: PromiseOrValue<string>,
      _collRemainder: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateVesselRewardSnapshots(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    vesselManager(overrides?: CallOverrides): Promise<[string]>;

    vesselManagerOperations(overrides?: CallOverrides): Promise<[string]>;
  };

  BETA(overrides?: CallOverrides): Promise<BigNumber>;

  DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  L_Colls(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  L_Debts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  MINUTE_DECAY_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  NAME(overrides?: CallOverrides): Promise<string>;

  SECONDS_IN_ONE_MINUTE(overrides?: CallOverrides): Promise<BigNumber>;

  VesselOwners(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  Vessels(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number, BigNumber] & {
      debt: BigNumber;
      coll: BigNumber;
      stake: BigNumber;
      status: number;
      arrayIndex: BigNumber;
    }
  >;

  activePool(overrides?: CallOverrides): Promise<string>;

  addVesselOwnerToArray(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  adminContract(overrides?: CallOverrides): Promise<string>;

  applyPendingRewards(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  authorizeUpgrade(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  baseRate(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  borrowerOperations(overrides?: CallOverrides): Promise<string>;

  checkRecoveryMode(
    _asset: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  closeVessel(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  closeVesselLiquidation(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  collSurplusPool(overrides?: CallOverrides): Promise<string>;

  communityIssuance(overrides?: CallOverrides): Promise<string>;

  debtToken(overrides?: CallOverrides): Promise<string>;

  decreaseVesselColl(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    _collDecrease: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  decreaseVesselDebt(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    _debtDecrease: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  defaultPool(overrides?: CallOverrides): Promise<string>;

  executeFullRedemption(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    _newColl: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  executePartialRedemption(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    _newDebt: PromiseOrValue<BigNumberish>,
    _newColl: PromiseOrValue<BigNumberish>,
    _newNICR: PromiseOrValue<BigNumberish>,
    _upperPartialRedemptionHint: PromiseOrValue<string>,
    _lowerPartialRedemptionHint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  finalizeRedemption(
    _asset: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    _debtToRedeem: PromiseOrValue<BigNumberish>,
    _assetFeeAmount: PromiseOrValue<BigNumberish>,
    _assetRedeemedAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  gasPoolAddress(overrides?: CallOverrides): Promise<string>;

  getBorrowingFee(
    _asset: PromiseOrValue<string>,
    _debt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getBorrowingRate(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentICR(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getEntireDebtAndColl(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      debt: BigNumber;
      coll: BigNumber;
      pendingDebtReward: BigNumber;
      pendingCollReward: BigNumber;
    }
  >;

  getEntireSystemColl(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getEntireSystemDebt(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getNominalICR(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getPendingAssetReward(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getPendingDebtTokenReward(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getRedemptionFee(
    _asset: PromiseOrValue<string>,
    _assetDraw: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getRedemptionFeeWithDecay(
    _asset: PromiseOrValue<string>,
    _assetDraw: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getRedemptionRate(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getRedemptionRateWithDecay(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getTCR(
    _asset: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getVesselColl(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getVesselDebt(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getVesselFromVesselOwnersArray(
    _asset: PromiseOrValue<string>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  getVesselOwnersCount(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getVesselStake(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getVesselStatus(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  grvtStaking(overrides?: CallOverrides): Promise<string>;

  hasPendingRewards(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  increaseVesselColl(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    _collIncrease: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  increaseVesselDebt(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    _debtIncrease: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  isSetupInitialized(overrides?: CallOverrides): Promise<boolean>;

  isValidFirstRedemptionHint(
    _asset: PromiseOrValue<string>,
    _firstRedemptionHint: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isVesselActive(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  lastCollError_Redistribution(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  lastDebtError_Redistribution(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  lastFeeOperationTime(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  movePendingVesselRewardsToActivePool(
    _asset: PromiseOrValue<string>,
    _debt: PromiseOrValue<BigNumberish>,
    _assetAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  redistributeDebtAndColl(
    _asset: PromiseOrValue<string>,
    _debt: PromiseOrValue<BigNumberish>,
    _coll: PromiseOrValue<BigNumberish>,
    _debtToOffset: PromiseOrValue<BigNumberish>,
    _collToSendToStabilityPool: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeStake(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  rewardSnapshots(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { asset: BigNumber; debt: BigNumber }>;

  sendGasCompensation(
    _asset: PromiseOrValue<string>,
    _liquidator: PromiseOrValue<string>,
    _debtTokenAmount: PromiseOrValue<BigNumberish>,
    _assetAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setVesselStatus(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    _num: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  sortedVessels(overrides?: CallOverrides): Promise<string>;

  stabilityPool(overrides?: CallOverrides): Promise<string>;

  timelockAddress(overrides?: CallOverrides): Promise<string>;

  totalCollateralSnapshot(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  totalStakes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  totalStakesSnapshot(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  updateBaseRateFromRedemption(
    _asset: PromiseOrValue<string>,
    _assetDrawn: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    _totalDebtTokenSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateStakeAndTotalStakes(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateSystemSnapshots_excludeCollRemainder(
    _asset: PromiseOrValue<string>,
    _collRemainder: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateVesselRewardSnapshots(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  vesselManager(overrides?: CallOverrides): Promise<string>;

  vesselManagerOperations(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BETA(overrides?: CallOverrides): Promise<BigNumber>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    L_Colls(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    L_Debts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    MINUTE_DECAY_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<string>;

    SECONDS_IN_ONE_MINUTE(overrides?: CallOverrides): Promise<BigNumber>;

    VesselOwners(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    Vessels(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        debt: BigNumber;
        coll: BigNumber;
        stake: BigNumber;
        status: number;
        arrayIndex: BigNumber;
      }
    >;

    activePool(overrides?: CallOverrides): Promise<string>;

    addVesselOwnerToArray(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    adminContract(overrides?: CallOverrides): Promise<string>;

    applyPendingRewards(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    authorizeUpgrade(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    baseRate(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowerOperations(overrides?: CallOverrides): Promise<string>;

    checkRecoveryMode(
      _asset: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    closeVessel(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    closeVesselLiquidation(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    collSurplusPool(overrides?: CallOverrides): Promise<string>;

    communityIssuance(overrides?: CallOverrides): Promise<string>;

    debtToken(overrides?: CallOverrides): Promise<string>;

    decreaseVesselColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _collDecrease: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    decreaseVesselDebt(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _debtDecrease: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    defaultPool(overrides?: CallOverrides): Promise<string>;

    executeFullRedemption(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _newColl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    executePartialRedemption(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _newDebt: PromiseOrValue<BigNumberish>,
      _newColl: PromiseOrValue<BigNumberish>,
      _newNICR: PromiseOrValue<BigNumberish>,
      _upperPartialRedemptionHint: PromiseOrValue<string>,
      _lowerPartialRedemptionHint: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    finalizeRedemption(
      _asset: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _debtToRedeem: PromiseOrValue<BigNumberish>,
      _assetFeeAmount: PromiseOrValue<BigNumberish>,
      _assetRedeemedAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    gasPoolAddress(overrides?: CallOverrides): Promise<string>;

    getBorrowingFee(
      _asset: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getBorrowingRate(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentICR(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getEntireDebtAndColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        debt: BigNumber;
        coll: BigNumber;
        pendingDebtReward: BigNumber;
        pendingCollReward: BigNumber;
      }
    >;

    getEntireSystemColl(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getEntireSystemDebt(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getNominalICR(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPendingAssetReward(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPendingDebtTokenReward(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRedemptionFee(
      _asset: PromiseOrValue<string>,
      _assetDraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRedemptionFeeWithDecay(
      _asset: PromiseOrValue<string>,
      _assetDraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRedemptionRate(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRedemptionRateWithDecay(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTCR(
      _asset: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getVesselColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getVesselDebt(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getVesselFromVesselOwnersArray(
      _asset: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getVesselOwnersCount(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getVesselStake(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getVesselStatus(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    grvtStaking(overrides?: CallOverrides): Promise<string>;

    hasPendingRewards(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    increaseVesselColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _collIncrease: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    increaseVesselDebt(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _debtIncrease: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isSetupInitialized(overrides?: CallOverrides): Promise<boolean>;

    isValidFirstRedemptionHint(
      _asset: PromiseOrValue<string>,
      _firstRedemptionHint: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isVesselActive(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    lastCollError_Redistribution(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lastDebtError_Redistribution(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lastFeeOperationTime(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    movePendingVesselRewardsToActivePool(
      _asset: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      _assetAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    redistributeDebtAndColl(
      _asset: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      _coll: PromiseOrValue<BigNumberish>,
      _debtToOffset: PromiseOrValue<BigNumberish>,
      _collToSendToStabilityPool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    removeStake(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardSnapshots(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { asset: BigNumber; debt: BigNumber }>;

    sendGasCompensation(
      _asset: PromiseOrValue<string>,
      _liquidator: PromiseOrValue<string>,
      _debtTokenAmount: PromiseOrValue<BigNumberish>,
      _assetAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setVesselStatus(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _num: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    sortedVessels(overrides?: CallOverrides): Promise<string>;

    stabilityPool(overrides?: CallOverrides): Promise<string>;

    timelockAddress(overrides?: CallOverrides): Promise<string>;

    totalCollateralSnapshot(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    totalStakes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    totalStakesSnapshot(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;

    updateBaseRateFromRedemption(
      _asset: PromiseOrValue<string>,
      _assetDrawn: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _totalDebtTokenSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    updateStakeAndTotalStakes(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    updateSystemSnapshots_excludeCollRemainder(
      _asset: PromiseOrValue<string>,
      _collRemainder: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateVesselRewardSnapshots(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    vesselManager(overrides?: CallOverrides): Promise<string>;

    vesselManagerOperations(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'AdminChanged(address,address)'(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
    AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;

    'BaseRateUpdated(address,uint256)'(
      _asset?: PromiseOrValue<string> | null,
      _baseRate?: null,
    ): BaseRateUpdatedEventFilter;
    BaseRateUpdated(_asset?: PromiseOrValue<string> | null, _baseRate?: null): BaseRateUpdatedEventFilter;

    'BeaconUpgraded(address)'(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'LTermsUpdated(address,uint256,uint256)'(
      _asset?: PromiseOrValue<string> | null,
      _L_Coll?: null,
      _L_Debt?: null,
    ): LTermsUpdatedEventFilter;
    LTermsUpdated(_asset?: PromiseOrValue<string> | null, _L_Coll?: null, _L_Debt?: null): LTermsUpdatedEventFilter;

    'LastFeeOpTimeUpdated(address,uint256)'(
      _asset?: PromiseOrValue<string> | null,
      _lastFeeOpTime?: null,
    ): LastFeeOpTimeUpdatedEventFilter;
    LastFeeOpTimeUpdated(
      _asset?: PromiseOrValue<string> | null,
      _lastFeeOpTime?: null,
    ): LastFeeOpTimeUpdatedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'SystemSnapshotsUpdated(address,uint256,uint256)'(
      _asset?: PromiseOrValue<string> | null,
      _totalStakesSnapshot?: null,
      _totalCollateralSnapshot?: null,
    ): SystemSnapshotsUpdatedEventFilter;
    SystemSnapshotsUpdated(
      _asset?: PromiseOrValue<string> | null,
      _totalStakesSnapshot?: null,
      _totalCollateralSnapshot?: null,
    ): SystemSnapshotsUpdatedEventFilter;

    'TotalStakesUpdated(address,uint256)'(
      _asset?: PromiseOrValue<string> | null,
      _newTotalStakes?: null,
    ): TotalStakesUpdatedEventFilter;
    TotalStakesUpdated(_asset?: PromiseOrValue<string> | null, _newTotalStakes?: null): TotalStakesUpdatedEventFilter;

    'Upgraded(address)'(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
    Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;

    'VesselIndexUpdated(address,address,uint256)'(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: null,
      _newIndex?: null,
    ): VesselIndexUpdatedEventFilter;
    VesselIndexUpdated(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: null,
      _newIndex?: null,
    ): VesselIndexUpdatedEventFilter;

    'VesselSnapshotsUpdated(address,uint256,uint256)'(
      _asset?: PromiseOrValue<string> | null,
      _L_Coll?: null,
      _L_Debt?: null,
    ): VesselSnapshotsUpdatedEventFilter;
    VesselSnapshotsUpdated(
      _asset?: PromiseOrValue<string> | null,
      _L_Coll?: null,
      _L_Debt?: null,
    ): VesselSnapshotsUpdatedEventFilter;

    'VesselUpdated(address,address,uint256,uint256,uint256,uint8)'(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: PromiseOrValue<string> | null,
      _debt?: null,
      _coll?: null,
      _stake?: null,
      _operation?: null,
    ): VesselUpdatedEventFilter;
    VesselUpdated(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: PromiseOrValue<string> | null,
      _debt?: null,
      _coll?: null,
      _stake?: null,
      _operation?: null,
    ): VesselUpdatedEventFilter;
  };

  estimateGas: {
    BETA(overrides?: CallOverrides): Promise<BigNumber>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    L_Colls(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    L_Debts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    MINUTE_DECAY_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDS_IN_ONE_MINUTE(overrides?: CallOverrides): Promise<BigNumber>;

    VesselOwners(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    Vessels(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    activePool(overrides?: CallOverrides): Promise<BigNumber>;

    addVesselOwnerToArray(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    adminContract(overrides?: CallOverrides): Promise<BigNumber>;

    applyPendingRewards(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    authorizeUpgrade(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    baseRate(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowerOperations(overrides?: CallOverrides): Promise<BigNumber>;

    checkRecoveryMode(
      _asset: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    closeVessel(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    closeVesselLiquidation(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    collSurplusPool(overrides?: CallOverrides): Promise<BigNumber>;

    communityIssuance(overrides?: CallOverrides): Promise<BigNumber>;

    debtToken(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseVesselColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _collDecrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    decreaseVesselDebt(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _debtDecrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    defaultPool(overrides?: CallOverrides): Promise<BigNumber>;

    executeFullRedemption(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _newColl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    executePartialRedemption(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _newDebt: PromiseOrValue<BigNumberish>,
      _newColl: PromiseOrValue<BigNumberish>,
      _newNICR: PromiseOrValue<BigNumberish>,
      _upperPartialRedemptionHint: PromiseOrValue<string>,
      _lowerPartialRedemptionHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    finalizeRedemption(
      _asset: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _debtToRedeem: PromiseOrValue<BigNumberish>,
      _assetFeeAmount: PromiseOrValue<BigNumberish>,
      _assetRedeemedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    gasPoolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowingFee(
      _asset: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getBorrowingRate(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentICR(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getEntireDebtAndColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getEntireSystemColl(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getEntireSystemDebt(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getNominalICR(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPendingAssetReward(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPendingDebtTokenReward(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRedemptionFee(
      _asset: PromiseOrValue<string>,
      _assetDraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRedemptionFeeWithDecay(
      _asset: PromiseOrValue<string>,
      _assetDraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRedemptionRate(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRedemptionRateWithDecay(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTCR(
      _asset: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getVesselColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getVesselDebt(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getVesselFromVesselOwnersArray(
      _asset: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getVesselOwnersCount(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getVesselStake(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getVesselStatus(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    grvtStaking(overrides?: CallOverrides): Promise<BigNumber>;

    hasPendingRewards(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    increaseVesselColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _collIncrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    increaseVesselDebt(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _debtIncrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    isSetupInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isValidFirstRedemptionHint(
      _asset: PromiseOrValue<string>,
      _firstRedemptionHint: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isVesselActive(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lastCollError_Redistribution(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lastDebtError_Redistribution(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lastFeeOperationTime(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    movePendingVesselRewardsToActivePool(
      _asset: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      _assetAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    redistributeDebtAndColl(
      _asset: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      _coll: PromiseOrValue<BigNumberish>,
      _debtToOffset: PromiseOrValue<BigNumberish>,
      _collToSendToStabilityPool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeStake(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    rewardSnapshots(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    sendGasCompensation(
      _asset: PromiseOrValue<string>,
      _liquidator: PromiseOrValue<string>,
      _debtTokenAmount: PromiseOrValue<BigNumberish>,
      _assetAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setVesselStatus(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _num: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    sortedVessels(overrides?: CallOverrides): Promise<BigNumber>;

    stabilityPool(overrides?: CallOverrides): Promise<BigNumber>;

    timelockAddress(overrides?: CallOverrides): Promise<BigNumber>;

    totalCollateralSnapshot(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    totalStakes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    totalStakesSnapshot(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    updateBaseRateFromRedemption(
      _asset: PromiseOrValue<string>,
      _assetDrawn: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _totalDebtTokenSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateStakeAndTotalStakes(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateSystemSnapshots_excludeCollRemainder(
      _asset: PromiseOrValue<string>,
      _collRemainder: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateVesselRewardSnapshots(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    vesselManager(overrides?: CallOverrides): Promise<BigNumber>;

    vesselManagerOperations(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BETA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    L_Colls(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    L_Debts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINUTE_DECAY_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SECONDS_IN_ONE_MINUTE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VesselOwners(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    Vessels(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    activePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addVesselOwnerToArray(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    adminContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    applyPendingRewards(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    authorizeUpgrade(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    baseRate(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowerOperations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkRecoveryMode(
      _asset: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    closeVessel(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    closeVesselLiquidation(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    collSurplusPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    communityIssuance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseVesselColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _collDecrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    decreaseVesselDebt(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _debtDecrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    defaultPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeFullRedemption(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _newColl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    executePartialRedemption(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _newDebt: PromiseOrValue<BigNumberish>,
      _newColl: PromiseOrValue<BigNumberish>,
      _newNICR: PromiseOrValue<BigNumberish>,
      _upperPartialRedemptionHint: PromiseOrValue<string>,
      _lowerPartialRedemptionHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalizeRedemption(
      _asset: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _debtToRedeem: PromiseOrValue<BigNumberish>,
      _assetFeeAmount: PromiseOrValue<BigNumberish>,
      _assetRedeemedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    gasPoolAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBorrowingFee(
      _asset: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getBorrowingRate(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentICR(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getEntireDebtAndColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getEntireSystemColl(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEntireSystemDebt(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNominalICR(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPendingAssetReward(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPendingDebtTokenReward(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRedemptionFee(
      _asset: PromiseOrValue<string>,
      _assetDraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRedemptionFeeWithDecay(
      _asset: PromiseOrValue<string>,
      _assetDraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRedemptionRate(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRedemptionRateWithDecay(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTCR(
      _asset: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getVesselColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getVesselDebt(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getVesselFromVesselOwnersArray(
      _asset: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getVesselOwnersCount(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVesselStake(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getVesselStatus(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    grvtStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasPendingRewards(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    increaseVesselColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _collIncrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    increaseVesselDebt(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _debtIncrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    isSetupInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidFirstRedemptionHint(
      _asset: PromiseOrValue<string>,
      _firstRedemptionHint: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isVesselActive(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lastCollError_Redistribution(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lastDebtError_Redistribution(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lastFeeOperationTime(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    movePendingVesselRewardsToActivePool(
      _asset: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      _assetAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redistributeDebtAndColl(
      _asset: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      _coll: PromiseOrValue<BigNumberish>,
      _debtToOffset: PromiseOrValue<BigNumberish>,
      _collToSendToStabilityPool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeStake(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    rewardSnapshots(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    sendGasCompensation(
      _asset: PromiseOrValue<string>,
      _liquidator: PromiseOrValue<string>,
      _debtTokenAmount: PromiseOrValue<BigNumberish>,
      _assetAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setVesselStatus(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _num: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    sortedVessels(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stabilityPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelockAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCollateralSnapshot(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakesSnapshot(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateBaseRateFromRedemption(
      _asset: PromiseOrValue<string>,
      _assetDrawn: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _totalDebtTokenSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateStakeAndTotalStakes(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateSystemSnapshots_excludeCollRemainder(
      _asset: PromiseOrValue<string>,
      _collRemainder: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateVesselRewardSnapshots(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    vesselManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vesselManagerOperations(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
