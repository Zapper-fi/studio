/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface AdminContractInterface extends utils.Interface {
  functions: {
    'BORROWING_FEE_DEFAULT()': FunctionFragment;
    'CCR_DEFAULT()': FunctionFragment;
    'DECIMAL_PRECISION()': FunctionFragment;
    'MCR_DEFAULT()': FunctionFragment;
    'MINT_CAP_DEFAULT()': FunctionFragment;
    'MIN_NET_DEBT_DEFAULT()': FunctionFragment;
    'NAME()': FunctionFragment;
    'PERCENT_DIVISOR_DEFAULT()': FunctionFragment;
    'REDEMPTION_BLOCK_TIMESTAMP_DEFAULT()': FunctionFragment;
    'REDEMPTION_FEE_FLOOR_DEFAULT()': FunctionFragment;
    '_100pct()': FunctionFragment;
    'activePool()': FunctionFragment;
    'addNewCollateral(address,uint256,uint256)': FunctionFragment;
    'adminContract()': FunctionFragment;
    'authorizeUpgrade(address)': FunctionFragment;
    'borrowerOperations()': FunctionFragment;
    'collSurplusPool()': FunctionFragment;
    'communityIssuance()': FunctionFragment;
    'debtToken()': FunctionFragment;
    'defaultPool()': FunctionFragment;
    'feeCollector()': FunctionFragment;
    'gasPoolAddress()': FunctionFragment;
    'getBorrowingFee(address)': FunctionFragment;
    'getCcr(address)': FunctionFragment;
    'getDebtTokenGasCompensation(address)': FunctionFragment;
    'getDecimals(address)': FunctionFragment;
    'getIndex(address)': FunctionFragment;
    'getIndices(address[])': FunctionFragment;
    'getIsActive(address)': FunctionFragment;
    'getMcr(address)': FunctionFragment;
    'getMinNetDebt(address)': FunctionFragment;
    'getMintCap(address)': FunctionFragment;
    'getPercentDivisor(address)': FunctionFragment;
    'getRedemptionBlockTimestamp(address)': FunctionFragment;
    'getRedemptionFeeFloor(address)': FunctionFragment;
    'getTotalAssetDebt(address)': FunctionFragment;
    'getValidCollateral()': FunctionFragment;
    'grvtStaking()': FunctionFragment;
    'initialize()': FunctionFragment;
    'isSetupInitialized()': FunctionFragment;
    'owner()': FunctionFragment;
    'priceFeed()': FunctionFragment;
    'proxiableUUID()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setBorrowingFee(address,uint256)': FunctionFragment;
    'setCCR(address,uint256)': FunctionFragment;
    'setCollateralParameters(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)': FunctionFragment;
    'setIsActive(address,bool)': FunctionFragment;
    'setMCR(address,uint256)': FunctionFragment;
    'setMinNetDebt(address,uint256)': FunctionFragment;
    'setMintCap(address,uint256)': FunctionFragment;
    'setPercentDivisor(address,uint256)': FunctionFragment;
    'setRedemptionBlockTimestamp(address,uint256)': FunctionFragment;
    'setRedemptionFeeFloor(address,uint256)': FunctionFragment;
    'setSetupIsInitialized()': FunctionFragment;
    'sortedVessels()': FunctionFragment;
    'stabilityPool()': FunctionFragment;
    'timelockAddress()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'treasuryAddress()': FunctionFragment;
    'upgradeTo(address)': FunctionFragment;
    'upgradeToAndCall(address,bytes)': FunctionFragment;
    'validCollateral(uint256)': FunctionFragment;
    'vesselManager()': FunctionFragment;
    'vesselManagerOperations()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BORROWING_FEE_DEFAULT'
      | 'CCR_DEFAULT'
      | 'DECIMAL_PRECISION'
      | 'MCR_DEFAULT'
      | 'MINT_CAP_DEFAULT'
      | 'MIN_NET_DEBT_DEFAULT'
      | 'NAME'
      | 'PERCENT_DIVISOR_DEFAULT'
      | 'REDEMPTION_BLOCK_TIMESTAMP_DEFAULT'
      | 'REDEMPTION_FEE_FLOOR_DEFAULT'
      | '_100pct'
      | 'activePool'
      | 'addNewCollateral'
      | 'adminContract'
      | 'authorizeUpgrade'
      | 'borrowerOperations'
      | 'collSurplusPool'
      | 'communityIssuance'
      | 'debtToken'
      | 'defaultPool'
      | 'feeCollector'
      | 'gasPoolAddress'
      | 'getBorrowingFee'
      | 'getCcr'
      | 'getDebtTokenGasCompensation'
      | 'getDecimals'
      | 'getIndex'
      | 'getIndices'
      | 'getIsActive'
      | 'getMcr'
      | 'getMinNetDebt'
      | 'getMintCap'
      | 'getPercentDivisor'
      | 'getRedemptionBlockTimestamp'
      | 'getRedemptionFeeFloor'
      | 'getTotalAssetDebt'
      | 'getValidCollateral'
      | 'grvtStaking'
      | 'initialize'
      | 'isSetupInitialized'
      | 'owner'
      | 'priceFeed'
      | 'proxiableUUID'
      | 'renounceOwnership'
      | 'setBorrowingFee'
      | 'setCCR'
      | 'setCollateralParameters'
      | 'setIsActive'
      | 'setMCR'
      | 'setMinNetDebt'
      | 'setMintCap'
      | 'setPercentDivisor'
      | 'setRedemptionBlockTimestamp'
      | 'setRedemptionFeeFloor'
      | 'setSetupIsInitialized'
      | 'sortedVessels'
      | 'stabilityPool'
      | 'timelockAddress'
      | 'transferOwnership'
      | 'treasuryAddress'
      | 'upgradeTo'
      | 'upgradeToAndCall'
      | 'validCollateral'
      | 'vesselManager'
      | 'vesselManagerOperations',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BORROWING_FEE_DEFAULT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'CCR_DEFAULT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DECIMAL_PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MCR_DEFAULT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MINT_CAP_DEFAULT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MIN_NET_DEBT_DEFAULT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'NAME', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PERCENT_DIVISOR_DEFAULT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'REDEMPTION_BLOCK_TIMESTAMP_DEFAULT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'REDEMPTION_FEE_FLOOR_DEFAULT', values?: undefined): string;
  encodeFunctionData(functionFragment: '_100pct', values?: undefined): string;
  encodeFunctionData(functionFragment: 'activePool', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addNewCollateral',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'adminContract', values?: undefined): string;
  encodeFunctionData(functionFragment: 'authorizeUpgrade', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'borrowerOperations', values?: undefined): string;
  encodeFunctionData(functionFragment: 'collSurplusPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'communityIssuance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'debtToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'defaultPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feeCollector', values?: undefined): string;
  encodeFunctionData(functionFragment: 'gasPoolAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getBorrowingFee', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getCcr', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getDebtTokenGasCompensation', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getDecimals', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getIndex', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getIndices', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'getIsActive', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getMcr', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getMinNetDebt', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getMintCap', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getPercentDivisor', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getRedemptionBlockTimestamp', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getRedemptionFeeFloor', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getTotalAssetDebt', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getValidCollateral', values?: undefined): string;
  encodeFunctionData(functionFragment: 'grvtStaking', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isSetupInitialized', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'priceFeed', values?: undefined): string;
  encodeFunctionData(functionFragment: 'proxiableUUID', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setBorrowingFee',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setCCR',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setCollateralParameters',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'setIsActive',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setMCR',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setMinNetDebt',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setMintCap',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setPercentDivisor',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setRedemptionBlockTimestamp',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setRedemptionFeeFloor',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setSetupIsInitialized', values?: undefined): string;
  encodeFunctionData(functionFragment: 'sortedVessels', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stabilityPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'timelockAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'treasuryAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'upgradeTo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'validCollateral', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'vesselManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vesselManagerOperations', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'BORROWING_FEE_DEFAULT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'CCR_DEFAULT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DECIMAL_PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MCR_DEFAULT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MINT_CAP_DEFAULT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MIN_NET_DEBT_DEFAULT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'NAME', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PERCENT_DIVISOR_DEFAULT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'REDEMPTION_BLOCK_TIMESTAMP_DEFAULT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'REDEMPTION_FEE_FLOOR_DEFAULT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_100pct', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addNewCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adminContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'authorizeUpgrade', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowerOperations', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collSurplusPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'communityIssuance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'debtToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'defaultPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeCollector', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gasPoolAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBorrowingFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCcr', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDebtTokenGasCompensation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDecimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getIndices', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getIsActive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMcr', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMinNetDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMintCap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPercentDivisor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRedemptionBlockTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRedemptionFeeFloor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalAssetDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getValidCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grvtStaking', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isSetupInitialized', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'priceFeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proxiableUUID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBorrowingFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCCR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCollateralParameters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setIsActive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMCR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMinNetDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMintCap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPercentDivisor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRedemptionBlockTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRedemptionFeeFloor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSetupIsInitialized', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sortedVessels', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stabilityPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timelockAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasuryAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeToAndCall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'validCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vesselManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vesselManagerOperations', data: BytesLike): Result;

  events: {
    'AdminChanged(address,address)': EventFragment;
    'BeaconUpgraded(address)': EventFragment;
    'BorrowingFeeChanged(uint256,uint256)': EventFragment;
    'CCRChanged(uint256,uint256)': EventFragment;
    'CollateralAdded(address)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'MCRChanged(uint256,uint256)': EventFragment;
    'MinNetDebtChanged(uint256,uint256)': EventFragment;
    'MintCapChanged(uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'PercentDivisorChanged(uint256,uint256)': EventFragment;
    'RedemptionBlockTimestampChanged(address,uint256)': EventFragment;
    'RedemptionFeeFloorChanged(uint256,uint256)': EventFragment;
    'Upgraded(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BorrowingFeeChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CCRChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MCRChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MinNetDebtChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MintCapChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PercentDivisorChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RedemptionBlockTimestampChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RedemptionFeeFloorChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<[string, string], AdminChangedEventObject>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<[string], BeaconUpgradedEventObject>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface BorrowingFeeChangedEventObject {
  oldBorrowingFee: BigNumber;
  newBorrowingFee: BigNumber;
}
export type BorrowingFeeChangedEvent = TypedEvent<[BigNumber, BigNumber], BorrowingFeeChangedEventObject>;

export type BorrowingFeeChangedEventFilter = TypedEventFilter<BorrowingFeeChangedEvent>;

export interface CCRChangedEventObject {
  oldCCR: BigNumber;
  newCCR: BigNumber;
}
export type CCRChangedEvent = TypedEvent<[BigNumber, BigNumber], CCRChangedEventObject>;

export type CCRChangedEventFilter = TypedEventFilter<CCRChangedEvent>;

export interface CollateralAddedEventObject {
  _collateral: string;
}
export type CollateralAddedEvent = TypedEvent<[string], CollateralAddedEventObject>;

export type CollateralAddedEventFilter = TypedEventFilter<CollateralAddedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MCRChangedEventObject {
  oldMCR: BigNumber;
  newMCR: BigNumber;
}
export type MCRChangedEvent = TypedEvent<[BigNumber, BigNumber], MCRChangedEventObject>;

export type MCRChangedEventFilter = TypedEventFilter<MCRChangedEvent>;

export interface MinNetDebtChangedEventObject {
  oldMinNet: BigNumber;
  newMinNet: BigNumber;
}
export type MinNetDebtChangedEvent = TypedEvent<[BigNumber, BigNumber], MinNetDebtChangedEventObject>;

export type MinNetDebtChangedEventFilter = TypedEventFilter<MinNetDebtChangedEvent>;

export interface MintCapChangedEventObject {
  oldMintCap: BigNumber;
  newMintCap: BigNumber;
}
export type MintCapChangedEvent = TypedEvent<[BigNumber, BigNumber], MintCapChangedEventObject>;

export type MintCapChangedEventFilter = TypedEventFilter<MintCapChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PercentDivisorChangedEventObject {
  oldPercentDiv: BigNumber;
  newPercentDiv: BigNumber;
}
export type PercentDivisorChangedEvent = TypedEvent<[BigNumber, BigNumber], PercentDivisorChangedEventObject>;

export type PercentDivisorChangedEventFilter = TypedEventFilter<PercentDivisorChangedEvent>;

export interface RedemptionBlockTimestampChangedEventObject {
  _collateral: string;
  _blockTimestamp: BigNumber;
}
export type RedemptionBlockTimestampChangedEvent = TypedEvent<
  [string, BigNumber],
  RedemptionBlockTimestampChangedEventObject
>;

export type RedemptionBlockTimestampChangedEventFilter = TypedEventFilter<RedemptionBlockTimestampChangedEvent>;

export interface RedemptionFeeFloorChangedEventObject {
  oldRedemptionFeeFloor: BigNumber;
  newRedemptionFeeFloor: BigNumber;
}
export type RedemptionFeeFloorChangedEvent = TypedEvent<[BigNumber, BigNumber], RedemptionFeeFloorChangedEventObject>;

export type RedemptionFeeFloorChangedEventFilter = TypedEventFilter<RedemptionFeeFloorChangedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface AdminContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AdminContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BORROWING_FEE_DEFAULT(overrides?: CallOverrides): Promise<[BigNumber]>;

    CCR_DEFAULT(overrides?: CallOverrides): Promise<[BigNumber]>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MCR_DEFAULT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINT_CAP_DEFAULT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_NET_DEBT_DEFAULT(overrides?: CallOverrides): Promise<[BigNumber]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    PERCENT_DIVISOR_DEFAULT(overrides?: CallOverrides): Promise<[BigNumber]>;

    REDEMPTION_BLOCK_TIMESTAMP_DEFAULT(overrides?: CallOverrides): Promise<[BigNumber]>;

    REDEMPTION_FEE_FLOOR_DEFAULT(overrides?: CallOverrides): Promise<[BigNumber]>;

    _100pct(overrides?: CallOverrides): Promise<[BigNumber]>;

    activePool(overrides?: CallOverrides): Promise<[string]>;

    addNewCollateral(
      _collateral: PromiseOrValue<string>,
      _debtTokenGasCompensation: PromiseOrValue<BigNumberish>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    adminContract(overrides?: CallOverrides): Promise<[string]>;

    authorizeUpgrade(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    borrowerOperations(overrides?: CallOverrides): Promise<[string]>;

    collSurplusPool(overrides?: CallOverrides): Promise<[string]>;

    communityIssuance(overrides?: CallOverrides): Promise<[string]>;

    debtToken(overrides?: CallOverrides): Promise<[string]>;

    defaultPool(overrides?: CallOverrides): Promise<[string]>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    gasPoolAddress(overrides?: CallOverrides): Promise<[string]>;

    getBorrowingFee(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getCcr(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getDebtTokenGasCompensation(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getDecimals(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getIndex(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getIndices(
      _colls: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]] & { indices: BigNumber[] }>;

    getIsActive(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    getMcr(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinNetDebt(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getMintCap(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPercentDivisor(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getRedemptionBlockTimestamp(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getRedemptionFeeFloor(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalAssetDebt(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getValidCollateral(overrides?: CallOverrides): Promise<[string[]]>;

    grvtStaking(overrides?: CallOverrides): Promise<[string]>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    isSetupInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setBorrowingFee(
      _collateral: PromiseOrValue<string>,
      borrowingFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setCCR(
      _collateral: PromiseOrValue<string>,
      newCCR: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setCollateralParameters(
      _collateral: PromiseOrValue<string>,
      borrowingFee: PromiseOrValue<BigNumberish>,
      ccr: PromiseOrValue<BigNumberish>,
      mcr: PromiseOrValue<BigNumberish>,
      minNetDebt: PromiseOrValue<BigNumberish>,
      mintCap: PromiseOrValue<BigNumberish>,
      percentDivisor: PromiseOrValue<BigNumberish>,
      redemptionFeeFloor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setIsActive(
      _collateral: PromiseOrValue<string>,
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMCR(
      _collateral: PromiseOrValue<string>,
      newMCR: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMinNetDebt(
      _collateral: PromiseOrValue<string>,
      minNetDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMintCap(
      _collateral: PromiseOrValue<string>,
      mintCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPercentDivisor(
      _collateral: PromiseOrValue<string>,
      percentDivisor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRedemptionBlockTimestamp(
      _collateral: PromiseOrValue<string>,
      _blockTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRedemptionFeeFloor(
      _collateral: PromiseOrValue<string>,
      redemptionFeeFloor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSetupIsInitialized(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    sortedVessels(overrides?: CallOverrides): Promise<[string]>;

    stabilityPool(overrides?: CallOverrides): Promise<[string]>;

    timelockAddress(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    validCollateral(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    vesselManager(overrides?: CallOverrides): Promise<[string]>;

    vesselManagerOperations(overrides?: CallOverrides): Promise<[string]>;
  };

  BORROWING_FEE_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

  CCR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

  DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  MCR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

  MINT_CAP_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_NET_DEBT_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

  NAME(overrides?: CallOverrides): Promise<string>;

  PERCENT_DIVISOR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

  REDEMPTION_BLOCK_TIMESTAMP_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

  REDEMPTION_FEE_FLOOR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

  _100pct(overrides?: CallOverrides): Promise<BigNumber>;

  activePool(overrides?: CallOverrides): Promise<string>;

  addNewCollateral(
    _collateral: PromiseOrValue<string>,
    _debtTokenGasCompensation: PromiseOrValue<BigNumberish>,
    _decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  adminContract(overrides?: CallOverrides): Promise<string>;

  authorizeUpgrade(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  borrowerOperations(overrides?: CallOverrides): Promise<string>;

  collSurplusPool(overrides?: CallOverrides): Promise<string>;

  communityIssuance(overrides?: CallOverrides): Promise<string>;

  debtToken(overrides?: CallOverrides): Promise<string>;

  defaultPool(overrides?: CallOverrides): Promise<string>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  gasPoolAddress(overrides?: CallOverrides): Promise<string>;

  getBorrowingFee(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getCcr(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getDebtTokenGasCompensation(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getDecimals(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getIndex(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getIndices(_colls: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<BigNumber[]>;

  getIsActive(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  getMcr(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getMinNetDebt(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getMintCap(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getPercentDivisor(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getRedemptionBlockTimestamp(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getRedemptionFeeFloor(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getTotalAssetDebt(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getValidCollateral(overrides?: CallOverrides): Promise<string[]>;

  grvtStaking(overrides?: CallOverrides): Promise<string>;

  initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  isSetupInitialized(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setBorrowingFee(
    _collateral: PromiseOrValue<string>,
    borrowingFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setCCR(
    _collateral: PromiseOrValue<string>,
    newCCR: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setCollateralParameters(
    _collateral: PromiseOrValue<string>,
    borrowingFee: PromiseOrValue<BigNumberish>,
    ccr: PromiseOrValue<BigNumberish>,
    mcr: PromiseOrValue<BigNumberish>,
    minNetDebt: PromiseOrValue<BigNumberish>,
    mintCap: PromiseOrValue<BigNumberish>,
    percentDivisor: PromiseOrValue<BigNumberish>,
    redemptionFeeFloor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setIsActive(
    _collateral: PromiseOrValue<string>,
    _active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMCR(
    _collateral: PromiseOrValue<string>,
    newMCR: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMinNetDebt(
    _collateral: PromiseOrValue<string>,
    minNetDebt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMintCap(
    _collateral: PromiseOrValue<string>,
    mintCap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPercentDivisor(
    _collateral: PromiseOrValue<string>,
    percentDivisor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRedemptionBlockTimestamp(
    _collateral: PromiseOrValue<string>,
    _blockTimestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRedemptionFeeFloor(
    _collateral: PromiseOrValue<string>,
    redemptionFeeFloor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSetupIsInitialized(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  sortedVessels(overrides?: CallOverrides): Promise<string>;

  stabilityPool(overrides?: CallOverrides): Promise<string>;

  timelockAddress(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  validCollateral(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  vesselManager(overrides?: CallOverrides): Promise<string>;

  vesselManagerOperations(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BORROWING_FEE_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    CCR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MCR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    MINT_CAP_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_NET_DEBT_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<string>;

    PERCENT_DIVISOR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    REDEMPTION_BLOCK_TIMESTAMP_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    REDEMPTION_FEE_FLOOR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    _100pct(overrides?: CallOverrides): Promise<BigNumber>;

    activePool(overrides?: CallOverrides): Promise<string>;

    addNewCollateral(
      _collateral: PromiseOrValue<string>,
      _debtTokenGasCompensation: PromiseOrValue<BigNumberish>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    adminContract(overrides?: CallOverrides): Promise<string>;

    authorizeUpgrade(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    borrowerOperations(overrides?: CallOverrides): Promise<string>;

    collSurplusPool(overrides?: CallOverrides): Promise<string>;

    communityIssuance(overrides?: CallOverrides): Promise<string>;

    debtToken(overrides?: CallOverrides): Promise<string>;

    defaultPool(overrides?: CallOverrides): Promise<string>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    gasPoolAddress(overrides?: CallOverrides): Promise<string>;

    getBorrowingFee(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getCcr(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getDebtTokenGasCompensation(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getDecimals(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getIndex(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getIndices(_colls: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<BigNumber[]>;

    getIsActive(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    getMcr(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getMinNetDebt(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getMintCap(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getPercentDivisor(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRedemptionBlockTimestamp(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRedemptionFeeFloor(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalAssetDebt(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getValidCollateral(overrides?: CallOverrides): Promise<string[]>;

    grvtStaking(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isSetupInitialized(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBorrowingFee(
      _collateral: PromiseOrValue<string>,
      borrowingFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setCCR(
      _collateral: PromiseOrValue<string>,
      newCCR: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setCollateralParameters(
      _collateral: PromiseOrValue<string>,
      borrowingFee: PromiseOrValue<BigNumberish>,
      ccr: PromiseOrValue<BigNumberish>,
      mcr: PromiseOrValue<BigNumberish>,
      minNetDebt: PromiseOrValue<BigNumberish>,
      mintCap: PromiseOrValue<BigNumberish>,
      percentDivisor: PromiseOrValue<BigNumberish>,
      redemptionFeeFloor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setIsActive(
      _collateral: PromiseOrValue<string>,
      _active: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMCR(
      _collateral: PromiseOrValue<string>,
      newMCR: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMinNetDebt(
      _collateral: PromiseOrValue<string>,
      minNetDebt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMintCap(
      _collateral: PromiseOrValue<string>,
      mintCap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setPercentDivisor(
      _collateral: PromiseOrValue<string>,
      percentDivisor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setRedemptionBlockTimestamp(
      _collateral: PromiseOrValue<string>,
      _blockTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setRedemptionFeeFloor(
      _collateral: PromiseOrValue<string>,
      redemptionFeeFloor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setSetupIsInitialized(overrides?: CallOverrides): Promise<void>;

    sortedVessels(overrides?: CallOverrides): Promise<string>;

    stabilityPool(overrides?: CallOverrides): Promise<string>;

    timelockAddress(overrides?: CallOverrides): Promise<string>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;

    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    validCollateral(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    vesselManager(overrides?: CallOverrides): Promise<string>;

    vesselManagerOperations(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'AdminChanged(address,address)'(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
    AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;

    'BeaconUpgraded(address)'(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;

    'BorrowingFeeChanged(uint256,uint256)'(
      oldBorrowingFee?: null,
      newBorrowingFee?: null,
    ): BorrowingFeeChangedEventFilter;
    BorrowingFeeChanged(oldBorrowingFee?: null, newBorrowingFee?: null): BorrowingFeeChangedEventFilter;

    'CCRChanged(uint256,uint256)'(oldCCR?: null, newCCR?: null): CCRChangedEventFilter;
    CCRChanged(oldCCR?: null, newCCR?: null): CCRChangedEventFilter;

    'CollateralAdded(address)'(_collateral?: null): CollateralAddedEventFilter;
    CollateralAdded(_collateral?: null): CollateralAddedEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'MCRChanged(uint256,uint256)'(oldMCR?: null, newMCR?: null): MCRChangedEventFilter;
    MCRChanged(oldMCR?: null, newMCR?: null): MCRChangedEventFilter;

    'MinNetDebtChanged(uint256,uint256)'(oldMinNet?: null, newMinNet?: null): MinNetDebtChangedEventFilter;
    MinNetDebtChanged(oldMinNet?: null, newMinNet?: null): MinNetDebtChangedEventFilter;

    'MintCapChanged(uint256,uint256)'(oldMintCap?: null, newMintCap?: null): MintCapChangedEventFilter;
    MintCapChanged(oldMintCap?: null, newMintCap?: null): MintCapChangedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'PercentDivisorChanged(uint256,uint256)'(
      oldPercentDiv?: null,
      newPercentDiv?: null,
    ): PercentDivisorChangedEventFilter;
    PercentDivisorChanged(oldPercentDiv?: null, newPercentDiv?: null): PercentDivisorChangedEventFilter;

    'RedemptionBlockTimestampChanged(address,uint256)'(
      _collateral?: null,
      _blockTimestamp?: null,
    ): RedemptionBlockTimestampChangedEventFilter;
    RedemptionBlockTimestampChanged(
      _collateral?: null,
      _blockTimestamp?: null,
    ): RedemptionBlockTimestampChangedEventFilter;

    'RedemptionFeeFloorChanged(uint256,uint256)'(
      oldRedemptionFeeFloor?: null,
      newRedemptionFeeFloor?: null,
    ): RedemptionFeeFloorChangedEventFilter;
    RedemptionFeeFloorChanged(
      oldRedemptionFeeFloor?: null,
      newRedemptionFeeFloor?: null,
    ): RedemptionFeeFloorChangedEventFilter;

    'Upgraded(address)'(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
    Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
  };

  estimateGas: {
    BORROWING_FEE_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    CCR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MCR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    MINT_CAP_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_NET_DEBT_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_DIVISOR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    REDEMPTION_BLOCK_TIMESTAMP_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    REDEMPTION_FEE_FLOOR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    _100pct(overrides?: CallOverrides): Promise<BigNumber>;

    activePool(overrides?: CallOverrides): Promise<BigNumber>;

    addNewCollateral(
      _collateral: PromiseOrValue<string>,
      _debtTokenGasCompensation: PromiseOrValue<BigNumberish>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    adminContract(overrides?: CallOverrides): Promise<BigNumber>;

    authorizeUpgrade(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    borrowerOperations(overrides?: CallOverrides): Promise<BigNumber>;

    collSurplusPool(overrides?: CallOverrides): Promise<BigNumber>;

    communityIssuance(overrides?: CallOverrides): Promise<BigNumber>;

    debtToken(overrides?: CallOverrides): Promise<BigNumber>;

    defaultPool(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    gasPoolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowingFee(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getCcr(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getDebtTokenGasCompensation(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getDecimals(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getIndex(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getIndices(_colls: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<BigNumber>;

    getIsActive(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getMcr(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getMinNetDebt(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getMintCap(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getPercentDivisor(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRedemptionBlockTimestamp(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRedemptionFeeFloor(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalAssetDebt(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getValidCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    grvtStaking(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    isSetupInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setBorrowingFee(
      _collateral: PromiseOrValue<string>,
      borrowingFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setCCR(
      _collateral: PromiseOrValue<string>,
      newCCR: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setCollateralParameters(
      _collateral: PromiseOrValue<string>,
      borrowingFee: PromiseOrValue<BigNumberish>,
      ccr: PromiseOrValue<BigNumberish>,
      mcr: PromiseOrValue<BigNumberish>,
      minNetDebt: PromiseOrValue<BigNumberish>,
      mintCap: PromiseOrValue<BigNumberish>,
      percentDivisor: PromiseOrValue<BigNumberish>,
      redemptionFeeFloor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setIsActive(
      _collateral: PromiseOrValue<string>,
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMCR(
      _collateral: PromiseOrValue<string>,
      newMCR: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMinNetDebt(
      _collateral: PromiseOrValue<string>,
      minNetDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMintCap(
      _collateral: PromiseOrValue<string>,
      mintCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPercentDivisor(
      _collateral: PromiseOrValue<string>,
      percentDivisor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRedemptionBlockTimestamp(
      _collateral: PromiseOrValue<string>,
      _blockTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRedemptionFeeFloor(
      _collateral: PromiseOrValue<string>,
      redemptionFeeFloor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSetupIsInitialized(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    sortedVessels(overrides?: CallOverrides): Promise<BigNumber>;

    stabilityPool(overrides?: CallOverrides): Promise<BigNumber>;

    timelockAddress(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    validCollateral(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    vesselManager(overrides?: CallOverrides): Promise<BigNumber>;

    vesselManagerOperations(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BORROWING_FEE_DEFAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CCR_DEFAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MCR_DEFAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINT_CAP_DEFAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_NET_DEBT_DEFAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERCENT_DIVISOR_DEFAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REDEMPTION_BLOCK_TIMESTAMP_DEFAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REDEMPTION_FEE_FLOOR_DEFAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _100pct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addNewCollateral(
      _collateral: PromiseOrValue<string>,
      _debtTokenGasCompensation: PromiseOrValue<BigNumberish>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    adminContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authorizeUpgrade(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    borrowerOperations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collSurplusPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    communityIssuance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasPoolAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBorrowingFee(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCcr(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDebtTokenGasCompensation(
      _collateral: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDecimals(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIndex(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIndices(_colls: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIsActive(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMcr(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinNetDebt(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMintCap(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPercentDivisor(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRedemptionBlockTimestamp(
      _collateral: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRedemptionFeeFloor(
      _collateral: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTotalAssetDebt(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getValidCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grvtStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    isSetupInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setBorrowingFee(
      _collateral: PromiseOrValue<string>,
      borrowingFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setCCR(
      _collateral: PromiseOrValue<string>,
      newCCR: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setCollateralParameters(
      _collateral: PromiseOrValue<string>,
      borrowingFee: PromiseOrValue<BigNumberish>,
      ccr: PromiseOrValue<BigNumberish>,
      mcr: PromiseOrValue<BigNumberish>,
      minNetDebt: PromiseOrValue<BigNumberish>,
      mintCap: PromiseOrValue<BigNumberish>,
      percentDivisor: PromiseOrValue<BigNumberish>,
      redemptionFeeFloor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setIsActive(
      _collateral: PromiseOrValue<string>,
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMCR(
      _collateral: PromiseOrValue<string>,
      newMCR: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMinNetDebt(
      _collateral: PromiseOrValue<string>,
      minNetDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMintCap(
      _collateral: PromiseOrValue<string>,
      mintCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPercentDivisor(
      _collateral: PromiseOrValue<string>,
      percentDivisor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRedemptionBlockTimestamp(
      _collateral: PromiseOrValue<string>,
      _blockTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRedemptionFeeFloor(
      _collateral: PromiseOrValue<string>,
      redemptionFeeFloor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSetupIsInitialized(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    sortedVessels(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stabilityPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelockAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    validCollateral(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vesselManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vesselManagerOperations(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
