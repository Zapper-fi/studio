/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface StabilityPoolInterface extends utils.Interface {
  functions: {
    'DECIMAL_PRECISION()': FunctionFragment;
    'NAME()': FunctionFragment;
    'P()': FunctionFragment;
    'S(address,address)': FunctionFragment;
    'SCALE_FACTOR()': FunctionFragment;
    'activePool()': FunctionFragment;
    'addCollateralType(address)': FunctionFragment;
    'adminContract()': FunctionFragment;
    'authorizeUpgrade(address)': FunctionFragment;
    'borrowerOperations()': FunctionFragment;
    'collSurplusPool()': FunctionFragment;
    'communityIssuance()': FunctionFragment;
    'currentEpoch()': FunctionFragment;
    'currentScale()': FunctionFragment;
    'debtToken()': FunctionFragment;
    'defaultPool()': FunctionFragment;
    'depositSnapshots(address)': FunctionFragment;
    'deposits(address)': FunctionFragment;
    'epochToScaleToG(uint128,uint128)': FunctionFragment;
    'epochToScaleToSum(address,uint128,uint128)': FunctionFragment;
    'feeCollector()': FunctionFragment;
    'gasPoolAddress()': FunctionFragment;
    'getAllCollateral()': FunctionFragment;
    'getCollateral(address)': FunctionFragment;
    'getCompoundedDebtTokenDeposits(address)': FunctionFragment;
    'getDepositorGRVTGain(address)': FunctionFragment;
    'getDepositorGains(address,address[])': FunctionFragment;
    'getEntireSystemColl(address)': FunctionFragment;
    'getEntireSystemDebt(address)': FunctionFragment;
    'getTotalDebtTokenDeposits()': FunctionFragment;
    'grvtStaking()': FunctionFragment;
    'initialize()': FunctionFragment;
    'lastAssetError_Offset(uint256)': FunctionFragment;
    'lastDebtTokenLossError_Offset()': FunctionFragment;
    'lastGRVTError()': FunctionFragment;
    'offset(uint256,address,uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'priceFeed()': FunctionFragment;
    'provideToSP(uint256,address[])': FunctionFragment;
    'proxiableUUID()': FunctionFragment;
    'receivedERC20(address,uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'sortedVessels()': FunctionFragment;
    'stabilityPool()': FunctionFragment;
    'timelockAddress()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'treasuryAddress()': FunctionFragment;
    'upgradeTo(address)': FunctionFragment;
    'upgradeToAndCall(address,bytes)': FunctionFragment;
    'vesselManager()': FunctionFragment;
    'vesselManagerOperations()': FunctionFragment;
    'withdrawFromSP(uint256,address[])': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DECIMAL_PRECISION'
      | 'NAME'
      | 'P'
      | 'S'
      | 'SCALE_FACTOR'
      | 'activePool'
      | 'addCollateralType'
      | 'adminContract'
      | 'authorizeUpgrade'
      | 'borrowerOperations'
      | 'collSurplusPool'
      | 'communityIssuance'
      | 'currentEpoch'
      | 'currentScale'
      | 'debtToken'
      | 'defaultPool'
      | 'depositSnapshots'
      | 'deposits'
      | 'epochToScaleToG'
      | 'epochToScaleToSum'
      | 'feeCollector'
      | 'gasPoolAddress'
      | 'getAllCollateral'
      | 'getCollateral'
      | 'getCompoundedDebtTokenDeposits'
      | 'getDepositorGRVTGain'
      | 'getDepositorGains'
      | 'getEntireSystemColl'
      | 'getEntireSystemDebt'
      | 'getTotalDebtTokenDeposits'
      | 'grvtStaking'
      | 'initialize'
      | 'lastAssetError_Offset'
      | 'lastDebtTokenLossError_Offset'
      | 'lastGRVTError'
      | 'offset'
      | 'owner'
      | 'priceFeed'
      | 'provideToSP'
      | 'proxiableUUID'
      | 'receivedERC20'
      | 'renounceOwnership'
      | 'sortedVessels'
      | 'stabilityPool'
      | 'timelockAddress'
      | 'transferOwnership'
      | 'treasuryAddress'
      | 'upgradeTo'
      | 'upgradeToAndCall'
      | 'vesselManager'
      | 'vesselManagerOperations'
      | 'withdrawFromSP',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DECIMAL_PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'NAME', values?: undefined): string;
  encodeFunctionData(functionFragment: 'P', values?: undefined): string;
  encodeFunctionData(functionFragment: 'S', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'SCALE_FACTOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'activePool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addCollateralType', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'adminContract', values?: undefined): string;
  encodeFunctionData(functionFragment: 'authorizeUpgrade', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'borrowerOperations', values?: undefined): string;
  encodeFunctionData(functionFragment: 'collSurplusPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'communityIssuance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'currentEpoch', values?: undefined): string;
  encodeFunctionData(functionFragment: 'currentScale', values?: undefined): string;
  encodeFunctionData(functionFragment: 'debtToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'defaultPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'depositSnapshots', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'deposits', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'epochToScaleToG',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'epochToScaleToSum',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'feeCollector', values?: undefined): string;
  encodeFunctionData(functionFragment: 'gasPoolAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAllCollateral', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getCollateral', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getCompoundedDebtTokenDeposits', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getDepositorGRVTGain', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getDepositorGains',
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(functionFragment: 'getEntireSystemColl', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getEntireSystemDebt', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getTotalDebtTokenDeposits', values?: undefined): string;
  encodeFunctionData(functionFragment: 'grvtStaking', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastAssetError_Offset', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'lastDebtTokenLossError_Offset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastGRVTError', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'offset',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'priceFeed', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'provideToSP',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(functionFragment: 'proxiableUUID', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'receivedERC20',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'sortedVessels', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stabilityPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'timelockAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'treasuryAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'upgradeTo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'vesselManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vesselManagerOperations', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdrawFromSP',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]],
  ): string;

  decodeFunctionResult(functionFragment: 'DECIMAL_PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'NAME', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'P', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'S', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SCALE_FACTOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addCollateralType', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adminContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'authorizeUpgrade', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowerOperations', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collSurplusPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'communityIssuance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentScale', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'debtToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'defaultPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositSnapshots', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'epochToScaleToG', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'epochToScaleToSum', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeCollector', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gasPoolAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCompoundedDebtTokenDeposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDepositorGRVTGain', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDepositorGains', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEntireSystemColl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEntireSystemDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalDebtTokenDeposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grvtStaking', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastAssetError_Offset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastDebtTokenLossError_Offset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastGRVTError', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'offset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'priceFeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'provideToSP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proxiableUUID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'receivedERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sortedVessels', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stabilityPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timelockAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasuryAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeToAndCall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vesselManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vesselManagerOperations', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawFromSP', data: BytesLike): Result;

  events: {
    'AdminChanged(address,address)': EventFragment;
    'AssetSent(address,address,uint256)': EventFragment;
    'BeaconUpgraded(address)': EventFragment;
    'CommunityIssuanceAddressChanged(address)': EventFragment;
    'DepositSnapshotUpdated(address,uint256,uint256)': EventFragment;
    'EpochUpdated(uint128)': EventFragment;
    'GRVTPaidToDepositor(address,uint256)': EventFragment;
    'G_Updated(uint256,uint128,uint128)': EventFragment;
    'GainsWithdrawn(address,address[],uint256[],uint256)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'P_Updated(uint256)': EventFragment;
    'S_Updated(address,uint256,uint128,uint128)': EventFragment;
    'ScaleUpdated(uint128)': EventFragment;
    'StabilityPoolAssetBalanceUpdated(address,uint256)': EventFragment;
    'StabilityPoolDebtTokenBalanceUpdated(uint256)': EventFragment;
    'StakeChanged(uint256,address)': EventFragment;
    'SystemSnapshotUpdated(uint256,uint256)': EventFragment;
    'Upgraded(address)': EventFragment;
    'UserDepositChanged(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AssetSent'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CommunityIssuanceAddressChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositSnapshotUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EpochUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GRVTPaidToDepositor'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'G_Updated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GainsWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'P_Updated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'S_Updated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ScaleUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StabilityPoolAssetBalanceUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StabilityPoolDebtTokenBalanceUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StakeChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SystemSnapshotUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UserDepositChanged'): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<[string, string], AdminChangedEventObject>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface AssetSentEventObject {
  _asset: string;
  _to: string;
  _amount: BigNumber;
}
export type AssetSentEvent = TypedEvent<[string, string, BigNumber], AssetSentEventObject>;

export type AssetSentEventFilter = TypedEventFilter<AssetSentEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<[string], BeaconUpgradedEventObject>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface CommunityIssuanceAddressChangedEventObject {
  newAddress: string;
}
export type CommunityIssuanceAddressChangedEvent = TypedEvent<[string], CommunityIssuanceAddressChangedEventObject>;

export type CommunityIssuanceAddressChangedEventFilter = TypedEventFilter<CommunityIssuanceAddressChangedEvent>;

export interface DepositSnapshotUpdatedEventObject {
  _depositor: string;
  _P: BigNumber;
  _G: BigNumber;
}
export type DepositSnapshotUpdatedEvent = TypedEvent<[string, BigNumber, BigNumber], DepositSnapshotUpdatedEventObject>;

export type DepositSnapshotUpdatedEventFilter = TypedEventFilter<DepositSnapshotUpdatedEvent>;

export interface EpochUpdatedEventObject {
  _currentEpoch: BigNumber;
}
export type EpochUpdatedEvent = TypedEvent<[BigNumber], EpochUpdatedEventObject>;

export type EpochUpdatedEventFilter = TypedEventFilter<EpochUpdatedEvent>;

export interface GRVTPaidToDepositorEventObject {
  _depositor: string;
  _GRVT: BigNumber;
}
export type GRVTPaidToDepositorEvent = TypedEvent<[string, BigNumber], GRVTPaidToDepositorEventObject>;

export type GRVTPaidToDepositorEventFilter = TypedEventFilter<GRVTPaidToDepositorEvent>;

export interface G_UpdatedEventObject {
  _G: BigNumber;
  _epoch: BigNumber;
  _scale: BigNumber;
}
export type G_UpdatedEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], G_UpdatedEventObject>;

export type G_UpdatedEventFilter = TypedEventFilter<G_UpdatedEvent>;

export interface GainsWithdrawnEventObject {
  _depositor: string;
  _collaterals: string[];
  _amounts: BigNumber[];
  _debtTokenLoss: BigNumber;
}
export type GainsWithdrawnEvent = TypedEvent<[string, string[], BigNumber[], BigNumber], GainsWithdrawnEventObject>;

export type GainsWithdrawnEventFilter = TypedEventFilter<GainsWithdrawnEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface P_UpdatedEventObject {
  _P: BigNumber;
}
export type P_UpdatedEvent = TypedEvent<[BigNumber], P_UpdatedEventObject>;

export type P_UpdatedEventFilter = TypedEventFilter<P_UpdatedEvent>;

export interface S_UpdatedEventObject {
  _asset: string;
  _S: BigNumber;
  _epoch: BigNumber;
  _scale: BigNumber;
}
export type S_UpdatedEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], S_UpdatedEventObject>;

export type S_UpdatedEventFilter = TypedEventFilter<S_UpdatedEvent>;

export interface ScaleUpdatedEventObject {
  _currentScale: BigNumber;
}
export type ScaleUpdatedEvent = TypedEvent<[BigNumber], ScaleUpdatedEventObject>;

export type ScaleUpdatedEventFilter = TypedEventFilter<ScaleUpdatedEvent>;

export interface StabilityPoolAssetBalanceUpdatedEventObject {
  _asset: string;
  _newBalance: BigNumber;
}
export type StabilityPoolAssetBalanceUpdatedEvent = TypedEvent<
  [string, BigNumber],
  StabilityPoolAssetBalanceUpdatedEventObject
>;

export type StabilityPoolAssetBalanceUpdatedEventFilter = TypedEventFilter<StabilityPoolAssetBalanceUpdatedEvent>;

export interface StabilityPoolDebtTokenBalanceUpdatedEventObject {
  _newBalance: BigNumber;
}
export type StabilityPoolDebtTokenBalanceUpdatedEvent = TypedEvent<
  [BigNumber],
  StabilityPoolDebtTokenBalanceUpdatedEventObject
>;

export type StabilityPoolDebtTokenBalanceUpdatedEventFilter =
  TypedEventFilter<StabilityPoolDebtTokenBalanceUpdatedEvent>;

export interface StakeChangedEventObject {
  _newSystemStake: BigNumber;
  _depositor: string;
}
export type StakeChangedEvent = TypedEvent<[BigNumber, string], StakeChangedEventObject>;

export type StakeChangedEventFilter = TypedEventFilter<StakeChangedEvent>;

export interface SystemSnapshotUpdatedEventObject {
  _P: BigNumber;
  _G: BigNumber;
}
export type SystemSnapshotUpdatedEvent = TypedEvent<[BigNumber, BigNumber], SystemSnapshotUpdatedEventObject>;

export type SystemSnapshotUpdatedEventFilter = TypedEventFilter<SystemSnapshotUpdatedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface UserDepositChangedEventObject {
  _depositor: string;
  _newDeposit: BigNumber;
}
export type UserDepositChangedEvent = TypedEvent<[string, BigNumber], UserDepositChangedEventObject>;

export type UserDepositChangedEventFilter = TypedEventFilter<UserDepositChangedEvent>;

export interface StabilityPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StabilityPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    P(overrides?: CallOverrides): Promise<[BigNumber]>;

    S(
      _depositor: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    SCALE_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    activePool(overrides?: CallOverrides): Promise<[string]>;

    addCollateralType(
      _collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    adminContract(overrides?: CallOverrides): Promise<[string]>;

    authorizeUpgrade(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    borrowerOperations(overrides?: CallOverrides): Promise<[string]>;

    collSurplusPool(overrides?: CallOverrides): Promise<[string]>;

    communityIssuance(overrides?: CallOverrides): Promise<[string]>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentScale(overrides?: CallOverrides): Promise<[BigNumber]>;

    debtToken(overrides?: CallOverrides): Promise<[string]>;

    defaultPool(overrides?: CallOverrides): Promise<[string]>;

    depositSnapshots(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        P: BigNumber;
        G: BigNumber;
        scale: BigNumber;
        epoch: BigNumber;
      }
    >;

    deposits(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    epochToScaleToG(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    epochToScaleToSum(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    gasPoolAddress(overrides?: CallOverrides): Promise<[string]>;

    getAllCollateral(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

    getCollateral(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getCompoundedDebtTokenDeposits(_depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getDepositorGRVTGain(_depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getDepositorGains(
      _depositor: PromiseOrValue<string>,
      _assets: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<[string[], BigNumber[]]>;

    getEntireSystemColl(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { entireSystemColl: BigNumber }>;

    getEntireSystemDebt(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { entireSystemDebt: BigNumber }>;

    getTotalDebtTokenDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    grvtStaking(overrides?: CallOverrides): Promise<[string]>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    lastAssetError_Offset(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    lastDebtTokenLossError_Offset(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastGRVTError(overrides?: CallOverrides): Promise<[BigNumber]>;

    offset(
      _debtToOffset: PromiseOrValue<BigNumberish>,
      _asset: PromiseOrValue<string>,
      _amountAdded: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    provideToSP(
      _amount: PromiseOrValue<BigNumberish>,
      _assets: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    receivedERC20(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    sortedVessels(overrides?: CallOverrides): Promise<[string]>;

    stabilityPool(overrides?: CallOverrides): Promise<[string]>;

    timelockAddress(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    vesselManager(overrides?: CallOverrides): Promise<[string]>;

    vesselManagerOperations(overrides?: CallOverrides): Promise<[string]>;

    withdrawFromSP(
      _amount: PromiseOrValue<BigNumberish>,
      _assets: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  NAME(overrides?: CallOverrides): Promise<string>;

  P(overrides?: CallOverrides): Promise<BigNumber>;

  S(_depositor: PromiseOrValue<string>, _asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  SCALE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  activePool(overrides?: CallOverrides): Promise<string>;

  addCollateralType(
    _collateral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  adminContract(overrides?: CallOverrides): Promise<string>;

  authorizeUpgrade(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  borrowerOperations(overrides?: CallOverrides): Promise<string>;

  collSurplusPool(overrides?: CallOverrides): Promise<string>;

  communityIssuance(overrides?: CallOverrides): Promise<string>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  currentScale(overrides?: CallOverrides): Promise<BigNumber>;

  debtToken(overrides?: CallOverrides): Promise<string>;

  defaultPool(overrides?: CallOverrides): Promise<string>;

  depositSnapshots(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      P: BigNumber;
      G: BigNumber;
      scale: BigNumber;
      epoch: BigNumber;
    }
  >;

  deposits(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  epochToScaleToG(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  epochToScaleToSum(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  gasPoolAddress(overrides?: CallOverrides): Promise<string>;

  getAllCollateral(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

  getCollateral(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getCompoundedDebtTokenDeposits(_depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getDepositorGRVTGain(_depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getDepositorGains(
    _depositor: PromiseOrValue<string>,
    _assets: PromiseOrValue<string>[],
    overrides?: CallOverrides,
  ): Promise<[string[], BigNumber[]]>;

  getEntireSystemColl(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getEntireSystemDebt(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getTotalDebtTokenDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  grvtStaking(overrides?: CallOverrides): Promise<string>;

  initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  lastAssetError_Offset(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  lastDebtTokenLossError_Offset(overrides?: CallOverrides): Promise<BigNumber>;

  lastGRVTError(overrides?: CallOverrides): Promise<BigNumber>;

  offset(
    _debtToOffset: PromiseOrValue<BigNumberish>,
    _asset: PromiseOrValue<string>,
    _amountAdded: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  provideToSP(
    _amount: PromiseOrValue<BigNumberish>,
    _assets: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  receivedERC20(
    _asset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  sortedVessels(overrides?: CallOverrides): Promise<string>;

  stabilityPool(overrides?: CallOverrides): Promise<string>;

  timelockAddress(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  vesselManager(overrides?: CallOverrides): Promise<string>;

  vesselManagerOperations(overrides?: CallOverrides): Promise<string>;

  withdrawFromSP(
    _amount: PromiseOrValue<BigNumberish>,
    _assets: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<string>;

    P(overrides?: CallOverrides): Promise<BigNumber>;

    S(
      _depositor: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    SCALE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    activePool(overrides?: CallOverrides): Promise<string>;

    addCollateralType(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    adminContract(overrides?: CallOverrides): Promise<string>;

    authorizeUpgrade(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    borrowerOperations(overrides?: CallOverrides): Promise<string>;

    collSurplusPool(overrides?: CallOverrides): Promise<string>;

    communityIssuance(overrides?: CallOverrides): Promise<string>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    currentScale(overrides?: CallOverrides): Promise<BigNumber>;

    debtToken(overrides?: CallOverrides): Promise<string>;

    defaultPool(overrides?: CallOverrides): Promise<string>;

    depositSnapshots(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        P: BigNumber;
        G: BigNumber;
        scale: BigNumber;
        epoch: BigNumber;
      }
    >;

    deposits(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    epochToScaleToG(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    epochToScaleToSum(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    gasPoolAddress(overrides?: CallOverrides): Promise<string>;

    getAllCollateral(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

    getCollateral(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getCompoundedDebtTokenDeposits(_depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getDepositorGRVTGain(_depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getDepositorGains(
      _depositor: PromiseOrValue<string>,
      _assets: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<[string[], BigNumber[]]>;

    getEntireSystemColl(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getEntireSystemDebt(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDebtTokenDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    grvtStaking(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    lastAssetError_Offset(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    lastDebtTokenLossError_Offset(overrides?: CallOverrides): Promise<BigNumber>;

    lastGRVTError(overrides?: CallOverrides): Promise<BigNumber>;

    offset(
      _debtToOffset: PromiseOrValue<BigNumberish>,
      _asset: PromiseOrValue<string>,
      _amountAdded: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    provideToSP(
      _amount: PromiseOrValue<BigNumberish>,
      _assets: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    receivedERC20(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sortedVessels(overrides?: CallOverrides): Promise<string>;

    stabilityPool(overrides?: CallOverrides): Promise<string>;

    timelockAddress(overrides?: CallOverrides): Promise<string>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;

    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    vesselManager(overrides?: CallOverrides): Promise<string>;

    vesselManagerOperations(overrides?: CallOverrides): Promise<string>;

    withdrawFromSP(
      _amount: PromiseOrValue<BigNumberish>,
      _assets: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'AdminChanged(address,address)'(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
    AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;

    'AssetSent(address,address,uint256)'(_asset?: null, _to?: null, _amount?: null): AssetSentEventFilter;
    AssetSent(_asset?: null, _to?: null, _amount?: null): AssetSentEventFilter;

    'BeaconUpgraded(address)'(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;

    'CommunityIssuanceAddressChanged(address)'(newAddress?: null): CommunityIssuanceAddressChangedEventFilter;
    CommunityIssuanceAddressChanged(newAddress?: null): CommunityIssuanceAddressChangedEventFilter;

    'DepositSnapshotUpdated(address,uint256,uint256)'(
      _depositor?: PromiseOrValue<string> | null,
      _P?: null,
      _G?: null,
    ): DepositSnapshotUpdatedEventFilter;
    DepositSnapshotUpdated(
      _depositor?: PromiseOrValue<string> | null,
      _P?: null,
      _G?: null,
    ): DepositSnapshotUpdatedEventFilter;

    'EpochUpdated(uint128)'(_currentEpoch?: null): EpochUpdatedEventFilter;
    EpochUpdated(_currentEpoch?: null): EpochUpdatedEventFilter;

    'GRVTPaidToDepositor(address,uint256)'(
      _depositor?: PromiseOrValue<string> | null,
      _GRVT?: null,
    ): GRVTPaidToDepositorEventFilter;
    GRVTPaidToDepositor(_depositor?: PromiseOrValue<string> | null, _GRVT?: null): GRVTPaidToDepositorEventFilter;

    'G_Updated(uint256,uint128,uint128)'(_G?: null, _epoch?: null, _scale?: null): G_UpdatedEventFilter;
    G_Updated(_G?: null, _epoch?: null, _scale?: null): G_UpdatedEventFilter;

    'GainsWithdrawn(address,address[],uint256[],uint256)'(
      _depositor?: PromiseOrValue<string> | null,
      _collaterals?: null,
      _amounts?: null,
      _debtTokenLoss?: null,
    ): GainsWithdrawnEventFilter;
    GainsWithdrawn(
      _depositor?: PromiseOrValue<string> | null,
      _collaterals?: null,
      _amounts?: null,
      _debtTokenLoss?: null,
    ): GainsWithdrawnEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'P_Updated(uint256)'(_P?: null): P_UpdatedEventFilter;
    P_Updated(_P?: null): P_UpdatedEventFilter;

    'S_Updated(address,uint256,uint128,uint128)'(
      _asset?: null,
      _S?: null,
      _epoch?: null,
      _scale?: null,
    ): S_UpdatedEventFilter;
    S_Updated(_asset?: null, _S?: null, _epoch?: null, _scale?: null): S_UpdatedEventFilter;

    'ScaleUpdated(uint128)'(_currentScale?: null): ScaleUpdatedEventFilter;
    ScaleUpdated(_currentScale?: null): ScaleUpdatedEventFilter;

    'StabilityPoolAssetBalanceUpdated(address,uint256)'(
      _asset?: null,
      _newBalance?: null,
    ): StabilityPoolAssetBalanceUpdatedEventFilter;
    StabilityPoolAssetBalanceUpdated(_asset?: null, _newBalance?: null): StabilityPoolAssetBalanceUpdatedEventFilter;

    'StabilityPoolDebtTokenBalanceUpdated(uint256)'(
      _newBalance?: null,
    ): StabilityPoolDebtTokenBalanceUpdatedEventFilter;
    StabilityPoolDebtTokenBalanceUpdated(_newBalance?: null): StabilityPoolDebtTokenBalanceUpdatedEventFilter;

    'StakeChanged(uint256,address)'(_newSystemStake?: null, _depositor?: null): StakeChangedEventFilter;
    StakeChanged(_newSystemStake?: null, _depositor?: null): StakeChangedEventFilter;

    'SystemSnapshotUpdated(uint256,uint256)'(_P?: null, _G?: null): SystemSnapshotUpdatedEventFilter;
    SystemSnapshotUpdated(_P?: null, _G?: null): SystemSnapshotUpdatedEventFilter;

    'Upgraded(address)'(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
    Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;

    'UserDepositChanged(address,uint256)'(
      _depositor?: PromiseOrValue<string> | null,
      _newDeposit?: null,
    ): UserDepositChangedEventFilter;
    UserDepositChanged(_depositor?: PromiseOrValue<string> | null, _newDeposit?: null): UserDepositChangedEventFilter;
  };

  estimateGas: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    P(overrides?: CallOverrides): Promise<BigNumber>;

    S(
      _depositor: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    SCALE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    activePool(overrides?: CallOverrides): Promise<BigNumber>;

    addCollateralType(
      _collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    adminContract(overrides?: CallOverrides): Promise<BigNumber>;

    authorizeUpgrade(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    borrowerOperations(overrides?: CallOverrides): Promise<BigNumber>;

    collSurplusPool(overrides?: CallOverrides): Promise<BigNumber>;

    communityIssuance(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    currentScale(overrides?: CallOverrides): Promise<BigNumber>;

    debtToken(overrides?: CallOverrides): Promise<BigNumber>;

    defaultPool(overrides?: CallOverrides): Promise<BigNumber>;

    depositSnapshots(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    deposits(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    epochToScaleToG(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    epochToScaleToSum(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    gasPoolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getAllCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateral(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getCompoundedDebtTokenDeposits(_depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getDepositorGRVTGain(_depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getDepositorGains(
      _depositor: PromiseOrValue<string>,
      _assets: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getEntireSystemColl(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getEntireSystemDebt(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDebtTokenDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    grvtStaking(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    lastAssetError_Offset(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    lastDebtTokenLossError_Offset(overrides?: CallOverrides): Promise<BigNumber>;

    lastGRVTError(overrides?: CallOverrides): Promise<BigNumber>;

    offset(
      _debtToOffset: PromiseOrValue<BigNumberish>,
      _asset: PromiseOrValue<string>,
      _amountAdded: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    provideToSP(
      _amount: PromiseOrValue<BigNumberish>,
      _assets: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    receivedERC20(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    sortedVessels(overrides?: CallOverrides): Promise<BigNumber>;

    stabilityPool(overrides?: CallOverrides): Promise<BigNumber>;

    timelockAddress(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    vesselManager(overrides?: CallOverrides): Promise<BigNumber>;

    vesselManagerOperations(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFromSP(
      _amount: PromiseOrValue<BigNumberish>,
      _assets: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    P(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    S(
      _depositor: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    SCALE_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addCollateralType(
      _collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    adminContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authorizeUpgrade(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    borrowerOperations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collSurplusPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    communityIssuance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentScale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositSnapshots(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposits(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochToScaleToG(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    epochToScaleToSum(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasPoolAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollateral(_collateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCompoundedDebtTokenDeposits(
      _depositor: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDepositorGRVTGain(_depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepositorGains(
      _depositor: PromiseOrValue<string>,
      _assets: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getEntireSystemColl(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEntireSystemDebt(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalDebtTokenDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grvtStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    lastAssetError_Offset(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastDebtTokenLossError_Offset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastGRVTError(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offset(
      _debtToOffset: PromiseOrValue<BigNumberish>,
      _asset: PromiseOrValue<string>,
      _amountAdded: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    provideToSP(
      _amount: PromiseOrValue<BigNumberish>,
      _assets: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receivedERC20(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    sortedVessels(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stabilityPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelockAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    vesselManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vesselManagerOperations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFromSP(
      _amount: PromiseOrValue<BigNumberish>,
      _assets: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
