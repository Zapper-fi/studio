/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface MeshswapSinglePoolInterface extends utils.Interface {
  functions: {
    'name()': FunctionFragment;
    'initPool()': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'transferDebt(address,address,address)': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'exchangeRateStored()': FunctionFragment;
    'setReserveFactor(uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'poolTotalBorrows(address)': FunctionFragment;
    'getCash()': FunctionFragment;
    'changeMiningRate(uint256)': FunctionFragment;
    'reserveFactor()': FunctionFragment;
    'totalBorrows()': FunctionFragment;
    'singlePoolFactory()': FunctionFragment;
    'withdrawToken(uint256)': FunctionFragment;
    'version()': FunctionFragment;
    'userRewardSum(address)': FunctionFragment;
    'borrowBalancePoolTotal(address)': FunctionFragment;
    'depositToken(uint256)': FunctionFragment;
    'mining()': FunctionFragment;
    'accrualBlockNumber()': FunctionFragment;
    'borrow(address,uint256,address)': FunctionFragment;
    'reduceReserves(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'borrowBalanceStored(address,address)': FunctionFragment;
    'totalBorrowsCurrent()': FunctionFragment;
    'addReserves(uint256)': FunctionFragment;
    'setInterestRateModel(address)': FunctionFragment;
    'miningIndex()': FunctionFragment;
    'totalReserves()': FunctionFragment;
    'symbol()': FunctionFragment;
    'accrueInterest()': FunctionFragment;
    'entered()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'borrowIndex()': FunctionFragment;
    'supplyRatePerBlock()': FunctionFragment;
    'lastMined()': FunctionFragment;
    'withdrawActive()': FunctionFragment;
    'claimReward()': FunctionFragment;
    'exchangeRateCurrent()': FunctionFragment;
    'updateMiningIndex()': FunctionFragment;
    'setDepositActive(bool)': FunctionFragment;
    'withdrawETHByAmount(uint256)': FunctionFragment;
    'depositActive()': FunctionFragment;
    'withdrawTokenByAmount(uint256)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'repayToken(address,uint256,address,address)': FunctionFragment;
    'borrowBalanceInfo(address,address)': FunctionFragment;
    'borrowBalanceCurrent(address,address)': FunctionFragment;
    'userLastIndex(address)': FunctionFragment;
    '__SinglePool_init(address,address,address)': FunctionFragment;
    'withdrawETH(uint256)': FunctionFragment;
    'interestRateModel()': FunctionFragment;
    'depositETH()': FunctionFragment;
    'setWithdrawActive(bool)': FunctionFragment;
    'borrowRatePerBlock()': FunctionFragment;
    'token()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'name'
      | 'initPool'
      | 'approve'
      | 'transferDebt'
      | 'totalSupply'
      | 'exchangeRateStored'
      | 'setReserveFactor'
      | 'transferFrom'
      | 'decimals'
      | 'poolTotalBorrows'
      | 'getCash'
      | 'changeMiningRate'
      | 'reserveFactor'
      | 'totalBorrows'
      | 'singlePoolFactory'
      | 'withdrawToken'
      | 'version'
      | 'userRewardSum'
      | 'borrowBalancePoolTotal'
      | 'depositToken'
      | 'mining'
      | 'accrualBlockNumber'
      | 'borrow'
      | 'reduceReserves'
      | 'balanceOf'
      | 'borrowBalanceStored'
      | 'totalBorrowsCurrent'
      | 'addReserves'
      | 'setInterestRateModel'
      | 'miningIndex'
      | 'totalReserves'
      | 'symbol'
      | 'accrueInterest'
      | 'entered'
      | 'transfer'
      | 'borrowIndex'
      | 'supplyRatePerBlock'
      | 'lastMined'
      | 'withdrawActive'
      | 'claimReward'
      | 'exchangeRateCurrent'
      | 'updateMiningIndex'
      | 'setDepositActive'
      | 'withdrawETHByAmount'
      | 'depositActive'
      | 'withdrawTokenByAmount'
      | 'allowance'
      | 'repayToken'
      | 'borrowBalanceInfo'
      | 'borrowBalanceCurrent'
      | 'userLastIndex'
      | '__SinglePool_init'
      | 'withdrawETH'
      | 'interestRateModel'
      | 'depositETH'
      | 'setWithdrawActive'
      | 'borrowRatePerBlock'
      | 'token',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initPool', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferDebt',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'exchangeRateStored', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setReserveFactor', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolTotalBorrows', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getCash', values?: undefined): string;
  encodeFunctionData(functionFragment: 'changeMiningRate', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'reserveFactor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalBorrows', values?: undefined): string;
  encodeFunctionData(functionFragment: 'singlePoolFactory', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawToken', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'version', values?: undefined): string;
  encodeFunctionData(functionFragment: 'userRewardSum', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'borrowBalancePoolTotal', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'depositToken', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'mining', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accrualBlockNumber', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'borrow',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'reduceReserves',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'borrowBalanceStored',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'totalBorrowsCurrent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addReserves', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setInterestRateModel', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'miningIndex', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalReserves', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accrueInterest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'entered', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'borrowIndex', values?: undefined): string;
  encodeFunctionData(functionFragment: 'supplyRatePerBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastMined', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawActive', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'exchangeRateCurrent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateMiningIndex', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setDepositActive', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'withdrawETHByAmount', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'depositActive', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawTokenByAmount', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'repayToken',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'borrowBalanceInfo',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'borrowBalanceCurrent',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'userLastIndex', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: '__SinglePool_init',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'withdrawETH', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'interestRateModel', values?: undefined): string;
  encodeFunctionData(functionFragment: 'depositETH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setWithdrawActive', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'borrowRatePerBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exchangeRateStored', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setReserveFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolTotalBorrows', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCash', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeMiningRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reserveFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalBorrows', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'singlePoolFactory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userRewardSum', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowBalancePoolTotal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mining', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accrualBlockNumber', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reduceReserves', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowBalanceStored', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalBorrowsCurrent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addReserves', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setInterestRateModel', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'miningIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalReserves', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accrueInterest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'entered', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supplyRatePerBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastMined', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawActive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exchangeRateCurrent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMiningIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDepositActive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawETHByAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositActive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawTokenByAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowBalanceInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowBalanceCurrent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userLastIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '__SinglePool_init', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'interestRateModel', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWithdrawActive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowRatePerBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;

  events: {
    'ChangeMiningRate(uint256)': EventFragment;
    'UpdateMiningIndex(uint256,uint256)': EventFragment;
    'GiveReward(address,uint256,uint256,uint256)': EventFragment;
    'AccrueInterest(uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'Deposit(address,uint256,uint256,uint256,uint256)': EventFragment;
    'Withdraw(address,uint256,uint256,uint256,uint256)': EventFragment;
    'Borrow(address,address,uint256,uint256,uint256)': EventFragment;
    'Repay(address,address,uint256,uint256,uint256)': EventFragment;
    'TransferDebt(address,address,address,uint256,uint256,uint256,uint256)': EventFragment;
    'NewReserveFactor(uint256,uint256)': EventFragment;
    'ReservesAdded(address,uint256,uint256)': EventFragment;
    'ReservesReduced(address,uint256,uint256)': EventFragment;
    'NewMarketInterestRateModel(address,address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ChangeMiningRate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateMiningIndex'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GiveReward'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AccrueInterest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Borrow'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Repay'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferDebt'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewReserveFactor'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReservesAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReservesReduced'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewMarketInterestRateModel'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
}

export interface ChangeMiningRateEventObject {
  _mining: BigNumber;
}
export type ChangeMiningRateEvent = TypedEvent<[BigNumber], ChangeMiningRateEventObject>;

export type ChangeMiningRateEventFilter = TypedEventFilter<ChangeMiningRateEvent>;

export interface UpdateMiningIndexEventObject {
  lastMined: BigNumber;
  miningIndex: BigNumber;
}
export type UpdateMiningIndexEvent = TypedEvent<[BigNumber, BigNumber], UpdateMiningIndexEventObject>;

export type UpdateMiningIndexEventFilter = TypedEventFilter<UpdateMiningIndexEvent>;

export interface GiveRewardEventObject {
  user: string;
  amount: BigNumber;
  lastIndex: BigNumber;
  rewardSum: BigNumber;
}
export type GiveRewardEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], GiveRewardEventObject>;

export type GiveRewardEventFilter = TypedEventFilter<GiveRewardEvent>;

export interface AccrueInterestEventObject {
  cashPrior: BigNumber;
  interestAccumulated: BigNumber;
  borrowIndex: BigNumber;
  totalBorrows: BigNumber;
  totalReserves: BigNumber;
}
export type AccrueInterestEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  AccrueInterestEventObject
>;

export type AccrueInterestEventFilter = TypedEventFilter<AccrueInterestEvent>;

export interface DepositEventObject {
  user: string;
  depositAmount: BigNumber;
  depositTokens: BigNumber;
  totalAmount: BigNumber;
  totalSupply: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface WithdrawEventObject {
  user: string;
  withdrawAmount: BigNumber;
  withdrawTokens: BigNumber;
  totalAmount: BigNumber;
  totalSupply: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface BorrowEventObject {
  user: string;
  plusPoolAddress: string;
  borrowAmount: BigNumber;
  accountBorrows: BigNumber;
  totalBorrows: BigNumber;
}
export type BorrowEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber], BorrowEventObject>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface RepayEventObject {
  user: string;
  plusPoolAddress: string;
  repayAmount: BigNumber;
  accountBorrows: BigNumber;
  totalBorrows: BigNumber;
}
export type RepayEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber], RepayEventObject>;

export type RepayEventFilter = TypedEventFilter<RepayEvent>;

export interface TransferDebtEventObject {
  user: string;
  plusPoolAddress: string;
  insurance: string;
  userDebt: BigNumber;
  insuranceDebtBefore: BigNumber;
  insuranceDebt: BigNumber;
  borrowIndex: BigNumber;
}
export type TransferDebtEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  TransferDebtEventObject
>;

export type TransferDebtEventFilter = TypedEventFilter<TransferDebtEvent>;

export interface NewReserveFactorEventObject {
  oldReserveFactor: BigNumber;
  newReserveFactor: BigNumber;
}
export type NewReserveFactorEvent = TypedEvent<[BigNumber, BigNumber], NewReserveFactorEventObject>;

export type NewReserveFactorEventFilter = TypedEventFilter<NewReserveFactorEvent>;

export interface ReservesAddedEventObject {
  user: string;
  addAmount: BigNumber;
  newTotalReserves: BigNumber;
}
export type ReservesAddedEvent = TypedEvent<[string, BigNumber, BigNumber], ReservesAddedEventObject>;

export type ReservesAddedEventFilter = TypedEventFilter<ReservesAddedEvent>;

export interface ReservesReducedEventObject {
  admin: string;
  reduceAmount: BigNumber;
  newTotalReserves: BigNumber;
}
export type ReservesReducedEvent = TypedEvent<[string, BigNumber, BigNumber], ReservesReducedEventObject>;

export type ReservesReducedEventFilter = TypedEventFilter<ReservesReducedEvent>;

export interface NewMarketInterestRateModelEventObject {
  oldInterestRateModel: string;
  newInterestRateModel: string;
}
export type NewMarketInterestRateModelEvent = TypedEvent<[string, string], NewMarketInterestRateModelEventObject>;

export type NewMarketInterestRateModelEventFilter = TypedEventFilter<NewMarketInterestRateModelEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ApprovalEventObject {
  holder: string;
  spender: string;
  amount: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface MeshswapSinglePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MeshswapSinglePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    name(overrides?: CallOverrides): Promise<[string]>;

    initPool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    approve(
      _spender: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferDebt(
      user: PromiseOrValue<string>,
      plusPoolAddress: PromiseOrValue<string>,
      insurance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    exchangeRateStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    setReserveFactor(
      newReserveFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    poolTotalBorrows(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        principal: BigNumber;
        interestIndex: BigNumber;
      }
    >;

    getCash(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeMiningRate(
      _mining: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    reserveFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalBorrows(overrides?: CallOverrides): Promise<[BigNumber]>;

    singlePoolFactory(overrides?: CallOverrides): Promise<[string]>;

    withdrawToken(
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;

    userRewardSum(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowBalancePoolTotal(poolAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    depositToken(
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mining(overrides?: CallOverrides): Promise<[BigNumber]>;

    accrualBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrow(
      user: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      plusPoolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    reduceReserves(
      admin: PromiseOrValue<string>,
      reduceAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowBalanceStored(
      account: PromiseOrValue<string>,
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    totalBorrowsCurrent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    addReserves(
      addAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setInterestRateModel(
      newInterestRateModel: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    miningIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    accrueInterest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    entered(overrides?: CallOverrides): Promise<[boolean]>;

    transfer(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    borrowIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    supplyRatePerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastMined(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawActive(overrides?: CallOverrides): Promise<[boolean]>;

    claimReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    exchangeRateCurrent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    updateMiningIndex(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setDepositActive(
      b: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawETHByAmount(
      withdrawTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositActive(overrides?: CallOverrides): Promise<[boolean]>;

    withdrawTokenByAmount(
      withdrawTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    repayToken(
      user: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      plusPoolAddress: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    borrowBalanceInfo(
      account: PromiseOrValue<string>,
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    borrowBalanceCurrent(
      account: PromiseOrValue<string>,
      poolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    userLastIndex(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    __SinglePool_init(
      _singlePoolFactoryAddress: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _interestRateModelAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawETH(
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    interestRateModel(overrides?: CallOverrides): Promise<[string]>;

    depositETH(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setWithdrawActive(
      b: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    borrowRatePerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;
  };

  name(overrides?: CallOverrides): Promise<string>;

  initPool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  approve(
    _spender: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferDebt(
    user: PromiseOrValue<string>,
    plusPoolAddress: PromiseOrValue<string>,
    insurance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  exchangeRateStored(overrides?: CallOverrides): Promise<BigNumber>;

  setReserveFactor(
    newReserveFactor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  poolTotalBorrows(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { principal: BigNumber; interestIndex: BigNumber }>;

  getCash(overrides?: CallOverrides): Promise<BigNumber>;

  changeMiningRate(
    _mining: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  reserveFactor(overrides?: CallOverrides): Promise<BigNumber>;

  totalBorrows(overrides?: CallOverrides): Promise<BigNumber>;

  singlePoolFactory(overrides?: CallOverrides): Promise<string>;

  withdrawToken(
    withdrawAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  userRewardSum(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  borrowBalancePoolTotal(poolAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  depositToken(
    depositAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mining(overrides?: CallOverrides): Promise<BigNumber>;

  accrualBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  borrow(
    user: PromiseOrValue<string>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    plusPoolAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  reduceReserves(
    admin: PromiseOrValue<string>,
    reduceAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  borrowBalanceStored(
    account: PromiseOrValue<string>,
    poolAddress: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  totalBorrowsCurrent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  addReserves(
    addAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setInterestRateModel(
    newInterestRateModel: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  miningIndex(overrides?: CallOverrides): Promise<BigNumber>;

  totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  accrueInterest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  entered(overrides?: CallOverrides): Promise<boolean>;

  transfer(
    _to: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  borrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

  supplyRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  lastMined(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawActive(overrides?: CallOverrides): Promise<boolean>;

  claimReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  exchangeRateCurrent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  updateMiningIndex(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setDepositActive(
    b: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawETHByAmount(
    withdrawTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositActive(overrides?: CallOverrides): Promise<boolean>;

  withdrawTokenByAmount(
    withdrawTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  allowance(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  repayToken(
    user: PromiseOrValue<string>,
    repayAmount: PromiseOrValue<BigNumberish>,
    plusPoolAddress: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  borrowBalanceInfo(
    account: PromiseOrValue<string>,
    poolAddress: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>;

  borrowBalanceCurrent(
    account: PromiseOrValue<string>,
    poolAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  userLastIndex(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  __SinglePool_init(
    _singlePoolFactoryAddress: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _interestRateModelAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawETH(
    withdrawAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  interestRateModel(overrides?: CallOverrides): Promise<string>;

  depositETH(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setWithdrawActive(
    b: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  borrowRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    name(overrides?: CallOverrides): Promise<string>;

    initPool(overrides?: CallOverrides): Promise<void>;

    approve(
      _spender: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferDebt(
      user: PromiseOrValue<string>,
      plusPoolAddress: PromiseOrValue<string>,
      insurance: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRateStored(overrides?: CallOverrides): Promise<BigNumber>;

    setReserveFactor(newReserveFactor: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    decimals(overrides?: CallOverrides): Promise<number>;

    poolTotalBorrows(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        principal: BigNumber;
        interestIndex: BigNumber;
      }
    >;

    getCash(overrides?: CallOverrides): Promise<BigNumber>;

    changeMiningRate(_mining: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    reserveFactor(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrows(overrides?: CallOverrides): Promise<BigNumber>;

    singlePoolFactory(overrides?: CallOverrides): Promise<string>;

    withdrawToken(withdrawAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;

    userRewardSum(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowBalancePoolTotal(poolAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    depositToken(depositAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    mining(overrides?: CallOverrides): Promise<BigNumber>;

    accrualBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      user: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      plusPoolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    reduceReserves(
      admin: PromiseOrValue<string>,
      reduceAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowBalanceStored(
      account: PromiseOrValue<string>,
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalBorrowsCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    addReserves(addAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    setInterestRateModel(newInterestRateModel: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    miningIndex(overrides?: CallOverrides): Promise<BigNumber>;

    totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    accrueInterest(overrides?: CallOverrides): Promise<void>;

    entered(overrides?: CallOverrides): Promise<boolean>;

    transfer(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    borrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

    supplyRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    lastMined(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawActive(overrides?: CallOverrides): Promise<boolean>;

    claimReward(overrides?: CallOverrides): Promise<void>;

    exchangeRateCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    updateMiningIndex(overrides?: CallOverrides): Promise<BigNumber>;

    setDepositActive(b: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    withdrawETHByAmount(withdrawTokens: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    depositActive(overrides?: CallOverrides): Promise<boolean>;

    withdrawTokenByAmount(withdrawTokens: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    repayToken(
      user: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      plusPoolAddress: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    borrowBalanceInfo(
      account: PromiseOrValue<string>,
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    borrowBalanceCurrent(
      account: PromiseOrValue<string>,
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    userLastIndex(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    __SinglePool_init(
      _singlePoolFactoryAddress: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _interestRateModelAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawETH(withdrawAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    interestRateModel(overrides?: CallOverrides): Promise<string>;

    depositETH(overrides?: CallOverrides): Promise<void>;

    setWithdrawActive(b: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    borrowRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'ChangeMiningRate(uint256)'(_mining?: null): ChangeMiningRateEventFilter;
    ChangeMiningRate(_mining?: null): ChangeMiningRateEventFilter;

    'UpdateMiningIndex(uint256,uint256)'(lastMined?: null, miningIndex?: null): UpdateMiningIndexEventFilter;
    UpdateMiningIndex(lastMined?: null, miningIndex?: null): UpdateMiningIndexEventFilter;

    'GiveReward(address,uint256,uint256,uint256)'(
      user?: null,
      amount?: null,
      lastIndex?: null,
      rewardSum?: null,
    ): GiveRewardEventFilter;
    GiveReward(user?: null, amount?: null, lastIndex?: null, rewardSum?: null): GiveRewardEventFilter;

    'AccrueInterest(uint256,uint256,uint256,uint256,uint256)'(
      cashPrior?: null,
      interestAccumulated?: null,
      borrowIndex?: null,
      totalBorrows?: null,
      totalReserves?: null,
    ): AccrueInterestEventFilter;
    AccrueInterest(
      cashPrior?: null,
      interestAccumulated?: null,
      borrowIndex?: null,
      totalBorrows?: null,
      totalReserves?: null,
    ): AccrueInterestEventFilter;

    'Deposit(address,uint256,uint256,uint256,uint256)'(
      user?: null,
      depositAmount?: null,
      depositTokens?: null,
      totalAmount?: null,
      totalSupply?: null,
    ): DepositEventFilter;
    Deposit(
      user?: null,
      depositAmount?: null,
      depositTokens?: null,
      totalAmount?: null,
      totalSupply?: null,
    ): DepositEventFilter;

    'Withdraw(address,uint256,uint256,uint256,uint256)'(
      user?: null,
      withdrawAmount?: null,
      withdrawTokens?: null,
      totalAmount?: null,
      totalSupply?: null,
    ): WithdrawEventFilter;
    Withdraw(
      user?: null,
      withdrawAmount?: null,
      withdrawTokens?: null,
      totalAmount?: null,
      totalSupply?: null,
    ): WithdrawEventFilter;

    'Borrow(address,address,uint256,uint256,uint256)'(
      user?: null,
      plusPoolAddress?: null,
      borrowAmount?: null,
      accountBorrows?: null,
      totalBorrows?: null,
    ): BorrowEventFilter;
    Borrow(
      user?: null,
      plusPoolAddress?: null,
      borrowAmount?: null,
      accountBorrows?: null,
      totalBorrows?: null,
    ): BorrowEventFilter;

    'Repay(address,address,uint256,uint256,uint256)'(
      user?: null,
      plusPoolAddress?: null,
      repayAmount?: null,
      accountBorrows?: null,
      totalBorrows?: null,
    ): RepayEventFilter;
    Repay(
      user?: null,
      plusPoolAddress?: null,
      repayAmount?: null,
      accountBorrows?: null,
      totalBorrows?: null,
    ): RepayEventFilter;

    'TransferDebt(address,address,address,uint256,uint256,uint256,uint256)'(
      user?: null,
      plusPoolAddress?: null,
      insurance?: null,
      userDebt?: null,
      insuranceDebtBefore?: null,
      insuranceDebt?: null,
      borrowIndex?: null,
    ): TransferDebtEventFilter;
    TransferDebt(
      user?: null,
      plusPoolAddress?: null,
      insurance?: null,
      userDebt?: null,
      insuranceDebtBefore?: null,
      insuranceDebt?: null,
      borrowIndex?: null,
    ): TransferDebtEventFilter;

    'NewReserveFactor(uint256,uint256)'(oldReserveFactor?: null, newReserveFactor?: null): NewReserveFactorEventFilter;
    NewReserveFactor(oldReserveFactor?: null, newReserveFactor?: null): NewReserveFactorEventFilter;

    'ReservesAdded(address,uint256,uint256)'(
      user?: null,
      addAmount?: null,
      newTotalReserves?: null,
    ): ReservesAddedEventFilter;
    ReservesAdded(user?: null, addAmount?: null, newTotalReserves?: null): ReservesAddedEventFilter;

    'ReservesReduced(address,uint256,uint256)'(
      admin?: null,
      reduceAmount?: null,
      newTotalReserves?: null,
    ): ReservesReducedEventFilter;
    ReservesReduced(admin?: null, reduceAmount?: null, newTotalReserves?: null): ReservesReducedEventFilter;

    'NewMarketInterestRateModel(address,address)'(
      oldInterestRateModel?: null,
      newInterestRateModel?: null,
    ): NewMarketInterestRateModelEventFilter;
    NewMarketInterestRateModel(
      oldInterestRateModel?: null,
      newInterestRateModel?: null,
    ): NewMarketInterestRateModelEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
    ): TransferEventFilter;

    'Approval(address,address,uint256)'(
      holder?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      amount?: null,
    ): ApprovalEventFilter;
    Approval(
      holder?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      amount?: null,
    ): ApprovalEventFilter;
  };

  estimateGas: {
    name(overrides?: CallOverrides): Promise<BigNumber>;

    initPool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    approve(
      _spender: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferDebt(
      user: PromiseOrValue<string>,
      plusPoolAddress: PromiseOrValue<string>,
      insurance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRateStored(overrides?: CallOverrides): Promise<BigNumber>;

    setReserveFactor(
      newReserveFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    poolTotalBorrows(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getCash(overrides?: CallOverrides): Promise<BigNumber>;

    changeMiningRate(
      _mining: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    reserveFactor(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrows(overrides?: CallOverrides): Promise<BigNumber>;

    singlePoolFactory(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawToken(
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    userRewardSum(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowBalancePoolTotal(poolAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    depositToken(
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mining(overrides?: CallOverrides): Promise<BigNumber>;

    accrualBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      user: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      plusPoolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    reduceReserves(
      admin: PromiseOrValue<string>,
      reduceAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowBalanceStored(
      account: PromiseOrValue<string>,
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalBorrowsCurrent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    addReserves(
      addAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setInterestRateModel(
      newInterestRateModel: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    miningIndex(overrides?: CallOverrides): Promise<BigNumber>;

    totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    accrueInterest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    entered(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    borrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

    supplyRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    lastMined(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawActive(overrides?: CallOverrides): Promise<BigNumber>;

    claimReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    exchangeRateCurrent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    updateMiningIndex(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setDepositActive(
      b: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawETHByAmount(
      withdrawTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositActive(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawTokenByAmount(
      withdrawTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    repayToken(
      user: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      plusPoolAddress: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    borrowBalanceInfo(
      account: PromiseOrValue<string>,
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    borrowBalanceCurrent(
      account: PromiseOrValue<string>,
      poolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    userLastIndex(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    __SinglePool_init(
      _singlePoolFactoryAddress: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _interestRateModelAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawETH(
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    interestRateModel(overrides?: CallOverrides): Promise<BigNumber>;

    depositETH(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setWithdrawActive(
      b: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    borrowRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initPool(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    approve(
      _spender: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferDebt(
      user: PromiseOrValue<string>,
      plusPoolAddress: PromiseOrValue<string>,
      insurance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeRateStored(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setReserveFactor(
      newReserveFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolTotalBorrows(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeMiningRate(
      _mining: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    reserveFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBorrows(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    singlePoolFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawToken(
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userRewardSum(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowBalancePoolTotal(
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    depositToken(
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mining(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accrualBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      user: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      plusPoolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    reduceReserves(
      admin: PromiseOrValue<string>,
      reduceAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowBalanceStored(
      account: PromiseOrValue<string>,
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    totalBorrowsCurrent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    addReserves(
      addAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setInterestRateModel(
      newInterestRateModel: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    miningIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accrueInterest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    entered(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _to: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    borrowIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supplyRatePerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastMined(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    exchangeRateCurrent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    updateMiningIndex(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setDepositActive(
      b: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawETHByAmount(
      withdrawTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawTokenByAmount(
      withdrawTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    repayToken(
      user: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      plusPoolAddress: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    borrowBalanceInfo(
      account: PromiseOrValue<string>,
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    borrowBalanceCurrent(
      account: PromiseOrValue<string>,
      poolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    userLastIndex(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __SinglePool_init(
      _singlePoolFactoryAddress: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _interestRateModelAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    interestRateModel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositETH(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setWithdrawActive(
      b: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    borrowRatePerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
