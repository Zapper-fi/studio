/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface PoolInterface extends utils.Interface {
  functions: {
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'burn(int24,int24,uint128)': FunctionFragment;
    'burnRTokens(uint256,bool)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'factory()': FunctionFragment;
    'flash(address,uint256,uint256,bytes)': FunctionFragment;
    'getFeeGrowthGlobal()': FunctionFragment;
    'getLiquidityState()': FunctionFragment;
    'getPoolState()': FunctionFragment;
    'getPositions(address,int24,int24)': FunctionFragment;
    'getSecondsPerLiquidityData()': FunctionFragment;
    'getSecondsPerLiquidityInside(int24,int24)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initializedTicks(int24)': FunctionFragment;
    'maxTickLiquidity()': FunctionFragment;
    'mint(address,int24,int24,int24[2],uint128,bytes)': FunctionFragment;
    'name()': FunctionFragment;
    'swap(address,int256,bool,uint160,bytes)': FunctionFragment;
    'swapFeeUnits()': FunctionFragment;
    'symbol()': FunctionFragment;
    'tickDistance()': FunctionFragment;
    'ticks(int24)': FunctionFragment;
    'token0()': FunctionFragment;
    'token1()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'unlockPool(uint160)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'burn'
      | 'burnRTokens'
      | 'decimals'
      | 'decreaseAllowance'
      | 'factory'
      | 'flash'
      | 'getFeeGrowthGlobal'
      | 'getLiquidityState'
      | 'getPoolState'
      | 'getPositions'
      | 'getSecondsPerLiquidityData'
      | 'getSecondsPerLiquidityInside'
      | 'increaseAllowance'
      | 'initializedTicks'
      | 'maxTickLiquidity'
      | 'mint'
      | 'name'
      | 'swap'
      | 'swapFeeUnits'
      | 'symbol'
      | 'tickDistance'
      | 'ticks'
      | 'token0'
      | 'token1'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'unlockPool',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'burn',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'burnRTokens',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'flash',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'getFeeGrowthGlobal', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLiquidityState', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPoolState', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getPositions',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getSecondsPerLiquidityData', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getSecondsPerLiquidityInside',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'initializedTicks', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'maxTickLiquidity', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'swap',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'swapFeeUnits', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tickDistance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ticks', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'token0', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token1', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'unlockPool', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burnRTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'flash', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFeeGrowthGlobal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLiquidityState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPositions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSecondsPerLiquidityData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSecondsPerLiquidityInside', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initializedTicks', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxTickLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapFeeUnits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tickDistance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ticks', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token0', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token1', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unlockPool', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Burn(address,int24,int24,uint128,uint256,uint256)': EventFragment;
    'BurnRTokens(address,uint256,uint256,uint256)': EventFragment;
    'Flash(address,address,uint256,uint256,uint256,uint256)': EventFragment;
    'Initialize(uint160,int24)': EventFragment;
    'Mint(address,address,int24,int24,uint128,uint256,uint256)': EventFragment;
    'Swap(address,address,int256,int256,uint160,uint128,int24)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Burn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BurnRTokens'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Flash'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialize'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Swap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BurnEventObject {
  owner: string;
  tickLower: number;
  tickUpper: number;
  qty: BigNumber;
  qty0: BigNumber;
  qty1: BigNumber;
}
export type BurnEvent = TypedEvent<[string, number, number, BigNumber, BigNumber, BigNumber], BurnEventObject>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export interface BurnRTokensEventObject {
  owner: string;
  qty: BigNumber;
  qty0: BigNumber;
  qty1: BigNumber;
}
export type BurnRTokensEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], BurnRTokensEventObject>;

export type BurnRTokensEventFilter = TypedEventFilter<BurnRTokensEvent>;

export interface FlashEventObject {
  sender: string;
  recipient: string;
  qty0: BigNumber;
  qty1: BigNumber;
  paid0: BigNumber;
  paid1: BigNumber;
}
export type FlashEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber, BigNumber], FlashEventObject>;

export type FlashEventFilter = TypedEventFilter<FlashEvent>;

export interface InitializeEventObject {
  sqrtP: BigNumber;
  tick: number;
}
export type InitializeEvent = TypedEvent<[BigNumber, number], InitializeEventObject>;

export type InitializeEventFilter = TypedEventFilter<InitializeEvent>;

export interface MintEventObject {
  sender: string;
  owner: string;
  tickLower: number;
  tickUpper: number;
  qty: BigNumber;
  qty0: BigNumber;
  qty1: BigNumber;
}
export type MintEvent = TypedEvent<[string, string, number, number, BigNumber, BigNumber, BigNumber], MintEventObject>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface SwapEventObject {
  sender: string;
  recipient: string;
  deltaQty0: BigNumber;
  deltaQty1: BigNumber;
  sqrtP: BigNumber;
  liquidity: BigNumber;
  currentTick: number;
}
export type SwapEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, number],
  SwapEventObject
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Pool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      qty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    burnRTokens(
      _qty: PromiseOrValue<BigNumberish>,
      isLogicalBurn: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    flash(
      recipient: PromiseOrValue<string>,
      qty0: PromiseOrValue<BigNumberish>,
      qty1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getFeeGrowthGlobal(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLiquidityState(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        baseL: BigNumber;
        reinvestL: BigNumber;
        reinvestLLast: BigNumber;
      }
    >;

    getPoolState(overrides?: CallOverrides): Promise<
      [BigNumber, number, number, boolean] & {
        sqrtP: BigNumber;
        currentTick: number;
        nearestCurrentTick: number;
        locked: boolean;
      }
    >;

    getPositions(
      owner: PromiseOrValue<string>,
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        liquidity: BigNumber;
        feeGrowthInsideLast: BigNumber;
      }
    >;

    getSecondsPerLiquidityData(overrides?: CallOverrides): Promise<
      [BigNumber, number] & {
        secondsPerLiquidityGlobal: BigNumber;
        lastUpdateTime: number;
      }
    >;

    getSecondsPerLiquidityInside(
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { secondsPerLiquidityInside: BigNumber }>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initializedTicks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[number, number] & { previous: number; next: number }>;

    maxTickLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      recipient: PromiseOrValue<string>,
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      ticksPrevious: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      qty: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    swap(
      recipient: PromiseOrValue<string>,
      swapQty: PromiseOrValue<BigNumberish>,
      isToken0: PromiseOrValue<boolean>,
      limitSqrtP: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swapFeeUnits(overrides?: CallOverrides): Promise<[number]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tickDistance(overrides?: CallOverrides): Promise<[number]>;

    ticks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidityGross: BigNumber;
        liquidityNet: BigNumber;
        feeGrowthOutside: BigNumber;
        secondsPerLiquidityOutside: BigNumber;
      }
    >;

    token0(overrides?: CallOverrides): Promise<[string]>;

    token1(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unlockPool(
      initialSqrtP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    tickLower: PromiseOrValue<BigNumberish>,
    tickUpper: PromiseOrValue<BigNumberish>,
    qty: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  burnRTokens(
    _qty: PromiseOrValue<BigNumberish>,
    isLogicalBurn: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  flash(
    recipient: PromiseOrValue<string>,
    qty0: PromiseOrValue<BigNumberish>,
    qty1: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getFeeGrowthGlobal(overrides?: CallOverrides): Promise<BigNumber>;

  getLiquidityState(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      baseL: BigNumber;
      reinvestL: BigNumber;
      reinvestLLast: BigNumber;
    }
  >;

  getPoolState(overrides?: CallOverrides): Promise<
    [BigNumber, number, number, boolean] & {
      sqrtP: BigNumber;
      currentTick: number;
      nearestCurrentTick: number;
      locked: boolean;
    }
  >;

  getPositions(
    owner: PromiseOrValue<string>,
    tickLower: PromiseOrValue<BigNumberish>,
    tickUpper: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      liquidity: BigNumber;
      feeGrowthInsideLast: BigNumber;
    }
  >;

  getSecondsPerLiquidityData(overrides?: CallOverrides): Promise<
    [BigNumber, number] & {
      secondsPerLiquidityGlobal: BigNumber;
      lastUpdateTime: number;
    }
  >;

  getSecondsPerLiquidityInside(
    tickLower: PromiseOrValue<BigNumberish>,
    tickUpper: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initializedTicks(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[number, number] & { previous: number; next: number }>;

  maxTickLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    recipient: PromiseOrValue<string>,
    tickLower: PromiseOrValue<BigNumberish>,
    tickUpper: PromiseOrValue<BigNumberish>,
    ticksPrevious: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    qty: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  swap(
    recipient: PromiseOrValue<string>,
    swapQty: PromiseOrValue<BigNumberish>,
    isToken0: PromiseOrValue<boolean>,
    limitSqrtP: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swapFeeUnits(overrides?: CallOverrides): Promise<number>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tickDistance(overrides?: CallOverrides): Promise<number>;

  ticks(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      liquidityGross: BigNumber;
      liquidityNet: BigNumber;
      feeGrowthOutside: BigNumber;
      secondsPerLiquidityOutside: BigNumber;
    }
  >;

  token0(overrides?: CallOverrides): Promise<string>;

  token1(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unlockPool(
    initialSqrtP: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      qty: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        qty0: BigNumber;
        qty1: BigNumber;
        feeGrowthInsideLast: BigNumber;
      }
    >;

    burnRTokens(
      _qty: PromiseOrValue<BigNumberish>,
      isLogicalBurn: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { qty0: BigNumber; qty1: BigNumber }>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    factory(overrides?: CallOverrides): Promise<string>;

    flash(
      recipient: PromiseOrValue<string>,
      qty0: PromiseOrValue<BigNumberish>,
      qty1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getFeeGrowthGlobal(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityState(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        baseL: BigNumber;
        reinvestL: BigNumber;
        reinvestLLast: BigNumber;
      }
    >;

    getPoolState(overrides?: CallOverrides): Promise<
      [BigNumber, number, number, boolean] & {
        sqrtP: BigNumber;
        currentTick: number;
        nearestCurrentTick: number;
        locked: boolean;
      }
    >;

    getPositions(
      owner: PromiseOrValue<string>,
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        liquidity: BigNumber;
        feeGrowthInsideLast: BigNumber;
      }
    >;

    getSecondsPerLiquidityData(overrides?: CallOverrides): Promise<
      [BigNumber, number] & {
        secondsPerLiquidityGlobal: BigNumber;
        lastUpdateTime: number;
      }
    >;

    getSecondsPerLiquidityInside(
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    initializedTicks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[number, number] & { previous: number; next: number }>;

    maxTickLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      recipient: PromiseOrValue<string>,
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      ticksPrevious: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      qty: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        qty0: BigNumber;
        qty1: BigNumber;
        feeGrowthInsideLast: BigNumber;
      }
    >;

    name(overrides?: CallOverrides): Promise<string>;

    swap(
      recipient: PromiseOrValue<string>,
      swapQty: PromiseOrValue<BigNumberish>,
      isToken0: PromiseOrValue<boolean>,
      limitSqrtP: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { deltaQty0: BigNumber; deltaQty1: BigNumber }>;

    swapFeeUnits(overrides?: CallOverrides): Promise<number>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tickDistance(overrides?: CallOverrides): Promise<number>;

    ticks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidityGross: BigNumber;
        liquidityNet: BigNumber;
        feeGrowthOutside: BigNumber;
        secondsPerLiquidityOutside: BigNumber;
      }
    >;

    token0(overrides?: CallOverrides): Promise<string>;

    token1(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    unlockPool(
      initialSqrtP: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { qty0: BigNumber; qty1: BigNumber }>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'Burn(address,int24,int24,uint128,uint256,uint256)'(
      owner?: PromiseOrValue<string> | null,
      tickLower?: PromiseOrValue<BigNumberish> | null,
      tickUpper?: PromiseOrValue<BigNumberish> | null,
      qty?: null,
      qty0?: null,
      qty1?: null,
    ): BurnEventFilter;
    Burn(
      owner?: PromiseOrValue<string> | null,
      tickLower?: PromiseOrValue<BigNumberish> | null,
      tickUpper?: PromiseOrValue<BigNumberish> | null,
      qty?: null,
      qty0?: null,
      qty1?: null,
    ): BurnEventFilter;

    'BurnRTokens(address,uint256,uint256,uint256)'(
      owner?: PromiseOrValue<string> | null,
      qty?: null,
      qty0?: null,
      qty1?: null,
    ): BurnRTokensEventFilter;
    BurnRTokens(owner?: PromiseOrValue<string> | null, qty?: null, qty0?: null, qty1?: null): BurnRTokensEventFilter;

    'Flash(address,address,uint256,uint256,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      qty0?: null,
      qty1?: null,
      paid0?: null,
      paid1?: null,
    ): FlashEventFilter;
    Flash(
      sender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      qty0?: null,
      qty1?: null,
      paid0?: null,
      paid1?: null,
    ): FlashEventFilter;

    'Initialize(uint160,int24)'(sqrtP?: null, tick?: null): InitializeEventFilter;
    Initialize(sqrtP?: null, tick?: null): InitializeEventFilter;

    'Mint(address,address,int24,int24,uint128,uint256,uint256)'(
      sender?: null,
      owner?: PromiseOrValue<string> | null,
      tickLower?: PromiseOrValue<BigNumberish> | null,
      tickUpper?: PromiseOrValue<BigNumberish> | null,
      qty?: null,
      qty0?: null,
      qty1?: null,
    ): MintEventFilter;
    Mint(
      sender?: null,
      owner?: PromiseOrValue<string> | null,
      tickLower?: PromiseOrValue<BigNumberish> | null,
      tickUpper?: PromiseOrValue<BigNumberish> | null,
      qty?: null,
      qty0?: null,
      qty1?: null,
    ): MintEventFilter;

    'Swap(address,address,int256,int256,uint160,uint128,int24)'(
      sender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      deltaQty0?: null,
      deltaQty1?: null,
      sqrtP?: null,
      liquidity?: null,
      currentTick?: null,
    ): SwapEventFilter;
    Swap(
      sender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      deltaQty0?: null,
      deltaQty1?: null,
      sqrtP?: null,
      liquidity?: null,
      currentTick?: null,
    ): SwapEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
  };

  estimateGas: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      qty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    burnRTokens(
      _qty: PromiseOrValue<BigNumberish>,
      isLogicalBurn: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    flash(
      recipient: PromiseOrValue<string>,
      qty0: PromiseOrValue<BigNumberish>,
      qty1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getFeeGrowthGlobal(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityState(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolState(overrides?: CallOverrides): Promise<BigNumber>;

    getPositions(
      owner: PromiseOrValue<string>,
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSecondsPerLiquidityData(overrides?: CallOverrides): Promise<BigNumber>;

    getSecondsPerLiquidityInside(
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initializedTicks(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    maxTickLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      recipient: PromiseOrValue<string>,
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      ticksPrevious: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      qty: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      recipient: PromiseOrValue<string>,
      swapQty: PromiseOrValue<BigNumberish>,
      isToken0: PromiseOrValue<boolean>,
      limitSqrtP: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swapFeeUnits(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tickDistance(overrides?: CallOverrides): Promise<BigNumber>;

    ticks(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unlockPool(
      initialSqrtP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      qty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    burnRTokens(
      _qty: PromiseOrValue<BigNumberish>,
      isLogicalBurn: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flash(
      recipient: PromiseOrValue<string>,
      qty0: PromiseOrValue<BigNumberish>,
      qty1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getFeeGrowthGlobal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidityState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPositions(
      owner: PromiseOrValue<string>,
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getSecondsPerLiquidityData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSecondsPerLiquidityInside(
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initializedTicks(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTickLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      recipient: PromiseOrValue<string>,
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      ticksPrevious: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      qty: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      recipient: PromiseOrValue<string>,
      swapQty: PromiseOrValue<BigNumberish>,
      isToken0: PromiseOrValue<boolean>,
      limitSqrtP: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swapFeeUnits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tickDistance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticks(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unlockPool(
      initialSqrtP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
