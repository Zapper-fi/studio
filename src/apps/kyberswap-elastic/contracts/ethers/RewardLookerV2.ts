/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace IKyberRewardLockerV2 {
  export type VestingScheduleStruct = {
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    quantity: PromiseOrValue<BigNumberish>;
    vestedQuantity: PromiseOrValue<BigNumberish>;
  };

  export type VestingScheduleStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {
    startTime: BigNumber;
    endTime: BigNumber;
    quantity: BigNumber;
    vestedQuantity: BigNumber;
  };
}

export interface RewardLookerV2Interface extends utils.Interface {
  functions: {
    'accountEscrowedBalance(address,address)': FunctionFragment;
    'accountVestedBalance(address,address)': FunctionFragment;
    'addRewardsContract(address,address)': FunctionFragment;
    'admin()': FunctionFragment;
    'claimAdmin()': FunctionFragment;
    'getRewardContractsPerToken(address)': FunctionFragment;
    'getVestingScheduleAtIndex(address,address,uint256)': FunctionFragment;
    'getVestingSchedules(address,address)': FunctionFragment;
    'lock(address,address,uint256,uint32)': FunctionFragment;
    'lockWithStartTime(address,address,uint256,uint256,uint32)': FunctionFragment;
    'numVestingSchedules(address,address)': FunctionFragment;
    'pendingAdmin()': FunctionFragment;
    'removeRewardsContract(address,address)': FunctionFragment;
    'transferAdmin(address)': FunctionFragment;
    'transferAdminQuickly(address)': FunctionFragment;
    'vestCompletedSchedules(address)': FunctionFragment;
    'vestCompletedSchedulesForMultipleTokens(address[])': FunctionFragment;
    'vestScheduleAtIndices(address,uint256[])': FunctionFragment;
    'vestScheduleForMultipleTokensAtIndices(address[],uint256[][])': FunctionFragment;
    'vestSchedulesInRange(address,uint256,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'accountEscrowedBalance'
      | 'accountVestedBalance'
      | 'addRewardsContract'
      | 'admin'
      | 'claimAdmin'
      | 'getRewardContractsPerToken'
      | 'getVestingScheduleAtIndex'
      | 'getVestingSchedules'
      | 'lock'
      | 'lockWithStartTime'
      | 'numVestingSchedules'
      | 'pendingAdmin'
      | 'removeRewardsContract'
      | 'transferAdmin'
      | 'transferAdminQuickly'
      | 'vestCompletedSchedules'
      | 'vestCompletedSchedulesForMultipleTokens'
      | 'vestScheduleAtIndices'
      | 'vestScheduleForMultipleTokensAtIndices'
      | 'vestSchedulesInRange',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'accountEscrowedBalance',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'accountVestedBalance',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'addRewardsContract',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimAdmin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRewardContractsPerToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getVestingScheduleAtIndex',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getVestingSchedules',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'lock',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'lockWithStartTime',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'numVestingSchedules',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'pendingAdmin', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'removeRewardsContract',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'transferAdmin', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'transferAdminQuickly', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'vestCompletedSchedules', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'vestCompletedSchedulesForMultipleTokens',
    values: [PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'vestScheduleAtIndices',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'vestScheduleForMultipleTokensAtIndices',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[][]],
  ): string;
  encodeFunctionData(
    functionFragment: 'vestSchedulesInRange',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'accountEscrowedBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountVestedBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addRewardsContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardContractsPerToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVestingScheduleAtIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVestingSchedules', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockWithStartTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numVestingSchedules', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeRewardsContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferAdminQuickly', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vestCompletedSchedules', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vestCompletedSchedulesForMultipleTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vestScheduleAtIndices', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vestScheduleForMultipleTokensAtIndices', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vestSchedulesInRange', data: BytesLike): Result;

  events: {
    'AdminClaimed(address,address)': EventFragment;
    'RewardContractAdded(address,address,bool)': EventFragment;
    'TransferAdminPending(address)': EventFragment;
    'Vested(address,address,uint256,uint256)': EventFragment;
    'VestingEntryCreated(address,address,uint256,uint256,uint256,uint256)': EventFragment;
    'VestingEntryQueued(uint256,address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminClaimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardContractAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferAdminPending'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Vested'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VestingEntryCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VestingEntryQueued'): EventFragment;
}

export interface AdminClaimedEventObject {
  newAdmin: string;
  previousAdmin: string;
}
export type AdminClaimedEvent = TypedEvent<[string, string], AdminClaimedEventObject>;

export type AdminClaimedEventFilter = TypedEventFilter<AdminClaimedEvent>;

export interface RewardContractAddedEventObject {
  rewardContract: string;
  token: string;
  isAdded: boolean;
}
export type RewardContractAddedEvent = TypedEvent<[string, string, boolean], RewardContractAddedEventObject>;

export type RewardContractAddedEventFilter = TypedEventFilter<RewardContractAddedEvent>;

export interface TransferAdminPendingEventObject {
  pendingAdmin: string;
}
export type TransferAdminPendingEvent = TypedEvent<[string], TransferAdminPendingEventObject>;

export type TransferAdminPendingEventFilter = TypedEventFilter<TransferAdminPendingEvent>;

export interface VestedEventObject {
  token: string;
  beneficiary: string;
  vestedQuantity: BigNumber;
  index: BigNumber;
}
export type VestedEvent = TypedEvent<[string, string, BigNumber, BigNumber], VestedEventObject>;

export type VestedEventFilter = TypedEventFilter<VestedEvent>;

export interface VestingEntryCreatedEventObject {
  token: string;
  beneficiary: string;
  startTime: BigNumber;
  endTime: BigNumber;
  quantity: BigNumber;
  index: BigNumber;
}
export type VestingEntryCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  VestingEntryCreatedEventObject
>;

export type VestingEntryCreatedEventFilter = TypedEventFilter<VestingEntryCreatedEvent>;

export interface VestingEntryQueuedEventObject {
  index: BigNumber;
  token: string;
  beneficiary: string;
  quantity: BigNumber;
}
export type VestingEntryQueuedEvent = TypedEvent<[BigNumber, string, string, BigNumber], VestingEntryQueuedEventObject>;

export type VestingEntryQueuedEventFilter = TypedEventFilter<VestingEntryQueuedEvent>;

export interface RewardLookerV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RewardLookerV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountEscrowedBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    accountVestedBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    addRewardsContract(
      token: PromiseOrValue<string>,
      _rewardContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    claimAdmin(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    getRewardContractsPerToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string[]] & { rewardContracts: string[] }>;

    getVestingScheduleAtIndex(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[IKyberRewardLockerV2.VestingScheduleStructOutput]>;

    getVestingSchedules(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [IKyberRewardLockerV2.VestingScheduleStructOutput[]] & {
        schedules: IKyberRewardLockerV2.VestingScheduleStructOutput[];
      }
    >;

    lock(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      vestingDuration: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    lockWithStartTime(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      vestingDuration: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    numVestingSchedules(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    removeRewardsContract(
      token: PromiseOrValue<string>,
      _rewardContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferAdminQuickly(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    vestCompletedSchedules(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    vestCompletedSchedulesForMultipleTokens(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    vestScheduleAtIndices(
      token: PromiseOrValue<string>,
      indexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    vestScheduleForMultipleTokensAtIndices(
      tokens: PromiseOrValue<string>[],
      indices: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    vestSchedulesInRange(
      token: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  accountEscrowedBalance(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  accountVestedBalance(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  addRewardsContract(
    token: PromiseOrValue<string>,
    _rewardContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  claimAdmin(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  getRewardContractsPerToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

  getVestingScheduleAtIndex(
    account: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<IKyberRewardLockerV2.VestingScheduleStructOutput>;

  getVestingSchedules(
    account: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<IKyberRewardLockerV2.VestingScheduleStructOutput[]>;

  lock(
    token: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    quantity: PromiseOrValue<BigNumberish>,
    vestingDuration: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  lockWithStartTime(
    token: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    quantity: PromiseOrValue<BigNumberish>,
    startTime: PromiseOrValue<BigNumberish>,
    vestingDuration: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  numVestingSchedules(
    account: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  removeRewardsContract(
    token: PromiseOrValue<string>,
    _rewardContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferAdmin(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferAdminQuickly(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  vestCompletedSchedules(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  vestCompletedSchedulesForMultipleTokens(
    tokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  vestScheduleAtIndices(
    token: PromiseOrValue<string>,
    indexes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  vestScheduleForMultipleTokensAtIndices(
    tokens: PromiseOrValue<string>[],
    indices: PromiseOrValue<BigNumberish>[][],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  vestSchedulesInRange(
    token: PromiseOrValue<string>,
    startIndex: PromiseOrValue<BigNumberish>,
    endIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    accountEscrowedBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    accountVestedBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    addRewardsContract(
      token: PromiseOrValue<string>,
      _rewardContract: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    claimAdmin(overrides?: CallOverrides): Promise<void>;

    getRewardContractsPerToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

    getVestingScheduleAtIndex(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<IKyberRewardLockerV2.VestingScheduleStructOutput>;

    getVestingSchedules(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<IKyberRewardLockerV2.VestingScheduleStructOutput[]>;

    lock(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      vestingDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    lockWithStartTime(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      vestingDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    numVestingSchedules(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    removeRewardsContract(
      token: PromiseOrValue<string>,
      _rewardContract: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferAdmin(newAdmin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    transferAdminQuickly(newAdmin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    vestCompletedSchedules(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    vestCompletedSchedulesForMultipleTokens(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    vestScheduleAtIndices(
      token: PromiseOrValue<string>,
      indexes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    vestScheduleForMultipleTokensAtIndices(
      tokens: PromiseOrValue<string>[],
      indices: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    vestSchedulesInRange(
      token: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {
    'AdminClaimed(address,address)'(newAdmin?: null, previousAdmin?: null): AdminClaimedEventFilter;
    AdminClaimed(newAdmin?: null, previousAdmin?: null): AdminClaimedEventFilter;

    'RewardContractAdded(address,address,bool)'(
      rewardContract?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      isAdded?: null,
    ): RewardContractAddedEventFilter;
    RewardContractAdded(
      rewardContract?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      isAdded?: null,
    ): RewardContractAddedEventFilter;

    'TransferAdminPending(address)'(pendingAdmin?: null): TransferAdminPendingEventFilter;
    TransferAdminPending(pendingAdmin?: null): TransferAdminPendingEventFilter;

    'Vested(address,address,uint256,uint256)'(
      token?: PromiseOrValue<string> | null,
      beneficiary?: PromiseOrValue<string> | null,
      vestedQuantity?: null,
      index?: null,
    ): VestedEventFilter;
    Vested(
      token?: PromiseOrValue<string> | null,
      beneficiary?: PromiseOrValue<string> | null,
      vestedQuantity?: null,
      index?: null,
    ): VestedEventFilter;

    'VestingEntryCreated(address,address,uint256,uint256,uint256,uint256)'(
      token?: PromiseOrValue<string> | null,
      beneficiary?: PromiseOrValue<string> | null,
      startTime?: null,
      endTime?: null,
      quantity?: null,
      index?: null,
    ): VestingEntryCreatedEventFilter;
    VestingEntryCreated(
      token?: PromiseOrValue<string> | null,
      beneficiary?: PromiseOrValue<string> | null,
      startTime?: null,
      endTime?: null,
      quantity?: null,
      index?: null,
    ): VestingEntryCreatedEventFilter;

    'VestingEntryQueued(uint256,address,address,uint256)'(
      index?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null,
      beneficiary?: PromiseOrValue<string> | null,
      quantity?: null,
    ): VestingEntryQueuedEventFilter;
    VestingEntryQueued(
      index?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null,
      beneficiary?: PromiseOrValue<string> | null,
      quantity?: null,
    ): VestingEntryQueuedEventFilter;
  };

  estimateGas: {
    accountEscrowedBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    accountVestedBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    addRewardsContract(
      token: PromiseOrValue<string>,
      _rewardContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    claimAdmin(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    getRewardContractsPerToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getVestingScheduleAtIndex(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getVestingSchedules(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lock(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      vestingDuration: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    lockWithStartTime(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      vestingDuration: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    numVestingSchedules(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    removeRewardsContract(
      token: PromiseOrValue<string>,
      _rewardContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferAdminQuickly(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    vestCompletedSchedules(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    vestCompletedSchedulesForMultipleTokens(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    vestScheduleAtIndices(
      token: PromiseOrValue<string>,
      indexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    vestScheduleForMultipleTokensAtIndices(
      tokens: PromiseOrValue<string>[],
      indices: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    vestSchedulesInRange(
      token: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountEscrowedBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    accountVestedBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    addRewardsContract(
      token: PromiseOrValue<string>,
      _rewardContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimAdmin(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    getRewardContractsPerToken(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVestingScheduleAtIndex(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getVestingSchedules(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lock(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      vestingDuration: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    lockWithStartTime(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      quantity: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      vestingDuration: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    numVestingSchedules(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeRewardsContract(
      token: PromiseOrValue<string>,
      _rewardContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferAdminQuickly(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    vestCompletedSchedules(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    vestCompletedSchedulesForMultipleTokens(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    vestScheduleAtIndices(
      token: PromiseOrValue<string>,
      indexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    vestScheduleForMultipleTokensAtIndices(
      tokens: PromiseOrValue<string>[],
      indices: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    vestSchedulesInRange(
      token: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
