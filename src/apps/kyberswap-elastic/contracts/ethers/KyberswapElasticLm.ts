/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace IKyberSwapElasticLM {
  export type RewardCalculationDataStruct = {
    secondsPerLiquidityNow: PromiseOrValue<BigNumberish>;
    feeNow: PromiseOrValue<BigNumberish>;
    vestingVolume: PromiseOrValue<BigNumberish>;
    totalSecondsUnclaimed: PromiseOrValue<BigNumberish>;
    secondsPerLiquidity: PromiseOrValue<BigNumberish>;
    secondsClaim: PromiseOrValue<BigNumberish>;
  };

  export type RewardCalculationDataStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    secondsPerLiquidityNow: BigNumber;
    feeNow: BigNumber;
    vestingVolume: BigNumber;
    totalSecondsUnclaimed: BigNumber;
    secondsPerLiquidity: BigNumber;
    secondsClaim: BigNumber;
  };
}

export interface KyberswapElasticLmInterface extends utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'addPool(address,uint32,uint32,uint32,address[],uint256[],uint256)': FunctionFragment;
    'checkPool(address,address,uint256)': FunctionFragment;
    'deposit(uint256[])': FunctionFragment;
    'emergencyEnable()': FunctionFragment;
    'emergencyEnabled()': FunctionFragment;
    'emergencyWithdraw(uint256[])': FunctionFragment;
    'emergencyWithdrawForOwner(address[],uint256[])': FunctionFragment;
    'exit(uint256,uint256[],uint256[])': FunctionFragment;
    'getActiveTime(address,address,uint256)': FunctionFragment;
    'getDepositedNFTs(address)': FunctionFragment;
    'getFee(address,uint256)': FunctionFragment;
    'getFeePool(address,address,uint256)': FunctionFragment;
    'getJoinedPools(uint256)': FunctionFragment;
    'getJoinedPoolsInRange(uint256,uint256,uint256)': FunctionFragment;
    'getLiq(address,uint256)': FunctionFragment;
    'getPoolInfo(uint256)': FunctionFragment;
    'getRewardCalculationData(uint256,uint256)': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'getSignedFee(address,uint256)': FunctionFragment;
    'getSignedFeePool(address,address,uint256)': FunctionFragment;
    'getUserInfo(uint256,uint256)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'harvestMultiplePools(uint256[],bytes[])': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'isEmergencyWithdrawnNFT(uint256)': FunctionFragment;
    'join(uint256,uint256[],uint256[])': FunctionFragment;
    'nft()': FunctionFragment;
    'numPools()': FunctionFragment;
    'poolLength()': FunctionFragment;
    'pools(uint256)': FunctionFragment;
    'positions(uint256)': FunctionFragment;
    'renewPool(uint256,uint32,uint32,uint32,uint256[],uint256)': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'rewardLocker()': FunctionFragment;
    'stakes(uint256,uint256)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'withdraw(uint256[])': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DEFAULT_ADMIN_ROLE'
      | 'addPool'
      | 'checkPool'
      | 'deposit'
      | 'emergencyEnable'
      | 'emergencyEnabled'
      | 'emergencyWithdraw'
      | 'emergencyWithdrawForOwner'
      | 'exit'
      | 'getActiveTime'
      | 'getDepositedNFTs'
      | 'getFee'
      | 'getFeePool'
      | 'getJoinedPools'
      | 'getJoinedPoolsInRange'
      | 'getLiq'
      | 'getPoolInfo'
      | 'getRewardCalculationData'
      | 'getRoleAdmin'
      | 'getSignedFee'
      | 'getSignedFeePool'
      | 'getUserInfo'
      | 'grantRole'
      | 'harvestMultiplePools'
      | 'hasRole'
      | 'isEmergencyWithdrawnNFT'
      | 'join'
      | 'nft'
      | 'numPools'
      | 'poolLength'
      | 'pools'
      | 'positions'
      | 'renewPool'
      | 'renounceRole'
      | 'revokeRole'
      | 'rewardLocker'
      | 'stakes'
      | 'supportsInterface'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addPool',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'checkPool',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'deposit', values: [PromiseOrValue<BigNumberish>[]]): string;
  encodeFunctionData(functionFragment: 'emergencyEnable', values?: undefined): string;
  encodeFunctionData(functionFragment: 'emergencyEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'emergencyWithdraw', values: [PromiseOrValue<BigNumberish>[]]): string;
  encodeFunctionData(
    functionFragment: 'emergencyWithdrawForOwner',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'exit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'getActiveTime',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getDepositedNFTs', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getFee',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getFeePool',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getJoinedPools', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getJoinedPoolsInRange',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getLiq',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getPoolInfo', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getRewardCalculationData',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'getSignedFee',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getSignedFeePool',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserInfo',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'harvestMultiplePools',
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BytesLike>[]],
  ): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isEmergencyWithdrawnNFT', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'join',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(functionFragment: 'nft', values?: undefined): string;
  encodeFunctionData(functionFragment: 'numPools', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pools', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'positions', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'renewPool',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'rewardLocker', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'stakes',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [PromiseOrValue<BigNumberish>[]]): string;

  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyEnable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdrawForOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getActiveTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDepositedNFTs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFeePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getJoinedPools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getJoinedPoolsInRange', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLiq', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardCalculationData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSignedFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSignedFeePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvestMultiplePools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isEmergencyWithdrawnNFT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'join', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nft', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numPools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'positions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renewPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardLocker', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'AddPool(uint256,address,uint32,uint32,uint32,uint256)': EventFragment;
    'Deposit(address,uint256)': EventFragment;
    'EmergencyEnabled()': EventFragment;
    'EmergencyWithdraw(address,uint256)': EventFragment;
    'EmergencyWithdrawForOwner(address,uint256)': EventFragment;
    'Exit(address,uint256,uint256,uint256)': EventFragment;
    'Harvest(address,address,uint256)': EventFragment;
    'Join(uint256,uint256,uint256)': EventFragment;
    'RenewPool(uint256,uint32,uint32,uint32,uint256)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'SyncLiq(uint256,uint256,uint256)': EventFragment;
    'Withdraw(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddPool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyEnabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdrawForOwner'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Exit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Harvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Join'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RenewPool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SyncLiq'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface AddPoolEventObject {
  pId: BigNumber;
  poolAddress: string;
  startTime: number;
  endTime: number;
  vestingDuration: number;
  feeTarget: BigNumber;
}
export type AddPoolEvent = TypedEvent<[BigNumber, string, number, number, number, BigNumber], AddPoolEventObject>;

export type AddPoolEventFilter = TypedEventFilter<AddPoolEvent>;

export interface DepositEventObject {
  sender: string;
  nftId: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EmergencyEnabledEventObject {}
export type EmergencyEnabledEvent = TypedEvent<[], EmergencyEnabledEventObject>;

export type EmergencyEnabledEventFilter = TypedEventFilter<EmergencyEnabledEvent>;

export interface EmergencyWithdrawEventObject {
  sender: string;
  nftId: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<[string, BigNumber], EmergencyWithdrawEventObject>;

export type EmergencyWithdrawEventFilter = TypedEventFilter<EmergencyWithdrawEvent>;

export interface EmergencyWithdrawForOwnerEventObject {
  reward: string;
  amount: BigNumber;
}
export type EmergencyWithdrawForOwnerEvent = TypedEvent<[string, BigNumber], EmergencyWithdrawForOwnerEventObject>;

export type EmergencyWithdrawForOwnerEventFilter = TypedEventFilter<EmergencyWithdrawForOwnerEvent>;

export interface ExitEventObject {
  to: string;
  nftId: BigNumber;
  pId: BigNumber;
  liq: BigNumber;
}
export type ExitEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], ExitEventObject>;

export type ExitEventFilter = TypedEventFilter<ExitEvent>;

export interface HarvestEventObject {
  to: string;
  reward: string;
  amount: BigNumber;
}
export type HarvestEvent = TypedEvent<[string, string, BigNumber], HarvestEventObject>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export interface JoinEventObject {
  nftId: BigNumber;
  pId: BigNumber;
  liq: BigNumber;
}
export type JoinEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], JoinEventObject>;

export type JoinEventFilter = TypedEventFilter<JoinEvent>;

export interface RenewPoolEventObject {
  pid: BigNumber;
  startTime: number;
  endTime: number;
  vestingDuration: number;
  feeTarget: BigNumber;
}
export type RenewPoolEvent = TypedEvent<[BigNumber, number, number, number, BigNumber], RenewPoolEventObject>;

export type RenewPoolEventFilter = TypedEventFilter<RenewPoolEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SyncLiqEventObject {
  nftId: BigNumber;
  pId: BigNumber;
  liq: BigNumber;
}
export type SyncLiqEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], SyncLiqEventObject>;

export type SyncLiqEventFilter = TypedEventFilter<SyncLiqEvent>;

export interface WithdrawEventObject {
  sender: string;
  nftId: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface KyberswapElasticLm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KyberswapElasticLmInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addPool(
      poolAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      vestingDuration: PromiseOrValue<BigNumberish>,
      rewardTokens: PromiseOrValue<string>[],
      rewardAmounts: PromiseOrValue<BigNumberish>[],
      feeTarget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    checkPool(
      pAddress: PromiseOrValue<string>,
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    deposit(
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    emergencyEnable(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    emergencyEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    emergencyWithdraw(
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    emergencyWithdrawForOwner(
      rewards: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    exit(
      pId: PromiseOrValue<BigNumberish>,
      nftIds: PromiseOrValue<BigNumberish>[],
      liqs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getActiveTime(
      pAddr: PromiseOrValue<string>,
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getDepositedNFTs(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]] & { listNFTs: BigNumber[] }>;

    getFee(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getFeePool(
      poolAddress: PromiseOrValue<string>,
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { feeGrowthInside: BigNumber }>;

    getJoinedPools(
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]] & { poolIds: BigNumber[] }>;

    getJoinedPoolsInRange(
      nftId: PromiseOrValue<BigNumberish>,
      fromIndex: PromiseOrValue<BigNumberish>,
      toIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]] & { poolIds: BigNumber[] }>;

    getLiq(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getPoolInfo(
      pId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, number, number, number, BigNumber, BigNumber, BigNumber, string[], BigNumber[]] & {
        poolAddress: string;
        startTime: number;
        endTime: number;
        vestingDuration: number;
        totalSecondsClaimed: BigNumber;
        feeTarget: BigNumber;
        numStakes: BigNumber;
        rewardTokens: string[];
        rewardUnclaimeds: BigNumber[];
      }
    >;

    getRewardCalculationData(
      nftId: PromiseOrValue<BigNumberish>,
      pId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [IKyberSwapElasticLM.RewardCalculationDataStructOutput] & {
        data: IKyberSwapElasticLM.RewardCalculationDataStructOutput;
      }
    >;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    getSignedFee(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getSignedFeePool(
      poolAddress: PromiseOrValue<string>,
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getUserInfo(
      nftId: PromiseOrValue<BigNumberish>,
      pId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber[], BigNumber[]] & {
        liquidity: BigNumber;
        rewardPending: BigNumber[];
        rewardLast: BigNumber[];
      }
    >;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    harvestMultiplePools(
      nftIds: PromiseOrValue<BigNumberish>[],
      datas: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isEmergencyWithdrawnNFT(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    join(
      pId: PromiseOrValue<BigNumberish>,
      nftIds: PromiseOrValue<BigNumberish>[],
      liqs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    nft(overrides?: CallOverrides): Promise<[string]>;

    numPools(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, number, number, number, BigNumber, BigNumber, BigNumber] & {
        poolAddress: string;
        startTime: number;
        endTime: number;
        vestingDuration: number;
        totalSecondsClaimed: BigNumber;
        feeTarget: BigNumber;
        numStakes: BigNumber;
      }
    >;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string, BigNumber] & { owner: string; liquidity: BigNumber }>;

    renewPool(
      pId: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      vestingDuration: PromiseOrValue<BigNumberish>,
      rewardAmounts: PromiseOrValue<BigNumberish>[],
      feeTarget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    rewardLocker(overrides?: CallOverrides): Promise<[string]>;

    stakes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        secondsPerLiquidityLast: BigNumber;
        feeFirst: BigNumber;
        liquidity: BigNumber;
      }
    >;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

    withdraw(
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  addPool(
    poolAddress: PromiseOrValue<string>,
    startTime: PromiseOrValue<BigNumberish>,
    endTime: PromiseOrValue<BigNumberish>,
    vestingDuration: PromiseOrValue<BigNumberish>,
    rewardTokens: PromiseOrValue<string>[],
    rewardAmounts: PromiseOrValue<BigNumberish>[],
    feeTarget: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  checkPool(
    pAddress: PromiseOrValue<string>,
    nftContract: PromiseOrValue<string>,
    nftId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  deposit(
    nftIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  emergencyEnable(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  emergencyEnabled(overrides?: CallOverrides): Promise<boolean>;

  emergencyWithdraw(
    nftIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  emergencyWithdrawForOwner(
    rewards: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  exit(
    pId: PromiseOrValue<BigNumberish>,
    nftIds: PromiseOrValue<BigNumberish>[],
    liqs: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getActiveTime(
    pAddr: PromiseOrValue<string>,
    nftContract: PromiseOrValue<string>,
    nftId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getDepositedNFTs(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;

  getFee(
    nftContract: PromiseOrValue<string>,
    nftId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getFeePool(
    poolAddress: PromiseOrValue<string>,
    nftContract: PromiseOrValue<string>,
    nftId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getJoinedPools(nftId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber[]>;

  getJoinedPoolsInRange(
    nftId: PromiseOrValue<BigNumberish>,
    fromIndex: PromiseOrValue<BigNumberish>,
    toIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  getLiq(
    nftContract: PromiseOrValue<string>,
    nftId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getPoolInfo(
    pId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, number, number, number, BigNumber, BigNumber, BigNumber, string[], BigNumber[]] & {
      poolAddress: string;
      startTime: number;
      endTime: number;
      vestingDuration: number;
      totalSecondsClaimed: BigNumber;
      feeTarget: BigNumber;
      numStakes: BigNumber;
      rewardTokens: string[];
      rewardUnclaimeds: BigNumber[];
    }
  >;

  getRewardCalculationData(
    nftId: PromiseOrValue<BigNumberish>,
    pId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<IKyberSwapElasticLM.RewardCalculationDataStructOutput>;

  getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  getSignedFee(
    nftContract: PromiseOrValue<string>,
    nftId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getSignedFeePool(
    poolAddress: PromiseOrValue<string>,
    nftContract: PromiseOrValue<string>,
    nftId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getUserInfo(
    nftId: PromiseOrValue<BigNumberish>,
    pId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber[], BigNumber[]] & {
      liquidity: BigNumber;
      rewardPending: BigNumber[];
      rewardLast: BigNumber[];
    }
  >;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  harvestMultiplePools(
    nftIds: PromiseOrValue<BigNumberish>[],
    datas: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isEmergencyWithdrawnNFT(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  join(
    pId: PromiseOrValue<BigNumberish>,
    nftIds: PromiseOrValue<BigNumberish>[],
    liqs: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  nft(overrides?: CallOverrides): Promise<string>;

  numPools(overrides?: CallOverrides): Promise<BigNumber>;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  pools(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, number, number, number, BigNumber, BigNumber, BigNumber] & {
      poolAddress: string;
      startTime: number;
      endTime: number;
      vestingDuration: number;
      totalSecondsClaimed: BigNumber;
      feeTarget: BigNumber;
      numStakes: BigNumber;
    }
  >;

  positions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[string, BigNumber] & { owner: string; liquidity: BigNumber }>;

  renewPool(
    pId: PromiseOrValue<BigNumberish>,
    startTime: PromiseOrValue<BigNumberish>,
    endTime: PromiseOrValue<BigNumberish>,
    vestingDuration: PromiseOrValue<BigNumberish>,
    rewardAmounts: PromiseOrValue<BigNumberish>[],
    feeTarget: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  rewardLocker(overrides?: CallOverrides): Promise<string>;

  stakes(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      secondsPerLiquidityLast: BigNumber;
      feeFirst: BigNumber;
      liquidity: BigNumber;
    }
  >;

  supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  withdraw(
    nftIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    addPool(
      poolAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      vestingDuration: PromiseOrValue<BigNumberish>,
      rewardTokens: PromiseOrValue<string>[],
      rewardAmounts: PromiseOrValue<BigNumberish>[],
      feeTarget: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    checkPool(
      pAddress: PromiseOrValue<string>,
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    deposit(nftIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;

    emergencyEnable(overrides?: CallOverrides): Promise<void>;

    emergencyEnabled(overrides?: CallOverrides): Promise<boolean>;

    emergencyWithdraw(nftIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;

    emergencyWithdrawForOwner(
      rewards: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    exit(
      pId: PromiseOrValue<BigNumberish>,
      nftIds: PromiseOrValue<BigNumberish>[],
      liqs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    getActiveTime(
      pAddr: PromiseOrValue<string>,
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDepositedNFTs(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;

    getFee(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getFeePool(
      poolAddress: PromiseOrValue<string>,
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getJoinedPools(nftId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber[]>;

    getJoinedPoolsInRange(
      nftId: PromiseOrValue<BigNumberish>,
      fromIndex: PromiseOrValue<BigNumberish>,
      toIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    getLiq(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPoolInfo(
      pId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, number, number, number, BigNumber, BigNumber, BigNumber, string[], BigNumber[]] & {
        poolAddress: string;
        startTime: number;
        endTime: number;
        vestingDuration: number;
        totalSecondsClaimed: BigNumber;
        feeTarget: BigNumber;
        numStakes: BigNumber;
        rewardTokens: string[];
        rewardUnclaimeds: BigNumber[];
      }
    >;

    getRewardCalculationData(
      nftId: PromiseOrValue<BigNumberish>,
      pId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<IKyberSwapElasticLM.RewardCalculationDataStructOutput>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    getSignedFee(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSignedFeePool(
      poolAddress: PromiseOrValue<string>,
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserInfo(
      nftId: PromiseOrValue<BigNumberish>,
      pId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber[], BigNumber[]] & {
        liquidity: BigNumber;
        rewardPending: BigNumber[];
        rewardLast: BigNumber[];
      }
    >;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    harvestMultiplePools(
      nftIds: PromiseOrValue<BigNumberish>[],
      datas: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isEmergencyWithdrawnNFT(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    join(
      pId: PromiseOrValue<BigNumberish>,
      nftIds: PromiseOrValue<BigNumberish>[],
      liqs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    nft(overrides?: CallOverrides): Promise<string>;

    numPools(overrides?: CallOverrides): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, number, number, number, BigNumber, BigNumber, BigNumber] & {
        poolAddress: string;
        startTime: number;
        endTime: number;
        vestingDuration: number;
        totalSecondsClaimed: BigNumber;
        feeTarget: BigNumber;
        numStakes: BigNumber;
      }
    >;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string, BigNumber] & { owner: string; liquidity: BigNumber }>;

    renewPool(
      pId: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      vestingDuration: PromiseOrValue<BigNumberish>,
      rewardAmounts: PromiseOrValue<BigNumberish>[],
      feeTarget: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    rewardLocker(overrides?: CallOverrides): Promise<string>;

    stakes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        secondsPerLiquidityLast: BigNumber;
        feeFirst: BigNumber;
        liquidity: BigNumber;
      }
    >;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    withdraw(nftIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'AddPool(uint256,address,uint32,uint32,uint32,uint256)'(
      pId?: PromiseOrValue<BigNumberish> | null,
      poolAddress?: null,
      startTime?: null,
      endTime?: null,
      vestingDuration?: null,
      feeTarget?: null,
    ): AddPoolEventFilter;
    AddPool(
      pId?: PromiseOrValue<BigNumberish> | null,
      poolAddress?: null,
      startTime?: null,
      endTime?: null,
      vestingDuration?: null,
      feeTarget?: null,
    ): AddPoolEventFilter;

    'Deposit(address,uint256)'(sender?: null, nftId?: PromiseOrValue<BigNumberish> | null): DepositEventFilter;
    Deposit(sender?: null, nftId?: PromiseOrValue<BigNumberish> | null): DepositEventFilter;

    'EmergencyEnabled()'(): EmergencyEnabledEventFilter;
    EmergencyEnabled(): EmergencyEnabledEventFilter;

    'EmergencyWithdraw(address,uint256)'(
      sender?: null,
      nftId?: PromiseOrValue<BigNumberish> | null,
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(sender?: null, nftId?: PromiseOrValue<BigNumberish> | null): EmergencyWithdrawEventFilter;

    'EmergencyWithdrawForOwner(address,uint256)'(
      reward?: null,
      amount?: PromiseOrValue<BigNumberish> | null,
    ): EmergencyWithdrawForOwnerEventFilter;
    EmergencyWithdrawForOwner(
      reward?: null,
      amount?: PromiseOrValue<BigNumberish> | null,
    ): EmergencyWithdrawForOwnerEventFilter;

    'Exit(address,uint256,uint256,uint256)'(
      to?: null,
      nftId?: PromiseOrValue<BigNumberish> | null,
      pId?: PromiseOrValue<BigNumberish> | null,
      liq?: PromiseOrValue<BigNumberish> | null,
    ): ExitEventFilter;
    Exit(
      to?: null,
      nftId?: PromiseOrValue<BigNumberish> | null,
      pId?: PromiseOrValue<BigNumberish> | null,
      liq?: PromiseOrValue<BigNumberish> | null,
    ): ExitEventFilter;

    'Harvest(address,address,uint256)'(
      to?: null,
      reward?: null,
      amount?: PromiseOrValue<BigNumberish> | null,
    ): HarvestEventFilter;
    Harvest(to?: null, reward?: null, amount?: PromiseOrValue<BigNumberish> | null): HarvestEventFilter;

    'Join(uint256,uint256,uint256)'(
      nftId?: PromiseOrValue<BigNumberish> | null,
      pId?: PromiseOrValue<BigNumberish> | null,
      liq?: PromiseOrValue<BigNumberish> | null,
    ): JoinEventFilter;
    Join(
      nftId?: PromiseOrValue<BigNumberish> | null,
      pId?: PromiseOrValue<BigNumberish> | null,
      liq?: PromiseOrValue<BigNumberish> | null,
    ): JoinEventFilter;

    'RenewPool(uint256,uint32,uint32,uint32,uint256)'(
      pid?: PromiseOrValue<BigNumberish> | null,
      startTime?: null,
      endTime?: null,
      vestingDuration?: null,
      feeTarget?: null,
    ): RenewPoolEventFilter;
    RenewPool(
      pid?: PromiseOrValue<BigNumberish> | null,
      startTime?: null,
      endTime?: null,
      vestingDuration?: null,
      feeTarget?: null,
    ): RenewPoolEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;

    'SyncLiq(uint256,uint256,uint256)'(
      nftId?: PromiseOrValue<BigNumberish> | null,
      pId?: PromiseOrValue<BigNumberish> | null,
      liq?: PromiseOrValue<BigNumberish> | null,
    ): SyncLiqEventFilter;
    SyncLiq(
      nftId?: PromiseOrValue<BigNumberish> | null,
      pId?: PromiseOrValue<BigNumberish> | null,
      liq?: PromiseOrValue<BigNumberish> | null,
    ): SyncLiqEventFilter;

    'Withdraw(address,uint256)'(sender?: null, nftId?: PromiseOrValue<BigNumberish> | null): WithdrawEventFilter;
    Withdraw(sender?: null, nftId?: PromiseOrValue<BigNumberish> | null): WithdrawEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addPool(
      poolAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      vestingDuration: PromiseOrValue<BigNumberish>,
      rewardTokens: PromiseOrValue<string>[],
      rewardAmounts: PromiseOrValue<BigNumberish>[],
      feeTarget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    checkPool(
      pAddress: PromiseOrValue<string>,
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    deposit(
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    emergencyEnable(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    emergencyEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    emergencyWithdrawForOwner(
      rewards: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    exit(
      pId: PromiseOrValue<BigNumberish>,
      nftIds: PromiseOrValue<BigNumberish>[],
      liqs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getActiveTime(
      pAddr: PromiseOrValue<string>,
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDepositedNFTs(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getFee(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getFeePool(
      poolAddress: PromiseOrValue<string>,
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getJoinedPools(nftId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getJoinedPoolsInRange(
      nftId: PromiseOrValue<BigNumberish>,
      fromIndex: PromiseOrValue<BigNumberish>,
      toIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLiq(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPoolInfo(pId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getRewardCalculationData(
      nftId: PromiseOrValue<BigNumberish>,
      pId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getSignedFee(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSignedFeePool(
      poolAddress: PromiseOrValue<string>,
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserInfo(
      nftId: PromiseOrValue<BigNumberish>,
      pId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    harvestMultiplePools(
      nftIds: PromiseOrValue<BigNumberish>[],
      datas: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isEmergencyWithdrawnNFT(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    join(
      pId: PromiseOrValue<BigNumberish>,
      nftIds: PromiseOrValue<BigNumberish>[],
      liqs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<BigNumber>;

    numPools(overrides?: CallOverrides): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    pools(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    positions(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    renewPool(
      pId: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      vestingDuration: PromiseOrValue<BigNumberish>,
      rewardAmounts: PromiseOrValue<BigNumberish>[],
      feeTarget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    rewardLocker(overrides?: CallOverrides): Promise<BigNumber>;

    stakes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPool(
      poolAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      vestingDuration: PromiseOrValue<BigNumberish>,
      rewardTokens: PromiseOrValue<string>[],
      rewardAmounts: PromiseOrValue<BigNumberish>[],
      feeTarget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    checkPool(
      pAddress: PromiseOrValue<string>,
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    deposit(
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    emergencyEnable(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    emergencyEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawForOwner(
      rewards: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    exit(
      pId: PromiseOrValue<BigNumberish>,
      nftIds: PromiseOrValue<BigNumberish>[],
      liqs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getActiveTime(
      pAddr: PromiseOrValue<string>,
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDepositedNFTs(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFee(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getFeePool(
      poolAddress: PromiseOrValue<string>,
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getJoinedPools(nftId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getJoinedPoolsInRange(
      nftId: PromiseOrValue<BigNumberish>,
      fromIndex: PromiseOrValue<BigNumberish>,
      toIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLiq(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPoolInfo(pId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardCalculationData(
      nftId: PromiseOrValue<BigNumberish>,
      pId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSignedFee(
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getSignedFeePool(
      poolAddress: PromiseOrValue<string>,
      nftContract: PromiseOrValue<string>,
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserInfo(
      nftId: PromiseOrValue<BigNumberish>,
      pId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    harvestMultiplePools(
      nftIds: PromiseOrValue<BigNumberish>[],
      datas: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isEmergencyWithdrawnNFT(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    join(
      pId: PromiseOrValue<BigNumberish>,
      nftIds: PromiseOrValue<BigNumberish>[],
      liqs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positions(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renewPool(
      pId: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      vestingDuration: PromiseOrValue<BigNumberish>,
      rewardAmounts: PromiseOrValue<BigNumberish>[],
      feeTarget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    rewardLocker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
