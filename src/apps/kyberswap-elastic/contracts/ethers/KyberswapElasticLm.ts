/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace IKyberSwapElasticLM {
  export type RewardCalculationDataStruct = {
    secondsPerLiquidityNow: PromiseOrValue<BigNumberish>;
    feeNow: PromiseOrValue<BigNumberish>;
    vestingVolume: PromiseOrValue<BigNumberish>;
    totalSecondsUnclaimed: PromiseOrValue<BigNumberish>;
    secondsPerLiquidity: PromiseOrValue<BigNumberish>;
    secondsClaim: PromiseOrValue<BigNumberish>;
  };

  export type RewardCalculationDataStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    secondsPerLiquidityNow: BigNumber;
    feeNow: BigNumber;
    vestingVolume: BigNumber;
    totalSecondsUnclaimed: BigNumber;
    secondsPerLiquidity: BigNumber;
    secondsClaim: BigNumber;
  };
}

export interface KyberswapElasticLmInterface extends utils.Interface {
  functions: {
    'addPool(address,uint32,uint32,address[],uint256[],uint256)': FunctionFragment;
    'admin()': FunctionFragment;
    'claimFee(uint256[],uint256,uint256,address,bool,uint256)': FunctionFragment;
    'deposit(uint256[])': FunctionFragment;
    'depositAndJoin(uint256,uint256[])': FunctionFragment;
    'emergencyEnable()': FunctionFragment;
    'emergencyEnabled()': FunctionFragment;
    'emergencyWithdraw(uint256[])': FunctionFragment;
    'emergencyWithdrawForOwner(address[],uint256[])': FunctionFragment;
    'exit(uint256,uint256[],uint256[])': FunctionFragment;
    'getDepositedNFTs(address)': FunctionFragment;
    'getJoinedPools(uint256)': FunctionFragment;
    'getJoinedPoolsInRange(uint256,uint256,uint256)': FunctionFragment;
    'getPoolInfo(uint256)': FunctionFragment;
    'getRewardCalculationData(uint256,uint256)': FunctionFragment;
    'getUserInfo(uint256,uint256)': FunctionFragment;
    'harvestMultiplePools(uint256[],bytes[])': FunctionFragment;
    'isEmergencyWithdrawnNFT(uint256)': FunctionFragment;
    'join(uint256,uint256[],uint256[])': FunctionFragment;
    'nft()': FunctionFragment;
    'operators(address)': FunctionFragment;
    'poolLength()': FunctionFragment;
    'pools(uint256)': FunctionFragment;
    'positions(uint256)': FunctionFragment;
    'removeLiquidity(uint256,uint128,uint256,uint256,uint256,bool,bool[2])': FunctionFragment;
    'renewPool(uint256,uint32,uint32,uint256[],uint256)': FunctionFragment;
    'specialFeatureEnabled()': FunctionFragment;
    'stakes(uint256,uint256)': FunctionFragment;
    'transferAdmin(address)': FunctionFragment;
    'updateHelper(address)': FunctionFragment;
    'updateOperator(address,bool)': FunctionFragment;
    'updateSpecialFeatureEnabled(bool)': FunctionFragment;
    'weth()': FunctionFragment;
    'withdraw(uint256[])': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addPool'
      | 'admin'
      | 'claimFee'
      | 'deposit'
      | 'depositAndJoin'
      | 'emergencyEnable'
      | 'emergencyEnabled'
      | 'emergencyWithdraw'
      | 'emergencyWithdrawForOwner'
      | 'exit'
      | 'getDepositedNFTs'
      | 'getJoinedPools'
      | 'getJoinedPoolsInRange'
      | 'getPoolInfo'
      | 'getRewardCalculationData'
      | 'getUserInfo'
      | 'harvestMultiplePools'
      | 'isEmergencyWithdrawnNFT'
      | 'join'
      | 'nft'
      | 'operators'
      | 'poolLength'
      | 'pools'
      | 'positions'
      | 'removeLiquidity'
      | 'renewPool'
      | 'specialFeatureEnabled'
      | 'stakes'
      | 'transferAdmin'
      | 'updateHelper'
      | 'updateOperator'
      | 'updateSpecialFeatureEnabled'
      | 'weth'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addPool',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'claimFee',
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'deposit', values: [PromiseOrValue<BigNumberish>[]]): string;
  encodeFunctionData(
    functionFragment: 'depositAndJoin',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(functionFragment: 'emergencyEnable', values?: undefined): string;
  encodeFunctionData(functionFragment: 'emergencyEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'emergencyWithdraw', values: [PromiseOrValue<BigNumberish>[]]): string;
  encodeFunctionData(
    functionFragment: 'emergencyWithdrawForOwner',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'exit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(functionFragment: 'getDepositedNFTs', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getJoinedPools', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getJoinedPoolsInRange',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getPoolInfo', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getRewardCalculationData',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserInfo',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'harvestMultiplePools',
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BytesLike>[]],
  ): string;
  encodeFunctionData(functionFragment: 'isEmergencyWithdrawnNFT', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'join',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(functionFragment: 'nft', values?: undefined): string;
  encodeFunctionData(functionFragment: 'operators', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'poolLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pools', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'positions', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'removeLiquidity',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      [PromiseOrValue<boolean>, PromiseOrValue<boolean>],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'renewPool',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'specialFeatureEnabled', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'stakes',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'transferAdmin', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateHelper', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'updateOperator',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'updateSpecialFeatureEnabled', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'weth', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [PromiseOrValue<BigNumberish>[]]): string;

  decodeFunctionResult(functionFragment: 'addPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositAndJoin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyEnable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdrawForOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDepositedNFTs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getJoinedPools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getJoinedPoolsInRange', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardCalculationData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvestMultiplePools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isEmergencyWithdrawnNFT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'join', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nft', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'operators', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'positions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renewPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'specialFeatureEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateHelper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateSpecialFeatureEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'weth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'AddPool(uint256,address,uint32,uint32,uint256)': EventFragment;
    'Deposit(address,uint256)': EventFragment;
    'EmergencyEnabled()': EventFragment;
    'EmergencyWithdraw(address,uint256)': EventFragment;
    'EmergencyWithdrawForOwner(address,uint256)': EventFragment;
    'Exit(address,uint256,uint256,uint256)': EventFragment;
    'Harvest(uint256,address,address,uint256)': EventFragment;
    'Join(uint256,uint256,uint256)': EventFragment;
    'LMHelperUpdated(address)': EventFragment;
    'RenewPool(uint256,uint32,uint32,uint256)': EventFragment;
    'SyncLiq(uint256,uint256,uint256)': EventFragment;
    'TransferAdmin(address)': EventFragment;
    'UpdateOperator(address,bool)': EventFragment;
    'UpdateSpecialFeatureEnabled(bool)': EventFragment;
    'Withdraw(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddPool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyEnabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdrawForOwner'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Exit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Harvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Join'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LMHelperUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RenewPool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SyncLiq'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferAdmin'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateOperator'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateSpecialFeatureEnabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface AddPoolEventObject {
  pId: BigNumber;
  poolAddress: string;
  startTime: number;
  endTime: number;
  feeTarget: BigNumber;
}
export type AddPoolEvent = TypedEvent<[BigNumber, string, number, number, BigNumber], AddPoolEventObject>;

export type AddPoolEventFilter = TypedEventFilter<AddPoolEvent>;

export interface DepositEventObject {
  sender: string;
  nftId: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EmergencyEnabledEventObject {}
export type EmergencyEnabledEvent = TypedEvent<[], EmergencyEnabledEventObject>;

export type EmergencyEnabledEventFilter = TypedEventFilter<EmergencyEnabledEvent>;

export interface EmergencyWithdrawEventObject {
  sender: string;
  nftId: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<[string, BigNumber], EmergencyWithdrawEventObject>;

export type EmergencyWithdrawEventFilter = TypedEventFilter<EmergencyWithdrawEvent>;

export interface EmergencyWithdrawForOwnerEventObject {
  reward: string;
  amount: BigNumber;
}
export type EmergencyWithdrawForOwnerEvent = TypedEvent<[string, BigNumber], EmergencyWithdrawForOwnerEventObject>;

export type EmergencyWithdrawForOwnerEventFilter = TypedEventFilter<EmergencyWithdrawForOwnerEvent>;

export interface ExitEventObject {
  to: string;
  nftId: BigNumber;
  pId: BigNumber;
  liq: BigNumber;
}
export type ExitEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], ExitEventObject>;

export type ExitEventFilter = TypedEventFilter<ExitEvent>;

export interface HarvestEventObject {
  nftId: BigNumber;
  to: string;
  reward: string;
  amount: BigNumber;
}
export type HarvestEvent = TypedEvent<[BigNumber, string, string, BigNumber], HarvestEventObject>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export interface JoinEventObject {
  nftId: BigNumber;
  pId: BigNumber;
  liq: BigNumber;
}
export type JoinEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], JoinEventObject>;

export type JoinEventFilter = TypedEventFilter<JoinEvent>;

export interface LMHelperUpdatedEventObject {
  helper: string;
}
export type LMHelperUpdatedEvent = TypedEvent<[string], LMHelperUpdatedEventObject>;

export type LMHelperUpdatedEventFilter = TypedEventFilter<LMHelperUpdatedEvent>;

export interface RenewPoolEventObject {
  pid: BigNumber;
  startTime: number;
  endTime: number;
  feeTarget: BigNumber;
}
export type RenewPoolEvent = TypedEvent<[BigNumber, number, number, BigNumber], RenewPoolEventObject>;

export type RenewPoolEventFilter = TypedEventFilter<RenewPoolEvent>;

export interface SyncLiqEventObject {
  nftId: BigNumber;
  pId: BigNumber;
  liq: BigNumber;
}
export type SyncLiqEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], SyncLiqEventObject>;

export type SyncLiqEventFilter = TypedEventFilter<SyncLiqEvent>;

export interface TransferAdminEventObject {
  admin: string;
}
export type TransferAdminEvent = TypedEvent<[string], TransferAdminEventObject>;

export type TransferAdminEventFilter = TypedEventFilter<TransferAdminEvent>;

export interface UpdateOperatorEventObject {
  user: string;
  grantOrRevoke: boolean;
}
export type UpdateOperatorEvent = TypedEvent<[string, boolean], UpdateOperatorEventObject>;

export type UpdateOperatorEventFilter = TypedEventFilter<UpdateOperatorEvent>;

export interface UpdateSpecialFeatureEnabledEventObject {
  enableOrDisable: boolean;
}
export type UpdateSpecialFeatureEnabledEvent = TypedEvent<[boolean], UpdateSpecialFeatureEnabledEventObject>;

export type UpdateSpecialFeatureEnabledEventFilter = TypedEventFilter<UpdateSpecialFeatureEnabledEvent>;

export interface WithdrawEventObject {
  sender: string;
  nftId: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface KyberswapElasticLm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KyberswapElasticLmInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPool(
      poolAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      rewardTokens: PromiseOrValue<string>[],
      rewardAmounts: PromiseOrValue<BigNumberish>[],
      feeTarget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    claimFee(
      nftIds: PromiseOrValue<BigNumberish>[],
      amount0Min: PromiseOrValue<BigNumberish>,
      amount1Min: PromiseOrValue<BigNumberish>,
      poolAddress: PromiseOrValue<string>,
      isReceiveNative: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deposit(
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositAndJoin(
      pId: PromiseOrValue<BigNumberish>,
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    emergencyEnable(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    emergencyEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    emergencyWithdraw(
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    emergencyWithdrawForOwner(
      rewards: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    exit(
      pId: PromiseOrValue<BigNumberish>,
      nftIds: PromiseOrValue<BigNumberish>[],
      liqs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getDepositedNFTs(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]] & { listNFTs: BigNumber[] }>;

    getJoinedPools(
      nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]] & { poolIds: BigNumber[] }>;

    getJoinedPoolsInRange(
      nftId: PromiseOrValue<BigNumberish>,
      fromIndex: PromiseOrValue<BigNumberish>,
      toIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]] & { poolIds: BigNumber[] }>;

    getPoolInfo(
      pId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, number, number, BigNumber, BigNumber, BigNumber, string[], BigNumber[]] & {
        poolAddress: string;
        startTime: number;
        endTime: number;
        totalSecondsClaimed: BigNumber;
        feeTarget: BigNumber;
        numStakes: BigNumber;
        rewardTokens: string[];
        rewardUnclaimeds: BigNumber[];
      }
    >;

    getRewardCalculationData(
      nftId: PromiseOrValue<BigNumberish>,
      pId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [IKyberSwapElasticLM.RewardCalculationDataStructOutput] & {
        data: IKyberSwapElasticLM.RewardCalculationDataStructOutput;
      }
    >;

    getUserInfo(
      nftId: PromiseOrValue<BigNumberish>,
      pId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber[], BigNumber[]] & {
        liquidity: BigNumber;
        rewardPending: BigNumber[];
        rewardLast: BigNumber[];
      }
    >;

    harvestMultiplePools(
      nftIds: PromiseOrValue<BigNumberish>[],
      datas: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isEmergencyWithdrawnNFT(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    join(
      pId: PromiseOrValue<BigNumberish>,
      nftIds: PromiseOrValue<BigNumberish>[],
      liqs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    nft(overrides?: CallOverrides): Promise<[string]>;

    operators(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, number, number, BigNumber, BigNumber, BigNumber] & {
        poolAddress: string;
        startTime: number;
        endTime: number;
        totalSecondsClaimed: BigNumber;
        feeTarget: BigNumber;
        numStakes: BigNumber;
      }
    >;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string, BigNumber] & { owner: string; liquidity: BigNumber }>;

    removeLiquidity(
      nftId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      amount0Min: PromiseOrValue<BigNumberish>,
      amount1Min: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      isReceiveNative: PromiseOrValue<boolean>,
      claimFeeAndRewards: [PromiseOrValue<boolean>, PromiseOrValue<boolean>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renewPool(
      pId: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      rewardAmounts: PromiseOrValue<BigNumberish>[],
      feeTarget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    specialFeatureEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    stakes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        secondsPerLiquidityLast: BigNumber;
        feeFirst: BigNumber;
        liquidity: BigNumber;
      }
    >;

    transferAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateHelper(
      _helper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateOperator(
      user: PromiseOrValue<string>,
      grantOrRevoke: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateSpecialFeatureEnabled(
      enableOrDisable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  addPool(
    poolAddress: PromiseOrValue<string>,
    startTime: PromiseOrValue<BigNumberish>,
    endTime: PromiseOrValue<BigNumberish>,
    rewardTokens: PromiseOrValue<string>[],
    rewardAmounts: PromiseOrValue<BigNumberish>[],
    feeTarget: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  claimFee(
    nftIds: PromiseOrValue<BigNumberish>[],
    amount0Min: PromiseOrValue<BigNumberish>,
    amount1Min: PromiseOrValue<BigNumberish>,
    poolAddress: PromiseOrValue<string>,
    isReceiveNative: PromiseOrValue<boolean>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deposit(
    nftIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositAndJoin(
    pId: PromiseOrValue<BigNumberish>,
    nftIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  emergencyEnable(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  emergencyEnabled(overrides?: CallOverrides): Promise<boolean>;

  emergencyWithdraw(
    nftIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  emergencyWithdrawForOwner(
    rewards: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  exit(
    pId: PromiseOrValue<BigNumberish>,
    nftIds: PromiseOrValue<BigNumberish>[],
    liqs: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getDepositedNFTs(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;

  getJoinedPools(nftId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber[]>;

  getJoinedPoolsInRange(
    nftId: PromiseOrValue<BigNumberish>,
    fromIndex: PromiseOrValue<BigNumberish>,
    toIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  getPoolInfo(
    pId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, number, number, BigNumber, BigNumber, BigNumber, string[], BigNumber[]] & {
      poolAddress: string;
      startTime: number;
      endTime: number;
      totalSecondsClaimed: BigNumber;
      feeTarget: BigNumber;
      numStakes: BigNumber;
      rewardTokens: string[];
      rewardUnclaimeds: BigNumber[];
    }
  >;

  getRewardCalculationData(
    nftId: PromiseOrValue<BigNumberish>,
    pId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<IKyberSwapElasticLM.RewardCalculationDataStructOutput>;

  getUserInfo(
    nftId: PromiseOrValue<BigNumberish>,
    pId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber[], BigNumber[]] & {
      liquidity: BigNumber;
      rewardPending: BigNumber[];
      rewardLast: BigNumber[];
    }
  >;

  harvestMultiplePools(
    nftIds: PromiseOrValue<BigNumberish>[],
    datas: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isEmergencyWithdrawnNFT(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  join(
    pId: PromiseOrValue<BigNumberish>,
    nftIds: PromiseOrValue<BigNumberish>[],
    liqs: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  nft(overrides?: CallOverrides): Promise<string>;

  operators(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  pools(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, number, number, BigNumber, BigNumber, BigNumber] & {
      poolAddress: string;
      startTime: number;
      endTime: number;
      totalSecondsClaimed: BigNumber;
      feeTarget: BigNumber;
      numStakes: BigNumber;
    }
  >;

  positions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[string, BigNumber] & { owner: string; liquidity: BigNumber }>;

  removeLiquidity(
    nftId: PromiseOrValue<BigNumberish>,
    liquidity: PromiseOrValue<BigNumberish>,
    amount0Min: PromiseOrValue<BigNumberish>,
    amount1Min: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    isReceiveNative: PromiseOrValue<boolean>,
    claimFeeAndRewards: [PromiseOrValue<boolean>, PromiseOrValue<boolean>],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renewPool(
    pId: PromiseOrValue<BigNumberish>,
    startTime: PromiseOrValue<BigNumberish>,
    endTime: PromiseOrValue<BigNumberish>,
    rewardAmounts: PromiseOrValue<BigNumberish>[],
    feeTarget: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  specialFeatureEnabled(overrides?: CallOverrides): Promise<boolean>;

  stakes(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      secondsPerLiquidityLast: BigNumber;
      feeFirst: BigNumber;
      liquidity: BigNumber;
    }
  >;

  transferAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateHelper(
    _helper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateOperator(
    user: PromiseOrValue<string>,
    grantOrRevoke: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateSpecialFeatureEnabled(
    enableOrDisable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdraw(
    nftIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    addPool(
      poolAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      rewardTokens: PromiseOrValue<string>[],
      rewardAmounts: PromiseOrValue<BigNumberish>[],
      feeTarget: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    claimFee(
      nftIds: PromiseOrValue<BigNumberish>[],
      amount0Min: PromiseOrValue<BigNumberish>,
      amount1Min: PromiseOrValue<BigNumberish>,
      poolAddress: PromiseOrValue<string>,
      isReceiveNative: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    deposit(nftIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;

    depositAndJoin(
      pId: PromiseOrValue<BigNumberish>,
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    emergencyEnable(overrides?: CallOverrides): Promise<void>;

    emergencyEnabled(overrides?: CallOverrides): Promise<boolean>;

    emergencyWithdraw(nftIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;

    emergencyWithdrawForOwner(
      rewards: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    exit(
      pId: PromiseOrValue<BigNumberish>,
      nftIds: PromiseOrValue<BigNumberish>[],
      liqs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    getDepositedNFTs(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;

    getJoinedPools(nftId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber[]>;

    getJoinedPoolsInRange(
      nftId: PromiseOrValue<BigNumberish>,
      fromIndex: PromiseOrValue<BigNumberish>,
      toIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    getPoolInfo(
      pId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, number, number, BigNumber, BigNumber, BigNumber, string[], BigNumber[]] & {
        poolAddress: string;
        startTime: number;
        endTime: number;
        totalSecondsClaimed: BigNumber;
        feeTarget: BigNumber;
        numStakes: BigNumber;
        rewardTokens: string[];
        rewardUnclaimeds: BigNumber[];
      }
    >;

    getRewardCalculationData(
      nftId: PromiseOrValue<BigNumberish>,
      pId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<IKyberSwapElasticLM.RewardCalculationDataStructOutput>;

    getUserInfo(
      nftId: PromiseOrValue<BigNumberish>,
      pId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber[], BigNumber[]] & {
        liquidity: BigNumber;
        rewardPending: BigNumber[];
        rewardLast: BigNumber[];
      }
    >;

    harvestMultiplePools(
      nftIds: PromiseOrValue<BigNumberish>[],
      datas: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    isEmergencyWithdrawnNFT(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    join(
      pId: PromiseOrValue<BigNumberish>,
      nftIds: PromiseOrValue<BigNumberish>[],
      liqs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    nft(overrides?: CallOverrides): Promise<string>;

    operators(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, number, number, BigNumber, BigNumber, BigNumber] & {
        poolAddress: string;
        startTime: number;
        endTime: number;
        totalSecondsClaimed: BigNumber;
        feeTarget: BigNumber;
        numStakes: BigNumber;
      }
    >;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string, BigNumber] & { owner: string; liquidity: BigNumber }>;

    removeLiquidity(
      nftId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      amount0Min: PromiseOrValue<BigNumberish>,
      amount1Min: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      isReceiveNative: PromiseOrValue<boolean>,
      claimFeeAndRewards: [PromiseOrValue<boolean>, PromiseOrValue<boolean>],
      overrides?: CallOverrides,
    ): Promise<void>;

    renewPool(
      pId: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      rewardAmounts: PromiseOrValue<BigNumberish>[],
      feeTarget: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    specialFeatureEnabled(overrides?: CallOverrides): Promise<boolean>;

    stakes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        secondsPerLiquidityLast: BigNumber;
        feeFirst: BigNumber;
        liquidity: BigNumber;
      }
    >;

    transferAdmin(_admin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateHelper(_helper: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateOperator(
      user: PromiseOrValue<string>,
      grantOrRevoke: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateSpecialFeatureEnabled(enableOrDisable: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdraw(nftIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'AddPool(uint256,address,uint32,uint32,uint256)'(
      pId?: PromiseOrValue<BigNumberish> | null,
      poolAddress?: null,
      startTime?: null,
      endTime?: null,
      feeTarget?: null,
    ): AddPoolEventFilter;
    AddPool(
      pId?: PromiseOrValue<BigNumberish> | null,
      poolAddress?: null,
      startTime?: null,
      endTime?: null,
      feeTarget?: null,
    ): AddPoolEventFilter;

    'Deposit(address,uint256)'(sender?: null, nftId?: PromiseOrValue<BigNumberish> | null): DepositEventFilter;
    Deposit(sender?: null, nftId?: PromiseOrValue<BigNumberish> | null): DepositEventFilter;

    'EmergencyEnabled()'(): EmergencyEnabledEventFilter;
    EmergencyEnabled(): EmergencyEnabledEventFilter;

    'EmergencyWithdraw(address,uint256)'(
      sender?: null,
      nftId?: PromiseOrValue<BigNumberish> | null,
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(sender?: null, nftId?: PromiseOrValue<BigNumberish> | null): EmergencyWithdrawEventFilter;

    'EmergencyWithdrawForOwner(address,uint256)'(
      reward?: null,
      amount?: PromiseOrValue<BigNumberish> | null,
    ): EmergencyWithdrawForOwnerEventFilter;
    EmergencyWithdrawForOwner(
      reward?: null,
      amount?: PromiseOrValue<BigNumberish> | null,
    ): EmergencyWithdrawForOwnerEventFilter;

    'Exit(address,uint256,uint256,uint256)'(
      to?: null,
      nftId?: PromiseOrValue<BigNumberish> | null,
      pId?: PromiseOrValue<BigNumberish> | null,
      liq?: PromiseOrValue<BigNumberish> | null,
    ): ExitEventFilter;
    Exit(
      to?: null,
      nftId?: PromiseOrValue<BigNumberish> | null,
      pId?: PromiseOrValue<BigNumberish> | null,
      liq?: PromiseOrValue<BigNumberish> | null,
    ): ExitEventFilter;

    'Harvest(uint256,address,address,uint256)'(
      nftId?: PromiseOrValue<BigNumberish> | null,
      to?: null,
      reward?: null,
      amount?: PromiseOrValue<BigNumberish> | null,
    ): HarvestEventFilter;
    Harvest(
      nftId?: PromiseOrValue<BigNumberish> | null,
      to?: null,
      reward?: null,
      amount?: PromiseOrValue<BigNumberish> | null,
    ): HarvestEventFilter;

    'Join(uint256,uint256,uint256)'(
      nftId?: PromiseOrValue<BigNumberish> | null,
      pId?: PromiseOrValue<BigNumberish> | null,
      liq?: PromiseOrValue<BigNumberish> | null,
    ): JoinEventFilter;
    Join(
      nftId?: PromiseOrValue<BigNumberish> | null,
      pId?: PromiseOrValue<BigNumberish> | null,
      liq?: PromiseOrValue<BigNumberish> | null,
    ): JoinEventFilter;

    'LMHelperUpdated(address)'(helper?: null): LMHelperUpdatedEventFilter;
    LMHelperUpdated(helper?: null): LMHelperUpdatedEventFilter;

    'RenewPool(uint256,uint32,uint32,uint256)'(
      pid?: PromiseOrValue<BigNumberish> | null,
      startTime?: null,
      endTime?: null,
      feeTarget?: null,
    ): RenewPoolEventFilter;
    RenewPool(
      pid?: PromiseOrValue<BigNumberish> | null,
      startTime?: null,
      endTime?: null,
      feeTarget?: null,
    ): RenewPoolEventFilter;

    'SyncLiq(uint256,uint256,uint256)'(
      nftId?: PromiseOrValue<BigNumberish> | null,
      pId?: PromiseOrValue<BigNumberish> | null,
      liq?: PromiseOrValue<BigNumberish> | null,
    ): SyncLiqEventFilter;
    SyncLiq(
      nftId?: PromiseOrValue<BigNumberish> | null,
      pId?: PromiseOrValue<BigNumberish> | null,
      liq?: PromiseOrValue<BigNumberish> | null,
    ): SyncLiqEventFilter;

    'TransferAdmin(address)'(admin?: PromiseOrValue<string> | null): TransferAdminEventFilter;
    TransferAdmin(admin?: PromiseOrValue<string> | null): TransferAdminEventFilter;

    'UpdateOperator(address,bool)'(
      user?: PromiseOrValue<string> | null,
      grantOrRevoke?: null,
    ): UpdateOperatorEventFilter;
    UpdateOperator(user?: PromiseOrValue<string> | null, grantOrRevoke?: null): UpdateOperatorEventFilter;

    'UpdateSpecialFeatureEnabled(bool)'(enableOrDisable?: null): UpdateSpecialFeatureEnabledEventFilter;
    UpdateSpecialFeatureEnabled(enableOrDisable?: null): UpdateSpecialFeatureEnabledEventFilter;

    'Withdraw(address,uint256)'(sender?: null, nftId?: PromiseOrValue<BigNumberish> | null): WithdrawEventFilter;
    Withdraw(sender?: null, nftId?: PromiseOrValue<BigNumberish> | null): WithdrawEventFilter;
  };

  estimateGas: {
    addPool(
      poolAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      rewardTokens: PromiseOrValue<string>[],
      rewardAmounts: PromiseOrValue<BigNumberish>[],
      feeTarget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    claimFee(
      nftIds: PromiseOrValue<BigNumberish>[],
      amount0Min: PromiseOrValue<BigNumberish>,
      amount1Min: PromiseOrValue<BigNumberish>,
      poolAddress: PromiseOrValue<string>,
      isReceiveNative: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deposit(
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositAndJoin(
      pId: PromiseOrValue<BigNumberish>,
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    emergencyEnable(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    emergencyEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    emergencyWithdrawForOwner(
      rewards: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    exit(
      pId: PromiseOrValue<BigNumberish>,
      nftIds: PromiseOrValue<BigNumberish>[],
      liqs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getDepositedNFTs(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getJoinedPools(nftId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getJoinedPoolsInRange(
      nftId: PromiseOrValue<BigNumberish>,
      fromIndex: PromiseOrValue<BigNumberish>,
      toIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPoolInfo(pId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getRewardCalculationData(
      nftId: PromiseOrValue<BigNumberish>,
      pId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserInfo(
      nftId: PromiseOrValue<BigNumberish>,
      pId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    harvestMultiplePools(
      nftIds: PromiseOrValue<BigNumberish>[],
      datas: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isEmergencyWithdrawnNFT(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    join(
      pId: PromiseOrValue<BigNumberish>,
      nftIds: PromiseOrValue<BigNumberish>[],
      liqs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<BigNumber>;

    operators(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    pools(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    positions(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      nftId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      amount0Min: PromiseOrValue<BigNumberish>,
      amount1Min: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      isReceiveNative: PromiseOrValue<boolean>,
      claimFeeAndRewards: [PromiseOrValue<boolean>, PromiseOrValue<boolean>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renewPool(
      pId: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      rewardAmounts: PromiseOrValue<BigNumberish>[],
      feeTarget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    specialFeatureEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    stakes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transferAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateHelper(
      _helper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateOperator(
      user: PromiseOrValue<string>,
      grantOrRevoke: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateSpecialFeatureEnabled(
      enableOrDisable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPool(
      poolAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      rewardTokens: PromiseOrValue<string>[],
      rewardAmounts: PromiseOrValue<BigNumberish>[],
      feeTarget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimFee(
      nftIds: PromiseOrValue<BigNumberish>[],
      amount0Min: PromiseOrValue<BigNumberish>,
      amount1Min: PromiseOrValue<BigNumberish>,
      poolAddress: PromiseOrValue<string>,
      isReceiveNative: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositAndJoin(
      pId: PromiseOrValue<BigNumberish>,
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    emergencyEnable(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    emergencyEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawForOwner(
      rewards: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    exit(
      pId: PromiseOrValue<BigNumberish>,
      nftIds: PromiseOrValue<BigNumberish>[],
      liqs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getDepositedNFTs(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getJoinedPools(nftId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getJoinedPoolsInRange(
      nftId: PromiseOrValue<BigNumberish>,
      fromIndex: PromiseOrValue<BigNumberish>,
      toIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPoolInfo(pId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardCalculationData(
      nftId: PromiseOrValue<BigNumberish>,
      pId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserInfo(
      nftId: PromiseOrValue<BigNumberish>,
      pId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    harvestMultiplePools(
      nftIds: PromiseOrValue<BigNumberish>[],
      datas: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isEmergencyWithdrawnNFT(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    join(
      pId: PromiseOrValue<BigNumberish>,
      nftIds: PromiseOrValue<BigNumberish>[],
      liqs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operators(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positions(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidity(
      nftId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      amount0Min: PromiseOrValue<BigNumberish>,
      amount1Min: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      isReceiveNative: PromiseOrValue<boolean>,
      claimFeeAndRewards: [PromiseOrValue<boolean>, PromiseOrValue<boolean>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renewPool(
      pId: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      rewardAmounts: PromiseOrValue<BigNumberish>[],
      feeTarget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    specialFeatureEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    transferAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateHelper(
      _helper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateOperator(
      user: PromiseOrValue<string>,
      grantOrRevoke: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateSpecialFeatureEnabled(
      enableOrDisable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      nftIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
