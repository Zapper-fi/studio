/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface TickReaderInterface extends utils.Interface {
  functions: {
    'getAllTicks(address)': FunctionFragment;
    'getNearestInitializedTicks(address,int24)': FunctionFragment;
    'getTicksInRange(address,int24,uint32)': FunctionFragment;
    'getTotalFeesOwedToPosition(address,address,uint256)': FunctionFragment;
    'getTotalRTokensOwedToPosition(address,address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'getAllTicks'
      | 'getNearestInitializedTicks'
      | 'getTicksInRange'
      | 'getTotalFeesOwedToPosition'
      | 'getTotalRTokensOwedToPosition',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'getAllTicks', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getNearestInitializedTicks',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getTicksInRange',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getTotalFeesOwedToPosition',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getTotalRTokensOwedToPosition',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'getAllTicks', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNearestInitializedTicks', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTicksInRange', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalFeesOwedToPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalRTokensOwedToPosition', data: BytesLike): Result;

  events: {};
}

export interface TickReader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TickReaderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAllTicks(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[number[]] & { allTicks: number[] }>;

    getNearestInitializedTicks(
      pool: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[number, number] & { previous: number; next: number }>;

    getTicksInRange(
      pool: PromiseOrValue<string>,
      startTick: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[number[]] & { allTicks: number[] }>;

    getTotalFeesOwedToPosition(
      posManager: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { token0Owed: BigNumber; token1Owed: BigNumber }>;

    getTotalRTokensOwedToPosition(
      posManager: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { rTokenOwed: BigNumber }>;
  };

  getAllTicks(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number[]>;

  getNearestInitializedTicks(
    pool: PromiseOrValue<string>,
    tick: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[number, number] & { previous: number; next: number }>;

  getTicksInRange(
    pool: PromiseOrValue<string>,
    startTick: PromiseOrValue<BigNumberish>,
    length: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<number[]>;

  getTotalFeesOwedToPosition(
    posManager: PromiseOrValue<string>,
    pool: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { token0Owed: BigNumber; token1Owed: BigNumber }>;

  getTotalRTokensOwedToPosition(
    posManager: PromiseOrValue<string>,
    pool: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  callStatic: {
    getAllTicks(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number[]>;

    getNearestInitializedTicks(
      pool: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[number, number] & { previous: number; next: number }>;

    getTicksInRange(
      pool: PromiseOrValue<string>,
      startTick: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<number[]>;

    getTotalFeesOwedToPosition(
      posManager: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { token0Owed: BigNumber; token1Owed: BigNumber }>;

    getTotalRTokensOwedToPosition(
      posManager: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getAllTicks(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getNearestInitializedTicks(
      pool: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getTicksInRange(
      pool: PromiseOrValue<string>,
      startTick: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getTotalFeesOwedToPosition(
      posManager: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getTotalRTokensOwedToPosition(
      posManager: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllTicks(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNearestInitializedTicks(
      pool: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTicksInRange(
      pool: PromiseOrValue<string>,
      startTick: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTotalFeesOwedToPosition(
      posManager: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTotalRTokensOwedToPosition(
      posManager: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
