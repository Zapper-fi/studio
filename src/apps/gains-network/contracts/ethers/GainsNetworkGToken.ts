/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace IGToken {
  export type LockedDepositStruct = {
    owner: PromiseOrValue<string>;
    shares: PromiseOrValue<BigNumberish>;
    assetsDeposited: PromiseOrValue<BigNumberish>;
    assetsDiscount: PromiseOrValue<BigNumberish>;
    atTimestamp: PromiseOrValue<BigNumberish>;
    lockDuration: PromiseOrValue<BigNumberish>;
  };

  export type LockedDepositStructOutput = [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    owner: string;
    shares: BigNumber;
    assetsDeposited: BigNumber;
    assetsDiscount: BigNumber;
    atTimestamp: BigNumber;
    lockDuration: BigNumber;
  };
}

export declare namespace GToken {
  export type GnsPriceProviderStruct = {
    addr: PromiseOrValue<string>;
    signature: PromiseOrValue<BytesLike>;
  };

  export type GnsPriceProviderStructOutput = [string, string] & {
    addr: string;
    signature: string;
  };

  export type ContractAddressesStruct = {
    asset: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
    manager: PromiseOrValue<string>;
    admin: PromiseOrValue<string>;
    gnsToken: PromiseOrValue<string>;
    lockedDepositNft: PromiseOrValue<string>;
    pnlHandler: PromiseOrValue<string>;
    openTradesPnlFeed: PromiseOrValue<string>;
    gnsPriceProvider: GToken.GnsPriceProviderStruct;
  };

  export type ContractAddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    GToken.GnsPriceProviderStructOutput,
  ] & {
    asset: string;
    owner: string;
    manager: string;
    admin: string;
    gnsToken: string;
    lockedDepositNft: string;
    pnlHandler: string;
    openTradesPnlFeed: string;
    gnsPriceProvider: GToken.GnsPriceProviderStructOutput;
  };
}

export interface GainsNetworkGTokenInterface extends utils.Interface {
  functions: {
    'MIN_LOCK_DURATION()': FunctionFragment;
    'accPnlPerToken()': FunctionFragment;
    'accPnlPerTokenUsed()': FunctionFragment;
    'accRewardsPerToken()': FunctionFragment;
    'admin()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'asset()': FunctionFragment;
    'assetsToDeplete()': FunctionFragment;
    'availableAssets()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'cancelWithdrawRequest(uint256,address,uint256)': FunctionFragment;
    'collateralizationP()': FunctionFragment;
    'convertToAssets(uint256)': FunctionFragment;
    'convertToShares(uint256)': FunctionFragment;
    'currentBalanceDai()': FunctionFragment;
    'currentEpoch()': FunctionFragment;
    'currentEpochPositiveOpenPnl()': FunctionFragment;
    'currentEpochStart()': FunctionFragment;
    'currentMaxSupply()': FunctionFragment;
    'dailyAccPnlDelta()': FunctionFragment;
    'dailyMintedGns()': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'deplete(uint256)': FunctionFragment;
    'deposit(uint256,address)': FunctionFragment;
    'depositWithDiscountAndLock(uint256,uint256,address)': FunctionFragment;
    'distributeReward(uint256)': FunctionFragment;
    'getLockedDeposit(uint256)': FunctionFragment;
    'gnsPriceProvider()': FunctionFragment;
    'gnsToken()': FunctionFragment;
    'gnsTokenToAssetsPrice()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initialize(string,string,(address,address,address,address,address,address,address,address,(address,bytes)),uint256,uint256,uint256,uint256[2],uint256,uint256,uint256,uint256,uint256)': FunctionFragment;
    'lastDailyAccPnlDeltaReset()': FunctionFragment;
    'lastDailyMintedGnsReset()': FunctionFragment;
    'lastMaxSupplyUpdate()': FunctionFragment;
    'lockDiscountP(uint256,uint256)': FunctionFragment;
    'lockedDepositNft()': FunctionFragment;
    'lockedDeposits(uint256)': FunctionFragment;
    'lockedDepositsCount()': FunctionFragment;
    'lossesBurnP()': FunctionFragment;
    'makeWithdrawRequest(uint256,address)': FunctionFragment;
    'manager()': FunctionFragment;
    'maxAccOpenPnlDelta()': FunctionFragment;
    'maxAccPnlPerToken()': FunctionFragment;
    'maxDailyAccPnlDelta()': FunctionFragment;
    'maxDeposit(address)': FunctionFragment;
    'maxDiscountP()': FunctionFragment;
    'maxDiscountThresholdP()': FunctionFragment;
    'maxGnsSupplyMintDailyP()': FunctionFragment;
    'maxMint(address)': FunctionFragment;
    'maxRedeem(address)': FunctionFragment;
    'maxSupplyIncreaseDailyP()': FunctionFragment;
    'maxWithdraw(address)': FunctionFragment;
    'mint(uint256,address)': FunctionFragment;
    'mintWithDiscountAndLock(uint256,uint256,address)': FunctionFragment;
    'name()': FunctionFragment;
    'openTradesPnlFeed()': FunctionFragment;
    'owner()': FunctionFragment;
    'pnlHandler()': FunctionFragment;
    'previewDeposit(uint256)': FunctionFragment;
    'previewMint(uint256)': FunctionFragment;
    'previewRedeem(uint256)': FunctionFragment;
    'previewWithdraw(uint256)': FunctionFragment;
    'receiveAssets(uint256,address)': FunctionFragment;
    'redeem(uint256,address,address)': FunctionFragment;
    'refill(uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'sendAssets(uint256,address)': FunctionFragment;
    'shareToAssetsPrice()': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalAssets()': FunctionFragment;
    'totalClosedPnl()': FunctionFragment;
    'totalDepleted()': FunctionFragment;
    'totalDepletedGns()': FunctionFragment;
    'totalDeposited()': FunctionFragment;
    'totalDiscounts()': FunctionFragment;
    'totalLiability()': FunctionFragment;
    'totalLockedDiscounts()': FunctionFragment;
    'totalRefilled()': FunctionFragment;
    'totalRefilledGns()': FunctionFragment;
    'totalRewards()': FunctionFragment;
    'totalSharesBeingWithdrawn(address)': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'tryNewOpenPnlRequestOrEpoch()': FunctionFragment;
    'tryResetDailyAccPnlDelta()': FunctionFragment;
    'tryUpdateCurrentMaxSupply()': FunctionFragment;
    'tvl()': FunctionFragment;
    'unlockDeposit(uint256,address)': FunctionFragment;
    'updateAccPnlPerTokenUsed(uint256,uint256)': FunctionFragment;
    'updateAdmin(address)': FunctionFragment;
    'updateGnsPriceProvider((address,bytes))': FunctionFragment;
    'updateLossesBurnP(uint256)': FunctionFragment;
    'updateManager(address)': FunctionFragment;
    'updateMaxAccOpenPnlDelta(uint256)': FunctionFragment;
    'updateMaxDailyAccPnlDelta(uint256)': FunctionFragment;
    'updateMaxDiscountP(uint256)': FunctionFragment;
    'updateMaxDiscountThresholdP(uint256)': FunctionFragment;
    'updateMaxGnsSupplyMintDailyP(uint256)': FunctionFragment;
    'updateMaxSupplyIncreaseDailyP(uint256)': FunctionFragment;
    'updateOpenTradesPnlFeed(address)': FunctionFragment;
    'updatePnlHandler(address)': FunctionFragment;
    'updateWithdrawLockThresholdsP(uint256[2])': FunctionFragment;
    'withdraw(uint256,address,address)': FunctionFragment;
    'withdrawEpochsTimelock()': FunctionFragment;
    'withdrawLockThresholdsP(uint256)': FunctionFragment;
    'withdrawRequests(address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'MIN_LOCK_DURATION'
      | 'accPnlPerToken'
      | 'accPnlPerTokenUsed'
      | 'accRewardsPerToken'
      | 'admin'
      | 'allowance'
      | 'approve'
      | 'asset'
      | 'assetsToDeplete'
      | 'availableAssets'
      | 'balanceOf'
      | 'cancelWithdrawRequest'
      | 'collateralizationP'
      | 'convertToAssets'
      | 'convertToShares'
      | 'currentBalanceDai'
      | 'currentEpoch'
      | 'currentEpochPositiveOpenPnl'
      | 'currentEpochStart'
      | 'currentMaxSupply'
      | 'dailyAccPnlDelta'
      | 'dailyMintedGns'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deplete'
      | 'deposit'
      | 'depositWithDiscountAndLock'
      | 'distributeReward'
      | 'getLockedDeposit'
      | 'gnsPriceProvider'
      | 'gnsToken'
      | 'gnsTokenToAssetsPrice'
      | 'increaseAllowance'
      | 'initialize'
      | 'lastDailyAccPnlDeltaReset'
      | 'lastDailyMintedGnsReset'
      | 'lastMaxSupplyUpdate'
      | 'lockDiscountP'
      | 'lockedDepositNft'
      | 'lockedDeposits'
      | 'lockedDepositsCount'
      | 'lossesBurnP'
      | 'makeWithdrawRequest'
      | 'manager'
      | 'maxAccOpenPnlDelta'
      | 'maxAccPnlPerToken'
      | 'maxDailyAccPnlDelta'
      | 'maxDeposit'
      | 'maxDiscountP'
      | 'maxDiscountThresholdP'
      | 'maxGnsSupplyMintDailyP'
      | 'maxMint'
      | 'maxRedeem'
      | 'maxSupplyIncreaseDailyP'
      | 'maxWithdraw'
      | 'mint'
      | 'mintWithDiscountAndLock'
      | 'name'
      | 'openTradesPnlFeed'
      | 'owner'
      | 'pnlHandler'
      | 'previewDeposit'
      | 'previewMint'
      | 'previewRedeem'
      | 'previewWithdraw'
      | 'receiveAssets'
      | 'redeem'
      | 'refill'
      | 'renounceOwnership'
      | 'sendAssets'
      | 'shareToAssetsPrice'
      | 'symbol'
      | 'totalAssets'
      | 'totalClosedPnl'
      | 'totalDepleted'
      | 'totalDepletedGns'
      | 'totalDeposited'
      | 'totalDiscounts'
      | 'totalLiability'
      | 'totalLockedDiscounts'
      | 'totalRefilled'
      | 'totalRefilledGns'
      | 'totalRewards'
      | 'totalSharesBeingWithdrawn'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'tryNewOpenPnlRequestOrEpoch'
      | 'tryResetDailyAccPnlDelta'
      | 'tryUpdateCurrentMaxSupply'
      | 'tvl'
      | 'unlockDeposit'
      | 'updateAccPnlPerTokenUsed'
      | 'updateAdmin'
      | 'updateGnsPriceProvider'
      | 'updateLossesBurnP'
      | 'updateManager'
      | 'updateMaxAccOpenPnlDelta'
      | 'updateMaxDailyAccPnlDelta'
      | 'updateMaxDiscountP'
      | 'updateMaxDiscountThresholdP'
      | 'updateMaxGnsSupplyMintDailyP'
      | 'updateMaxSupplyIncreaseDailyP'
      | 'updateOpenTradesPnlFeed'
      | 'updatePnlHandler'
      | 'updateWithdrawLockThresholdsP'
      | 'withdraw'
      | 'withdrawEpochsTimelock'
      | 'withdrawLockThresholdsP'
      | 'withdrawRequests',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'MIN_LOCK_DURATION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accPnlPerToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accPnlPerTokenUsed', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accRewardsPerToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'asset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'assetsToDeplete', values?: undefined): string;
  encodeFunctionData(functionFragment: 'availableAssets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'cancelWithdrawRequest',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'collateralizationP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'convertToAssets', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'convertToShares', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'currentBalanceDai', values?: undefined): string;
  encodeFunctionData(functionFragment: 'currentEpoch', values?: undefined): string;
  encodeFunctionData(functionFragment: 'currentEpochPositiveOpenPnl', values?: undefined): string;
  encodeFunctionData(functionFragment: 'currentEpochStart', values?: undefined): string;
  encodeFunctionData(functionFragment: 'currentMaxSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'dailyAccPnlDelta', values?: undefined): string;
  encodeFunctionData(functionFragment: 'dailyMintedGns', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'deplete', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositWithDiscountAndLock',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'distributeReward', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getLockedDeposit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'gnsPriceProvider', values?: undefined): string;
  encodeFunctionData(functionFragment: 'gnsToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'gnsTokenToAssetsPrice', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      GToken.ContractAddressesStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'lastDailyAccPnlDeltaReset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastDailyMintedGnsReset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastMaxSupplyUpdate', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'lockDiscountP',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'lockedDepositNft', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lockedDeposits', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'lockedDepositsCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lossesBurnP', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'makeWithdrawRequest',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'manager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxAccOpenPnlDelta', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxAccPnlPerToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxDailyAccPnlDelta', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxDeposit', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maxDiscountP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxDiscountThresholdP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxGnsSupplyMintDailyP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxMint', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maxRedeem', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maxSupplyIncreaseDailyP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxWithdraw', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'mint', values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'mintWithDiscountAndLock',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'openTradesPnlFeed', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pnlHandler', values?: undefined): string;
  encodeFunctionData(functionFragment: 'previewDeposit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'previewMint', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'previewRedeem', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'previewWithdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'receiveAssets',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'redeem',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'refill', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'sendAssets',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'shareToAssetsPrice', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalAssets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalClosedPnl', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalDepleted', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalDepletedGns', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalDeposited', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalDiscounts', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalLiability', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalLockedDiscounts', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalRefilled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalRefilledGns', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSharesBeingWithdrawn', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'tryNewOpenPnlRequestOrEpoch', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tryResetDailyAccPnlDelta', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tryUpdateCurrentMaxSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tvl', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'unlockDeposit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateAccPnlPerTokenUsed',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'updateAdmin', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateGnsPriceProvider', values: [GToken.GnsPriceProviderStruct]): string;
  encodeFunctionData(functionFragment: 'updateLossesBurnP', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateManager', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateMaxAccOpenPnlDelta', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateMaxDailyAccPnlDelta', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateMaxDiscountP', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateMaxDiscountThresholdP', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateMaxGnsSupplyMintDailyP', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateMaxSupplyIncreaseDailyP', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateOpenTradesPnlFeed', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updatePnlHandler', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'updateWithdrawLockThresholdsP',
    values: [[PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'withdrawEpochsTimelock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawLockThresholdsP', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'withdrawRequests',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'MIN_LOCK_DURATION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accPnlPerToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accPnlPerTokenUsed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accRewardsPerToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'assetsToDeplete', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'availableAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancelWithdrawRequest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateralizationP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertToAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertToShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentBalanceDai', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentEpochPositiveOpenPnl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentEpochStart', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentMaxSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dailyAccPnlDelta', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dailyMintedGns', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deplete', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositWithDiscountAndLock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distributeReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLockedDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gnsPriceProvider', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gnsToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gnsTokenToAssetsPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastDailyAccPnlDeltaReset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastDailyMintedGnsReset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastMaxSupplyUpdate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockDiscountP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockedDepositNft', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockedDeposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockedDepositsCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lossesBurnP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'makeWithdrawRequest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'manager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxAccOpenPnlDelta', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxAccPnlPerToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxDailyAccPnlDelta', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxDiscountP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxDiscountThresholdP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxGnsSupplyMintDailyP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRedeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxSupplyIncreaseDailyP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintWithDiscountAndLock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'openTradesPnlFeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pnlHandler', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewRedeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'receiveAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'refill', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sendAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'shareToAssetsPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalClosedPnl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalDepleted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalDepletedGns', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalDeposited', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalDiscounts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalLiability', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalLockedDiscounts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalRefilled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalRefilledGns', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSharesBeingWithdrawn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tryNewOpenPnlRequestOrEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tryResetDailyAccPnlDelta', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tryUpdateCurrentMaxSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tvl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unlockDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateAccPnlPerTokenUsed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateGnsPriceProvider', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateLossesBurnP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMaxAccOpenPnlDelta', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMaxDailyAccPnlDelta', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMaxDiscountP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMaxDiscountThresholdP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMaxGnsSupplyMintDailyP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMaxSupplyIncreaseDailyP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateOpenTradesPnlFeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePnlHandler', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateWithdrawLockThresholdsP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawEpochsTimelock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawLockThresholdsP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawRequests', data: BytesLike): Result;

  events: {
    'AccPnlPerTokenUsedUpdated(address,uint256,uint256,uint256,uint256,int256)': EventFragment;
    'AddressParamUpdated(string,address)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'AssetsReceived(address,address,uint256,uint256)': EventFragment;
    'AssetsSent(address,address,uint256)': EventFragment;
    'CurrentMaxSupplyUpdated(uint256)': EventFragment;
    'DailyAccPnlDeltaReset()': EventFragment;
    'Depleted(address,uint256,uint256)': EventFragment;
    'Deposit(address,address,uint256,uint256)': EventFragment;
    'DepositLocked(address,address,uint256,tuple)': EventFragment;
    'DepositUnlocked(address,address,address,uint256,tuple)': EventFragment;
    'GnsPriceProviderUpdated(tuple)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'NumberParamUpdated(string,uint256)': EventFragment;
    'OpenTradesPnlFeedCallFailed()': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Refilled(address,uint256,uint256)': EventFragment;
    'RewardDistributed(address,uint256)': EventFragment;
    'ShareToAssetsPriceUpdated(uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Withdraw(address,address,address,uint256,uint256)': EventFragment;
    'WithdrawCanceled(address,address,uint256,uint256,uint256)': EventFragment;
    'WithdrawLockThresholdsPUpdated(uint256[2])': EventFragment;
    'WithdrawRequested(address,address,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AccPnlPerTokenUsedUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AddressParamUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AssetsReceived'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AssetsSent'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CurrentMaxSupplyUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DailyAccPnlDeltaReset'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Depleted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositLocked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositUnlocked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GnsPriceProviderUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NumberParamUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OpenTradesPnlFeedCallFailed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Refilled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardDistributed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ShareToAssetsPriceUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawCanceled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawLockThresholdsPUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawRequested'): EventFragment;
}

export interface AccPnlPerTokenUsedUpdatedEventObject {
  sender: string;
  newEpoch: BigNumber;
  prevPositiveOpenPnl: BigNumber;
  newPositiveOpenPnl: BigNumber;
  newEpochPositiveOpenPnl: BigNumber;
  newAccPnlPerTokenUsed: BigNumber;
}
export type AccPnlPerTokenUsedUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  AccPnlPerTokenUsedUpdatedEventObject
>;

export type AccPnlPerTokenUsedUpdatedEventFilter = TypedEventFilter<AccPnlPerTokenUsedUpdatedEvent>;

export interface AddressParamUpdatedEventObject {
  name: string;
  newValue: string;
}
export type AddressParamUpdatedEvent = TypedEvent<[string, string], AddressParamUpdatedEventObject>;

export type AddressParamUpdatedEventFilter = TypedEventFilter<AddressParamUpdatedEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface AssetsReceivedEventObject {
  sender: string;
  user: string;
  assets: BigNumber;
  assetsLessDeplete: BigNumber;
}
export type AssetsReceivedEvent = TypedEvent<[string, string, BigNumber, BigNumber], AssetsReceivedEventObject>;

export type AssetsReceivedEventFilter = TypedEventFilter<AssetsReceivedEvent>;

export interface AssetsSentEventObject {
  sender: string;
  receiver: string;
  assets: BigNumber;
}
export type AssetsSentEvent = TypedEvent<[string, string, BigNumber], AssetsSentEventObject>;

export type AssetsSentEventFilter = TypedEventFilter<AssetsSentEvent>;

export interface CurrentMaxSupplyUpdatedEventObject {
  newValue: BigNumber;
}
export type CurrentMaxSupplyUpdatedEvent = TypedEvent<[BigNumber], CurrentMaxSupplyUpdatedEventObject>;

export type CurrentMaxSupplyUpdatedEventFilter = TypedEventFilter<CurrentMaxSupplyUpdatedEvent>;

export interface DailyAccPnlDeltaResetEventObject {}
export type DailyAccPnlDeltaResetEvent = TypedEvent<[], DailyAccPnlDeltaResetEventObject>;

export type DailyAccPnlDeltaResetEventFilter = TypedEventFilter<DailyAccPnlDeltaResetEvent>;

export interface DepletedEventObject {
  sender: string;
  assets: BigNumber;
  amountGns: BigNumber;
}
export type DepletedEvent = TypedEvent<[string, BigNumber, BigNumber], DepletedEventObject>;

export type DepletedEventFilter = TypedEventFilter<DepletedEvent>;

export interface DepositEventObject {
  sender: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type DepositEvent = TypedEvent<[string, string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DepositLockedEventObject {
  sender: string;
  owner: string;
  depositId: BigNumber;
  d: IGToken.LockedDepositStructOutput;
}
export type DepositLockedEvent = TypedEvent<
  [string, string, BigNumber, IGToken.LockedDepositStructOutput],
  DepositLockedEventObject
>;

export type DepositLockedEventFilter = TypedEventFilter<DepositLockedEvent>;

export interface DepositUnlockedEventObject {
  sender: string;
  receiver: string;
  owner: string;
  depositId: BigNumber;
  d: IGToken.LockedDepositStructOutput;
}
export type DepositUnlockedEvent = TypedEvent<
  [string, string, string, BigNumber, IGToken.LockedDepositStructOutput],
  DepositUnlockedEventObject
>;

export type DepositUnlockedEventFilter = TypedEventFilter<DepositUnlockedEvent>;

export interface GnsPriceProviderUpdatedEventObject {
  newValue: GToken.GnsPriceProviderStructOutput;
}
export type GnsPriceProviderUpdatedEvent = TypedEvent<
  [GToken.GnsPriceProviderStructOutput],
  GnsPriceProviderUpdatedEventObject
>;

export type GnsPriceProviderUpdatedEventFilter = TypedEventFilter<GnsPriceProviderUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NumberParamUpdatedEventObject {
  name: string;
  newValue: BigNumber;
}
export type NumberParamUpdatedEvent = TypedEvent<[string, BigNumber], NumberParamUpdatedEventObject>;

export type NumberParamUpdatedEventFilter = TypedEventFilter<NumberParamUpdatedEvent>;

export interface OpenTradesPnlFeedCallFailedEventObject {}
export type OpenTradesPnlFeedCallFailedEvent = TypedEvent<[], OpenTradesPnlFeedCallFailedEventObject>;

export type OpenTradesPnlFeedCallFailedEventFilter = TypedEventFilter<OpenTradesPnlFeedCallFailedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RefilledEventObject {
  sender: string;
  assets: BigNumber;
  amountGns: BigNumber;
}
export type RefilledEvent = TypedEvent<[string, BigNumber, BigNumber], RefilledEventObject>;

export type RefilledEventFilter = TypedEventFilter<RefilledEvent>;

export interface RewardDistributedEventObject {
  sender: string;
  assets: BigNumber;
}
export type RewardDistributedEvent = TypedEvent<[string, BigNumber], RewardDistributedEventObject>;

export type RewardDistributedEventFilter = TypedEventFilter<RewardDistributedEvent>;

export interface ShareToAssetsPriceUpdatedEventObject {
  newValue: BigNumber;
}
export type ShareToAssetsPriceUpdatedEvent = TypedEvent<[BigNumber], ShareToAssetsPriceUpdatedEventObject>;

export type ShareToAssetsPriceUpdatedEventFilter = TypedEventFilter<ShareToAssetsPriceUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawEventObject {
  sender: string;
  receiver: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawCanceledEventObject {
  sender: string;
  owner: string;
  shares: BigNumber;
  currEpoch: BigNumber;
  unlockEpoch: BigNumber;
}
export type WithdrawCanceledEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  WithdrawCanceledEventObject
>;

export type WithdrawCanceledEventFilter = TypedEventFilter<WithdrawCanceledEvent>;

export interface WithdrawLockThresholdsPUpdatedEventObject {
  newValue: [BigNumber, BigNumber];
}
export type WithdrawLockThresholdsPUpdatedEvent = TypedEvent<
  [[BigNumber, BigNumber]],
  WithdrawLockThresholdsPUpdatedEventObject
>;

export type WithdrawLockThresholdsPUpdatedEventFilter = TypedEventFilter<WithdrawLockThresholdsPUpdatedEvent>;

export interface WithdrawRequestedEventObject {
  sender: string;
  owner: string;
  shares: BigNumber;
  currEpoch: BigNumber;
  unlockEpoch: BigNumber;
}
export type WithdrawRequestedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  WithdrawRequestedEventObject
>;

export type WithdrawRequestedEventFilter = TypedEventFilter<WithdrawRequestedEvent>;

export interface GainsNetworkGToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GainsNetworkGTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MIN_LOCK_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    accPnlPerToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    accPnlPerTokenUsed(overrides?: CallOverrides): Promise<[BigNumber]>;

    accRewardsPerToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    assetsToDeplete(overrides?: CallOverrides): Promise<[BigNumber]>;

    availableAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelWithdrawRequest(
      shares: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      unlockEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    collateralizationP(overrides?: CallOverrides): Promise<[BigNumber]>;

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    currentBalanceDai(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentEpochPositiveOpenPnl(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentEpochStart(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentMaxSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    dailyAccPnlDelta(overrides?: CallOverrides): Promise<[BigNumber]>;

    dailyMintedGns(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deplete(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deposit(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositWithDiscountAndLock(
      assets: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    distributeReward(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getLockedDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[IGToken.LockedDepositStructOutput]>;

    gnsPriceProvider(overrides?: CallOverrides): Promise<[string, string] & { addr: string; signature: string }>;

    gnsToken(overrides?: CallOverrides): Promise<[string]>;

    gnsTokenToAssetsPrice(overrides?: CallOverrides): Promise<[BigNumber] & { price: BigNumber }>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _contractAddresses: GToken.ContractAddressesStruct,
      _MIN_LOCK_DURATION: PromiseOrValue<BigNumberish>,
      _maxAccOpenPnlDelta: PromiseOrValue<BigNumberish>,
      _maxDailyAccPnlDelta: PromiseOrValue<BigNumberish>,
      _withdrawLockThresholdsP: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _maxSupplyIncreaseDailyP: PromiseOrValue<BigNumberish>,
      _lossesBurnP: PromiseOrValue<BigNumberish>,
      _maxGnsSupplyMintDailyP: PromiseOrValue<BigNumberish>,
      _maxDiscountP: PromiseOrValue<BigNumberish>,
      _maxDiscountThresholdP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    lastDailyAccPnlDeltaReset(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastDailyMintedGnsReset(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastMaxSupplyUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockDiscountP(
      collatP: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    lockedDepositNft(overrides?: CallOverrides): Promise<[string]>;

    lockedDeposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        shares: BigNumber;
        assetsDeposited: BigNumber;
        assetsDiscount: BigNumber;
        atTimestamp: BigNumber;
        lockDuration: BigNumber;
      }
    >;

    lockedDepositsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    lossesBurnP(overrides?: CallOverrides): Promise<[BigNumber]>;

    makeWithdrawRequest(
      shares: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    maxAccOpenPnlDelta(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxAccPnlPerToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDailyAccPnlDelta(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDeposit(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDiscountP(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDiscountThresholdP(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxGnsSupplyMintDailyP(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxRedeem(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxSupplyIncreaseDailyP(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxWithdraw(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mintWithDiscountAndLock(
      shares: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    openTradesPnlFeed(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pnlHandler(overrides?: CallOverrides): Promise<[string]>;

    previewDeposit(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    previewMint(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    previewRedeem(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    previewWithdraw(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    receiveAssets(
      assets: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    refill(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    sendAssets(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    shareToAssetsPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalClosedPnl(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDepleted(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDepletedGns(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDeposited(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDiscounts(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLiability(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLockedDiscounts(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRefilled(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRefilledGns(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSharesBeingWithdrawn(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    tryNewOpenPnlRequestOrEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    tryResetDailyAccPnlDelta(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    tryUpdateCurrentMaxSupply(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    tvl(overrides?: CallOverrides): Promise<[BigNumber]>;

    unlockDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateAccPnlPerTokenUsed(
      prevPositiveOpenPnl: PromiseOrValue<BigNumberish>,
      newPositiveOpenPnl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateAdmin(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateGnsPriceProvider(
      newValue: GToken.GnsPriceProviderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateLossesBurnP(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateManager(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateMaxAccOpenPnlDelta(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateMaxDailyAccPnlDelta(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateMaxDiscountP(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateMaxDiscountThresholdP(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateMaxGnsSupplyMintDailyP(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateMaxSupplyIncreaseDailyP(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateOpenTradesPnlFeed(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updatePnlHandler(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateWithdrawLockThresholdsP(
      newValue: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawEpochsTimelock(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawLockThresholdsP(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;
  };

  MIN_LOCK_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  accPnlPerToken(overrides?: CallOverrides): Promise<BigNumber>;

  accPnlPerTokenUsed(overrides?: CallOverrides): Promise<BigNumber>;

  accRewardsPerToken(overrides?: CallOverrides): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  assetsToDeplete(overrides?: CallOverrides): Promise<BigNumber>;

  availableAssets(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  cancelWithdrawRequest(
    shares: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    unlockEpoch: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  collateralizationP(overrides?: CallOverrides): Promise<BigNumber>;

  convertToAssets(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  convertToShares(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  currentBalanceDai(overrides?: CallOverrides): Promise<BigNumber>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  currentEpochPositiveOpenPnl(overrides?: CallOverrides): Promise<BigNumber>;

  currentEpochStart(overrides?: CallOverrides): Promise<BigNumber>;

  currentMaxSupply(overrides?: CallOverrides): Promise<BigNumber>;

  dailyAccPnlDelta(overrides?: CallOverrides): Promise<BigNumber>;

  dailyMintedGns(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deplete(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deposit(
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositWithDiscountAndLock(
    assets: PromiseOrValue<BigNumberish>,
    lockDuration: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  distributeReward(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getLockedDeposit(
    depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<IGToken.LockedDepositStructOutput>;

  gnsPriceProvider(overrides?: CallOverrides): Promise<[string, string] & { addr: string; signature: string }>;

  gnsToken(overrides?: CallOverrides): Promise<string>;

  gnsTokenToAssetsPrice(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _contractAddresses: GToken.ContractAddressesStruct,
    _MIN_LOCK_DURATION: PromiseOrValue<BigNumberish>,
    _maxAccOpenPnlDelta: PromiseOrValue<BigNumberish>,
    _maxDailyAccPnlDelta: PromiseOrValue<BigNumberish>,
    _withdrawLockThresholdsP: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _maxSupplyIncreaseDailyP: PromiseOrValue<BigNumberish>,
    _lossesBurnP: PromiseOrValue<BigNumberish>,
    _maxGnsSupplyMintDailyP: PromiseOrValue<BigNumberish>,
    _maxDiscountP: PromiseOrValue<BigNumberish>,
    _maxDiscountThresholdP: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  lastDailyAccPnlDeltaReset(overrides?: CallOverrides): Promise<BigNumber>;

  lastDailyMintedGnsReset(overrides?: CallOverrides): Promise<BigNumber>;

  lastMaxSupplyUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  lockDiscountP(
    collatP: PromiseOrValue<BigNumberish>,
    lockDuration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  lockedDepositNft(overrides?: CallOverrides): Promise<string>;

  lockedDeposits(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      owner: string;
      shares: BigNumber;
      assetsDeposited: BigNumber;
      assetsDiscount: BigNumber;
      atTimestamp: BigNumber;
      lockDuration: BigNumber;
    }
  >;

  lockedDepositsCount(overrides?: CallOverrides): Promise<BigNumber>;

  lossesBurnP(overrides?: CallOverrides): Promise<BigNumber>;

  makeWithdrawRequest(
    shares: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  manager(overrides?: CallOverrides): Promise<string>;

  maxAccOpenPnlDelta(overrides?: CallOverrides): Promise<BigNumber>;

  maxAccPnlPerToken(overrides?: CallOverrides): Promise<BigNumber>;

  maxDailyAccPnlDelta(overrides?: CallOverrides): Promise<BigNumber>;

  maxDeposit(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  maxDiscountP(overrides?: CallOverrides): Promise<BigNumber>;

  maxDiscountThresholdP(overrides?: CallOverrides): Promise<BigNumber>;

  maxGnsSupplyMintDailyP(overrides?: CallOverrides): Promise<BigNumber>;

  maxMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  maxRedeem(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  maxSupplyIncreaseDailyP(overrides?: CallOverrides): Promise<BigNumber>;

  maxWithdraw(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    shares: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mintWithDiscountAndLock(
    shares: PromiseOrValue<BigNumberish>,
    lockDuration: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  openTradesPnlFeed(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pnlHandler(overrides?: CallOverrides): Promise<string>;

  previewDeposit(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  previewMint(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  previewRedeem(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  previewWithdraw(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  receiveAssets(
    assets: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  redeem(
    shares: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  refill(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  sendAssets(
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  shareToAssetsPrice(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalClosedPnl(overrides?: CallOverrides): Promise<BigNumber>;

  totalDepleted(overrides?: CallOverrides): Promise<BigNumber>;

  totalDepletedGns(overrides?: CallOverrides): Promise<BigNumber>;

  totalDeposited(overrides?: CallOverrides): Promise<BigNumber>;

  totalDiscounts(overrides?: CallOverrides): Promise<BigNumber>;

  totalLiability(overrides?: CallOverrides): Promise<BigNumber>;

  totalLockedDiscounts(overrides?: CallOverrides): Promise<BigNumber>;

  totalRefilled(overrides?: CallOverrides): Promise<BigNumber>;

  totalRefilledGns(overrides?: CallOverrides): Promise<BigNumber>;

  totalRewards(overrides?: CallOverrides): Promise<BigNumber>;

  totalSharesBeingWithdrawn(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  tryNewOpenPnlRequestOrEpoch(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  tryResetDailyAccPnlDelta(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  tryUpdateCurrentMaxSupply(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  tvl(overrides?: CallOverrides): Promise<BigNumber>;

  unlockDeposit(
    depositId: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateAccPnlPerTokenUsed(
    prevPositiveOpenPnl: PromiseOrValue<BigNumberish>,
    newPositiveOpenPnl: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateAdmin(
    newValue: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateGnsPriceProvider(
    newValue: GToken.GnsPriceProviderStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateLossesBurnP(
    newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateManager(
    newValue: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateMaxAccOpenPnlDelta(
    newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateMaxDailyAccPnlDelta(
    newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateMaxDiscountP(
    newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateMaxDiscountThresholdP(
    newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateMaxGnsSupplyMintDailyP(
    newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateMaxSupplyIncreaseDailyP(
    newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateOpenTradesPnlFeed(
    newValue: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updatePnlHandler(
    newValue: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateWithdrawLockThresholdsP(
    newValue: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawEpochsTimelock(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawLockThresholdsP(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  withdrawRequests(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  callStatic: {
    MIN_LOCK_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    accPnlPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    accPnlPerTokenUsed(overrides?: CallOverrides): Promise<BigNumber>;

    accRewardsPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    assetsToDeplete(overrides?: CallOverrides): Promise<BigNumber>;

    availableAssets(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    cancelWithdrawRequest(
      shares: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      unlockEpoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    collateralizationP(overrides?: CallOverrides): Promise<BigNumber>;

    convertToAssets(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    convertToShares(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    currentBalanceDai(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpochPositiveOpenPnl(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpochStart(overrides?: CallOverrides): Promise<BigNumber>;

    currentMaxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    dailyAccPnlDelta(overrides?: CallOverrides): Promise<BigNumber>;

    dailyMintedGns(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    deplete(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    deposit(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    depositWithDiscountAndLock(
      assets: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    distributeReward(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    getLockedDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<IGToken.LockedDepositStructOutput>;

    gnsPriceProvider(overrides?: CallOverrides): Promise<[string, string] & { addr: string; signature: string }>;

    gnsToken(overrides?: CallOverrides): Promise<string>;

    gnsTokenToAssetsPrice(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _contractAddresses: GToken.ContractAddressesStruct,
      _MIN_LOCK_DURATION: PromiseOrValue<BigNumberish>,
      _maxAccOpenPnlDelta: PromiseOrValue<BigNumberish>,
      _maxDailyAccPnlDelta: PromiseOrValue<BigNumberish>,
      _withdrawLockThresholdsP: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _maxSupplyIncreaseDailyP: PromiseOrValue<BigNumberish>,
      _lossesBurnP: PromiseOrValue<BigNumberish>,
      _maxGnsSupplyMintDailyP: PromiseOrValue<BigNumberish>,
      _maxDiscountP: PromiseOrValue<BigNumberish>,
      _maxDiscountThresholdP: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    lastDailyAccPnlDeltaReset(overrides?: CallOverrides): Promise<BigNumber>;

    lastDailyMintedGnsReset(overrides?: CallOverrides): Promise<BigNumber>;

    lastMaxSupplyUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    lockDiscountP(
      collatP: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lockedDepositNft(overrides?: CallOverrides): Promise<string>;

    lockedDeposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        shares: BigNumber;
        assetsDeposited: BigNumber;
        assetsDiscount: BigNumber;
        atTimestamp: BigNumber;
        lockDuration: BigNumber;
      }
    >;

    lockedDepositsCount(overrides?: CallOverrides): Promise<BigNumber>;

    lossesBurnP(overrides?: CallOverrides): Promise<BigNumber>;

    makeWithdrawRequest(
      shares: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    manager(overrides?: CallOverrides): Promise<string>;

    maxAccOpenPnlDelta(overrides?: CallOverrides): Promise<BigNumber>;

    maxAccPnlPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    maxDailyAccPnlDelta(overrides?: CallOverrides): Promise<BigNumber>;

    maxDeposit(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxDiscountP(overrides?: CallOverrides): Promise<BigNumber>;

    maxDiscountThresholdP(overrides?: CallOverrides): Promise<BigNumber>;

    maxGnsSupplyMintDailyP(overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxSupplyIncreaseDailyP(overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mintWithDiscountAndLock(
      shares: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    openTradesPnlFeed(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pnlHandler(overrides?: CallOverrides): Promise<string>;

    previewDeposit(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewMint(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewRedeem(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewWithdraw(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    receiveAssets(
      assets: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    refill(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sendAssets(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    shareToAssetsPrice(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalClosedPnl(overrides?: CallOverrides): Promise<BigNumber>;

    totalDepleted(overrides?: CallOverrides): Promise<BigNumber>;

    totalDepletedGns(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    totalDiscounts(overrides?: CallOverrides): Promise<BigNumber>;

    totalLiability(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedDiscounts(overrides?: CallOverrides): Promise<BigNumber>;

    totalRefilled(overrides?: CallOverrides): Promise<BigNumber>;

    totalRefilledGns(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalSharesBeingWithdrawn(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    tryNewOpenPnlRequestOrEpoch(overrides?: CallOverrides): Promise<void>;

    tryResetDailyAccPnlDelta(overrides?: CallOverrides): Promise<void>;

    tryUpdateCurrentMaxSupply(overrides?: CallOverrides): Promise<void>;

    tvl(overrides?: CallOverrides): Promise<BigNumber>;

    unlockDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateAccPnlPerTokenUsed(
      prevPositiveOpenPnl: PromiseOrValue<BigNumberish>,
      newPositiveOpenPnl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    updateAdmin(newValue: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateGnsPriceProvider(newValue: GToken.GnsPriceProviderStruct, overrides?: CallOverrides): Promise<void>;

    updateLossesBurnP(newValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateManager(newValue: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateMaxAccOpenPnlDelta(newValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateMaxDailyAccPnlDelta(newValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateMaxDiscountP(newValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateMaxDiscountThresholdP(newValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateMaxGnsSupplyMintDailyP(newValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateMaxSupplyIncreaseDailyP(newValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateOpenTradesPnlFeed(newValue: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updatePnlHandler(newValue: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateWithdrawLockThresholdsP(
      newValue: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides,
    ): Promise<void>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    withdrawEpochsTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawLockThresholdsP(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {
    'AccPnlPerTokenUsedUpdated(address,uint256,uint256,uint256,uint256,int256)'(
      sender?: PromiseOrValue<string> | null,
      newEpoch?: PromiseOrValue<BigNumberish> | null,
      prevPositiveOpenPnl?: null,
      newPositiveOpenPnl?: null,
      newEpochPositiveOpenPnl?: null,
      newAccPnlPerTokenUsed?: null,
    ): AccPnlPerTokenUsedUpdatedEventFilter;
    AccPnlPerTokenUsedUpdated(
      sender?: PromiseOrValue<string> | null,
      newEpoch?: PromiseOrValue<BigNumberish> | null,
      prevPositiveOpenPnl?: null,
      newPositiveOpenPnl?: null,
      newEpochPositiveOpenPnl?: null,
      newAccPnlPerTokenUsed?: null,
    ): AccPnlPerTokenUsedUpdatedEventFilter;

    'AddressParamUpdated(string,address)'(name?: null, newValue?: null): AddressParamUpdatedEventFilter;
    AddressParamUpdated(name?: null, newValue?: null): AddressParamUpdatedEventFilter;

    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'AssetsReceived(address,address,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      assets?: null,
      assetsLessDeplete?: null,
    ): AssetsReceivedEventFilter;
    AssetsReceived(
      sender?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      assets?: null,
      assetsLessDeplete?: null,
    ): AssetsReceivedEventFilter;

    'AssetsSent(address,address,uint256)'(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      assets?: null,
    ): AssetsSentEventFilter;
    AssetsSent(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      assets?: null,
    ): AssetsSentEventFilter;

    'CurrentMaxSupplyUpdated(uint256)'(newValue?: null): CurrentMaxSupplyUpdatedEventFilter;
    CurrentMaxSupplyUpdated(newValue?: null): CurrentMaxSupplyUpdatedEventFilter;

    'DailyAccPnlDeltaReset()'(): DailyAccPnlDeltaResetEventFilter;
    DailyAccPnlDeltaReset(): DailyAccPnlDeltaResetEventFilter;

    'Depleted(address,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      assets?: null,
      amountGns?: null,
    ): DepletedEventFilter;
    Depleted(sender?: PromiseOrValue<string> | null, assets?: null, amountGns?: null): DepletedEventFilter;

    'Deposit(address,address,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null,
    ): DepositEventFilter;
    Deposit(
      sender?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null,
    ): DepositEventFilter;

    'DepositLocked(address,address,uint256,tuple)'(
      sender?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      depositId?: null,
      d?: null,
    ): DepositLockedEventFilter;
    DepositLocked(
      sender?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      depositId?: null,
      d?: null,
    ): DepositLockedEventFilter;

    'DepositUnlocked(address,address,address,uint256,tuple)'(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      depositId?: null,
      d?: null,
    ): DepositUnlockedEventFilter;
    DepositUnlocked(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      depositId?: null,
      d?: null,
    ): DepositUnlockedEventFilter;

    'GnsPriceProviderUpdated(tuple)'(newValue?: null): GnsPriceProviderUpdatedEventFilter;
    GnsPriceProviderUpdated(newValue?: null): GnsPriceProviderUpdatedEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'NumberParamUpdated(string,uint256)'(name?: null, newValue?: null): NumberParamUpdatedEventFilter;
    NumberParamUpdated(name?: null, newValue?: null): NumberParamUpdatedEventFilter;

    'OpenTradesPnlFeedCallFailed()'(): OpenTradesPnlFeedCallFailedEventFilter;
    OpenTradesPnlFeedCallFailed(): OpenTradesPnlFeedCallFailedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'Refilled(address,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      assets?: null,
      amountGns?: null,
    ): RefilledEventFilter;
    Refilled(sender?: PromiseOrValue<string> | null, assets?: null, amountGns?: null): RefilledEventFilter;

    'RewardDistributed(address,uint256)'(
      sender?: PromiseOrValue<string> | null,
      assets?: null,
    ): RewardDistributedEventFilter;
    RewardDistributed(sender?: PromiseOrValue<string> | null, assets?: null): RewardDistributedEventFilter;

    'ShareToAssetsPriceUpdated(uint256)'(newValue?: null): ShareToAssetsPriceUpdatedEventFilter;
    ShareToAssetsPriceUpdated(newValue?: null): ShareToAssetsPriceUpdatedEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;

    'Withdraw(address,address,address,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null,
    ): WithdrawEventFilter;
    Withdraw(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null,
    ): WithdrawEventFilter;

    'WithdrawCanceled(address,address,uint256,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      shares?: null,
      currEpoch?: null,
      unlockEpoch?: PromiseOrValue<BigNumberish> | null,
    ): WithdrawCanceledEventFilter;
    WithdrawCanceled(
      sender?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      shares?: null,
      currEpoch?: null,
      unlockEpoch?: PromiseOrValue<BigNumberish> | null,
    ): WithdrawCanceledEventFilter;

    'WithdrawLockThresholdsPUpdated(uint256[2])'(newValue?: null): WithdrawLockThresholdsPUpdatedEventFilter;
    WithdrawLockThresholdsPUpdated(newValue?: null): WithdrawLockThresholdsPUpdatedEventFilter;

    'WithdrawRequested(address,address,uint256,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      shares?: null,
      currEpoch?: null,
      unlockEpoch?: PromiseOrValue<BigNumberish> | null,
    ): WithdrawRequestedEventFilter;
    WithdrawRequested(
      sender?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      shares?: null,
      currEpoch?: null,
      unlockEpoch?: PromiseOrValue<BigNumberish> | null,
    ): WithdrawRequestedEventFilter;
  };

  estimateGas: {
    MIN_LOCK_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    accPnlPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    accPnlPerTokenUsed(overrides?: CallOverrides): Promise<BigNumber>;

    accRewardsPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    assetsToDeplete(overrides?: CallOverrides): Promise<BigNumber>;

    availableAssets(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    cancelWithdrawRequest(
      shares: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      unlockEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    collateralizationP(overrides?: CallOverrides): Promise<BigNumber>;

    convertToAssets(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    convertToShares(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    currentBalanceDai(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpochPositiveOpenPnl(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpochStart(overrides?: CallOverrides): Promise<BigNumber>;

    currentMaxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    dailyAccPnlDelta(overrides?: CallOverrides): Promise<BigNumber>;

    dailyMintedGns(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deplete(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deposit(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositWithDiscountAndLock(
      assets: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    distributeReward(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getLockedDeposit(depositId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    gnsPriceProvider(overrides?: CallOverrides): Promise<BigNumber>;

    gnsToken(overrides?: CallOverrides): Promise<BigNumber>;

    gnsTokenToAssetsPrice(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _contractAddresses: GToken.ContractAddressesStruct,
      _MIN_LOCK_DURATION: PromiseOrValue<BigNumberish>,
      _maxAccOpenPnlDelta: PromiseOrValue<BigNumberish>,
      _maxDailyAccPnlDelta: PromiseOrValue<BigNumberish>,
      _withdrawLockThresholdsP: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _maxSupplyIncreaseDailyP: PromiseOrValue<BigNumberish>,
      _lossesBurnP: PromiseOrValue<BigNumberish>,
      _maxGnsSupplyMintDailyP: PromiseOrValue<BigNumberish>,
      _maxDiscountP: PromiseOrValue<BigNumberish>,
      _maxDiscountThresholdP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    lastDailyAccPnlDeltaReset(overrides?: CallOverrides): Promise<BigNumber>;

    lastDailyMintedGnsReset(overrides?: CallOverrides): Promise<BigNumber>;

    lastMaxSupplyUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    lockDiscountP(
      collatP: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lockedDepositNft(overrides?: CallOverrides): Promise<BigNumber>;

    lockedDeposits(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    lockedDepositsCount(overrides?: CallOverrides): Promise<BigNumber>;

    lossesBurnP(overrides?: CallOverrides): Promise<BigNumber>;

    makeWithdrawRequest(
      shares: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    maxAccOpenPnlDelta(overrides?: CallOverrides): Promise<BigNumber>;

    maxAccPnlPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    maxDailyAccPnlDelta(overrides?: CallOverrides): Promise<BigNumber>;

    maxDeposit(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxDiscountP(overrides?: CallOverrides): Promise<BigNumber>;

    maxDiscountThresholdP(overrides?: CallOverrides): Promise<BigNumber>;

    maxGnsSupplyMintDailyP(overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxSupplyIncreaseDailyP(overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mintWithDiscountAndLock(
      shares: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    openTradesPnlFeed(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pnlHandler(overrides?: CallOverrides): Promise<BigNumber>;

    previewDeposit(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewMint(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewRedeem(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewWithdraw(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    receiveAssets(
      assets: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    refill(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    sendAssets(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    shareToAssetsPrice(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalClosedPnl(overrides?: CallOverrides): Promise<BigNumber>;

    totalDepleted(overrides?: CallOverrides): Promise<BigNumber>;

    totalDepletedGns(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    totalDiscounts(overrides?: CallOverrides): Promise<BigNumber>;

    totalLiability(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedDiscounts(overrides?: CallOverrides): Promise<BigNumber>;

    totalRefilled(overrides?: CallOverrides): Promise<BigNumber>;

    totalRefilledGns(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalSharesBeingWithdrawn(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    tryNewOpenPnlRequestOrEpoch(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    tryResetDailyAccPnlDelta(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    tryUpdateCurrentMaxSupply(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    tvl(overrides?: CallOverrides): Promise<BigNumber>;

    unlockDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateAccPnlPerTokenUsed(
      prevPositiveOpenPnl: PromiseOrValue<BigNumberish>,
      newPositiveOpenPnl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateAdmin(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateGnsPriceProvider(
      newValue: GToken.GnsPriceProviderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateLossesBurnP(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateManager(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateMaxAccOpenPnlDelta(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateMaxDailyAccPnlDelta(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateMaxDiscountP(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateMaxDiscountThresholdP(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateMaxGnsSupplyMintDailyP(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateMaxSupplyIncreaseDailyP(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateOpenTradesPnlFeed(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updatePnlHandler(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateWithdrawLockThresholdsP(
      newValue: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawEpochsTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawLockThresholdsP(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MIN_LOCK_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accPnlPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accPnlPerTokenUsed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accRewardsPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetsToDeplete(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    availableAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelWithdrawRequest(
      shares: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      unlockEpoch: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    collateralizationP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertToAssets(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertToShares(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentBalanceDai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentEpochPositiveOpenPnl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentEpochStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentMaxSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dailyAccPnlDelta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dailyMintedGns(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deplete(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositWithDiscountAndLock(
      assets: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    distributeReward(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getLockedDeposit(depositId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gnsPriceProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gnsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gnsTokenToAssetsPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _contractAddresses: GToken.ContractAddressesStruct,
      _MIN_LOCK_DURATION: PromiseOrValue<BigNumberish>,
      _maxAccOpenPnlDelta: PromiseOrValue<BigNumberish>,
      _maxDailyAccPnlDelta: PromiseOrValue<BigNumberish>,
      _withdrawLockThresholdsP: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _maxSupplyIncreaseDailyP: PromiseOrValue<BigNumberish>,
      _lossesBurnP: PromiseOrValue<BigNumberish>,
      _maxGnsSupplyMintDailyP: PromiseOrValue<BigNumberish>,
      _maxDiscountP: PromiseOrValue<BigNumberish>,
      _maxDiscountThresholdP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    lastDailyAccPnlDeltaReset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastDailyMintedGnsReset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastMaxSupplyUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockDiscountP(
      collatP: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lockedDepositNft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedDeposits(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedDepositsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lossesBurnP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makeWithdrawRequest(
      shares: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxAccOpenPnlDelta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxAccPnlPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDailyAccPnlDelta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDeposit(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDiscountP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDiscountThresholdP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxGnsSupplyMintDailyP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRedeem(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSupplyIncreaseDailyP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxWithdraw(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mintWithDiscountAndLock(
      shares: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openTradesPnlFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pnlHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewDeposit(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewMint(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewRedeem(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewWithdraw(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiveAssets(
      assets: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    refill(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    sendAssets(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    shareToAssetsPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalClosedPnl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDepleted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDepletedGns(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDeposited(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDiscounts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLiability(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLockedDiscounts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRefilled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRefilledGns(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSharesBeingWithdrawn(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    tryNewOpenPnlRequestOrEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    tryResetDailyAccPnlDelta(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    tryUpdateCurrentMaxSupply(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    tvl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlockDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateAccPnlPerTokenUsed(
      prevPositiveOpenPnl: PromiseOrValue<BigNumberish>,
      newPositiveOpenPnl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateAdmin(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateGnsPriceProvider(
      newValue: GToken.GnsPriceProviderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateLossesBurnP(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateManager(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateMaxAccOpenPnlDelta(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateMaxDailyAccPnlDelta(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateMaxDiscountP(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateMaxDiscountThresholdP(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateMaxGnsSupplyMintDailyP(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateMaxSupplyIncreaseDailyP(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateOpenTradesPnlFeed(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updatePnlHandler(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateWithdrawLockThresholdsP(
      newValue: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawEpochsTimelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawLockThresholdsP(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    withdrawRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
