/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface StabilityPoolInterface extends utils.Interface {
  functions: {
    'BORROWING_FEE_FLOOR()': FunctionFragment;
    'CCR()': FunctionFragment;
    'DECIMAL_PRECISION()': FunctionFragment;
    'LUSD_GAS_COMPENSATION()': FunctionFragment;
    'MCR()': FunctionFragment;
    'MIN_NET_DEBT()': FunctionFragment;
    'NAME()': FunctionFragment;
    'P()': FunctionFragment;
    'PERCENT_DIVISOR()': FunctionFragment;
    'SCALE_FACTOR()': FunctionFragment;
    '_100pct()': FunctionFragment;
    'activePool()': FunctionFragment;
    'borrowerOperations()': FunctionFragment;
    'communityIssuance()': FunctionFragment;
    'currentEpoch()': FunctionFragment;
    'currentScale()': FunctionFragment;
    'defaultPool()': FunctionFragment;
    'depositSnapshots(address)': FunctionFragment;
    'deposits(address)': FunctionFragment;
    'epochToScaleToG(uint128,uint128)': FunctionFragment;
    'epochToScaleToSum(uint128,uint128)': FunctionFragment;
    'frontEndSnapshots(address)': FunctionFragment;
    'frontEndStakes(address)': FunctionFragment;
    'frontEnds(address)': FunctionFragment;
    'getCompoundedFrontEndStake(address)': FunctionFragment;
    'getCompoundedLUSDDeposit(address)': FunctionFragment;
    'getDepositorETHGain(address)': FunctionFragment;
    'getDepositorLQTYGain(address)': FunctionFragment;
    'getETH()': FunctionFragment;
    'getEntireSystemColl()': FunctionFragment;
    'getEntireSystemDebt()': FunctionFragment;
    'getFrontEndLQTYGain(address)': FunctionFragment;
    'getTotalLUSDDeposits()': FunctionFragment;
    'isOwner()': FunctionFragment;
    'lastETHError_Offset()': FunctionFragment;
    'lastLQTYError()': FunctionFragment;
    'lastLUSDLossError_Offset()': FunctionFragment;
    'lusdToken()': FunctionFragment;
    'offset(uint256,uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'priceFeed()': FunctionFragment;
    'provideToSP(uint256,address)': FunctionFragment;
    'registerFrontEnd(uint256)': FunctionFragment;
    'setAddresses(address,address,address,address,address,address,address)': FunctionFragment;
    'sortedTroves()': FunctionFragment;
    'troveManager()': FunctionFragment;
    'withdrawETHGainToTrove(address,address)': FunctionFragment;
    'withdrawFromSP(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BORROWING_FEE_FLOOR'
      | 'CCR'
      | 'DECIMAL_PRECISION'
      | 'LUSD_GAS_COMPENSATION'
      | 'MCR'
      | 'MIN_NET_DEBT'
      | 'NAME'
      | 'P'
      | 'PERCENT_DIVISOR'
      | 'SCALE_FACTOR'
      | '_100pct'
      | 'activePool'
      | 'borrowerOperations'
      | 'communityIssuance'
      | 'currentEpoch'
      | 'currentScale'
      | 'defaultPool'
      | 'depositSnapshots'
      | 'deposits'
      | 'epochToScaleToG'
      | 'epochToScaleToSum'
      | 'frontEndSnapshots'
      | 'frontEndStakes'
      | 'frontEnds'
      | 'getCompoundedFrontEndStake'
      | 'getCompoundedLUSDDeposit'
      | 'getDepositorETHGain'
      | 'getDepositorLQTYGain'
      | 'getETH'
      | 'getEntireSystemColl'
      | 'getEntireSystemDebt'
      | 'getFrontEndLQTYGain'
      | 'getTotalLUSDDeposits'
      | 'isOwner'
      | 'lastETHError_Offset'
      | 'lastLQTYError'
      | 'lastLUSDLossError_Offset'
      | 'lusdToken'
      | 'offset'
      | 'owner'
      | 'priceFeed'
      | 'provideToSP'
      | 'registerFrontEnd'
      | 'setAddresses'
      | 'sortedTroves'
      | 'troveManager'
      | 'withdrawETHGainToTrove'
      | 'withdrawFromSP',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BORROWING_FEE_FLOOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'CCR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DECIMAL_PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'LUSD_GAS_COMPENSATION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MCR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MIN_NET_DEBT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'NAME', values?: undefined): string;
  encodeFunctionData(functionFragment: 'P', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PERCENT_DIVISOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SCALE_FACTOR', values?: undefined): string;
  encodeFunctionData(functionFragment: '_100pct', values?: undefined): string;
  encodeFunctionData(functionFragment: 'activePool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'borrowerOperations', values?: undefined): string;
  encodeFunctionData(functionFragment: 'communityIssuance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'currentEpoch', values?: undefined): string;
  encodeFunctionData(functionFragment: 'currentScale', values?: undefined): string;
  encodeFunctionData(functionFragment: 'defaultPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'depositSnapshots', values: [string]): string;
  encodeFunctionData(functionFragment: 'deposits', values: [string]): string;
  encodeFunctionData(functionFragment: 'epochToScaleToG', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'epochToScaleToSum', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'frontEndSnapshots', values: [string]): string;
  encodeFunctionData(functionFragment: 'frontEndStakes', values: [string]): string;
  encodeFunctionData(functionFragment: 'frontEnds', values: [string]): string;
  encodeFunctionData(functionFragment: 'getCompoundedFrontEndStake', values: [string]): string;
  encodeFunctionData(functionFragment: 'getCompoundedLUSDDeposit', values: [string]): string;
  encodeFunctionData(functionFragment: 'getDepositorETHGain', values: [string]): string;
  encodeFunctionData(functionFragment: 'getDepositorLQTYGain', values: [string]): string;
  encodeFunctionData(functionFragment: 'getETH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getEntireSystemColl', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getEntireSystemDebt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getFrontEndLQTYGain', values: [string]): string;
  encodeFunctionData(functionFragment: 'getTotalLUSDDeposits', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastETHError_Offset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastLQTYError', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastLUSDLossError_Offset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lusdToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'offset', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'priceFeed', values?: undefined): string;
  encodeFunctionData(functionFragment: 'provideToSP', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'registerFrontEnd', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'setAddresses',
    values: [string, string, string, string, string, string, string],
  ): string;
  encodeFunctionData(functionFragment: 'sortedTroves', values?: undefined): string;
  encodeFunctionData(functionFragment: 'troveManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawETHGainToTrove', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'withdrawFromSP', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'BORROWING_FEE_FLOOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'CCR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DECIMAL_PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'LUSD_GAS_COMPENSATION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MCR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MIN_NET_DEBT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'NAME', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'P', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PERCENT_DIVISOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SCALE_FACTOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_100pct', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowerOperations', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'communityIssuance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentScale', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'defaultPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositSnapshots', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'epochToScaleToG', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'epochToScaleToSum', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'frontEndSnapshots', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'frontEndStakes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'frontEnds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCompoundedFrontEndStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCompoundedLUSDDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDepositorETHGain', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDepositorLQTYGain', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEntireSystemColl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEntireSystemDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFrontEndLQTYGain', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalLUSDDeposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastETHError_Offset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastLQTYError', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastLUSDLossError_Offset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lusdToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'offset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'priceFeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'provideToSP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerFrontEnd', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAddresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sortedTroves', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'troveManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawETHGainToTrove', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawFromSP', data: BytesLike): Result;

  events: {
    'ActivePoolAddressChanged(address)': EventFragment;
    'BorrowerOperationsAddressChanged(address)': EventFragment;
    'CommunityIssuanceAddressChanged(address)': EventFragment;
    'DefaultPoolAddressChanged(address)': EventFragment;
    'DepositSnapshotUpdated(address,uint256,uint256,uint256)': EventFragment;
    'ETHGainWithdrawn(address,uint256,uint256)': EventFragment;
    'EpochUpdated(uint128)': EventFragment;
    'EtherSent(address,uint256)': EventFragment;
    'FrontEndRegistered(address,uint256)': EventFragment;
    'FrontEndSnapshotUpdated(address,uint256,uint256)': EventFragment;
    'FrontEndStakeChanged(address,uint256,address)': EventFragment;
    'FrontEndTagSet(address,address)': EventFragment;
    'G_Updated(uint256,uint128,uint128)': EventFragment;
    'LQTYPaidToDepositor(address,uint256)': EventFragment;
    'LQTYPaidToFrontEnd(address,uint256)': EventFragment;
    'LUSDTokenAddressChanged(address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'P_Updated(uint256)': EventFragment;
    'PriceFeedAddressChanged(address)': EventFragment;
    'S_Updated(uint256,uint128,uint128)': EventFragment;
    'ScaleUpdated(uint128)': EventFragment;
    'SortedTrovesAddressChanged(address)': EventFragment;
    'StabilityPoolETHBalanceUpdated(uint256)': EventFragment;
    'StabilityPoolLUSDBalanceUpdated(uint256)': EventFragment;
    'TroveManagerAddressChanged(address)': EventFragment;
    'UserDepositChanged(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ActivePoolAddressChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BorrowerOperationsAddressChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CommunityIssuanceAddressChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DefaultPoolAddressChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositSnapshotUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ETHGainWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EpochUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EtherSent'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FrontEndRegistered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FrontEndSnapshotUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FrontEndStakeChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FrontEndTagSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'G_Updated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LQTYPaidToDepositor'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LQTYPaidToFrontEnd'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LUSDTokenAddressChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'P_Updated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PriceFeedAddressChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'S_Updated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ScaleUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SortedTrovesAddressChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StabilityPoolETHBalanceUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StabilityPoolLUSDBalanceUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TroveManagerAddressChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UserDepositChanged'): EventFragment;
}

export interface ActivePoolAddressChangedEventObject {
  _newActivePoolAddress: string;
}
export type ActivePoolAddressChangedEvent = TypedEvent<[string], ActivePoolAddressChangedEventObject>;

export type ActivePoolAddressChangedEventFilter = TypedEventFilter<ActivePoolAddressChangedEvent>;

export interface BorrowerOperationsAddressChangedEventObject {
  _newBorrowerOperationsAddress: string;
}
export type BorrowerOperationsAddressChangedEvent = TypedEvent<[string], BorrowerOperationsAddressChangedEventObject>;

export type BorrowerOperationsAddressChangedEventFilter = TypedEventFilter<BorrowerOperationsAddressChangedEvent>;

export interface CommunityIssuanceAddressChangedEventObject {
  _newCommunityIssuanceAddress: string;
}
export type CommunityIssuanceAddressChangedEvent = TypedEvent<[string], CommunityIssuanceAddressChangedEventObject>;

export type CommunityIssuanceAddressChangedEventFilter = TypedEventFilter<CommunityIssuanceAddressChangedEvent>;

export interface DefaultPoolAddressChangedEventObject {
  _newDefaultPoolAddress: string;
}
export type DefaultPoolAddressChangedEvent = TypedEvent<[string], DefaultPoolAddressChangedEventObject>;

export type DefaultPoolAddressChangedEventFilter = TypedEventFilter<DefaultPoolAddressChangedEvent>;

export interface DepositSnapshotUpdatedEventObject {
  _depositor: string;
  _P: BigNumber;
  _S: BigNumber;
  _G: BigNumber;
}
export type DepositSnapshotUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  DepositSnapshotUpdatedEventObject
>;

export type DepositSnapshotUpdatedEventFilter = TypedEventFilter<DepositSnapshotUpdatedEvent>;

export interface ETHGainWithdrawnEventObject {
  _depositor: string;
  _ETH: BigNumber;
  _LUSDLoss: BigNumber;
}
export type ETHGainWithdrawnEvent = TypedEvent<[string, BigNumber, BigNumber], ETHGainWithdrawnEventObject>;

export type ETHGainWithdrawnEventFilter = TypedEventFilter<ETHGainWithdrawnEvent>;

export interface EpochUpdatedEventObject {
  _currentEpoch: BigNumber;
}
export type EpochUpdatedEvent = TypedEvent<[BigNumber], EpochUpdatedEventObject>;

export type EpochUpdatedEventFilter = TypedEventFilter<EpochUpdatedEvent>;

export interface EtherSentEventObject {
  _to: string;
  _amount: BigNumber;
}
export type EtherSentEvent = TypedEvent<[string, BigNumber], EtherSentEventObject>;

export type EtherSentEventFilter = TypedEventFilter<EtherSentEvent>;

export interface FrontEndRegisteredEventObject {
  _frontEnd: string;
  _kickbackRate: BigNumber;
}
export type FrontEndRegisteredEvent = TypedEvent<[string, BigNumber], FrontEndRegisteredEventObject>;

export type FrontEndRegisteredEventFilter = TypedEventFilter<FrontEndRegisteredEvent>;

export interface FrontEndSnapshotUpdatedEventObject {
  _frontEnd: string;
  _P: BigNumber;
  _G: BigNumber;
}
export type FrontEndSnapshotUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  FrontEndSnapshotUpdatedEventObject
>;

export type FrontEndSnapshotUpdatedEventFilter = TypedEventFilter<FrontEndSnapshotUpdatedEvent>;

export interface FrontEndStakeChangedEventObject {
  _frontEnd: string;
  _newFrontEndStake: BigNumber;
  _depositor: string;
}
export type FrontEndStakeChangedEvent = TypedEvent<[string, BigNumber, string], FrontEndStakeChangedEventObject>;

export type FrontEndStakeChangedEventFilter = TypedEventFilter<FrontEndStakeChangedEvent>;

export interface FrontEndTagSetEventObject {
  _depositor: string;
  _frontEnd: string;
}
export type FrontEndTagSetEvent = TypedEvent<[string, string], FrontEndTagSetEventObject>;

export type FrontEndTagSetEventFilter = TypedEventFilter<FrontEndTagSetEvent>;

export interface G_UpdatedEventObject {
  _G: BigNumber;
  _epoch: BigNumber;
  _scale: BigNumber;
}
export type G_UpdatedEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], G_UpdatedEventObject>;

export type G_UpdatedEventFilter = TypedEventFilter<G_UpdatedEvent>;

export interface LQTYPaidToDepositorEventObject {
  _depositor: string;
  _LQTY: BigNumber;
}
export type LQTYPaidToDepositorEvent = TypedEvent<[string, BigNumber], LQTYPaidToDepositorEventObject>;

export type LQTYPaidToDepositorEventFilter = TypedEventFilter<LQTYPaidToDepositorEvent>;

export interface LQTYPaidToFrontEndEventObject {
  _frontEnd: string;
  _LQTY: BigNumber;
}
export type LQTYPaidToFrontEndEvent = TypedEvent<[string, BigNumber], LQTYPaidToFrontEndEventObject>;

export type LQTYPaidToFrontEndEventFilter = TypedEventFilter<LQTYPaidToFrontEndEvent>;

export interface LUSDTokenAddressChangedEventObject {
  _newLUSDTokenAddress: string;
}
export type LUSDTokenAddressChangedEvent = TypedEvent<[string], LUSDTokenAddressChangedEventObject>;

export type LUSDTokenAddressChangedEventFilter = TypedEventFilter<LUSDTokenAddressChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface P_UpdatedEventObject {
  _P: BigNumber;
}
export type P_UpdatedEvent = TypedEvent<[BigNumber], P_UpdatedEventObject>;

export type P_UpdatedEventFilter = TypedEventFilter<P_UpdatedEvent>;

export interface PriceFeedAddressChangedEventObject {
  _newPriceFeedAddress: string;
}
export type PriceFeedAddressChangedEvent = TypedEvent<[string], PriceFeedAddressChangedEventObject>;

export type PriceFeedAddressChangedEventFilter = TypedEventFilter<PriceFeedAddressChangedEvent>;

export interface S_UpdatedEventObject {
  _S: BigNumber;
  _epoch: BigNumber;
  _scale: BigNumber;
}
export type S_UpdatedEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], S_UpdatedEventObject>;

export type S_UpdatedEventFilter = TypedEventFilter<S_UpdatedEvent>;

export interface ScaleUpdatedEventObject {
  _currentScale: BigNumber;
}
export type ScaleUpdatedEvent = TypedEvent<[BigNumber], ScaleUpdatedEventObject>;

export type ScaleUpdatedEventFilter = TypedEventFilter<ScaleUpdatedEvent>;

export interface SortedTrovesAddressChangedEventObject {
  _newSortedTrovesAddress: string;
}
export type SortedTrovesAddressChangedEvent = TypedEvent<[string], SortedTrovesAddressChangedEventObject>;

export type SortedTrovesAddressChangedEventFilter = TypedEventFilter<SortedTrovesAddressChangedEvent>;

export interface StabilityPoolETHBalanceUpdatedEventObject {
  _newBalance: BigNumber;
}
export type StabilityPoolETHBalanceUpdatedEvent = TypedEvent<[BigNumber], StabilityPoolETHBalanceUpdatedEventObject>;

export type StabilityPoolETHBalanceUpdatedEventFilter = TypedEventFilter<StabilityPoolETHBalanceUpdatedEvent>;

export interface StabilityPoolLUSDBalanceUpdatedEventObject {
  _newBalance: BigNumber;
}
export type StabilityPoolLUSDBalanceUpdatedEvent = TypedEvent<[BigNumber], StabilityPoolLUSDBalanceUpdatedEventObject>;

export type StabilityPoolLUSDBalanceUpdatedEventFilter = TypedEventFilter<StabilityPoolLUSDBalanceUpdatedEvent>;

export interface TroveManagerAddressChangedEventObject {
  _newTroveManagerAddress: string;
}
export type TroveManagerAddressChangedEvent = TypedEvent<[string], TroveManagerAddressChangedEventObject>;

export type TroveManagerAddressChangedEventFilter = TypedEventFilter<TroveManagerAddressChangedEvent>;

export interface UserDepositChangedEventObject {
  _depositor: string;
  _newDeposit: BigNumber;
}
export type UserDepositChangedEvent = TypedEvent<[string, BigNumber], UserDepositChangedEventObject>;

export type UserDepositChangedEventFilter = TypedEventFilter<UserDepositChangedEvent>;

export interface StabilityPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StabilityPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BORROWING_FEE_FLOOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    CCR(overrides?: CallOverrides): Promise<[BigNumber]>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    LUSD_GAS_COMPENSATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MCR(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_NET_DEBT(overrides?: CallOverrides): Promise<[BigNumber]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    P(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERCENT_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    SCALE_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    _100pct(overrides?: CallOverrides): Promise<[BigNumber]>;

    activePool(overrides?: CallOverrides): Promise<[string]>;

    borrowerOperations(overrides?: CallOverrides): Promise<[string]>;

    communityIssuance(overrides?: CallOverrides): Promise<[string]>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentScale(overrides?: CallOverrides): Promise<[BigNumber]>;

    defaultPool(overrides?: CallOverrides): Promise<[string]>;

    depositSnapshots(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        S: BigNumber;
        P: BigNumber;
        G: BigNumber;
        scale: BigNumber;
        epoch: BigNumber;
      }
    >;

    deposits(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, string] & { initialValue: BigNumber; frontEndTag: string }>;

    epochToScaleToG(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    epochToScaleToSum(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    frontEndSnapshots(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        S: BigNumber;
        P: BigNumber;
        G: BigNumber;
        scale: BigNumber;
        epoch: BigNumber;
      }
    >;

    frontEndStakes(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    frontEnds(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, boolean] & { kickbackRate: BigNumber; registered: boolean }>;

    getCompoundedFrontEndStake(_frontEnd: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getCompoundedLUSDDeposit(_depositor: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getDepositorETHGain(_depositor: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getDepositorLQTYGain(_depositor: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getETH(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEntireSystemColl(overrides?: CallOverrides): Promise<[BigNumber] & { entireSystemColl: BigNumber }>;

    getEntireSystemDebt(overrides?: CallOverrides): Promise<[BigNumber] & { entireSystemDebt: BigNumber }>;

    getFrontEndLQTYGain(_frontEnd: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalLUSDDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    lastETHError_Offset(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastLQTYError(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastLUSDLossError_Offset(overrides?: CallOverrides): Promise<[BigNumber]>;

    lusdToken(overrides?: CallOverrides): Promise<[string]>;

    offset(
      _debtToOffset: BigNumberish,
      _collToAdd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    provideToSP(
      _amount: BigNumberish,
      _frontEndTag: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    registerFrontEnd(
      _kickbackRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setAddresses(
      _borrowerOperationsAddress: string,
      _troveManagerAddress: string,
      _activePoolAddress: string,
      _lusdTokenAddress: string,
      _sortedTrovesAddress: string,
      _priceFeedAddress: string,
      _communityIssuanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    sortedTroves(overrides?: CallOverrides): Promise<[string]>;

    troveManager(overrides?: CallOverrides): Promise<[string]>;

    withdrawETHGainToTrove(
      _upperHint: string,
      _lowerHint: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawFromSP(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  BORROWING_FEE_FLOOR(overrides?: CallOverrides): Promise<BigNumber>;

  CCR(overrides?: CallOverrides): Promise<BigNumber>;

  DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  LUSD_GAS_COMPENSATION(overrides?: CallOverrides): Promise<BigNumber>;

  MCR(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_NET_DEBT(overrides?: CallOverrides): Promise<BigNumber>;

  NAME(overrides?: CallOverrides): Promise<string>;

  P(overrides?: CallOverrides): Promise<BigNumber>;

  PERCENT_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  SCALE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  _100pct(overrides?: CallOverrides): Promise<BigNumber>;

  activePool(overrides?: CallOverrides): Promise<string>;

  borrowerOperations(overrides?: CallOverrides): Promise<string>;

  communityIssuance(overrides?: CallOverrides): Promise<string>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  currentScale(overrides?: CallOverrides): Promise<BigNumber>;

  defaultPool(overrides?: CallOverrides): Promise<string>;

  depositSnapshots(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      S: BigNumber;
      P: BigNumber;
      G: BigNumber;
      scale: BigNumber;
      epoch: BigNumber;
    }
  >;

  deposits(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, string] & { initialValue: BigNumber; frontEndTag: string }>;

  epochToScaleToG(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  epochToScaleToSum(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  frontEndSnapshots(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      S: BigNumber;
      P: BigNumber;
      G: BigNumber;
      scale: BigNumber;
      epoch: BigNumber;
    }
  >;

  frontEndStakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  frontEnds(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, boolean] & { kickbackRate: BigNumber; registered: boolean }>;

  getCompoundedFrontEndStake(_frontEnd: string, overrides?: CallOverrides): Promise<BigNumber>;

  getCompoundedLUSDDeposit(_depositor: string, overrides?: CallOverrides): Promise<BigNumber>;

  getDepositorETHGain(_depositor: string, overrides?: CallOverrides): Promise<BigNumber>;

  getDepositorLQTYGain(_depositor: string, overrides?: CallOverrides): Promise<BigNumber>;

  getETH(overrides?: CallOverrides): Promise<BigNumber>;

  getEntireSystemColl(overrides?: CallOverrides): Promise<BigNumber>;

  getEntireSystemDebt(overrides?: CallOverrides): Promise<BigNumber>;

  getFrontEndLQTYGain(_frontEnd: string, overrides?: CallOverrides): Promise<BigNumber>;

  getTotalLUSDDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  lastETHError_Offset(overrides?: CallOverrides): Promise<BigNumber>;

  lastLQTYError(overrides?: CallOverrides): Promise<BigNumber>;

  lastLUSDLossError_Offset(overrides?: CallOverrides): Promise<BigNumber>;

  lusdToken(overrides?: CallOverrides): Promise<string>;

  offset(
    _debtToOffset: BigNumberish,
    _collToAdd: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  provideToSP(
    _amount: BigNumberish,
    _frontEndTag: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  registerFrontEnd(
    _kickbackRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setAddresses(
    _borrowerOperationsAddress: string,
    _troveManagerAddress: string,
    _activePoolAddress: string,
    _lusdTokenAddress: string,
    _sortedTrovesAddress: string,
    _priceFeedAddress: string,
    _communityIssuanceAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  sortedTroves(overrides?: CallOverrides): Promise<string>;

  troveManager(overrides?: CallOverrides): Promise<string>;

  withdrawETHGainToTrove(
    _upperHint: string,
    _lowerHint: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawFromSP(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    BORROWING_FEE_FLOOR(overrides?: CallOverrides): Promise<BigNumber>;

    CCR(overrides?: CallOverrides): Promise<BigNumber>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    LUSD_GAS_COMPENSATION(overrides?: CallOverrides): Promise<BigNumber>;

    MCR(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_NET_DEBT(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<string>;

    P(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    SCALE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    _100pct(overrides?: CallOverrides): Promise<BigNumber>;

    activePool(overrides?: CallOverrides): Promise<string>;

    borrowerOperations(overrides?: CallOverrides): Promise<string>;

    communityIssuance(overrides?: CallOverrides): Promise<string>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    currentScale(overrides?: CallOverrides): Promise<BigNumber>;

    defaultPool(overrides?: CallOverrides): Promise<string>;

    depositSnapshots(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        S: BigNumber;
        P: BigNumber;
        G: BigNumber;
        scale: BigNumber;
        epoch: BigNumber;
      }
    >;

    deposits(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, string] & { initialValue: BigNumber; frontEndTag: string }>;

    epochToScaleToG(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    epochToScaleToSum(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    frontEndSnapshots(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        S: BigNumber;
        P: BigNumber;
        G: BigNumber;
        scale: BigNumber;
        epoch: BigNumber;
      }
    >;

    frontEndStakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    frontEnds(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, boolean] & { kickbackRate: BigNumber; registered: boolean }>;

    getCompoundedFrontEndStake(_frontEnd: string, overrides?: CallOverrides): Promise<BigNumber>;

    getCompoundedLUSDDeposit(_depositor: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDepositorETHGain(_depositor: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDepositorLQTYGain(_depositor: string, overrides?: CallOverrides): Promise<BigNumber>;

    getETH(overrides?: CallOverrides): Promise<BigNumber>;

    getEntireSystemColl(overrides?: CallOverrides): Promise<BigNumber>;

    getEntireSystemDebt(overrides?: CallOverrides): Promise<BigNumber>;

    getFrontEndLQTYGain(_frontEnd: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalLUSDDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    lastETHError_Offset(overrides?: CallOverrides): Promise<BigNumber>;

    lastLQTYError(overrides?: CallOverrides): Promise<BigNumber>;

    lastLUSDLossError_Offset(overrides?: CallOverrides): Promise<BigNumber>;

    lusdToken(overrides?: CallOverrides): Promise<string>;

    offset(_debtToOffset: BigNumberish, _collToAdd: BigNumberish, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    provideToSP(_amount: BigNumberish, _frontEndTag: string, overrides?: CallOverrides): Promise<void>;

    registerFrontEnd(_kickbackRate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setAddresses(
      _borrowerOperationsAddress: string,
      _troveManagerAddress: string,
      _activePoolAddress: string,
      _lusdTokenAddress: string,
      _sortedTrovesAddress: string,
      _priceFeedAddress: string,
      _communityIssuanceAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    sortedTroves(overrides?: CallOverrides): Promise<string>;

    troveManager(overrides?: CallOverrides): Promise<string>;

    withdrawETHGainToTrove(_upperHint: string, _lowerHint: string, overrides?: CallOverrides): Promise<void>;

    withdrawFromSP(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'ActivePoolAddressChanged(address)'(_newActivePoolAddress?: null): ActivePoolAddressChangedEventFilter;
    ActivePoolAddressChanged(_newActivePoolAddress?: null): ActivePoolAddressChangedEventFilter;

    'BorrowerOperationsAddressChanged(address)'(
      _newBorrowerOperationsAddress?: null,
    ): BorrowerOperationsAddressChangedEventFilter;
    BorrowerOperationsAddressChanged(_newBorrowerOperationsAddress?: null): BorrowerOperationsAddressChangedEventFilter;

    'CommunityIssuanceAddressChanged(address)'(
      _newCommunityIssuanceAddress?: null,
    ): CommunityIssuanceAddressChangedEventFilter;
    CommunityIssuanceAddressChanged(_newCommunityIssuanceAddress?: null): CommunityIssuanceAddressChangedEventFilter;

    'DefaultPoolAddressChanged(address)'(_newDefaultPoolAddress?: null): DefaultPoolAddressChangedEventFilter;
    DefaultPoolAddressChanged(_newDefaultPoolAddress?: null): DefaultPoolAddressChangedEventFilter;

    'DepositSnapshotUpdated(address,uint256,uint256,uint256)'(
      _depositor?: string | null,
      _P?: null,
      _S?: null,
      _G?: null,
    ): DepositSnapshotUpdatedEventFilter;
    DepositSnapshotUpdated(
      _depositor?: string | null,
      _P?: null,
      _S?: null,
      _G?: null,
    ): DepositSnapshotUpdatedEventFilter;

    'ETHGainWithdrawn(address,uint256,uint256)'(
      _depositor?: string | null,
      _ETH?: null,
      _LUSDLoss?: null,
    ): ETHGainWithdrawnEventFilter;
    ETHGainWithdrawn(_depositor?: string | null, _ETH?: null, _LUSDLoss?: null): ETHGainWithdrawnEventFilter;

    'EpochUpdated(uint128)'(_currentEpoch?: null): EpochUpdatedEventFilter;
    EpochUpdated(_currentEpoch?: null): EpochUpdatedEventFilter;

    'EtherSent(address,uint256)'(_to?: null, _amount?: null): EtherSentEventFilter;
    EtherSent(_to?: null, _amount?: null): EtherSentEventFilter;

    'FrontEndRegistered(address,uint256)'(
      _frontEnd?: string | null,
      _kickbackRate?: null,
    ): FrontEndRegisteredEventFilter;
    FrontEndRegistered(_frontEnd?: string | null, _kickbackRate?: null): FrontEndRegisteredEventFilter;

    'FrontEndSnapshotUpdated(address,uint256,uint256)'(
      _frontEnd?: string | null,
      _P?: null,
      _G?: null,
    ): FrontEndSnapshotUpdatedEventFilter;
    FrontEndSnapshotUpdated(_frontEnd?: string | null, _P?: null, _G?: null): FrontEndSnapshotUpdatedEventFilter;

    'FrontEndStakeChanged(address,uint256,address)'(
      _frontEnd?: string | null,
      _newFrontEndStake?: null,
      _depositor?: null,
    ): FrontEndStakeChangedEventFilter;
    FrontEndStakeChanged(
      _frontEnd?: string | null,
      _newFrontEndStake?: null,
      _depositor?: null,
    ): FrontEndStakeChangedEventFilter;

    'FrontEndTagSet(address,address)'(_depositor?: string | null, _frontEnd?: string | null): FrontEndTagSetEventFilter;
    FrontEndTagSet(_depositor?: string | null, _frontEnd?: string | null): FrontEndTagSetEventFilter;

    'G_Updated(uint256,uint128,uint128)'(_G?: null, _epoch?: null, _scale?: null): G_UpdatedEventFilter;
    G_Updated(_G?: null, _epoch?: null, _scale?: null): G_UpdatedEventFilter;

    'LQTYPaidToDepositor(address,uint256)'(_depositor?: string | null, _LQTY?: null): LQTYPaidToDepositorEventFilter;
    LQTYPaidToDepositor(_depositor?: string | null, _LQTY?: null): LQTYPaidToDepositorEventFilter;

    'LQTYPaidToFrontEnd(address,uint256)'(_frontEnd?: string | null, _LQTY?: null): LQTYPaidToFrontEndEventFilter;
    LQTYPaidToFrontEnd(_frontEnd?: string | null, _LQTY?: null): LQTYPaidToFrontEndEventFilter;

    'LUSDTokenAddressChanged(address)'(_newLUSDTokenAddress?: null): LUSDTokenAddressChangedEventFilter;
    LUSDTokenAddressChanged(_newLUSDTokenAddress?: null): LUSDTokenAddressChangedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    'P_Updated(uint256)'(_P?: null): P_UpdatedEventFilter;
    P_Updated(_P?: null): P_UpdatedEventFilter;

    'PriceFeedAddressChanged(address)'(_newPriceFeedAddress?: null): PriceFeedAddressChangedEventFilter;
    PriceFeedAddressChanged(_newPriceFeedAddress?: null): PriceFeedAddressChangedEventFilter;

    'S_Updated(uint256,uint128,uint128)'(_S?: null, _epoch?: null, _scale?: null): S_UpdatedEventFilter;
    S_Updated(_S?: null, _epoch?: null, _scale?: null): S_UpdatedEventFilter;

    'ScaleUpdated(uint128)'(_currentScale?: null): ScaleUpdatedEventFilter;
    ScaleUpdated(_currentScale?: null): ScaleUpdatedEventFilter;

    'SortedTrovesAddressChanged(address)'(_newSortedTrovesAddress?: null): SortedTrovesAddressChangedEventFilter;
    SortedTrovesAddressChanged(_newSortedTrovesAddress?: null): SortedTrovesAddressChangedEventFilter;

    'StabilityPoolETHBalanceUpdated(uint256)'(_newBalance?: null): StabilityPoolETHBalanceUpdatedEventFilter;
    StabilityPoolETHBalanceUpdated(_newBalance?: null): StabilityPoolETHBalanceUpdatedEventFilter;

    'StabilityPoolLUSDBalanceUpdated(uint256)'(_newBalance?: null): StabilityPoolLUSDBalanceUpdatedEventFilter;
    StabilityPoolLUSDBalanceUpdated(_newBalance?: null): StabilityPoolLUSDBalanceUpdatedEventFilter;

    'TroveManagerAddressChanged(address)'(_newTroveManagerAddress?: null): TroveManagerAddressChangedEventFilter;
    TroveManagerAddressChanged(_newTroveManagerAddress?: null): TroveManagerAddressChangedEventFilter;

    'UserDepositChanged(address,uint256)'(
      _depositor?: string | null,
      _newDeposit?: null,
    ): UserDepositChangedEventFilter;
    UserDepositChanged(_depositor?: string | null, _newDeposit?: null): UserDepositChangedEventFilter;
  };

  estimateGas: {
    BORROWING_FEE_FLOOR(overrides?: CallOverrides): Promise<BigNumber>;

    CCR(overrides?: CallOverrides): Promise<BigNumber>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    LUSD_GAS_COMPENSATION(overrides?: CallOverrides): Promise<BigNumber>;

    MCR(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_NET_DEBT(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    P(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    SCALE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    _100pct(overrides?: CallOverrides): Promise<BigNumber>;

    activePool(overrides?: CallOverrides): Promise<BigNumber>;

    borrowerOperations(overrides?: CallOverrides): Promise<BigNumber>;

    communityIssuance(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    currentScale(overrides?: CallOverrides): Promise<BigNumber>;

    defaultPool(overrides?: CallOverrides): Promise<BigNumber>;

    depositSnapshots(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    epochToScaleToG(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    epochToScaleToSum(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    frontEndSnapshots(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    frontEndStakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    frontEnds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getCompoundedFrontEndStake(_frontEnd: string, overrides?: CallOverrides): Promise<BigNumber>;

    getCompoundedLUSDDeposit(_depositor: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDepositorETHGain(_depositor: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDepositorLQTYGain(_depositor: string, overrides?: CallOverrides): Promise<BigNumber>;

    getETH(overrides?: CallOverrides): Promise<BigNumber>;

    getEntireSystemColl(overrides?: CallOverrides): Promise<BigNumber>;

    getEntireSystemDebt(overrides?: CallOverrides): Promise<BigNumber>;

    getFrontEndLQTYGain(_frontEnd: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalLUSDDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    lastETHError_Offset(overrides?: CallOverrides): Promise<BigNumber>;

    lastLQTYError(overrides?: CallOverrides): Promise<BigNumber>;

    lastLUSDLossError_Offset(overrides?: CallOverrides): Promise<BigNumber>;

    lusdToken(overrides?: CallOverrides): Promise<BigNumber>;

    offset(
      _debtToOffset: BigNumberish,
      _collToAdd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    provideToSP(
      _amount: BigNumberish,
      _frontEndTag: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    registerFrontEnd(
      _kickbackRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setAddresses(
      _borrowerOperationsAddress: string,
      _troveManagerAddress: string,
      _activePoolAddress: string,
      _lusdTokenAddress: string,
      _sortedTrovesAddress: string,
      _priceFeedAddress: string,
      _communityIssuanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    sortedTroves(overrides?: CallOverrides): Promise<BigNumber>;

    troveManager(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawETHGainToTrove(
      _upperHint: string,
      _lowerHint: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawFromSP(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BORROWING_FEE_FLOOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CCR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LUSD_GAS_COMPENSATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MCR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_NET_DEBT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    P(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERCENT_DIVISOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SCALE_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _100pct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowerOperations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    communityIssuance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentScale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositSnapshots(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochToScaleToG(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochToScaleToSum(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    frontEndSnapshots(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    frontEndStakes(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    frontEnds(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCompoundedFrontEndStake(_frontEnd: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCompoundedLUSDDeposit(_depositor: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepositorETHGain(_depositor: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepositorLQTYGain(_depositor: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEntireSystemColl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEntireSystemDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFrontEndLQTYGain(_frontEnd: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalLUSDDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastETHError_Offset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastLQTYError(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastLUSDLossError_Offset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lusdToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offset(
      _debtToOffset: BigNumberish,
      _collToAdd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    provideToSP(
      _amount: BigNumberish,
      _frontEndTag: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    registerFrontEnd(
      _kickbackRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _borrowerOperationsAddress: string,
      _troveManagerAddress: string,
      _activePoolAddress: string,
      _lusdTokenAddress: string,
      _sortedTrovesAddress: string,
      _priceFeedAddress: string,
      _communityIssuanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    sortedTroves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    troveManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawETHGainToTrove(
      _upperHint: string,
      _lowerHint: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawFromSP(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
