/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace ISynthereumMultiLpLiquidityPoolEvents {
  export type MintValuesStruct = {
    totalCollateral: PromiseOrValue<BigNumberish>;
    exchangeAmount: PromiseOrValue<BigNumberish>;
    feeAmount: PromiseOrValue<BigNumberish>;
    numTokens: PromiseOrValue<BigNumberish>;
  };

  export type MintValuesStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {
    totalCollateral: BigNumber;
    exchangeAmount: BigNumber;
    feeAmount: BigNumber;
    numTokens: BigNumber;
  };

  export type RedeemValuesStruct = {
    numTokens: PromiseOrValue<BigNumberish>;
    exchangeAmount: PromiseOrValue<BigNumberish>;
    feeAmount: PromiseOrValue<BigNumberish>;
    collateralAmount: PromiseOrValue<BigNumberish>;
  };

  export type RedeemValuesStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {
    numTokens: BigNumber;
    exchangeAmount: BigNumber;
    feeAmount: BigNumber;
    collateralAmount: BigNumber;
  };
}

export declare namespace ISynthereumMultiLpLiquidityPool {
  export type RolesStruct = {
    admin: PromiseOrValue<string>;
    maintainer: PromiseOrValue<string>;
  };

  export type RolesStructOutput = [string, string] & {
    admin: string;
    maintainer: string;
  };

  export type InitializationParamsStruct = {
    finder: PromiseOrValue<string>;
    version: PromiseOrValue<BigNumberish>;
    collateralToken: PromiseOrValue<string>;
    syntheticToken: PromiseOrValue<string>;
    roles: ISynthereumMultiLpLiquidityPool.RolesStruct;
    fee: PromiseOrValue<BigNumberish>;
    priceIdentifier: PromiseOrValue<BytesLike>;
    overCollateralRequirement: PromiseOrValue<BigNumberish>;
    liquidationReward: PromiseOrValue<BigNumberish>;
    lendingModuleId: PromiseOrValue<string>;
  };

  export type InitializationParamsStructOutput = [
    string,
    number,
    string,
    string,
    ISynthereumMultiLpLiquidityPool.RolesStructOutput,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
  ] & {
    finder: string;
    version: number;
    collateralToken: string;
    syntheticToken: string;
    roles: ISynthereumMultiLpLiquidityPool.RolesStructOutput;
    fee: BigNumber;
    priceIdentifier: string;
    overCollateralRequirement: BigNumber;
    liquidationReward: BigNumber;
    lendingModuleId: string;
  };

  export type MintParamsStruct = {
    minNumTokens: PromiseOrValue<BigNumberish>;
    collateralAmount: PromiseOrValue<BigNumberish>;
    expiration: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
  };

  export type MintParamsStructOutput = [BigNumber, BigNumber, BigNumber, string] & {
    minNumTokens: BigNumber;
    collateralAmount: BigNumber;
    expiration: BigNumber;
    recipient: string;
  };

  export type LPInfoStruct = {
    actualCollateralAmount: PromiseOrValue<BigNumberish>;
    tokensCollateralized: PromiseOrValue<BigNumberish>;
    overCollateralization: PromiseOrValue<BigNumberish>;
    capacity: PromiseOrValue<BigNumberish>;
    utilization: PromiseOrValue<BigNumberish>;
    coverage: PromiseOrValue<BigNumberish>;
    mintShares: PromiseOrValue<BigNumberish>;
    redeemShares: PromiseOrValue<BigNumberish>;
    interestShares: PromiseOrValue<BigNumberish>;
    isOvercollateralized: PromiseOrValue<boolean>;
  };

  export type LPInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
  ] & {
    actualCollateralAmount: BigNumber;
    tokensCollateralized: BigNumber;
    overCollateralization: BigNumber;
    capacity: BigNumber;
    utilization: BigNumber;
    coverage: BigNumber;
    mintShares: BigNumber;
    redeemShares: BigNumber;
    interestShares: BigNumber;
    isOvercollateralized: boolean;
  };

  export type RedeemParamsStruct = {
    numTokens: PromiseOrValue<BigNumberish>;
    minCollateral: PromiseOrValue<BigNumberish>;
    expiration: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
  };

  export type RedeemParamsStructOutput = [BigNumber, BigNumber, BigNumber, string] & {
    numTokens: BigNumber;
    minCollateral: BigNumber;
    expiration: BigNumber;
    recipient: string;
  };
}

export interface JarvisSynthereumLiquidityPoolInterface extends utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'MAINTAINER_ROLE()': FunctionFragment;
    'activateLP(uint256,uint128)': FunctionFragment;
    'addLiquidity(uint256)': FunctionFragment;
    'collateralRequirement()': FunctionFragment;
    'collateralToken()': FunctionFragment;
    'collateralTokenDecimals()': FunctionFragment;
    'feePercentage()': FunctionFragment;
    'getActiveLPs()': FunctionFragment;
    'getMintTradeInfo(uint256)': FunctionFragment;
    'getRedeemTradeInfo(uint256)': FunctionFragment;
    'getRegisteredLPs()': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'getRoleMember(bytes32,uint256)': FunctionFragment;
    'getRoleMemberCount(bytes32)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'initialize((address,uint8,address,address,(address,address),uint64,bytes32,uint128,uint64,string))': FunctionFragment;
    'isActiveLP(address)': FunctionFragment;
    'isRegisteredLP(address)': FunctionFragment;
    'isTrustedForwarder(address)': FunctionFragment;
    'lendingProtocolInfo()': FunctionFragment;
    'liquidate(address,uint256)': FunctionFragment;
    'liquidationReward()': FunctionFragment;
    'maxTokensCapacity()': FunctionFragment;
    'migrateStorage()': FunctionFragment;
    'migrateTotalFunds(address)': FunctionFragment;
    'mint((uint256,uint256,uint256,address))': FunctionFragment;
    'positionLPInfo(address)': FunctionFragment;
    'priceFeedIdentifier()': FunctionFragment;
    'redeem((uint256,uint256,uint256,address))': FunctionFragment;
    'registerLP(address)': FunctionFragment;
    'removeLiquidity(uint256)': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'setFee(uint64)': FunctionFragment;
    'setLiquidationReward(uint64)': FunctionFragment;
    'setMigratedStorage(address,uint8,bytes,uint8,bytes,uint256,uint256,uint256)': FunctionFragment;
    'setOvercollateralization(uint128)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'switchLendingModule(string,address)': FunctionFragment;
    'synthereumFinder()': FunctionFragment;
    'syntheticToken()': FunctionFragment;
    'syntheticTokenSymbol()': FunctionFragment;
    'totalCollateralAmount()': FunctionFragment;
    'totalSyntheticTokens()': FunctionFragment;
    'transferToLendingManager(uint256)': FunctionFragment;
    'typology()': FunctionFragment;
    'updatePositions()': FunctionFragment;
    'version()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DEFAULT_ADMIN_ROLE'
      | 'MAINTAINER_ROLE'
      | 'activateLP'
      | 'addLiquidity'
      | 'collateralRequirement'
      | 'collateralToken'
      | 'collateralTokenDecimals'
      | 'feePercentage'
      | 'getActiveLPs'
      | 'getMintTradeInfo'
      | 'getRedeemTradeInfo'
      | 'getRegisteredLPs'
      | 'getRoleAdmin'
      | 'getRoleMember'
      | 'getRoleMemberCount'
      | 'grantRole'
      | 'hasRole'
      | 'initialize'
      | 'isActiveLP'
      | 'isRegisteredLP'
      | 'isTrustedForwarder'
      | 'lendingProtocolInfo'
      | 'liquidate'
      | 'liquidationReward'
      | 'maxTokensCapacity'
      | 'migrateStorage'
      | 'migrateTotalFunds'
      | 'mint'
      | 'positionLPInfo'
      | 'priceFeedIdentifier'
      | 'redeem'
      | 'registerLP'
      | 'removeLiquidity'
      | 'renounceRole'
      | 'revokeRole'
      | 'setFee'
      | 'setLiquidationReward'
      | 'setMigratedStorage'
      | 'setOvercollateralization'
      | 'supportsInterface'
      | 'switchLendingModule'
      | 'synthereumFinder'
      | 'syntheticToken'
      | 'syntheticTokenSymbol'
      | 'totalCollateralAmount'
      | 'totalSyntheticTokens'
      | 'transferToLendingManager'
      | 'typology'
      | 'updatePositions'
      | 'version',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAINTAINER_ROLE', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'activateLP',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'addLiquidity', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'collateralRequirement', values?: undefined): string;
  encodeFunctionData(functionFragment: 'collateralToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'collateralTokenDecimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feePercentage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getActiveLPs', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMintTradeInfo', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getRedeemTradeInfo', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getRegisteredLPs', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'getRoleMember',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getRoleMemberCount', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [ISynthereumMultiLpLiquidityPool.InitializationParamsStruct],
  ): string;
  encodeFunctionData(functionFragment: 'isActiveLP', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isRegisteredLP', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isTrustedForwarder', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lendingProtocolInfo', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'liquidate',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'liquidationReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxTokensCapacity', values?: undefined): string;
  encodeFunctionData(functionFragment: 'migrateStorage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'migrateTotalFunds', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'mint', values: [ISynthereumMultiLpLiquidityPool.MintParamsStruct]): string;
  encodeFunctionData(functionFragment: 'positionLPInfo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'priceFeedIdentifier', values?: undefined): string;
  encodeFunctionData(functionFragment: 'redeem', values: [ISynthereumMultiLpLiquidityPool.RedeemParamsStruct]): string;
  encodeFunctionData(functionFragment: 'registerLP', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'removeLiquidity', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'setFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setLiquidationReward', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setMigratedStorage',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'setOvercollateralization', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'switchLendingModule',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'synthereumFinder', values?: undefined): string;
  encodeFunctionData(functionFragment: 'syntheticToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'syntheticTokenSymbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalCollateralAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSyntheticTokens', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferToLendingManager', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'typology', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updatePositions', values?: undefined): string;
  encodeFunctionData(functionFragment: 'version', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAINTAINER_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activateLP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateralRequirement', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateralToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateralTokenDecimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feePercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getActiveLPs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMintTradeInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRedeemTradeInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRegisteredLPs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleMember', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleMemberCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isActiveLP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isRegisteredLP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isTrustedForwarder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lendingProtocolInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidationReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxTokensCapacity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migrateStorage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migrateTotalFunds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'positionLPInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'priceFeedIdentifier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerLP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLiquidationReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMigratedStorage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOvercollateralization', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'switchLendingModule', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'synthereumFinder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'syntheticToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'syntheticTokenSymbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalCollateralAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSyntheticTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferToLendingManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'typology', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePositions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result;

  events: {
    'ActivatedLP(address)': EventFragment;
    'DepositedLiquidity(address,uint256,uint256)': EventFragment;
    'Liquidated(address,address,uint256,uint256,uint256,uint256)': EventFragment;
    'Minted(address,tuple,address)': EventFragment;
    'NewLendingModule(string)': EventFragment;
    'Redeemed(address,tuple,address)': EventFragment;
    'RegisteredLp(address)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'SetFeePercentage(uint256)': EventFragment;
    'SetLiquidationReward(uint256)': EventFragment;
    'SetOvercollateralization(address,uint256)': EventFragment;
    'WithdrawnLiquidity(address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ActivatedLP'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositedLiquidity'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Liquidated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Minted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewLendingModule'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Redeemed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RegisteredLp'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetFeePercentage'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetLiquidationReward'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetOvercollateralization'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawnLiquidity'): EventFragment;
}

export interface ActivatedLPEventObject {
  lp: string;
}
export type ActivatedLPEvent = TypedEvent<[string], ActivatedLPEventObject>;

export type ActivatedLPEventFilter = TypedEventFilter<ActivatedLPEvent>;

export interface DepositedLiquidityEventObject {
  lp: string;
  collateralSent: BigNumber;
  collateralDeposited: BigNumber;
}
export type DepositedLiquidityEvent = TypedEvent<[string, BigNumber, BigNumber], DepositedLiquidityEventObject>;

export type DepositedLiquidityEventFilter = TypedEventFilter<DepositedLiquidityEvent>;

export interface LiquidatedEventObject {
  user: string;
  lp: string;
  synthTokensInLiquidation: BigNumber;
  collateralAmount: BigNumber;
  bonusAmount: BigNumber;
  collateralReceived: BigNumber;
}
export type LiquidatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  LiquidatedEventObject
>;

export type LiquidatedEventFilter = TypedEventFilter<LiquidatedEvent>;

export interface MintedEventObject {
  user: string;
  mintvalues: ISynthereumMultiLpLiquidityPoolEvents.MintValuesStructOutput;
  recipient: string;
}
export type MintedEvent = TypedEvent<
  [string, ISynthereumMultiLpLiquidityPoolEvents.MintValuesStructOutput, string],
  MintedEventObject
>;

export type MintedEventFilter = TypedEventFilter<MintedEvent>;

export interface NewLendingModuleEventObject {
  lendingModuleId: string;
}
export type NewLendingModuleEvent = TypedEvent<[string], NewLendingModuleEventObject>;

export type NewLendingModuleEventFilter = TypedEventFilter<NewLendingModuleEvent>;

export interface RedeemedEventObject {
  user: string;
  redeemvalues: ISynthereumMultiLpLiquidityPoolEvents.RedeemValuesStructOutput;
  recipient: string;
}
export type RedeemedEvent = TypedEvent<
  [string, ISynthereumMultiLpLiquidityPoolEvents.RedeemValuesStructOutput, string],
  RedeemedEventObject
>;

export type RedeemedEventFilter = TypedEventFilter<RedeemedEvent>;

export interface RegisteredLpEventObject {
  lp: string;
}
export type RegisteredLpEvent = TypedEvent<[string], RegisteredLpEventObject>;

export type RegisteredLpEventFilter = TypedEventFilter<RegisteredLpEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SetFeePercentageEventObject {
  newFee: BigNumber;
}
export type SetFeePercentageEvent = TypedEvent<[BigNumber], SetFeePercentageEventObject>;

export type SetFeePercentageEventFilter = TypedEventFilter<SetFeePercentageEvent>;

export interface SetLiquidationRewardEventObject {
  newLiquidationReward: BigNumber;
}
export type SetLiquidationRewardEvent = TypedEvent<[BigNumber], SetLiquidationRewardEventObject>;

export type SetLiquidationRewardEventFilter = TypedEventFilter<SetLiquidationRewardEvent>;

export interface SetOvercollateralizationEventObject {
  lp: string;
  overCollateralization: BigNumber;
}
export type SetOvercollateralizationEvent = TypedEvent<[string, BigNumber], SetOvercollateralizationEventObject>;

export type SetOvercollateralizationEventFilter = TypedEventFilter<SetOvercollateralizationEvent>;

export interface WithdrawnLiquidityEventObject {
  lp: string;
  collateralWithdrawn: BigNumber;
  collateralReceived: BigNumber;
}
export type WithdrawnLiquidityEvent = TypedEvent<[string, BigNumber, BigNumber], WithdrawnLiquidityEventObject>;

export type WithdrawnLiquidityEventFilter = TypedEventFilter<WithdrawnLiquidityEvent>;

export interface JarvisSynthereumLiquidityPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JarvisSynthereumLiquidityPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MAINTAINER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    activateLP(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _overCollateralization: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addLiquidity(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    collateralRequirement(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateralToken(overrides?: CallOverrides): Promise<[string]>;

    collateralTokenDecimals(overrides?: CallOverrides): Promise<[number]>;

    feePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    getActiveLPs(overrides?: CallOverrides): Promise<[string[]]>;

    getMintTradeInfo(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        synthTokensReceived: BigNumber;
        feePaid: BigNumber;
      }
    >;

    getRedeemTradeInfo(
      _syntTokensAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        collateralAmountReceived: BigNumber;
        feePaid: BigNumber;
      }
    >;

    getRegisteredLPs(overrides?: CallOverrides): Promise<[string[]]>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    initialize(
      _params: ISynthereumMultiLpLiquidityPool.InitializationParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isActiveLP(_lp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isRegisteredLP(_lp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    lendingProtocolInfo(
      overrides?: CallOverrides,
    ): Promise<[string, string] & { lendingId: string; bearingToken: string }>;

    liquidate(
      _lp: PromiseOrValue<string>,
      _numSynthTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    liquidationReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTokensCapacity(overrides?: CallOverrides): Promise<[BigNumber] & { maxCapacity: BigNumber }>;

    migrateStorage(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    migrateTotalFunds(
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mint(
      _mintParams: ISynthereumMultiLpLiquidityPool.MintParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    positionLPInfo(
      _lp: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [ISynthereumMultiLpLiquidityPool.LPInfoStructOutput] & {
        info: ISynthereumMultiLpLiquidityPool.LPInfoStructOutput;
      }
    >;

    priceFeedIdentifier(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      _redeemParams: ISynthereumMultiLpLiquidityPool.RedeemParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    registerLP(
      _lp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeLiquidity(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFee(
      _newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLiquidationReward(
      _newLiquidationReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMigratedStorage(
      _finder: PromiseOrValue<string>,
      _oldVersion: PromiseOrValue<BigNumberish>,
      _storageBytes: PromiseOrValue<BytesLike>,
      _newVersion: PromiseOrValue<BigNumberish>,
      _extraInputParams: PromiseOrValue<BytesLike>,
      _sourceCollateralAmount: PromiseOrValue<BigNumberish>,
      _actualCollateralAmount: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setOvercollateralization(
      _overCollateralization: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

    switchLendingModule(
      _lendingId: PromiseOrValue<string>,
      _bearingToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    synthereumFinder(overrides?: CallOverrides): Promise<[string]>;

    syntheticToken(overrides?: CallOverrides): Promise<[string]>;

    syntheticTokenSymbol(overrides?: CallOverrides): Promise<[string]>;

    totalCollateralAmount(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        usersCollateral: BigNumber;
        lpsCollateral: BigNumber;
        totalCollateral: BigNumber;
      }
    >;

    totalSyntheticTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferToLendingManager(
      _bearingAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    typology(overrides?: CallOverrides): Promise<[string]>;

    updatePositions(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[number]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MAINTAINER_ROLE(overrides?: CallOverrides): Promise<string>;

  activateLP(
    _collateralAmount: PromiseOrValue<BigNumberish>,
    _overCollateralization: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addLiquidity(
    _collateralAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  collateralRequirement(overrides?: CallOverrides): Promise<BigNumber>;

  collateralToken(overrides?: CallOverrides): Promise<string>;

  collateralTokenDecimals(overrides?: CallOverrides): Promise<number>;

  feePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  getActiveLPs(overrides?: CallOverrides): Promise<string[]>;

  getMintTradeInfo(
    _collateralAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      synthTokensReceived: BigNumber;
      feePaid: BigNumber;
    }
  >;

  getRedeemTradeInfo(
    _syntTokensAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      collateralAmountReceived: BigNumber;
      feePaid: BigNumber;
    }
  >;

  getRegisteredLPs(overrides?: CallOverrides): Promise<string[]>;

  getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  initialize(
    _params: ISynthereumMultiLpLiquidityPool.InitializationParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isActiveLP(_lp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isRegisteredLP(_lp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  lendingProtocolInfo(
    overrides?: CallOverrides,
  ): Promise<[string, string] & { lendingId: string; bearingToken: string }>;

  liquidate(
    _lp: PromiseOrValue<string>,
    _numSynthTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  liquidationReward(overrides?: CallOverrides): Promise<BigNumber>;

  maxTokensCapacity(overrides?: CallOverrides): Promise<BigNumber>;

  migrateStorage(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  migrateTotalFunds(
    _recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mint(
    _mintParams: ISynthereumMultiLpLiquidityPool.MintParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  positionLPInfo(
    _lp: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<ISynthereumMultiLpLiquidityPool.LPInfoStructOutput>;

  priceFeedIdentifier(overrides?: CallOverrides): Promise<string>;

  redeem(
    _redeemParams: ISynthereumMultiLpLiquidityPool.RedeemParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  registerLP(
    _lp: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeLiquidity(
    _collateralAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFee(
    _newFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLiquidationReward(
    _newLiquidationReward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMigratedStorage(
    _finder: PromiseOrValue<string>,
    _oldVersion: PromiseOrValue<BigNumberish>,
    _storageBytes: PromiseOrValue<BytesLike>,
    _newVersion: PromiseOrValue<BigNumberish>,
    _extraInputParams: PromiseOrValue<BytesLike>,
    _sourceCollateralAmount: PromiseOrValue<BigNumberish>,
    _actualCollateralAmount: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setOvercollateralization(
    _overCollateralization: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  switchLendingModule(
    _lendingId: PromiseOrValue<string>,
    _bearingToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  synthereumFinder(overrides?: CallOverrides): Promise<string>;

  syntheticToken(overrides?: CallOverrides): Promise<string>;

  syntheticTokenSymbol(overrides?: CallOverrides): Promise<string>;

  totalCollateralAmount(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      usersCollateral: BigNumber;
      lpsCollateral: BigNumber;
      totalCollateral: BigNumber;
    }
  >;

  totalSyntheticTokens(overrides?: CallOverrides): Promise<BigNumber>;

  transferToLendingManager(
    _bearingAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  typology(overrides?: CallOverrides): Promise<string>;

  updatePositions(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MAINTAINER_ROLE(overrides?: CallOverrides): Promise<string>;

    activateLP(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _overCollateralization: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    addLiquidity(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        collateralDeposited: BigNumber;
        newLpCollateralAmount: BigNumber;
      }
    >;

    collateralRequirement(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<string>;

    collateralTokenDecimals(overrides?: CallOverrides): Promise<number>;

    feePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveLPs(overrides?: CallOverrides): Promise<string[]>;

    getMintTradeInfo(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        synthTokensReceived: BigNumber;
        feePaid: BigNumber;
      }
    >;

    getRedeemTradeInfo(
      _syntTokensAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        collateralAmountReceived: BigNumber;
        feePaid: BigNumber;
      }
    >;

    getRegisteredLPs(overrides?: CallOverrides): Promise<string[]>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    initialize(
      _params: ISynthereumMultiLpLiquidityPool.InitializationParamsStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    isActiveLP(_lp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isRegisteredLP(_lp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    lendingProtocolInfo(
      overrides?: CallOverrides,
    ): Promise<[string, string] & { lendingId: string; bearingToken: string }>;

    liquidate(
      _lp: PromiseOrValue<string>,
      _numSynthTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    liquidationReward(overrides?: CallOverrides): Promise<BigNumber>;

    maxTokensCapacity(overrides?: CallOverrides): Promise<BigNumber>;

    migrateStorage(overrides?: CallOverrides): Promise<
      [number, BigNumber, string] & {
        poolVersion: number;
        price: BigNumber;
        storageBytes: string;
      }
    >;

    migrateTotalFunds(_recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _mintParams: ISynthereumMultiLpLiquidityPool.MintParamsStruct,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    positionLPInfo(
      _lp: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<ISynthereumMultiLpLiquidityPool.LPInfoStructOutput>;

    priceFeedIdentifier(overrides?: CallOverrides): Promise<string>;

    redeem(
      _redeemParams: ISynthereumMultiLpLiquidityPool.RedeemParamsStruct,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    registerLP(_lp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    removeLiquidity(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        collateralRemoved: BigNumber;
        collateralReceived: BigNumber;
        newLpCollateralAmount: BigNumber;
      }
    >;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setFee(_newFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setLiquidationReward(_newLiquidationReward: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setMigratedStorage(
      _finder: PromiseOrValue<string>,
      _oldVersion: PromiseOrValue<BigNumberish>,
      _storageBytes: PromiseOrValue<BytesLike>,
      _newVersion: PromiseOrValue<BigNumberish>,
      _extraInputParams: PromiseOrValue<BytesLike>,
      _sourceCollateralAmount: PromiseOrValue<BigNumberish>,
      _actualCollateralAmount: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setOvercollateralization(
      _overCollateralization: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    switchLendingModule(
      _lendingId: PromiseOrValue<string>,
      _bearingToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    synthereumFinder(overrides?: CallOverrides): Promise<string>;

    syntheticToken(overrides?: CallOverrides): Promise<string>;

    syntheticTokenSymbol(overrides?: CallOverrides): Promise<string>;

    totalCollateralAmount(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        usersCollateral: BigNumber;
        lpsCollateral: BigNumber;
        totalCollateral: BigNumber;
      }
    >;

    totalSyntheticTokens(overrides?: CallOverrides): Promise<BigNumber>;

    transferToLendingManager(
      _bearingAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    typology(overrides?: CallOverrides): Promise<string>;

    updatePositions(overrides?: CallOverrides): Promise<void>;

    version(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    'ActivatedLP(address)'(lp?: PromiseOrValue<string> | null): ActivatedLPEventFilter;
    ActivatedLP(lp?: PromiseOrValue<string> | null): ActivatedLPEventFilter;

    'DepositedLiquidity(address,uint256,uint256)'(
      lp?: PromiseOrValue<string> | null,
      collateralSent?: null,
      collateralDeposited?: null,
    ): DepositedLiquidityEventFilter;
    DepositedLiquidity(
      lp?: PromiseOrValue<string> | null,
      collateralSent?: null,
      collateralDeposited?: null,
    ): DepositedLiquidityEventFilter;

    'Liquidated(address,address,uint256,uint256,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      lp?: PromiseOrValue<string> | null,
      synthTokensInLiquidation?: null,
      collateralAmount?: null,
      bonusAmount?: null,
      collateralReceived?: null,
    ): LiquidatedEventFilter;
    Liquidated(
      user?: PromiseOrValue<string> | null,
      lp?: PromiseOrValue<string> | null,
      synthTokensInLiquidation?: null,
      collateralAmount?: null,
      bonusAmount?: null,
      collateralReceived?: null,
    ): LiquidatedEventFilter;

    'Minted(address,tuple,address)'(
      user?: PromiseOrValue<string> | null,
      mintvalues?: null,
      recipient?: null,
    ): MintedEventFilter;
    Minted(user?: PromiseOrValue<string> | null, mintvalues?: null, recipient?: null): MintedEventFilter;

    'NewLendingModule(string)'(lendingModuleId?: null): NewLendingModuleEventFilter;
    NewLendingModule(lendingModuleId?: null): NewLendingModuleEventFilter;

    'Redeemed(address,tuple,address)'(
      user?: PromiseOrValue<string> | null,
      redeemvalues?: null,
      recipient?: null,
    ): RedeemedEventFilter;
    Redeemed(user?: PromiseOrValue<string> | null, redeemvalues?: null, recipient?: null): RedeemedEventFilter;

    'RegisteredLp(address)'(lp?: PromiseOrValue<string> | null): RegisteredLpEventFilter;
    RegisteredLp(lp?: PromiseOrValue<string> | null): RegisteredLpEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;

    'SetFeePercentage(uint256)'(newFee?: null): SetFeePercentageEventFilter;
    SetFeePercentage(newFee?: null): SetFeePercentageEventFilter;

    'SetLiquidationReward(uint256)'(newLiquidationReward?: null): SetLiquidationRewardEventFilter;
    SetLiquidationReward(newLiquidationReward?: null): SetLiquidationRewardEventFilter;

    'SetOvercollateralization(address,uint256)'(
      lp?: PromiseOrValue<string> | null,
      overCollateralization?: null,
    ): SetOvercollateralizationEventFilter;
    SetOvercollateralization(
      lp?: PromiseOrValue<string> | null,
      overCollateralization?: null,
    ): SetOvercollateralizationEventFilter;

    'WithdrawnLiquidity(address,uint256,uint256)'(
      lp?: PromiseOrValue<string> | null,
      collateralWithdrawn?: null,
      collateralReceived?: null,
    ): WithdrawnLiquidityEventFilter;
    WithdrawnLiquidity(
      lp?: PromiseOrValue<string> | null,
      collateralWithdrawn?: null,
      collateralReceived?: null,
    ): WithdrawnLiquidityEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MAINTAINER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    activateLP(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _overCollateralization: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addLiquidity(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    collateralRequirement(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    collateralTokenDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    feePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveLPs(overrides?: CallOverrides): Promise<BigNumber>;

    getMintTradeInfo(_collateralAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getRedeemTradeInfo(_syntTokensAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getRegisteredLPs(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(
      _params: ISynthereumMultiLpLiquidityPool.InitializationParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isActiveLP(_lp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isRegisteredLP(_lp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lendingProtocolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      _lp: PromiseOrValue<string>,
      _numSynthTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    liquidationReward(overrides?: CallOverrides): Promise<BigNumber>;

    maxTokensCapacity(overrides?: CallOverrides): Promise<BigNumber>;

    migrateStorage(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    migrateTotalFunds(
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mint(
      _mintParams: ISynthereumMultiLpLiquidityPool.MintParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    positionLPInfo(_lp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    priceFeedIdentifier(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      _redeemParams: ISynthereumMultiLpLiquidityPool.RedeemParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    registerLP(
      _lp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeLiquidity(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFee(
      _newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLiquidationReward(
      _newLiquidationReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMigratedStorage(
      _finder: PromiseOrValue<string>,
      _oldVersion: PromiseOrValue<BigNumberish>,
      _storageBytes: PromiseOrValue<BytesLike>,
      _newVersion: PromiseOrValue<BigNumberish>,
      _extraInputParams: PromiseOrValue<BytesLike>,
      _sourceCollateralAmount: PromiseOrValue<BigNumberish>,
      _actualCollateralAmount: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setOvercollateralization(
      _overCollateralization: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    switchLendingModule(
      _lendingId: PromiseOrValue<string>,
      _bearingToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    synthereumFinder(overrides?: CallOverrides): Promise<BigNumber>;

    syntheticToken(overrides?: CallOverrides): Promise<BigNumber>;

    syntheticTokenSymbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalCollateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalSyntheticTokens(overrides?: CallOverrides): Promise<BigNumber>;

    transferToLendingManager(
      _bearingAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    typology(overrides?: CallOverrides): Promise<BigNumber>;

    updatePositions(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAINTAINER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activateLP(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _overCollateralization: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    collateralRequirement(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralTokenDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getActiveLPs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMintTradeInfo(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRedeemTradeInfo(
      _syntTokensAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRegisteredLPs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      _params: ISynthereumMultiLpLiquidityPool.InitializationParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isActiveLP(_lp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRegisteredLP(_lp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lendingProtocolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidate(
      _lp: PromiseOrValue<string>,
      _numSynthTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    liquidationReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTokensCapacity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateStorage(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    migrateTotalFunds(
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mint(
      _mintParams: ISynthereumMultiLpLiquidityPool.MintParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    positionLPInfo(_lp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeedIdentifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      _redeemParams: ISynthereumMultiLpLiquidityPool.RedeemParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    registerLP(
      _lp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFee(
      _newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLiquidationReward(
      _newLiquidationReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMigratedStorage(
      _finder: PromiseOrValue<string>,
      _oldVersion: PromiseOrValue<BigNumberish>,
      _storageBytes: PromiseOrValue<BytesLike>,
      _newVersion: PromiseOrValue<BigNumberish>,
      _extraInputParams: PromiseOrValue<BytesLike>,
      _sourceCollateralAmount: PromiseOrValue<BigNumberish>,
      _actualCollateralAmount: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setOvercollateralization(
      _overCollateralization: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    switchLendingModule(
      _lendingId: PromiseOrValue<string>,
      _bearingToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    synthereumFinder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    syntheticToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    syntheticTokenSymbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCollateralAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSyntheticTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferToLendingManager(
      _bearingAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    typology(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePositions(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
