/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface AgaveBaseIncentivesControllerInterface extends utils.Interface {
  functions: {
    'BULK_CLAIMER()': FunctionFragment;
    'DISTRIBUTION_END()': FunctionFragment;
    'EMISSION_MANAGER()': FunctionFragment;
    'PRECISION()': FunctionFragment;
    'REVISION()': FunctionFragment;
    'REWARD_TOKEN()': FunctionFragment;
    'assets(address)': FunctionFragment;
    'bulkClaimRewardsOnBehalf(address[],uint256,address,address)': FunctionFragment;
    'claimRewards(address[],uint256,address)': FunctionFragment;
    'claimRewardsOnBehalf(address[],uint256,address,address)': FunctionFragment;
    'configureAssets(address[],uint256[],uint256[])': FunctionFragment;
    'disableAssets(address[])': FunctionFragment;
    'getAssetData(address)': FunctionFragment;
    'getClaimer(address)': FunctionFragment;
    'getDistributionEnd()': FunctionFragment;
    'getRewardsBalance(address[],address)': FunctionFragment;
    'getRewardsVault()': FunctionFragment;
    'getUserAssetData(address,address)': FunctionFragment;
    'getUserUnclaimedRewards(address)': FunctionFragment;
    'handleAction(address,uint256,uint256)': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'setBulkClaimer(address)': FunctionFragment;
    'setClaimer(address,address)': FunctionFragment;
    'setDistributionEnd(uint256)': FunctionFragment;
    'setRewardToken(address)': FunctionFragment;
    'setRewardsVault(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BULK_CLAIMER'
      | 'DISTRIBUTION_END'
      | 'EMISSION_MANAGER'
      | 'PRECISION'
      | 'REVISION'
      | 'REWARD_TOKEN'
      | 'assets'
      | 'bulkClaimRewardsOnBehalf'
      | 'claimRewards'
      | 'claimRewardsOnBehalf'
      | 'configureAssets'
      | 'disableAssets'
      | 'getAssetData'
      | 'getClaimer'
      | 'getDistributionEnd'
      | 'getRewardsBalance'
      | 'getRewardsVault'
      | 'getUserAssetData'
      | 'getUserUnclaimedRewards'
      | 'handleAction'
      | 'initialize'
      | 'setBulkClaimer'
      | 'setClaimer'
      | 'setDistributionEnd'
      | 'setRewardToken'
      | 'setRewardsVault',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BULK_CLAIMER', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DISTRIBUTION_END', values?: undefined): string;
  encodeFunctionData(functionFragment: 'EMISSION_MANAGER', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'REVISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'REWARD_TOKEN', values?: undefined): string;
  encodeFunctionData(functionFragment: 'assets', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'bulkClaimRewardsOnBehalf',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'claimRewards',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'claimRewardsOnBehalf',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'configureAssets',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(functionFragment: 'disableAssets', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'getAssetData', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getClaimer', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getDistributionEnd', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getRewardsBalance',
    values: [PromiseOrValue<string>[], PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getRewardsVault', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getUserAssetData',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getUserUnclaimedRewards', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'handleAction',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'initialize', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setBulkClaimer', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setClaimer', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setDistributionEnd', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setRewardToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setRewardsVault', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'BULK_CLAIMER', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DISTRIBUTION_END', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'EMISSION_MANAGER', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'REVISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'REWARD_TOKEN', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'assets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bulkClaimRewardsOnBehalf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimRewardsOnBehalf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'configureAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAssetData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getClaimer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDistributionEnd', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardsBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardsVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserAssetData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserUnclaimedRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'handleAction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBulkClaimer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setClaimer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDistributionEnd', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewardsVault', data: BytesLike): Result;

  events: {
    'AssetConfigUpdated(address,uint8,uint256)': EventFragment;
    'AssetIndexUpdated(address,uint256)': EventFragment;
    'BulkClaimerUpdated(address)': EventFragment;
    'ClaimerSet(address,address)': EventFragment;
    'DistributionEndUpdated(uint256)': EventFragment;
    'RewardTokenUpdated(address)': EventFragment;
    'RewardsAccrued(address,uint256)': EventFragment;
    'RewardsClaimed(address,address,address,uint256)': EventFragment;
    'RewardsVaultUpdated(address)': EventFragment;
    'UserIndexUpdated(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AssetConfigUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AssetIndexUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BulkClaimerUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ClaimerSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DistributionEndUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardTokenUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardsAccrued'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardsClaimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardsVaultUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UserIndexUpdated'): EventFragment;
}

export interface AssetConfigUpdatedEventObject {
  asset: string;
  decimals: number;
  emission: BigNumber;
}
export type AssetConfigUpdatedEvent = TypedEvent<[string, number, BigNumber], AssetConfigUpdatedEventObject>;

export type AssetConfigUpdatedEventFilter = TypedEventFilter<AssetConfigUpdatedEvent>;

export interface AssetIndexUpdatedEventObject {
  asset: string;
  index: BigNumber;
}
export type AssetIndexUpdatedEvent = TypedEvent<[string, BigNumber], AssetIndexUpdatedEventObject>;

export type AssetIndexUpdatedEventFilter = TypedEventFilter<AssetIndexUpdatedEvent>;

export interface BulkClaimerUpdatedEventObject {
  newBulkClaimer: string;
}
export type BulkClaimerUpdatedEvent = TypedEvent<[string], BulkClaimerUpdatedEventObject>;

export type BulkClaimerUpdatedEventFilter = TypedEventFilter<BulkClaimerUpdatedEvent>;

export interface ClaimerSetEventObject {
  user: string;
  claimer: string;
}
export type ClaimerSetEvent = TypedEvent<[string, string], ClaimerSetEventObject>;

export type ClaimerSetEventFilter = TypedEventFilter<ClaimerSetEvent>;

export interface DistributionEndUpdatedEventObject {
  newDistributionEnd: BigNumber;
}
export type DistributionEndUpdatedEvent = TypedEvent<[BigNumber], DistributionEndUpdatedEventObject>;

export type DistributionEndUpdatedEventFilter = TypedEventFilter<DistributionEndUpdatedEvent>;

export interface RewardTokenUpdatedEventObject {
  token: string;
}
export type RewardTokenUpdatedEvent = TypedEvent<[string], RewardTokenUpdatedEventObject>;

export type RewardTokenUpdatedEventFilter = TypedEventFilter<RewardTokenUpdatedEvent>;

export interface RewardsAccruedEventObject {
  user: string;
  amount: BigNumber;
}
export type RewardsAccruedEvent = TypedEvent<[string, BigNumber], RewardsAccruedEventObject>;

export type RewardsAccruedEventFilter = TypedEventFilter<RewardsAccruedEvent>;

export interface RewardsClaimedEventObject {
  user: string;
  to: string;
  claimer: string;
  amount: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<[string, string, string, BigNumber], RewardsClaimedEventObject>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface RewardsVaultUpdatedEventObject {
  vault: string;
}
export type RewardsVaultUpdatedEvent = TypedEvent<[string], RewardsVaultUpdatedEventObject>;

export type RewardsVaultUpdatedEventFilter = TypedEventFilter<RewardsVaultUpdatedEvent>;

export interface UserIndexUpdatedEventObject {
  user: string;
  asset: string;
  index: BigNumber;
}
export type UserIndexUpdatedEvent = TypedEvent<[string, string, BigNumber], UserIndexUpdatedEventObject>;

export type UserIndexUpdatedEventFilter = TypedEventFilter<UserIndexUpdatedEvent>;

export interface AgaveBaseIncentivesController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AgaveBaseIncentivesControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BULK_CLAIMER(overrides?: CallOverrides): Promise<[string]>;

    DISTRIBUTION_END(overrides?: CallOverrides): Promise<[BigNumber]>;

    EMISSION_MANAGER(overrides?: CallOverrides): Promise<[string]>;

    PRECISION(overrides?: CallOverrides): Promise<[number]>;

    REVISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    REWARD_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    assets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, number, number, boolean] & {
        emissionPerSecond: BigNumber;
        index: BigNumber;
        lastUpdateTimestamp: number;
        decimals: number;
        disabled: boolean;
      }
    >;

    bulkClaimRewardsOnBehalf(
      assets: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimRewards(
      assets: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimRewardsOnBehalf(
      assets: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    configureAssets(
      assets: PromiseOrValue<string>[],
      emissionsPerSecond: PromiseOrValue<BigNumberish>[],
      assetDecimals: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    disableAssets(
      assets: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getAssetData(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, number, BigNumber, boolean]>;

    getClaimer(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    getDistributionEnd(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardsBalance(
      assets: PromiseOrValue<string>[],
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getRewardsVault(overrides?: CallOverrides): Promise<[string]>;

    getUserAssetData(
      user: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getUserUnclaimedRewards(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    handleAction(
      user: PromiseOrValue<string>,
      totalSupply: PromiseOrValue<BigNumberish>,
      userBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initialize(
      rewardsVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setBulkClaimer(
      bulkClaimer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setClaimer(
      user: PromiseOrValue<string>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDistributionEnd(
      distributionEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRewardToken(
      rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRewardsVault(
      rewardsVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  BULK_CLAIMER(overrides?: CallOverrides): Promise<string>;

  DISTRIBUTION_END(overrides?: CallOverrides): Promise<BigNumber>;

  EMISSION_MANAGER(overrides?: CallOverrides): Promise<string>;

  PRECISION(overrides?: CallOverrides): Promise<number>;

  REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  REWARD_TOKEN(overrides?: CallOverrides): Promise<string>;

  assets(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, number, number, boolean] & {
      emissionPerSecond: BigNumber;
      index: BigNumber;
      lastUpdateTimestamp: number;
      decimals: number;
      disabled: boolean;
    }
  >;

  bulkClaimRewardsOnBehalf(
    assets: PromiseOrValue<string>[],
    amount: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimRewards(
    assets: PromiseOrValue<string>[],
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimRewardsOnBehalf(
    assets: PromiseOrValue<string>[],
    amount: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  configureAssets(
    assets: PromiseOrValue<string>[],
    emissionsPerSecond: PromiseOrValue<BigNumberish>[],
    assetDecimals: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  disableAssets(
    assets: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getAssetData(
    asset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber, number, BigNumber, boolean]>;

  getClaimer(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  getDistributionEnd(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardsBalance(
    assets: PromiseOrValue<string>[],
    user: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getRewardsVault(overrides?: CallOverrides): Promise<string>;

  getUserAssetData(
    user: PromiseOrValue<string>,
    asset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getUserUnclaimedRewards(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  handleAction(
    user: PromiseOrValue<string>,
    totalSupply: PromiseOrValue<BigNumberish>,
    userBalance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initialize(
    rewardsVault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setBulkClaimer(
    bulkClaimer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setClaimer(
    user: PromiseOrValue<string>,
    caller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDistributionEnd(
    distributionEnd: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRewardToken(
    rewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRewardsVault(
    rewardsVault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    BULK_CLAIMER(overrides?: CallOverrides): Promise<string>;

    DISTRIBUTION_END(overrides?: CallOverrides): Promise<BigNumber>;

    EMISSION_MANAGER(overrides?: CallOverrides): Promise<string>;

    PRECISION(overrides?: CallOverrides): Promise<number>;

    REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_TOKEN(overrides?: CallOverrides): Promise<string>;

    assets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, number, number, boolean] & {
        emissionPerSecond: BigNumber;
        index: BigNumber;
        lastUpdateTimestamp: number;
        decimals: number;
        disabled: boolean;
      }
    >;

    bulkClaimRewardsOnBehalf(
      assets: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    claimRewards(
      assets: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    claimRewardsOnBehalf(
      assets: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    configureAssets(
      assets: PromiseOrValue<string>[],
      emissionsPerSecond: PromiseOrValue<BigNumberish>[],
      assetDecimals: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    disableAssets(assets: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    getAssetData(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, number, BigNumber, boolean]>;

    getClaimer(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    getDistributionEnd(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardsBalance(
      assets: PromiseOrValue<string>[],
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRewardsVault(overrides?: CallOverrides): Promise<string>;

    getUserAssetData(
      user: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserUnclaimedRewards(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    handleAction(
      user: PromiseOrValue<string>,
      totalSupply: PromiseOrValue<BigNumberish>,
      userBalance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    initialize(rewardsVault: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setBulkClaimer(bulkClaimer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setClaimer(user: PromiseOrValue<string>, caller: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setDistributionEnd(distributionEnd: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setRewardToken(rewardToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setRewardsVault(rewardsVault: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'AssetConfigUpdated(address,uint8,uint256)'(
      asset?: PromiseOrValue<string> | null,
      decimals?: null,
      emission?: null,
    ): AssetConfigUpdatedEventFilter;
    AssetConfigUpdated(
      asset?: PromiseOrValue<string> | null,
      decimals?: null,
      emission?: null,
    ): AssetConfigUpdatedEventFilter;

    'AssetIndexUpdated(address,uint256)'(
      asset?: PromiseOrValue<string> | null,
      index?: null,
    ): AssetIndexUpdatedEventFilter;
    AssetIndexUpdated(asset?: PromiseOrValue<string> | null, index?: null): AssetIndexUpdatedEventFilter;

    'BulkClaimerUpdated(address)'(newBulkClaimer?: null): BulkClaimerUpdatedEventFilter;
    BulkClaimerUpdated(newBulkClaimer?: null): BulkClaimerUpdatedEventFilter;

    'ClaimerSet(address,address)'(
      user?: PromiseOrValue<string> | null,
      claimer?: PromiseOrValue<string> | null,
    ): ClaimerSetEventFilter;
    ClaimerSet(user?: PromiseOrValue<string> | null, claimer?: PromiseOrValue<string> | null): ClaimerSetEventFilter;

    'DistributionEndUpdated(uint256)'(newDistributionEnd?: null): DistributionEndUpdatedEventFilter;
    DistributionEndUpdated(newDistributionEnd?: null): DistributionEndUpdatedEventFilter;

    'RewardTokenUpdated(address)'(token?: PromiseOrValue<string> | null): RewardTokenUpdatedEventFilter;
    RewardTokenUpdated(token?: PromiseOrValue<string> | null): RewardTokenUpdatedEventFilter;

    'RewardsAccrued(address,uint256)'(user?: PromiseOrValue<string> | null, amount?: null): RewardsAccruedEventFilter;
    RewardsAccrued(user?: PromiseOrValue<string> | null, amount?: null): RewardsAccruedEventFilter;

    'RewardsClaimed(address,address,address,uint256)'(
      user?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      claimer?: PromiseOrValue<string> | null,
      amount?: null,
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      user?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      claimer?: PromiseOrValue<string> | null,
      amount?: null,
    ): RewardsClaimedEventFilter;

    'RewardsVaultUpdated(address)'(vault?: PromiseOrValue<string> | null): RewardsVaultUpdatedEventFilter;
    RewardsVaultUpdated(vault?: PromiseOrValue<string> | null): RewardsVaultUpdatedEventFilter;

    'UserIndexUpdated(address,address,uint256)'(
      user?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      index?: null,
    ): UserIndexUpdatedEventFilter;
    UserIndexUpdated(
      user?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      index?: null,
    ): UserIndexUpdatedEventFilter;
  };

  estimateGas: {
    BULK_CLAIMER(overrides?: CallOverrides): Promise<BigNumber>;

    DISTRIBUTION_END(overrides?: CallOverrides): Promise<BigNumber>;

    EMISSION_MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    assets(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    bulkClaimRewardsOnBehalf(
      assets: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimRewards(
      assets: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimRewardsOnBehalf(
      assets: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    configureAssets(
      assets: PromiseOrValue<string>[],
      emissionsPerSecond: PromiseOrValue<BigNumberish>[],
      assetDecimals: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    disableAssets(
      assets: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getAssetData(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getClaimer(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getDistributionEnd(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardsBalance(
      assets: PromiseOrValue<string>[],
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRewardsVault(overrides?: CallOverrides): Promise<BigNumber>;

    getUserAssetData(
      user: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserUnclaimedRewards(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    handleAction(
      user: PromiseOrValue<string>,
      totalSupply: PromiseOrValue<BigNumberish>,
      userBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initialize(
      rewardsVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setBulkClaimer(
      bulkClaimer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setClaimer(
      user: PromiseOrValue<string>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDistributionEnd(
      distributionEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRewardToken(
      rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRewardsVault(
      rewardsVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BULK_CLAIMER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DISTRIBUTION_END(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EMISSION_MANAGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REWARD_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assets(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bulkClaimRewardsOnBehalf(
      assets: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimRewards(
      assets: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimRewardsOnBehalf(
      assets: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    configureAssets(
      assets: PromiseOrValue<string>[],
      emissionsPerSecond: PromiseOrValue<BigNumberish>[],
      assetDecimals: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    disableAssets(
      assets: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getAssetData(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaimer(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDistributionEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardsBalance(
      assets: PromiseOrValue<string>[],
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRewardsVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserAssetData(
      user: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserUnclaimedRewards(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    handleAction(
      user: PromiseOrValue<string>,
      totalSupply: PromiseOrValue<BigNumberish>,
      userBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      rewardsVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setBulkClaimer(
      bulkClaimer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setClaimer(
      user: PromiseOrValue<string>,
      caller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDistributionEnd(
      distributionEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRewardToken(
      rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRewardsVault(
      rewardsVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
