/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface SynthInterface extends utils.Interface {
  functions: {
    'ADMIN_ROLE()': FunctionFragment;
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'DOMAIN_SEPARATOR()': FunctionFragment;
    'LEMMA_SWAP()': FunctionFragment;
    'OWNER_ROLE()': FunctionFragment;
    'addPerpetualDEXWrapper(uint256,address,address)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'burnToStackingContract(uint256)': FunctionFragment;
    'changeAdmin(address)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'depositTo(address,uint256,uint256,uint256,address)': FunctionFragment;
    'depositToWExactCollateral(address,uint256,uint256,uint256,address)': FunctionFragment;
    'fees()': FunctionFragment;
    'getFees(uint256,address)': FunctionFragment;
    'getIndexPrice(uint256,address)': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'getTotalPosition(uint256,address)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initialize(address,address,address,address,string,string)': FunctionFragment;
    'interactionBlock()': FunctionFragment;
    'isSupportedPerpetualDEXWrapper(address)': FunctionFragment;
    'isTrustedForwarder(address)': FunctionFragment;
    'mintToStackingContract(uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'perpLemma()': FunctionFragment;
    'perpetualDEXWrappers(uint256,address)': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'setFees(uint256)': FunctionFragment;
    'setTailCollateral(address)': FunctionFragment;
    'setXSynth(address)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'symbol()': FunctionFragment;
    'tailCollateral()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'usdc()': FunctionFragment;
    'withdrawTo(address,uint256,uint256,uint256,address)': FunctionFragment;
    'withdrawToWExactCollateral(address,uint256,uint256,uint256,address)': FunctionFragment;
    'xSynth()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'ADMIN_ROLE'
      | 'DEFAULT_ADMIN_ROLE'
      | 'DOMAIN_SEPARATOR'
      | 'LEMMA_SWAP'
      | 'OWNER_ROLE'
      | 'addPerpetualDEXWrapper'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'burnToStackingContract'
      | 'changeAdmin'
      | 'decimals'
      | 'decreaseAllowance'
      | 'depositTo'
      | 'depositToWExactCollateral'
      | 'fees'
      | 'getFees'
      | 'getIndexPrice'
      | 'getRoleAdmin'
      | 'getTotalPosition'
      | 'grantRole'
      | 'hasRole'
      | 'increaseAllowance'
      | 'initialize'
      | 'interactionBlock'
      | 'isSupportedPerpetualDEXWrapper'
      | 'isTrustedForwarder'
      | 'mintToStackingContract'
      | 'name'
      | 'nonces'
      | 'permit'
      | 'perpLemma'
      | 'perpetualDEXWrappers'
      | 'renounceRole'
      | 'revokeRole'
      | 'setFees'
      | 'setTailCollateral'
      | 'setXSynth'
      | 'supportsInterface'
      | 'symbol'
      | 'tailCollateral'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'usdc'
      | 'withdrawTo'
      | 'withdrawToWExactCollateral'
      | 'xSynth',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'LEMMA_SWAP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'OWNER_ROLE', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addPerpetualDEXWrapper',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'burnToStackingContract', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'changeAdmin', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositTo',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositToWExactCollateral',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'fees', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getFees',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getIndexPrice',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'getTotalPosition',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'interactionBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isSupportedPerpetualDEXWrapper', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isTrustedForwarder', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'mintToStackingContract', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'permit',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'perpLemma', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'perpetualDEXWrappers',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'setFees', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setTailCollateral', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setXSynth', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tailCollateral', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'usdc', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdrawTo',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawToWExactCollateral',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'xSynth', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'LEMMA_SWAP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'OWNER_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addPerpetualDEXWrapper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burnToStackingContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositToWExactCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getIndexPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'interactionBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isSupportedPerpetualDEXWrapper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isTrustedForwarder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintToStackingContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'perpLemma', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'perpetualDEXWrappers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTailCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setXSynth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tailCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'usdc', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawToWExactCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xSynth', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'DepositTo(address,address,address,uint256,uint256)': EventFragment;
    'FeesUpdated(uint256)': EventFragment;
    'PerpetualDexWrapperAdded(uint256,address,address)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'SetTailCollateral(address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'WithdrawTo(address,address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositTo'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeesUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PerpetualDexWrapperAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetTailCollateral'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawTo'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DepositToEventObject {
  perpLemma: string;
  collateral: string;
  to: string;
  amount: BigNumber;
  collateralRequired: BigNumber;
}
export type DepositToEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], DepositToEventObject>;

export type DepositToEventFilter = TypedEventFilter<DepositToEvent>;

export interface FeesUpdatedEventObject {
  newFees: BigNumber;
}
export type FeesUpdatedEvent = TypedEvent<[BigNumber], FeesUpdatedEventObject>;

export type FeesUpdatedEventFilter = TypedEventFilter<FeesUpdatedEvent>;

export interface PerpetualDexWrapperAddedEventObject {
  dexIndex: BigNumber;
  collateral: string;
  dexWrapper: string;
}
export type PerpetualDexWrapperAddedEvent = TypedEvent<
  [BigNumber, string, string],
  PerpetualDexWrapperAddedEventObject
>;

export type PerpetualDexWrapperAddedEventFilter = TypedEventFilter<PerpetualDexWrapperAddedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SetTailCollateralEventObject {
  tailCollateral: string;
}
export type SetTailCollateralEvent = TypedEvent<[string], SetTailCollateralEventObject>;

export type SetTailCollateralEventFilter = TypedEventFilter<SetTailCollateralEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawToEventObject {
  perpLemma: string;
  collateral: string;
  to: string;
  amount: BigNumber;
  collateralGotBack: BigNumber;
}
export type WithdrawToEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], WithdrawToEventObject>;

export type WithdrawToEventFilter = TypedEventFilter<WithdrawToEvent>;

export interface Synth extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SynthInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    LEMMA_SWAP(overrides?: CallOverrides): Promise<[string]>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addPerpetualDEXWrapper(
      perpetualDEXIndex: PromiseOrValue<BigNumberish>,
      collateralAddress: PromiseOrValue<string>,
      perpetualDEXWrapperAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    burnToStackingContract(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositTo(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      perpetualDEXIndex: PromiseOrValue<BigNumberish>,
      maxCollateralAmountRequired: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositToWExactCollateral(
      to: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      perpetualDEXIndex: PromiseOrValue<BigNumberish>,
      minSynthToMint: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    fees(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFees(
      dexIndex: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getIndexPrice(
      dexIndex: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    getTotalPosition(
      dexIndex: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _trustedForwarder: PromiseOrValue<string>,
      _perpLemma: PromiseOrValue<string>,
      _usdc: PromiseOrValue<string>,
      _tailCollateral: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    interactionBlock(overrides?: CallOverrides): Promise<[string]>;

    isSupportedPerpetualDEXWrapper(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    mintToStackingContract(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    perpLemma(overrides?: CallOverrides): Promise<[string]>;

    perpetualDEXWrappers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFees(
      _fees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTailCollateral(
      _tailCollateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setXSynth(
      _xSynth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tailCollateral(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    usdc(overrides?: CallOverrides): Promise<[string]>;

    withdrawTo(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      perpetualDEXIndex: PromiseOrValue<BigNumberish>,
      minCollateralAmountToGetBack: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawToWExactCollateral(
      to: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      perpetualDEXIndex: PromiseOrValue<BigNumberish>,
      maxSynthToBurn: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    xSynth(overrides?: CallOverrides): Promise<[string]>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  LEMMA_SWAP(overrides?: CallOverrides): Promise<string>;

  OWNER_ROLE(overrides?: CallOverrides): Promise<string>;

  addPerpetualDEXWrapper(
    perpetualDEXIndex: PromiseOrValue<BigNumberish>,
    collateralAddress: PromiseOrValue<string>,
    perpetualDEXWrapperAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  burnToStackingContract(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeAdmin(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositTo(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    perpetualDEXIndex: PromiseOrValue<BigNumberish>,
    maxCollateralAmountRequired: PromiseOrValue<BigNumberish>,
    collateral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositToWExactCollateral(
    to: PromiseOrValue<string>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    perpetualDEXIndex: PromiseOrValue<BigNumberish>,
    minSynthToMint: PromiseOrValue<BigNumberish>,
    collateral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  fees(overrides?: CallOverrides): Promise<BigNumber>;

  getFees(
    dexIndex: PromiseOrValue<BigNumberish>,
    collateral: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getIndexPrice(
    dexIndex: PromiseOrValue<BigNumberish>,
    collateral: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  getTotalPosition(
    dexIndex: PromiseOrValue<BigNumberish>,
    collateral: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _trustedForwarder: PromiseOrValue<string>,
    _perpLemma: PromiseOrValue<string>,
    _usdc: PromiseOrValue<string>,
    _tailCollateral: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  interactionBlock(overrides?: CallOverrides): Promise<string>;

  isSupportedPerpetualDEXWrapper(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  mintToStackingContract(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  permit(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  perpLemma(overrides?: CallOverrides): Promise<string>;

  perpetualDEXWrappers(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<string>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFees(
    _fees: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTailCollateral(
    _tailCollateral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setXSynth(
    _xSynth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tailCollateral(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  usdc(overrides?: CallOverrides): Promise<string>;

  withdrawTo(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    perpetualDEXIndex: PromiseOrValue<BigNumberish>,
    minCollateralAmountToGetBack: PromiseOrValue<BigNumberish>,
    collateral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawToWExactCollateral(
    to: PromiseOrValue<string>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    perpetualDEXIndex: PromiseOrValue<BigNumberish>,
    maxSynthToBurn: PromiseOrValue<BigNumberish>,
    collateral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  xSynth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    LEMMA_SWAP(overrides?: CallOverrides): Promise<string>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<string>;

    addPerpetualDEXWrapper(
      perpetualDEXIndex: PromiseOrValue<BigNumberish>,
      collateralAddress: PromiseOrValue<string>,
      perpetualDEXWrapperAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    burnToStackingContract(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    changeAdmin(newAdmin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    depositTo(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      perpetualDEXIndex: PromiseOrValue<BigNumberish>,
      maxCollateralAmountRequired: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositToWExactCollateral(
      to: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      perpetualDEXIndex: PromiseOrValue<BigNumberish>,
      minSynthToMint: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    fees(overrides?: CallOverrides): Promise<BigNumber>;

    getFees(
      dexIndex: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getIndexPrice(
      dexIndex: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    getTotalPosition(
      dexIndex: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    initialize(
      _trustedForwarder: PromiseOrValue<string>,
      _perpLemma: PromiseOrValue<string>,
      _usdc: PromiseOrValue<string>,
      _tailCollateral: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    interactionBlock(overrides?: CallOverrides): Promise<string>;

    isSupportedPerpetualDEXWrapper(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    mintToStackingContract(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    perpLemma(overrides?: CallOverrides): Promise<string>;

    perpetualDEXWrappers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setFees(_fees: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setTailCollateral(_tailCollateral: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setXSynth(_xSynth: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tailCollateral(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    usdc(overrides?: CallOverrides): Promise<string>;

    withdrawTo(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      perpetualDEXIndex: PromiseOrValue<BigNumberish>,
      minCollateralAmountToGetBack: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawToWExactCollateral(
      to: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      perpetualDEXIndex: PromiseOrValue<BigNumberish>,
      maxSynthToBurn: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    xSynth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'DepositTo(address,address,address,uint256,uint256)'(
      perpLemma?: PromiseOrValue<string> | null,
      collateral?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      collateralRequired?: null,
    ): DepositToEventFilter;
    DepositTo(
      perpLemma?: PromiseOrValue<string> | null,
      collateral?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      collateralRequired?: null,
    ): DepositToEventFilter;

    'FeesUpdated(uint256)'(newFees?: PromiseOrValue<BigNumberish> | null): FeesUpdatedEventFilter;
    FeesUpdated(newFees?: PromiseOrValue<BigNumberish> | null): FeesUpdatedEventFilter;

    'PerpetualDexWrapperAdded(uint256,address,address)'(
      dexIndex?: PromiseOrValue<BigNumberish> | null,
      collateral?: PromiseOrValue<string> | null,
      dexWrapper?: PromiseOrValue<string> | null,
    ): PerpetualDexWrapperAddedEventFilter;
    PerpetualDexWrapperAdded(
      dexIndex?: PromiseOrValue<BigNumberish> | null,
      collateral?: PromiseOrValue<string> | null,
      dexWrapper?: PromiseOrValue<string> | null,
    ): PerpetualDexWrapperAddedEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;

    'SetTailCollateral(address)'(tailCollateral?: PromiseOrValue<string> | null): SetTailCollateralEventFilter;
    SetTailCollateral(tailCollateral?: PromiseOrValue<string> | null): SetTailCollateralEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;

    'WithdrawTo(address,address,address,uint256,uint256)'(
      perpLemma?: PromiseOrValue<string> | null,
      collateral?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      collateralGotBack?: null,
    ): WithdrawToEventFilter;
    WithdrawTo(
      perpLemma?: PromiseOrValue<string> | null,
      collateral?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      collateralGotBack?: null,
    ): WithdrawToEventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    LEMMA_SWAP(overrides?: CallOverrides): Promise<BigNumber>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addPerpetualDEXWrapper(
      perpetualDEXIndex: PromiseOrValue<BigNumberish>,
      collateralAddress: PromiseOrValue<string>,
      perpetualDEXWrapperAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    burnToStackingContract(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositTo(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      perpetualDEXIndex: PromiseOrValue<BigNumberish>,
      maxCollateralAmountRequired: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositToWExactCollateral(
      to: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      perpetualDEXIndex: PromiseOrValue<BigNumberish>,
      minSynthToMint: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    fees(overrides?: CallOverrides): Promise<BigNumber>;

    getFees(
      dexIndex: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getIndexPrice(
      dexIndex: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPosition(
      dexIndex: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initialize(
      _trustedForwarder: PromiseOrValue<string>,
      _perpLemma: PromiseOrValue<string>,
      _usdc: PromiseOrValue<string>,
      _tailCollateral: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    interactionBlock(overrides?: CallOverrides): Promise<BigNumber>;

    isSupportedPerpetualDEXWrapper(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    mintToStackingContract(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    perpLemma(overrides?: CallOverrides): Promise<BigNumber>;

    perpetualDEXWrappers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFees(
      _fees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTailCollateral(
      _tailCollateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setXSynth(
      _xSynth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tailCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    usdc(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawTo(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      perpetualDEXIndex: PromiseOrValue<BigNumberish>,
      minCollateralAmountToGetBack: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawToWExactCollateral(
      to: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      perpetualDEXIndex: PromiseOrValue<BigNumberish>,
      maxSynthToBurn: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    xSynth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LEMMA_SWAP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPerpetualDEXWrapper(
      perpetualDEXIndex: PromiseOrValue<BigNumberish>,
      collateralAddress: PromiseOrValue<string>,
      perpetualDEXWrapperAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnToStackingContract(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositTo(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      perpetualDEXIndex: PromiseOrValue<BigNumberish>,
      maxCollateralAmountRequired: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositToWExactCollateral(
      to: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      perpetualDEXIndex: PromiseOrValue<BigNumberish>,
      minSynthToMint: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    fees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFees(
      dexIndex: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getIndexPrice(
      dexIndex: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalPosition(
      dexIndex: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _trustedForwarder: PromiseOrValue<string>,
      _perpLemma: PromiseOrValue<string>,
      _usdc: PromiseOrValue<string>,
      _tailCollateral: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    interactionBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSupportedPerpetualDEXWrapper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintToStackingContract(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    perpLemma(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    perpetualDEXWrappers(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFees(
      _fees: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTailCollateral(
      _tailCollateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setXSynth(
      _xSynth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tailCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    usdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawTo(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      perpetualDEXIndex: PromiseOrValue<BigNumberish>,
      minCollateralAmountToGetBack: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawToWExactCollateral(
      to: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      perpetualDEXIndex: PromiseOrValue<BigNumberish>,
      maxSynthToBurn: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    xSynth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
