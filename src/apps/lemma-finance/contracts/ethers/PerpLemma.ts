/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface PerpLemmaInterface extends utils.Interface {
  functions: {
    'ADMIN_ROLE()': FunctionFragment;
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'MAX_UINT256()': FunctionFragment;
    'OWNER_ROLE()': FunctionFragment;
    'PERPLEMMA_ROLE()': FunctionFragment;
    'REBALANCER_ROLE()': FunctionFragment;
    'USDC_TREASURY()': FunctionFragment;
    'accountBalance()': FunctionFragment;
    'accruedFPLossesFromXSynthInUSDC()': FunctionFragment;
    'accruedFPLossesFromXUSDLInUSDC()': FunctionFragment;
    'amountBase()': FunctionFragment;
    'amountQuote()': FunctionFragment;
    'amountUsdlCollateralDeposited()': FunctionFragment;
    'calculateMintingAsset(uint256,uint8,bool)': FunctionFragment;
    'changeAdmin(address)': FunctionFragment;
    'clearingHouse()': FunctionFragment;
    'clearingHouseConfig()': FunctionFragment;
    'closeLongWithExactBase(uint256)': FunctionFragment;
    'closeLongWithExactQuote(uint256)': FunctionFragment;
    'closeShortWithExactBase(uint256)': FunctionFragment;
    'closeShortWithExactQuote(uint256)': FunctionFragment;
    'closedPrice()': FunctionFragment;
    'collateralRatio()': FunctionFragment;
    'computeRequiredUSDCForTrade(uint256,bool)': FunctionFragment;
    'deposit(uint256,address)': FunctionFragment;
    'depositSettlementToken(uint256)': FunctionFragment;
    'distributeFundingPayments()': FunctionFragment;
    'fundingPaymentsToDistribute()': FunctionFragment;
    'getAccountValue()': FunctionFragment;
    'getAmountInCollateralDecimalsForPerp(uint256,address,bool)': FunctionFragment;
    'getCollateralBackAfterSettlement(uint256,address,bool)': FunctionFragment;
    'getCollateralRatios()': FunctionFragment;
    'getCollateralTokens()': FunctionFragment;
    'getDeltaExposure()': FunctionFragment;
    'getExposureDetails()': FunctionFragment;
    'getFees()': FunctionFragment;
    'getFreeCollateral()': FunctionFragment;
    'getIndexPrice()': FunctionFragment;
    'getMargin()': FunctionFragment;
    'getMarkPrice()': FunctionFragment;
    'getMaxSettlementTokenAcceptableByVault()': FunctionFragment;
    'getMinFreeCollateral()': FunctionFragment;
    'getMinMarginSafeThreshold()': FunctionFragment;
    'getPendingFundingPayment()': FunctionFragment;
    'getRelativeMargin()': FunctionFragment;
    'getRequiredUSDCToBackMinting(uint256,bool)': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'getSettlementToken()': FunctionFragment;
    'getSettlementTokenAmountInVault()': FunctionFragment;
    'getTotalPosition()': FunctionFragment;
    'getUsdlCollateralDecimals()': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'hasSettled()': FunctionFragment;
    'initialize(address,address,address,address,address,address,address,uint256)': FunctionFragment;
    'isAdditionalUSDCAcceptable(uint256)': FunctionFragment;
    'isTrustedForwarder(address)': FunctionFragment;
    'isUsdlCollateralTailAsset()': FunctionFragment;
    'lemmaSynth()': FunctionFragment;
    'marketRegistry()': FunctionFragment;
    'maxPosition()': FunctionFragment;
    'minFreeCollateral()': FunctionFragment;
    'minMarginSafeThreshold()': FunctionFragment;
    'mintedPositionSynthForThisWrapper()': FunctionFragment;
    'mintedPositionUsdlForThisWrapper()': FunctionFragment;
    'openLongWithExactBase(uint256)': FunctionFragment;
    'openLongWithExactQuote(uint256)': FunctionFragment;
    'openShortWithExactBase(uint256)': FunctionFragment;
    'openShortWithExactQuote(uint256)': FunctionFragment;
    'percFundingPaymentsToUSDLHolders()': FunctionFragment;
    'perpVault()': FunctionFragment;
    'reBalancer()': FunctionFragment;
    'rebalance(address,uint256,int256,bool)': FunctionFragment;
    'referrerCode()': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'resetApprovals()': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'setCollateralRatio(uint24)': FunctionFragment;
    'setIsUsdlCollateralTailAsset(bool)': FunctionFragment;
    'setLemmaSynth(address)': FunctionFragment;
    'setMaxPosition(uint256)': FunctionFragment;
    'setMinFreeCollateral(uint256)': FunctionFragment;
    'setMinMarginSafeThreshold(uint256)': FunctionFragment;
    'setPercFundingPaymentsToUSDLHolders(uint256)': FunctionFragment;
    'setReBalancer(address)': FunctionFragment;
    'setReferrerCode(bytes32)': FunctionFragment;
    'setSettlementTokenManager(address)': FunctionFragment;
    'setUSDLemma(address)': FunctionFragment;
    'setXSynth(address)': FunctionFragment;
    'setXUsdl(address)': FunctionFragment;
    'settle()': FunctionFragment;
    'settlePendingFundingPayments()': FunctionFragment;
    'settlementTokenManager()': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'trade(uint256,bool,bool)': FunctionFragment;
    'usdLemma()': FunctionFragment;
    'usdc()': FunctionFragment;
    'usdcDecimals()': FunctionFragment;
    'usdlBaseTokenAddress()': FunctionFragment;
    'usdlCollateral()': FunctionFragment;
    'usdlCollateralDecimals()': FunctionFragment;
    'withdraw(uint256,address)': FunctionFragment;
    'withdrawSettlementToken(uint256)': FunctionFragment;
    'withdrawSettlementTokenTo(uint256,address)': FunctionFragment;
    'xSynth()': FunctionFragment;
    'xUsdl()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'ADMIN_ROLE'
      | 'DEFAULT_ADMIN_ROLE'
      | 'MAX_UINT256'
      | 'OWNER_ROLE'
      | 'PERPLEMMA_ROLE'
      | 'REBALANCER_ROLE'
      | 'USDC_TREASURY'
      | 'accountBalance'
      | 'accruedFPLossesFromXSynthInUSDC'
      | 'accruedFPLossesFromXUSDLInUSDC'
      | 'amountBase'
      | 'amountQuote'
      | 'amountUsdlCollateralDeposited'
      | 'calculateMintingAsset'
      | 'changeAdmin'
      | 'clearingHouse'
      | 'clearingHouseConfig'
      | 'closeLongWithExactBase'
      | 'closeLongWithExactQuote'
      | 'closeShortWithExactBase'
      | 'closeShortWithExactQuote'
      | 'closedPrice'
      | 'collateralRatio'
      | 'computeRequiredUSDCForTrade'
      | 'deposit'
      | 'depositSettlementToken'
      | 'distributeFundingPayments'
      | 'fundingPaymentsToDistribute'
      | 'getAccountValue'
      | 'getAmountInCollateralDecimalsForPerp'
      | 'getCollateralBackAfterSettlement'
      | 'getCollateralRatios'
      | 'getCollateralTokens'
      | 'getDeltaExposure'
      | 'getExposureDetails'
      | 'getFees'
      | 'getFreeCollateral'
      | 'getIndexPrice'
      | 'getMargin'
      | 'getMarkPrice'
      | 'getMaxSettlementTokenAcceptableByVault'
      | 'getMinFreeCollateral'
      | 'getMinMarginSafeThreshold'
      | 'getPendingFundingPayment'
      | 'getRelativeMargin'
      | 'getRequiredUSDCToBackMinting'
      | 'getRoleAdmin'
      | 'getSettlementToken'
      | 'getSettlementTokenAmountInVault'
      | 'getTotalPosition'
      | 'getUsdlCollateralDecimals'
      | 'grantRole'
      | 'hasRole'
      | 'hasSettled'
      | 'initialize'
      | 'isAdditionalUSDCAcceptable'
      | 'isTrustedForwarder'
      | 'isUsdlCollateralTailAsset'
      | 'lemmaSynth'
      | 'marketRegistry'
      | 'maxPosition'
      | 'minFreeCollateral'
      | 'minMarginSafeThreshold'
      | 'mintedPositionSynthForThisWrapper'
      | 'mintedPositionUsdlForThisWrapper'
      | 'openLongWithExactBase'
      | 'openLongWithExactQuote'
      | 'openShortWithExactBase'
      | 'openShortWithExactQuote'
      | 'percFundingPaymentsToUSDLHolders'
      | 'perpVault'
      | 'reBalancer'
      | 'rebalance'
      | 'referrerCode'
      | 'renounceRole'
      | 'resetApprovals'
      | 'revokeRole'
      | 'setCollateralRatio'
      | 'setIsUsdlCollateralTailAsset'
      | 'setLemmaSynth'
      | 'setMaxPosition'
      | 'setMinFreeCollateral'
      | 'setMinMarginSafeThreshold'
      | 'setPercFundingPaymentsToUSDLHolders'
      | 'setReBalancer'
      | 'setReferrerCode'
      | 'setSettlementTokenManager'
      | 'setUSDLemma'
      | 'setXSynth'
      | 'setXUsdl'
      | 'settle'
      | 'settlePendingFundingPayments'
      | 'settlementTokenManager'
      | 'supportsInterface'
      | 'trade'
      | 'usdLemma'
      | 'usdc'
      | 'usdcDecimals'
      | 'usdlBaseTokenAddress'
      | 'usdlCollateral'
      | 'usdlCollateralDecimals'
      | 'withdraw'
      | 'withdrawSettlementToken'
      | 'withdrawSettlementTokenTo'
      | 'xSynth'
      | 'xUsdl',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_UINT256', values?: undefined): string;
  encodeFunctionData(functionFragment: 'OWNER_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PERPLEMMA_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'REBALANCER_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'USDC_TREASURY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accountBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accruedFPLossesFromXSynthInUSDC', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accruedFPLossesFromXUSDLInUSDC', values?: undefined): string;
  encodeFunctionData(functionFragment: 'amountBase', values?: undefined): string;
  encodeFunctionData(functionFragment: 'amountQuote', values?: undefined): string;
  encodeFunctionData(functionFragment: 'amountUsdlCollateralDeposited', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'calculateMintingAsset',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'changeAdmin', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'clearingHouse', values?: undefined): string;
  encodeFunctionData(functionFragment: 'clearingHouseConfig', values?: undefined): string;
  encodeFunctionData(functionFragment: 'closeLongWithExactBase', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'closeLongWithExactQuote', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'closeShortWithExactBase', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'closeShortWithExactQuote', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'closedPrice', values?: undefined): string;
  encodeFunctionData(functionFragment: 'collateralRatio', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'computeRequiredUSDCForTrade',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'depositSettlementToken', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'distributeFundingPayments', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fundingPaymentsToDistribute', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAccountValue', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getAmountInCollateralDecimalsForPerp',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getCollateralBackAfterSettlement',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'getCollateralRatios', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getCollateralTokens', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getDeltaExposure', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getExposureDetails', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getFees', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getFreeCollateral', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getIndexPrice', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMargin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMarkPrice', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMaxSettlementTokenAcceptableByVault', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMinFreeCollateral', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMinMarginSafeThreshold', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPendingFundingPayment', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRelativeMargin', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getRequiredUSDCToBackMinting',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'getSettlementToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getSettlementTokenAmountInVault', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getTotalPosition', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getUsdlCollateralDecimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'hasSettled', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'isAdditionalUSDCAcceptable', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'isTrustedForwarder', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isUsdlCollateralTailAsset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lemmaSynth', values?: undefined): string;
  encodeFunctionData(functionFragment: 'marketRegistry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxPosition', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minFreeCollateral', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minMarginSafeThreshold', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mintedPositionSynthForThisWrapper', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mintedPositionUsdlForThisWrapper', values?: undefined): string;
  encodeFunctionData(functionFragment: 'openLongWithExactBase', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'openLongWithExactQuote', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'openShortWithExactBase', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'openShortWithExactQuote', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'percFundingPaymentsToUSDLHolders', values?: undefined): string;
  encodeFunctionData(functionFragment: 'perpVault', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reBalancer', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'rebalance',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'referrerCode', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'resetApprovals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'setCollateralRatio', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setIsUsdlCollateralTailAsset', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'setLemmaSynth', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setMaxPosition', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setMinFreeCollateral', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setMinMarginSafeThreshold', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setPercFundingPaymentsToUSDLHolders',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setReBalancer', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setReferrerCode', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'setSettlementTokenManager', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setUSDLemma', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setXSynth', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setXUsdl', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'settle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'settlePendingFundingPayments', values?: undefined): string;
  encodeFunctionData(functionFragment: 'settlementTokenManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'trade',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'usdLemma', values?: undefined): string;
  encodeFunctionData(functionFragment: 'usdc', values?: undefined): string;
  encodeFunctionData(functionFragment: 'usdcDecimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'usdlBaseTokenAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'usdlCollateral', values?: undefined): string;
  encodeFunctionData(functionFragment: 'usdlCollateralDecimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'withdrawSettlementToken', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'withdrawSettlementTokenTo',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'xSynth', values?: undefined): string;
  encodeFunctionData(functionFragment: 'xUsdl', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_UINT256', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'OWNER_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PERPLEMMA_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'REBALANCER_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'USDC_TREASURY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accruedFPLossesFromXSynthInUSDC', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accruedFPLossesFromXUSDLInUSDC', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'amountBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'amountQuote', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'amountUsdlCollateralDeposited', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateMintingAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'clearingHouse', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'clearingHouseConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeLongWithExactBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeLongWithExactQuote', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeShortWithExactBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeShortWithExactQuote', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closedPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateralRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'computeRequiredUSDCForTrade', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositSettlementToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distributeFundingPayments', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fundingPaymentsToDistribute', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAmountInCollateralDecimalsForPerp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCollateralBackAfterSettlement', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCollateralRatios', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCollateralTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDeltaExposure', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getExposureDetails', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFreeCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getIndexPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMargin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMarkPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMaxSettlementTokenAcceptableByVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMinFreeCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMinMarginSafeThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPendingFundingPayment', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRelativeMargin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRequiredUSDCToBackMinting', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSettlementToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSettlementTokenAmountInVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUsdlCollateralDecimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasSettled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isAdditionalUSDCAcceptable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isTrustedForwarder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isUsdlCollateralTailAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lemmaSynth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minFreeCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minMarginSafeThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintedPositionSynthForThisWrapper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintedPositionUsdlForThisWrapper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'openLongWithExactBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'openLongWithExactQuote', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'openShortWithExactBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'openShortWithExactQuote', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'percFundingPaymentsToUSDLHolders', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'perpVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reBalancer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rebalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'referrerCode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resetApprovals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCollateralRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setIsUsdlCollateralTailAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLemmaSynth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMinFreeCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMinMarginSafeThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPercFundingPaymentsToUSDLHolders', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setReBalancer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setReferrerCode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSettlementTokenManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUSDLemma', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setXSynth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setXUsdl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'settle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'settlePendingFundingPayments', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'settlementTokenManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'trade', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'usdLemma', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'usdc', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'usdcDecimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'usdlBaseTokenAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'usdlCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'usdlCollateralDecimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawSettlementToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawSettlementTokenTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xSynth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xUsdl', data: BytesLike): Result;

  events: {
    'MaxPositionUpdated(uint256)': EventFragment;
    'RebalancerUpdated(address)': EventFragment;
    'ReferrerUpdated(bytes32)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'SetCollateralRatio(uint256)': EventFragment;
    'SetLemmaSynth(address)': EventFragment;
    'SetMinFreeCollateral(uint256)': EventFragment;
    'SetMinMarginSafeThreshold(uint256)': EventFragment;
    'SetSettlementTokenManager(address)': EventFragment;
    'USDLemmaUpdated(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'MaxPositionUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RebalancerUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReferrerUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetCollateralRatio'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetLemmaSynth'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetMinFreeCollateral'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetMinMarginSafeThreshold'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetSettlementTokenManager'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'USDLemmaUpdated'): EventFragment;
}

export interface MaxPositionUpdatedEventObject {
  maxPos: BigNumber;
}
export type MaxPositionUpdatedEvent = TypedEvent<[BigNumber], MaxPositionUpdatedEventObject>;

export type MaxPositionUpdatedEventFilter = TypedEventFilter<MaxPositionUpdatedEvent>;

export interface RebalancerUpdatedEventObject {
  rebalancerAddress: string;
}
export type RebalancerUpdatedEvent = TypedEvent<[string], RebalancerUpdatedEventObject>;

export type RebalancerUpdatedEventFilter = TypedEventFilter<RebalancerUpdatedEvent>;

export interface ReferrerUpdatedEventObject {
  referrerCode: string;
}
export type ReferrerUpdatedEvent = TypedEvent<[string], ReferrerUpdatedEventObject>;

export type ReferrerUpdatedEventFilter = TypedEventFilter<ReferrerUpdatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SetCollateralRatioEventObject {
  _collateralRatio: BigNumber;
}
export type SetCollateralRatioEvent = TypedEvent<[BigNumber], SetCollateralRatioEventObject>;

export type SetCollateralRatioEventFilter = TypedEventFilter<SetCollateralRatioEvent>;

export interface SetLemmaSynthEventObject {
  lemmaSynthAddress: string;
}
export type SetLemmaSynthEvent = TypedEvent<[string], SetLemmaSynthEventObject>;

export type SetLemmaSynthEventFilter = TypedEventFilter<SetLemmaSynthEvent>;

export interface SetMinFreeCollateralEventObject {
  _minFreeCollateral: BigNumber;
}
export type SetMinFreeCollateralEvent = TypedEvent<[BigNumber], SetMinFreeCollateralEventObject>;

export type SetMinFreeCollateralEventFilter = TypedEventFilter<SetMinFreeCollateralEvent>;

export interface SetMinMarginSafeThresholdEventObject {
  _minMarginSafeThreshold: BigNumber;
}
export type SetMinMarginSafeThresholdEvent = TypedEvent<[BigNumber], SetMinMarginSafeThresholdEventObject>;

export type SetMinMarginSafeThresholdEventFilter = TypedEventFilter<SetMinMarginSafeThresholdEvent>;

export interface SetSettlementTokenManagerEventObject {
  _settlementTokenManager: string;
}
export type SetSettlementTokenManagerEvent = TypedEvent<[string], SetSettlementTokenManagerEventObject>;

export type SetSettlementTokenManagerEventFilter = TypedEventFilter<SetSettlementTokenManagerEvent>;

export interface USDLemmaUpdatedEventObject {
  usdlAddress: string;
}
export type USDLemmaUpdatedEvent = TypedEvent<[string], USDLemmaUpdatedEventObject>;

export type USDLemmaUpdatedEventFilter = TypedEventFilter<USDLemmaUpdatedEvent>;

export interface PerpLemma extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PerpLemmaInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MAX_UINT256(overrides?: CallOverrides): Promise<[BigNumber]>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PERPLEMMA_ROLE(overrides?: CallOverrides): Promise<[string]>;

    REBALANCER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    USDC_TREASURY(overrides?: CallOverrides): Promise<[string]>;

    accountBalance(overrides?: CallOverrides): Promise<[string]>;

    accruedFPLossesFromXSynthInUSDC(overrides?: CallOverrides): Promise<[BigNumber]>;

    accruedFPLossesFromXUSDLInUSDC(overrides?: CallOverrides): Promise<[BigNumber]>;

    amountBase(overrides?: CallOverrides): Promise<[BigNumber]>;

    amountQuote(overrides?: CallOverrides): Promise<[BigNumber]>;

    amountUsdlCollateralDeposited(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateMintingAsset(
      amount: PromiseOrValue<BigNumberish>,
      basis: PromiseOrValue<BigNumberish>,
      isOpenShort: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    clearingHouse(overrides?: CallOverrides): Promise<[string]>;

    clearingHouseConfig(overrides?: CallOverrides): Promise<[string]>;

    closeLongWithExactBase(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    closeLongWithExactQuote(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    closeShortWithExactBase(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    closeShortWithExactQuote(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    closedPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateralRatio(overrides?: CallOverrides): Promise<[number]>;

    computeRequiredUSDCForTrade(
      amount: PromiseOrValue<BigNumberish>,
      isShort: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { requiredUSDC: BigNumber }>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositSettlementToken(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    distributeFundingPayments(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    fundingPaymentsToDistribute(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAccountValue(overrides?: CallOverrides): Promise<[BigNumber] & { value_1e18: BigNumber }>;

    getAmountInCollateralDecimalsForPerp(
      amount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      roundUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getCollateralBackAfterSettlement(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      isUsdl: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getCollateralRatios(overrides?: CallOverrides): Promise<[number, number] & { imRatio: number; mmRatio: number }>;

    getCollateralTokens(overrides?: CallOverrides): Promise<[string[]] & { res: string[] }>;

    getDeltaExposure(overrides?: CallOverrides): Promise<[BigNumber]>;

    getExposureDetails(overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFreeCollateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    getIndexPrice(overrides?: CallOverrides): Promise<[BigNumber] & { indexPrice: BigNumber }>;

    getMargin(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMarkPrice(overrides?: CallOverrides): Promise<[BigNumber] & { token0Price: BigNumber }>;

    getMaxSettlementTokenAcceptableByVault(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinFreeCollateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinMarginSafeThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPendingFundingPayment(overrides?: CallOverrides): Promise<[BigNumber] & { pendingFundingPayments: BigNumber }>;

    getRelativeMargin(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRequiredUSDCToBackMinting(
      amount: PromiseOrValue<BigNumberish>,
      isShort: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[boolean, BigNumber] & { isAcceptable: boolean; extraUSDC: BigNumber }>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    getSettlementToken(overrides?: CallOverrides): Promise<[string]>;

    getSettlementTokenAmountInVault(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalPosition(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUsdlCollateralDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    hasSettled(overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      _trustedForwarder: PromiseOrValue<string>,
      _usdlCollateral: PromiseOrValue<string>,
      _usdlBaseToken: PromiseOrValue<string>,
      _clearingHouse: PromiseOrValue<string>,
      _marketRegistry: PromiseOrValue<string>,
      _usdLemma: PromiseOrValue<string>,
      _lemmaSynth: PromiseOrValue<string>,
      _maxPosition: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isAdditionalUSDCAcceptable(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isUsdlCollateralTailAsset(overrides?: CallOverrides): Promise<[boolean]>;

    lemmaSynth(overrides?: CallOverrides): Promise<[string]>;

    marketRegistry(overrides?: CallOverrides): Promise<[string]>;

    maxPosition(overrides?: CallOverrides): Promise<[BigNumber]>;

    minFreeCollateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    minMarginSafeThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintedPositionSynthForThisWrapper(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintedPositionUsdlForThisWrapper(overrides?: CallOverrides): Promise<[BigNumber]>;

    openLongWithExactBase(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    openLongWithExactQuote(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    openShortWithExactBase(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    openShortWithExactQuote(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    percFundingPaymentsToUSDLHolders(overrides?: CallOverrides): Promise<[BigNumber]>;

    perpVault(overrides?: CallOverrides): Promise<[string]>;

    reBalancer(overrides?: CallOverrides): Promise<[string]>;

    rebalance(
      router: PromiseOrValue<string>,
      routerType: PromiseOrValue<BigNumberish>,
      amountBaseToRebalance: PromiseOrValue<BigNumberish>,
      isCheckProfit: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    referrerCode(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    resetApprovals(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setCollateralRatio(
      _collateralRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setIsUsdlCollateralTailAsset(
      _x: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLemmaSynth(
      _lemmaSynth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxPosition(
      _maxPosition: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMinFreeCollateral(
      _minFreeCollateral: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMinMarginSafeThreshold(
      _margin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPercFundingPaymentsToUSDLHolders(
      _percFundingPaymentsToUSDLHolder: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setReBalancer(
      _reBalancer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setReferrerCode(
      _referrerCode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSettlementTokenManager(
      _settlementTokenManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setUSDLemma(
      _usdLemma: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setXSynth(
      _xSynth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setXUsdl(
      _xUsdl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    settle(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    settlePendingFundingPayments(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    settlementTokenManager(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

    trade(
      amount: PromiseOrValue<BigNumberish>,
      isShorting: PromiseOrValue<boolean>,
      isExactInput: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    usdLemma(overrides?: CallOverrides): Promise<[string]>;

    usdc(overrides?: CallOverrides): Promise<[string]>;

    usdcDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    usdlBaseTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    usdlCollateral(overrides?: CallOverrides): Promise<[string]>;

    usdlCollateralDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawSettlementToken(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawSettlementTokenTo(
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    xSynth(overrides?: CallOverrides): Promise<[string]>;

    xUsdl(overrides?: CallOverrides): Promise<[string]>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MAX_UINT256(overrides?: CallOverrides): Promise<BigNumber>;

  OWNER_ROLE(overrides?: CallOverrides): Promise<string>;

  PERPLEMMA_ROLE(overrides?: CallOverrides): Promise<string>;

  REBALANCER_ROLE(overrides?: CallOverrides): Promise<string>;

  USDC_TREASURY(overrides?: CallOverrides): Promise<string>;

  accountBalance(overrides?: CallOverrides): Promise<string>;

  accruedFPLossesFromXSynthInUSDC(overrides?: CallOverrides): Promise<BigNumber>;

  accruedFPLossesFromXUSDLInUSDC(overrides?: CallOverrides): Promise<BigNumber>;

  amountBase(overrides?: CallOverrides): Promise<BigNumber>;

  amountQuote(overrides?: CallOverrides): Promise<BigNumber>;

  amountUsdlCollateralDeposited(overrides?: CallOverrides): Promise<BigNumber>;

  calculateMintingAsset(
    amount: PromiseOrValue<BigNumberish>,
    basis: PromiseOrValue<BigNumberish>,
    isOpenShort: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeAdmin(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  clearingHouse(overrides?: CallOverrides): Promise<string>;

  clearingHouseConfig(overrides?: CallOverrides): Promise<string>;

  closeLongWithExactBase(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  closeLongWithExactQuote(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  closeShortWithExactBase(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  closeShortWithExactQuote(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  closedPrice(overrides?: CallOverrides): Promise<BigNumber>;

  collateralRatio(overrides?: CallOverrides): Promise<number>;

  computeRequiredUSDCForTrade(
    amount: PromiseOrValue<BigNumberish>,
    isShort: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    collateral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositSettlementToken(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  distributeFundingPayments(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  fundingPaymentsToDistribute(overrides?: CallOverrides): Promise<BigNumber>;

  getAccountValue(overrides?: CallOverrides): Promise<BigNumber>;

  getAmountInCollateralDecimalsForPerp(
    amount: PromiseOrValue<BigNumberish>,
    collateral: PromiseOrValue<string>,
    roundUp: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getCollateralBackAfterSettlement(
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    isUsdl: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getCollateralRatios(overrides?: CallOverrides): Promise<[number, number] & { imRatio: number; mmRatio: number }>;

  getCollateralTokens(overrides?: CallOverrides): Promise<string[]>;

  getDeltaExposure(overrides?: CallOverrides): Promise<BigNumber>;

  getExposureDetails(overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  getFees(overrides?: CallOverrides): Promise<BigNumber>;

  getFreeCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  getIndexPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getMargin(overrides?: CallOverrides): Promise<BigNumber>;

  getMarkPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxSettlementTokenAcceptableByVault(overrides?: CallOverrides): Promise<BigNumber>;

  getMinFreeCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  getMinMarginSafeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  getPendingFundingPayment(overrides?: CallOverrides): Promise<BigNumber>;

  getRelativeMargin(overrides?: CallOverrides): Promise<BigNumber>;

  getRequiredUSDCToBackMinting(
    amount: PromiseOrValue<BigNumberish>,
    isShort: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<[boolean, BigNumber] & { isAcceptable: boolean; extraUSDC: BigNumber }>;

  getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  getSettlementToken(overrides?: CallOverrides): Promise<string>;

  getSettlementTokenAmountInVault(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalPosition(overrides?: CallOverrides): Promise<BigNumber>;

  getUsdlCollateralDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  hasSettled(overrides?: CallOverrides): Promise<boolean>;

  initialize(
    _trustedForwarder: PromiseOrValue<string>,
    _usdlCollateral: PromiseOrValue<string>,
    _usdlBaseToken: PromiseOrValue<string>,
    _clearingHouse: PromiseOrValue<string>,
    _marketRegistry: PromiseOrValue<string>,
    _usdLemma: PromiseOrValue<string>,
    _lemmaSynth: PromiseOrValue<string>,
    _maxPosition: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isAdditionalUSDCAcceptable(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isUsdlCollateralTailAsset(overrides?: CallOverrides): Promise<boolean>;

  lemmaSynth(overrides?: CallOverrides): Promise<string>;

  marketRegistry(overrides?: CallOverrides): Promise<string>;

  maxPosition(overrides?: CallOverrides): Promise<BigNumber>;

  minFreeCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  minMarginSafeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  mintedPositionSynthForThisWrapper(overrides?: CallOverrides): Promise<BigNumber>;

  mintedPositionUsdlForThisWrapper(overrides?: CallOverrides): Promise<BigNumber>;

  openLongWithExactBase(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  openLongWithExactQuote(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  openShortWithExactBase(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  openShortWithExactQuote(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  percFundingPaymentsToUSDLHolders(overrides?: CallOverrides): Promise<BigNumber>;

  perpVault(overrides?: CallOverrides): Promise<string>;

  reBalancer(overrides?: CallOverrides): Promise<string>;

  rebalance(
    router: PromiseOrValue<string>,
    routerType: PromiseOrValue<BigNumberish>,
    amountBaseToRebalance: PromiseOrValue<BigNumberish>,
    isCheckProfit: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  referrerCode(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  resetApprovals(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setCollateralRatio(
    _collateralRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setIsUsdlCollateralTailAsset(
    _x: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLemmaSynth(
    _lemmaSynth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxPosition(
    _maxPosition: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMinFreeCollateral(
    _minFreeCollateral: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMinMarginSafeThreshold(
    _margin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPercFundingPaymentsToUSDLHolders(
    _percFundingPaymentsToUSDLHolder: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setReBalancer(
    _reBalancer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setReferrerCode(
    _referrerCode: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSettlementTokenManager(
    _settlementTokenManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setUSDLemma(
    _usdLemma: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setXSynth(
    _xSynth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setXUsdl(
    _xUsdl: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  settle(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  settlePendingFundingPayments(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  settlementTokenManager(overrides?: CallOverrides): Promise<string>;

  supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  trade(
    amount: PromiseOrValue<BigNumberish>,
    isShorting: PromiseOrValue<boolean>,
    isExactInput: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  usdLemma(overrides?: CallOverrides): Promise<string>;

  usdc(overrides?: CallOverrides): Promise<string>;

  usdcDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  usdlBaseTokenAddress(overrides?: CallOverrides): Promise<string>;

  usdlCollateral(overrides?: CallOverrides): Promise<string>;

  usdlCollateralDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    collateral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawSettlementToken(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawSettlementTokenTo(
    _amount: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  xSynth(overrides?: CallOverrides): Promise<string>;

  xUsdl(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MAX_UINT256(overrides?: CallOverrides): Promise<BigNumber>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<string>;

    PERPLEMMA_ROLE(overrides?: CallOverrides): Promise<string>;

    REBALANCER_ROLE(overrides?: CallOverrides): Promise<string>;

    USDC_TREASURY(overrides?: CallOverrides): Promise<string>;

    accountBalance(overrides?: CallOverrides): Promise<string>;

    accruedFPLossesFromXSynthInUSDC(overrides?: CallOverrides): Promise<BigNumber>;

    accruedFPLossesFromXUSDLInUSDC(overrides?: CallOverrides): Promise<BigNumber>;

    amountBase(overrides?: CallOverrides): Promise<BigNumber>;

    amountQuote(overrides?: CallOverrides): Promise<BigNumber>;

    amountUsdlCollateralDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    calculateMintingAsset(
      amount: PromiseOrValue<BigNumberish>,
      basis: PromiseOrValue<BigNumberish>,
      isOpenShort: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    changeAdmin(newAdmin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    clearingHouse(overrides?: CallOverrides): Promise<string>;

    clearingHouseConfig(overrides?: CallOverrides): Promise<string>;

    closeLongWithExactBase(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    closeLongWithExactQuote(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    closeShortWithExactBase(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    closeShortWithExactQuote(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    closedPrice(overrides?: CallOverrides): Promise<BigNumber>;

    collateralRatio(overrides?: CallOverrides): Promise<number>;

    computeRequiredUSDCForTrade(
      amount: PromiseOrValue<BigNumberish>,
      isShort: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositSettlementToken(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    distributeFundingPayments(overrides?: CallOverrides): Promise<
      [boolean, BigNumber, BigNumber] & {
        isProfit: boolean;
        amountUSDCToXUSDL: BigNumber;
        amountUSDCToXSynth: BigNumber;
      }
    >;

    fundingPaymentsToDistribute(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountValue(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountInCollateralDecimalsForPerp(
      amount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      roundUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCollateralBackAfterSettlement(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      isUsdl: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getCollateralRatios(overrides?: CallOverrides): Promise<[number, number] & { imRatio: number; mmRatio: number }>;

    getCollateralTokens(overrides?: CallOverrides): Promise<string[]>;

    getDeltaExposure(overrides?: CallOverrides): Promise<BigNumber>;

    getExposureDetails(overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getFees(overrides?: CallOverrides): Promise<BigNumber>;

    getFreeCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    getIndexPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getMargin(overrides?: CallOverrides): Promise<BigNumber>;

    getMarkPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxSettlementTokenAcceptableByVault(overrides?: CallOverrides): Promise<BigNumber>;

    getMinFreeCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    getMinMarginSafeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingFundingPayment(overrides?: CallOverrides): Promise<BigNumber>;

    getRelativeMargin(overrides?: CallOverrides): Promise<BigNumber>;

    getRequiredUSDCToBackMinting(
      amount: PromiseOrValue<BigNumberish>,
      isShort: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[boolean, BigNumber] & { isAcceptable: boolean; extraUSDC: BigNumber }>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    getSettlementToken(overrides?: CallOverrides): Promise<string>;

    getSettlementTokenAmountInVault(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPosition(overrides?: CallOverrides): Promise<BigNumber>;

    getUsdlCollateralDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    hasSettled(overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _trustedForwarder: PromiseOrValue<string>,
      _usdlCollateral: PromiseOrValue<string>,
      _usdlBaseToken: PromiseOrValue<string>,
      _clearingHouse: PromiseOrValue<string>,
      _marketRegistry: PromiseOrValue<string>,
      _usdLemma: PromiseOrValue<string>,
      _lemmaSynth: PromiseOrValue<string>,
      _maxPosition: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    isAdditionalUSDCAcceptable(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isUsdlCollateralTailAsset(overrides?: CallOverrides): Promise<boolean>;

    lemmaSynth(overrides?: CallOverrides): Promise<string>;

    marketRegistry(overrides?: CallOverrides): Promise<string>;

    maxPosition(overrides?: CallOverrides): Promise<BigNumber>;

    minFreeCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    minMarginSafeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    mintedPositionSynthForThisWrapper(overrides?: CallOverrides): Promise<BigNumber>;

    mintedPositionUsdlForThisWrapper(overrides?: CallOverrides): Promise<BigNumber>;

    openLongWithExactBase(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    openLongWithExactQuote(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    openShortWithExactBase(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    openShortWithExactQuote(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    percFundingPaymentsToUSDLHolders(overrides?: CallOverrides): Promise<BigNumber>;

    perpVault(overrides?: CallOverrides): Promise<string>;

    reBalancer(overrides?: CallOverrides): Promise<string>;

    rebalance(
      router: PromiseOrValue<string>,
      routerType: PromiseOrValue<BigNumberish>,
      amountBaseToRebalance: PromiseOrValue<BigNumberish>,
      isCheckProfit: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    referrerCode(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    resetApprovals(overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setCollateralRatio(_collateralRatio: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setIsUsdlCollateralTailAsset(_x: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setLemmaSynth(_lemmaSynth: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setMaxPosition(_maxPosition: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setMinFreeCollateral(_minFreeCollateral: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setMinMarginSafeThreshold(_margin: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setPercFundingPaymentsToUSDLHolders(
      _percFundingPaymentsToUSDLHolder: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setReBalancer(_reBalancer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setReferrerCode(_referrerCode: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    setSettlementTokenManager(
      _settlementTokenManager: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setUSDLemma(_usdLemma: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setXSynth(_xSynth: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setXUsdl(_xUsdl: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    settle(overrides?: CallOverrides): Promise<void>;

    settlePendingFundingPayments(overrides?: CallOverrides): Promise<void>;

    settlementTokenManager(overrides?: CallOverrides): Promise<string>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    trade(
      amount: PromiseOrValue<BigNumberish>,
      isShorting: PromiseOrValue<boolean>,
      isExactInput: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    usdLemma(overrides?: CallOverrides): Promise<string>;

    usdc(overrides?: CallOverrides): Promise<string>;

    usdcDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    usdlBaseTokenAddress(overrides?: CallOverrides): Promise<string>;

    usdlCollateral(overrides?: CallOverrides): Promise<string>;

    usdlCollateralDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawSettlementToken(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    withdrawSettlementTokenTo(
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    xSynth(overrides?: CallOverrides): Promise<string>;

    xUsdl(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'MaxPositionUpdated(uint256)'(maxPos?: PromiseOrValue<BigNumberish> | null): MaxPositionUpdatedEventFilter;
    MaxPositionUpdated(maxPos?: PromiseOrValue<BigNumberish> | null): MaxPositionUpdatedEventFilter;

    'RebalancerUpdated(address)'(rebalancerAddress?: PromiseOrValue<string> | null): RebalancerUpdatedEventFilter;
    RebalancerUpdated(rebalancerAddress?: PromiseOrValue<string> | null): RebalancerUpdatedEventFilter;

    'ReferrerUpdated(bytes32)'(referrerCode?: PromiseOrValue<BytesLike> | null): ReferrerUpdatedEventFilter;
    ReferrerUpdated(referrerCode?: PromiseOrValue<BytesLike> | null): ReferrerUpdatedEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;

    'SetCollateralRatio(uint256)'(
      _collateralRatio?: PromiseOrValue<BigNumberish> | null,
    ): SetCollateralRatioEventFilter;
    SetCollateralRatio(_collateralRatio?: PromiseOrValue<BigNumberish> | null): SetCollateralRatioEventFilter;

    'SetLemmaSynth(address)'(lemmaSynthAddress?: PromiseOrValue<string> | null): SetLemmaSynthEventFilter;
    SetLemmaSynth(lemmaSynthAddress?: PromiseOrValue<string> | null): SetLemmaSynthEventFilter;

    'SetMinFreeCollateral(uint256)'(
      _minFreeCollateral?: PromiseOrValue<BigNumberish> | null,
    ): SetMinFreeCollateralEventFilter;
    SetMinFreeCollateral(_minFreeCollateral?: PromiseOrValue<BigNumberish> | null): SetMinFreeCollateralEventFilter;

    'SetMinMarginSafeThreshold(uint256)'(
      _minMarginSafeThreshold?: PromiseOrValue<BigNumberish> | null,
    ): SetMinMarginSafeThresholdEventFilter;
    SetMinMarginSafeThreshold(
      _minMarginSafeThreshold?: PromiseOrValue<BigNumberish> | null,
    ): SetMinMarginSafeThresholdEventFilter;

    'SetSettlementTokenManager(address)'(
      _settlementTokenManager?: PromiseOrValue<string> | null,
    ): SetSettlementTokenManagerEventFilter;
    SetSettlementTokenManager(
      _settlementTokenManager?: PromiseOrValue<string> | null,
    ): SetSettlementTokenManagerEventFilter;

    'USDLemmaUpdated(address)'(usdlAddress?: PromiseOrValue<string> | null): USDLemmaUpdatedEventFilter;
    USDLemmaUpdated(usdlAddress?: PromiseOrValue<string> | null): USDLemmaUpdatedEventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_UINT256(overrides?: CallOverrides): Promise<BigNumber>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PERPLEMMA_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    REBALANCER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    USDC_TREASURY(overrides?: CallOverrides): Promise<BigNumber>;

    accountBalance(overrides?: CallOverrides): Promise<BigNumber>;

    accruedFPLossesFromXSynthInUSDC(overrides?: CallOverrides): Promise<BigNumber>;

    accruedFPLossesFromXUSDLInUSDC(overrides?: CallOverrides): Promise<BigNumber>;

    amountBase(overrides?: CallOverrides): Promise<BigNumber>;

    amountQuote(overrides?: CallOverrides): Promise<BigNumber>;

    amountUsdlCollateralDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    calculateMintingAsset(
      amount: PromiseOrValue<BigNumberish>,
      basis: PromiseOrValue<BigNumberish>,
      isOpenShort: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    clearingHouse(overrides?: CallOverrides): Promise<BigNumber>;

    clearingHouseConfig(overrides?: CallOverrides): Promise<BigNumber>;

    closeLongWithExactBase(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    closeLongWithExactQuote(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    closeShortWithExactBase(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    closeShortWithExactQuote(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    closedPrice(overrides?: CallOverrides): Promise<BigNumber>;

    collateralRatio(overrides?: CallOverrides): Promise<BigNumber>;

    computeRequiredUSDCForTrade(
      amount: PromiseOrValue<BigNumberish>,
      isShort: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositSettlementToken(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    distributeFundingPayments(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    fundingPaymentsToDistribute(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountValue(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountInCollateralDecimalsForPerp(
      amount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      roundUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCollateralBackAfterSettlement(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      isUsdl: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getCollateralRatios(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getDeltaExposure(overrides?: CallOverrides): Promise<BigNumber>;

    getExposureDetails(overrides?: CallOverrides): Promise<BigNumber>;

    getFees(overrides?: CallOverrides): Promise<BigNumber>;

    getFreeCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    getIndexPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getMargin(overrides?: CallOverrides): Promise<BigNumber>;

    getMarkPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxSettlementTokenAcceptableByVault(overrides?: CallOverrides): Promise<BigNumber>;

    getMinFreeCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    getMinMarginSafeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingFundingPayment(overrides?: CallOverrides): Promise<BigNumber>;

    getRelativeMargin(overrides?: CallOverrides): Promise<BigNumber>;

    getRequiredUSDCToBackMinting(
      amount: PromiseOrValue<BigNumberish>,
      isShort: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getSettlementToken(overrides?: CallOverrides): Promise<BigNumber>;

    getSettlementTokenAmountInVault(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPosition(overrides?: CallOverrides): Promise<BigNumber>;

    getUsdlCollateralDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    hasSettled(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _trustedForwarder: PromiseOrValue<string>,
      _usdlCollateral: PromiseOrValue<string>,
      _usdlBaseToken: PromiseOrValue<string>,
      _clearingHouse: PromiseOrValue<string>,
      _marketRegistry: PromiseOrValue<string>,
      _usdLemma: PromiseOrValue<string>,
      _lemmaSynth: PromiseOrValue<string>,
      _maxPosition: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isAdditionalUSDCAcceptable(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isUsdlCollateralTailAsset(overrides?: CallOverrides): Promise<BigNumber>;

    lemmaSynth(overrides?: CallOverrides): Promise<BigNumber>;

    marketRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    maxPosition(overrides?: CallOverrides): Promise<BigNumber>;

    minFreeCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    minMarginSafeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    mintedPositionSynthForThisWrapper(overrides?: CallOverrides): Promise<BigNumber>;

    mintedPositionUsdlForThisWrapper(overrides?: CallOverrides): Promise<BigNumber>;

    openLongWithExactBase(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    openLongWithExactQuote(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    openShortWithExactBase(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    openShortWithExactQuote(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    percFundingPaymentsToUSDLHolders(overrides?: CallOverrides): Promise<BigNumber>;

    perpVault(overrides?: CallOverrides): Promise<BigNumber>;

    reBalancer(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(
      router: PromiseOrValue<string>,
      routerType: PromiseOrValue<BigNumberish>,
      amountBaseToRebalance: PromiseOrValue<BigNumberish>,
      isCheckProfit: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    referrerCode(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    resetApprovals(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setCollateralRatio(
      _collateralRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setIsUsdlCollateralTailAsset(
      _x: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLemmaSynth(
      _lemmaSynth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxPosition(
      _maxPosition: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMinFreeCollateral(
      _minFreeCollateral: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMinMarginSafeThreshold(
      _margin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPercFundingPaymentsToUSDLHolders(
      _percFundingPaymentsToUSDLHolder: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setReBalancer(
      _reBalancer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setReferrerCode(
      _referrerCode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSettlementTokenManager(
      _settlementTokenManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setUSDLemma(
      _usdLemma: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setXSynth(
      _xSynth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setXUsdl(
      _xUsdl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    settle(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    settlePendingFundingPayments(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    settlementTokenManager(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    trade(
      amount: PromiseOrValue<BigNumberish>,
      isShorting: PromiseOrValue<boolean>,
      isExactInput: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    usdLemma(overrides?: CallOverrides): Promise<BigNumber>;

    usdc(overrides?: CallOverrides): Promise<BigNumber>;

    usdcDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    usdlBaseTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    usdlCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    usdlCollateralDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawSettlementToken(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawSettlementTokenTo(
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    xSynth(overrides?: CallOverrides): Promise<BigNumber>;

    xUsdl(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_UINT256(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERPLEMMA_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REBALANCER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC_TREASURY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accruedFPLossesFromXSynthInUSDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accruedFPLossesFromXUSDLInUSDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    amountBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    amountQuote(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    amountUsdlCollateralDeposited(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateMintingAsset(
      amount: PromiseOrValue<BigNumberish>,
      basis: PromiseOrValue<BigNumberish>,
      isOpenShort: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    clearingHouse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    clearingHouseConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closeLongWithExactBase(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    closeLongWithExactQuote(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    closeShortWithExactBase(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    closeShortWithExactQuote(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    closedPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    computeRequiredUSDCForTrade(
      amount: PromiseOrValue<BigNumberish>,
      isShort: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositSettlementToken(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    distributeFundingPayments(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    fundingPaymentsToDistribute(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmountInCollateralDecimalsForPerp(
      amount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      roundUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getCollateralBackAfterSettlement(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      isUsdl: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getCollateralRatios(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollateralTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDeltaExposure(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExposureDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFreeCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIndexPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarkPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxSettlementTokenAcceptableByVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinFreeCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinMarginSafeThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingFundingPayment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRelativeMargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRequiredUSDCToBackMinting(
      amount: PromiseOrValue<BigNumberish>,
      isShort: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSettlementToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSettlementTokenAmountInVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalPosition(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUsdlCollateralDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    hasSettled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _trustedForwarder: PromiseOrValue<string>,
      _usdlCollateral: PromiseOrValue<string>,
      _usdlBaseToken: PromiseOrValue<string>,
      _clearingHouse: PromiseOrValue<string>,
      _marketRegistry: PromiseOrValue<string>,
      _usdLemma: PromiseOrValue<string>,
      _lemmaSynth: PromiseOrValue<string>,
      _maxPosition: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isAdditionalUSDCAcceptable(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(forwarder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isUsdlCollateralTailAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lemmaSynth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxPosition(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minFreeCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minMarginSafeThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintedPositionSynthForThisWrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintedPositionUsdlForThisWrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openLongWithExactBase(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    openLongWithExactQuote(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    openShortWithExactBase(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    openShortWithExactQuote(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    percFundingPaymentsToUSDLHolders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    perpVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reBalancer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalance(
      router: PromiseOrValue<string>,
      routerType: PromiseOrValue<BigNumberish>,
      amountBaseToRebalance: PromiseOrValue<BigNumberish>,
      isCheckProfit: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    referrerCode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    resetApprovals(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setCollateralRatio(
      _collateralRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setIsUsdlCollateralTailAsset(
      _x: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLemmaSynth(
      _lemmaSynth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxPosition(
      _maxPosition: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMinFreeCollateral(
      _minFreeCollateral: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMinMarginSafeThreshold(
      _margin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPercFundingPaymentsToUSDLHolders(
      _percFundingPaymentsToUSDLHolder: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setReBalancer(
      _reBalancer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setReferrerCode(
      _referrerCode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSettlementTokenManager(
      _settlementTokenManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setUSDLemma(
      _usdLemma: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setXSynth(
      _xSynth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setXUsdl(
      _xUsdl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    settle(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    settlePendingFundingPayments(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    settlementTokenManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trade(
      amount: PromiseOrValue<BigNumberish>,
      isShorting: PromiseOrValue<boolean>,
      isExactInput: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    usdLemma(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdcDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdlBaseTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdlCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdlCollateralDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawSettlementToken(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawSettlementTokenTo(
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    xSynth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xUsdl(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
