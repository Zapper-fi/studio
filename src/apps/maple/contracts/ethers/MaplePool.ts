/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface MaplePoolInterface extends utils.Interface {
  functions: {
    'BPTVal(address,address,address,address)': FunctionFragment;
    'DL_FACTORY()': FunctionFragment;
    'accumulativeFundsOf(address)': FunctionFragment;
    'accumulativeLossesOf(address)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'allowedLiquidityProviders(address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'cancelWithdraw()': FunctionFragment;
    'claim(address,address)': FunctionFragment;
    'custodyAllowance(address,address)': FunctionFragment;
    'deactivate()': FunctionFragment;
    'debtLockers(address,address)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'delegateFee()': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'depositDate(address)': FunctionFragment;
    'finalize()': FunctionFragment;
    'fundLoan(address,address,uint256)': FunctionFragment;
    'getInitialStakeRequirements()': FunctionFragment;
    'getPoolSharesRequired(address,address,address,address,uint256)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'increaseCustodyAllowance(address,uint256)': FunctionFragment;
    'intendToWithdraw()': FunctionFragment;
    'interestBalance()': FunctionFragment;
    'interestSum()': FunctionFragment;
    'isDepositAllowed(uint256)': FunctionFragment;
    'isPoolFinalized()': FunctionFragment;
    'liquidityAsset()': FunctionFragment;
    'liquidityCap()': FunctionFragment;
    'liquidityLocker()': FunctionFragment;
    'lockupPeriod()': FunctionFragment;
    'lossesBalance()': FunctionFragment;
    'name()': FunctionFragment;
    'openToPublic()': FunctionFragment;
    'poolAdmins(address)': FunctionFragment;
    'poolDelegate()': FunctionFragment;
    'poolLosses()': FunctionFragment;
    'poolState()': FunctionFragment;
    'principalOut()': FunctionFragment;
    'reclaimERC20(address)': FunctionFragment;
    'recognizableLossesOf(address)': FunctionFragment;
    'recognizedLossesOf(address)': FunctionFragment;
    'setAllowList(address,bool)': FunctionFragment;
    'setLiquidityCap(uint256)': FunctionFragment;
    'setLockupPeriod(uint256)': FunctionFragment;
    'setOpenToPublic(bool)': FunctionFragment;
    'setPoolAdmin(address,bool)': FunctionFragment;
    'setStakingFee(uint256)': FunctionFragment;
    'stakeAsset()': FunctionFragment;
    'stakeLocker()': FunctionFragment;
    'stakingFee()': FunctionFragment;
    'superFactory()': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalCustodyAllowance(address)': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferByCustodian(address,address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'triggerDefault(address,address)': FunctionFragment;
    'updateFundsReceived()': FunctionFragment;
    'updateLossesReceived()': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdrawCooldown(address)': FunctionFragment;
    'withdrawFunds()': FunctionFragment;
    'withdrawableFundsOf(address)': FunctionFragment;
    'withdrawnFundsOf(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BPTVal'
      | 'DL_FACTORY'
      | 'accumulativeFundsOf'
      | 'accumulativeLossesOf'
      | 'allowance'
      | 'allowedLiquidityProviders'
      | 'approve'
      | 'balanceOf'
      | 'cancelWithdraw'
      | 'claim'
      | 'custodyAllowance'
      | 'deactivate'
      | 'debtLockers'
      | 'decimals'
      | 'decreaseAllowance'
      | 'delegateFee'
      | 'deposit'
      | 'depositDate'
      | 'finalize'
      | 'fundLoan'
      | 'getInitialStakeRequirements'
      | 'getPoolSharesRequired'
      | 'increaseAllowance'
      | 'increaseCustodyAllowance'
      | 'intendToWithdraw'
      | 'interestBalance'
      | 'interestSum'
      | 'isDepositAllowed'
      | 'isPoolFinalized'
      | 'liquidityAsset'
      | 'liquidityCap'
      | 'liquidityLocker'
      | 'lockupPeriod'
      | 'lossesBalance'
      | 'name'
      | 'openToPublic'
      | 'poolAdmins'
      | 'poolDelegate'
      | 'poolLosses'
      | 'poolState'
      | 'principalOut'
      | 'reclaimERC20'
      | 'recognizableLossesOf'
      | 'recognizedLossesOf'
      | 'setAllowList'
      | 'setLiquidityCap'
      | 'setLockupPeriod'
      | 'setOpenToPublic'
      | 'setPoolAdmin'
      | 'setStakingFee'
      | 'stakeAsset'
      | 'stakeLocker'
      | 'stakingFee'
      | 'superFactory'
      | 'symbol'
      | 'totalCustodyAllowance'
      | 'totalSupply'
      | 'transfer'
      | 'transferByCustodian'
      | 'transferFrom'
      | 'triggerDefault'
      | 'updateFundsReceived'
      | 'updateLossesReceived'
      | 'withdraw'
      | 'withdrawCooldown'
      | 'withdrawFunds'
      | 'withdrawableFundsOf'
      | 'withdrawnFundsOf',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BPTVal', values: [string, string, string, string]): string;
  encodeFunctionData(functionFragment: 'DL_FACTORY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accumulativeFundsOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'accumulativeLossesOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'allowedLiquidityProviders', values: [string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'cancelWithdraw', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claim', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'custodyAllowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'deactivate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'debtLockers', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'delegateFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'depositDate', values: [string]): string;
  encodeFunctionData(functionFragment: 'finalize', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fundLoan', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getInitialStakeRequirements', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getPoolSharesRequired',
    values: [string, string, string, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'increaseCustodyAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'intendToWithdraw', values?: undefined): string;
  encodeFunctionData(functionFragment: 'interestBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'interestSum', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isDepositAllowed', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'isPoolFinalized', values?: undefined): string;
  encodeFunctionData(functionFragment: 'liquidityAsset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'liquidityCap', values?: undefined): string;
  encodeFunctionData(functionFragment: 'liquidityLocker', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lockupPeriod', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lossesBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'openToPublic', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolAdmins', values: [string]): string;
  encodeFunctionData(functionFragment: 'poolDelegate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolLosses', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolState', values?: undefined): string;
  encodeFunctionData(functionFragment: 'principalOut', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reclaimERC20', values: [string]): string;
  encodeFunctionData(functionFragment: 'recognizableLossesOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'recognizedLossesOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'setAllowList', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'setLiquidityCap', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setLockupPeriod', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setOpenToPublic', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'setPoolAdmin', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'setStakingFee', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'stakeAsset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stakeLocker', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stakingFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'superFactory', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalCustodyAllowance', values: [string]): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferByCustodian', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'triggerDefault', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'updateFundsReceived', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateLossesReceived', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawCooldown', values: [string]): string;
  encodeFunctionData(functionFragment: 'withdrawFunds', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawableFundsOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'withdrawnFundsOf', values: [string]): string;

  decodeFunctionResult(functionFragment: 'BPTVal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DL_FACTORY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accumulativeFundsOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accumulativeLossesOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowedLiquidityProviders', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancelWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'custodyAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deactivate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'debtLockers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegateFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositDate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'finalize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fundLoan', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getInitialStakeRequirements', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolSharesRequired', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseCustodyAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'intendToWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'interestBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'interestSum', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isDepositAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isPoolFinalized', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidityAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidityCap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidityLocker', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockupPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lossesBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'openToPublic', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolAdmins', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolDelegate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolLosses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'principalOut', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reclaimERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recognizableLossesOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recognizedLossesOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAllowList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLiquidityCap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLockupPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOpenToPublic', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPoolAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setStakingFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeLocker', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakingFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'superFactory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalCustodyAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferByCustodian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'triggerDefault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateFundsReceived', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateLossesReceived', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawCooldown', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawFunds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawableFundsOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawnFundsOf', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'BalanceUpdated(address,address,uint256)': EventFragment;
    'Claim(address,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'Cooldown(address,uint256)': EventFragment;
    'CustodyAllowanceChanged(address,address,uint256,uint256)': EventFragment;
    'CustodyTransfer(address,address,address,uint256)': EventFragment;
    'DefaultSuffered(address,uint256,uint256,uint256,uint256)': EventFragment;
    'DepositDateUpdated(address,uint256)': EventFragment;
    'FundsDistributed(address,uint256)': EventFragment;
    'FundsWithdrawn(address,uint256,uint256)': EventFragment;
    'LPStatusChanged(address,bool)': EventFragment;
    'LiquidityCapSet(uint256)': EventFragment;
    'LoanFunded(address,address,uint256)': EventFragment;
    'LockupPeriodSet(uint256)': EventFragment;
    'LossesCorrectionUpdated(address,int256)': EventFragment;
    'LossesDistributed(address,uint256)': EventFragment;
    'LossesPerShareUpdated(uint256)': EventFragment;
    'LossesRecognized(address,uint256,uint256)': EventFragment;
    'PointsCorrectionUpdated(address,int256)': EventFragment;
    'PointsPerShareUpdated(uint256)': EventFragment;
    'PoolAdminSet(address,bool)': EventFragment;
    'PoolOpenedToPublic(bool)': EventFragment;
    'PoolStateChanged(uint8)': EventFragment;
    'StakingFeeSet(uint256)': EventFragment;
    'TotalCustodyAllowanceUpdated(address,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BalanceUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Claim'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Cooldown'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CustodyAllowanceChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CustodyTransfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DefaultSuffered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositDateUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FundsDistributed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FundsWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LPStatusChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidityCapSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LoanFunded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LockupPeriodSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LossesCorrectionUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LossesDistributed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LossesPerShareUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LossesRecognized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PointsCorrectionUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PointsPerShareUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolAdminSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolOpenedToPublic'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolStateChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StakingFeeSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TotalCustodyAllowanceUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BalanceUpdatedEventObject {
  liquidityProvider: string;
  token: string;
  balance: BigNumber;
}
export type BalanceUpdatedEvent = TypedEvent<[string, string, BigNumber], BalanceUpdatedEventObject>;

export type BalanceUpdatedEventFilter = TypedEventFilter<BalanceUpdatedEvent>;

export interface ClaimEventObject {
  loan: string;
  interest: BigNumber;
  principal: BigNumber;
  fee: BigNumber;
  stakeLockerPortion: BigNumber;
  poolDelegatePortion: BigNumber;
}
export type ClaimEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber], ClaimEventObject>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface CooldownEventObject {
  liquidityProvider: string;
  cooldown: BigNumber;
}
export type CooldownEvent = TypedEvent<[string, BigNumber], CooldownEventObject>;

export type CooldownEventFilter = TypedEventFilter<CooldownEvent>;

export interface CustodyAllowanceChangedEventObject {
  liquidityProvider: string;
  custodian: string;
  oldAllowance: BigNumber;
  newAllowance: BigNumber;
}
export type CustodyAllowanceChangedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  CustodyAllowanceChangedEventObject
>;

export type CustodyAllowanceChangedEventFilter = TypedEventFilter<CustodyAllowanceChangedEvent>;

export interface CustodyTransferEventObject {
  custodian: string;
  from: string;
  to: string;
  amount: BigNumber;
}
export type CustodyTransferEvent = TypedEvent<[string, string, string, BigNumber], CustodyTransferEventObject>;

export type CustodyTransferEventFilter = TypedEventFilter<CustodyTransferEvent>;

export interface DefaultSufferedEventObject {
  loan: string;
  defaultSuffered: BigNumber;
  bptsBurned: BigNumber;
  bptsReturned: BigNumber;
  liquidityAssetRecoveredFromBurn: BigNumber;
}
export type DefaultSufferedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  DefaultSufferedEventObject
>;

export type DefaultSufferedEventFilter = TypedEventFilter<DefaultSufferedEvent>;

export interface DepositDateUpdatedEventObject {
  liquidityProvider: string;
  depositDate: BigNumber;
}
export type DepositDateUpdatedEvent = TypedEvent<[string, BigNumber], DepositDateUpdatedEventObject>;

export type DepositDateUpdatedEventFilter = TypedEventFilter<DepositDateUpdatedEvent>;

export interface FundsDistributedEventObject {
  by: string;
  fundsDistributed: BigNumber;
}
export type FundsDistributedEvent = TypedEvent<[string, BigNumber], FundsDistributedEventObject>;

export type FundsDistributedEventFilter = TypedEventFilter<FundsDistributedEvent>;

export interface FundsWithdrawnEventObject {
  by: string;
  fundsWithdrawn: BigNumber;
  totalWithdrawn: BigNumber;
}
export type FundsWithdrawnEvent = TypedEvent<[string, BigNumber, BigNumber], FundsWithdrawnEventObject>;

export type FundsWithdrawnEventFilter = TypedEventFilter<FundsWithdrawnEvent>;

export interface LPStatusChangedEventObject {
  liquidityProvider: string;
  status: boolean;
}
export type LPStatusChangedEvent = TypedEvent<[string, boolean], LPStatusChangedEventObject>;

export type LPStatusChangedEventFilter = TypedEventFilter<LPStatusChangedEvent>;

export interface LiquidityCapSetEventObject {
  newLiquidityCap: BigNumber;
}
export type LiquidityCapSetEvent = TypedEvent<[BigNumber], LiquidityCapSetEventObject>;

export type LiquidityCapSetEventFilter = TypedEventFilter<LiquidityCapSetEvent>;

export interface LoanFundedEventObject {
  loan: string;
  debtLocker: string;
  amountFunded: BigNumber;
}
export type LoanFundedEvent = TypedEvent<[string, string, BigNumber], LoanFundedEventObject>;

export type LoanFundedEventFilter = TypedEventFilter<LoanFundedEvent>;

export interface LockupPeriodSetEventObject {
  newLockupPeriod: BigNumber;
}
export type LockupPeriodSetEvent = TypedEvent<[BigNumber], LockupPeriodSetEventObject>;

export type LockupPeriodSetEventFilter = TypedEventFilter<LockupPeriodSetEvent>;

export interface LossesCorrectionUpdatedEventObject {
  account: string;
  lossesCorrection: BigNumber;
}
export type LossesCorrectionUpdatedEvent = TypedEvent<[string, BigNumber], LossesCorrectionUpdatedEventObject>;

export type LossesCorrectionUpdatedEventFilter = TypedEventFilter<LossesCorrectionUpdatedEvent>;

export interface LossesDistributedEventObject {
  by: string;
  lossesDistributed: BigNumber;
}
export type LossesDistributedEvent = TypedEvent<[string, BigNumber], LossesDistributedEventObject>;

export type LossesDistributedEventFilter = TypedEventFilter<LossesDistributedEvent>;

export interface LossesPerShareUpdatedEventObject {
  lossesPerShare: BigNumber;
}
export type LossesPerShareUpdatedEvent = TypedEvent<[BigNumber], LossesPerShareUpdatedEventObject>;

export type LossesPerShareUpdatedEventFilter = TypedEventFilter<LossesPerShareUpdatedEvent>;

export interface LossesRecognizedEventObject {
  by: string;
  lossesRecognized: BigNumber;
  totalLossesRecognized: BigNumber;
}
export type LossesRecognizedEvent = TypedEvent<[string, BigNumber, BigNumber], LossesRecognizedEventObject>;

export type LossesRecognizedEventFilter = TypedEventFilter<LossesRecognizedEvent>;

export interface PointsCorrectionUpdatedEventObject {
  account: string;
  pointsCorrection: BigNumber;
}
export type PointsCorrectionUpdatedEvent = TypedEvent<[string, BigNumber], PointsCorrectionUpdatedEventObject>;

export type PointsCorrectionUpdatedEventFilter = TypedEventFilter<PointsCorrectionUpdatedEvent>;

export interface PointsPerShareUpdatedEventObject {
  pointsPerShare: BigNumber;
}
export type PointsPerShareUpdatedEvent = TypedEvent<[BigNumber], PointsPerShareUpdatedEventObject>;

export type PointsPerShareUpdatedEventFilter = TypedEventFilter<PointsPerShareUpdatedEvent>;

export interface PoolAdminSetEventObject {
  poolAdmin: string;
  allowed: boolean;
}
export type PoolAdminSetEvent = TypedEvent<[string, boolean], PoolAdminSetEventObject>;

export type PoolAdminSetEventFilter = TypedEventFilter<PoolAdminSetEvent>;

export interface PoolOpenedToPublicEventObject {
  isOpen: boolean;
}
export type PoolOpenedToPublicEvent = TypedEvent<[boolean], PoolOpenedToPublicEventObject>;

export type PoolOpenedToPublicEventFilter = TypedEventFilter<PoolOpenedToPublicEvent>;

export interface PoolStateChangedEventObject {
  state: number;
}
export type PoolStateChangedEvent = TypedEvent<[number], PoolStateChangedEventObject>;

export type PoolStateChangedEventFilter = TypedEventFilter<PoolStateChangedEvent>;

export interface StakingFeeSetEventObject {
  newStakingFee: BigNumber;
}
export type StakingFeeSetEvent = TypedEvent<[BigNumber], StakingFeeSetEventObject>;

export type StakingFeeSetEventFilter = TypedEventFilter<StakingFeeSetEvent>;

export interface TotalCustodyAllowanceUpdatedEventObject {
  liquidityProvider: string;
  newTotalAllowance: BigNumber;
}
export type TotalCustodyAllowanceUpdatedEvent = TypedEvent<
  [string, BigNumber],
  TotalCustodyAllowanceUpdatedEventObject
>;

export type TotalCustodyAllowanceUpdatedEventFilter = TypedEventFilter<TotalCustodyAllowanceUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface MaplePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MaplePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BPTVal(
      _bPool: string,
      _liquidityAsset: string,
      _staker: string,
      _stakeLocker: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    DL_FACTORY(overrides?: CallOverrides): Promise<[number]>;

    accumulativeFundsOf(_owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    accumulativeLossesOf(_owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    allowedLiquidityProviders(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    claim(
      loan: string,
      dlFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    custodyAllowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    deactivate(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    debtLockers(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    delegateFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositDate(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    finalize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    fundLoan(
      loan: string,
      dlFactory: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getInitialStakeRequirements(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, boolean, BigNumber, BigNumber]>;

    getPoolSharesRequired(
      _bPool: string,
      _liquidityAsset: string,
      _staker: string,
      _stakeLocker: string,
      _liquidityAssetAmountRequired: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    increaseCustodyAllowance(
      custodian: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    intendToWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    interestBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    interestSum(overrides?: CallOverrides): Promise<[BigNumber]>;

    isDepositAllowed(depositAmt: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    isPoolFinalized(overrides?: CallOverrides): Promise<[boolean]>;

    liquidityAsset(overrides?: CallOverrides): Promise<[string]>;

    liquidityCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityLocker(overrides?: CallOverrides): Promise<[string]>;

    lockupPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    lossesBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    openToPublic(overrides?: CallOverrides): Promise<[boolean]>;

    poolAdmins(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    poolDelegate(overrides?: CallOverrides): Promise<[string]>;

    poolLosses(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolState(overrides?: CallOverrides): Promise<[number]>;

    principalOut(overrides?: CallOverrides): Promise<[BigNumber]>;

    reclaimERC20(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    recognizableLossesOf(_owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    recognizedLossesOf(_owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    setAllowList(
      account: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setLiquidityCap(
      newLiquidityCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setLockupPeriod(
      newLockupPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setOpenToPublic(
      open: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPoolAdmin(
      poolAdmin: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setStakingFee(
      newStakingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    stakeAsset(overrides?: CallOverrides): Promise<[string]>;

    stakeLocker(overrides?: CallOverrides): Promise<[string]>;

    stakingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    superFactory(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalCustodyAllowance(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferByCustodian(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    triggerDefault(
      loan: string,
      dlFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateFundsReceived(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    updateLossesReceived(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    withdraw(
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawCooldown(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFunds(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    withdrawableFundsOf(_owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawnFundsOf(_owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  BPTVal(
    _bPool: string,
    _liquidityAsset: string,
    _staker: string,
    _stakeLocker: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  DL_FACTORY(overrides?: CallOverrides): Promise<number>;

  accumulativeFundsOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  accumulativeLossesOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  allowedLiquidityProviders(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  cancelWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  claim(
    loan: string,
    dlFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  custodyAllowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  deactivate(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  debtLockers(arg0: string, arg1: string, overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  delegateFee(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(amt: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  depositDate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  finalize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  fundLoan(
    loan: string,
    dlFactory: string,
    amt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getInitialStakeRequirements(
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber, boolean, BigNumber, BigNumber]>;

  getPoolSharesRequired(
    _bPool: string,
    _liquidityAsset: string,
    _staker: string,
    _stakeLocker: string,
    _liquidityAssetAmountRequired: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  increaseCustodyAllowance(
    custodian: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  intendToWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  interestBalance(overrides?: CallOverrides): Promise<BigNumber>;

  interestSum(overrides?: CallOverrides): Promise<BigNumber>;

  isDepositAllowed(depositAmt: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  isPoolFinalized(overrides?: CallOverrides): Promise<boolean>;

  liquidityAsset(overrides?: CallOverrides): Promise<string>;

  liquidityCap(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityLocker(overrides?: CallOverrides): Promise<string>;

  lockupPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  lossesBalance(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  openToPublic(overrides?: CallOverrides): Promise<boolean>;

  poolAdmins(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  poolDelegate(overrides?: CallOverrides): Promise<string>;

  poolLosses(overrides?: CallOverrides): Promise<BigNumber>;

  poolState(overrides?: CallOverrides): Promise<number>;

  principalOut(overrides?: CallOverrides): Promise<BigNumber>;

  reclaimERC20(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  recognizableLossesOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  recognizedLossesOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  setAllowList(
    account: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setLiquidityCap(
    newLiquidityCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setLockupPeriod(
    newLockupPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setOpenToPublic(
    open: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPoolAdmin(
    poolAdmin: string,
    allowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setStakingFee(
    newStakingFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  stakeAsset(overrides?: CallOverrides): Promise<string>;

  stakeLocker(overrides?: CallOverrides): Promise<string>;

  stakingFee(overrides?: CallOverrides): Promise<BigNumber>;

  superFactory(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalCustodyAllowance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferByCustodian(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  triggerDefault(
    loan: string,
    dlFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateFundsReceived(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  updateLossesReceived(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  withdraw(
    amt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawCooldown(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFunds(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  withdrawableFundsOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  withdrawnFundsOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BPTVal(
      _bPool: string,
      _liquidityAsset: string,
      _staker: string,
      _stakeLocker: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    DL_FACTORY(overrides?: CallOverrides): Promise<number>;

    accumulativeFundsOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    accumulativeLossesOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowedLiquidityProviders(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelWithdraw(overrides?: CallOverrides): Promise<void>;

    claim(loan: string, dlFactory: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    custodyAllowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    deactivate(overrides?: CallOverrides): Promise<void>;

    debtLockers(arg0: string, arg1: string, overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    delegateFee(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(amt: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositDate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    finalize(overrides?: CallOverrides): Promise<void>;

    fundLoan(loan: string, dlFactory: string, amt: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getInitialStakeRequirements(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, boolean, BigNumber, BigNumber]>;

    getPoolSharesRequired(
      _bPool: string,
      _liquidityAsset: string,
      _staker: string,
      _stakeLocker: string,
      _liquidityAssetAmountRequired: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    increaseCustodyAllowance(custodian: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    intendToWithdraw(overrides?: CallOverrides): Promise<void>;

    interestBalance(overrides?: CallOverrides): Promise<BigNumber>;

    interestSum(overrides?: CallOverrides): Promise<BigNumber>;

    isDepositAllowed(depositAmt: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    isPoolFinalized(overrides?: CallOverrides): Promise<boolean>;

    liquidityAsset(overrides?: CallOverrides): Promise<string>;

    liquidityCap(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityLocker(overrides?: CallOverrides): Promise<string>;

    lockupPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    lossesBalance(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    openToPublic(overrides?: CallOverrides): Promise<boolean>;

    poolAdmins(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    poolDelegate(overrides?: CallOverrides): Promise<string>;

    poolLosses(overrides?: CallOverrides): Promise<BigNumber>;

    poolState(overrides?: CallOverrides): Promise<number>;

    principalOut(overrides?: CallOverrides): Promise<BigNumber>;

    reclaimERC20(token: string, overrides?: CallOverrides): Promise<void>;

    recognizableLossesOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    recognizedLossesOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    setAllowList(account: string, status: boolean, overrides?: CallOverrides): Promise<void>;

    setLiquidityCap(newLiquidityCap: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setLockupPeriod(newLockupPeriod: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setOpenToPublic(open: boolean, overrides?: CallOverrides): Promise<void>;

    setPoolAdmin(poolAdmin: string, allowed: boolean, overrides?: CallOverrides): Promise<void>;

    setStakingFee(newStakingFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakeAsset(overrides?: CallOverrides): Promise<string>;

    stakeLocker(overrides?: CallOverrides): Promise<string>;

    stakingFee(overrides?: CallOverrides): Promise<BigNumber>;

    superFactory(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalCustodyAllowance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferByCustodian(from: string, to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    transferFrom(sender: string, recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    triggerDefault(loan: string, dlFactory: string, overrides?: CallOverrides): Promise<void>;

    updateFundsReceived(overrides?: CallOverrides): Promise<void>;

    updateLossesReceived(overrides?: CallOverrides): Promise<void>;

    withdraw(amt: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawCooldown(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFunds(overrides?: CallOverrides): Promise<void>;

    withdrawableFundsOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawnFundsOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;

    'BalanceUpdated(address,address,uint256)'(
      liquidityProvider?: string | null,
      token?: string | null,
      balance?: null,
    ): BalanceUpdatedEventFilter;
    BalanceUpdated(liquidityProvider?: string | null, token?: string | null, balance?: null): BalanceUpdatedEventFilter;

    'Claim(address,uint256,uint256,uint256,uint256,uint256)'(
      loan?: string | null,
      interest?: null,
      principal?: null,
      fee?: null,
      stakeLockerPortion?: null,
      poolDelegatePortion?: null,
    ): ClaimEventFilter;
    Claim(
      loan?: string | null,
      interest?: null,
      principal?: null,
      fee?: null,
      stakeLockerPortion?: null,
      poolDelegatePortion?: null,
    ): ClaimEventFilter;

    'Cooldown(address,uint256)'(liquidityProvider?: string | null, cooldown?: null): CooldownEventFilter;
    Cooldown(liquidityProvider?: string | null, cooldown?: null): CooldownEventFilter;

    'CustodyAllowanceChanged(address,address,uint256,uint256)'(
      liquidityProvider?: string | null,
      custodian?: string | null,
      oldAllowance?: null,
      newAllowance?: null,
    ): CustodyAllowanceChangedEventFilter;
    CustodyAllowanceChanged(
      liquidityProvider?: string | null,
      custodian?: string | null,
      oldAllowance?: null,
      newAllowance?: null,
    ): CustodyAllowanceChangedEventFilter;

    'CustodyTransfer(address,address,address,uint256)'(
      custodian?: string | null,
      from?: string | null,
      to?: string | null,
      amount?: null,
    ): CustodyTransferEventFilter;
    CustodyTransfer(
      custodian?: string | null,
      from?: string | null,
      to?: string | null,
      amount?: null,
    ): CustodyTransferEventFilter;

    'DefaultSuffered(address,uint256,uint256,uint256,uint256)'(
      loan?: string | null,
      defaultSuffered?: null,
      bptsBurned?: null,
      bptsReturned?: null,
      liquidityAssetRecoveredFromBurn?: null,
    ): DefaultSufferedEventFilter;
    DefaultSuffered(
      loan?: string | null,
      defaultSuffered?: null,
      bptsBurned?: null,
      bptsReturned?: null,
      liquidityAssetRecoveredFromBurn?: null,
    ): DefaultSufferedEventFilter;

    'DepositDateUpdated(address,uint256)'(
      liquidityProvider?: string | null,
      depositDate?: null,
    ): DepositDateUpdatedEventFilter;
    DepositDateUpdated(liquidityProvider?: string | null, depositDate?: null): DepositDateUpdatedEventFilter;

    'FundsDistributed(address,uint256)'(by?: string | null, fundsDistributed?: null): FundsDistributedEventFilter;
    FundsDistributed(by?: string | null, fundsDistributed?: null): FundsDistributedEventFilter;

    'FundsWithdrawn(address,uint256,uint256)'(
      by?: string | null,
      fundsWithdrawn?: null,
      totalWithdrawn?: null,
    ): FundsWithdrawnEventFilter;
    FundsWithdrawn(by?: string | null, fundsWithdrawn?: null, totalWithdrawn?: null): FundsWithdrawnEventFilter;

    'LPStatusChanged(address,bool)'(liquidityProvider?: string | null, status?: null): LPStatusChangedEventFilter;
    LPStatusChanged(liquidityProvider?: string | null, status?: null): LPStatusChangedEventFilter;

    'LiquidityCapSet(uint256)'(newLiquidityCap?: null): LiquidityCapSetEventFilter;
    LiquidityCapSet(newLiquidityCap?: null): LiquidityCapSetEventFilter;

    'LoanFunded(address,address,uint256)'(
      loan?: string | null,
      debtLocker?: null,
      amountFunded?: null,
    ): LoanFundedEventFilter;
    LoanFunded(loan?: string | null, debtLocker?: null, amountFunded?: null): LoanFundedEventFilter;

    'LockupPeriodSet(uint256)'(newLockupPeriod?: null): LockupPeriodSetEventFilter;
    LockupPeriodSet(newLockupPeriod?: null): LockupPeriodSetEventFilter;

    'LossesCorrectionUpdated(address,int256)'(
      account?: string | null,
      lossesCorrection?: null,
    ): LossesCorrectionUpdatedEventFilter;
    LossesCorrectionUpdated(account?: string | null, lossesCorrection?: null): LossesCorrectionUpdatedEventFilter;

    'LossesDistributed(address,uint256)'(by?: string | null, lossesDistributed?: null): LossesDistributedEventFilter;
    LossesDistributed(by?: string | null, lossesDistributed?: null): LossesDistributedEventFilter;

    'LossesPerShareUpdated(uint256)'(lossesPerShare?: null): LossesPerShareUpdatedEventFilter;
    LossesPerShareUpdated(lossesPerShare?: null): LossesPerShareUpdatedEventFilter;

    'LossesRecognized(address,uint256,uint256)'(
      by?: string | null,
      lossesRecognized?: null,
      totalLossesRecognized?: null,
    ): LossesRecognizedEventFilter;
    LossesRecognized(
      by?: string | null,
      lossesRecognized?: null,
      totalLossesRecognized?: null,
    ): LossesRecognizedEventFilter;

    'PointsCorrectionUpdated(address,int256)'(
      account?: string | null,
      pointsCorrection?: null,
    ): PointsCorrectionUpdatedEventFilter;
    PointsCorrectionUpdated(account?: string | null, pointsCorrection?: null): PointsCorrectionUpdatedEventFilter;

    'PointsPerShareUpdated(uint256)'(pointsPerShare?: null): PointsPerShareUpdatedEventFilter;
    PointsPerShareUpdated(pointsPerShare?: null): PointsPerShareUpdatedEventFilter;

    'PoolAdminSet(address,bool)'(poolAdmin?: string | null, allowed?: null): PoolAdminSetEventFilter;
    PoolAdminSet(poolAdmin?: string | null, allowed?: null): PoolAdminSetEventFilter;

    'PoolOpenedToPublic(bool)'(isOpen?: null): PoolOpenedToPublicEventFilter;
    PoolOpenedToPublic(isOpen?: null): PoolOpenedToPublicEventFilter;

    'PoolStateChanged(uint8)'(state?: null): PoolStateChangedEventFilter;
    PoolStateChanged(state?: null): PoolStateChangedEventFilter;

    'StakingFeeSet(uint256)'(newStakingFee?: null): StakingFeeSetEventFilter;
    StakingFeeSet(newStakingFee?: null): StakingFeeSetEventFilter;

    'TotalCustodyAllowanceUpdated(address,uint256)'(
      liquidityProvider?: string | null,
      newTotalAllowance?: null,
    ): TotalCustodyAllowanceUpdatedEventFilter;
    TotalCustodyAllowanceUpdated(
      liquidityProvider?: string | null,
      newTotalAllowance?: null,
    ): TotalCustodyAllowanceUpdatedEventFilter;

    'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
  };

  estimateGas: {
    BPTVal(
      _bPool: string,
      _liquidityAsset: string,
      _staker: string,
      _stakeLocker: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    DL_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    accumulativeFundsOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    accumulativeLossesOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowedLiquidityProviders(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    claim(
      loan: string,
      dlFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    custodyAllowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    deactivate(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    debtLockers(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    delegateFee(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(amt: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    depositDate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    finalize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    fundLoan(
      loan: string,
      dlFactory: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getInitialStakeRequirements(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolSharesRequired(
      _bPool: string,
      _liquidityAsset: string,
      _staker: string,
      _stakeLocker: string,
      _liquidityAssetAmountRequired: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    increaseCustodyAllowance(
      custodian: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    intendToWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    interestBalance(overrides?: CallOverrides): Promise<BigNumber>;

    interestSum(overrides?: CallOverrides): Promise<BigNumber>;

    isDepositAllowed(depositAmt: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    isPoolFinalized(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityAsset(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityCap(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityLocker(overrides?: CallOverrides): Promise<BigNumber>;

    lockupPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    lossesBalance(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    openToPublic(overrides?: CallOverrides): Promise<BigNumber>;

    poolAdmins(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolDelegate(overrides?: CallOverrides): Promise<BigNumber>;

    poolLosses(overrides?: CallOverrides): Promise<BigNumber>;

    poolState(overrides?: CallOverrides): Promise<BigNumber>;

    principalOut(overrides?: CallOverrides): Promise<BigNumber>;

    reclaimERC20(token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    recognizableLossesOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    recognizedLossesOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    setAllowList(
      account: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setLiquidityCap(
      newLiquidityCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setLockupPeriod(
      newLockupPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setOpenToPublic(open: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setPoolAdmin(
      poolAdmin: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setStakingFee(
      newStakingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    stakeAsset(overrides?: CallOverrides): Promise<BigNumber>;

    stakeLocker(overrides?: CallOverrides): Promise<BigNumber>;

    stakingFee(overrides?: CallOverrides): Promise<BigNumber>;

    superFactory(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalCustodyAllowance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferByCustodian(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    triggerDefault(
      loan: string,
      dlFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateFundsReceived(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updateLossesReceived(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdraw(amt: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdrawCooldown(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFunds(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdrawableFundsOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawnFundsOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BPTVal(
      _bPool: string,
      _liquidityAsset: string,
      _staker: string,
      _stakeLocker: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    DL_FACTORY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accumulativeFundsOf(_owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accumulativeLossesOf(_owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowedLiquidityProviders(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    claim(
      loan: string,
      dlFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    custodyAllowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deactivate(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    debtLockers(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    delegateFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositDate(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    fundLoan(
      loan: string,
      dlFactory: string,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getInitialStakeRequirements(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolSharesRequired(
      _bPool: string,
      _liquidityAsset: string,
      _staker: string,
      _stakeLocker: string,
      _liquidityAssetAmountRequired: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    increaseCustodyAllowance(
      custodian: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    intendToWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    interestBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interestSum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDepositAllowed(depositAmt: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPoolFinalized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityLocker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockupPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lossesBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openToPublic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolAdmins(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolDelegate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolLosses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    principalOut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reclaimERC20(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    recognizableLossesOf(_owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recognizedLossesOf(_owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAllowList(
      account: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setLiquidityCap(
      newLiquidityCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setLockupPeriod(
      newLockupPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setOpenToPublic(
      open: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPoolAdmin(
      poolAdmin: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setStakingFee(
      newStakingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    stakeAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeLocker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    superFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCustodyAllowance(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferByCustodian(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    triggerDefault(
      loan: string,
      dlFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateFundsReceived(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    updateLossesReceived(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    withdraw(
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawCooldown(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFunds(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    withdrawableFundsOf(_owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawnFundsOf(_owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
