/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface MaplePoolInterface extends utils.Interface {
  functions: {
    'BOOTSTRAP_MINT()': FunctionFragment;
    'DOMAIN_SEPARATOR()': FunctionFragment;
    'PERMIT_TYPEHASH()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'asset()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'balanceOfAssets(address)': FunctionFragment;
    'convertToAssets(uint256)': FunctionFragment;
    'convertToExitAssets(uint256)': FunctionFragment;
    'convertToExitShares(uint256)': FunctionFragment;
    'convertToShares(uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'deposit(uint256,address)': FunctionFragment;
    'depositWithPermit(uint256,address,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'manager()': FunctionFragment;
    'maxDeposit(address)': FunctionFragment;
    'maxMint(address)': FunctionFragment;
    'maxRedeem(address)': FunctionFragment;
    'maxWithdraw(address)': FunctionFragment;
    'mint(uint256,address)': FunctionFragment;
    'mintWithPermit(uint256,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'name()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'previewDeposit(uint256)': FunctionFragment;
    'previewMint(uint256)': FunctionFragment;
    'previewRedeem(uint256)': FunctionFragment;
    'previewWithdraw(uint256)': FunctionFragment;
    'redeem(uint256,address,address)': FunctionFragment;
    'removeShares(uint256,address)': FunctionFragment;
    'requestRedeem(uint256,address)': FunctionFragment;
    'requestWithdraw(uint256,address)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalAssets()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'unrealizedLosses()': FunctionFragment;
    'withdraw(uint256,address,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BOOTSTRAP_MINT'
      | 'DOMAIN_SEPARATOR'
      | 'PERMIT_TYPEHASH'
      | 'allowance'
      | 'approve'
      | 'asset'
      | 'balanceOf'
      | 'balanceOfAssets'
      | 'convertToAssets'
      | 'convertToExitAssets'
      | 'convertToExitShares'
      | 'convertToShares'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit'
      | 'depositWithPermit'
      | 'increaseAllowance'
      | 'manager'
      | 'maxDeposit'
      | 'maxMint'
      | 'maxRedeem'
      | 'maxWithdraw'
      | 'mint'
      | 'mintWithPermit'
      | 'name'
      | 'nonces'
      | 'permit'
      | 'previewDeposit'
      | 'previewMint'
      | 'previewRedeem'
      | 'previewWithdraw'
      | 'redeem'
      | 'removeShares'
      | 'requestRedeem'
      | 'requestWithdraw'
      | 'symbol'
      | 'totalAssets'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'unrealizedLosses'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BOOTSTRAP_MINT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PERMIT_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'asset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'balanceOfAssets', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'convertToAssets', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'convertToExitAssets', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'convertToExitShares', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'convertToShares', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositWithPermit',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'manager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxDeposit', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maxMint', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maxRedeem', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maxWithdraw', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'mint', values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'mintWithPermit',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'permit',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'previewDeposit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'previewMint', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'previewRedeem', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'previewWithdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'redeem',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'removeShares',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'requestRedeem',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'requestWithdraw',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalAssets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'unrealizedLosses', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(functionFragment: 'BOOTSTRAP_MINT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PERMIT_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertToAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertToExitAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertToExitShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertToShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositWithPermit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'manager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRedeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintWithPermit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewRedeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requestRedeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requestWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unrealizedLosses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'BootstrapMintPerformed(address,address,uint256,uint256,uint256)': EventFragment;
    'Deposit(address,address,uint256,uint256)': EventFragment;
    'OwnershipAccepted(address,address)': EventFragment;
    'PendingOwnerSet(address,address)': EventFragment;
    'RedemptionRequested(address,uint256,uint256)': EventFragment;
    'SharesRemoved(address,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Withdraw(address,address,address,uint256,uint256)': EventFragment;
    'WithdrawRequested(address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BootstrapMintPerformed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipAccepted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PendingOwnerSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RedemptionRequested'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SharesRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawRequested'): EventFragment;
}

export interface ApprovalEventObject {
  owner_: string;
  spender_: string;
  amount_: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BootstrapMintPerformedEventObject {
  caller_: string;
  receiver_: string;
  assets_: BigNumber;
  shares_: BigNumber;
  bootStrapMintAmount_: BigNumber;
}
export type BootstrapMintPerformedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  BootstrapMintPerformedEventObject
>;

export type BootstrapMintPerformedEventFilter = TypedEventFilter<BootstrapMintPerformedEvent>;

export interface DepositEventObject {
  caller_: string;
  owner_: string;
  assets_: BigNumber;
  shares_: BigNumber;
}
export type DepositEvent = TypedEvent<[string, string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface OwnershipAcceptedEventObject {
  previousOwner_: string;
  newOwner_: string;
}
export type OwnershipAcceptedEvent = TypedEvent<[string, string], OwnershipAcceptedEventObject>;

export type OwnershipAcceptedEventFilter = TypedEventFilter<OwnershipAcceptedEvent>;

export interface PendingOwnerSetEventObject {
  owner_: string;
  pendingOwner_: string;
}
export type PendingOwnerSetEvent = TypedEvent<[string, string], PendingOwnerSetEventObject>;

export type PendingOwnerSetEventFilter = TypedEventFilter<PendingOwnerSetEvent>;

export interface RedemptionRequestedEventObject {
  owner_: string;
  shares_: BigNumber;
  escrowedShares_: BigNumber;
}
export type RedemptionRequestedEvent = TypedEvent<[string, BigNumber, BigNumber], RedemptionRequestedEventObject>;

export type RedemptionRequestedEventFilter = TypedEventFilter<RedemptionRequestedEvent>;

export interface SharesRemovedEventObject {
  owner_: string;
  shares_: BigNumber;
}
export type SharesRemovedEvent = TypedEvent<[string, BigNumber], SharesRemovedEventObject>;

export type SharesRemovedEventFilter = TypedEventFilter<SharesRemovedEvent>;

export interface TransferEventObject {
  owner_: string;
  recipient_: string;
  amount_: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawEventObject {
  caller_: string;
  receiver_: string;
  owner_: string;
  assets_: BigNumber;
  shares_: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawRequestedEventObject {
  owner_: string;
  assets_: BigNumber;
  escrowedShares_: BigNumber;
}
export type WithdrawRequestedEvent = TypedEvent<[string, BigNumber, BigNumber], WithdrawRequestedEventObject>;

export type WithdrawRequestedEventFilter = TypedEventFilter<WithdrawRequestedEvent>;

export interface MaplePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MaplePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BOOTSTRAP_MINT(overrides?: CallOverrides): Promise<[BigNumber]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string] & { domainSeparator_: string }>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfAssets(
      account_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { balanceOfAssets_: BigNumber }>;

    convertToAssets(
      shares_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { assets_: BigNumber }>;

    convertToExitAssets(
      shares_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { assets_: BigNumber }>;

    convertToExitShares(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { shares_: BigNumber }>;

    convertToShares(
      assets_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { shares_: BigNumber }>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender_: PromiseOrValue<string>,
      subtractedAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deposit(
      assets_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositWithPermit(
      assets_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      deadline_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      r_: PromiseOrValue<BytesLike>,
      s_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender_: PromiseOrValue<string>,
      addedAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    maxDeposit(
      receiver_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { maxAssets_: BigNumber }>;

    maxMint(
      receiver_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { maxShares_: BigNumber }>;

    maxRedeem(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { maxShares_: BigNumber }>;

    maxWithdraw(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { maxAssets_: BigNumber }>;

    mint(
      shares_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mintWithPermit(
      shares_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      maxAssets_: PromiseOrValue<BigNumberish>,
      deadline_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      r_: PromiseOrValue<BytesLike>,
      s_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    permit(
      owner_: PromiseOrValue<string>,
      spender_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      deadline_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      r_: PromiseOrValue<BytesLike>,
      s_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    previewDeposit(
      assets_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { shares_: BigNumber }>;

    previewMint(
      shares_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { assets_: BigNumber }>;

    previewRedeem(
      shares_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { assets_: BigNumber }>;

    previewWithdraw(
      assets_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { shares_: BigNumber }>;

    redeem(
      shares_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeShares(
      shares_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    requestRedeem(
      shares_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    requestWithdraw(
      assets_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber] & { totalAssets_: BigNumber }>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      owner_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unrealizedLosses(overrides?: CallOverrides): Promise<[BigNumber] & { unrealizedLosses_: BigNumber }>;

    withdraw(
      assets_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  BOOTSTRAP_MINT(overrides?: CallOverrides): Promise<BigNumber>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  allowance(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfAssets(account_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  convertToAssets(shares_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  convertToExitAssets(shares_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  convertToExitShares(amount_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  convertToShares(assets_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender_: PromiseOrValue<string>,
    subtractedAmount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deposit(
    assets_: PromiseOrValue<BigNumberish>,
    receiver_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositWithPermit(
    assets_: PromiseOrValue<BigNumberish>,
    receiver_: PromiseOrValue<string>,
    deadline_: PromiseOrValue<BigNumberish>,
    v_: PromiseOrValue<BigNumberish>,
    r_: PromiseOrValue<BytesLike>,
    s_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender_: PromiseOrValue<string>,
    addedAmount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  manager(overrides?: CallOverrides): Promise<string>;

  maxDeposit(receiver_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  maxMint(receiver_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  maxRedeem(owner_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  maxWithdraw(owner_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    shares_: PromiseOrValue<BigNumberish>,
    receiver_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mintWithPermit(
    shares_: PromiseOrValue<BigNumberish>,
    receiver_: PromiseOrValue<string>,
    maxAssets_: PromiseOrValue<BigNumberish>,
    deadline_: PromiseOrValue<BigNumberish>,
    v_: PromiseOrValue<BigNumberish>,
    r_: PromiseOrValue<BytesLike>,
    s_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  permit(
    owner_: PromiseOrValue<string>,
    spender_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    deadline_: PromiseOrValue<BigNumberish>,
    v_: PromiseOrValue<BigNumberish>,
    r_: PromiseOrValue<BytesLike>,
    s_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  previewDeposit(assets_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  previewMint(shares_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  previewRedeem(shares_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  previewWithdraw(assets_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    shares_: PromiseOrValue<BigNumberish>,
    receiver_: PromiseOrValue<string>,
    owner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeShares(
    shares_: PromiseOrValue<BigNumberish>,
    owner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  requestRedeem(
    shares_: PromiseOrValue<BigNumberish>,
    owner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  requestWithdraw(
    assets_: PromiseOrValue<BigNumberish>,
    owner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    owner_: PromiseOrValue<string>,
    recipient_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unrealizedLosses(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    assets_: PromiseOrValue<BigNumberish>,
    receiver_: PromiseOrValue<string>,
    owner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    BOOTSTRAP_MINT(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfAssets(account_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    convertToAssets(shares_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    convertToExitAssets(shares_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    convertToExitShares(amount_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    convertToShares(assets_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender_: PromiseOrValue<string>,
      subtractedAmount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    deposit(
      assets_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    depositWithPermit(
      assets_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      deadline_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      r_: PromiseOrValue<BytesLike>,
      s_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    increaseAllowance(
      spender_: PromiseOrValue<string>,
      addedAmount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    manager(overrides?: CallOverrides): Promise<string>;

    maxDeposit(receiver_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(receiver_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(owner_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(owner_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      shares_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mintWithPermit(
      shares_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      maxAssets_: PromiseOrValue<BigNumberish>,
      deadline_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      r_: PromiseOrValue<BytesLike>,
      s_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner_: PromiseOrValue<string>,
      spender_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      deadline_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      r_: PromiseOrValue<BytesLike>,
      s_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    previewDeposit(assets_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewMint(shares_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewRedeem(shares_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewWithdraw(assets_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      shares_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    removeShares(
      shares_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    requestRedeem(
      shares_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    requestWithdraw(
      assets_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      owner_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    unrealizedLosses(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      assets_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner_?: PromiseOrValue<string> | null,
      spender_?: PromiseOrValue<string> | null,
      amount_?: null,
    ): ApprovalEventFilter;
    Approval(
      owner_?: PromiseOrValue<string> | null,
      spender_?: PromiseOrValue<string> | null,
      amount_?: null,
    ): ApprovalEventFilter;

    'BootstrapMintPerformed(address,address,uint256,uint256,uint256)'(
      caller_?: PromiseOrValue<string> | null,
      receiver_?: PromiseOrValue<string> | null,
      assets_?: null,
      shares_?: null,
      bootStrapMintAmount_?: null,
    ): BootstrapMintPerformedEventFilter;
    BootstrapMintPerformed(
      caller_?: PromiseOrValue<string> | null,
      receiver_?: PromiseOrValue<string> | null,
      assets_?: null,
      shares_?: null,
      bootStrapMintAmount_?: null,
    ): BootstrapMintPerformedEventFilter;

    'Deposit(address,address,uint256,uint256)'(
      caller_?: PromiseOrValue<string> | null,
      owner_?: PromiseOrValue<string> | null,
      assets_?: null,
      shares_?: null,
    ): DepositEventFilter;
    Deposit(
      caller_?: PromiseOrValue<string> | null,
      owner_?: PromiseOrValue<string> | null,
      assets_?: null,
      shares_?: null,
    ): DepositEventFilter;

    'OwnershipAccepted(address,address)'(
      previousOwner_?: PromiseOrValue<string> | null,
      newOwner_?: PromiseOrValue<string> | null,
    ): OwnershipAcceptedEventFilter;
    OwnershipAccepted(
      previousOwner_?: PromiseOrValue<string> | null,
      newOwner_?: PromiseOrValue<string> | null,
    ): OwnershipAcceptedEventFilter;

    'PendingOwnerSet(address,address)'(
      owner_?: PromiseOrValue<string> | null,
      pendingOwner_?: PromiseOrValue<string> | null,
    ): PendingOwnerSetEventFilter;
    PendingOwnerSet(
      owner_?: PromiseOrValue<string> | null,
      pendingOwner_?: PromiseOrValue<string> | null,
    ): PendingOwnerSetEventFilter;

    'RedemptionRequested(address,uint256,uint256)'(
      owner_?: PromiseOrValue<string> | null,
      shares_?: null,
      escrowedShares_?: null,
    ): RedemptionRequestedEventFilter;
    RedemptionRequested(
      owner_?: PromiseOrValue<string> | null,
      shares_?: null,
      escrowedShares_?: null,
    ): RedemptionRequestedEventFilter;

    'SharesRemoved(address,uint256)'(owner_?: PromiseOrValue<string> | null, shares_?: null): SharesRemovedEventFilter;
    SharesRemoved(owner_?: PromiseOrValue<string> | null, shares_?: null): SharesRemovedEventFilter;

    'Transfer(address,address,uint256)'(
      owner_?: PromiseOrValue<string> | null,
      recipient_?: PromiseOrValue<string> | null,
      amount_?: null,
    ): TransferEventFilter;
    Transfer(
      owner_?: PromiseOrValue<string> | null,
      recipient_?: PromiseOrValue<string> | null,
      amount_?: null,
    ): TransferEventFilter;

    'Withdraw(address,address,address,uint256,uint256)'(
      caller_?: PromiseOrValue<string> | null,
      receiver_?: PromiseOrValue<string> | null,
      owner_?: PromiseOrValue<string> | null,
      assets_?: null,
      shares_?: null,
    ): WithdrawEventFilter;
    Withdraw(
      caller_?: PromiseOrValue<string> | null,
      receiver_?: PromiseOrValue<string> | null,
      owner_?: PromiseOrValue<string> | null,
      assets_?: null,
      shares_?: null,
    ): WithdrawEventFilter;

    'WithdrawRequested(address,uint256,uint256)'(
      owner_?: PromiseOrValue<string> | null,
      assets_?: null,
      escrowedShares_?: null,
    ): WithdrawRequestedEventFilter;
    WithdrawRequested(
      owner_?: PromiseOrValue<string> | null,
      assets_?: null,
      escrowedShares_?: null,
    ): WithdrawRequestedEventFilter;
  };

  estimateGas: {
    BOOTSTRAP_MINT(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfAssets(account_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    convertToAssets(shares_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    convertToExitAssets(shares_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    convertToExitShares(amount_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    convertToShares(assets_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender_: PromiseOrValue<string>,
      subtractedAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deposit(
      assets_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositWithPermit(
      assets_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      deadline_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      r_: PromiseOrValue<BytesLike>,
      s_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    increaseAllowance(
      spender_: PromiseOrValue<string>,
      addedAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    maxDeposit(receiver_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(receiver_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(owner_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(owner_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      shares_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mintWithPermit(
      shares_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      maxAssets_: PromiseOrValue<BigNumberish>,
      deadline_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      r_: PromiseOrValue<BytesLike>,
      s_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner_: PromiseOrValue<string>,
      spender_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      deadline_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      r_: PromiseOrValue<BytesLike>,
      s_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    previewDeposit(assets_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewMint(shares_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewRedeem(shares_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewWithdraw(assets_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      shares_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeShares(
      shares_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    requestRedeem(
      shares_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    requestWithdraw(
      assets_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      owner_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unrealizedLosses(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      assets_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BOOTSTRAP_MINT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfAssets(account_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertToAssets(shares_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertToExitAssets(
      shares_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    convertToExitShares(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    convertToShares(assets_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender_: PromiseOrValue<string>,
      subtractedAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      assets_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositWithPermit(
      assets_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      deadline_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      r_: PromiseOrValue<BytesLike>,
      s_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender_: PromiseOrValue<string>,
      addedAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDeposit(receiver_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxMint(receiver_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRedeem(owner_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxWithdraw(owner_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      shares_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mintWithPermit(
      shares_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      maxAssets_: PromiseOrValue<BigNumberish>,
      deadline_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      r_: PromiseOrValue<BytesLike>,
      s_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner_: PromiseOrValue<string>,
      spender_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      deadline_: PromiseOrValue<BigNumberish>,
      v_: PromiseOrValue<BigNumberish>,
      r_: PromiseOrValue<BytesLike>,
      s_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    previewDeposit(assets_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewMint(shares_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewRedeem(shares_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewWithdraw(assets_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      shares_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeShares(
      shares_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    requestRedeem(
      shares_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    requestWithdraw(
      assets_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      owner_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unrealizedLosses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      assets_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
