/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace IWithdrawalManagerStorage {
  export type CycleConfigStruct = {
    initialCycleId: PromiseOrValue<BigNumberish>;
    initialCycleTime: PromiseOrValue<BigNumberish>;
    cycleDuration: PromiseOrValue<BigNumberish>;
    windowDuration: PromiseOrValue<BigNumberish>;
  };

  export type CycleConfigStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {
    initialCycleId: BigNumber;
    initialCycleTime: BigNumber;
    cycleDuration: BigNumber;
    windowDuration: BigNumber;
  };
}

export interface MapleWithdrawalManagerInterface extends utils.Interface {
  functions: {
    'addShares(uint256,address)': FunctionFragment;
    'asset()': FunctionFragment;
    'cycleConfigs(uint256)': FunctionFragment;
    'exitCycleId(address)': FunctionFragment;
    'factory()': FunctionFragment;
    'getConfigAtId(uint256)': FunctionFragment;
    'getCurrentConfig()': FunctionFragment;
    'getCurrentCycleId()': FunctionFragment;
    'getRedeemableAmounts(uint256,address)': FunctionFragment;
    'getWindowAtId(uint256)': FunctionFragment;
    'getWindowStart(uint256)': FunctionFragment;
    'globals()': FunctionFragment;
    'governor()': FunctionFragment;
    'implementation()': FunctionFragment;
    'isInExitWindow(address)': FunctionFragment;
    'latestConfigId()': FunctionFragment;
    'lockedLiquidity()': FunctionFragment;
    'lockedShares(address)': FunctionFragment;
    'migrate(address,bytes)': FunctionFragment;
    'pool()': FunctionFragment;
    'poolDelegate()': FunctionFragment;
    'poolManager()': FunctionFragment;
    'previewRedeem(address,uint256)': FunctionFragment;
    'previewWithdraw(address,uint256)': FunctionFragment;
    'processExit(uint256,address)': FunctionFragment;
    'removeShares(uint256,address)': FunctionFragment;
    'setExitConfig(uint256,uint256)': FunctionFragment;
    'setImplementation(address)': FunctionFragment;
    'totalCycleShares(uint256)': FunctionFragment;
    'upgrade(uint256,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addShares'
      | 'asset'
      | 'cycleConfigs'
      | 'exitCycleId'
      | 'factory'
      | 'getConfigAtId'
      | 'getCurrentConfig'
      | 'getCurrentCycleId'
      | 'getRedeemableAmounts'
      | 'getWindowAtId'
      | 'getWindowStart'
      | 'globals'
      | 'governor'
      | 'implementation'
      | 'isInExitWindow'
      | 'latestConfigId'
      | 'lockedLiquidity'
      | 'lockedShares'
      | 'migrate'
      | 'pool'
      | 'poolDelegate'
      | 'poolManager'
      | 'previewRedeem'
      | 'previewWithdraw'
      | 'processExit'
      | 'removeShares'
      | 'setExitConfig'
      | 'setImplementation'
      | 'totalCycleShares'
      | 'upgrade',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addShares',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'asset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'cycleConfigs', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'exitCycleId', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getConfigAtId', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getCurrentConfig', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getCurrentCycleId', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getRedeemableAmounts',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getWindowAtId', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getWindowStart', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'globals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'governor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'implementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isInExitWindow', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'latestConfigId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lockedLiquidity', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lockedShares', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'migrate', values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'pool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolDelegate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolManager', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'previewRedeem',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'previewWithdraw',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'processExit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'removeShares',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setExitConfig',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setImplementation', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'totalCycleShares', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'upgrade',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;

  decodeFunctionResult(functionFragment: 'addShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cycleConfigs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exitCycleId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getConfigAtId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCurrentConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCurrentCycleId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRedeemableAmounts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getWindowAtId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getWindowStart', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'globals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'implementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isInExitWindow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'latestConfigId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockedLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockedShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migrate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolDelegate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewRedeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'processExit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setExitConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalCycleShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgrade', data: BytesLike): Result;

  events: {
    'ConfigurationUpdated(uint256,uint64,uint64,uint64,uint64)': EventFragment;
    'Upgraded(uint256,bytes)': EventFragment;
    'WithdrawalCancelled(address)': EventFragment;
    'WithdrawalProcessed(address,uint256,uint256)': EventFragment;
    'WithdrawalUpdated(address,uint256,uint64,uint64)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ConfigurationUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawalCancelled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawalProcessed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawalUpdated'): EventFragment;
}

export interface ConfigurationUpdatedEventObject {
  configId_: BigNumber;
  initialCycleId_: BigNumber;
  initialCycleTime_: BigNumber;
  cycleDuration_: BigNumber;
  windowDuration_: BigNumber;
}
export type ConfigurationUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  ConfigurationUpdatedEventObject
>;

export type ConfigurationUpdatedEventFilter = TypedEventFilter<ConfigurationUpdatedEvent>;

export interface UpgradedEventObject {
  toVersion_: BigNumber;
  arguments_: string;
}
export type UpgradedEvent = TypedEvent<[BigNumber, string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface WithdrawalCancelledEventObject {
  account_: string;
}
export type WithdrawalCancelledEvent = TypedEvent<[string], WithdrawalCancelledEventObject>;

export type WithdrawalCancelledEventFilter = TypedEventFilter<WithdrawalCancelledEvent>;

export interface WithdrawalProcessedEventObject {
  account_: string;
  sharesToRedeem_: BigNumber;
  assetsToWithdraw_: BigNumber;
}
export type WithdrawalProcessedEvent = TypedEvent<[string, BigNumber, BigNumber], WithdrawalProcessedEventObject>;

export type WithdrawalProcessedEventFilter = TypedEventFilter<WithdrawalProcessedEvent>;

export interface WithdrawalUpdatedEventObject {
  account_: string;
  lockedShares_: BigNumber;
  windowStart_: BigNumber;
  windowEnd_: BigNumber;
}
export type WithdrawalUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  WithdrawalUpdatedEventObject
>;

export type WithdrawalUpdatedEventFilter = TypedEventFilter<WithdrawalUpdatedEvent>;

export interface MapleWithdrawalManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MapleWithdrawalManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addShares(
      shares_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string] & { asset_: string }>;

    cycleConfigs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        initialCycleId: BigNumber;
        initialCycleTime: BigNumber;
        cycleDuration: BigNumber;
        windowDuration: BigNumber;
      }
    >;

    exitCycleId(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string] & { factory_: string }>;

    getConfigAtId(
      cycleId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [IWithdrawalManagerStorage.CycleConfigStructOutput] & {
        config_: IWithdrawalManagerStorage.CycleConfigStructOutput;
      }
    >;

    getCurrentConfig(overrides?: CallOverrides): Promise<
      [IWithdrawalManagerStorage.CycleConfigStructOutput] & {
        config_: IWithdrawalManagerStorage.CycleConfigStructOutput;
      }
    >;

    getCurrentCycleId(overrides?: CallOverrides): Promise<[BigNumber] & { cycleId_: BigNumber }>;

    getRedeemableAmounts(
      lockedShares_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        redeemableShares_: BigNumber;
        resultingAssets_: BigNumber;
        partialLiquidity_: boolean;
      }
    >;

    getWindowAtId(
      cycleId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        windowStart_: BigNumber;
        windowEnd_: BigNumber;
      }
    >;

    getWindowStart(
      cycleId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { windowStart_: BigNumber }>;

    globals(overrides?: CallOverrides): Promise<[string] & { globals_: string }>;

    governor(overrides?: CallOverrides): Promise<[string] & { governor_: string }>;

    implementation(overrides?: CallOverrides): Promise<[string] & { implementation_: string }>;

    isInExitWindow(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { isInExitWindow_: boolean }>;

    latestConfigId(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedLiquidity(overrides?: CallOverrides): Promise<[BigNumber] & { lockedLiquidity_: BigNumber }>;

    lockedShares(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    migrate(
      migrator_: PromiseOrValue<string>,
      arguments_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    poolDelegate(overrides?: CallOverrides): Promise<[string] & { poolDelegate_: string }>;

    poolManager(overrides?: CallOverrides): Promise<[string]>;

    previewRedeem(
      owner_: PromiseOrValue<string>,
      shares_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        redeemableShares_: BigNumber;
        resultingAssets_: BigNumber;
      }
    >;

    previewWithdraw(
      owner_: PromiseOrValue<string>,
      assets_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        redeemableAssets_: BigNumber;
        resultingShares_: BigNumber;
      }
    >;

    processExit(
      requestedShares_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeShares(
      shares_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setExitConfig(
      cycleDuration_: PromiseOrValue<BigNumberish>,
      windowDuration_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setImplementation(
      implementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    totalCycleShares(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    upgrade(
      version_: PromiseOrValue<BigNumberish>,
      arguments_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  addShares(
    shares_: PromiseOrValue<BigNumberish>,
    owner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  cycleConfigs(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      initialCycleId: BigNumber;
      initialCycleTime: BigNumber;
      cycleDuration: BigNumber;
      windowDuration: BigNumber;
    }
  >;

  exitCycleId(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  getConfigAtId(
    cycleId_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<IWithdrawalManagerStorage.CycleConfigStructOutput>;

  getCurrentConfig(overrides?: CallOverrides): Promise<IWithdrawalManagerStorage.CycleConfigStructOutput>;

  getCurrentCycleId(overrides?: CallOverrides): Promise<BigNumber>;

  getRedeemableAmounts(
    lockedShares_: PromiseOrValue<BigNumberish>,
    owner_: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      redeemableShares_: BigNumber;
      resultingAssets_: BigNumber;
      partialLiquidity_: boolean;
    }
  >;

  getWindowAtId(
    cycleId_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { windowStart_: BigNumber; windowEnd_: BigNumber }>;

  getWindowStart(cycleId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  globals(overrides?: CallOverrides): Promise<string>;

  governor(overrides?: CallOverrides): Promise<string>;

  implementation(overrides?: CallOverrides): Promise<string>;

  isInExitWindow(owner_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  latestConfigId(overrides?: CallOverrides): Promise<BigNumber>;

  lockedLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  lockedShares(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  migrate(
    migrator_: PromiseOrValue<string>,
    arguments_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  pool(overrides?: CallOverrides): Promise<string>;

  poolDelegate(overrides?: CallOverrides): Promise<string>;

  poolManager(overrides?: CallOverrides): Promise<string>;

  previewRedeem(
    owner_: PromiseOrValue<string>,
    shares_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      redeemableShares_: BigNumber;
      resultingAssets_: BigNumber;
    }
  >;

  previewWithdraw(
    owner_: PromiseOrValue<string>,
    assets_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      redeemableAssets_: BigNumber;
      resultingShares_: BigNumber;
    }
  >;

  processExit(
    requestedShares_: PromiseOrValue<BigNumberish>,
    owner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeShares(
    shares_: PromiseOrValue<BigNumberish>,
    owner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setExitConfig(
    cycleDuration_: PromiseOrValue<BigNumberish>,
    windowDuration_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setImplementation(
    implementation_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  totalCycleShares(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  upgrade(
    version_: PromiseOrValue<BigNumberish>,
    arguments_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    addShares(
      shares_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    asset(overrides?: CallOverrides): Promise<string>;

    cycleConfigs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        initialCycleId: BigNumber;
        initialCycleTime: BigNumber;
        cycleDuration: BigNumber;
        windowDuration: BigNumber;
      }
    >;

    exitCycleId(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    getConfigAtId(
      cycleId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<IWithdrawalManagerStorage.CycleConfigStructOutput>;

    getCurrentConfig(overrides?: CallOverrides): Promise<IWithdrawalManagerStorage.CycleConfigStructOutput>;

    getCurrentCycleId(overrides?: CallOverrides): Promise<BigNumber>;

    getRedeemableAmounts(
      lockedShares_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        redeemableShares_: BigNumber;
        resultingAssets_: BigNumber;
        partialLiquidity_: boolean;
      }
    >;

    getWindowAtId(
      cycleId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        windowStart_: BigNumber;
        windowEnd_: BigNumber;
      }
    >;

    getWindowStart(cycleId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    globals(overrides?: CallOverrides): Promise<string>;

    governor(overrides?: CallOverrides): Promise<string>;

    implementation(overrides?: CallOverrides): Promise<string>;

    isInExitWindow(owner_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    latestConfigId(overrides?: CallOverrides): Promise<BigNumber>;

    lockedLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    lockedShares(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      migrator_: PromiseOrValue<string>,
      arguments_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    pool(overrides?: CallOverrides): Promise<string>;

    poolDelegate(overrides?: CallOverrides): Promise<string>;

    poolManager(overrides?: CallOverrides): Promise<string>;

    previewRedeem(
      owner_: PromiseOrValue<string>,
      shares_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        redeemableShares_: BigNumber;
        resultingAssets_: BigNumber;
      }
    >;

    previewWithdraw(
      owner_: PromiseOrValue<string>,
      assets_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        redeemableAssets_: BigNumber;
        resultingShares_: BigNumber;
      }
    >;

    processExit(
      requestedShares_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        redeemableShares_: BigNumber;
        resultingAssets_: BigNumber;
      }
    >;

    removeShares(
      shares_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setExitConfig(
      cycleDuration_: PromiseOrValue<BigNumberish>,
      windowDuration_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setImplementation(implementation_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    totalCycleShares(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    upgrade(
      version_: PromiseOrValue<BigNumberish>,
      arguments_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'ConfigurationUpdated(uint256,uint64,uint64,uint64,uint64)'(
      configId_?: PromiseOrValue<BigNumberish> | null,
      initialCycleId_?: null,
      initialCycleTime_?: null,
      cycleDuration_?: null,
      windowDuration_?: null,
    ): ConfigurationUpdatedEventFilter;
    ConfigurationUpdated(
      configId_?: PromiseOrValue<BigNumberish> | null,
      initialCycleId_?: null,
      initialCycleTime_?: null,
      cycleDuration_?: null,
      windowDuration_?: null,
    ): ConfigurationUpdatedEventFilter;

    'Upgraded(uint256,bytes)'(toVersion_?: null, arguments_?: null): UpgradedEventFilter;
    Upgraded(toVersion_?: null, arguments_?: null): UpgradedEventFilter;

    'WithdrawalCancelled(address)'(account_?: PromiseOrValue<string> | null): WithdrawalCancelledEventFilter;
    WithdrawalCancelled(account_?: PromiseOrValue<string> | null): WithdrawalCancelledEventFilter;

    'WithdrawalProcessed(address,uint256,uint256)'(
      account_?: PromiseOrValue<string> | null,
      sharesToRedeem_?: null,
      assetsToWithdraw_?: null,
    ): WithdrawalProcessedEventFilter;
    WithdrawalProcessed(
      account_?: PromiseOrValue<string> | null,
      sharesToRedeem_?: null,
      assetsToWithdraw_?: null,
    ): WithdrawalProcessedEventFilter;

    'WithdrawalUpdated(address,uint256,uint64,uint64)'(
      account_?: PromiseOrValue<string> | null,
      lockedShares_?: null,
      windowStart_?: null,
      windowEnd_?: null,
    ): WithdrawalUpdatedEventFilter;
    WithdrawalUpdated(
      account_?: PromiseOrValue<string> | null,
      lockedShares_?: null,
      windowStart_?: null,
      windowEnd_?: null,
    ): WithdrawalUpdatedEventFilter;
  };

  estimateGas: {
    addShares(
      shares_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    cycleConfigs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    exitCycleId(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getConfigAtId(cycleId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentCycleId(overrides?: CallOverrides): Promise<BigNumber>;

    getRedeemableAmounts(
      lockedShares_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getWindowAtId(cycleId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getWindowStart(cycleId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    globals(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    isInExitWindow(owner_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    latestConfigId(overrides?: CallOverrides): Promise<BigNumber>;

    lockedLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    lockedShares(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      migrator_: PromiseOrValue<string>,
      arguments_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    poolDelegate(overrides?: CallOverrides): Promise<BigNumber>;

    poolManager(overrides?: CallOverrides): Promise<BigNumber>;

    previewRedeem(
      owner_: PromiseOrValue<string>,
      shares_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    previewWithdraw(
      owner_: PromiseOrValue<string>,
      assets_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    processExit(
      requestedShares_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeShares(
      shares_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setExitConfig(
      cycleDuration_: PromiseOrValue<BigNumberish>,
      windowDuration_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setImplementation(
      implementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    totalCycleShares(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    upgrade(
      version_: PromiseOrValue<BigNumberish>,
      arguments_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addShares(
      shares_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cycleConfigs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exitCycleId(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getConfigAtId(cycleId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentCycleId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRedeemableAmounts(
      lockedShares_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getWindowAtId(cycleId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWindowStart(cycleId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    globals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInExitWindow(owner_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestConfigId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedShares(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrate(
      migrator_: PromiseOrValue<string>,
      arguments_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolDelegate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewRedeem(
      owner_: PromiseOrValue<string>,
      shares_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    previewWithdraw(
      owner_: PromiseOrValue<string>,
      assets_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    processExit(
      requestedShares_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeShares(
      shares_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setExitConfig(
      cycleDuration_: PromiseOrValue<BigNumberish>,
      windowDuration_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setImplementation(
      implementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    totalCycleShares(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgrade(
      version_: PromiseOrValue<BigNumberish>,
      arguments_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
