/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface MapleXMplInterface extends utils.Interface {
  functions: {
    'DOMAIN_SEPARATOR()': FunctionFragment;
    'MINIMUM_MIGRATION_DELAY()': FunctionFragment;
    'PERMIT_TYPEHASH()': FunctionFragment;
    'acceptOwnership()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'asset()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'balanceOfAssets(address)': FunctionFragment;
    'cancelMigration()': FunctionFragment;
    'convertToAssets(uint256)': FunctionFragment;
    'convertToShares(uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'deposit(uint256,address)': FunctionFragment;
    'depositWithPermit(uint256,address,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'freeAssets()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'issuanceRate()': FunctionFragment;
    'lastUpdated()': FunctionFragment;
    'maxDeposit(address)': FunctionFragment;
    'maxMint(address)': FunctionFragment;
    'maxRedeem(address)': FunctionFragment;
    'maxWithdraw(address)': FunctionFragment;
    'mint(uint256,address)': FunctionFragment;
    'mintWithPermit(uint256,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'name()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingOwner()': FunctionFragment;
    'performMigration()': FunctionFragment;
    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'precision()': FunctionFragment;
    'previewDeposit(uint256)': FunctionFragment;
    'previewMint(uint256)': FunctionFragment;
    'previewRedeem(uint256)': FunctionFragment;
    'previewWithdraw(uint256)': FunctionFragment;
    'redeem(uint256,address,address)': FunctionFragment;
    'scheduleMigration(address,address)': FunctionFragment;
    'scheduledMigrationTimestamp()': FunctionFragment;
    'scheduledMigrator()': FunctionFragment;
    'scheduledNewAsset()': FunctionFragment;
    'setPendingOwner(address)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalAssets()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'updateVestingSchedule(uint256)': FunctionFragment;
    'vestingPeriodFinish()': FunctionFragment;
    'withdraw(uint256,address,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DOMAIN_SEPARATOR'
      | 'MINIMUM_MIGRATION_DELAY'
      | 'PERMIT_TYPEHASH'
      | 'acceptOwnership'
      | 'allowance'
      | 'approve'
      | 'asset'
      | 'balanceOf'
      | 'balanceOfAssets'
      | 'cancelMigration'
      | 'convertToAssets'
      | 'convertToShares'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit'
      | 'depositWithPermit'
      | 'freeAssets'
      | 'increaseAllowance'
      | 'issuanceRate'
      | 'lastUpdated'
      | 'maxDeposit'
      | 'maxMint'
      | 'maxRedeem'
      | 'maxWithdraw'
      | 'mint'
      | 'mintWithPermit'
      | 'name'
      | 'nonces'
      | 'owner'
      | 'pendingOwner'
      | 'performMigration'
      | 'permit'
      | 'precision'
      | 'previewDeposit'
      | 'previewMint'
      | 'previewRedeem'
      | 'previewWithdraw'
      | 'redeem'
      | 'scheduleMigration'
      | 'scheduledMigrationTimestamp'
      | 'scheduledMigrator'
      | 'scheduledNewAsset'
      | 'setPendingOwner'
      | 'symbol'
      | 'totalAssets'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'updateVestingSchedule'
      | 'vestingPeriodFinish'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MINIMUM_MIGRATION_DELAY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PERMIT_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'asset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'balanceOfAssets', values: [string]): string;
  encodeFunctionData(functionFragment: 'cancelMigration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'convertToAssets', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'convertToShares', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish, string]): string;
  encodeFunctionData(
    functionFragment: 'depositWithPermit',
    values: [BigNumberish, string, BigNumberish, BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'freeAssets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'issuanceRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastUpdated', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxDeposit', values: [string]): string;
  encodeFunctionData(functionFragment: 'maxMint', values: [string]): string;
  encodeFunctionData(functionFragment: 'maxRedeem', values: [string]): string;
  encodeFunctionData(functionFragment: 'maxWithdraw', values: [string]): string;
  encodeFunctionData(functionFragment: 'mint', values: [BigNumberish, string]): string;
  encodeFunctionData(
    functionFragment: 'mintWithPermit',
    values: [BigNumberish, string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [string]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'performMigration', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'permit',
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'precision', values?: undefined): string;
  encodeFunctionData(functionFragment: 'previewDeposit', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'previewMint', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'previewRedeem', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'previewWithdraw', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'redeem', values: [BigNumberish, string, string]): string;
  encodeFunctionData(functionFragment: 'scheduleMigration', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'scheduledMigrationTimestamp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'scheduledMigrator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'scheduledNewAsset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setPendingOwner', values: [string]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalAssets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateVestingSchedule', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'vestingPeriodFinish', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish, string, string]): string;

  decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MINIMUM_MIGRATION_DELAY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PERMIT_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancelMigration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertToAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertToShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositWithPermit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'freeAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'issuanceRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastUpdated', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRedeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintWithPermit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'performMigration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'precision', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewRedeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'scheduleMigration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'scheduledMigrationTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'scheduledMigrator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'scheduledNewAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPendingOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateVestingSchedule', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vestingPeriodFinish', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Deposit(address,address,uint256,uint256)': EventFragment;
    'IssuanceParamsUpdated(uint256,uint256)': EventFragment;
    'MigrationCancelled()': EventFragment;
    'MigrationPerformed(address,address,uint256)': EventFragment;
    'MigrationScheduled(address,address,address,uint256)': EventFragment;
    'OwnershipAccepted(address,address)': EventFragment;
    'PendingOwnerSet(address,address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'VestingScheduleUpdated(address,uint256)': EventFragment;
    'Withdraw(address,address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'IssuanceParamsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MigrationCancelled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MigrationPerformed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MigrationScheduled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipAccepted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PendingOwnerSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VestingScheduleUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface ApprovalEventObject {
  owner_: string;
  spender_: string;
  amount_: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DepositEventObject {
  caller_: string;
  owner_: string;
  assets_: BigNumber;
  shares_: BigNumber;
}
export type DepositEvent = TypedEvent<[string, string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface IssuanceParamsUpdatedEventObject {
  freeAssets_: BigNumber;
  issuanceRate_: BigNumber;
}
export type IssuanceParamsUpdatedEvent = TypedEvent<[BigNumber, BigNumber], IssuanceParamsUpdatedEventObject>;

export type IssuanceParamsUpdatedEventFilter = TypedEventFilter<IssuanceParamsUpdatedEvent>;

export interface MigrationCancelledEventObject {}
export type MigrationCancelledEvent = TypedEvent<[], MigrationCancelledEventObject>;

export type MigrationCancelledEventFilter = TypedEventFilter<MigrationCancelledEvent>;

export interface MigrationPerformedEventObject {
  fromAsset_: string;
  toAsset_: string;
  amount_: BigNumber;
}
export type MigrationPerformedEvent = TypedEvent<[string, string, BigNumber], MigrationPerformedEventObject>;

export type MigrationPerformedEventFilter = TypedEventFilter<MigrationPerformedEvent>;

export interface MigrationScheduledEventObject {
  fromAsset_: string;
  toAsset_: string;
  migrator_: string;
  migrationTime_: BigNumber;
}
export type MigrationScheduledEvent = TypedEvent<[string, string, string, BigNumber], MigrationScheduledEventObject>;

export type MigrationScheduledEventFilter = TypedEventFilter<MigrationScheduledEvent>;

export interface OwnershipAcceptedEventObject {
  previousOwner_: string;
  newOwner_: string;
}
export type OwnershipAcceptedEvent = TypedEvent<[string, string], OwnershipAcceptedEventObject>;

export type OwnershipAcceptedEventFilter = TypedEventFilter<OwnershipAcceptedEvent>;

export interface PendingOwnerSetEventObject {
  owner_: string;
  pendingOwner_: string;
}
export type PendingOwnerSetEvent = TypedEvent<[string, string], PendingOwnerSetEventObject>;

export type PendingOwnerSetEventFilter = TypedEventFilter<PendingOwnerSetEvent>;

export interface TransferEventObject {
  owner_: string;
  recipient_: string;
  amount_: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface VestingScheduleUpdatedEventObject {
  owner_: string;
  vestingPeriodFinish_: BigNumber;
}
export type VestingScheduleUpdatedEvent = TypedEvent<[string, BigNumber], VestingScheduleUpdatedEventObject>;

export type VestingScheduleUpdatedEventFilter = TypedEventFilter<VestingScheduleUpdatedEvent>;

export interface WithdrawEventObject {
  caller_: string;
  receiver_: string;
  owner_: string;
  assets_: BigNumber;
  shares_: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface MapleXMpl extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MapleXMplInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string] & { domainSeparator_: string }>;

    MINIMUM_MIGRATION_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfAssets(
      account_: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { balanceOfAssets_: BigNumber }>;

    cancelMigration(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    convertToAssets(shares_: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { assets_: BigNumber }>;

    convertToShares(assets_: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { shares_: BigNumber }>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender_: string,
      subtractedAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deposit(
      assets_: BigNumberish,
      receiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositWithPermit(
      assets_: BigNumberish,
      receiver_: string,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    freeAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender_: string,
      addedAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    issuanceRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdated(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDeposit(receiver_: string, overrides?: CallOverrides): Promise<[BigNumber] & { maxAssets_: BigNumber }>;

    maxMint(receiver_: string, overrides?: CallOverrides): Promise<[BigNumber] & { maxShares_: BigNumber }>;

    maxRedeem(owner_: string, overrides?: CallOverrides): Promise<[BigNumber] & { maxShares_: BigNumber }>;

    maxWithdraw(owner_: string, overrides?: CallOverrides): Promise<[BigNumber] & { maxAssets_: BigNumber }>;

    mint(
      shares_: BigNumberish,
      receiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    mintWithPermit(
      shares_: BigNumberish,
      receiver_: string,
      maxAssets_: BigNumberish,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    performMigration(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    permit(
      owner_: string,
      spender_: string,
      amount_: BigNumberish,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    precision(overrides?: CallOverrides): Promise<[BigNumber]>;

    previewDeposit(assets_: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { shares_: BigNumber }>;

    previewMint(shares_: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { assets_: BigNumber }>;

    previewRedeem(shares_: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { assets_: BigNumber }>;

    previewWithdraw(assets_: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { shares_: BigNumber }>;

    redeem(
      shares_: BigNumberish,
      receiver_: string,
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    scheduleMigration(
      migrator_: string,
      newAsset_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    scheduledMigrationTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    scheduledMigrator(overrides?: CallOverrides): Promise<[string]>;

    scheduledNewAsset(overrides?: CallOverrides): Promise<[string]>;

    setPendingOwner(
      pendingOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber] & { totalManagedAssets_: BigNumber }>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      owner_: string,
      recipient_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateVestingSchedule(
      vestingPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    vestingPeriodFinish(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      assets_: BigNumberish,
      receiver_: string,
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  MINIMUM_MIGRATION_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender_: string,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfAssets(account_: string, overrides?: CallOverrides): Promise<BigNumber>;

  cancelMigration(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  convertToAssets(shares_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  convertToShares(assets_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender_: string,
    subtractedAmount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  deposit(
    assets_: BigNumberish,
    receiver_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositWithPermit(
    assets_: BigNumberish,
    receiver_: string,
    deadline_: BigNumberish,
    v_: BigNumberish,
    r_: BytesLike,
    s_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  freeAssets(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender_: string,
    addedAmount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  issuanceRate(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdated(overrides?: CallOverrides): Promise<BigNumber>;

  maxDeposit(receiver_: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxMint(receiver_: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxRedeem(owner_: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxWithdraw(owner_: string, overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    shares_: BigNumberish,
    receiver_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  mintWithPermit(
    shares_: BigNumberish,
    receiver_: string,
    maxAssets_: BigNumberish,
    deadline_: BigNumberish,
    v_: BigNumberish,
    r_: BytesLike,
    s_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  performMigration(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  permit(
    owner_: string,
    spender_: string,
    amount_: BigNumberish,
    deadline_: BigNumberish,
    v_: BigNumberish,
    r_: BytesLike,
    s_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  precision(overrides?: CallOverrides): Promise<BigNumber>;

  previewDeposit(assets_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  previewMint(shares_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  previewRedeem(shares_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  previewWithdraw(assets_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    shares_: BigNumberish,
    receiver_: string,
    owner_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  scheduleMigration(
    migrator_: string,
    newAsset_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  scheduledMigrationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  scheduledMigrator(overrides?: CallOverrides): Promise<string>;

  scheduledNewAsset(overrides?: CallOverrides): Promise<string>;

  setPendingOwner(
    pendingOwner_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient_: string,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    owner_: string,
    recipient_: string,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateVestingSchedule(
    vestingPeriod_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  vestingPeriodFinish(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    assets_: BigNumberish,
    receiver_: string,
    owner_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    MINIMUM_MIGRATION_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender_: string, amount_: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfAssets(account_: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelMigration(overrides?: CallOverrides): Promise<void>;

    convertToAssets(shares_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    convertToShares(assets_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(spender_: string, subtractedAmount_: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    deposit(assets_: BigNumberish, receiver_: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositWithPermit(
      assets_: BigNumberish,
      receiver_: string,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    freeAssets(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(spender_: string, addedAmount_: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    issuanceRate(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdated(overrides?: CallOverrides): Promise<BigNumber>;

    maxDeposit(receiver_: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(receiver_: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(owner_: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(owner_: string, overrides?: CallOverrides): Promise<BigNumber>;

    mint(shares_: BigNumberish, receiver_: string, overrides?: CallOverrides): Promise<BigNumber>;

    mintWithPermit(
      shares_: BigNumberish,
      receiver_: string,
      maxAssets_: BigNumberish,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    performMigration(overrides?: CallOverrides): Promise<void>;

    permit(
      owner_: string,
      spender_: string,
      amount_: BigNumberish,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    precision(overrides?: CallOverrides): Promise<BigNumber>;

    previewDeposit(assets_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    previewMint(shares_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    previewRedeem(shares_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    previewWithdraw(assets_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    redeem(shares_: BigNumberish, receiver_: string, owner_: string, overrides?: CallOverrides): Promise<BigNumber>;

    scheduleMigration(migrator_: string, newAsset_: string, overrides?: CallOverrides): Promise<void>;

    scheduledMigrationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    scheduledMigrator(overrides?: CallOverrides): Promise<string>;

    scheduledNewAsset(overrides?: CallOverrides): Promise<string>;

    setPendingOwner(pendingOwner_: string, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(recipient_: string, amount_: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(
      owner_: string,
      recipient_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    updateVestingSchedule(
      vestingPeriod_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        issuanceRate_: BigNumber;
        freeAssets_: BigNumber;
      }
    >;

    vestingPeriodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(assets_: BigNumberish, receiver_: string, owner_: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner_?: string | null,
      spender_?: string | null,
      amount_?: null,
    ): ApprovalEventFilter;
    Approval(owner_?: string | null, spender_?: string | null, amount_?: null): ApprovalEventFilter;

    'Deposit(address,address,uint256,uint256)'(
      caller_?: string | null,
      owner_?: string | null,
      assets_?: null,
      shares_?: null,
    ): DepositEventFilter;
    Deposit(caller_?: string | null, owner_?: string | null, assets_?: null, shares_?: null): DepositEventFilter;

    'IssuanceParamsUpdated(uint256,uint256)'(
      freeAssets_?: null,
      issuanceRate_?: null,
    ): IssuanceParamsUpdatedEventFilter;
    IssuanceParamsUpdated(freeAssets_?: null, issuanceRate_?: null): IssuanceParamsUpdatedEventFilter;

    'MigrationCancelled()'(): MigrationCancelledEventFilter;
    MigrationCancelled(): MigrationCancelledEventFilter;

    'MigrationPerformed(address,address,uint256)'(
      fromAsset_?: string | null,
      toAsset_?: string | null,
      amount_?: null,
    ): MigrationPerformedEventFilter;
    MigrationPerformed(
      fromAsset_?: string | null,
      toAsset_?: string | null,
      amount_?: null,
    ): MigrationPerformedEventFilter;

    'MigrationScheduled(address,address,address,uint256)'(
      fromAsset_?: string | null,
      toAsset_?: string | null,
      migrator_?: string | null,
      migrationTime_?: null,
    ): MigrationScheduledEventFilter;
    MigrationScheduled(
      fromAsset_?: string | null,
      toAsset_?: string | null,
      migrator_?: string | null,
      migrationTime_?: null,
    ): MigrationScheduledEventFilter;

    'OwnershipAccepted(address,address)'(
      previousOwner_?: string | null,
      newOwner_?: string | null,
    ): OwnershipAcceptedEventFilter;
    OwnershipAccepted(previousOwner_?: string | null, newOwner_?: string | null): OwnershipAcceptedEventFilter;

    'PendingOwnerSet(address,address)'(
      owner_?: string | null,
      pendingOwner_?: string | null,
    ): PendingOwnerSetEventFilter;
    PendingOwnerSet(owner_?: string | null, pendingOwner_?: string | null): PendingOwnerSetEventFilter;

    'Transfer(address,address,uint256)'(
      owner_?: string | null,
      recipient_?: string | null,
      amount_?: null,
    ): TransferEventFilter;
    Transfer(owner_?: string | null, recipient_?: string | null, amount_?: null): TransferEventFilter;

    'VestingScheduleUpdated(address,uint256)'(
      owner_?: string | null,
      vestingPeriodFinish_?: null,
    ): VestingScheduleUpdatedEventFilter;
    VestingScheduleUpdated(owner_?: string | null, vestingPeriodFinish_?: null): VestingScheduleUpdatedEventFilter;

    'Withdraw(address,address,address,uint256,uint256)'(
      caller_?: string | null,
      receiver_?: string | null,
      owner_?: string | null,
      assets_?: null,
      shares_?: null,
    ): WithdrawEventFilter;
    Withdraw(
      caller_?: string | null,
      receiver_?: string | null,
      owner_?: string | null,
      assets_?: null,
      shares_?: null,
    ): WithdrawEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_MIGRATION_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfAssets(account_: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelMigration(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    convertToAssets(shares_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    convertToShares(assets_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender_: string,
      subtractedAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    deposit(
      assets_: BigNumberish,
      receiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    depositWithPermit(
      assets_: BigNumberish,
      receiver_: string,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    freeAssets(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender_: string,
      addedAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    issuanceRate(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdated(overrides?: CallOverrides): Promise<BigNumber>;

    maxDeposit(receiver_: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(receiver_: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(owner_: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(owner_: string, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      shares_: BigNumberish,
      receiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    mintWithPermit(
      shares_: BigNumberish,
      receiver_: string,
      maxAssets_: BigNumberish,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    performMigration(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    permit(
      owner_: string,
      spender_: string,
      amount_: BigNumberish,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    precision(overrides?: CallOverrides): Promise<BigNumber>;

    previewDeposit(assets_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    previewMint(shares_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    previewRedeem(shares_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    previewWithdraw(assets_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      shares_: BigNumberish,
      receiver_: string,
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    scheduleMigration(
      migrator_: string,
      newAsset_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    scheduledMigrationTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    scheduledMigrator(overrides?: CallOverrides): Promise<BigNumber>;

    scheduledNewAsset(overrides?: CallOverrides): Promise<BigNumber>;

    setPendingOwner(
      pendingOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      owner_: string,
      recipient_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateVestingSchedule(
      vestingPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    vestingPeriodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      assets_: BigNumberish,
      receiver_: string,
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINIMUM_MIGRATION_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfAssets(account_: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelMigration(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    convertToAssets(shares_: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertToShares(assets_: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender_: string,
      subtractedAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      assets_: BigNumberish,
      receiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositWithPermit(
      assets_: BigNumberish,
      receiver_: string,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    freeAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender_: string,
      addedAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    issuanceRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDeposit(receiver_: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxMint(receiver_: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRedeem(owner_: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxWithdraw(owner_: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      shares_: BigNumberish,
      receiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    mintWithPermit(
      shares_: BigNumberish,
      receiver_: string,
      maxAssets_: BigNumberish,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performMigration(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    permit(
      owner_: string,
      spender_: string,
      amount_: BigNumberish,
      deadline_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    precision(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewDeposit(assets_: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewMint(shares_: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewRedeem(shares_: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewWithdraw(assets_: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      shares_: BigNumberish,
      receiver_: string,
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    scheduleMigration(
      migrator_: string,
      newAsset_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    scheduledMigrationTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scheduledMigrator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scheduledNewAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPendingOwner(
      pendingOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      owner_: string,
      recipient_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateVestingSchedule(
      vestingPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    vestingPeriodFinish(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      assets_: BigNumberish,
      receiver_: string,
      owner_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
