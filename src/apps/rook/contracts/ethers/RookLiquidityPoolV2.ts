/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface RookLiquidityPoolV2Interface extends utils.Interface {
  functions: {
    'ETHEREUM()': FunctionFragment;
    'FEE_BASE()': FunctionFragment;
    'VERSION()': FunctionFragment;
    'addOperator(address)': FunctionFragment;
    'addPauser(address)': FunctionFragment;
    'blacklistRecoverableToken(address)': FunctionFragment;
    'borrow(address,uint256,bytes)': FunctionFragment;
    'borrowableBalance(address)': FunctionFragment;
    'deposit(address,uint256)': FunctionFragment;
    'depositFeeInBips()': FunctionFragment;
    'initialize(string,address)': FunctionFragment;
    'initialize()': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'isOperator(address)': FunctionFragment;
    'isPauser(address)': FunctionFragment;
    'kToken(address)': FunctionFragment;
    'kTokens(address)': FunctionFragment;
    'migrate(address)': FunctionFragment;
    'operators(uint256)': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'poolFeeInBips()': FunctionFragment;
    'recoverTokens(address)': FunctionFragment;
    'register(address)': FunctionFragment;
    'registeredKTokens(address)': FunctionFragment;
    'registeredTokens(uint256)': FunctionFragment;
    'renounceOperator()': FunctionFragment;
    'renouncePauser()': FunctionFragment;
    'underlyingBalance(address,address)': FunctionFragment;
    'unpause()': FunctionFragment;
    'updateDepositFee(uint256)': FunctionFragment;
    'updateFeePool(address)': FunctionFragment;
    'updatePoolFee(uint256)': FunctionFragment;
    'withdraw(address,address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'ETHEREUM'
      | 'FEE_BASE'
      | 'VERSION'
      | 'addOperator'
      | 'addPauser'
      | 'blacklistRecoverableToken'
      | 'borrow'
      | 'borrowableBalance'
      | 'deposit'
      | 'depositFeeInBips'
      | 'initialize(string,address)'
      | 'initialize()'
      | 'initialize(address)'
      | 'isOperator'
      | 'isPauser'
      | 'kToken'
      | 'kTokens'
      | 'migrate'
      | 'operators'
      | 'pause'
      | 'paused'
      | 'poolFeeInBips'
      | 'recoverTokens'
      | 'register'
      | 'registeredKTokens'
      | 'registeredTokens'
      | 'renounceOperator'
      | 'renouncePauser'
      | 'underlyingBalance'
      | 'unpause'
      | 'updateDepositFee'
      | 'updateFeePool'
      | 'updatePoolFee'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'ETHEREUM', values?: undefined): string;
  encodeFunctionData(functionFragment: 'FEE_BASE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'VERSION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addOperator', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'addPauser', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'blacklistRecoverableToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'borrow',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'borrowableBalance', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'depositFeeInBips', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize(string,address)',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'initialize()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize(address)', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isOperator', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isPauser', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'kToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'kTokens', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'migrate', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'operators', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolFeeInBips', values?: undefined): string;
  encodeFunctionData(functionFragment: 'recoverTokens', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'register', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'registeredKTokens', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'registeredTokens', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'renounceOperator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renouncePauser', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'underlyingBalance',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateDepositFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateFeePool', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updatePoolFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'ETHEREUM', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'FEE_BASE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'VERSION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addPauser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'blacklistRecoverableToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowableBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositFeeInBips', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize(string,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize(address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isPauser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'kToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'kTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migrate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'operators', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolFeeInBips', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recoverTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'register', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registeredKTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registeredTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renouncePauser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'underlyingBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateDepositFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateFeePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePoolFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Borrowed(address,address,uint256,uint256)': EventFragment;
    'Deposited(address,address,uint256,uint256)': EventFragment;
    'EtherReceived(address,uint256)': EventFragment;
    'OperatorAdded(address)': EventFragment;
    'OperatorRemoved(address)': EventFragment;
    'Paused(address)': EventFragment;
    'PauserAdded(address)': EventFragment;
    'PauserRemoved(address)': EventFragment;
    'Unpaused(address)': EventFragment;
    'Withdrew(address,address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Borrowed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EtherReceived'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OperatorAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OperatorRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PauserAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PauserRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdrew'): EventFragment;
}

export interface BorrowedEventObject {
  _borrower: string;
  _token: string;
  _amount: BigNumber;
  _fee: BigNumber;
}
export type BorrowedEvent = TypedEvent<[string, string, BigNumber, BigNumber], BorrowedEventObject>;

export type BorrowedEventFilter = TypedEventFilter<BorrowedEvent>;

export interface DepositedEventObject {
  _depositor: string;
  _token: string;
  _amount: BigNumber;
  _mintAmount: BigNumber;
}
export type DepositedEvent = TypedEvent<[string, string, BigNumber, BigNumber], DepositedEventObject>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface EtherReceivedEventObject {
  _from: string;
  _amount: BigNumber;
}
export type EtherReceivedEvent = TypedEvent<[string, BigNumber], EtherReceivedEventObject>;

export type EtherReceivedEventFilter = TypedEventFilter<EtherReceivedEvent>;

export interface OperatorAddedEventObject {
  account: string;
}
export type OperatorAddedEvent = TypedEvent<[string], OperatorAddedEventObject>;

export type OperatorAddedEventFilter = TypedEventFilter<OperatorAddedEvent>;

export interface OperatorRemovedEventObject {
  account: string;
}
export type OperatorRemovedEvent = TypedEvent<[string], OperatorRemovedEventObject>;

export type OperatorRemovedEventFilter = TypedEventFilter<OperatorRemovedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PauserAddedEventObject {
  account: string;
}
export type PauserAddedEvent = TypedEvent<[string], PauserAddedEventObject>;

export type PauserAddedEventFilter = TypedEventFilter<PauserAddedEvent>;

export interface PauserRemovedEventObject {
  account: string;
}
export type PauserRemovedEvent = TypedEvent<[string], PauserRemovedEventObject>;

export type PauserRemovedEventFilter = TypedEventFilter<PauserRemovedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrewEventObject {
  _reciever: string;
  _withdrawer: string;
  _token: string;
  _amount: BigNumber;
  _burnAmount: BigNumber;
}
export type WithdrewEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], WithdrewEventObject>;

export type WithdrewEventFilter = TypedEventFilter<WithdrewEvent>;

export interface RookLiquidityPoolV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RookLiquidityPoolV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ETHEREUM(overrides?: CallOverrides): Promise<[string]>;

    FEE_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    addOperator(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addPauser(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    blacklistRecoverableToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    borrow(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    borrowableBalance(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositFeeInBips(overrides?: CallOverrides): Promise<[BigNumber]>;

    'initialize(string,address)'(
      _VERSION: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'initialize()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    'initialize(address)'(
      sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isOperator(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isPauser(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    kToken(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    kTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    migrate(
      _newLP: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    operators(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    poolFeeInBips(overrides?: CallOverrides): Promise<[BigNumber]>;

    recoverTokens(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    register(
      _kToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    registeredKTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    registeredTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    renounceOperator(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    renouncePauser(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    underlyingBalance(
      _token: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    updateDepositFee(
      _depositFeeInBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateFeePool(
      _newFeePool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updatePoolFee(
      _poolFeeInBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      _to: PromiseOrValue<string>,
      _kToken: PromiseOrValue<string>,
      _kTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  ETHEREUM(overrides?: CallOverrides): Promise<string>;

  FEE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  addOperator(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addPauser(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  blacklistRecoverableToken(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  borrow(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  borrowableBalance(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositFeeInBips(overrides?: CallOverrides): Promise<BigNumber>;

  'initialize(string,address)'(
    _VERSION: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'initialize()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  'initialize(address)'(
    sender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isOperator(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isPauser(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  kToken(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  kTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  migrate(
    _newLP: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  operators(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  poolFeeInBips(overrides?: CallOverrides): Promise<BigNumber>;

  recoverTokens(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  register(
    _kToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  registeredKTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  registeredTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  renounceOperator(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  renouncePauser(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  underlyingBalance(
    _token: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  updateDepositFee(
    _depositFeeInBips: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateFeePool(
    _newFeePool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updatePoolFee(
    _poolFeeInBips: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    _to: PromiseOrValue<string>,
    _kToken: PromiseOrValue<string>,
    _kTokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    ETHEREUM(overrides?: CallOverrides): Promise<string>;

    FEE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    addOperator(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    addPauser(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    blacklistRecoverableToken(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    borrow(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    borrowableBalance(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    depositFeeInBips(overrides?: CallOverrides): Promise<BigNumber>;

    'initialize(string,address)'(
      _VERSION: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    'initialize()'(overrides?: CallOverrides): Promise<void>;

    'initialize(address)'(sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    isOperator(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isPauser(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    kToken(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    kTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    migrate(_newLP: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    operators(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    poolFeeInBips(overrides?: CallOverrides): Promise<BigNumber>;

    recoverTokens(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    register(_kToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    registeredKTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    registeredTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    renounceOperator(overrides?: CallOverrides): Promise<void>;

    renouncePauser(overrides?: CallOverrides): Promise<void>;

    underlyingBalance(
      _token: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateDepositFee(_depositFeeInBips: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateFeePool(_newFeePool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updatePoolFee(_poolFeeInBips: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    withdraw(
      _to: PromiseOrValue<string>,
      _kToken: PromiseOrValue<string>,
      _kTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'Borrowed(address,address,uint256,uint256)'(
      _borrower?: PromiseOrValue<string> | null,
      _token?: PromiseOrValue<string> | null,
      _amount?: null,
      _fee?: null,
    ): BorrowedEventFilter;
    Borrowed(
      _borrower?: PromiseOrValue<string> | null,
      _token?: PromiseOrValue<string> | null,
      _amount?: null,
      _fee?: null,
    ): BorrowedEventFilter;

    'Deposited(address,address,uint256,uint256)'(
      _depositor?: PromiseOrValue<string> | null,
      _token?: PromiseOrValue<string> | null,
      _amount?: null,
      _mintAmount?: null,
    ): DepositedEventFilter;
    Deposited(
      _depositor?: PromiseOrValue<string> | null,
      _token?: PromiseOrValue<string> | null,
      _amount?: null,
      _mintAmount?: null,
    ): DepositedEventFilter;

    'EtherReceived(address,uint256)'(_from?: PromiseOrValue<string> | null, _amount?: null): EtherReceivedEventFilter;
    EtherReceived(_from?: PromiseOrValue<string> | null, _amount?: null): EtherReceivedEventFilter;

    'OperatorAdded(address)'(account?: PromiseOrValue<string> | null): OperatorAddedEventFilter;
    OperatorAdded(account?: PromiseOrValue<string> | null): OperatorAddedEventFilter;

    'OperatorRemoved(address)'(account?: PromiseOrValue<string> | null): OperatorRemovedEventFilter;
    OperatorRemoved(account?: PromiseOrValue<string> | null): OperatorRemovedEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'PauserAdded(address)'(account?: PromiseOrValue<string> | null): PauserAddedEventFilter;
    PauserAdded(account?: PromiseOrValue<string> | null): PauserAddedEventFilter;

    'PauserRemoved(address)'(account?: PromiseOrValue<string> | null): PauserRemovedEventFilter;
    PauserRemoved(account?: PromiseOrValue<string> | null): PauserRemovedEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'Withdrew(address,address,address,uint256,uint256)'(
      _reciever?: PromiseOrValue<string> | null,
      _withdrawer?: PromiseOrValue<string> | null,
      _token?: PromiseOrValue<string> | null,
      _amount?: null,
      _burnAmount?: null,
    ): WithdrewEventFilter;
    Withdrew(
      _reciever?: PromiseOrValue<string> | null,
      _withdrawer?: PromiseOrValue<string> | null,
      _token?: PromiseOrValue<string> | null,
      _amount?: null,
      _burnAmount?: null,
    ): WithdrewEventFilter;
  };

  estimateGas: {
    ETHEREUM(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    addOperator(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addPauser(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    blacklistRecoverableToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    borrow(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    borrowableBalance(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositFeeInBips(overrides?: CallOverrides): Promise<BigNumber>;

    'initialize(string,address)'(
      _VERSION: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'initialize()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    'initialize(address)'(
      sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isOperator(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isPauser(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    kToken(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    kTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      _newLP: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    operators(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    poolFeeInBips(overrides?: CallOverrides): Promise<BigNumber>;

    recoverTokens(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    register(
      _kToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    registeredKTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    registeredTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOperator(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    renouncePauser(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    underlyingBalance(
      _token: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    updateDepositFee(
      _depositFeeInBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateFeePool(
      _newFeePool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updatePoolFee(
      _poolFeeInBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdraw(
      _to: PromiseOrValue<string>,
      _kToken: PromiseOrValue<string>,
      _kTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETHEREUM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEE_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addOperator(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addPauser(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    blacklistRecoverableToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    borrow(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    borrowableBalance(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositFeeInBips(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'initialize(string,address)'(
      _VERSION: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'initialize()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    'initialize(address)'(
      sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isOperator(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPauser(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kToken(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrate(
      _newLP: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    operators(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolFeeInBips(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverTokens(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    register(
      _kToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    registeredKTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registeredTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOperator(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    renouncePauser(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    underlyingBalance(
      _token: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    updateDepositFee(
      _depositFeeInBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateFeePool(
      _newFeePool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updatePoolFee(
      _poolFeeInBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      _to: PromiseOrValue<string>,
      _kToken: PromiseOrValue<string>,
      _kTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
