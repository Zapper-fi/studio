/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface HiddenHandHarvesterInterface extends utils.Interface {
  functions: {
    'FEE_BASIS()': FunctionFragment;
    'MAX_FEE()': FunctionFragment;
    'MINIMUM_ACTIVE_TIMER()': FunctionFragment;
    'acceptOwnership()': FunctionFragment;
    'activeTimerDuration()': FunctionFragment;
    'changeActiveTimerDuration(uint256)': FunctionFragment;
    'changeClaimer(address)': FunctionFragment;
    'changeDefaultToken(address)': FunctionFragment;
    'changeOperator(address)': FunctionFragment;
    'changeRewardSwapper(address)': FunctionFragment;
    'claim(address,address,uint256,bytes32[],uint256,address)': FunctionFragment;
    'claimed(address,address)': FunctionFragment;
    'claimer()': FunctionFragment;
    'collectFees(address)': FunctionFragment;
    'defaultToken()': FunctionFragment;
    'depositReward(uint256)': FunctionFragment;
    'feesCollected(address)': FunctionFragment;
    'isMember(address)': FunctionFragment;
    'join()': FunctionFragment;
    'leave()': FunctionFragment;
    'operator()': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingOwner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardSwapper()': FunctionFragment;
    'rewards(address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateRewardsMetadata(address,bytes32,bytes32)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'FEE_BASIS'
      | 'MAX_FEE'
      | 'MINIMUM_ACTIVE_TIMER'
      | 'acceptOwnership'
      | 'activeTimerDuration'
      | 'changeActiveTimerDuration'
      | 'changeClaimer'
      | 'changeDefaultToken'
      | 'changeOperator'
      | 'changeRewardSwapper'
      | 'claim'
      | 'claimed'
      | 'claimer'
      | 'collectFees'
      | 'defaultToken'
      | 'depositReward'
      | 'feesCollected'
      | 'isMember'
      | 'join'
      | 'leave'
      | 'operator'
      | 'owner'
      | 'pendingOwner'
      | 'renounceOwnership'
      | 'rewardSwapper'
      | 'rewards'
      | 'transferOwnership'
      | 'updateRewardsMetadata',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'FEE_BASIS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MINIMUM_ACTIVE_TIMER', values?: undefined): string;
  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'activeTimerDuration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'changeActiveTimerDuration', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'changeClaimer', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'changeDefaultToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'changeOperator', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'changeRewardSwapper', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'claim',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'claimed', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'claimer', values?: undefined): string;
  encodeFunctionData(functionFragment: 'collectFees', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'defaultToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'depositReward', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'feesCollected', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isMember', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'join', values?: undefined): string;
  encodeFunctionData(functionFragment: 'leave', values?: undefined): string;
  encodeFunctionData(functionFragment: 'operator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardSwapper', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewards', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'updateRewardsMetadata',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>],
  ): string;

  decodeFunctionResult(functionFragment: 'FEE_BASIS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MINIMUM_ACTIVE_TIMER', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activeTimerDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeActiveTimerDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeClaimer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeDefaultToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeRewardSwapper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collectFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'defaultToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feesCollected', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isMember', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'join', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'leave', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'operator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardSwapper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateRewardsMetadata', data: BytesLike): Result;

  events: {
    'BribeTransferred(address,uint256)': EventFragment;
    'DefaultTokenUpdated(address)': EventFragment;
    'FeesCollected(address,uint256)': EventFragment;
    'MemberJoined(address)': EventFragment;
    'MemberLeft(address)': EventFragment;
    'OwnershipTransferStarted(address,address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'RewardClaimed(address,address,uint256,uint256,address)': EventFragment;
    'RewardMetadataUpdated(address,bytes32,bytes32,uint256)': EventFragment;
    'SetActiveTimerDuration(uint256)': EventFragment;
    'SetClaimer(address)': EventFragment;
    'SetOperator(address)': EventFragment;
    'SetRewardSwapper(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'BribeTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DefaultTokenUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeesCollected'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MemberJoined'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MemberLeft'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferStarted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardClaimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardMetadataUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetActiveTimerDuration'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetClaimer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetOperator'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetRewardSwapper'): EventFragment;
}

export interface BribeTransferredEventObject {
  token: string;
  totalAmount: BigNumber;
}
export type BribeTransferredEvent = TypedEvent<[string, BigNumber], BribeTransferredEventObject>;

export type BribeTransferredEventFilter = TypedEventFilter<BribeTransferredEvent>;

export interface DefaultTokenUpdatedEventObject {
  token: string;
}
export type DefaultTokenUpdatedEvent = TypedEvent<[string], DefaultTokenUpdatedEventObject>;

export type DefaultTokenUpdatedEventFilter = TypedEventFilter<DefaultTokenUpdatedEvent>;

export interface FeesCollectedEventObject {
  token: string;
  amount: BigNumber;
}
export type FeesCollectedEvent = TypedEvent<[string, BigNumber], FeesCollectedEventObject>;

export type FeesCollectedEventFilter = TypedEventFilter<FeesCollectedEvent>;

export interface MemberJoinedEventObject {
  member: string;
}
export type MemberJoinedEvent = TypedEvent<[string], MemberJoinedEventObject>;

export type MemberJoinedEventFilter = TypedEventFilter<MemberJoinedEvent>;

export interface MemberLeftEventObject {
  member: string;
}
export type MemberLeftEvent = TypedEvent<[string], MemberLeftEventObject>;

export type MemberLeftEventFilter = TypedEventFilter<MemberLeftEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<[string, string], OwnershipTransferStartedEventObject>;

export type OwnershipTransferStartedEventFilter = TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RewardClaimedEventObject {
  token: string;
  account: string;
  amount: BigNumber;
  postFeeAmount: BigNumber;
  receiver: string;
}
export type RewardClaimedEvent = TypedEvent<[string, string, BigNumber, BigNumber, string], RewardClaimedEventObject>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export interface RewardMetadataUpdatedEventObject {
  token: string;
  merkleRoot: string;
  proof: string;
  activeAt: BigNumber;
}
export type RewardMetadataUpdatedEvent = TypedEvent<
  [string, string, string, BigNumber],
  RewardMetadataUpdatedEventObject
>;

export type RewardMetadataUpdatedEventFilter = TypedEventFilter<RewardMetadataUpdatedEvent>;

export interface SetActiveTimerDurationEventObject {
  duration: BigNumber;
}
export type SetActiveTimerDurationEvent = TypedEvent<[BigNumber], SetActiveTimerDurationEventObject>;

export type SetActiveTimerDurationEventFilter = TypedEventFilter<SetActiveTimerDurationEvent>;

export interface SetClaimerEventObject {
  claimer: string;
}
export type SetClaimerEvent = TypedEvent<[string], SetClaimerEventObject>;

export type SetClaimerEventFilter = TypedEventFilter<SetClaimerEvent>;

export interface SetOperatorEventObject {
  operator: string;
}
export type SetOperatorEvent = TypedEvent<[string], SetOperatorEventObject>;

export type SetOperatorEventFilter = TypedEventFilter<SetOperatorEvent>;

export interface SetRewardSwapperEventObject {
  rewardSwapper: string;
}
export type SetRewardSwapperEvent = TypedEvent<[string], SetRewardSwapperEventObject>;

export type SetRewardSwapperEventFilter = TypedEventFilter<SetRewardSwapperEvent>;

export interface HiddenHandHarvester extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HiddenHandHarvesterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE_BASIS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINIMUM_ACTIVE_TIMER(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    activeTimerDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeActiveTimerDuration(
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeClaimer(
      _claimer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeDefaultToken(
      _newToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeRewardSwapper(
      _newSwapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claim(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      _fee: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    claimer(overrides?: CallOverrides): Promise<[string]>;

    collectFees(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    defaultToken(overrides?: CallOverrides): Promise<[string]>;

    depositReward(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    feesCollected(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    isMember(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    join(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    leave(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    rewardSwapper(overrides?: CallOverrides): Promise<[string]>;

    rewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber] & {
        merkleRoot: string;
        hashedData: string;
        activeAt: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateRewardsMetadata(
      _token: PromiseOrValue<string>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      _hashedData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  FEE_BASIS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MINIMUM_ACTIVE_TIMER(overrides?: CallOverrides): Promise<BigNumber>;

  acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  activeTimerDuration(overrides?: CallOverrides): Promise<BigNumber>;

  changeActiveTimerDuration(
    _duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeClaimer(
    _claimer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeDefaultToken(
    _newToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeOperator(
    _operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeRewardSwapper(
    _newSwapper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claim(
    _token: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _merkleProof: PromiseOrValue<BytesLike>[],
    _fee: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimed(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  claimer(overrides?: CallOverrides): Promise<string>;

  collectFees(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  defaultToken(overrides?: CallOverrides): Promise<string>;

  depositReward(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  feesCollected(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  isMember(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  join(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  leave(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  operator(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  rewardSwapper(overrides?: CallOverrides): Promise<string>;

  rewards(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, BigNumber] & {
      merkleRoot: string;
      hashedData: string;
      activeAt: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateRewardsMetadata(
    _token: PromiseOrValue<string>,
    _merkleRoot: PromiseOrValue<BytesLike>,
    _hashedData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    FEE_BASIS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_ACTIVE_TIMER(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    activeTimerDuration(overrides?: CallOverrides): Promise<BigNumber>;

    changeActiveTimerDuration(_duration: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    changeClaimer(_claimer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    changeDefaultToken(_newToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    changeOperator(_operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    changeRewardSwapper(_newSwapper: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    claim(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      _fee: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    claimed(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    claimer(overrides?: CallOverrides): Promise<string>;

    collectFees(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    defaultToken(overrides?: CallOverrides): Promise<string>;

    depositReward(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    feesCollected(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isMember(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    join(overrides?: CallOverrides): Promise<void>;

    leave(overrides?: CallOverrides): Promise<void>;

    operator(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardSwapper(overrides?: CallOverrides): Promise<string>;

    rewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber] & {
        merkleRoot: string;
        hashedData: string;
        activeAt: BigNumber;
      }
    >;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateRewardsMetadata(
      _token: PromiseOrValue<string>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      _hashedData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'BribeTransferred(address,uint256)'(
      token?: PromiseOrValue<string> | null,
      totalAmount?: null,
    ): BribeTransferredEventFilter;
    BribeTransferred(token?: PromiseOrValue<string> | null, totalAmount?: null): BribeTransferredEventFilter;

    'DefaultTokenUpdated(address)'(token?: PromiseOrValue<string> | null): DefaultTokenUpdatedEventFilter;
    DefaultTokenUpdated(token?: PromiseOrValue<string> | null): DefaultTokenUpdatedEventFilter;

    'FeesCollected(address,uint256)'(token?: PromiseOrValue<string> | null, amount?: null): FeesCollectedEventFilter;
    FeesCollected(token?: PromiseOrValue<string> | null, amount?: null): FeesCollectedEventFilter;

    'MemberJoined(address)'(member?: null): MemberJoinedEventFilter;
    MemberJoined(member?: null): MemberJoinedEventFilter;

    'MemberLeft(address)'(member?: null): MemberLeftEventFilter;
    MemberLeft(member?: null): MemberLeftEventFilter;

    'OwnershipTransferStarted(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferStartedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'RewardClaimed(address,address,uint256,uint256,address)'(
      token?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      amount?: null,
      postFeeAmount?: null,
      receiver?: null,
    ): RewardClaimedEventFilter;
    RewardClaimed(
      token?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      amount?: null,
      postFeeAmount?: null,
      receiver?: null,
    ): RewardClaimedEventFilter;

    'RewardMetadataUpdated(address,bytes32,bytes32,uint256)'(
      token?: PromiseOrValue<string> | null,
      merkleRoot?: null,
      proof?: null,
      activeAt?: null,
    ): RewardMetadataUpdatedEventFilter;
    RewardMetadataUpdated(
      token?: PromiseOrValue<string> | null,
      merkleRoot?: null,
      proof?: null,
      activeAt?: null,
    ): RewardMetadataUpdatedEventFilter;

    'SetActiveTimerDuration(uint256)'(duration?: null): SetActiveTimerDurationEventFilter;
    SetActiveTimerDuration(duration?: null): SetActiveTimerDurationEventFilter;

    'SetClaimer(address)'(claimer?: PromiseOrValue<string> | null): SetClaimerEventFilter;
    SetClaimer(claimer?: PromiseOrValue<string> | null): SetClaimerEventFilter;

    'SetOperator(address)'(operator?: PromiseOrValue<string> | null): SetOperatorEventFilter;
    SetOperator(operator?: PromiseOrValue<string> | null): SetOperatorEventFilter;

    'SetRewardSwapper(address)'(rewardSwapper?: PromiseOrValue<string> | null): SetRewardSwapperEventFilter;
    SetRewardSwapper(rewardSwapper?: PromiseOrValue<string> | null): SetRewardSwapperEventFilter;
  };

  estimateGas: {
    FEE_BASIS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_ACTIVE_TIMER(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    activeTimerDuration(overrides?: CallOverrides): Promise<BigNumber>;

    changeActiveTimerDuration(
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeClaimer(
      _claimer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeDefaultToken(
      _newToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeRewardSwapper(
      _newSwapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claim(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      _fee: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimed(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    claimer(overrides?: CallOverrides): Promise<BigNumber>;

    collectFees(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    defaultToken(overrides?: CallOverrides): Promise<BigNumber>;

    depositReward(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    feesCollected(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isMember(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    join(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    leave(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    rewardSwapper(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateRewardsMetadata(
      _token: PromiseOrValue<string>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      _hashedData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_BASIS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINIMUM_ACTIVE_TIMER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    activeTimerDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeActiveTimerDuration(
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeClaimer(
      _claimer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeDefaultToken(
      _newToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeRewardSwapper(
      _newSwapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claim(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      _fee: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimed(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    claimer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectFees(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    defaultToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositReward(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    feesCollected(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMember(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    join(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    leave(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    rewardSwapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewards(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateRewardsMetadata(
      _token: PromiseOrValue<string>,
      _merkleRoot: PromiseOrValue<BytesLike>,
      _hashedData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
