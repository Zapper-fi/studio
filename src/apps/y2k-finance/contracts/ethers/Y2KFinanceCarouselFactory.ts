/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace VaultFactoryV2 {
  export type MarketConfigurationCalldataStruct = {
    token: PromiseOrValue<string>;
    strike: PromiseOrValue<BigNumberish>;
    oracle: PromiseOrValue<string>;
    underlyingAsset: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    tokenURI: PromiseOrValue<string>;
    controller: PromiseOrValue<string>;
  };

  export type MarketConfigurationCalldataStructOutput = [string, BigNumber, string, string, string, string, string] & {
    token: string;
    strike: BigNumber;
    oracle: string;
    underlyingAsset: string;
    name: string;
    tokenURI: string;
    controller: string;
  };
}

export interface Y2KFinanceCarouselFactoryInterface extends utils.Interface {
  functions: {
    'WETH()': FunctionFragment;
    'changeController(uint256,address)': FunctionFragment;
    'changeOracle(uint256,address)': FunctionFragment;
    'controllers(address)': FunctionFragment;
    'createEpoch(uint256,uint40,uint40,uint16)': FunctionFragment;
    'createNewMarket((address,uint256,address,address,string,string,address))': FunctionFragment;
    'epochFee(uint256)': FunctionFragment;
    'getEpochFee(uint256)': FunctionFragment;
    'getEpochId(uint256,uint40,uint40)': FunctionFragment;
    'getEpochsByMarketId(uint256)': FunctionFragment;
    'getMarketId(address,uint256,address)': FunctionFragment;
    'getMarketInfo(uint256)': FunctionFragment;
    'getVaults(uint256)': FunctionFragment;
    'marketIdInfo(uint256)': FunctionFragment;
    'marketIdToEpochs(uint256,uint256)': FunctionFragment;
    'marketIdToVaults(uint256,uint256)': FunctionFragment;
    'marketToOracle(uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setTreasury(address)': FunctionFragment;
    'timelocker()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'treasury()': FunctionFragment;
    'whitelistAddressOnMarket(uint256,address)': FunctionFragment;
    'whitelistController(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'WETH'
      | 'changeController'
      | 'changeOracle'
      | 'controllers'
      | 'createEpoch'
      | 'createNewMarket'
      | 'epochFee'
      | 'getEpochFee'
      | 'getEpochId'
      | 'getEpochsByMarketId'
      | 'getMarketId'
      | 'getMarketInfo'
      | 'getVaults'
      | 'marketIdInfo'
      | 'marketIdToEpochs'
      | 'marketIdToVaults'
      | 'marketToOracle'
      | 'owner'
      | 'renounceOwnership'
      | 'setTreasury'
      | 'timelocker'
      | 'transferOwnership'
      | 'treasury'
      | 'whitelistAddressOnMarket'
      | 'whitelistController',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'WETH', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'changeController',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'changeOracle',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'controllers', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'createEpoch',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'createNewMarket',
    values: [VaultFactoryV2.MarketConfigurationCalldataStruct],
  ): string;
  encodeFunctionData(functionFragment: 'epochFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getEpochFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getEpochId',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getEpochsByMarketId', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getMarketId',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getMarketInfo', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getVaults', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'marketIdInfo', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'marketIdToEpochs',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'marketIdToVaults',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'marketToOracle', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setTreasury', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'timelocker', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'treasury', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'whitelistAddressOnMarket',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'whitelistController', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'WETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'controllers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createNewMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'epochFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEpochFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEpochId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEpochsByMarketId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMarketId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMarketInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVaults', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketIdInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketIdToEpochs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketIdToVaults', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketToOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTreasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timelocker', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistAddressOnMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistController', data: BytesLike): Result;

  events: {
    'AddressWhitelisted(address,uint256)': EventFragment;
    'ControllerChanged(uint256,address,address,address)': EventFragment;
    'ControllerWhitelisted(address)': EventFragment;
    'EpochCreated(uint256,uint256,uint40,uint40,address,address,address,uint256,uint16)': EventFragment;
    'MarketCreated(uint256,address,address,address,address,string,uint256,address)': EventFragment;
    'OracleChanged(uint256,address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'TreasurySet(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddressWhitelisted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ControllerChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ControllerWhitelisted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EpochCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OracleChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TreasurySet'): EventFragment;
}

export interface AddressWhitelistedEventObject {
  _wAddress: string;
  _marketId: BigNumber;
}
export type AddressWhitelistedEvent = TypedEvent<[string, BigNumber], AddressWhitelistedEventObject>;

export type AddressWhitelistedEventFilter = TypedEventFilter<AddressWhitelistedEvent>;

export interface ControllerChangedEventObject {
  marketId: BigNumber;
  controller: string;
  premium: string;
  collateral: string;
}
export type ControllerChangedEvent = TypedEvent<[BigNumber, string, string, string], ControllerChangedEventObject>;

export type ControllerChangedEventFilter = TypedEventFilter<ControllerChangedEvent>;

export interface ControllerWhitelistedEventObject {
  _controller: string;
}
export type ControllerWhitelistedEvent = TypedEvent<[string], ControllerWhitelistedEventObject>;

export type ControllerWhitelistedEventFilter = TypedEventFilter<ControllerWhitelistedEvent>;

export interface EpochCreatedEventObject {
  epochId: BigNumber;
  marketId: BigNumber;
  startEpoch: number;
  endEpoch: number;
  premium: string;
  collateral: string;
  token: string;
  strike: BigNumber;
  withdrawalFee: number;
}
export type EpochCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, number, number, string, string, string, BigNumber, number],
  EpochCreatedEventObject
>;

export type EpochCreatedEventFilter = TypedEventFilter<EpochCreatedEvent>;

export interface MarketCreatedEventObject {
  marketId: BigNumber;
  premium: string;
  collateral: string;
  underlyingAsset: string;
  token: string;
  name: string;
  strike: BigNumber;
  controller: string;
}
export type MarketCreatedEvent = TypedEvent<
  [BigNumber, string, string, string, string, string, BigNumber, string],
  MarketCreatedEventObject
>;

export type MarketCreatedEventFilter = TypedEventFilter<MarketCreatedEvent>;

export interface OracleChangedEventObject {
  _marketId: BigNumber;
  _oracle: string;
}
export type OracleChangedEvent = TypedEvent<[BigNumber, string], OracleChangedEventObject>;

export type OracleChangedEventFilter = TypedEventFilter<OracleChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface TreasurySetEventObject {
  _treasury: string;
}
export type TreasurySetEvent = TypedEvent<[string], TreasurySetEventObject>;

export type TreasurySetEventFilter = TypedEventFilter<TreasurySetEvent>;

export interface Y2KFinanceCarouselFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Y2KFinanceCarouselFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>;

    changeController(
      _marketId: PromiseOrValue<BigNumberish>,
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeOracle(
      _marketId: PromiseOrValue<BigNumberish>,
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    controllers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    createEpoch(
      _marketId: PromiseOrValue<BigNumberish>,
      _epochBegin: PromiseOrValue<BigNumberish>,
      _epochEnd: PromiseOrValue<BigNumberish>,
      _withdrawalFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createNewMarket(
      _marketCalldata: VaultFactoryV2.MarketConfigurationCalldataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    epochFee(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number]>;

    getEpochFee(epochId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number] & { fee: number }>;

    getEpochId(
      marketId: PromiseOrValue<BigNumberish>,
      epochBegin: PromiseOrValue<BigNumberish>,
      epochEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { epochId: BigNumber }>;

    getEpochsByMarketId(marketId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getMarketId(
      _token: PromiseOrValue<string>,
      _strikePrice: PromiseOrValue<BigNumberish>,
      _underlying: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { marketId: BigNumber }>;

    getMarketInfo(
      _marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, string] & {
        token: string;
        strike: BigNumber;
        underlyingAsset: string;
      }
    >;

    getVaults(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[[string, string]] & { vaults: [string, string] }>;

    marketIdInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, string] & {
        token: string;
        strike: BigNumber;
        underlyingAsset: string;
      }
    >;

    marketIdToEpochs(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    marketIdToVaults(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    marketToOracle(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    timelocker(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    whitelistAddressOnMarket(
      _marketId: PromiseOrValue<BigNumberish>,
      _wAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    whitelistController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  changeController(
    _marketId: PromiseOrValue<BigNumberish>,
    _controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeOracle(
    _marketId: PromiseOrValue<BigNumberish>,
    _oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  controllers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  createEpoch(
    _marketId: PromiseOrValue<BigNumberish>,
    _epochBegin: PromiseOrValue<BigNumberish>,
    _epochEnd: PromiseOrValue<BigNumberish>,
    _withdrawalFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createNewMarket(
    _marketCalldata: VaultFactoryV2.MarketConfigurationCalldataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  epochFee(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;

  getEpochFee(epochId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;

  getEpochId(
    marketId: PromiseOrValue<BigNumberish>,
    epochBegin: PromiseOrValue<BigNumberish>,
    epochEnd: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getEpochsByMarketId(marketId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber[]>;

  getMarketId(
    _token: PromiseOrValue<string>,
    _strikePrice: PromiseOrValue<BigNumberish>,
    _underlying: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getMarketInfo(
    _marketId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, string] & {
      token: string;
      strike: BigNumber;
      underlyingAsset: string;
    }
  >;

  getVaults(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, string]>;

  marketIdInfo(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, string] & {
      token: string;
      strike: BigNumber;
      underlyingAsset: string;
    }
  >;

  marketIdToEpochs(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  marketIdToVaults(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  marketToOracle(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setTreasury(
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  timelocker(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  whitelistAddressOnMarket(
    _marketId: PromiseOrValue<BigNumberish>,
    _wAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  whitelistController(
    _controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    changeController(
      _marketId: PromiseOrValue<BigNumberish>,
      _controller: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    changeOracle(
      _marketId: PromiseOrValue<BigNumberish>,
      _oracle: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    controllers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    createEpoch(
      _marketId: PromiseOrValue<BigNumberish>,
      _epochBegin: PromiseOrValue<BigNumberish>,
      _epochEnd: PromiseOrValue<BigNumberish>,
      _withdrawalFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, [string, string]] & {
        epochId: BigNumber;
        vaults: [string, string];
      }
    >;

    createNewMarket(
      _marketCalldata: VaultFactoryV2.MarketConfigurationCalldataStruct,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber] & {
        premium: string;
        collateral: string;
        marketId: BigNumber;
      }
    >;

    epochFee(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;

    getEpochFee(epochId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;

    getEpochId(
      marketId: PromiseOrValue<BigNumberish>,
      epochBegin: PromiseOrValue<BigNumberish>,
      epochEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getEpochsByMarketId(marketId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber[]>;

    getMarketId(
      _token: PromiseOrValue<string>,
      _strikePrice: PromiseOrValue<BigNumberish>,
      _underlying: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getMarketInfo(
      _marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, string] & {
        token: string;
        strike: BigNumber;
        underlyingAsset: string;
      }
    >;

    getVaults(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, string]>;

    marketIdInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, string] & {
        token: string;
        strike: BigNumber;
        underlyingAsset: string;
      }
    >;

    marketIdToEpochs(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    marketIdToVaults(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    marketToOracle(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    timelocker(overrides?: CallOverrides): Promise<string>;

    transferOwnership(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    whitelistAddressOnMarket(
      _marketId: PromiseOrValue<BigNumberish>,
      _wAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    whitelistController(_controller: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'AddressWhitelisted(address,uint256)'(
      _wAddress?: null,
      _marketId?: PromiseOrValue<BigNumberish> | null,
    ): AddressWhitelistedEventFilter;
    AddressWhitelisted(
      _wAddress?: null,
      _marketId?: PromiseOrValue<BigNumberish> | null,
    ): AddressWhitelistedEventFilter;

    'ControllerChanged(uint256,address,address,address)'(
      marketId?: PromiseOrValue<BigNumberish> | null,
      controller?: PromiseOrValue<string> | null,
      premium?: null,
      collateral?: null,
    ): ControllerChangedEventFilter;
    ControllerChanged(
      marketId?: PromiseOrValue<BigNumberish> | null,
      controller?: PromiseOrValue<string> | null,
      premium?: null,
      collateral?: null,
    ): ControllerChangedEventFilter;

    'ControllerWhitelisted(address)'(_controller?: null): ControllerWhitelistedEventFilter;
    ControllerWhitelisted(_controller?: null): ControllerWhitelistedEventFilter;

    'EpochCreated(uint256,uint256,uint40,uint40,address,address,address,uint256,uint16)'(
      epochId?: PromiseOrValue<BigNumberish> | null,
      marketId?: PromiseOrValue<BigNumberish> | null,
      startEpoch?: null,
      endEpoch?: null,
      premium?: null,
      collateral?: null,
      token?: null,
      strike?: null,
      withdrawalFee?: null,
    ): EpochCreatedEventFilter;
    EpochCreated(
      epochId?: PromiseOrValue<BigNumberish> | null,
      marketId?: PromiseOrValue<BigNumberish> | null,
      startEpoch?: null,
      endEpoch?: null,
      premium?: null,
      collateral?: null,
      token?: null,
      strike?: null,
      withdrawalFee?: null,
    ): EpochCreatedEventFilter;

    'MarketCreated(uint256,address,address,address,address,string,uint256,address)'(
      marketId?: PromiseOrValue<BigNumberish> | null,
      premium?: null,
      collateral?: null,
      underlyingAsset?: null,
      token?: null,
      name?: null,
      strike?: null,
      controller?: null,
    ): MarketCreatedEventFilter;
    MarketCreated(
      marketId?: PromiseOrValue<BigNumberish> | null,
      premium?: null,
      collateral?: null,
      underlyingAsset?: null,
      token?: null,
      name?: null,
      strike?: null,
      controller?: null,
    ): MarketCreatedEventFilter;

    'OracleChanged(uint256,address)'(
      _marketId?: PromiseOrValue<BigNumberish> | null,
      _oracle?: null,
    ): OracleChangedEventFilter;
    OracleChanged(_marketId?: PromiseOrValue<BigNumberish> | null, _oracle?: null): OracleChangedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'TreasurySet(address)'(_treasury?: null): TreasurySetEventFilter;
    TreasurySet(_treasury?: null): TreasurySetEventFilter;
  };

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    changeController(
      _marketId: PromiseOrValue<BigNumberish>,
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeOracle(
      _marketId: PromiseOrValue<BigNumberish>,
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    controllers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    createEpoch(
      _marketId: PromiseOrValue<BigNumberish>,
      _epochBegin: PromiseOrValue<BigNumberish>,
      _epochEnd: PromiseOrValue<BigNumberish>,
      _withdrawalFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createNewMarket(
      _marketCalldata: VaultFactoryV2.MarketConfigurationCalldataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    epochFee(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getEpochFee(epochId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getEpochId(
      marketId: PromiseOrValue<BigNumberish>,
      epochBegin: PromiseOrValue<BigNumberish>,
      epochEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getEpochsByMarketId(marketId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getMarketId(
      _token: PromiseOrValue<string>,
      _strikePrice: PromiseOrValue<BigNumberish>,
      _underlying: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getMarketInfo(_marketId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getVaults(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    marketIdInfo(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    marketIdToEpochs(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    marketIdToVaults(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    marketToOracle(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    timelocker(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistAddressOnMarket(
      _marketId: PromiseOrValue<BigNumberish>,
      _wAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    whitelistController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeController(
      _marketId: PromiseOrValue<BigNumberish>,
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeOracle(
      _marketId: PromiseOrValue<BigNumberish>,
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    controllers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createEpoch(
      _marketId: PromiseOrValue<BigNumberish>,
      _epochBegin: PromiseOrValue<BigNumberish>,
      _epochEnd: PromiseOrValue<BigNumberish>,
      _withdrawalFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createNewMarket(
      _marketCalldata: VaultFactoryV2.MarketConfigurationCalldataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    epochFee(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEpochFee(epochId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEpochId(
      marketId: PromiseOrValue<BigNumberish>,
      epochBegin: PromiseOrValue<BigNumberish>,
      epochEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getEpochsByMarketId(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getMarketId(
      _token: PromiseOrValue<string>,
      _strikePrice: PromiseOrValue<BigNumberish>,
      _underlying: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getMarketInfo(_marketId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaults(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketIdInfo(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketIdToEpochs(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    marketIdToVaults(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    marketToOracle(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    timelocker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistAddressOnMarket(
      _marketId: PromiseOrValue<BigNumberish>,
      _wAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    whitelistController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
