/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace Carousel {
  export type ConstructorArgsStruct = {
    isWETH: PromiseOrValue<boolean>;
    assetAddress: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    tokenURI: PromiseOrValue<string>;
    token: PromiseOrValue<string>;
    strike: PromiseOrValue<BigNumberish>;
    controller: PromiseOrValue<string>;
    emissionsToken: PromiseOrValue<string>;
    relayerFee: PromiseOrValue<BigNumberish>;
    depositFee: PromiseOrValue<BigNumberish>;
    minQueueDeposit: PromiseOrValue<BigNumberish>;
  };

  export type ConstructorArgsStructOutput = [
    boolean,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    isWETH: boolean;
    assetAddress: string;
    name: string;
    symbol: string;
    tokenURI: string;
    token: string;
    strike: BigNumber;
    controller: string;
    emissionsToken: string;
    relayerFee: BigNumber;
    depositFee: BigNumber;
    minQueueDeposit: BigNumber;
  };
}

export interface Y2KFinanceCarouselInterface extends utils.Interface {
  functions: {
    'asset()': FunctionFragment;
    'balanceOf(address,uint256)': FunctionFragment;
    'balanceOfBatch(address[],uint256[])': FunctionFragment;
    'calculateFeePercent(int256,int256)': FunctionFragment;
    'changeController(address)': FunctionFragment;
    'changeDepositFee(uint256)': FunctionFragment;
    'changeRelayerFee(uint256)': FunctionFragment;
    'claimTVL(uint256)': FunctionFragment;
    'cleanUpRolloverQueue(address[])': FunctionFragment;
    'controller()': FunctionFragment;
    'counterPartyVault()': FunctionFragment;
    'delistInRollover(address)': FunctionFragment;
    'deposit(uint256,uint256,address)': FunctionFragment;
    'depositETH(uint256,address)': FunctionFragment;
    'depositFee()': FunctionFragment;
    'depositQueue(uint256)': FunctionFragment;
    'emissions(uint256)': FunctionFragment;
    'emissionsToken()': FunctionFragment;
    'enlistInRollover(uint256,uint256,address)': FunctionFragment;
    'epochAccounting(uint256)': FunctionFragment;
    'epochConfig(uint256)': FunctionFragment;
    'epochExists(uint256)': FunctionFragment;
    'epochNull(uint256)': FunctionFragment;
    'epochResolved(uint256)': FunctionFragment;
    'epochs(uint256)': FunctionFragment;
    'exists(uint256)': FunctionFragment;
    'factory()': FunctionFragment;
    'finalTVL(uint256)': FunctionFragment;
    'getAllEpochs()': FunctionFragment;
    'getDepositQueueLength()': FunctionFragment;
    'getDepositQueueTVL()': FunctionFragment;
    'getEpochConfig(uint256)': FunctionFragment;
    'getEpochDepositFee(uint256,uint256)': FunctionFragment;
    'getEpochsLength()': FunctionFragment;
    'getRolloverIndex(address)': FunctionFragment;
    'getRolloverPosition(address)': FunctionFragment;
    'getRolloverQueueItem(uint256)': FunctionFragment;
    'getRolloverQueueLength()': FunctionFragment;
    'getRolloverTVL()': FunctionFragment;
    'getRolloverTVLByEpochId(uint256)': FunctionFragment;
    'isApprovedForAll(address,address)': FunctionFragment;
    'isEnlistedInRolloverQueue(address)': FunctionFragment;
    'isWETH()': FunctionFragment;
    'minQueueDeposit()': FunctionFragment;
    'mintDepositInQueue(uint256,uint256)': FunctionFragment;
    'mintRollovers(uint256,uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'ownerToRollOverQueueIndex(address)': FunctionFragment;
    'previewAmountInShares(uint256,uint256)': FunctionFragment;
    'previewEmissionsWithdraw(uint256,uint256)': FunctionFragment;
    'previewWithdraw(uint256,uint256)': FunctionFragment;
    'relayerFee()': FunctionFragment;
    'resolveEpoch(uint256)': FunctionFragment;
    'rolloverAccounting(uint256)': FunctionFragment;
    'rolloverQueue(uint256)': FunctionFragment;
    'safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)': FunctionFragment;
    'safeTransferFrom(address,address,uint256,uint256,bytes)': FunctionFragment;
    'sendTokens(uint256,uint256,address)': FunctionFragment;
    'setApprovalForAll(address,bool)': FunctionFragment;
    'setClaimTVL(uint256,uint256)': FunctionFragment;
    'setCounterPartyVault(address)': FunctionFragment;
    'setEmissions(uint256,uint256)': FunctionFragment;
    'setEpoch(uint40,uint40,uint256)': FunctionFragment;
    'setEpochNull(uint256)': FunctionFragment;
    'strike()': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'symbol()': FunctionFragment;
    'token()': FunctionFragment;
    'totalAssets(uint256)': FunctionFragment;
    'totalSupply(uint256)': FunctionFragment;
    'treasury()': FunctionFragment;
    'uri(uint256)': FunctionFragment;
    'whiteListAddress(address)': FunctionFragment;
    'whitelistedAddresses(address)': FunctionFragment;
    'withdraw(uint256,uint256,address,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'asset'
      | 'balanceOf'
      | 'balanceOfBatch'
      | 'calculateFeePercent'
      | 'changeController'
      | 'changeDepositFee'
      | 'changeRelayerFee'
      | 'claimTVL'
      | 'cleanUpRolloverQueue'
      | 'controller'
      | 'counterPartyVault'
      | 'delistInRollover'
      | 'deposit'
      | 'depositETH'
      | 'depositFee'
      | 'depositQueue'
      | 'emissions'
      | 'emissionsToken'
      | 'enlistInRollover'
      | 'epochAccounting'
      | 'epochConfig'
      | 'epochExists'
      | 'epochNull'
      | 'epochResolved'
      | 'epochs'
      | 'exists'
      | 'factory'
      | 'finalTVL'
      | 'getAllEpochs'
      | 'getDepositQueueLength'
      | 'getDepositQueueTVL'
      | 'getEpochConfig'
      | 'getEpochDepositFee'
      | 'getEpochsLength'
      | 'getRolloverIndex'
      | 'getRolloverPosition'
      | 'getRolloverQueueItem'
      | 'getRolloverQueueLength'
      | 'getRolloverTVL'
      | 'getRolloverTVLByEpochId'
      | 'isApprovedForAll'
      | 'isEnlistedInRolloverQueue'
      | 'isWETH'
      | 'minQueueDeposit'
      | 'mintDepositInQueue'
      | 'mintRollovers'
      | 'name'
      | 'ownerToRollOverQueueIndex'
      | 'previewAmountInShares'
      | 'previewEmissionsWithdraw'
      | 'previewWithdraw'
      | 'relayerFee'
      | 'resolveEpoch'
      | 'rolloverAccounting'
      | 'rolloverQueue'
      | 'safeBatchTransferFrom'
      | 'safeTransferFrom'
      | 'sendTokens'
      | 'setApprovalForAll'
      | 'setClaimTVL'
      | 'setCounterPartyVault'
      | 'setEmissions'
      | 'setEpoch'
      | 'setEpochNull'
      | 'strike'
      | 'supportsInterface'
      | 'symbol'
      | 'token'
      | 'totalAssets'
      | 'totalSupply'
      | 'treasury'
      | 'uri'
      | 'whiteListAddress'
      | 'whitelistedAddresses'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'asset', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOfBatch',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateFeePercent',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'changeController', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'changeDepositFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'changeRelayerFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'claimTVL', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'cleanUpRolloverQueue', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'controller', values?: undefined): string;
  encodeFunctionData(functionFragment: 'counterPartyVault', values?: undefined): string;
  encodeFunctionData(functionFragment: 'delistInRollover', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositETH',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'depositFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'depositQueue', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'emissions', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'emissionsToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'enlistInRollover',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'epochAccounting', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'epochConfig', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'epochExists', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'epochNull', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'epochResolved', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'epochs', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'exists', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string;
  encodeFunctionData(functionFragment: 'finalTVL', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getAllEpochs', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getDepositQueueLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getDepositQueueTVL', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getEpochConfig', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getEpochDepositFee',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getEpochsLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRolloverIndex', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getRolloverPosition', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getRolloverQueueItem', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getRolloverQueueLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRolloverTVL', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRolloverTVLByEpochId', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'isEnlistedInRolloverQueue', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isWETH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minQueueDeposit', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'mintDepositInQueue',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'mintRollovers',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ownerToRollOverQueueIndex', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'previewAmountInShares',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'previewEmissionsWithdraw',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'previewWithdraw',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'relayerFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'resolveEpoch', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'rolloverAccounting', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'rolloverQueue', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'safeBatchTransferFrom',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'sendTokens',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setClaimTVL',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setCounterPartyVault', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setEmissions',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setEpoch',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setEpochNull', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'strike', values?: undefined): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalAssets', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'totalSupply', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'treasury', values?: undefined): string;
  encodeFunctionData(functionFragment: 'uri', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'whiteListAddress', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'whitelistedAddresses', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string;

  decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfBatch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateFeePercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeDepositFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeRelayerFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimTVL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cleanUpRolloverQueue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'controller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'counterPartyVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delistInRollover', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositQueue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emissions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emissionsToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enlistInRollover', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'epochAccounting', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'epochConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'epochExists', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'epochNull', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'epochResolved', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'epochs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exists', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'finalTVL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllEpochs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDepositQueueLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDepositQueueTVL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEpochConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEpochDepositFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEpochsLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRolloverIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRolloverPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRolloverQueueItem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRolloverQueueLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRolloverTVL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRolloverTVLByEpochId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isEnlistedInRolloverQueue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isWETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minQueueDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintDepositInQueue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintRollovers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerToRollOverQueueIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewAmountInShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewEmissionsWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'relayerFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolveEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rolloverAccounting', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rolloverQueue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeBatchTransferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sendTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setClaimTVL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCounterPartyVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEmissions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEpochNull', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strike', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'uri', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whiteListAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistedAddresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'ApprovalForAll(address,address,bool)': EventFragment;
    'Deposit(address,address,uint256,uint256)': EventFragment;
    'DepositInQueue(address,address,uint256,uint256)': EventFragment;
    'RelayerMinted(uint256,uint256)': EventFragment;
    'RolloverQueued(address,uint256,uint256)': EventFragment;
    'TransferBatch(address,address,address,uint256[],uint256[])': EventFragment;
    'TransferSingle(address,address,address,uint256,uint256)': EventFragment;
    'URI(string,uint256)': EventFragment;
    'Withdraw(address,address,address,uint256,uint256,uint256)': EventFragment;
    'WithdrawWithEmissions(address,address,address,uint256,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositInQueue'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RelayerMinted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RolloverQueued'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferBatch'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferSingle'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'URI'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawWithEmissions'): EventFragment;
}

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<[string, string, boolean], ApprovalForAllEventObject>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface DepositEventObject {
  caller: string;
  owner: string;
  id: BigNumber;
  assets: BigNumber;
}
export type DepositEvent = TypedEvent<[string, string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DepositInQueueEventObject {
  sender: string;
  receiver: string;
  epochId: BigNumber;
  assets: BigNumber;
}
export type DepositInQueueEvent = TypedEvent<[string, string, BigNumber, BigNumber], DepositInQueueEventObject>;

export type DepositInQueueEventFilter = TypedEventFilter<DepositInQueueEvent>;

export interface RelayerMintedEventObject {
  epochId: BigNumber;
  operations: BigNumber;
}
export type RelayerMintedEvent = TypedEvent<[BigNumber, BigNumber], RelayerMintedEventObject>;

export type RelayerMintedEventFilter = TypedEventFilter<RelayerMintedEvent>;

export interface RolloverQueuedEventObject {
  sender: string;
  assets: BigNumber;
  epochId: BigNumber;
}
export type RolloverQueuedEvent = TypedEvent<[string, BigNumber, BigNumber], RolloverQueuedEventObject>;

export type RolloverQueuedEventFilter = TypedEventFilter<RolloverQueuedEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], TransferSingleEventObject>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface URIEventObject {
  value: string;
  id: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface WithdrawEventObject {
  caller: string;
  receiver: string;
  owner: string;
  id: BigNumber;
  assets: BigNumber;
  shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, string, string, BigNumber, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawWithEmissionsEventObject {
  caller: string;
  receiver: string;
  owner: string;
  id: BigNumber;
  assets: BigNumber;
  shares: BigNumber;
  emissions: BigNumber;
}
export type WithdrawWithEmissionsEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  WithdrawWithEmissionsEventObject
>;

export type WithdrawWithEmissionsEventFilter = TypedEventFilter<WithdrawWithEmissionsEvent>;

export interface Y2KFinanceCarousel extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Y2KFinanceCarouselInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    asset(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]]>;

    calculateFeePercent(
      minX: PromiseOrValue<BigNumberish>,
      maxX: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { _y: BigNumber }>;

    changeController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeDepositFee(
      _depositFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeRelayerFee(
      _relayerFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimTVL(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    cleanUpRolloverQueue(
      _addressesToDelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    counterPartyVault(overrides?: CallOverrides): Promise<[string]>;

    delistInRollover(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deposit(
      _id: PromiseOrValue<BigNumberish>,
      _assets: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositETH(
      _id: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositQueue(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, string, BigNumber] & {
        shares: BigNumber;
        receiver: string;
        epochId: BigNumber;
      }
    >;

    emissions(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    emissionsToken(overrides?: CallOverrides): Promise<[string]>;

    enlistInRollover(
      _epochId: PromiseOrValue<BigNumberish>,
      _shares: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    epochAccounting(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    epochConfig(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [number, number, number] & {
        epochBegin: number;
        epochEnd: number;
        epochCreation: number;
      }
    >;

    epochExists(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    epochNull(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    epochResolved(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    epochs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    exists(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    finalTVL(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllEpochs(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getDepositQueueLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDepositQueueTVL(overrides?: CallOverrides): Promise<[BigNumber] & { tvl: BigNumber }>;

    getEpochConfig(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [number, number, number] & {
        epochBegin: number;
        epochEnd: number;
        epochCreation: number;
      }
    >;

    getEpochDepositFee(
      _id: PromiseOrValue<BigNumberish>,
      _assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        feeAmount: BigNumber;
        assetsAfterFee: BigNumber;
      }
    >;

    getEpochsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRolloverIndex(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getRolloverPosition(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { shares: BigNumber; epochId: BigNumber }>;

    getRolloverQueueItem(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber] & {
        receiver: string;
        shares: BigNumber;
        epochId: BigNumber;
      }
    >;

    getRolloverQueueLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRolloverTVL(overrides?: CallOverrides): Promise<[BigNumber] & { tvl: BigNumber }>;

    getRolloverTVLByEpochId(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { tvl: BigNumber }>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isEnlistedInRolloverQueue(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isWETH(overrides?: CallOverrides): Promise<[boolean]>;

    minQueueDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintDepositInQueue(
      _epochId: PromiseOrValue<BigNumberish>,
      _operations: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mintRollovers(
      _epochId: PromiseOrValue<BigNumberish>,
      _operations: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerToRollOverQueueIndex(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    previewAmountInShares(
      _id: PromiseOrValue<BigNumberish>,
      _assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { entitledShareAmount: BigNumber }>;

    previewEmissionsWithdraw(
      _id: PromiseOrValue<BigNumberish>,
      _assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { entitledAmount: BigNumber }>;

    previewWithdraw(
      _id: PromiseOrValue<BigNumberish>,
      _shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { entitledAssets: BigNumber }>;

    relayerFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    resolveEpoch(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    rolloverAccounting(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    rolloverQueue(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, string, BigNumber] & {
        shares: BigNumber;
        receiver: string;
        epochId: BigNumber;
      }
    >;

    safeBatchTransferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[void]>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    sendTokens(
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setClaimTVL(
      _id: PromiseOrValue<BigNumberish>,
      _claimTVL: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setCounterPartyVault(
      _counterPartyVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setEmissions(
      _epochId: PromiseOrValue<BigNumberish>,
      _emissionAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setEpoch(
      _epochBegin: PromiseOrValue<BigNumberish>,
      _epochEnd: PromiseOrValue<BigNumberish>,
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setEpochNull(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    strike(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(_id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    treasury(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    uri(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    whiteListAddress(
      _wAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    whitelistedAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    withdraw(
      _id: PromiseOrValue<BigNumberish>,
      _shares: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  asset(overrides?: CallOverrides): Promise<string>;

  balanceOf(
    account: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: PromiseOrValue<string>[],
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  calculateFeePercent(
    minX: PromiseOrValue<BigNumberish>,
    maxX: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  changeController(
    _controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeDepositFee(
    _depositFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeRelayerFee(
    _relayerFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimTVL(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  cleanUpRolloverQueue(
    _addressesToDelist: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  counterPartyVault(overrides?: CallOverrides): Promise<string>;

  delistInRollover(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deposit(
    _id: PromiseOrValue<BigNumberish>,
    _assets: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositETH(
    _id: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositFee(overrides?: CallOverrides): Promise<BigNumber>;

  depositQueue(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, string, BigNumber] & {
      shares: BigNumber;
      receiver: string;
      epochId: BigNumber;
    }
  >;

  emissions(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  emissionsToken(overrides?: CallOverrides): Promise<string>;

  enlistInRollover(
    _epochId: PromiseOrValue<BigNumberish>,
    _shares: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  epochAccounting(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  epochConfig(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [number, number, number] & {
      epochBegin: number;
      epochEnd: number;
      epochCreation: number;
    }
  >;

  epochExists(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  epochNull(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  epochResolved(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  epochs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  exists(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  factory(overrides?: CallOverrides): Promise<string>;

  finalTVL(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getAllEpochs(overrides?: CallOverrides): Promise<BigNumber[]>;

  getDepositQueueLength(overrides?: CallOverrides): Promise<BigNumber>;

  getDepositQueueTVL(overrides?: CallOverrides): Promise<BigNumber>;

  getEpochConfig(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [number, number, number] & {
      epochBegin: number;
      epochEnd: number;
      epochCreation: number;
    }
  >;

  getEpochDepositFee(
    _id: PromiseOrValue<BigNumberish>,
    _assets: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { feeAmount: BigNumber; assetsAfterFee: BigNumber }>;

  getEpochsLength(overrides?: CallOverrides): Promise<BigNumber>;

  getRolloverIndex(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getRolloverPosition(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { shares: BigNumber; epochId: BigNumber }>;

  getRolloverQueueItem(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, BigNumber] & {
      receiver: string;
      shares: BigNumber;
      epochId: BigNumber;
    }
  >;

  getRolloverQueueLength(overrides?: CallOverrides): Promise<BigNumber>;

  getRolloverTVL(overrides?: CallOverrides): Promise<BigNumber>;

  getRolloverTVLByEpochId(_epochId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  isApprovedForAll(
    account: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isEnlistedInRolloverQueue(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isWETH(overrides?: CallOverrides): Promise<boolean>;

  minQueueDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  mintDepositInQueue(
    _epochId: PromiseOrValue<BigNumberish>,
    _operations: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mintRollovers(
    _epochId: PromiseOrValue<BigNumberish>,
    _operations: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerToRollOverQueueIndex(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  previewAmountInShares(
    _id: PromiseOrValue<BigNumberish>,
    _assets: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  previewEmissionsWithdraw(
    _id: PromiseOrValue<BigNumberish>,
    _assets: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  previewWithdraw(
    _id: PromiseOrValue<BigNumberish>,
    _shares: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  relayerFee(overrides?: CallOverrides): Promise<BigNumber>;

  resolveEpoch(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  rolloverAccounting(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  rolloverQueue(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, string, BigNumber] & {
      shares: BigNumber;
      receiver: string;
      epochId: BigNumber;
    }
  >;

  safeBatchTransferFrom(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>[],
    arg3: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<void>;

  safeTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  sendTokens(
    _id: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setClaimTVL(
    _id: PromiseOrValue<BigNumberish>,
    _claimTVL: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setCounterPartyVault(
    _counterPartyVault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setEmissions(
    _epochId: PromiseOrValue<BigNumberish>,
    _emissionAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setEpoch(
    _epochBegin: PromiseOrValue<BigNumberish>,
    _epochEnd: PromiseOrValue<BigNumberish>,
    _epochId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setEpochNull(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  strike(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  totalAssets(_id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  treasury(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  uri(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  whiteListAddress(
    _wAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  whitelistedAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  withdraw(
    _id: PromiseOrValue<BigNumberish>,
    _shares: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    asset(overrides?: CallOverrides): Promise<string>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    calculateFeePercent(
      minX: PromiseOrValue<BigNumberish>,
      maxX: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    changeController(_controller: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    changeDepositFee(_depositFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    changeRelayerFee(_relayerFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    claimTVL(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    cleanUpRolloverQueue(_addressesToDelist: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    counterPartyVault(overrides?: CallOverrides): Promise<string>;

    delistInRollover(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    deposit(
      _id: PromiseOrValue<BigNumberish>,
      _assets: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositETH(
      _id: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    depositQueue(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, string, BigNumber] & {
        shares: BigNumber;
        receiver: string;
        epochId: BigNumber;
      }
    >;

    emissions(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    emissionsToken(overrides?: CallOverrides): Promise<string>;

    enlistInRollover(
      _epochId: PromiseOrValue<BigNumberish>,
      _shares: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    epochAccounting(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    epochConfig(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [number, number, number] & {
        epochBegin: number;
        epochEnd: number;
        epochCreation: number;
      }
    >;

    epochExists(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    epochNull(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    epochResolved(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    epochs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    exists(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    factory(overrides?: CallOverrides): Promise<string>;

    finalTVL(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getAllEpochs(overrides?: CallOverrides): Promise<BigNumber[]>;

    getDepositQueueLength(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositQueueTVL(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochConfig(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [number, number, number] & {
        epochBegin: number;
        epochEnd: number;
        epochCreation: number;
      }
    >;

    getEpochDepositFee(
      _id: PromiseOrValue<BigNumberish>,
      _assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        feeAmount: BigNumber;
        assetsAfterFee: BigNumber;
      }
    >;

    getEpochsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getRolloverIndex(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRolloverPosition(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { shares: BigNumber; epochId: BigNumber }>;

    getRolloverQueueItem(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber] & {
        receiver: string;
        shares: BigNumber;
        epochId: BigNumber;
      }
    >;

    getRolloverQueueLength(overrides?: CallOverrides): Promise<BigNumber>;

    getRolloverTVL(overrides?: CallOverrides): Promise<BigNumber>;

    getRolloverTVLByEpochId(_epochId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isEnlistedInRolloverQueue(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isWETH(overrides?: CallOverrides): Promise<boolean>;

    minQueueDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    mintDepositInQueue(
      _epochId: PromiseOrValue<BigNumberish>,
      _operations: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    mintRollovers(
      _epochId: PromiseOrValue<BigNumberish>,
      _operations: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerToRollOverQueueIndex(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    previewAmountInShares(
      _id: PromiseOrValue<BigNumberish>,
      _assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    previewEmissionsWithdraw(
      _id: PromiseOrValue<BigNumberish>,
      _assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    previewWithdraw(
      _id: PromiseOrValue<BigNumberish>,
      _shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    relayerFee(overrides?: CallOverrides): Promise<BigNumber>;

    resolveEpoch(_id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    rolloverAccounting(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    rolloverQueue(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, string, BigNumber] & {
        shares: BigNumber;
        receiver: string;
        epochId: BigNumber;
      }
    >;

    safeBatchTransferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    sendTokens(
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setClaimTVL(
      _id: PromiseOrValue<BigNumberish>,
      _claimTVL: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setCounterPartyVault(_counterPartyVault: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setEmissions(
      _epochId: PromiseOrValue<BigNumberish>,
      _emissionAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setEpoch(
      _epochBegin: PromiseOrValue<BigNumberish>,
      _epochEnd: PromiseOrValue<BigNumberish>,
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setEpochNull(_id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    strike(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    totalAssets(_id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<string>;

    uri(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    whiteListAddress(_wAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    whitelistedAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    withdraw(
      _id: PromiseOrValue<BigNumberish>,
      _shares: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {
    'ApprovalForAll(address,address,bool)'(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null,
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null,
    ): ApprovalForAllEventFilter;

    'Deposit(address,address,uint256,uint256)'(
      caller?: null,
      owner?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      assets?: null,
    ): DepositEventFilter;
    Deposit(
      caller?: null,
      owner?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      assets?: null,
    ): DepositEventFilter;

    'DepositInQueue(address,address,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      epochId?: null,
      assets?: null,
    ): DepositInQueueEventFilter;
    DepositInQueue(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      epochId?: null,
      assets?: null,
    ): DepositInQueueEventFilter;

    'RelayerMinted(uint256,uint256)'(epochId?: null, operations?: null): RelayerMintedEventFilter;
    RelayerMinted(epochId?: null, operations?: null): RelayerMintedEventFilter;

    'RolloverQueued(address,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      assets?: null,
      epochId?: null,
    ): RolloverQueuedEventFilter;
    RolloverQueued(sender?: PromiseOrValue<string> | null, assets?: null, epochId?: null): RolloverQueuedEventFilter;

    'TransferBatch(address,address,address,uint256[],uint256[])'(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null,
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null,
    ): TransferBatchEventFilter;

    'TransferSingle(address,address,address,uint256,uint256)'(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null,
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null,
    ): TransferSingleEventFilter;

    'URI(string,uint256)'(value?: null, id?: PromiseOrValue<BigNumberish> | null): URIEventFilter;
    URI(value?: null, id?: PromiseOrValue<BigNumberish> | null): URIEventFilter;

    'Withdraw(address,address,address,uint256,uint256,uint256)'(
      caller?: null,
      receiver?: null,
      owner?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      assets?: null,
      shares?: null,
    ): WithdrawEventFilter;
    Withdraw(
      caller?: null,
      receiver?: null,
      owner?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      assets?: null,
      shares?: null,
    ): WithdrawEventFilter;

    'WithdrawWithEmissions(address,address,address,uint256,uint256,uint256,uint256)'(
      caller?: null,
      receiver?: null,
      owner?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      assets?: null,
      shares?: null,
      emissions?: null,
    ): WithdrawWithEmissionsEventFilter;
    WithdrawWithEmissions(
      caller?: null,
      receiver?: null,
      owner?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      assets?: null,
      shares?: null,
      emissions?: null,
    ): WithdrawWithEmissionsEventFilter;
  };

  estimateGas: {
    asset(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calculateFeePercent(
      minX: PromiseOrValue<BigNumberish>,
      maxX: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    changeController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeDepositFee(
      _depositFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeRelayerFee(
      _relayerFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimTVL(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    cleanUpRolloverQueue(
      _addressesToDelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    counterPartyVault(overrides?: CallOverrides): Promise<BigNumber>;

    delistInRollover(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deposit(
      _id: PromiseOrValue<BigNumberish>,
      _assets: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositETH(
      _id: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    depositQueue(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    emissions(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    emissionsToken(overrides?: CallOverrides): Promise<BigNumber>;

    enlistInRollover(
      _epochId: PromiseOrValue<BigNumberish>,
      _shares: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    epochAccounting(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    epochConfig(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    epochExists(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    epochNull(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    epochResolved(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    epochs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    exists(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    finalTVL(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getAllEpochs(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositQueueLength(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositQueueTVL(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochConfig(_id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getEpochDepositFee(
      _id: PromiseOrValue<BigNumberish>,
      _assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getEpochsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getRolloverIndex(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRolloverPosition(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRolloverQueueItem(_index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getRolloverQueueLength(overrides?: CallOverrides): Promise<BigNumber>;

    getRolloverTVL(overrides?: CallOverrides): Promise<BigNumber>;

    getRolloverTVLByEpochId(_epochId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isEnlistedInRolloverQueue(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isWETH(overrides?: CallOverrides): Promise<BigNumber>;

    minQueueDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    mintDepositInQueue(
      _epochId: PromiseOrValue<BigNumberish>,
      _operations: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mintRollovers(
      _epochId: PromiseOrValue<BigNumberish>,
      _operations: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerToRollOverQueueIndex(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    previewAmountInShares(
      _id: PromiseOrValue<BigNumberish>,
      _assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    previewEmissionsWithdraw(
      _id: PromiseOrValue<BigNumberish>,
      _assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    previewWithdraw(
      _id: PromiseOrValue<BigNumberish>,
      _shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    relayerFee(overrides?: CallOverrides): Promise<BigNumber>;

    resolveEpoch(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    rolloverAccounting(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    rolloverQueue(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    safeBatchTransferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    sendTokens(
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setClaimTVL(
      _id: PromiseOrValue<BigNumberish>,
      _claimTVL: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setCounterPartyVault(
      _counterPartyVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setEmissions(
      _epochId: PromiseOrValue<BigNumberish>,
      _emissionAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setEpoch(
      _epochBegin: PromiseOrValue<BigNumberish>,
      _epochEnd: PromiseOrValue<BigNumberish>,
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setEpochNull(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    strike(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(_id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    uri(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    whiteListAddress(
      _wAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    whitelistedAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _id: PromiseOrValue<BigNumberish>,
      _shares: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    calculateFeePercent(
      minX: PromiseOrValue<BigNumberish>,
      maxX: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    changeController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeDepositFee(
      _depositFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeRelayerFee(
      _relayerFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimTVL(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cleanUpRolloverQueue(
      _addressesToDelist: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    counterPartyVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delistInRollover(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      _id: PromiseOrValue<BigNumberish>,
      _assets: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositETH(
      _id: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositQueue(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emissions(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emissionsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enlistInRollover(
      _epochId: PromiseOrValue<BigNumberish>,
      _shares: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    epochAccounting(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochConfig(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochExists(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochNull(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochResolved(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exists(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalTVL(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllEpochs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepositQueueLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepositQueueTVL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEpochConfig(_id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEpochDepositFee(
      _id: PromiseOrValue<BigNumberish>,
      _assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getEpochsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRolloverIndex(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRolloverPosition(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRolloverQueueItem(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRolloverQueueLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRolloverTVL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRolloverTVLByEpochId(
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isEnlistedInRolloverQueue(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minQueueDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintDepositInQueue(
      _epochId: PromiseOrValue<BigNumberish>,
      _operations: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mintRollovers(
      _epochId: PromiseOrValue<BigNumberish>,
      _operations: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerToRollOverQueueIndex(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewAmountInShares(
      _id: PromiseOrValue<BigNumberish>,
      _assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    previewEmissionsWithdraw(
      _id: PromiseOrValue<BigNumberish>,
      _assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    previewWithdraw(
      _id: PromiseOrValue<BigNumberish>,
      _shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    relayerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resolveEpoch(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    rolloverAccounting(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rolloverQueue(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    sendTokens(
      _id: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setClaimTVL(
      _id: PromiseOrValue<BigNumberish>,
      _claimTVL: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setCounterPartyVault(
      _counterPartyVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setEmissions(
      _epochId: PromiseOrValue<BigNumberish>,
      _emissionAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setEpoch(
      _epochBegin: PromiseOrValue<BigNumberish>,
      _epochEnd: PromiseOrValue<BigNumberish>,
      _epochId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setEpochNull(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    strike(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(_id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    uri(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whiteListAddress(
      _wAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    whitelistedAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _id: PromiseOrValue<BigNumberish>,
      _shares: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
