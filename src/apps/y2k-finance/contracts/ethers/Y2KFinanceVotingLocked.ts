/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface Y2KFinanceVotingLockedInterface extends utils.Interface {
  functions: {
    'accounts(address)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'balanceOfInEpoch(address,uint256)': FunctionFragment;
    'changeEnforceTime(bool)': FunctionFragment;
    'changeMaxEpochs(uint256)': FunctionFragment;
    'changeRecoverWhitelist(address,bool)': FunctionFragment;
    'claimReward()': FunctionFragment;
    'currentEpoch()': FunctionFragment;
    'deposit(uint256,uint256)': FunctionFragment;
    'enforceTime()': FunctionFragment;
    'epochs(uint256)': FunctionFragment;
    'exit()': FunctionFragment;
    'getAccount(address)': FunctionFragment;
    'getCurrentEpoch()': FunctionFragment;
    'getEpoch(uint256)': FunctionFragment;
    'getEpochAccountInfo(address,uint256)': FunctionFragment;
    'getNextEpoch()': FunctionFragment;
    'lockToken()': FunctionFragment;
    'maxEpochs()': FunctionFragment;
    'minEpochs()': FunctionFragment;
    'nextUnsetEpoch()': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'recoverERC20(address,uint256)': FunctionFragment;
    'recoverERC721(address,uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardToken(uint256)': FunctionFragment;
    'setNextEpoch(uint256,uint256,uint256)': FunctionFragment;
    'setNextEpoch_start(uint256,uint256,uint256,uint256)': FunctionFragment;
    'totalAssets()': FunctionFragment;
    'totalLocked()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unpause()': FunctionFragment;
    'updateAccount()': FunctionFragment;
    'updateEpochs()': FunctionFragment;
    'whitelistRecoverERC20(address)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'accounts'
      | 'balanceOf'
      | 'balanceOfInEpoch'
      | 'changeEnforceTime'
      | 'changeMaxEpochs'
      | 'changeRecoverWhitelist'
      | 'claimReward'
      | 'currentEpoch'
      | 'deposit'
      | 'enforceTime'
      | 'epochs'
      | 'exit'
      | 'getAccount'
      | 'getCurrentEpoch'
      | 'getEpoch'
      | 'getEpochAccountInfo'
      | 'getNextEpoch'
      | 'lockToken'
      | 'maxEpochs'
      | 'minEpochs'
      | 'nextUnsetEpoch'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'recoverERC20'
      | 'recoverERC721'
      | 'renounceOwnership'
      | 'rewardToken'
      | 'setNextEpoch'
      | 'setNextEpoch_start'
      | 'totalAssets'
      | 'totalLocked'
      | 'transferOwnership'
      | 'unpause'
      | 'updateAccount'
      | 'updateEpochs'
      | 'whitelistRecoverERC20'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'accounts', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'balanceOfInEpoch',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'changeEnforceTime', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'changeMaxEpochs', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'changeRecoverWhitelist',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'claimReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'currentEpoch', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'enforceTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'epochs', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'exit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAccount', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getCurrentEpoch', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getEpoch', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getEpochAccountInfo',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getNextEpoch', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lockToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxEpochs', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minEpochs', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nextUnsetEpoch', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'recoverERC20',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'recoverERC721',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardToken', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setNextEpoch',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setNextEpoch_start',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'totalAssets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalLocked', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateAccount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateEpochs', values?: undefined): string;
  encodeFunctionData(functionFragment: 'whitelistRecoverERC20', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'accounts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfInEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeEnforceTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeMaxEpochs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeRecoverWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enforceTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'epochs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCurrentEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEpochAccountInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNextEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxEpochs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minEpochs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nextUnsetEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recoverERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recoverERC721', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setNextEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setNextEpoch_start', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalLocked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateEpochs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistRecoverERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'ChangeERC20Whiltelist(address,bool)': EventFragment;
    'ChangeEnforceTime(uint256,bool)': EventFragment;
    'ChangeMaxLockEpochs(uint256,uint256,uint256)': EventFragment;
    'Deposit(address,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'RecoveredERC20(address,uint256)': EventFragment;
    'RecoveredERC721(address,uint256)': EventFragment;
    'Relock(address,uint256,uint256)': EventFragment;
    'RewardPaid(address,address,uint256)': EventFragment;
    'SetNextReward(uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
    'UpdatedEpoch(uint256)': EventFragment;
    'Withdrawn(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ChangeERC20Whiltelist'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ChangeEnforceTime'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ChangeMaxLockEpochs'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RecoveredERC20'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RecoveredERC721'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Relock'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardPaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetNextReward'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatedEpoch'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdrawn'): EventFragment;
}

export interface ChangeERC20WhiltelistEventObject {
  token: string;
  tokenState: boolean;
}
export type ChangeERC20WhiltelistEvent = TypedEvent<[string, boolean], ChangeERC20WhiltelistEventObject>;

export type ChangeERC20WhiltelistEventFilter = TypedEventFilter<ChangeERC20WhiltelistEvent>;

export interface ChangeEnforceTimeEventObject {
  currentTime: BigNumber;
  flag: boolean;
}
export type ChangeEnforceTimeEvent = TypedEvent<[BigNumber, boolean], ChangeEnforceTimeEventObject>;

export type ChangeEnforceTimeEventFilter = TypedEventFilter<ChangeEnforceTimeEvent>;

export interface ChangeMaxLockEpochsEventObject {
  currentTime: BigNumber;
  oldEpochs: BigNumber;
  newEpochs: BigNumber;
}
export type ChangeMaxLockEpochsEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], ChangeMaxLockEpochsEventObject>;

export type ChangeMaxLockEpochsEventFilter = TypedEventFilter<ChangeMaxLockEpochsEvent>;

export interface DepositEventObject {
  user: string;
  amount: BigNumber;
  lockedEpochs: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RecoveredERC20EventObject {
  token: string;
  amount: BigNumber;
}
export type RecoveredERC20Event = TypedEvent<[string, BigNumber], RecoveredERC20EventObject>;

export type RecoveredERC20EventFilter = TypedEventFilter<RecoveredERC20Event>;

export interface RecoveredERC721EventObject {
  token: string;
  tokenId: BigNumber;
}
export type RecoveredERC721Event = TypedEvent<[string, BigNumber], RecoveredERC721EventObject>;

export type RecoveredERC721EventFilter = TypedEventFilter<RecoveredERC721Event>;

export interface RelockEventObject {
  user: string;
  totalBalance: BigNumber;
  lockedEpochs: BigNumber;
}
export type RelockEvent = TypedEvent<[string, BigNumber, BigNumber], RelockEventObject>;

export type RelockEventFilter = TypedEventFilter<RelockEvent>;

export interface RewardPaidEventObject {
  user: string;
  token: string;
  reward: BigNumber;
}
export type RewardPaidEvent = TypedEvent<[string, string, BigNumber], RewardPaidEventObject>;

export type RewardPaidEventFilter = TypedEventFilter<RewardPaidEvent>;

export interface SetNextRewardEventObject {
  epochId: BigNumber;
  reward1: BigNumber;
  reward2: BigNumber;
  start: BigNumber;
  finish: BigNumber;
}
export type SetNextRewardEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  SetNextRewardEventObject
>;

export type SetNextRewardEventFilter = TypedEventFilter<SetNextRewardEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpdatedEpochEventObject {
  currentId: BigNumber;
}
export type UpdatedEpochEvent = TypedEvent<[BigNumber], UpdatedEpochEventObject>;

export type UpdatedEpochEventFilter = TypedEventFilter<UpdatedEpochEvent>;

export interface WithdrawnEventObject {
  user: string;
  amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<[string, BigNumber], WithdrawnEventObject>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface Y2KFinanceVotingLocked extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Y2KFinanceVotingLockedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        lockEpochs: BigNumber;
        lastEpochPaid: BigNumber;
        rewards1: BigNumber;
        rewards2: BigNumber;
      }
    >;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfInEpoch(
      owner: PromiseOrValue<string>,
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    changeEnforceTime(
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeMaxEpochs(
      _maxEpochs: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeRecoverWhitelist(
      tokenAddress: PromiseOrValue<string>,
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      lockEpochs: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    enforceTime(overrides?: CallOverrides): Promise<[boolean]>;

    epochs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        start: BigNumber;
        finish: BigNumber;
        totalLocked: BigNumber;
        rewards1: BigNumber;
        rewards2: BigNumber;
        isSet: boolean;
      }
    >;

    exit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    getAccount(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        lockEpochs: BigNumber;
        lastEpochPaid: BigNumber;
        rewards1: BigNumber;
        rewards2: BigNumber;
      }
    >;

    getCurrentEpoch(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        start: BigNumber;
        finish: BigNumber;
        locked: BigNumber;
        rewards1: BigNumber;
        rewards2: BigNumber;
        isSet: boolean;
      }
    >;

    getEpoch(
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        start: BigNumber;
        finish: BigNumber;
        locked: BigNumber;
        rewards1: BigNumber;
        rewards2: BigNumber;
        isSet: boolean;
      }
    >;

    getEpochAccountInfo(
      owner: PromiseOrValue<string>,
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        balance: BigNumber;
        start: BigNumber;
        finish: BigNumber;
        locked: BigNumber;
        userRewards1: BigNumber;
        userRewards2: BigNumber;
        isSet: boolean;
      }
    >;

    getNextEpoch(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        start: BigNumber;
        finish: BigNumber;
        locked: BigNumber;
        rewards1: BigNumber;
        rewards2: BigNumber;
        isSet: boolean;
      }
    >;

    lockToken(overrides?: CallOverrides): Promise<[string]>;

    maxEpochs(overrides?: CallOverrides): Promise<[BigNumber]>;

    minEpochs(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextUnsetEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    recoverERC721(
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    rewardToken(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber] & {
        addr: string;
        rewards: BigNumber;
        rewardsPaid: BigNumber;
      }
    >;

    setNextEpoch(
      reward1: PromiseOrValue<BigNumberish>,
      reward2: PromiseOrValue<BigNumberish>,
      epochDurationInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setNextEpoch_start(
      reward1: PromiseOrValue<BigNumberish>,
      reward2: PromiseOrValue<BigNumberish>,
      epochDurationInDays: PromiseOrValue<BigNumberish>,
      epochStart: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    updateAccount(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    updateEpochs(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    whitelistRecoverERC20(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  accounts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      balance: BigNumber;
      lockEpochs: BigNumber;
      lastEpochPaid: BigNumber;
      rewards1: BigNumber;
      rewards2: BigNumber;
    }
  >;

  balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfInEpoch(
    owner: PromiseOrValue<string>,
    epochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  changeEnforceTime(
    flag: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeMaxEpochs(
    _maxEpochs: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeRecoverWhitelist(
    tokenAddress: PromiseOrValue<string>,
    flag: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    lockEpochs: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  enforceTime(overrides?: CallOverrides): Promise<boolean>;

  epochs(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      start: BigNumber;
      finish: BigNumber;
      totalLocked: BigNumber;
      rewards1: BigNumber;
      rewards2: BigNumber;
      isSet: boolean;
    }
  >;

  exit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  getAccount(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      balance: BigNumber;
      lockEpochs: BigNumber;
      lastEpochPaid: BigNumber;
      rewards1: BigNumber;
      rewards2: BigNumber;
    }
  >;

  getCurrentEpoch(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      start: BigNumber;
      finish: BigNumber;
      locked: BigNumber;
      rewards1: BigNumber;
      rewards2: BigNumber;
      isSet: boolean;
    }
  >;

  getEpoch(
    epochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      start: BigNumber;
      finish: BigNumber;
      locked: BigNumber;
      rewards1: BigNumber;
      rewards2: BigNumber;
      isSet: boolean;
    }
  >;

  getEpochAccountInfo(
    owner: PromiseOrValue<string>,
    epochId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      balance: BigNumber;
      start: BigNumber;
      finish: BigNumber;
      locked: BigNumber;
      userRewards1: BigNumber;
      userRewards2: BigNumber;
      isSet: boolean;
    }
  >;

  getNextEpoch(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      start: BigNumber;
      finish: BigNumber;
      locked: BigNumber;
      rewards1: BigNumber;
      rewards2: BigNumber;
      isSet: boolean;
    }
  >;

  lockToken(overrides?: CallOverrides): Promise<string>;

  maxEpochs(overrides?: CallOverrides): Promise<BigNumber>;

  minEpochs(overrides?: CallOverrides): Promise<BigNumber>;

  nextUnsetEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  recoverERC20(
    tokenAddress: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  recoverERC721(
    tokenAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  rewardToken(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, BigNumber] & {
      addr: string;
      rewards: BigNumber;
      rewardsPaid: BigNumber;
    }
  >;

  setNextEpoch(
    reward1: PromiseOrValue<BigNumberish>,
    reward2: PromiseOrValue<BigNumberish>,
    epochDurationInDays: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setNextEpoch_start(
    reward1: PromiseOrValue<BigNumberish>,
    reward2: PromiseOrValue<BigNumberish>,
    epochDurationInDays: PromiseOrValue<BigNumberish>,
    epochStart: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalLocked(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  updateAccount(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  updateEpochs(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  whitelistRecoverERC20(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    accounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        lockEpochs: BigNumber;
        lastEpochPaid: BigNumber;
        rewards1: BigNumber;
        rewards2: BigNumber;
      }
    >;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfInEpoch(
      owner: PromiseOrValue<string>,
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    changeEnforceTime(flag: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    changeMaxEpochs(_maxEpochs: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    changeRecoverWhitelist(
      tokenAddress: PromiseOrValue<string>,
      flag: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    claimReward(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      lockEpochs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    enforceTime(overrides?: CallOverrides): Promise<boolean>;

    epochs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        start: BigNumber;
        finish: BigNumber;
        totalLocked: BigNumber;
        rewards1: BigNumber;
        rewards2: BigNumber;
        isSet: boolean;
      }
    >;

    exit(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getAccount(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        lockEpochs: BigNumber;
        lastEpochPaid: BigNumber;
        rewards1: BigNumber;
        rewards2: BigNumber;
      }
    >;

    getCurrentEpoch(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        start: BigNumber;
        finish: BigNumber;
        locked: BigNumber;
        rewards1: BigNumber;
        rewards2: BigNumber;
        isSet: boolean;
      }
    >;

    getEpoch(
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        start: BigNumber;
        finish: BigNumber;
        locked: BigNumber;
        rewards1: BigNumber;
        rewards2: BigNumber;
        isSet: boolean;
      }
    >;

    getEpochAccountInfo(
      owner: PromiseOrValue<string>,
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        balance: BigNumber;
        start: BigNumber;
        finish: BigNumber;
        locked: BigNumber;
        userRewards1: BigNumber;
        userRewards2: BigNumber;
        isSet: boolean;
      }
    >;

    getNextEpoch(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        start: BigNumber;
        finish: BigNumber;
        locked: BigNumber;
        rewards1: BigNumber;
        rewards2: BigNumber;
        isSet: boolean;
      }
    >;

    lockToken(overrides?: CallOverrides): Promise<string>;

    maxEpochs(overrides?: CallOverrides): Promise<BigNumber>;

    minEpochs(overrides?: CallOverrides): Promise<BigNumber>;

    nextUnsetEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    recoverERC721(
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardToken(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber] & {
        addr: string;
        rewards: BigNumber;
        rewardsPaid: BigNumber;
      }
    >;

    setNextEpoch(
      reward1: PromiseOrValue<BigNumberish>,
      reward2: PromiseOrValue<BigNumberish>,
      epochDurationInDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setNextEpoch_start(
      reward1: PromiseOrValue<BigNumberish>,
      reward2: PromiseOrValue<BigNumberish>,
      epochDurationInDays: PromiseOrValue<BigNumberish>,
      epochStart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalLocked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateAccount(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        lockEpochs: BigNumber;
        lastEpochPaid: BigNumber;
        rewards1: BigNumber;
        rewards2: BigNumber;
      }
    >;

    updateEpochs(overrides?: CallOverrides): Promise<void>;

    whitelistRecoverERC20(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    withdraw(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'ChangeERC20Whiltelist(address,bool)'(token?: null, tokenState?: null): ChangeERC20WhiltelistEventFilter;
    ChangeERC20Whiltelist(token?: null, tokenState?: null): ChangeERC20WhiltelistEventFilter;

    'ChangeEnforceTime(uint256,bool)'(
      currentTime?: PromiseOrValue<BigNumberish> | null,
      flag?: null,
    ): ChangeEnforceTimeEventFilter;
    ChangeEnforceTime(currentTime?: PromiseOrValue<BigNumberish> | null, flag?: null): ChangeEnforceTimeEventFilter;

    'ChangeMaxLockEpochs(uint256,uint256,uint256)'(
      currentTime?: PromiseOrValue<BigNumberish> | null,
      oldEpochs?: null,
      newEpochs?: null,
    ): ChangeMaxLockEpochsEventFilter;
    ChangeMaxLockEpochs(
      currentTime?: PromiseOrValue<BigNumberish> | null,
      oldEpochs?: null,
      newEpochs?: null,
    ): ChangeMaxLockEpochsEventFilter;

    'Deposit(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      lockedEpochs?: null,
    ): DepositEventFilter;
    Deposit(user?: PromiseOrValue<string> | null, amount?: null, lockedEpochs?: null): DepositEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'RecoveredERC20(address,uint256)'(token?: null, amount?: null): RecoveredERC20EventFilter;
    RecoveredERC20(token?: null, amount?: null): RecoveredERC20EventFilter;

    'RecoveredERC721(address,uint256)'(token?: null, tokenId?: null): RecoveredERC721EventFilter;
    RecoveredERC721(token?: null, tokenId?: null): RecoveredERC721EventFilter;

    'Relock(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      totalBalance?: null,
      lockedEpochs?: null,
    ): RelockEventFilter;
    Relock(user?: PromiseOrValue<string> | null, totalBalance?: null, lockedEpochs?: null): RelockEventFilter;

    'RewardPaid(address,address,uint256)'(
      user?: PromiseOrValue<string> | null,
      token?: null,
      reward?: null,
    ): RewardPaidEventFilter;
    RewardPaid(user?: PromiseOrValue<string> | null, token?: null, reward?: null): RewardPaidEventFilter;

    'SetNextReward(uint256,uint256,uint256,uint256,uint256)'(
      epochId?: PromiseOrValue<BigNumberish> | null,
      reward1?: null,
      reward2?: null,
      start?: null,
      finish?: null,
    ): SetNextRewardEventFilter;
    SetNextReward(
      epochId?: PromiseOrValue<BigNumberish> | null,
      reward1?: null,
      reward2?: null,
      start?: null,
      finish?: null,
    ): SetNextRewardEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'UpdatedEpoch(uint256)'(currentId?: null): UpdatedEpochEventFilter;
    UpdatedEpoch(currentId?: null): UpdatedEpochEventFilter;

    'Withdrawn(address,uint256)'(user?: PromiseOrValue<string> | null, amount?: null): WithdrawnEventFilter;
    Withdrawn(user?: PromiseOrValue<string> | null, amount?: null): WithdrawnEventFilter;
  };

  estimateGas: {
    accounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfInEpoch(
      owner: PromiseOrValue<string>,
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    changeEnforceTime(
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeMaxEpochs(
      _maxEpochs: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeRecoverWhitelist(
      tokenAddress: PromiseOrValue<string>,
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      lockEpochs: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    enforceTime(overrides?: CallOverrides): Promise<BigNumber>;

    epochs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    exit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    getAccount(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getEpoch(epochId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getEpochAccountInfo(
      owner: PromiseOrValue<string>,
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getNextEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    lockToken(overrides?: CallOverrides): Promise<BigNumber>;

    maxEpochs(overrides?: CallOverrides): Promise<BigNumber>;

    minEpochs(overrides?: CallOverrides): Promise<BigNumber>;

    nextUnsetEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    recoverERC721(
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    rewardToken(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    setNextEpoch(
      reward1: PromiseOrValue<BigNumberish>,
      reward2: PromiseOrValue<BigNumberish>,
      epochDurationInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setNextEpoch_start(
      reward1: PromiseOrValue<BigNumberish>,
      reward2: PromiseOrValue<BigNumberish>,
      epochDurationInDays: PromiseOrValue<BigNumberish>,
      epochStart: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalLocked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    updateAccount(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    updateEpochs(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    whitelistRecoverERC20(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfInEpoch(
      owner: PromiseOrValue<string>,
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    changeEnforceTime(
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeMaxEpochs(
      _maxEpochs: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeRecoverWhitelist(
      tokenAddress: PromiseOrValue<string>,
      flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      lockEpochs: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    enforceTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    getAccount(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEpoch(epochId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEpochAccountInfo(
      owner: PromiseOrValue<string>,
      epochId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getNextEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxEpochs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minEpochs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextUnsetEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    recoverERC721(
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    rewardToken(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setNextEpoch(
      reward1: PromiseOrValue<BigNumberish>,
      reward2: PromiseOrValue<BigNumberish>,
      epochDurationInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setNextEpoch_start(
      reward1: PromiseOrValue<BigNumberish>,
      reward2: PromiseOrValue<BigNumberish>,
      epochDurationInDays: PromiseOrValue<BigNumberish>,
      epochStart: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    updateAccount(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    updateEpochs(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    whitelistRecoverERC20(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
