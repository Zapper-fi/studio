/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface Y2KFinanceVaultFactoryV1Interface extends utils.Interface {
  functions: {
    'WETH()': FunctionFragment;
    'changeController(uint256,address)': FunctionFragment;
    'changeOracle(address,address)': FunctionFragment;
    'changeTreasury(address,uint256)': FunctionFragment;
    'controller()': FunctionFragment;
    'createNewMarket(uint256,address,int256,uint256,uint256,address,string)': FunctionFragment;
    'deployMoreAssets(uint256,uint256,uint256,uint256)': FunctionFragment;
    'getVaults(uint256)': FunctionFragment;
    'indexEpochs(uint256,uint256)': FunctionFragment;
    'indexVaults(uint256,uint256)': FunctionFragment;
    'marketIndex()': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setController(address)': FunctionFragment;
    'timelocker()': FunctionFragment;
    'tokenToOracle(address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'treasury()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'WETH'
      | 'changeController'
      | 'changeOracle'
      | 'changeTreasury'
      | 'controller'
      | 'createNewMarket'
      | 'deployMoreAssets'
      | 'getVaults'
      | 'indexEpochs'
      | 'indexVaults'
      | 'marketIndex'
      | 'owner'
      | 'renounceOwnership'
      | 'setController'
      | 'timelocker'
      | 'tokenToOracle'
      | 'transferOwnership'
      | 'treasury',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'WETH', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'changeController',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'changeOracle',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'changeTreasury',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'controller', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'createNewMarket',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'deployMoreAssets',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'getVaults', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'indexEpochs',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'indexVaults',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'marketIndex', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setController', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'timelocker', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenToOracle', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'treasury', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'WETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeTreasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'controller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createNewMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deployMoreAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVaults', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'indexEpochs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'indexVaults', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timelocker', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenToOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result;

  events: {
    'EpochCreated(bytes32,uint256,uint256,uint256,address,address,address,string,int256,uint256)': EventFragment;
    'MarketCreated(uint256,address,address,address,string,int256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'changedController(uint256,address)': EventFragment;
    'changedOracle(address,address)': EventFragment;
    'changedTreasury(address,uint256)': EventFragment;
    'changedVaultFee(uint256,uint256)': EventFragment;
    'controllerSet(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'EpochCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'changedController'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'changedOracle'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'changedTreasury'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'changedVaultFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'controllerSet'): EventFragment;
}

export interface EpochCreatedEventObject {
  marketEpochId: string;
  mIndex: BigNumber;
  startEpoch: BigNumber;
  endEpoch: BigNumber;
  hedge: string;
  risk: string;
  token: string;
  name: string;
  strikePrice: BigNumber;
  withdrawalFee: BigNumber;
}
export type EpochCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string, string, string, string, BigNumber, BigNumber],
  EpochCreatedEventObject
>;

export type EpochCreatedEventFilter = TypedEventFilter<EpochCreatedEvent>;

export interface MarketCreatedEventObject {
  mIndex: BigNumber;
  hedge: string;
  risk: string;
  token: string;
  name: string;
  strikePrice: BigNumber;
}
export type MarketCreatedEvent = TypedEvent<
  [BigNumber, string, string, string, string, BigNumber],
  MarketCreatedEventObject
>;

export type MarketCreatedEventFilter = TypedEventFilter<MarketCreatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface changedControllerEventObject {
  _marketIndex: BigNumber;
  controller: string;
}
export type changedControllerEvent = TypedEvent<[BigNumber, string], changedControllerEventObject>;

export type changedControllerEventFilter = TypedEventFilter<changedControllerEvent>;

export interface changedOracleEventObject {
  _token: string;
  _oracle: string;
}
export type changedOracleEvent = TypedEvent<[string, string], changedOracleEventObject>;

export type changedOracleEventFilter = TypedEventFilter<changedOracleEvent>;

export interface changedTreasuryEventObject {
  _treasury: string;
  _marketIndex: BigNumber;
}
export type changedTreasuryEvent = TypedEvent<[string, BigNumber], changedTreasuryEventObject>;

export type changedTreasuryEventFilter = TypedEventFilter<changedTreasuryEvent>;

export interface changedVaultFeeEventObject {
  _marketIndex: BigNumber;
  _feeRate: BigNumber;
}
export type changedVaultFeeEvent = TypedEvent<[BigNumber, BigNumber], changedVaultFeeEventObject>;

export type changedVaultFeeEventFilter = TypedEventFilter<changedVaultFeeEvent>;

export interface controllerSetEventObject {
  newController: string;
}
export type controllerSetEvent = TypedEvent<[string], controllerSetEventObject>;

export type controllerSetEventFilter = TypedEventFilter<controllerSetEvent>;

export interface Y2KFinanceVaultFactoryV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Y2KFinanceVaultFactoryV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>;

    changeController(
      _marketIndex: PromiseOrValue<BigNumberish>,
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeOracle(
      _token: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeTreasury(
      _treasury: PromiseOrValue<string>,
      _marketIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    createNewMarket(
      _withdrawalFee: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _strikePrice: PromiseOrValue<BigNumberish>,
      epochBegin: PromiseOrValue<BigNumberish>,
      epochEnd: PromiseOrValue<BigNumberish>,
      _oracle: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deployMoreAssets(
      index: PromiseOrValue<BigNumberish>,
      epochBegin: PromiseOrValue<BigNumberish>,
      epochEnd: PromiseOrValue<BigNumberish>,
      _withdrawalFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getVaults(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string[]] & { vaults: string[] }>;

    indexEpochs(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    indexVaults(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    marketIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    timelocker(overrides?: CallOverrides): Promise<[string]>;

    tokenToOracle(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  changeController(
    _marketIndex: PromiseOrValue<BigNumberish>,
    _controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeOracle(
    _token: PromiseOrValue<string>,
    _oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeTreasury(
    _treasury: PromiseOrValue<string>,
    _marketIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  createNewMarket(
    _withdrawalFee: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    _strikePrice: PromiseOrValue<BigNumberish>,
    epochBegin: PromiseOrValue<BigNumberish>,
    epochEnd: PromiseOrValue<BigNumberish>,
    _oracle: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deployMoreAssets(
    index: PromiseOrValue<BigNumberish>,
    epochBegin: PromiseOrValue<BigNumberish>,
    epochEnd: PromiseOrValue<BigNumberish>,
    _withdrawalFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getVaults(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string[]>;

  indexEpochs(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  indexVaults(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  marketIndex(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setController(
    _controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  timelocker(overrides?: CallOverrides): Promise<string>;

  tokenToOracle(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    changeController(
      _marketIndex: PromiseOrValue<BigNumberish>,
      _controller: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    changeOracle(
      _token: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    changeTreasury(
      _treasury: PromiseOrValue<string>,
      _marketIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    createNewMarket(
      _withdrawalFee: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _strikePrice: PromiseOrValue<BigNumberish>,
      epochBegin: PromiseOrValue<BigNumberish>,
      epochEnd: PromiseOrValue<BigNumberish>,
      _oracle: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string, string] & { insr: string; rsk: string }>;

    deployMoreAssets(
      index: PromiseOrValue<BigNumberish>,
      epochBegin: PromiseOrValue<BigNumberish>,
      epochEnd: PromiseOrValue<BigNumberish>,
      _withdrawalFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getVaults(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string[]>;

    indexEpochs(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    indexVaults(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    marketIndex(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setController(_controller: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    timelocker(overrides?: CallOverrides): Promise<string>;

    tokenToOracle(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'EpochCreated(bytes32,uint256,uint256,uint256,address,address,address,string,int256,uint256)'(
      marketEpochId?: PromiseOrValue<BytesLike> | null,
      mIndex?: PromiseOrValue<BigNumberish> | null,
      startEpoch?: null,
      endEpoch?: null,
      hedge?: null,
      risk?: null,
      token?: null,
      name?: null,
      strikePrice?: null,
      withdrawalFee?: null,
    ): EpochCreatedEventFilter;
    EpochCreated(
      marketEpochId?: PromiseOrValue<BytesLike> | null,
      mIndex?: PromiseOrValue<BigNumberish> | null,
      startEpoch?: null,
      endEpoch?: null,
      hedge?: null,
      risk?: null,
      token?: null,
      name?: null,
      strikePrice?: null,
      withdrawalFee?: null,
    ): EpochCreatedEventFilter;

    'MarketCreated(uint256,address,address,address,string,int256)'(
      mIndex?: PromiseOrValue<BigNumberish> | null,
      hedge?: null,
      risk?: null,
      token?: null,
      name?: null,
      strikePrice?: null,
    ): MarketCreatedEventFilter;
    MarketCreated(
      mIndex?: PromiseOrValue<BigNumberish> | null,
      hedge?: null,
      risk?: null,
      token?: null,
      name?: null,
      strikePrice?: null,
    ): MarketCreatedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'changedController(uint256,address)'(
      _marketIndex?: PromiseOrValue<BigNumberish> | null,
      controller?: PromiseOrValue<string> | null,
    ): changedControllerEventFilter;
    changedController(
      _marketIndex?: PromiseOrValue<BigNumberish> | null,
      controller?: PromiseOrValue<string> | null,
    ): changedControllerEventFilter;

    'changedOracle(address,address)'(_token?: PromiseOrValue<string> | null, _oracle?: null): changedOracleEventFilter;
    changedOracle(_token?: PromiseOrValue<string> | null, _oracle?: null): changedOracleEventFilter;

    'changedTreasury(address,uint256)'(
      _treasury?: null,
      _marketIndex?: PromiseOrValue<BigNumberish> | null,
    ): changedTreasuryEventFilter;
    changedTreasury(_treasury?: null, _marketIndex?: PromiseOrValue<BigNumberish> | null): changedTreasuryEventFilter;

    'changedVaultFee(uint256,uint256)'(
      _marketIndex?: PromiseOrValue<BigNumberish> | null,
      _feeRate?: null,
    ): changedVaultFeeEventFilter;
    changedVaultFee(_marketIndex?: PromiseOrValue<BigNumberish> | null, _feeRate?: null): changedVaultFeeEventFilter;

    'controllerSet(address)'(newController?: PromiseOrValue<string> | null): controllerSetEventFilter;
    controllerSet(newController?: PromiseOrValue<string> | null): controllerSetEventFilter;
  };

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    changeController(
      _marketIndex: PromiseOrValue<BigNumberish>,
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeOracle(
      _token: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeTreasury(
      _treasury: PromiseOrValue<string>,
      _marketIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    createNewMarket(
      _withdrawalFee: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _strikePrice: PromiseOrValue<BigNumberish>,
      epochBegin: PromiseOrValue<BigNumberish>,
      epochEnd: PromiseOrValue<BigNumberish>,
      _oracle: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deployMoreAssets(
      index: PromiseOrValue<BigNumberish>,
      epochBegin: PromiseOrValue<BigNumberish>,
      epochEnd: PromiseOrValue<BigNumberish>,
      _withdrawalFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getVaults(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    indexEpochs(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    indexVaults(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    marketIndex(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    timelocker(overrides?: CallOverrides): Promise<BigNumber>;

    tokenToOracle(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeController(
      _marketIndex: PromiseOrValue<BigNumberish>,
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeOracle(
      _token: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeTreasury(
      _treasury: PromiseOrValue<string>,
      _marketIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createNewMarket(
      _withdrawalFee: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _strikePrice: PromiseOrValue<BigNumberish>,
      epochBegin: PromiseOrValue<BigNumberish>,
      epochEnd: PromiseOrValue<BigNumberish>,
      _oracle: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deployMoreAssets(
      index: PromiseOrValue<BigNumberish>,
      epochBegin: PromiseOrValue<BigNumberish>,
      epochEnd: PromiseOrValue<BigNumberish>,
      _withdrawalFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getVaults(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    indexEpochs(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    indexVaults(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    marketIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    timelocker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenToOracle(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
