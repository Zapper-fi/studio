/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface UmamiCompoundInterface extends utils.Interface {
  functions: {
    'ADMIN_FEE_BIPS()': FunctionFragment;
    'ADMIN_ROLE()': FunctionFragment;
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'MIN_TOKENS_TO_REINVEST()': FunctionFragment;
    'REINVEST_REWARD_BIPS()': FunctionFragment;
    'addRewardToken(address,bytes)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'checkReward()': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'depositToken()': FunctionFragment;
    'feeDestination()': FunctionFragment;
    'getDepositTokensForShares(uint256)': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'getSharesForDepositTokens(uint256)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'isRewardToken(address)': FunctionFragment;
    'marinateContract()': FunctionFragment;
    'migrateToken(address,address,uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'recoverETH(uint256)': FunctionFragment;
    'reinvest()': FunctionFragment;
    'removeRewardToken(address)': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeAllowance(address,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'rewardTokens(uint256)': FunctionFragment;
    'rewardTokensLength()': FunctionFragment;
    'router()': FunctionFragment;
    'routes(uint256)': FunctionFragment;
    'setAllowances()': FunctionFragment;
    'setFeeDestination(address)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalDeposits()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'updateAdminFee(uint256)': FunctionFragment;
    'updateMinTokensToReinvest(uint256)': FunctionFragment;
    'updateReinvestReward(uint256)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'ADMIN_FEE_BIPS'
      | 'ADMIN_ROLE'
      | 'DEFAULT_ADMIN_ROLE'
      | 'MIN_TOKENS_TO_REINVEST'
      | 'REINVEST_REWARD_BIPS'
      | 'addRewardToken'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'checkReward'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit'
      | 'depositToken'
      | 'feeDestination'
      | 'getDepositTokensForShares'
      | 'getRoleAdmin'
      | 'getSharesForDepositTokens'
      | 'grantRole'
      | 'hasRole'
      | 'increaseAllowance'
      | 'isRewardToken'
      | 'marinateContract'
      | 'migrateToken'
      | 'name'
      | 'recoverETH'
      | 'reinvest'
      | 'removeRewardToken'
      | 'renounceRole'
      | 'revokeAllowance'
      | 'revokeRole'
      | 'rewardTokens'
      | 'rewardTokensLength'
      | 'router'
      | 'routes'
      | 'setAllowances'
      | 'setFeeDestination'
      | 'supportsInterface'
      | 'symbol'
      | 'totalDeposits'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'updateAdminFee'
      | 'updateMinTokensToReinvest'
      | 'updateReinvestReward'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'ADMIN_FEE_BIPS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MIN_TOKENS_TO_REINVEST', values?: undefined): string;
  encodeFunctionData(functionFragment: 'REINVEST_REWARD_BIPS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addRewardToken', values: [string, BytesLike]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'checkReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'depositToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feeDestination', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getDepositTokensForShares', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'getSharesForDepositTokens', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'isRewardToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'marinateContract', values?: undefined): string;
  encodeFunctionData(functionFragment: 'migrateToken', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'recoverETH', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'reinvest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'removeRewardToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'revokeAllowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'rewardTokens', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'rewardTokensLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'router', values?: undefined): string;
  encodeFunctionData(functionFragment: 'routes', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setAllowances', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setFeeDestination', values: [string]): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalDeposits', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateAdminFee', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateMinTokensToReinvest', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateReinvestReward', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'ADMIN_FEE_BIPS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MIN_TOKENS_TO_REINVEST', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'REINVEST_REWARD_BIPS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addRewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeDestination', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDepositTokensForShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSharesForDepositTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isRewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marinateContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migrateToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recoverETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reinvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeRewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokensLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'router', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'routes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAllowances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeDestination', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalDeposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateAdminFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMinTokensToReinvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateReinvestReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Claim(address,uint256)': EventFragment;
    'Deposit(address,uint256)': EventFragment;
    'Recovered(address,uint256)': EventFragment;
    'Reinvest(uint256,uint256)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'UpdateAdminFee(uint256,uint256)': EventFragment;
    'UpdateMinTokensToReinvest(uint256,uint256)': EventFragment;
    'UpdateMinTokensToReinvestBeforeDeposit(uint256,uint256)': EventFragment;
    'UpdateReinvestReward(uint256,uint256)': EventFragment;
    'UpdateRequireReinvestBeforeDeposit(bool)': EventFragment;
    'UpdateWithdrawFee(uint256,uint256)': EventFragment;
    'Withdraw(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Claim'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Recovered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Reinvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateAdminFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateMinTokensToReinvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateMinTokensToReinvestBeforeDeposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateReinvestReward'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateRequireReinvestBeforeDeposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateWithdrawFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ClaimEventObject {
  account: string;
  amount: BigNumber;
}
export type ClaimEvent = TypedEvent<[string, BigNumber], ClaimEventObject>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface DepositEventObject {
  account: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface RecoveredEventObject {
  token: string;
  amount: BigNumber;
}
export type RecoveredEvent = TypedEvent<[string, BigNumber], RecoveredEventObject>;

export type RecoveredEventFilter = TypedEventFilter<RecoveredEvent>;

export interface ReinvestEventObject {
  newTotalDeposits: BigNumber;
  newTotalSupply: BigNumber;
}
export type ReinvestEvent = TypedEvent<[BigNumber, BigNumber], ReinvestEventObject>;

export type ReinvestEventFilter = TypedEventFilter<ReinvestEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UpdateAdminFeeEventObject {
  oldValue: BigNumber;
  newValue: BigNumber;
}
export type UpdateAdminFeeEvent = TypedEvent<[BigNumber, BigNumber], UpdateAdminFeeEventObject>;

export type UpdateAdminFeeEventFilter = TypedEventFilter<UpdateAdminFeeEvent>;

export interface UpdateMinTokensToReinvestEventObject {
  oldValue: BigNumber;
  newValue: BigNumber;
}
export type UpdateMinTokensToReinvestEvent = TypedEvent<[BigNumber, BigNumber], UpdateMinTokensToReinvestEventObject>;

export type UpdateMinTokensToReinvestEventFilter = TypedEventFilter<UpdateMinTokensToReinvestEvent>;

export interface UpdateMinTokensToReinvestBeforeDepositEventObject {
  oldValue: BigNumber;
  newValue: BigNumber;
}
export type UpdateMinTokensToReinvestBeforeDepositEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdateMinTokensToReinvestBeforeDepositEventObject
>;

export type UpdateMinTokensToReinvestBeforeDepositEventFilter =
  TypedEventFilter<UpdateMinTokensToReinvestBeforeDepositEvent>;

export interface UpdateReinvestRewardEventObject {
  oldValue: BigNumber;
  newValue: BigNumber;
}
export type UpdateReinvestRewardEvent = TypedEvent<[BigNumber, BigNumber], UpdateReinvestRewardEventObject>;

export type UpdateReinvestRewardEventFilter = TypedEventFilter<UpdateReinvestRewardEvent>;

export interface UpdateRequireReinvestBeforeDepositEventObject {
  newValue: boolean;
}
export type UpdateRequireReinvestBeforeDepositEvent = TypedEvent<
  [boolean],
  UpdateRequireReinvestBeforeDepositEventObject
>;

export type UpdateRequireReinvestBeforeDepositEventFilter = TypedEventFilter<UpdateRequireReinvestBeforeDepositEvent>;

export interface UpdateWithdrawFeeEventObject {
  oldValue: BigNumber;
  newValue: BigNumber;
}
export type UpdateWithdrawFeeEvent = TypedEvent<[BigNumber, BigNumber], UpdateWithdrawFeeEventObject>;

export type UpdateWithdrawFeeEventFilter = TypedEventFilter<UpdateWithdrawFeeEvent>;

export interface WithdrawEventObject {
  account: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface UmamiCompound extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UmamiCompoundInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_FEE_BIPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MIN_TOKENS_TO_REINVEST(overrides?: CallOverrides): Promise<[BigNumber]>;

    REINVEST_REWARD_BIPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addRewardToken(
      rewardToken: string,
      swapRoute: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    checkReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositToken(overrides?: CallOverrides): Promise<[string]>;

    feeDestination(overrides?: CallOverrides): Promise<[string]>;

    getDepositTokensForShares(amount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getSharesForDepositTokens(amount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isRewardToken(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    marinateContract(overrides?: CallOverrides): Promise<[string]>;

    migrateToken(
      token: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    recoverETH(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    reinvest(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    removeRewardToken(
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeAllowance(
      token: string,
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    rewardTokensLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    routes(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    setAllowances(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setFeeDestination(
      newDestination: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateAdminFee(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateMinTokensToReinvest(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateReinvestReward(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  ADMIN_FEE_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MIN_TOKENS_TO_REINVEST(overrides?: CallOverrides): Promise<BigNumber>;

  REINVEST_REWARD_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

  addRewardToken(
    rewardToken: string,
    swapRoute: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  checkReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositToken(overrides?: CallOverrides): Promise<string>;

  feeDestination(overrides?: CallOverrides): Promise<string>;

  getDepositTokensForShares(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getSharesForDepositTokens(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isRewardToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  marinateContract(overrides?: CallOverrides): Promise<string>;

  migrateToken(
    token: string,
    destination: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  recoverETH(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  reinvest(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  removeRewardToken(
    rewardToken: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeAllowance(
    token: string,
    spender: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  rewardTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

  router(overrides?: CallOverrides): Promise<string>;

  routes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  setAllowances(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setFeeDestination(
    newDestination: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateAdminFee(
    newValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateMinTokensToReinvest(
    newValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateReinvestReward(
    newValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN_FEE_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MIN_TOKENS_TO_REINVEST(overrides?: CallOverrides): Promise<BigNumber>;

    REINVEST_REWARD_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

    addRewardToken(rewardToken: string, swapRoute: BytesLike, overrides?: CallOverrides): Promise<void>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    checkReward(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositToken(overrides?: CallOverrides): Promise<string>;

    feeDestination(overrides?: CallOverrides): Promise<string>;

    getDepositTokensForShares(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getSharesForDepositTokens(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    isRewardToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    marinateContract(overrides?: CallOverrides): Promise<string>;

    migrateToken(token: string, destination: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    recoverETH(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    reinvest(overrides?: CallOverrides): Promise<void>;

    removeRewardToken(rewardToken: string, overrides?: CallOverrides): Promise<void>;

    renounceRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    revokeAllowance(token: string, spender: string, overrides?: CallOverrides): Promise<void>;

    revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    rewardTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<string>;

    routes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    setAllowances(overrides?: CallOverrides): Promise<void>;

    setFeeDestination(newDestination: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(from: string, to: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    updateAdminFee(newValue: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateMinTokensToReinvest(newValue: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateReinvestReward(newValue: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;

    'Claim(address,uint256)'(account?: string | null, amount?: null): ClaimEventFilter;
    Claim(account?: string | null, amount?: null): ClaimEventFilter;

    'Deposit(address,uint256)'(account?: string | null, amount?: null): DepositEventFilter;
    Deposit(account?: string | null, amount?: null): DepositEventFilter;

    'Recovered(address,uint256)'(token?: null, amount?: null): RecoveredEventFilter;
    Recovered(token?: null, amount?: null): RecoveredEventFilter;

    'Reinvest(uint256,uint256)'(newTotalDeposits?: null, newTotalSupply?: null): ReinvestEventFilter;
    Reinvest(newTotalDeposits?: null, newTotalSupply?: null): ReinvestEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter;
    RoleGranted(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleRevokedEventFilter;

    'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;

    'UpdateAdminFee(uint256,uint256)'(oldValue?: null, newValue?: null): UpdateAdminFeeEventFilter;
    UpdateAdminFee(oldValue?: null, newValue?: null): UpdateAdminFeeEventFilter;

    'UpdateMinTokensToReinvest(uint256,uint256)'(
      oldValue?: null,
      newValue?: null,
    ): UpdateMinTokensToReinvestEventFilter;
    UpdateMinTokensToReinvest(oldValue?: null, newValue?: null): UpdateMinTokensToReinvestEventFilter;

    'UpdateMinTokensToReinvestBeforeDeposit(uint256,uint256)'(
      oldValue?: null,
      newValue?: null,
    ): UpdateMinTokensToReinvestBeforeDepositEventFilter;
    UpdateMinTokensToReinvestBeforeDeposit(
      oldValue?: null,
      newValue?: null,
    ): UpdateMinTokensToReinvestBeforeDepositEventFilter;

    'UpdateReinvestReward(uint256,uint256)'(oldValue?: null, newValue?: null): UpdateReinvestRewardEventFilter;
    UpdateReinvestReward(oldValue?: null, newValue?: null): UpdateReinvestRewardEventFilter;

    'UpdateRequireReinvestBeforeDeposit(bool)'(newValue?: null): UpdateRequireReinvestBeforeDepositEventFilter;
    UpdateRequireReinvestBeforeDeposit(newValue?: null): UpdateRequireReinvestBeforeDepositEventFilter;

    'UpdateWithdrawFee(uint256,uint256)'(oldValue?: null, newValue?: null): UpdateWithdrawFeeEventFilter;
    UpdateWithdrawFee(oldValue?: null, newValue?: null): UpdateWithdrawFeeEventFilter;

    'Withdraw(address,uint256)'(account?: string | null, amount?: null): WithdrawEventFilter;
    Withdraw(account?: string | null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    ADMIN_FEE_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_TOKENS_TO_REINVEST(overrides?: CallOverrides): Promise<BigNumber>;

    REINVEST_REWARD_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

    addRewardToken(
      rewardToken: string,
      swapRoute: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    checkReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    deposit(amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    depositToken(overrides?: CallOverrides): Promise<BigNumber>;

    feeDestination(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositTokensForShares(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getSharesForDepositTokens(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isRewardToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    marinateContract(overrides?: CallOverrides): Promise<BigNumber>;

    migrateToken(
      token: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    recoverETH(amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    reinvest(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    removeRewardToken(
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeAllowance(
      token: string,
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    routes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setAllowances(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setFeeDestination(
      newDestination: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateAdminFee(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateMinTokensToReinvest(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateReinvestReward(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_FEE_BIPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_TOKENS_TO_REINVEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REINVEST_REWARD_BIPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRewardToken(
      rewardToken: string,
      swapRoute: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeDestination(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepositTokensForShares(amount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSharesForDepositTokens(amount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isRewardToken(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marinateContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateToken(
      token: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverETH(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    reinvest(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    removeRewardToken(
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeAllowance(
      token: string,
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokensLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    routes(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAllowances(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setFeeDestination(
      newDestination: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateAdminFee(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateMinTokensToReinvest(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateReinvestReward(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
