/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface UmamiMarinateInterface extends utils.Interface {
  functions: {
    'ADMIN_ROLE()': FunctionFragment;
    'BASE()': FunctionFragment;
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'SCALE()': FunctionFragment;
    'UMAMI()': FunctionFragment;
    'addApprovedMultiplierToken(address,uint256)': FunctionFragment;
    'addApprovedRewardToken(address)': FunctionFragment;
    'addReward(address,uint256)': FunctionFragment;
    'addToContractWhitelist(address)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'claimRewards()': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'depositLimit()': FunctionFragment;
    'getAvailableTokenRewards(address,address)': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'isApprovedMultiplierNFT(address)': FunctionFragment;
    'isApprovedRewardToken(address)': FunctionFragment;
    'isContract(address)': FunctionFragment;
    'isNFTStaked(address,address)': FunctionFragment;
    'isWhitelisted(address)': FunctionFragment;
    'marinatorInfo(address)': FunctionFragment;
    'migrateToken(address,address,uint256)': FunctionFragment;
    'multiplierNFTs(uint256)': FunctionFragment;
    'multiplierStakingEnabled()': FunctionFragment;
    'multiplierWithdrawEnabled()': FunctionFragment;
    'name()': FunctionFragment;
    'nftMultiplier(address)': FunctionFragment;
    'onERC721Received(address,address,uint256,bytes)': FunctionFragment;
    'owner()': FunctionFragment;
    'paidTokenRewardsPerStake(address,address)': FunctionFragment;
    'payRewardsEnabled()': FunctionFragment;
    'recoverEth()': FunctionFragment;
    'removeApprovedMultiplierToken(address)': FunctionFragment;
    'removeApprovedRewardToken(address)': FunctionFragment;
    'removeFromContractWhitelist(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'rewardTokens(uint256)': FunctionFragment;
    'setDepositLimit(uint256)': FunctionFragment;
    'setMultiplierStakeEnabled(bool)': FunctionFragment;
    'setMultiplierWithdrawEnabled(bool)': FunctionFragment;
    'setPayRewardsEnabled(bool)': FunctionFragment;
    'setScale(uint256)': FunctionFragment;
    'setStakeEnabled(bool)': FunctionFragment;
    'setStakingWithdrawEnabled(bool)': FunctionFragment;
    'setTransferEnabled(bool)': FunctionFragment;
    'stake(uint256)': FunctionFragment;
    'stakeEnabled()': FunctionFragment;
    'stakeMultiplier(address,uint256)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'symbol()': FunctionFragment;
    'toBePaid(address,address)': FunctionFragment;
    'totalMultipliedStaked()': FunctionFragment;
    'totalStaked()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'totalTokenRewardsPerStake(address)': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferEnabled()': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'whitelistedContracts(address)': FunctionFragment;
    'withdraw()': FunctionFragment;
    'withdrawEnabled()': FunctionFragment;
    'withdrawMultiplier(address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'ADMIN_ROLE'
      | 'BASE'
      | 'DEFAULT_ADMIN_ROLE'
      | 'SCALE'
      | 'UMAMI'
      | 'addApprovedMultiplierToken'
      | 'addApprovedRewardToken'
      | 'addReward'
      | 'addToContractWhitelist'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'claimRewards'
      | 'decimals'
      | 'decreaseAllowance'
      | 'depositLimit'
      | 'getAvailableTokenRewards'
      | 'getRoleAdmin'
      | 'grantRole'
      | 'hasRole'
      | 'increaseAllowance'
      | 'isApprovedMultiplierNFT'
      | 'isApprovedRewardToken'
      | 'isContract'
      | 'isNFTStaked'
      | 'isWhitelisted'
      | 'marinatorInfo'
      | 'migrateToken'
      | 'multiplierNFTs'
      | 'multiplierStakingEnabled'
      | 'multiplierWithdrawEnabled'
      | 'name'
      | 'nftMultiplier'
      | 'onERC721Received'
      | 'owner'
      | 'paidTokenRewardsPerStake'
      | 'payRewardsEnabled'
      | 'recoverEth'
      | 'removeApprovedMultiplierToken'
      | 'removeApprovedRewardToken'
      | 'removeFromContractWhitelist'
      | 'renounceOwnership'
      | 'renounceRole'
      | 'revokeRole'
      | 'rewardTokens'
      | 'setDepositLimit'
      | 'setMultiplierStakeEnabled'
      | 'setMultiplierWithdrawEnabled'
      | 'setPayRewardsEnabled'
      | 'setScale'
      | 'setStakeEnabled'
      | 'setStakingWithdrawEnabled'
      | 'setTransferEnabled'
      | 'stake'
      | 'stakeEnabled'
      | 'stakeMultiplier'
      | 'supportsInterface'
      | 'symbol'
      | 'toBePaid'
      | 'totalMultipliedStaked'
      | 'totalStaked'
      | 'totalSupply'
      | 'totalTokenRewardsPerStake'
      | 'transfer'
      | 'transferEnabled'
      | 'transferFrom'
      | 'transferOwnership'
      | 'whitelistedContracts'
      | 'withdraw'
      | 'withdrawEnabled'
      | 'withdrawMultiplier',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'BASE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SCALE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'UMAMI', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addApprovedMultiplierToken', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'addApprovedRewardToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'addReward', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'addToContractWhitelist', values: [string]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'claimRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'depositLimit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAvailableTokenRewards', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'isApprovedMultiplierNFT', values: [string]): string;
  encodeFunctionData(functionFragment: 'isApprovedRewardToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'isContract', values: [string]): string;
  encodeFunctionData(functionFragment: 'isNFTStaked', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'isWhitelisted', values: [string]): string;
  encodeFunctionData(functionFragment: 'marinatorInfo', values: [string]): string;
  encodeFunctionData(functionFragment: 'migrateToken', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'multiplierNFTs', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'multiplierStakingEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'multiplierWithdrawEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nftMultiplier', values: [string]): string;
  encodeFunctionData(functionFragment: 'onERC721Received', values: [string, string, BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paidTokenRewardsPerStake', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'payRewardsEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'recoverEth', values?: undefined): string;
  encodeFunctionData(functionFragment: 'removeApprovedMultiplierToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'removeApprovedRewardToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'removeFromContractWhitelist', values: [string]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'rewardTokens', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setDepositLimit', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setMultiplierStakeEnabled', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'setMultiplierWithdrawEnabled', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'setPayRewardsEnabled', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'setScale', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setStakeEnabled', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'setStakingWithdrawEnabled', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'setTransferEnabled', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'stake', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'stakeEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stakeMultiplier', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'toBePaid', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'totalMultipliedStaked', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalStaked', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalTokenRewardsPerStake', values: [string]): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'whitelistedContracts', values: [string]): string;
  encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawMultiplier', values: [string, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'BASE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SCALE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'UMAMI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addApprovedMultiplierToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addApprovedRewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addToContractWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAvailableTokenRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedMultiplierNFT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedRewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isNFTStaked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isWhitelisted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marinatorInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migrateToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'multiplierNFTs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'multiplierStakingEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'multiplierWithdrawEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nftMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onERC721Received', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paidTokenRewardsPerStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'payRewardsEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recoverEth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeApprovedMultiplierToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeApprovedRewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeFromContractWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDepositLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMultiplierStakeEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMultiplierWithdrawEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPayRewardsEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setScale', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setStakeEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setStakingWithdrawEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTransferEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'toBePaid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalMultipliedStaked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalStaked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalTokenRewardsPerStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistedContracts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawMultiplier', data: BytesLike): Result;

  events: {
    'AddToContractWhitelist(address)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'RemoveFromContractWhitelist(address)': EventFragment;
    'RewardAdded(address,uint256,uint256)': EventFragment;
    'RewardClaimed(address,address,uint256)': EventFragment;
    'RewardCollection(address,address,uint256)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'Stake(address,uint256,uint256)': EventFragment;
    'StakeMultiplier(address,address,uint256,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Withdraw(address,uint256)': EventFragment;
    'WithdrawMultiplier(address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddToContractWhitelist'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RemoveFromContractWhitelist'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardClaimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardCollection'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Stake'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StakeMultiplier'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawMultiplier'): EventFragment;
}

export interface AddToContractWhitelistEventObject {
  _contract: string;
}
export type AddToContractWhitelistEvent = TypedEvent<[string], AddToContractWhitelistEventObject>;

export type AddToContractWhitelistEventFilter = TypedEventFilter<AddToContractWhitelistEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RemoveFromContractWhitelistEventObject {
  _contract: string;
}
export type RemoveFromContractWhitelistEvent = TypedEvent<[string], RemoveFromContractWhitelistEventObject>;

export type RemoveFromContractWhitelistEventFilter = TypedEventFilter<RemoveFromContractWhitelistEvent>;

export interface RewardAddedEventObject {
  token: string;
  amount: BigNumber;
  rps: BigNumber;
}
export type RewardAddedEvent = TypedEvent<[string, BigNumber, BigNumber], RewardAddedEventObject>;

export type RewardAddedEventFilter = TypedEventFilter<RewardAddedEvent>;

export interface RewardClaimedEventObject {
  token: string;
  staker: string;
  amount: BigNumber;
}
export type RewardClaimedEvent = TypedEvent<[string, string, BigNumber], RewardClaimedEventObject>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export interface RewardCollectionEventObject {
  token: string;
  addr: string;
  amount: BigNumber;
}
export type RewardCollectionEvent = TypedEvent<[string, string, BigNumber], RewardCollectionEventObject>;

export type RewardCollectionEventFilter = TypedEventFilter<RewardCollectionEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface StakeEventObject {
  addr: string;
  amount: BigNumber;
  multipliedAmount: BigNumber;
}
export type StakeEvent = TypedEvent<[string, BigNumber, BigNumber], StakeEventObject>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface StakeMultiplierEventObject {
  addr: string;
  nft: string;
  tokenId: BigNumber;
  multipliedAmount: BigNumber;
}
export type StakeMultiplierEvent = TypedEvent<[string, string, BigNumber, BigNumber], StakeMultiplierEventObject>;

export type StakeMultiplierEventFilter = TypedEventFilter<StakeMultiplierEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawEventObject {
  addr: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawMultiplierEventObject {
  addr: string;
  nft: string;
  tokenId: BigNumber;
  multipliedAmount: BigNumber;
}
export type WithdrawMultiplierEvent = TypedEvent<[string, string, BigNumber, BigNumber], WithdrawMultiplierEventObject>;

export type WithdrawMultiplierEventFilter = TypedEventFilter<WithdrawMultiplierEvent>;

export interface UmamiMarinate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UmamiMarinateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SCALE(overrides?: CallOverrides): Promise<[BigNumber]>;

    UMAMI(overrides?: CallOverrides): Promise<[string]>;

    addApprovedMultiplierToken(
      token: string,
      multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addApprovedRewardToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addReward(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addToContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    claimRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAvailableTokenRewards(
      staker: string,
      token: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { totalRewards: BigNumber }>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isApprovedMultiplierNFT(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isApprovedRewardToken(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isContract(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isNFTStaked(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[boolean]>;

    isWhitelisted(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    marinatorInfo(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        amount: BigNumber;
        multipliedAmount: BigNumber;
      }
    >;

    migrateToken(
      token: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    multiplierNFTs(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    multiplierStakingEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    multiplierWithdrawEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nftMultiplier(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paidTokenRewardsPerStake(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    payRewardsEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    recoverEth(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    removeApprovedMultiplierToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    removeApprovedRewardToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    removeFromContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    setDepositLimit(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMultiplierStakeEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMultiplierWithdrawEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPayRewardsEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setScale(
      _scale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setStakeEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setStakingWithdrawEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTransferEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    stakeEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    stakeMultiplier(
      nft: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    toBePaid(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalMultipliedStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalTokenRewardsPerStake(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    whitelistedContracts(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    withdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    withdrawEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    withdrawMultiplier(
      nft: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  BASE(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  SCALE(overrides?: CallOverrides): Promise<BigNumber>;

  UMAMI(overrides?: CallOverrides): Promise<string>;

  addApprovedMultiplierToken(
    token: string,
    multiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  addApprovedRewardToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  addReward(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  addToContractWhitelist(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  claimRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

  getAvailableTokenRewards(staker: string, token: string, overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isApprovedMultiplierNFT(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isApprovedRewardToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isContract(addr: string, overrides?: CallOverrides): Promise<boolean>;

  isNFTStaked(arg0: string, arg1: string, overrides?: CallOverrides): Promise<boolean>;

  isWhitelisted(addr: string, overrides?: CallOverrides): Promise<boolean>;

  marinatorInfo(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; multipliedAmount: BigNumber }>;

  migrateToken(
    token: string,
    destination: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  multiplierNFTs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  multiplierStakingEnabled(overrides?: CallOverrides): Promise<boolean>;

  multiplierWithdrawEnabled(overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  nftMultiplier(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  paidTokenRewardsPerStake(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  payRewardsEnabled(overrides?: CallOverrides): Promise<boolean>;

  recoverEth(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  removeApprovedMultiplierToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  removeApprovedRewardToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  removeFromContractWhitelist(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  setDepositLimit(
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMultiplierStakeEnabled(
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMultiplierWithdrawEnabled(
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPayRewardsEnabled(
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setScale(
    _scale: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setStakeEnabled(
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setStakingWithdrawEnabled(
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setTransferEnabled(
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  stakeEnabled(overrides?: CallOverrides): Promise<boolean>;

  stakeMultiplier(
    nft: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  toBePaid(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalMultipliedStaked(overrides?: CallOverrides): Promise<BigNumber>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalTokenRewardsPerStake(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferEnabled(overrides?: CallOverrides): Promise<boolean>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  whitelistedContracts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  withdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  withdrawEnabled(overrides?: CallOverrides): Promise<boolean>;

  withdrawMultiplier(
    nft: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    BASE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    UMAMI(overrides?: CallOverrides): Promise<string>;

    addApprovedMultiplierToken(token: string, multiplier: BigNumberish, overrides?: CallOverrides): Promise<void>;

    addApprovedRewardToken(token: string, overrides?: CallOverrides): Promise<void>;

    addReward(token: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    addToContractWhitelist(_contract: string, overrides?: CallOverrides): Promise<boolean>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableTokenRewards(staker: string, token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    isApprovedMultiplierNFT(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isApprovedRewardToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isContract(addr: string, overrides?: CallOverrides): Promise<boolean>;

    isNFTStaked(arg0: string, arg1: string, overrides?: CallOverrides): Promise<boolean>;

    isWhitelisted(addr: string, overrides?: CallOverrides): Promise<boolean>;

    marinatorInfo(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        amount: BigNumber;
        multipliedAmount: BigNumber;
      }
    >;

    migrateToken(token: string, destination: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    multiplierNFTs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    multiplierStakingEnabled(overrides?: CallOverrides): Promise<boolean>;

    multiplierWithdrawEnabled(overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    nftMultiplier(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    paidTokenRewardsPerStake(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    payRewardsEnabled(overrides?: CallOverrides): Promise<boolean>;

    recoverEth(overrides?: CallOverrides): Promise<void>;

    removeApprovedMultiplierToken(token: string, overrides?: CallOverrides): Promise<void>;

    removeApprovedRewardToken(token: string, overrides?: CallOverrides): Promise<void>;

    removeFromContractWhitelist(_contract: string, overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    setDepositLimit(limit: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setMultiplierStakeEnabled(enabled: boolean, overrides?: CallOverrides): Promise<void>;

    setMultiplierWithdrawEnabled(enabled: boolean, overrides?: CallOverrides): Promise<void>;

    setPayRewardsEnabled(enabled: boolean, overrides?: CallOverrides): Promise<void>;

    setScale(_scale: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setStakeEnabled(enabled: boolean, overrides?: CallOverrides): Promise<void>;

    setStakingWithdrawEnabled(enabled: boolean, overrides?: CallOverrides): Promise<void>;

    setTransferEnabled(enabled: boolean, overrides?: CallOverrides): Promise<void>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakeEnabled(overrides?: CallOverrides): Promise<boolean>;

    stakeMultiplier(nft: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    toBePaid(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalMultipliedStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalTokenRewardsPerStake(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transfer(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferEnabled(overrides?: CallOverrides): Promise<boolean>;

    transferFrom(sender: string, recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    whitelistedContracts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawEnabled(overrides?: CallOverrides): Promise<boolean>;

    withdrawMultiplier(nft: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'AddToContractWhitelist(address)'(_contract?: string | null): AddToContractWhitelistEventFilter;
    AddToContractWhitelist(_contract?: string | null): AddToContractWhitelistEventFilter;

    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    'RemoveFromContractWhitelist(address)'(_contract?: string | null): RemoveFromContractWhitelistEventFilter;
    RemoveFromContractWhitelist(_contract?: string | null): RemoveFromContractWhitelistEventFilter;

    'RewardAdded(address,uint256,uint256)'(token?: null, amount?: null, rps?: null): RewardAddedEventFilter;
    RewardAdded(token?: null, amount?: null, rps?: null): RewardAddedEventFilter;

    'RewardClaimed(address,address,uint256)'(token?: null, staker?: null, amount?: null): RewardClaimedEventFilter;
    RewardClaimed(token?: null, staker?: null, amount?: null): RewardClaimedEventFilter;

    'RewardCollection(address,address,uint256)'(token?: null, addr?: null, amount?: null): RewardCollectionEventFilter;
    RewardCollection(token?: null, addr?: null, amount?: null): RewardCollectionEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter;
    RoleGranted(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleRevokedEventFilter;

    'Stake(address,uint256,uint256)'(addr?: null, amount?: null, multipliedAmount?: null): StakeEventFilter;
    Stake(addr?: null, amount?: null, multipliedAmount?: null): StakeEventFilter;

    'StakeMultiplier(address,address,uint256,uint256)'(
      addr?: null,
      nft?: null,
      tokenId?: null,
      multipliedAmount?: null,
    ): StakeMultiplierEventFilter;
    StakeMultiplier(addr?: null, nft?: null, tokenId?: null, multipliedAmount?: null): StakeMultiplierEventFilter;

    'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;

    'Withdraw(address,uint256)'(addr?: null, amount?: null): WithdrawEventFilter;
    Withdraw(addr?: null, amount?: null): WithdrawEventFilter;

    'WithdrawMultiplier(address,address,uint256,uint256)'(
      addr?: null,
      nft?: null,
      tokenId?: null,
      multipliedAmount?: null,
    ): WithdrawMultiplierEventFilter;
    WithdrawMultiplier(addr?: null, nft?: null, tokenId?: null, multipliedAmount?: null): WithdrawMultiplierEventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    BASE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    UMAMI(overrides?: CallOverrides): Promise<BigNumber>;

    addApprovedMultiplierToken(
      token: string,
      multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    addApprovedRewardToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    addReward(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    addToContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableTokenRewards(staker: string, token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isApprovedMultiplierNFT(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedRewardToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isContract(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isNFTStaked(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelisted(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    marinatorInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    migrateToken(
      token: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    multiplierNFTs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    multiplierStakingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    multiplierWithdrawEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nftMultiplier(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paidTokenRewardsPerStake(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    payRewardsEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    recoverEth(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    removeApprovedMultiplierToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    removeApprovedRewardToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    removeFromContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setDepositLimit(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMultiplierStakeEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMultiplierWithdrawEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setPayRewardsEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setScale(_scale: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setStakeEnabled(enabled: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setStakingWithdrawEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setTransferEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    stake(amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    stakeEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    stakeMultiplier(
      nft: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    toBePaid(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalMultipliedStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalTokenRewardsPerStake(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    whitelistedContracts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdrawEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawMultiplier(
      nft: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SCALE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UMAMI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addApprovedMultiplierToken(
      token: string,
      multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    addApprovedRewardToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    addReward(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    addToContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAvailableTokenRewards(staker: string, token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isApprovedMultiplierNFT(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedRewardToken(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isContract(addr: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isNFTStaked(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWhitelisted(addr: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marinatorInfo(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateToken(
      token: string,
      destination: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    multiplierNFTs(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiplierStakingEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiplierWithdrawEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftMultiplier(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paidTokenRewardsPerStake(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payRewardsEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverEth(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    removeApprovedMultiplierToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    removeApprovedRewardToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    removeFromContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDepositLimit(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMultiplierStakeEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMultiplierWithdrawEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPayRewardsEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setScale(
      _scale: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setStakeEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setStakingWithdrawEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setTransferEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    stakeEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeMultiplier(
      nft: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toBePaid(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalMultipliedStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalTokenRewardsPerStake(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    whitelistedContracts(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    withdrawEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawMultiplier(
      nft: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
