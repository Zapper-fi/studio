/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface MstableAssetInterface extends utils.Interface {
  functions: {
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'asset()': FunctionFragment;
    'automateInterestCollectionFlag(bool)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'balanceOfUnderlying(address)': FunctionFragment;
    'connector()': FunctionFragment;
    'convertToAssets(uint256)': FunctionFragment;
    'convertToShares(uint256)': FunctionFragment;
    'creditBalances(address)': FunctionFragment;
    'creditsToUnderlying(uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'deposit(uint256,address,address)': FunctionFragment;
    'deposit(uint256,address)': FunctionFragment;
    'depositInterest(uint256)': FunctionFragment;
    'depositSavings(uint256,address,address)': FunctionFragment;
    'depositSavings(uint256,address)': FunctionFragment;
    'depositSavings(uint256)': FunctionFragment;
    'emergencyWithdraw(uint256)': FunctionFragment;
    'exchangeRate()': FunctionFragment;
    'fraction()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initialize(address,string,string)': FunctionFragment;
    'lastBalance()': FunctionFragment;
    'lastPoke()': FunctionFragment;
    'maxDeposit(address)': FunctionFragment;
    'maxMint(address)': FunctionFragment;
    'maxRedeem(address)': FunctionFragment;
    'maxWithdraw(address)': FunctionFragment;
    'mint(uint256,address)': FunctionFragment;
    'mint(uint256,address,address)': FunctionFragment;
    'name()': FunctionFragment;
    'nexus()': FunctionFragment;
    'poke()': FunctionFragment;
    'poker()': FunctionFragment;
    'preDeposit(uint256,address)': FunctionFragment;
    'previewDeposit(uint256)': FunctionFragment;
    'previewMint(uint256)': FunctionFragment;
    'previewRedeem(uint256)': FunctionFragment;
    'previewWithdraw(uint256)': FunctionFragment;
    'redeem(uint256,address,address)': FunctionFragment;
    'redeem(uint256)': FunctionFragment;
    'redeemAndUnwrap(uint256,bool,uint256,address,address,address,bool)': FunctionFragment;
    'redeemCredits(uint256)': FunctionFragment;
    'redeemUnderlying(uint256)': FunctionFragment;
    'setConnector(address)': FunctionFragment;
    'setFraction(uint256)': FunctionFragment;
    'setPoker(address)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalAssets()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'underlying()': FunctionFragment;
    'underlyingToCredits(uint256)': FunctionFragment;
    'unwrapper()': FunctionFragment;
    'withdraw(uint256,address,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'allowance'
      | 'approve'
      | 'asset'
      | 'automateInterestCollectionFlag'
      | 'balanceOf'
      | 'balanceOfUnderlying'
      | 'connector'
      | 'convertToAssets'
      | 'convertToShares'
      | 'creditBalances'
      | 'creditsToUnderlying'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit(uint256,address,address)'
      | 'deposit(uint256,address)'
      | 'depositInterest'
      | 'depositSavings(uint256,address,address)'
      | 'depositSavings(uint256,address)'
      | 'depositSavings(uint256)'
      | 'emergencyWithdraw'
      | 'exchangeRate'
      | 'fraction'
      | 'increaseAllowance'
      | 'initialize'
      | 'lastBalance'
      | 'lastPoke'
      | 'maxDeposit'
      | 'maxMint'
      | 'maxRedeem'
      | 'maxWithdraw'
      | 'mint(uint256,address)'
      | 'mint(uint256,address,address)'
      | 'name'
      | 'nexus'
      | 'poke'
      | 'poker'
      | 'preDeposit'
      | 'previewDeposit'
      | 'previewMint'
      | 'previewRedeem'
      | 'previewWithdraw'
      | 'redeem(uint256,address,address)'
      | 'redeem(uint256)'
      | 'redeemAndUnwrap'
      | 'redeemCredits'
      | 'redeemUnderlying'
      | 'setConnector'
      | 'setFraction'
      | 'setPoker'
      | 'symbol'
      | 'totalAssets'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'underlying'
      | 'underlyingToCredits'
      | 'unwrapper'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'asset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'automateInterestCollectionFlag', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'balanceOfUnderlying', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'connector', values?: undefined): string;
  encodeFunctionData(functionFragment: 'convertToAssets', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'convertToShares', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'creditBalances', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'creditsToUnderlying', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit(uint256,address,address)',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit(uint256,address)',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'depositInterest', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'depositSavings(uint256,address,address)',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositSavings(uint256,address)',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'depositSavings(uint256)', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'emergencyWithdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'exchangeRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fraction', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'lastBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastPoke', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxDeposit', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maxMint', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maxRedeem', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maxWithdraw', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'mint(uint256,address)',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'mint(uint256,address,address)',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nexus', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poke', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poker', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'preDeposit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'previewDeposit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'previewMint', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'previewRedeem', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'previewWithdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'redeem(uint256,address,address)',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'redeem(uint256)', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'redeemAndUnwrap',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'redeemCredits', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'redeemUnderlying', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setConnector', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setFraction', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setPoker', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalAssets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'underlying', values?: undefined): string;
  encodeFunctionData(functionFragment: 'underlyingToCredits', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'unwrapper', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'automateInterestCollectionFlag', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfUnderlying', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'connector', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertToAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertToShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'creditBalances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'creditsToUnderlying', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit(uint256,address,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit(uint256,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositInterest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositSavings(uint256,address,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositSavings(uint256,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositSavings(uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exchangeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastPoke', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRedeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint(uint256,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint(uint256,address,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nexus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poke', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poker', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'preDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewRedeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem(uint256,address,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem(uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemAndUnwrap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemCredits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemUnderlying', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setConnector', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFraction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPoker', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'underlying', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'underlyingToCredits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unwrapper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'AutomaticInterestCollectionSwitched(bool)': EventFragment;
    'ConnectorUpdated(address)': EventFragment;
    'CreditsRedeemed(address,uint256,uint256)': EventFragment;
    'Deposit(address,address,uint256,uint256)': EventFragment;
    'EmergencyUpdate()': EventFragment;
    'ExchangeRateUpdated(uint256,uint256)': EventFragment;
    'FractionUpdated(uint256)': EventFragment;
    'Poked(uint256,uint256,uint256)': EventFragment;
    'PokedRaw()': EventFragment;
    'PokerUpdated(address)': EventFragment;
    'Referral(address,address,uint256)': EventFragment;
    'SavingsDeposited(address,uint256,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Withdraw(address,address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AutomaticInterestCollectionSwitched'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ConnectorUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreditsRedeemed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyUpdate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExchangeRateUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FractionUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Poked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PokedRaw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PokerUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Referral'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SavingsDeposited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface AutomaticInterestCollectionSwitchedEventObject {
  automationEnabled: boolean;
}
export type AutomaticInterestCollectionSwitchedEvent = TypedEvent<
  [boolean],
  AutomaticInterestCollectionSwitchedEventObject
>;

export type AutomaticInterestCollectionSwitchedEventFilter = TypedEventFilter<AutomaticInterestCollectionSwitchedEvent>;

export interface ConnectorUpdatedEventObject {
  connector: string;
}
export type ConnectorUpdatedEvent = TypedEvent<[string], ConnectorUpdatedEventObject>;

export type ConnectorUpdatedEventFilter = TypedEventFilter<ConnectorUpdatedEvent>;

export interface CreditsRedeemedEventObject {
  redeemer: string;
  creditsRedeemed: BigNumber;
  savingsCredited: BigNumber;
}
export type CreditsRedeemedEvent = TypedEvent<[string, BigNumber, BigNumber], CreditsRedeemedEventObject>;

export type CreditsRedeemedEventFilter = TypedEventFilter<CreditsRedeemedEvent>;

export interface DepositEventObject {
  caller: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type DepositEvent = TypedEvent<[string, string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EmergencyUpdateEventObject {}
export type EmergencyUpdateEvent = TypedEvent<[], EmergencyUpdateEventObject>;

export type EmergencyUpdateEventFilter = TypedEventFilter<EmergencyUpdateEvent>;

export interface ExchangeRateUpdatedEventObject {
  newExchangeRate: BigNumber;
  interestCollected: BigNumber;
}
export type ExchangeRateUpdatedEvent = TypedEvent<[BigNumber, BigNumber], ExchangeRateUpdatedEventObject>;

export type ExchangeRateUpdatedEventFilter = TypedEventFilter<ExchangeRateUpdatedEvent>;

export interface FractionUpdatedEventObject {
  fraction: BigNumber;
}
export type FractionUpdatedEvent = TypedEvent<[BigNumber], FractionUpdatedEventObject>;

export type FractionUpdatedEventFilter = TypedEventFilter<FractionUpdatedEvent>;

export interface PokedEventObject {
  oldBalance: BigNumber;
  newBalance: BigNumber;
  interestDetected: BigNumber;
}
export type PokedEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], PokedEventObject>;

export type PokedEventFilter = TypedEventFilter<PokedEvent>;

export interface PokedRawEventObject {}
export type PokedRawEvent = TypedEvent<[], PokedRawEventObject>;

export type PokedRawEventFilter = TypedEventFilter<PokedRawEvent>;

export interface PokerUpdatedEventObject {
  poker: string;
}
export type PokerUpdatedEvent = TypedEvent<[string], PokerUpdatedEventObject>;

export type PokerUpdatedEventFilter = TypedEventFilter<PokerUpdatedEvent>;

export interface ReferralEventObject {
  referrer: string;
  beneficiary: string;
  amount: BigNumber;
}
export type ReferralEvent = TypedEvent<[string, string, BigNumber], ReferralEventObject>;

export type ReferralEventFilter = TypedEventFilter<ReferralEvent>;

export interface SavingsDepositedEventObject {
  saver: string;
  savingsDeposited: BigNumber;
  creditsIssued: BigNumber;
}
export type SavingsDepositedEvent = TypedEvent<[string, BigNumber, BigNumber], SavingsDepositedEventObject>;

export type SavingsDepositedEventFilter = TypedEventFilter<SavingsDepositedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawEventObject {
  caller: string;
  receiver: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface MstableAsset extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MstableAssetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string] & { assetTokenAddress: string }>;

    automateInterestCollectionFlag(
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfUnderlying(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    connector(overrides?: CallOverrides): Promise<[string]>;

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    creditBalances(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    creditsToUnderlying(
      _credits: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'deposit(uint256,address,address)'(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'deposit(uint256,address)'(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositInterest(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'depositSavings(uint256,address,address)'(
      _underlying: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'depositSavings(uint256,address)'(
      _underlying: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'depositSavings(uint256)'(
      _underlying: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    fraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _poker: PromiseOrValue<string>,
      _nameArg: PromiseOrValue<string>,
      _symbolArg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    lastBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastPoke(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDeposit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { maxAssets: BigNumber }>;

    maxMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber] & { maxShares: BigNumber }>;

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { maxShares: BigNumber }>;

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { maxAssets: BigNumber }>;

    'mint(uint256,address)'(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'mint(uint256,address,address)'(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nexus(overrides?: CallOverrides): Promise<[string]>;

    poke(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    poker(overrides?: CallOverrides): Promise<[string]>;

    preDeposit(
      _underlying: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    'redeem(uint256,address,address)'(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'redeem(uint256)'(
      _credits: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    redeemAndUnwrap(
      _amount: PromiseOrValue<BigNumberish>,
      _isCreditAmt: PromiseOrValue<boolean>,
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _output: PromiseOrValue<string>,
      _beneficiary: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      _isBassetOut: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    redeemCredits(
      _credits: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    redeemUnderlying(
      _underlying: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setConnector(
      _newConnector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFraction(
      _fraction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPoker(
      _newPoker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber] & { totalManagedAssets: BigNumber }>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    underlyingToCredits(
      _underlying: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { credits: BigNumber }>;

    unwrapper(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  automateInterestCollectionFlag(
    _enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfUnderlying(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  connector(overrides?: CallOverrides): Promise<string>;

  convertToAssets(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  convertToShares(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  creditBalances(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  creditsToUnderlying(_credits: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'deposit(uint256,address,address)'(
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    referrer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'deposit(uint256,address)'(
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositInterest(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'depositSavings(uint256,address,address)'(
    _underlying: PromiseOrValue<BigNumberish>,
    _beneficiary: PromiseOrValue<string>,
    _referrer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'depositSavings(uint256,address)'(
    _underlying: PromiseOrValue<BigNumberish>,
    _beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'depositSavings(uint256)'(
    _underlying: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _withdrawAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  fraction(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _poker: PromiseOrValue<string>,
    _nameArg: PromiseOrValue<string>,
    _symbolArg: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  lastBalance(overrides?: CallOverrides): Promise<BigNumber>;

  lastPoke(overrides?: CallOverrides): Promise<BigNumber>;

  maxDeposit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  maxMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  maxRedeem(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  maxWithdraw(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  'mint(uint256,address)'(
    shares: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'mint(uint256,address,address)'(
    shares: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    referrer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nexus(overrides?: CallOverrides): Promise<string>;

  poke(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  poker(overrides?: CallOverrides): Promise<string>;

  preDeposit(
    _underlying: PromiseOrValue<BigNumberish>,
    _beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  previewDeposit(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  previewMint(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  previewRedeem(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  previewWithdraw(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  'redeem(uint256,address,address)'(
    shares: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'redeem(uint256)'(
    _credits: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  redeemAndUnwrap(
    _amount: PromiseOrValue<BigNumberish>,
    _isCreditAmt: PromiseOrValue<boolean>,
    _minAmountOut: PromiseOrValue<BigNumberish>,
    _output: PromiseOrValue<string>,
    _beneficiary: PromiseOrValue<string>,
    _router: PromiseOrValue<string>,
    _isBassetOut: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  redeemCredits(
    _credits: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  redeemUnderlying(
    _underlying: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setConnector(
    _newConnector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFraction(
    _fraction: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPoker(
    _newPoker: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  underlyingToCredits(_underlying: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  unwrapper(overrides?: CallOverrides): Promise<string>;

  withdraw(
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    automateInterestCollectionFlag(_enabled: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfUnderlying(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    connector(overrides?: CallOverrides): Promise<string>;

    convertToAssets(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    convertToShares(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    creditBalances(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    creditsToUnderlying(_credits: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'deposit(uint256,address,address)'(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      referrer: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'deposit(uint256,address)'(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    depositInterest(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    'depositSavings(uint256,address,address)'(
      _underlying: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'depositSavings(uint256,address)'(
      _underlying: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'depositSavings(uint256)'(_underlying: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(_withdrawAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    fraction(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    initialize(
      _poker: PromiseOrValue<string>,
      _nameArg: PromiseOrValue<string>,
      _symbolArg: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    lastBalance(overrides?: CallOverrides): Promise<BigNumber>;

    lastPoke(overrides?: CallOverrides): Promise<BigNumber>;

    maxDeposit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    'mint(uint256,address)'(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'mint(uint256,address,address)'(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      referrer: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nexus(overrides?: CallOverrides): Promise<string>;

    poke(overrides?: CallOverrides): Promise<void>;

    poker(overrides?: CallOverrides): Promise<string>;

    preDeposit(
      _underlying: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    previewDeposit(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewMint(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewRedeem(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewWithdraw(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    'redeem(uint256,address,address)'(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'redeem(uint256)'(_credits: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    redeemAndUnwrap(
      _amount: PromiseOrValue<BigNumberish>,
      _isCreditAmt: PromiseOrValue<boolean>,
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _output: PromiseOrValue<string>,
      _beneficiary: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      _isBassetOut: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        creditsBurned: BigNumber;
        massetReturned: BigNumber;
        outputQuantity: BigNumber;
      }
    >;

    redeemCredits(_credits: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    redeemUnderlying(_underlying: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    setConnector(_newConnector: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setFraction(_fraction: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setPoker(_newPoker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    underlying(overrides?: CallOverrides): Promise<string>;

    underlyingToCredits(_underlying: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    unwrapper(overrides?: CallOverrides): Promise<string>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'AutomaticInterestCollectionSwitched(bool)'(
      automationEnabled?: null,
    ): AutomaticInterestCollectionSwitchedEventFilter;
    AutomaticInterestCollectionSwitched(automationEnabled?: null): AutomaticInterestCollectionSwitchedEventFilter;

    'ConnectorUpdated(address)'(connector?: null): ConnectorUpdatedEventFilter;
    ConnectorUpdated(connector?: null): ConnectorUpdatedEventFilter;

    'CreditsRedeemed(address,uint256,uint256)'(
      redeemer?: PromiseOrValue<string> | null,
      creditsRedeemed?: null,
      savingsCredited?: null,
    ): CreditsRedeemedEventFilter;
    CreditsRedeemed(
      redeemer?: PromiseOrValue<string> | null,
      creditsRedeemed?: null,
      savingsCredited?: null,
    ): CreditsRedeemedEventFilter;

    'Deposit(address,address,uint256,uint256)'(
      caller?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null,
    ): DepositEventFilter;
    Deposit(
      caller?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null,
    ): DepositEventFilter;

    'EmergencyUpdate()'(): EmergencyUpdateEventFilter;
    EmergencyUpdate(): EmergencyUpdateEventFilter;

    'ExchangeRateUpdated(uint256,uint256)'(
      newExchangeRate?: null,
      interestCollected?: null,
    ): ExchangeRateUpdatedEventFilter;
    ExchangeRateUpdated(newExchangeRate?: null, interestCollected?: null): ExchangeRateUpdatedEventFilter;

    'FractionUpdated(uint256)'(fraction?: null): FractionUpdatedEventFilter;
    FractionUpdated(fraction?: null): FractionUpdatedEventFilter;

    'Poked(uint256,uint256,uint256)'(oldBalance?: null, newBalance?: null, interestDetected?: null): PokedEventFilter;
    Poked(oldBalance?: null, newBalance?: null, interestDetected?: null): PokedEventFilter;

    'PokedRaw()'(): PokedRawEventFilter;
    PokedRaw(): PokedRawEventFilter;

    'PokerUpdated(address)'(poker?: null): PokerUpdatedEventFilter;
    PokerUpdated(poker?: null): PokerUpdatedEventFilter;

    'Referral(address,address,uint256)'(
      referrer?: PromiseOrValue<string> | null,
      beneficiary?: null,
      amount?: null,
    ): ReferralEventFilter;
    Referral(referrer?: PromiseOrValue<string> | null, beneficiary?: null, amount?: null): ReferralEventFilter;

    'SavingsDeposited(address,uint256,uint256)'(
      saver?: PromiseOrValue<string> | null,
      savingsDeposited?: null,
      creditsIssued?: null,
    ): SavingsDepositedEventFilter;
    SavingsDeposited(
      saver?: PromiseOrValue<string> | null,
      savingsDeposited?: null,
      creditsIssued?: null,
    ): SavingsDepositedEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;

    'Withdraw(address,address,address,uint256,uint256)'(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null,
    ): WithdrawEventFilter;
    Withdraw(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null,
    ): WithdrawEventFilter;
  };

  estimateGas: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    automateInterestCollectionFlag(
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfUnderlying(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    connector(overrides?: CallOverrides): Promise<BigNumber>;

    convertToAssets(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    convertToShares(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    creditBalances(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    creditsToUnderlying(_credits: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'deposit(uint256,address,address)'(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'deposit(uint256,address)'(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositInterest(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'depositSavings(uint256,address,address)'(
      _underlying: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'depositSavings(uint256,address)'(
      _underlying: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'depositSavings(uint256)'(
      _underlying: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    fraction(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initialize(
      _poker: PromiseOrValue<string>,
      _nameArg: PromiseOrValue<string>,
      _symbolArg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    lastBalance(overrides?: CallOverrides): Promise<BigNumber>;

    lastPoke(overrides?: CallOverrides): Promise<BigNumber>;

    maxDeposit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    'mint(uint256,address)'(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'mint(uint256,address,address)'(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nexus(overrides?: CallOverrides): Promise<BigNumber>;

    poke(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    poker(overrides?: CallOverrides): Promise<BigNumber>;

    preDeposit(
      _underlying: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    previewDeposit(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewMint(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewRedeem(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewWithdraw(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    'redeem(uint256,address,address)'(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'redeem(uint256)'(
      _credits: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    redeemAndUnwrap(
      _amount: PromiseOrValue<BigNumberish>,
      _isCreditAmt: PromiseOrValue<boolean>,
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _output: PromiseOrValue<string>,
      _beneficiary: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      _isBassetOut: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    redeemCredits(
      _credits: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    redeemUnderlying(
      _underlying: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setConnector(
      _newConnector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFraction(
      _fraction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPoker(
      _newPoker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingToCredits(_underlying: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    unwrapper(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    automateInterestCollectionFlag(
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfUnderlying(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertToAssets(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertToShares(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditBalances(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditsToUnderlying(
      _credits: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'deposit(uint256,address,address)'(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'deposit(uint256,address)'(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositInterest(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'depositSavings(uint256,address,address)'(
      _underlying: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'depositSavings(uint256,address)'(
      _underlying: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'depositSavings(uint256)'(
      _underlying: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _poker: PromiseOrValue<string>,
      _nameArg: PromiseOrValue<string>,
      _symbolArg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    lastBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastPoke(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDeposit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRedeem(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxWithdraw(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'mint(uint256,address)'(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'mint(uint256,address,address)'(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nexus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poke(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    poker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preDeposit(
      _underlying: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    previewDeposit(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewMint(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewRedeem(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewWithdraw(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'redeem(uint256,address,address)'(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'redeem(uint256)'(
      _credits: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    redeemAndUnwrap(
      _amount: PromiseOrValue<BigNumberish>,
      _isCreditAmt: PromiseOrValue<boolean>,
      _minAmountOut: PromiseOrValue<BigNumberish>,
      _output: PromiseOrValue<string>,
      _beneficiary: PromiseOrValue<string>,
      _router: PromiseOrValue<string>,
      _isBassetOut: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    redeemCredits(
      _credits: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    redeemUnderlying(
      _underlying: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setConnector(
      _newConnector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFraction(
      _fraction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPoker(
      _newPoker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingToCredits(
      _underlying: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    unwrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
