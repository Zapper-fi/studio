/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface SwethInterface extends utils.Interface {
  functions: {
    'AccessControlManager()': FunctionFragment;
    'addToWhitelist(address)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'batchAddToWhitelist(address[])': FunctionFragment;
    'batchRemoveFromWhitelist(address[])': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'deposit()': FunctionFragment;
    'disableWhitelist()': FunctionFragment;
    'enableWhitelist()': FunctionFragment;
    'ethToSwETHRate()': FunctionFragment;
    'getRate()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'lastRepriceETHReserves()': FunctionFragment;
    'lastRepriceUNIX()': FunctionFragment;
    'maximumRepriceDifferencePercentage()': FunctionFragment;
    'maximumRepriceswETHDifferencePercentage()': FunctionFragment;
    'minimumRepriceTime()': FunctionFragment;
    'name()': FunctionFragment;
    'nodeOperatorRewardPercentage()': FunctionFragment;
    'removeFromWhitelist(address)': FunctionFragment;
    'reprice(uint256,uint256,uint256)': FunctionFragment;
    'setMaximumRepriceDifferencePercentage(uint256)': FunctionFragment;
    'setMaximumRepriceswETHDifferencePercentage(uint256)': FunctionFragment;
    'setMinimumRepriceTime(uint256)': FunctionFragment;
    'setNodeOperatorRewardPercentage(uint256)': FunctionFragment;
    'setSwellTreasuryRewardPercentage(uint256)': FunctionFragment;
    'swETHToETHRate()': FunctionFragment;
    'swellTreasuryRewardPercentage()': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalETHDeposited()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'whitelistEnabled()': FunctionFragment;
    'whitelistedAddresses(address)': FunctionFragment;
    'withdrawERC20(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'AccessControlManager'
      | 'addToWhitelist'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'batchAddToWhitelist'
      | 'batchRemoveFromWhitelist'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit'
      | 'disableWhitelist'
      | 'enableWhitelist'
      | 'ethToSwETHRate'
      | 'getRate'
      | 'increaseAllowance'
      | 'initialize'
      | 'lastRepriceETHReserves'
      | 'lastRepriceUNIX'
      | 'maximumRepriceDifferencePercentage'
      | 'maximumRepriceswETHDifferencePercentage'
      | 'minimumRepriceTime'
      | 'name'
      | 'nodeOperatorRewardPercentage'
      | 'removeFromWhitelist'
      | 'reprice'
      | 'setMaximumRepriceDifferencePercentage'
      | 'setMaximumRepriceswETHDifferencePercentage'
      | 'setMinimumRepriceTime'
      | 'setNodeOperatorRewardPercentage'
      | 'setSwellTreasuryRewardPercentage'
      | 'swETHToETHRate'
      | 'swellTreasuryRewardPercentage'
      | 'symbol'
      | 'totalETHDeposited'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'whitelistEnabled'
      | 'whitelistedAddresses'
      | 'withdrawERC20',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'AccessControlManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addToWhitelist', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'batchAddToWhitelist', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'batchRemoveFromWhitelist', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'deposit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'disableWhitelist', values?: undefined): string;
  encodeFunctionData(functionFragment: 'enableWhitelist', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ethToSwETHRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRate', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'initialize', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lastRepriceETHReserves', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastRepriceUNIX', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maximumRepriceDifferencePercentage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maximumRepriceswETHDifferencePercentage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minimumRepriceTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nodeOperatorRewardPercentage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'removeFromWhitelist', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'reprice',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setMaximumRepriceDifferencePercentage',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setMaximumRepriceswETHDifferencePercentage',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setMinimumRepriceTime', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setNodeOperatorRewardPercentage',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setSwellTreasuryRewardPercentage',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'swETHToETHRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'swellTreasuryRewardPercentage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalETHDeposited', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'whitelistEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'whitelistedAddresses', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'withdrawERC20', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'AccessControlManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addToWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'batchAddToWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'batchRemoveFromWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ethToSwETHRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastRepriceETHReserves', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastRepriceUNIX', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maximumRepriceDifferencePercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maximumRepriceswETHDifferencePercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minimumRepriceTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nodeOperatorRewardPercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeFromWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reprice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaximumRepriceDifferencePercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaximumRepriceswETHDifferencePercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMinimumRepriceTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setNodeOperatorRewardPercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSwellTreasuryRewardPercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swETHToETHRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swellTreasuryRewardPercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalETHDeposited', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistedAddresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawERC20', data: BytesLike): Result;

  events: {
    'AddedToWhitelist(address)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'ETHDepositReceived(address,uint256,uint256,uint256)': EventFragment;
    'ETHWithdrawn(address,uint256,uint256)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'MaximumRepriceDifferencePercentageUpdated(uint256,uint256)': EventFragment;
    'MaximumRepriceswETHDifferencePercentageUpdated(uint256,uint256)': EventFragment;
    'MinimumRepriceTimeUpdated(uint256,uint256)': EventFragment;
    'NodeOperatorRewardPercentageUpdate(uint256,uint256)': EventFragment;
    'RemovedFromWhitelist(address)': EventFragment;
    'Reprice(uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'SwellTreasuryRewardPercentageUpdate(uint256,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'WhitelistDisabled()': EventFragment;
    'WhitelistEnabled()': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddedToWhitelist'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ETHDepositReceived'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ETHWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaximumRepriceDifferencePercentageUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaximumRepriceswETHDifferencePercentageUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MinimumRepriceTimeUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NodeOperatorRewardPercentageUpdate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RemovedFromWhitelist'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Reprice'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SwellTreasuryRewardPercentageUpdate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WhitelistDisabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WhitelistEnabled'): EventFragment;
}

export interface AddedToWhitelistEventObject {
  _address: string;
}
export type AddedToWhitelistEvent = TypedEvent<[string], AddedToWhitelistEventObject>;

export type AddedToWhitelistEventFilter = TypedEventFilter<AddedToWhitelistEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ETHDepositReceivedEventObject {
  from: string;
  amount: BigNumber;
  swETHMinted: BigNumber;
  newTotalETHDeposited: BigNumber;
}
export type ETHDepositReceivedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  ETHDepositReceivedEventObject
>;

export type ETHDepositReceivedEventFilter = TypedEventFilter<ETHDepositReceivedEvent>;

export interface ETHWithdrawnEventObject {
  to: string;
  swETHBurned: BigNumber;
  ethReturned: BigNumber;
}
export type ETHWithdrawnEvent = TypedEvent<[string, BigNumber, BigNumber], ETHWithdrawnEventObject>;

export type ETHWithdrawnEventFilter = TypedEventFilter<ETHWithdrawnEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MaximumRepriceDifferencePercentageUpdatedEventObject {
  _oldMaximumRepriceDifferencePercentage: BigNumber;
  _newMaximumRepriceDifferencePercentage: BigNumber;
}
export type MaximumRepriceDifferencePercentageUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MaximumRepriceDifferencePercentageUpdatedEventObject
>;

export type MaximumRepriceDifferencePercentageUpdatedEventFilter =
  TypedEventFilter<MaximumRepriceDifferencePercentageUpdatedEvent>;

export interface MaximumRepriceswETHDifferencePercentageUpdatedEventObject {
  _oldMaximumRepriceswETHDifferencePercentage: BigNumber;
  _newMaximumRepriceswETHDifferencePercentage: BigNumber;
}
export type MaximumRepriceswETHDifferencePercentageUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MaximumRepriceswETHDifferencePercentageUpdatedEventObject
>;

export type MaximumRepriceswETHDifferencePercentageUpdatedEventFilter =
  TypedEventFilter<MaximumRepriceswETHDifferencePercentageUpdatedEvent>;

export interface MinimumRepriceTimeUpdatedEventObject {
  _oldMinimumRepriceTime: BigNumber;
  _newMinimumRepriceTime: BigNumber;
}
export type MinimumRepriceTimeUpdatedEvent = TypedEvent<[BigNumber, BigNumber], MinimumRepriceTimeUpdatedEventObject>;

export type MinimumRepriceTimeUpdatedEventFilter = TypedEventFilter<MinimumRepriceTimeUpdatedEvent>;

export interface NodeOperatorRewardPercentageUpdateEventObject {
  oldPercentage: BigNumber;
  newPercentage: BigNumber;
}
export type NodeOperatorRewardPercentageUpdateEvent = TypedEvent<
  [BigNumber, BigNumber],
  NodeOperatorRewardPercentageUpdateEventObject
>;

export type NodeOperatorRewardPercentageUpdateEventFilter = TypedEventFilter<NodeOperatorRewardPercentageUpdateEvent>;

export interface RemovedFromWhitelistEventObject {
  _address: string;
}
export type RemovedFromWhitelistEvent = TypedEvent<[string], RemovedFromWhitelistEventObject>;

export type RemovedFromWhitelistEventFilter = TypedEventFilter<RemovedFromWhitelistEvent>;

export interface RepriceEventObject {
  newEthReserves: BigNumber;
  newSwETHToETHRate: BigNumber;
  nodeOperatorRewards: BigNumber;
  swellTreasuryRewards: BigNumber;
  totalETHDeposited: BigNumber;
}
export type RepriceEvent = TypedEvent<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber], RepriceEventObject>;

export type RepriceEventFilter = TypedEventFilter<RepriceEvent>;

export interface SwellTreasuryRewardPercentageUpdateEventObject {
  oldPercentage: BigNumber;
  newPercentage: BigNumber;
}
export type SwellTreasuryRewardPercentageUpdateEvent = TypedEvent<
  [BigNumber, BigNumber],
  SwellTreasuryRewardPercentageUpdateEventObject
>;

export type SwellTreasuryRewardPercentageUpdateEventFilter = TypedEventFilter<SwellTreasuryRewardPercentageUpdateEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WhitelistDisabledEventObject {}
export type WhitelistDisabledEvent = TypedEvent<[], WhitelistDisabledEventObject>;

export type WhitelistDisabledEventFilter = TypedEventFilter<WhitelistDisabledEvent>;

export interface WhitelistEnabledEventObject {}
export type WhitelistEnabledEvent = TypedEvent<[], WhitelistEnabledEventObject>;

export type WhitelistEnabledEventFilter = TypedEventFilter<WhitelistEnabledEvent>;

export interface Sweth extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwethInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AccessControlManager(overrides?: CallOverrides): Promise<[string]>;

    addToWhitelist(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    batchAddToWhitelist(
      _addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    batchRemoveFromWhitelist(
      _addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deposit(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    disableWhitelist(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    enableWhitelist(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    ethToSwETHRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _accessControlManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    lastRepriceETHReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastRepriceUNIX(overrides?: CallOverrides): Promise<[BigNumber]>;

    maximumRepriceDifferencePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    maximumRepriceswETHDifferencePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumRepriceTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nodeOperatorRewardPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeFromWhitelist(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    reprice(
      _preRewardETHReserves: PromiseOrValue<BigNumberish>,
      _newETHRewards: PromiseOrValue<BigNumberish>,
      _swETHTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaximumRepriceDifferencePercentage(
      _maximumRepriceDifferencePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaximumRepriceswETHDifferencePercentage(
      _maximumRepriceswETHDifferencePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMinimumRepriceTime(
      _minimumRepriceTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setNodeOperatorRewardPercentage(
      _newNodeOperatorRewardPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSwellTreasuryRewardPercentage(
      _newSwellTreasuryRewardPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swETHToETHRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    swellTreasuryRewardPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalETHDeposited(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    whitelistEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    whitelistedAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    withdrawERC20(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  AccessControlManager(overrides?: CallOverrides): Promise<string>;

  addToWhitelist(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  batchAddToWhitelist(
    _addresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  batchRemoveFromWhitelist(
    _addresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deposit(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  disableWhitelist(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  enableWhitelist(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  ethToSwETHRate(overrides?: CallOverrides): Promise<BigNumber>;

  getRate(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _accessControlManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  lastRepriceETHReserves(overrides?: CallOverrides): Promise<BigNumber>;

  lastRepriceUNIX(overrides?: CallOverrides): Promise<BigNumber>;

  maximumRepriceDifferencePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  maximumRepriceswETHDifferencePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  minimumRepriceTime(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nodeOperatorRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  removeFromWhitelist(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  reprice(
    _preRewardETHReserves: PromiseOrValue<BigNumberish>,
    _newETHRewards: PromiseOrValue<BigNumberish>,
    _swETHTotalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaximumRepriceDifferencePercentage(
    _maximumRepriceDifferencePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaximumRepriceswETHDifferencePercentage(
    _maximumRepriceswETHDifferencePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMinimumRepriceTime(
    _minimumRepriceTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setNodeOperatorRewardPercentage(
    _newNodeOperatorRewardPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSwellTreasuryRewardPercentage(
    _newSwellTreasuryRewardPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swETHToETHRate(overrides?: CallOverrides): Promise<BigNumber>;

  swellTreasuryRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalETHDeposited(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  whitelistEnabled(overrides?: CallOverrides): Promise<boolean>;

  whitelistedAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  withdrawERC20(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    AccessControlManager(overrides?: CallOverrides): Promise<string>;

    addToWhitelist(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    batchAddToWhitelist(_addresses: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    batchRemoveFromWhitelist(_addresses: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    deposit(overrides?: CallOverrides): Promise<void>;

    disableWhitelist(overrides?: CallOverrides): Promise<void>;

    enableWhitelist(overrides?: CallOverrides): Promise<void>;

    ethToSwETHRate(overrides?: CallOverrides): Promise<BigNumber>;

    getRate(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    initialize(_accessControlManager: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    lastRepriceETHReserves(overrides?: CallOverrides): Promise<BigNumber>;

    lastRepriceUNIX(overrides?: CallOverrides): Promise<BigNumber>;

    maximumRepriceDifferencePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    maximumRepriceswETHDifferencePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    minimumRepriceTime(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nodeOperatorRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromWhitelist(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    reprice(
      _preRewardETHReserves: PromiseOrValue<BigNumberish>,
      _newETHRewards: PromiseOrValue<BigNumberish>,
      _swETHTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMaximumRepriceDifferencePercentage(
      _maximumRepriceDifferencePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMaximumRepriceswETHDifferencePercentage(
      _maximumRepriceswETHDifferencePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMinimumRepriceTime(_minimumRepriceTime: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setNodeOperatorRewardPercentage(
      _newNodeOperatorRewardPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setSwellTreasuryRewardPercentage(
      _newSwellTreasuryRewardPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    swETHToETHRate(overrides?: CallOverrides): Promise<BigNumber>;

    swellTreasuryRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalETHDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    whitelistEnabled(overrides?: CallOverrides): Promise<boolean>;

    whitelistedAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    withdrawERC20(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'AddedToWhitelist(address)'(_address?: PromiseOrValue<string> | null): AddedToWhitelistEventFilter;
    AddedToWhitelist(_address?: PromiseOrValue<string> | null): AddedToWhitelistEventFilter;

    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'ETHDepositReceived(address,uint256,uint256,uint256)'(
      from?: PromiseOrValue<string> | null,
      amount?: null,
      swETHMinted?: null,
      newTotalETHDeposited?: null,
    ): ETHDepositReceivedEventFilter;
    ETHDepositReceived(
      from?: PromiseOrValue<string> | null,
      amount?: null,
      swETHMinted?: null,
      newTotalETHDeposited?: null,
    ): ETHDepositReceivedEventFilter;

    'ETHWithdrawn(address,uint256,uint256)'(
      to?: PromiseOrValue<string> | null,
      swETHBurned?: null,
      ethReturned?: null,
    ): ETHWithdrawnEventFilter;
    ETHWithdrawn(to?: PromiseOrValue<string> | null, swETHBurned?: null, ethReturned?: null): ETHWithdrawnEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'MaximumRepriceDifferencePercentageUpdated(uint256,uint256)'(
      _oldMaximumRepriceDifferencePercentage?: null,
      _newMaximumRepriceDifferencePercentage?: null,
    ): MaximumRepriceDifferencePercentageUpdatedEventFilter;
    MaximumRepriceDifferencePercentageUpdated(
      _oldMaximumRepriceDifferencePercentage?: null,
      _newMaximumRepriceDifferencePercentage?: null,
    ): MaximumRepriceDifferencePercentageUpdatedEventFilter;

    'MaximumRepriceswETHDifferencePercentageUpdated(uint256,uint256)'(
      _oldMaximumRepriceswETHDifferencePercentage?: null,
      _newMaximumRepriceswETHDifferencePercentage?: null,
    ): MaximumRepriceswETHDifferencePercentageUpdatedEventFilter;
    MaximumRepriceswETHDifferencePercentageUpdated(
      _oldMaximumRepriceswETHDifferencePercentage?: null,
      _newMaximumRepriceswETHDifferencePercentage?: null,
    ): MaximumRepriceswETHDifferencePercentageUpdatedEventFilter;

    'MinimumRepriceTimeUpdated(uint256,uint256)'(
      _oldMinimumRepriceTime?: null,
      _newMinimumRepriceTime?: null,
    ): MinimumRepriceTimeUpdatedEventFilter;
    MinimumRepriceTimeUpdated(
      _oldMinimumRepriceTime?: null,
      _newMinimumRepriceTime?: null,
    ): MinimumRepriceTimeUpdatedEventFilter;

    'NodeOperatorRewardPercentageUpdate(uint256,uint256)'(
      oldPercentage?: null,
      newPercentage?: null,
    ): NodeOperatorRewardPercentageUpdateEventFilter;
    NodeOperatorRewardPercentageUpdate(
      oldPercentage?: null,
      newPercentage?: null,
    ): NodeOperatorRewardPercentageUpdateEventFilter;

    'RemovedFromWhitelist(address)'(_address?: PromiseOrValue<string> | null): RemovedFromWhitelistEventFilter;
    RemovedFromWhitelist(_address?: PromiseOrValue<string> | null): RemovedFromWhitelistEventFilter;

    'Reprice(uint256,uint256,uint256,uint256,uint256)'(
      newEthReserves?: null,
      newSwETHToETHRate?: null,
      nodeOperatorRewards?: null,
      swellTreasuryRewards?: null,
      totalETHDeposited?: null,
    ): RepriceEventFilter;
    Reprice(
      newEthReserves?: null,
      newSwETHToETHRate?: null,
      nodeOperatorRewards?: null,
      swellTreasuryRewards?: null,
      totalETHDeposited?: null,
    ): RepriceEventFilter;

    'SwellTreasuryRewardPercentageUpdate(uint256,uint256)'(
      oldPercentage?: null,
      newPercentage?: null,
    ): SwellTreasuryRewardPercentageUpdateEventFilter;
    SwellTreasuryRewardPercentageUpdate(
      oldPercentage?: null,
      newPercentage?: null,
    ): SwellTreasuryRewardPercentageUpdateEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;

    'WhitelistDisabled()'(): WhitelistDisabledEventFilter;
    WhitelistDisabled(): WhitelistDisabledEventFilter;

    'WhitelistEnabled()'(): WhitelistEnabledEventFilter;
    WhitelistEnabled(): WhitelistEnabledEventFilter;
  };

  estimateGas: {
    AccessControlManager(overrides?: CallOverrides): Promise<BigNumber>;

    addToWhitelist(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    batchAddToWhitelist(
      _addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    batchRemoveFromWhitelist(
      _addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deposit(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    disableWhitelist(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    enableWhitelist(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    ethToSwETHRate(overrides?: CallOverrides): Promise<BigNumber>;

    getRate(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initialize(
      _accessControlManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    lastRepriceETHReserves(overrides?: CallOverrides): Promise<BigNumber>;

    lastRepriceUNIX(overrides?: CallOverrides): Promise<BigNumber>;

    maximumRepriceDifferencePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    maximumRepriceswETHDifferencePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    minimumRepriceTime(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nodeOperatorRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromWhitelist(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    reprice(
      _preRewardETHReserves: PromiseOrValue<BigNumberish>,
      _newETHRewards: PromiseOrValue<BigNumberish>,
      _swETHTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaximumRepriceDifferencePercentage(
      _maximumRepriceDifferencePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaximumRepriceswETHDifferencePercentage(
      _maximumRepriceswETHDifferencePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMinimumRepriceTime(
      _minimumRepriceTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setNodeOperatorRewardPercentage(
      _newNodeOperatorRewardPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSwellTreasuryRewardPercentage(
      _newSwellTreasuryRewardPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swETHToETHRate(overrides?: CallOverrides): Promise<BigNumber>;

    swellTreasuryRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalETHDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    whitelistEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawERC20(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AccessControlManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addToWhitelist(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchAddToWhitelist(
      _addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    batchRemoveFromWhitelist(
      _addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deposit(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    disableWhitelist(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    enableWhitelist(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    ethToSwETHRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _accessControlManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    lastRepriceETHReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRepriceUNIX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maximumRepriceDifferencePercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maximumRepriceswETHDifferencePercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumRepriceTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nodeOperatorRewardPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromWhitelist(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    reprice(
      _preRewardETHReserves: PromiseOrValue<BigNumberish>,
      _newETHRewards: PromiseOrValue<BigNumberish>,
      _swETHTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaximumRepriceDifferencePercentage(
      _maximumRepriceDifferencePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaximumRepriceswETHDifferencePercentage(
      _maximumRepriceswETHDifferencePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMinimumRepriceTime(
      _minimumRepriceTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setNodeOperatorRewardPercentage(
      _newNodeOperatorRewardPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSwellTreasuryRewardPercentage(
      _newSwellTreasuryRewardPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swETHToETHRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swellTreasuryRewardPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalETHDeposited(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    whitelistEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistedAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawERC20(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
