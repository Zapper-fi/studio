/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface CoslendComptrollerInterface extends utils.Interface {
  functions: {
    '_setBorrowPaused(address,bool)': FunctionFragment;
    '_setCloseFactor(uint256)': FunctionFragment;
    '_setCollateralFactor(address,uint256)': FunctionFragment;
    '_setDistributeRewardPaused(bool)': FunctionFragment;
    '_setDistribution(address)': FunctionFragment;
    '_setLiquidateWhiteAddresses(address[])': FunctionFragment;
    '_setLiquidationIncentive(uint256)': FunctionFragment;
    '_setMaintainer(address)': FunctionFragment;
    '_setMarketBorrowCaps(address[],uint256[])': FunctionFragment;
    '_setMarketMintCaps(address[],uint256[])': FunctionFragment;
    '_setMaxAssets(uint256)': FunctionFragment;
    '_setMintPaused(address,bool)': FunctionFragment;
    '_setPriceOracle(address)': FunctionFragment;
    '_setRedeemPaused(address,bool)': FunctionFragment;
    '_setRepayPaused(address,bool)': FunctionFragment;
    '_setSeizePaused(bool)': FunctionFragment;
    '_setTransferPaused(bool)': FunctionFragment;
    '_supportMarket(address)': FunctionFragment;
    'accountAssets(address,uint256)': FunctionFragment;
    'allMarkets(uint256)': FunctionFragment;
    'borrowAllowed(address,address,uint256)': FunctionFragment;
    'borrowCaps(address)': FunctionFragment;
    'borrowPaused()': FunctionFragment;
    'borrowVerify(address,address,uint256)': FunctionFragment;
    'checkMembership(address,address)': FunctionFragment;
    'closeFactorMantissa()': FunctionFragment;
    'distributeRewardPaused()': FunctionFragment;
    'distribution()': FunctionFragment;
    'enterMarkets(address[])': FunctionFragment;
    'exitMarket(address)': FunctionFragment;
    'getAccountLiquidity(address)': FunctionFragment;
    'getAllMarkets()': FunctionFragment;
    'getAssetsIn(address)': FunctionFragment;
    'getHypotheticalAccountLiquidity(address,address,uint256,uint256)': FunctionFragment;
    'initialize()': FunctionFragment;
    'isMarketListed(address)': FunctionFragment;
    'liquidateBorrowAllowed(address,address,address,address,uint256)': FunctionFragment;
    'liquidateBorrowVerify(address,address,address,address,uint256,uint256)': FunctionFragment;
    'liquidateCalculateSeizeTokens(address,address,uint256)': FunctionFragment;
    'liquidateWhiteAddresses(uint256)': FunctionFragment;
    'liquidationIncentiveMantissa()': FunctionFragment;
    'maintainer()': FunctionFragment;
    'marketTokenBorrowPaused(address)': FunctionFragment;
    'marketTokenMintPaused(address)': FunctionFragment;
    'marketTokenRedeemPaused(address)': FunctionFragment;
    'marketTokenRepayPaused(address)': FunctionFragment;
    'markets(address)': FunctionFragment;
    'maxAssets()': FunctionFragment;
    'mintAllowed(address,address,uint256)': FunctionFragment;
    'mintCaps(address)': FunctionFragment;
    'mintPaused()': FunctionFragment;
    'mintVerify(address,address,uint256,uint256)': FunctionFragment;
    'oracle()': FunctionFragment;
    'owner()': FunctionFragment;
    'redeemAllowed(address,address,uint256)': FunctionFragment;
    'redeemPaused()': FunctionFragment;
    'redeemVerify(address,address,uint256,uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'repayBorrowAllowed(address,address,address,uint256)': FunctionFragment;
    'repayBorrowVerify(address,address,address,uint256,uint256)': FunctionFragment;
    'repayPaused()': FunctionFragment;
    'seizeAllowed(address,address,address,address,uint256)': FunctionFragment;
    'seizePaused()': FunctionFragment;
    'seizeVerify(address,address,address,address,uint256)': FunctionFragment;
    'transferAllowed(address,address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'transferPaused()': FunctionFragment;
    'transferVerify(address,address,address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | '_setBorrowPaused'
      | '_setCloseFactor'
      | '_setCollateralFactor'
      | '_setDistributeRewardPaused'
      | '_setDistribution'
      | '_setLiquidateWhiteAddresses'
      | '_setLiquidationIncentive'
      | '_setMaintainer'
      | '_setMarketBorrowCaps'
      | '_setMarketMintCaps'
      | '_setMaxAssets'
      | '_setMintPaused'
      | '_setPriceOracle'
      | '_setRedeemPaused'
      | '_setRepayPaused'
      | '_setSeizePaused'
      | '_setTransferPaused'
      | '_supportMarket'
      | 'accountAssets'
      | 'allMarkets'
      | 'borrowAllowed'
      | 'borrowCaps'
      | 'borrowPaused'
      | 'borrowVerify'
      | 'checkMembership'
      | 'closeFactorMantissa'
      | 'distributeRewardPaused'
      | 'distribution'
      | 'enterMarkets'
      | 'exitMarket'
      | 'getAccountLiquidity'
      | 'getAllMarkets'
      | 'getAssetsIn'
      | 'getHypotheticalAccountLiquidity'
      | 'initialize'
      | 'isMarketListed'
      | 'liquidateBorrowAllowed'
      | 'liquidateBorrowVerify'
      | 'liquidateCalculateSeizeTokens'
      | 'liquidateWhiteAddresses'
      | 'liquidationIncentiveMantissa'
      | 'maintainer'
      | 'marketTokenBorrowPaused'
      | 'marketTokenMintPaused'
      | 'marketTokenRedeemPaused'
      | 'marketTokenRepayPaused'
      | 'markets'
      | 'maxAssets'
      | 'mintAllowed'
      | 'mintCaps'
      | 'mintPaused'
      | 'mintVerify'
      | 'oracle'
      | 'owner'
      | 'redeemAllowed'
      | 'redeemPaused'
      | 'redeemVerify'
      | 'renounceOwnership'
      | 'repayBorrowAllowed'
      | 'repayBorrowVerify'
      | 'repayPaused'
      | 'seizeAllowed'
      | 'seizePaused'
      | 'seizeVerify'
      | 'transferAllowed'
      | 'transferOwnership'
      | 'transferPaused'
      | 'transferVerify',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: '_setBorrowPaused',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: '_setCloseFactor', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: '_setCollateralFactor',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: '_setDistributeRewardPaused', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: '_setDistribution', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: '_setLiquidateWhiteAddresses', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: '_setLiquidationIncentive', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: '_setMaintainer', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: '_setMarketBorrowCaps',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(
    functionFragment: '_setMarketMintCaps',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(functionFragment: '_setMaxAssets', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: '_setMintPaused',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: '_setPriceOracle', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: '_setRedeemPaused',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: '_setRepayPaused',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: '_setSeizePaused', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: '_setTransferPaused', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: '_supportMarket', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'accountAssets',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'allMarkets', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'borrowAllowed',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'borrowCaps', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'borrowPaused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'borrowVerify',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'checkMembership',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'closeFactorMantissa', values?: undefined): string;
  encodeFunctionData(functionFragment: 'distributeRewardPaused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'distribution', values?: undefined): string;
  encodeFunctionData(functionFragment: 'enterMarkets', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'exitMarket', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAccountLiquidity', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAllMarkets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAssetsIn', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getHypotheticalAccountLiquidity',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'initialize', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isMarketListed', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'liquidateBorrowAllowed',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateBorrowVerify',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateCalculateSeizeTokens',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'liquidateWhiteAddresses', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'liquidationIncentiveMantissa', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maintainer', values?: undefined): string;
  encodeFunctionData(functionFragment: 'marketTokenBorrowPaused', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'marketTokenMintPaused', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'marketTokenRedeemPaused', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'marketTokenRepayPaused', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'markets', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maxAssets', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'mintAllowed',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'mintCaps', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'mintPaused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'mintVerify',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'oracle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'redeemAllowed',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'redeemPaused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'redeemVerify',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'repayBorrowAllowed',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'repayBorrowVerify',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'repayPaused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'seizeAllowed',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'seizePaused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'seizeVerify',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferAllowed',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'transferPaused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transferVerify',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: '_setBorrowPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setCloseFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setCollateralFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setDistributeRewardPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setDistribution', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setLiquidateWhiteAddresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setLiquidationIncentive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setMaintainer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setMarketBorrowCaps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setMarketMintCaps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setMaxAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setMintPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setPriceOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setRedeemPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setRepayPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setSeizePaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setTransferPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_supportMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowCaps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkMembership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeFactorMantissa', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distributeRewardPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distribution', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enterMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exitMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAssetsIn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getHypotheticalAccountLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isMarketListed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateBorrowAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateBorrowVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateCalculateSeizeTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateWhiteAddresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidationIncentiveMantissa', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maintainer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketTokenBorrowPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketTokenMintPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketTokenRedeemPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketTokenRepayPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'markets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintCaps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'oracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayBorrowAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayBorrowVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'seizeAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'seizePaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'seizeVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferVerify', data: BytesLike): Result;

  events: {
    'ActionPaused(address,string,bool)': EventFragment;
    'ActionPausedGlobally(string,bool)': EventFragment;
    'Failure(uint256,uint256,uint256)': EventFragment;
    'MarketEntered(address,address)': EventFragment;
    'MarketExited(address,address)': EventFragment;
    'MarketListed(address)': EventFragment;
    'NewBorrowCap(address,uint256)': EventFragment;
    'NewCloseFactor(uint256,uint256)': EventFragment;
    'NewCollateralFactor(address,uint256,uint256)': EventFragment;
    'NewDistribution(address,address)': EventFragment;
    'NewLiquidationIncentive(uint256,uint256)': EventFragment;
    'NewMaintainer(address,address)': EventFragment;
    'NewMaxAssets(uint256,uint256)': EventFragment;
    'NewMintCap(address,uint256)': EventFragment;
    'NewPriceOracle(address,address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ActionPaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ActionPausedGlobally'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Failure'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketEntered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketExited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketListed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewBorrowCap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewCloseFactor'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewCollateralFactor'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewDistribution'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewLiquidationIncentive'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewMaintainer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewMaxAssets'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewMintCap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewPriceOracle'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export interface ActionPausedEventObject {
  marketToken: string;
  action: string;
  pauseState: boolean;
}
export type ActionPausedEvent = TypedEvent<[string, string, boolean], ActionPausedEventObject>;

export type ActionPausedEventFilter = TypedEventFilter<ActionPausedEvent>;

export interface ActionPausedGloballyEventObject {
  action: string;
  pauseState: boolean;
}
export type ActionPausedGloballyEvent = TypedEvent<[string, boolean], ActionPausedGloballyEventObject>;

export type ActionPausedGloballyEventFilter = TypedEventFilter<ActionPausedGloballyEvent>;

export interface FailureEventObject {
  error: BigNumber;
  info: BigNumber;
  detail: BigNumber;
}
export type FailureEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], FailureEventObject>;

export type FailureEventFilter = TypedEventFilter<FailureEvent>;

export interface MarketEnteredEventObject {
  marketToken: string;
  account: string;
}
export type MarketEnteredEvent = TypedEvent<[string, string], MarketEnteredEventObject>;

export type MarketEnteredEventFilter = TypedEventFilter<MarketEnteredEvent>;

export interface MarketExitedEventObject {
  marketToken: string;
  account: string;
}
export type MarketExitedEvent = TypedEvent<[string, string], MarketExitedEventObject>;

export type MarketExitedEventFilter = TypedEventFilter<MarketExitedEvent>;

export interface MarketListedEventObject {
  marketToken: string;
}
export type MarketListedEvent = TypedEvent<[string], MarketListedEventObject>;

export type MarketListedEventFilter = TypedEventFilter<MarketListedEvent>;

export interface NewBorrowCapEventObject {
  marketToken: string;
  newBorrowCap: BigNumber;
}
export type NewBorrowCapEvent = TypedEvent<[string, BigNumber], NewBorrowCapEventObject>;

export type NewBorrowCapEventFilter = TypedEventFilter<NewBorrowCapEvent>;

export interface NewCloseFactorEventObject {
  oldCloseFactorMantissa: BigNumber;
  newCloseFactorMantissa: BigNumber;
}
export type NewCloseFactorEvent = TypedEvent<[BigNumber, BigNumber], NewCloseFactorEventObject>;

export type NewCloseFactorEventFilter = TypedEventFilter<NewCloseFactorEvent>;

export interface NewCollateralFactorEventObject {
  marketToken: string;
  oldCollateralFactorMantissa: BigNumber;
  newCollateralFactorMantissa: BigNumber;
}
export type NewCollateralFactorEvent = TypedEvent<[string, BigNumber, BigNumber], NewCollateralFactorEventObject>;

export type NewCollateralFactorEventFilter = TypedEventFilter<NewCollateralFactorEvent>;

export interface NewDistributionEventObject {
  oldDistribution: string;
  distribution: string;
}
export type NewDistributionEvent = TypedEvent<[string, string], NewDistributionEventObject>;

export type NewDistributionEventFilter = TypedEventFilter<NewDistributionEvent>;

export interface NewLiquidationIncentiveEventObject {
  oldLiquidationIncentiveMantissa: BigNumber;
  newLiquidationIncentiveMantissa: BigNumber;
}
export type NewLiquidationIncentiveEvent = TypedEvent<[BigNumber, BigNumber], NewLiquidationIncentiveEventObject>;

export type NewLiquidationIncentiveEventFilter = TypedEventFilter<NewLiquidationIncentiveEvent>;

export interface NewMaintainerEventObject {
  oldMaintainer: string;
  maintainer: string;
}
export type NewMaintainerEvent = TypedEvent<[string, string], NewMaintainerEventObject>;

export type NewMaintainerEventFilter = TypedEventFilter<NewMaintainerEvent>;

export interface NewMaxAssetsEventObject {
  oldMaxAssets: BigNumber;
  newMaxAssets: BigNumber;
}
export type NewMaxAssetsEvent = TypedEvent<[BigNumber, BigNumber], NewMaxAssetsEventObject>;

export type NewMaxAssetsEventFilter = TypedEventFilter<NewMaxAssetsEvent>;

export interface NewMintCapEventObject {
  marketToken: string;
  newMintCap: BigNumber;
}
export type NewMintCapEvent = TypedEvent<[string, BigNumber], NewMintCapEventObject>;

export type NewMintCapEventFilter = TypedEventFilter<NewMintCapEvent>;

export interface NewPriceOracleEventObject {
  oldPriceOracle: string;
  newPriceOracle: string;
}
export type NewPriceOracleEvent = TypedEvent<[string, string], NewPriceOracleEventObject>;

export type NewPriceOracleEventFilter = TypedEventFilter<NewPriceOracleEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface CoslendComptroller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CoslendComptrollerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _setBorrowPaused(
      marketToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setCloseFactor(
      newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setCollateralFactor(
      marketToken: PromiseOrValue<string>,
      newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setDistributeRewardPaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setDistribution(
      newDistribution: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setLiquidateWhiteAddresses(
      _liquidateWhiteAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setMaintainer(
      newMaintainer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setMarketBorrowCaps(
      marketTokens: PromiseOrValue<string>[],
      newBorrowCaps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setMarketMintCaps(
      marketTokens: PromiseOrValue<string>[],
      newMintCaps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setMaxAssets(
      newMaxAssets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setMintPaused(
      marketToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setPriceOracle(
      newOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setRedeemPaused(
      marketToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setRepayPaused(
      marketToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setSeizePaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setTransferPaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _supportMarket(
      marketToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    accountAssets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    borrowAllowed(
      marketToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    borrowCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowPaused(overrides?: CallOverrides): Promise<[boolean]>;

    borrowVerify(
      marketToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    checkMembership(
      account: PromiseOrValue<string>,
      marketToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    distributeRewardPaused(overrides?: CallOverrides): Promise<[boolean]>;

    distribution(overrides?: CallOverrides): Promise<[string]>;

    enterMarkets(
      marketTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    exitMarket(
      marketTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getAccountLiquidity(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getAllMarkets(overrides?: CallOverrides): Promise<[string[]]>;

    getAssetsIn(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string[]]>;

    getHypotheticalAccountLiquidity(
      account: PromiseOrValue<string>,
      marketTokenModify: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    isMarketListed(marketToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    liquidateBorrowAllowed(
      marketTokenBorrowed: PromiseOrValue<string>,
      marketTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    liquidateBorrowVerify(
      marketTokenBorrowed: PromiseOrValue<string>,
      marketTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    liquidateCalculateSeizeTokens(
      marketTokenBorrowed: PromiseOrValue<string>,
      marketTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    liquidateWhiteAddresses(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    maintainer(overrides?: CallOverrides): Promise<[string]>;

    marketTokenBorrowPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    marketTokenMintPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    marketTokenRedeemPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    marketTokenRepayPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    markets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, BigNumber] & {
        isListed: boolean;
        collateralFactorMantissa: BigNumber;
      }
    >;

    maxAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintAllowed(
      marketToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mintCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    mintPaused(overrides?: CallOverrides): Promise<[boolean]>;

    mintVerify(
      marketToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      mintAmount: PromiseOrValue<BigNumberish>,
      mintTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    redeemAllowed(
      marketToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    redeemPaused(overrides?: CallOverrides): Promise<[boolean]>;

    redeemVerify(
      marketToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemAmount: PromiseOrValue<BigNumberish>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    repayBorrowAllowed(
      marketToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    repayBorrowVerify(
      marketToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      borrowerIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    repayPaused(overrides?: CallOverrides): Promise<[boolean]>;

    seizeAllowed(
      marketTokenCollateral: PromiseOrValue<string>,
      marketTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    seizePaused(overrides?: CallOverrides): Promise<[boolean]>;

    seizeVerify(
      marketTokenCollateral: PromiseOrValue<string>,
      marketTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferAllowed(
      marketToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferPaused(overrides?: CallOverrides): Promise<[boolean]>;

    transferVerify(
      marketToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  _setBorrowPaused(
    marketToken: PromiseOrValue<string>,
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setCloseFactor(
    newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setCollateralFactor(
    marketToken: PromiseOrValue<string>,
    newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setDistributeRewardPaused(
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setDistribution(
    newDistribution: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setLiquidateWhiteAddresses(
    _liquidateWhiteAddresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setLiquidationIncentive(
    newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setMaintainer(
    newMaintainer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setMarketBorrowCaps(
    marketTokens: PromiseOrValue<string>[],
    newBorrowCaps: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setMarketMintCaps(
    marketTokens: PromiseOrValue<string>[],
    newMintCaps: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setMaxAssets(
    newMaxAssets: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setMintPaused(
    marketToken: PromiseOrValue<string>,
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setPriceOracle(
    newOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setRedeemPaused(
    marketToken: PromiseOrValue<string>,
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setRepayPaused(
    marketToken: PromiseOrValue<string>,
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setSeizePaused(
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setTransferPaused(
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _supportMarket(
    marketToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  accountAssets(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  borrowAllowed(
    marketToken: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  borrowCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  borrowPaused(overrides?: CallOverrides): Promise<boolean>;

  borrowVerify(
    marketToken: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  checkMembership(
    account: PromiseOrValue<string>,
    marketToken: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  distributeRewardPaused(overrides?: CallOverrides): Promise<boolean>;

  distribution(overrides?: CallOverrides): Promise<string>;

  enterMarkets(
    marketTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  exitMarket(
    marketTokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getAccountLiquidity(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

  getAssetsIn(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

  getHypotheticalAccountLiquidity(
    account: PromiseOrValue<string>,
    marketTokenModify: PromiseOrValue<string>,
    redeemTokens: PromiseOrValue<BigNumberish>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  isMarketListed(marketToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  liquidateBorrowAllowed(
    marketTokenBorrowed: PromiseOrValue<string>,
    marketTokenCollateral: PromiseOrValue<string>,
    liquidator: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    repayAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  liquidateBorrowVerify(
    marketTokenBorrowed: PromiseOrValue<string>,
    marketTokenCollateral: PromiseOrValue<string>,
    liquidator: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    repayAmount: PromiseOrValue<BigNumberish>,
    seizeTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  liquidateCalculateSeizeTokens(
    marketTokenBorrowed: PromiseOrValue<string>,
    marketTokenCollateral: PromiseOrValue<string>,
    actualRepayAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>;

  liquidateWhiteAddresses(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  maintainer(overrides?: CallOverrides): Promise<string>;

  marketTokenBorrowPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  marketTokenMintPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  marketTokenRedeemPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  marketTokenRepayPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  markets(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [boolean, BigNumber] & {
      isListed: boolean;
      collateralFactorMantissa: BigNumber;
    }
  >;

  maxAssets(overrides?: CallOverrides): Promise<BigNumber>;

  mintAllowed(
    marketToken: PromiseOrValue<string>,
    minter: PromiseOrValue<string>,
    mintAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mintCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  mintPaused(overrides?: CallOverrides): Promise<boolean>;

  mintVerify(
    marketToken: PromiseOrValue<string>,
    minter: PromiseOrValue<string>,
    mintAmount: PromiseOrValue<BigNumberish>,
    mintTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  oracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  redeemAllowed(
    marketToken: PromiseOrValue<string>,
    redeemer: PromiseOrValue<string>,
    redeemTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  redeemPaused(overrides?: CallOverrides): Promise<boolean>;

  redeemVerify(
    marketToken: PromiseOrValue<string>,
    redeemer: PromiseOrValue<string>,
    redeemAmount: PromiseOrValue<BigNumberish>,
    redeemTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  repayBorrowAllowed(
    marketToken: PromiseOrValue<string>,
    payer: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    repayAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  repayBorrowVerify(
    marketToken: PromiseOrValue<string>,
    payer: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    repayAmount: PromiseOrValue<BigNumberish>,
    borrowerIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  repayPaused(overrides?: CallOverrides): Promise<boolean>;

  seizeAllowed(
    marketTokenCollateral: PromiseOrValue<string>,
    marketTokenBorrowed: PromiseOrValue<string>,
    liquidator: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    seizeTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  seizePaused(overrides?: CallOverrides): Promise<boolean>;

  seizeVerify(
    marketTokenCollateral: PromiseOrValue<string>,
    marketTokenBorrowed: PromiseOrValue<string>,
    liquidator: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    seizeTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferAllowed(
    marketToken: PromiseOrValue<string>,
    src: PromiseOrValue<string>,
    dst: PromiseOrValue<string>,
    transferTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferPaused(overrides?: CallOverrides): Promise<boolean>;

  transferVerify(
    marketToken: PromiseOrValue<string>,
    src: PromiseOrValue<string>,
    dst: PromiseOrValue<string>,
    transferTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    _setBorrowPaused(
      marketToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    _setCloseFactor(
      newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    _setCollateralFactor(
      marketToken: PromiseOrValue<string>,
      newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    _setDistributeRewardPaused(state: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<boolean>;

    _setDistribution(newDistribution: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    _setLiquidateWhiteAddresses(
      _liquidateWhiteAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    _setMaintainer(newMaintainer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    _setMarketBorrowCaps(
      marketTokens: PromiseOrValue<string>[],
      newBorrowCaps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    _setMarketMintCaps(
      marketTokens: PromiseOrValue<string>[],
      newMintCaps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    _setMaxAssets(newMaxAssets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    _setMintPaused(
      marketToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    _setPriceOracle(newOracle: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    _setRedeemPaused(
      marketToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    _setRepayPaused(
      marketToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    _setSeizePaused(state: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<boolean>;

    _setTransferPaused(state: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<boolean>;

    _supportMarket(marketToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    accountAssets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    borrowAllowed(
      marketToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    borrowCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowPaused(overrides?: CallOverrides): Promise<boolean>;

    borrowVerify(
      marketToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    checkMembership(
      account: PromiseOrValue<string>,
      marketToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    distributeRewardPaused(overrides?: CallOverrides): Promise<boolean>;

    distribution(overrides?: CallOverrides): Promise<string>;

    enterMarkets(marketTokens: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<BigNumber[]>;

    exitMarket(marketTokenAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountLiquidity(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

    getAssetsIn(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

    getHypotheticalAccountLiquidity(
      account: PromiseOrValue<string>,
      marketTokenModify: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isMarketListed(marketToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    liquidateBorrowAllowed(
      marketTokenBorrowed: PromiseOrValue<string>,
      marketTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    liquidateBorrowVerify(
      marketTokenBorrowed: PromiseOrValue<string>,
      marketTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    liquidateCalculateSeizeTokens(
      marketTokenBorrowed: PromiseOrValue<string>,
      marketTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    liquidateWhiteAddresses(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    maintainer(overrides?: CallOverrides): Promise<string>;

    marketTokenBorrowPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    marketTokenMintPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    marketTokenRedeemPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    marketTokenRepayPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    markets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, BigNumber] & {
        isListed: boolean;
        collateralFactorMantissa: BigNumber;
      }
    >;

    maxAssets(overrides?: CallOverrides): Promise<BigNumber>;

    mintAllowed(
      marketToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mintCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    mintPaused(overrides?: CallOverrides): Promise<boolean>;

    mintVerify(
      marketToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      mintAmount: PromiseOrValue<BigNumberish>,
      mintTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    oracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    redeemAllowed(
      marketToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    redeemPaused(overrides?: CallOverrides): Promise<boolean>;

    redeemVerify(
      marketToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemAmount: PromiseOrValue<BigNumberish>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repayBorrowAllowed(
      marketToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    repayBorrowVerify(
      marketToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      borrowerIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    repayPaused(overrides?: CallOverrides): Promise<boolean>;

    seizeAllowed(
      marketTokenCollateral: PromiseOrValue<string>,
      marketTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    seizePaused(overrides?: CallOverrides): Promise<boolean>;

    seizeVerify(
      marketTokenCollateral: PromiseOrValue<string>,
      marketTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferAllowed(
      marketToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    transferPaused(overrides?: CallOverrides): Promise<boolean>;

    transferVerify(
      marketToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'ActionPaused(address,string,bool)'(marketToken?: null, action?: null, pauseState?: null): ActionPausedEventFilter;
    ActionPaused(marketToken?: null, action?: null, pauseState?: null): ActionPausedEventFilter;

    'ActionPausedGlobally(string,bool)'(action?: null, pauseState?: null): ActionPausedGloballyEventFilter;
    ActionPausedGlobally(action?: null, pauseState?: null): ActionPausedGloballyEventFilter;

    'Failure(uint256,uint256,uint256)'(error?: null, info?: null, detail?: null): FailureEventFilter;
    Failure(error?: null, info?: null, detail?: null): FailureEventFilter;

    'MarketEntered(address,address)'(marketToken?: null, account?: null): MarketEnteredEventFilter;
    MarketEntered(marketToken?: null, account?: null): MarketEnteredEventFilter;

    'MarketExited(address,address)'(marketToken?: null, account?: null): MarketExitedEventFilter;
    MarketExited(marketToken?: null, account?: null): MarketExitedEventFilter;

    'MarketListed(address)'(marketToken?: null): MarketListedEventFilter;
    MarketListed(marketToken?: null): MarketListedEventFilter;

    'NewBorrowCap(address,uint256)'(
      marketToken?: PromiseOrValue<string> | null,
      newBorrowCap?: null,
    ): NewBorrowCapEventFilter;
    NewBorrowCap(marketToken?: PromiseOrValue<string> | null, newBorrowCap?: null): NewBorrowCapEventFilter;

    'NewCloseFactor(uint256,uint256)'(
      oldCloseFactorMantissa?: null,
      newCloseFactorMantissa?: null,
    ): NewCloseFactorEventFilter;
    NewCloseFactor(oldCloseFactorMantissa?: null, newCloseFactorMantissa?: null): NewCloseFactorEventFilter;

    'NewCollateralFactor(address,uint256,uint256)'(
      marketToken?: null,
      oldCollateralFactorMantissa?: null,
      newCollateralFactorMantissa?: null,
    ): NewCollateralFactorEventFilter;
    NewCollateralFactor(
      marketToken?: null,
      oldCollateralFactorMantissa?: null,
      newCollateralFactorMantissa?: null,
    ): NewCollateralFactorEventFilter;

    'NewDistribution(address,address)'(oldDistribution?: null, distribution?: null): NewDistributionEventFilter;
    NewDistribution(oldDistribution?: null, distribution?: null): NewDistributionEventFilter;

    'NewLiquidationIncentive(uint256,uint256)'(
      oldLiquidationIncentiveMantissa?: null,
      newLiquidationIncentiveMantissa?: null,
    ): NewLiquidationIncentiveEventFilter;
    NewLiquidationIncentive(
      oldLiquidationIncentiveMantissa?: null,
      newLiquidationIncentiveMantissa?: null,
    ): NewLiquidationIncentiveEventFilter;

    'NewMaintainer(address,address)'(oldMaintainer?: null, maintainer?: null): NewMaintainerEventFilter;
    NewMaintainer(oldMaintainer?: null, maintainer?: null): NewMaintainerEventFilter;

    'NewMaxAssets(uint256,uint256)'(oldMaxAssets?: null, newMaxAssets?: null): NewMaxAssetsEventFilter;
    NewMaxAssets(oldMaxAssets?: null, newMaxAssets?: null): NewMaxAssetsEventFilter;

    'NewMintCap(address,uint256)'(
      marketToken?: PromiseOrValue<string> | null,
      newMintCap?: null,
    ): NewMintCapEventFilter;
    NewMintCap(marketToken?: PromiseOrValue<string> | null, newMintCap?: null): NewMintCapEventFilter;

    'NewPriceOracle(address,address)'(oldPriceOracle?: null, newPriceOracle?: null): NewPriceOracleEventFilter;
    NewPriceOracle(oldPriceOracle?: null, newPriceOracle?: null): NewPriceOracleEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    _setBorrowPaused(
      marketToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setCloseFactor(
      newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setCollateralFactor(
      marketToken: PromiseOrValue<string>,
      newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setDistributeRewardPaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setDistribution(
      newDistribution: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setLiquidateWhiteAddresses(
      _liquidateWhiteAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setMaintainer(
      newMaintainer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setMarketBorrowCaps(
      marketTokens: PromiseOrValue<string>[],
      newBorrowCaps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setMarketMintCaps(
      marketTokens: PromiseOrValue<string>[],
      newMintCaps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setMaxAssets(
      newMaxAssets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setMintPaused(
      marketToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setPriceOracle(
      newOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setRedeemPaused(
      marketToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setRepayPaused(
      marketToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setSeizePaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setTransferPaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _supportMarket(
      marketToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    accountAssets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowAllowed(
      marketToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    borrowCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowPaused(overrides?: CallOverrides): Promise<BigNumber>;

    borrowVerify(
      marketToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    checkMembership(
      account: PromiseOrValue<string>,
      marketToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    distributeRewardPaused(overrides?: CallOverrides): Promise<BigNumber>;

    distribution(overrides?: CallOverrides): Promise<BigNumber>;

    enterMarkets(
      marketTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    exitMarket(
      marketTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getAccountLiquidity(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAllMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetsIn(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getHypotheticalAccountLiquidity(
      account: PromiseOrValue<string>,
      marketTokenModify: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    isMarketListed(marketToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    liquidateBorrowAllowed(
      marketTokenBorrowed: PromiseOrValue<string>,
      marketTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    liquidateBorrowVerify(
      marketTokenBorrowed: PromiseOrValue<string>,
      marketTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    liquidateCalculateSeizeTokens(
      marketTokenBorrowed: PromiseOrValue<string>,
      marketTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    liquidateWhiteAddresses(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    maintainer(overrides?: CallOverrides): Promise<BigNumber>;

    marketTokenBorrowPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    marketTokenMintPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    marketTokenRedeemPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    marketTokenRepayPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    markets(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxAssets(overrides?: CallOverrides): Promise<BigNumber>;

    mintAllowed(
      marketToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mintCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    mintPaused(overrides?: CallOverrides): Promise<BigNumber>;

    mintVerify(
      marketToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      mintAmount: PromiseOrValue<BigNumberish>,
      mintTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    redeemAllowed(
      marketToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    redeemPaused(overrides?: CallOverrides): Promise<BigNumber>;

    redeemVerify(
      marketToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemAmount: PromiseOrValue<BigNumberish>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    repayBorrowAllowed(
      marketToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    repayBorrowVerify(
      marketToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      borrowerIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    repayPaused(overrides?: CallOverrides): Promise<BigNumber>;

    seizeAllowed(
      marketTokenCollateral: PromiseOrValue<string>,
      marketTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    seizePaused(overrides?: CallOverrides): Promise<BigNumber>;

    seizeVerify(
      marketTokenCollateral: PromiseOrValue<string>,
      marketTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferAllowed(
      marketToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferPaused(overrides?: CallOverrides): Promise<BigNumber>;

    transferVerify(
      marketToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _setBorrowPaused(
      marketToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setCloseFactor(
      newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setCollateralFactor(
      marketToken: PromiseOrValue<string>,
      newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setDistributeRewardPaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setDistribution(
      newDistribution: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setLiquidateWhiteAddresses(
      _liquidateWhiteAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setMaintainer(
      newMaintainer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setMarketBorrowCaps(
      marketTokens: PromiseOrValue<string>[],
      newBorrowCaps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setMarketMintCaps(
      marketTokens: PromiseOrValue<string>[],
      newMintCaps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setMaxAssets(
      newMaxAssets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setMintPaused(
      marketToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setPriceOracle(
      newOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setRedeemPaused(
      marketToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setRepayPaused(
      marketToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setSeizePaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setTransferPaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _supportMarket(
      marketToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    accountAssets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowAllowed(
      marketToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    borrowCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowVerify(
      marketToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    checkMembership(
      account: PromiseOrValue<string>,
      marketToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeRewardPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distribution(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enterMarkets(
      marketTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    exitMarket(
      marketTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getAccountLiquidity(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetsIn(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHypotheticalAccountLiquidity(
      account: PromiseOrValue<string>,
      marketTokenModify: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    isMarketListed(marketToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateBorrowAllowed(
      marketTokenBorrowed: PromiseOrValue<string>,
      marketTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    liquidateBorrowVerify(
      marketTokenBorrowed: PromiseOrValue<string>,
      marketTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    liquidateCalculateSeizeTokens(
      marketTokenBorrowed: PromiseOrValue<string>,
      marketTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    liquidateWhiteAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maintainer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketTokenBorrowPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketTokenMintPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketTokenRedeemPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketTokenRepayPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    markets(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintAllowed(
      marketToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mintCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintVerify(
      marketToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      mintAmount: PromiseOrValue<BigNumberish>,
      mintTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemAllowed(
      marketToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    redeemPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemVerify(
      marketToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemAmount: PromiseOrValue<BigNumberish>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    repayBorrowAllowed(
      marketToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    repayBorrowVerify(
      marketToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      borrowerIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    repayPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seizeAllowed(
      marketTokenCollateral: PromiseOrValue<string>,
      marketTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    seizePaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seizeVerify(
      marketTokenCollateral: PromiseOrValue<string>,
      marketTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferAllowed(
      marketToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferVerify(
      marketToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
