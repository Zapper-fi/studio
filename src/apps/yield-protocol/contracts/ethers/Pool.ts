/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface PoolInterface extends utils.Interface {
  functions: {
    'DOMAIN_SEPARATOR()': FunctionFragment;
    'PERMIT_TYPEHASH()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'base()': FunctionFragment;
    'burn(address,address,uint256,uint256)': FunctionFragment;
    'burnForBase(address,uint256,uint256)': FunctionFragment;
    'buyBase(address,uint128,uint128)': FunctionFragment;
    'buyBasePreview(uint128)': FunctionFragment;
    'buyFYToken(address,uint128,uint128)': FunctionFragment;
    'buyFYTokenPreview(uint128)': FunctionFragment;
    'cumulativeBalancesRatio()': FunctionFragment;
    'decimals()': FunctionFragment;
    'deploymentChainId()': FunctionFragment;
    'fyToken()': FunctionFragment;
    'g1()': FunctionFragment;
    'g2()': FunctionFragment;
    'getBaseBalance()': FunctionFragment;
    'getCache()': FunctionFragment;
    'getFYTokenBalance()': FunctionFragment;
    'maturity()': FunctionFragment;
    'mint(address,address,uint256,uint256)': FunctionFragment;
    'mintWithBase(address,address,uint256,uint256,uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'retrieveBase(address)': FunctionFragment;
    'retrieveFYToken(address)': FunctionFragment;
    'scaleFactor()': FunctionFragment;
    'sellBase(address,uint128)': FunctionFragment;
    'sellBasePreview(uint128)': FunctionFragment;
    'sellFYToken(address,uint128)': FunctionFragment;
    'sellFYTokenPreview(uint128)': FunctionFragment;
    'symbol()': FunctionFragment;
    'sync()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'ts()': FunctionFragment;
    'version()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DOMAIN_SEPARATOR'
      | 'PERMIT_TYPEHASH'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'base'
      | 'burn'
      | 'burnForBase'
      | 'buyBase'
      | 'buyBasePreview'
      | 'buyFYToken'
      | 'buyFYTokenPreview'
      | 'cumulativeBalancesRatio'
      | 'decimals'
      | 'deploymentChainId'
      | 'fyToken'
      | 'g1'
      | 'g2'
      | 'getBaseBalance'
      | 'getCache'
      | 'getFYTokenBalance'
      | 'maturity'
      | 'mint'
      | 'mintWithBase'
      | 'name'
      | 'nonces'
      | 'permit'
      | 'retrieveBase'
      | 'retrieveFYToken'
      | 'scaleFactor'
      | 'sellBase'
      | 'sellBasePreview'
      | 'sellFYToken'
      | 'sellFYTokenPreview'
      | 'symbol'
      | 'sync'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'ts'
      | 'version',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PERMIT_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'base', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'burn',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'burnForBase',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'buyBase',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'buyBasePreview', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'buyFYToken',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'buyFYTokenPreview', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'cumulativeBalancesRatio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deploymentChainId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'fyToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'g1', values?: undefined): string;
  encodeFunctionData(functionFragment: 'g2', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getBaseBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getCache', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getFYTokenBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maturity', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'mintWithBase',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'permit',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'retrieveBase', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'retrieveFYToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'scaleFactor', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'sellBase',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'sellBasePreview', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'sellFYToken',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'sellFYTokenPreview', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'sync', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'ts', values?: undefined): string;
  encodeFunctionData(functionFragment: 'version', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PERMIT_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'base', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burnForBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'buyBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'buyBasePreview', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'buyFYToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'buyFYTokenPreview', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cumulativeBalancesRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deploymentChainId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fyToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'g1', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'g2', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBaseBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCache', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFYTokenBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maturity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintWithBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'retrieveBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'retrieveFYToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'scaleFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sellBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sellBasePreview', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sellFYToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sellFYTokenPreview', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sync', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Liquidity(uint32,address,address,address,int256,int256,int256)': EventFragment;
    'Sync(uint112,uint112,uint256)': EventFragment;
    'Trade(uint32,address,address,int256,int256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Liquidity'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Sync'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Trade'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface LiquidityEventObject {
  maturity: number;
  from: string;
  to: string;
  fyTokenTo: string;
  bases: BigNumber;
  fyTokens: BigNumber;
  poolTokens: BigNumber;
}
export type LiquidityEvent = TypedEvent<
  [number, string, string, string, BigNumber, BigNumber, BigNumber],
  LiquidityEventObject
>;

export type LiquidityEventFilter = TypedEventFilter<LiquidityEvent>;

export interface SyncEventObject {
  baseCached: BigNumber;
  fyTokenCached: BigNumber;
  cumulativeBalancesRatio: BigNumber;
}
export type SyncEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], SyncEventObject>;

export type SyncEventFilter = TypedEventFilter<SyncEvent>;

export interface TradeEventObject {
  maturity: number;
  from: string;
  to: string;
  bases: BigNumber;
  fyTokens: BigNumber;
}
export type TradeEvent = TypedEvent<[number, string, string, BigNumber, BigNumber], TradeEventObject>;

export type TradeEventFilter = TypedEventFilter<TradeEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Pool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(guy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    base(overrides?: CallOverrides): Promise<[string]>;

    burn(
      baseTo: PromiseOrValue<string>,
      fyTokenTo: PromiseOrValue<string>,
      minRatio: PromiseOrValue<BigNumberish>,
      maxRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    burnForBase(
      to: PromiseOrValue<string>,
      minRatio: PromiseOrValue<BigNumberish>,
      maxRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    buyBase(
      to: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    buyBasePreview(tokenOut: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    buyFYToken(
      to: PromiseOrValue<string>,
      fyTokenOut: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    buyFYTokenPreview(fyTokenOut: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    cumulativeBalancesRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    deploymentChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    fyToken(overrides?: CallOverrides): Promise<[string]>;

    g1(overrides?: CallOverrides): Promise<[BigNumber]>;

    g2(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBaseBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCache(overrides?: CallOverrides): Promise<[BigNumber, BigNumber, number]>;

    getFYTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    maturity(overrides?: CallOverrides): Promise<[number]>;

    mint(
      to: PromiseOrValue<string>,
      remainder: PromiseOrValue<string>,
      minRatio: PromiseOrValue<BigNumberish>,
      maxRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mintWithBase(
      to: PromiseOrValue<string>,
      remainder: PromiseOrValue<string>,
      fyTokenToBuy: PromiseOrValue<BigNumberish>,
      minRatio: PromiseOrValue<BigNumberish>,
      maxRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    retrieveBase(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    retrieveFYToken(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    scaleFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellBase(
      to: PromiseOrValue<string>,
      min: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    sellBasePreview(baseIn: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    sellFYToken(
      to: PromiseOrValue<string>,
      min: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    sellFYTokenPreview(fyTokenIn: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    sync(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      dst: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    ts(overrides?: CallOverrides): Promise<[BigNumber]>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    wad: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(guy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  base(overrides?: CallOverrides): Promise<string>;

  burn(
    baseTo: PromiseOrValue<string>,
    fyTokenTo: PromiseOrValue<string>,
    minRatio: PromiseOrValue<BigNumberish>,
    maxRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  burnForBase(
    to: PromiseOrValue<string>,
    minRatio: PromiseOrValue<BigNumberish>,
    maxRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  buyBase(
    to: PromiseOrValue<string>,
    tokenOut: PromiseOrValue<BigNumberish>,
    max: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  buyBasePreview(tokenOut: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  buyFYToken(
    to: PromiseOrValue<string>,
    fyTokenOut: PromiseOrValue<BigNumberish>,
    max: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  buyFYTokenPreview(fyTokenOut: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  cumulativeBalancesRatio(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  deploymentChainId(overrides?: CallOverrides): Promise<BigNumber>;

  fyToken(overrides?: CallOverrides): Promise<string>;

  g1(overrides?: CallOverrides): Promise<BigNumber>;

  g2(overrides?: CallOverrides): Promise<BigNumber>;

  getBaseBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getCache(overrides?: CallOverrides): Promise<[BigNumber, BigNumber, number]>;

  getFYTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  maturity(overrides?: CallOverrides): Promise<number>;

  mint(
    to: PromiseOrValue<string>,
    remainder: PromiseOrValue<string>,
    minRatio: PromiseOrValue<BigNumberish>,
    maxRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mintWithBase(
    to: PromiseOrValue<string>,
    remainder: PromiseOrValue<string>,
    fyTokenToBuy: PromiseOrValue<BigNumberish>,
    minRatio: PromiseOrValue<BigNumberish>,
    maxRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  permit(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  retrieveBase(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  retrieveFYToken(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  scaleFactor(overrides?: CallOverrides): Promise<BigNumber>;

  sellBase(
    to: PromiseOrValue<string>,
    min: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  sellBasePreview(baseIn: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  sellFYToken(
    to: PromiseOrValue<string>,
    min: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  sellFYTokenPreview(fyTokenIn: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  sync(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    dst: PromiseOrValue<string>,
    wad: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    src: PromiseOrValue<string>,
    dst: PromiseOrValue<string>,
    wad: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  ts(overrides?: CallOverrides): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    balanceOf(guy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    base(overrides?: CallOverrides): Promise<string>;

    burn(
      baseTo: PromiseOrValue<string>,
      fyTokenTo: PromiseOrValue<string>,
      minRatio: PromiseOrValue<BigNumberish>,
      maxRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    burnForBase(
      to: PromiseOrValue<string>,
      minRatio: PromiseOrValue<BigNumberish>,
      maxRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { tokensBurned: BigNumber; baseOut: BigNumber }>;

    buyBase(
      to: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    buyBasePreview(tokenOut: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    buyFYToken(
      to: PromiseOrValue<string>,
      fyTokenOut: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    buyFYTokenPreview(fyTokenOut: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    cumulativeBalancesRatio(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    deploymentChainId(overrides?: CallOverrides): Promise<BigNumber>;

    fyToken(overrides?: CallOverrides): Promise<string>;

    g1(overrides?: CallOverrides): Promise<BigNumber>;

    g2(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getCache(overrides?: CallOverrides): Promise<[BigNumber, BigNumber, number]>;

    getFYTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    maturity(overrides?: CallOverrides): Promise<number>;

    mint(
      to: PromiseOrValue<string>,
      remainder: PromiseOrValue<string>,
      minRatio: PromiseOrValue<BigNumberish>,
      maxRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    mintWithBase(
      to: PromiseOrValue<string>,
      remainder: PromiseOrValue<string>,
      fyTokenToBuy: PromiseOrValue<BigNumberish>,
      minRatio: PromiseOrValue<BigNumberish>,
      maxRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    retrieveBase(to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    retrieveFYToken(to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    scaleFactor(overrides?: CallOverrides): Promise<BigNumber>;

    sellBase(
      to: PromiseOrValue<string>,
      min: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    sellBasePreview(baseIn: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    sellFYToken(
      to: PromiseOrValue<string>,
      min: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    sellFYTokenPreview(fyTokenIn: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    sync(overrides?: CallOverrides): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    ts(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'Liquidity(uint32,address,address,address,int256,int256,int256)'(
      maturity?: null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      fyTokenTo?: PromiseOrValue<string> | null,
      bases?: null,
      fyTokens?: null,
      poolTokens?: null,
    ): LiquidityEventFilter;
    Liquidity(
      maturity?: null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      fyTokenTo?: PromiseOrValue<string> | null,
      bases?: null,
      fyTokens?: null,
      poolTokens?: null,
    ): LiquidityEventFilter;

    'Sync(uint112,uint112,uint256)'(
      baseCached?: null,
      fyTokenCached?: null,
      cumulativeBalancesRatio?: null,
    ): SyncEventFilter;
    Sync(baseCached?: null, fyTokenCached?: null, cumulativeBalancesRatio?: null): SyncEventFilter;

    'Trade(uint32,address,address,int256,int256)'(
      maturity?: null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      bases?: null,
      fyTokens?: null,
    ): TradeEventFilter;
    Trade(
      maturity?: null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      bases?: null,
      fyTokens?: null,
    ): TradeEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(guy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    base(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      baseTo: PromiseOrValue<string>,
      fyTokenTo: PromiseOrValue<string>,
      minRatio: PromiseOrValue<BigNumberish>,
      maxRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    burnForBase(
      to: PromiseOrValue<string>,
      minRatio: PromiseOrValue<BigNumberish>,
      maxRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    buyBase(
      to: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    buyBasePreview(tokenOut: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    buyFYToken(
      to: PromiseOrValue<string>,
      fyTokenOut: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    buyFYTokenPreview(fyTokenOut: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    cumulativeBalancesRatio(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deploymentChainId(overrides?: CallOverrides): Promise<BigNumber>;

    fyToken(overrides?: CallOverrides): Promise<BigNumber>;

    g1(overrides?: CallOverrides): Promise<BigNumber>;

    g2(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getCache(overrides?: CallOverrides): Promise<BigNumber>;

    getFYTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    maturity(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: PromiseOrValue<string>,
      remainder: PromiseOrValue<string>,
      minRatio: PromiseOrValue<BigNumberish>,
      maxRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mintWithBase(
      to: PromiseOrValue<string>,
      remainder: PromiseOrValue<string>,
      fyTokenToBuy: PromiseOrValue<BigNumberish>,
      minRatio: PromiseOrValue<BigNumberish>,
      maxRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    retrieveBase(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    retrieveFYToken(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    scaleFactor(overrides?: CallOverrides): Promise<BigNumber>;

    sellBase(
      to: PromiseOrValue<string>,
      min: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    sellBasePreview(baseIn: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    sellFYToken(
      to: PromiseOrValue<string>,
      min: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    sellFYTokenPreview(fyTokenIn: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    sync(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    ts(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(guy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    base(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      baseTo: PromiseOrValue<string>,
      fyTokenTo: PromiseOrValue<string>,
      minRatio: PromiseOrValue<BigNumberish>,
      maxRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    burnForBase(
      to: PromiseOrValue<string>,
      minRatio: PromiseOrValue<BigNumberish>,
      maxRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    buyBase(
      to: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    buyBasePreview(tokenOut: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyFYToken(
      to: PromiseOrValue<string>,
      fyTokenOut: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    buyFYTokenPreview(
      fyTokenOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    cumulativeBalancesRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deploymentChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    g1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    g2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBaseBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCache(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFYTokenBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maturity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      to: PromiseOrValue<string>,
      remainder: PromiseOrValue<string>,
      minRatio: PromiseOrValue<BigNumberish>,
      maxRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mintWithBase(
      to: PromiseOrValue<string>,
      remainder: PromiseOrValue<string>,
      fyTokenToBuy: PromiseOrValue<BigNumberish>,
      minRatio: PromiseOrValue<BigNumberish>,
      maxRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    retrieveBase(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    retrieveFYToken(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    scaleFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellBase(
      to: PromiseOrValue<string>,
      min: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    sellBasePreview(baseIn: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellFYToken(
      to: PromiseOrValue<string>,
      min: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    sellFYTokenPreview(
      fyTokenIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sync(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      dst: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    ts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
