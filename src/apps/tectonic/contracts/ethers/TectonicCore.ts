/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface TectonicCoreInterface extends utils.Interface {
  functions: {
    '_addToWhitelistProtect(address[])': FunctionFragment;
    '_become(address)': FunctionFragment;
    '_borrowGuardianPaused()': FunctionFragment;
    '_grantTonic(address,uint256)': FunctionFragment;
    '_mintGuardianPaused()': FunctionFragment;
    '_removeFromWhitelistProtect(address)': FunctionFragment;
    '_setBorrowCapGuardian(address)': FunctionFragment;
    '_setBorrowPaused(address,bool)': FunctionFragment;
    '_setCloseFactor(uint256)': FunctionFragment;
    '_setCollateralFactor(address,uint256)': FunctionFragment;
    '_setContributorTonicSpeed(address,uint256)': FunctionFragment;
    '_setLiquidationIncentive(uint256)': FunctionFragment;
    '_setMarketBorrowCaps(address[],uint256[])': FunctionFragment;
    '_setMintPaused(address,bool)': FunctionFragment;
    '_setPauseGuardian(address)': FunctionFragment;
    '_setPriceOracle(address)': FunctionFragment;
    '_setSeizePaused(bool)': FunctionFragment;
    '_setTonicSpeed(address,uint256)': FunctionFragment;
    '_setTransferPaused(bool)': FunctionFragment;
    '_setWhitelistProtect(bool)': FunctionFragment;
    '_supportMarket(address)': FunctionFragment;
    '_updateTvlProtectLimit(address[],uint256[])': FunctionFragment;
    'accountAssets(address,uint256)': FunctionFragment;
    'admin()': FunctionFragment;
    'allMarkets(uint256)': FunctionFragment;
    'borrowAllowed(address,address,uint256)': FunctionFragment;
    'borrowCapGuardian()': FunctionFragment;
    'borrowCaps(address)': FunctionFragment;
    'borrowGuardianPaused(address)': FunctionFragment;
    'borrowVerify(address,address,uint256)': FunctionFragment;
    'checkMembership(address,address)': FunctionFragment;
    'claimTonic(address[],address[],bool,bool)': FunctionFragment;
    'claimTonic(address)': FunctionFragment;
    'claimTonic(address,address[])': FunctionFragment;
    'closeFactorMantissa()': FunctionFragment;
    'enterMarkets(address[])': FunctionFragment;
    'exitMarket(address)': FunctionFragment;
    'getAccountLiquidity(address)': FunctionFragment;
    'getAllMarkets()': FunctionFragment;
    'getAssetsIn(address)': FunctionFragment;
    'getBlockNumber()': FunctionFragment;
    'getHypotheticalAccountLiquidity(address,address,uint256,uint256)': FunctionFragment;
    'getTonicAddress()': FunctionFragment;
    'isDeprecated(address)': FunctionFragment;
    'isTectonicCore()': FunctionFragment;
    'lastContributorBlock(address)': FunctionFragment;
    'liquidateBorrowAllowed(address,address,address,address,uint256)': FunctionFragment;
    'liquidateBorrowVerify(address,address,address,address,uint256,uint256)': FunctionFragment;
    'liquidateCalculateSeizeTokens(address,address,uint256)': FunctionFragment;
    'liquidationIncentiveMantissa()': FunctionFragment;
    'markets(address)': FunctionFragment;
    'maxAssets()': FunctionFragment;
    'mintAllowed(address,address,uint256)': FunctionFragment;
    'mintGuardianPaused(address)': FunctionFragment;
    'mintVerify(address,address,uint256,uint256)': FunctionFragment;
    'oracle()': FunctionFragment;
    'pauseGuardian()': FunctionFragment;
    'pendingAdmin()': FunctionFragment;
    'pendingTectonicCoreImplementation()': FunctionFragment;
    'redeemAllowed(address,address,uint256)': FunctionFragment;
    'redeemVerify(address,address,uint256,uint256)': FunctionFragment;
    'repayBorrowAllowed(address,address,address,uint256)': FunctionFragment;
    'repayBorrowVerify(address,address,address,uint256,uint256)': FunctionFragment;
    'seizeAllowed(address,address,address,address,uint256)': FunctionFragment;
    'seizeGuardianPaused()': FunctionFragment;
    'seizeVerify(address,address,address,address,uint256)': FunctionFragment;
    'tectonicCoreImplementation()': FunctionFragment;
    'tokenToPerUserTvlProtectLimit(address)': FunctionFragment;
    'tonicAccrued(address)': FunctionFragment;
    'tonicBorrowState(address)': FunctionFragment;
    'tonicBorrowerIndex(address,address)': FunctionFragment;
    'tonicContributorSpeeds(address)': FunctionFragment;
    'tonicInitialIndex()': FunctionFragment;
    'tonicRate()': FunctionFragment;
    'tonicSpeeds(address)': FunctionFragment;
    'tonicSupplierIndex(address,address)': FunctionFragment;
    'tonicSupplyState(address)': FunctionFragment;
    'transferAllowed(address,address,address,uint256)': FunctionFragment;
    'transferGuardianPaused()': FunctionFragment;
    'transferVerify(address,address,address,uint256)': FunctionFragment;
    'updateContributorRewards(address)': FunctionFragment;
    'utilizedTvlAmount(address,address)': FunctionFragment;
    'whitelistProtectEnabled()': FunctionFragment;
    'whitelistedAddresses(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | '_addToWhitelistProtect'
      | '_become'
      | '_borrowGuardianPaused'
      | '_grantTonic'
      | '_mintGuardianPaused'
      | '_removeFromWhitelistProtect'
      | '_setBorrowCapGuardian'
      | '_setBorrowPaused'
      | '_setCloseFactor'
      | '_setCollateralFactor'
      | '_setContributorTonicSpeed'
      | '_setLiquidationIncentive'
      | '_setMarketBorrowCaps'
      | '_setMintPaused'
      | '_setPauseGuardian'
      | '_setPriceOracle'
      | '_setSeizePaused'
      | '_setTonicSpeed'
      | '_setTransferPaused'
      | '_setWhitelistProtect'
      | '_supportMarket'
      | '_updateTvlProtectLimit'
      | 'accountAssets'
      | 'admin'
      | 'allMarkets'
      | 'borrowAllowed'
      | 'borrowCapGuardian'
      | 'borrowCaps'
      | 'borrowGuardianPaused'
      | 'borrowVerify'
      | 'checkMembership'
      | 'claimTonic(address[],address[],bool,bool)'
      | 'claimTonic(address)'
      | 'claimTonic(address,address[])'
      | 'closeFactorMantissa'
      | 'enterMarkets'
      | 'exitMarket'
      | 'getAccountLiquidity'
      | 'getAllMarkets'
      | 'getAssetsIn'
      | 'getBlockNumber'
      | 'getHypotheticalAccountLiquidity'
      | 'getTonicAddress'
      | 'isDeprecated'
      | 'isTectonicCore'
      | 'lastContributorBlock'
      | 'liquidateBorrowAllowed'
      | 'liquidateBorrowVerify'
      | 'liquidateCalculateSeizeTokens'
      | 'liquidationIncentiveMantissa'
      | 'markets'
      | 'maxAssets'
      | 'mintAllowed'
      | 'mintGuardianPaused'
      | 'mintVerify'
      | 'oracle'
      | 'pauseGuardian'
      | 'pendingAdmin'
      | 'pendingTectonicCoreImplementation'
      | 'redeemAllowed'
      | 'redeemVerify'
      | 'repayBorrowAllowed'
      | 'repayBorrowVerify'
      | 'seizeAllowed'
      | 'seizeGuardianPaused'
      | 'seizeVerify'
      | 'tectonicCoreImplementation'
      | 'tokenToPerUserTvlProtectLimit'
      | 'tonicAccrued'
      | 'tonicBorrowState'
      | 'tonicBorrowerIndex'
      | 'tonicContributorSpeeds'
      | 'tonicInitialIndex'
      | 'tonicRate'
      | 'tonicSpeeds'
      | 'tonicSupplierIndex'
      | 'tonicSupplyState'
      | 'transferAllowed'
      | 'transferGuardianPaused'
      | 'transferVerify'
      | 'updateContributorRewards'
      | 'utilizedTvlAmount'
      | 'whitelistProtectEnabled'
      | 'whitelistedAddresses',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: '_addToWhitelistProtect', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: '_become', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: '_borrowGuardianPaused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: '_grantTonic',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: '_mintGuardianPaused', values?: undefined): string;
  encodeFunctionData(functionFragment: '_removeFromWhitelistProtect', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: '_setBorrowCapGuardian', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: '_setBorrowPaused',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: '_setCloseFactor', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: '_setCollateralFactor',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: '_setContributorTonicSpeed',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: '_setLiquidationIncentive', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: '_setMarketBorrowCaps',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(
    functionFragment: '_setMintPaused',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: '_setPauseGuardian', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: '_setPriceOracle', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: '_setSeizePaused', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(
    functionFragment: '_setTonicSpeed',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: '_setTransferPaused', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: '_setWhitelistProtect', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: '_supportMarket', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: '_updateTvlProtectLimit',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'accountAssets',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allMarkets', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'borrowAllowed',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'borrowCapGuardian', values?: undefined): string;
  encodeFunctionData(functionFragment: 'borrowCaps', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'borrowGuardianPaused', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'borrowVerify',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'checkMembership',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'claimTonic(address[],address[],bool,bool)',
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[], PromiseOrValue<boolean>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'claimTonic(address)', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'claimTonic(address,address[])',
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(functionFragment: 'closeFactorMantissa', values?: undefined): string;
  encodeFunctionData(functionFragment: 'enterMarkets', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'exitMarket', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAccountLiquidity', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAllMarkets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAssetsIn', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getBlockNumber', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getHypotheticalAccountLiquidity',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'getTonicAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isDeprecated', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isTectonicCore', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastContributorBlock', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'liquidateBorrowAllowed',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateBorrowVerify',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateCalculateSeizeTokens',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'liquidationIncentiveMantissa', values?: undefined): string;
  encodeFunctionData(functionFragment: 'markets', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maxAssets', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'mintAllowed',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'mintGuardianPaused', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'mintVerify',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'oracle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pauseGuardian', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingAdmin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingTectonicCoreImplementation', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'redeemAllowed',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'redeemVerify',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'repayBorrowAllowed',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'repayBorrowVerify',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'seizeAllowed',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'seizeGuardianPaused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'seizeVerify',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'tectonicCoreImplementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenToPerUserTvlProtectLimit', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'tonicAccrued', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'tonicBorrowState', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'tonicBorrowerIndex',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'tonicContributorSpeeds', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'tonicInitialIndex', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tonicRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tonicSpeeds', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'tonicSupplierIndex',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'tonicSupplyState', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'transferAllowed',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'transferGuardianPaused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transferVerify',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'updateContributorRewards', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'utilizedTvlAmount',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'whitelistProtectEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'whitelistedAddresses', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: '_addToWhitelistProtect', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_become', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_borrowGuardianPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_grantTonic', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_mintGuardianPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_removeFromWhitelistProtect', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setBorrowCapGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setBorrowPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setCloseFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setCollateralFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setContributorTonicSpeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setLiquidationIncentive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setMarketBorrowCaps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setMintPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setPauseGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setPriceOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setSeizePaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setTonicSpeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setTransferPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setWhitelistProtect', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_supportMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_updateTvlProtectLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowCapGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowCaps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowGuardianPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkMembership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimTonic(address[],address[],bool,bool)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimTonic(address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimTonic(address,address[])', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeFactorMantissa', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enterMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exitMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAccountLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAssetsIn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBlockNumber', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getHypotheticalAccountLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTonicAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isDeprecated', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isTectonicCore', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastContributorBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateBorrowAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateBorrowVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateCalculateSeizeTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidationIncentiveMantissa', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'markets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintGuardianPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'oracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pauseGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingTectonicCoreImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayBorrowAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayBorrowVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'seizeAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'seizeGuardianPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'seizeVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tectonicCoreImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenToPerUserTvlProtectLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tonicAccrued', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tonicBorrowState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tonicBorrowerIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tonicContributorSpeeds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tonicInitialIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tonicRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tonicSpeeds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tonicSupplierIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tonicSupplyState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferGuardianPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferVerify', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateContributorRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'utilizedTvlAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistProtectEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistedAddresses', data: BytesLike): Result;

  events: {
    'ActionPaused(address,string,bool)': EventFragment;
    'ContributorTonicSpeedUpdated(address,uint256)': EventFragment;
    'DistributedBorrowerTonic(address,address,uint256,uint256)': EventFragment;
    'DistributedSupplierTonic(address,address,uint256,uint256)': EventFragment;
    'Failure(uint256,uint256,uint256)': EventFragment;
    'MarketEntered(address,address)': EventFragment;
    'MarketExited(address,address)': EventFragment;
    'MarketListed(address)': EventFragment;
    'NewBorrowCap(address,uint256)': EventFragment;
    'NewBorrowCapGuardian(address,address)': EventFragment;
    'NewCloseFactor(uint256,uint256)': EventFragment;
    'NewCollateralFactor(address,uint256,uint256)': EventFragment;
    'NewLiquidationIncentive(uint256,uint256)': EventFragment;
    'NewPauseGuardian(address,address)': EventFragment;
    'NewPriceOracle(address,address)': EventFragment;
    'TVLProtectLimitUpdated(address,uint256)': EventFragment;
    'TonicGranted(address,uint256)': EventFragment;
    'TonicSpeedUpdated(address,uint256)': EventFragment;
    'WhitelistAccountAdded(address)': EventFragment;
    'WhitelistAccountRemoved(address)': EventFragment;
    'WhitelistStatusChanged(bool)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ActionPaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ContributorTonicSpeedUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DistributedBorrowerTonic'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DistributedSupplierTonic'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Failure'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketEntered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketExited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketListed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewBorrowCap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewBorrowCapGuardian'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewCloseFactor'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewCollateralFactor'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewLiquidationIncentive'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewPauseGuardian'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewPriceOracle'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TVLProtectLimitUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TonicGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TonicSpeedUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WhitelistAccountAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WhitelistAccountRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WhitelistStatusChanged'): EventFragment;
}

export interface ActionPausedEventObject {
  tToken: string;
  action: string;
  pauseState: boolean;
}
export type ActionPausedEvent = TypedEvent<[string, string, boolean], ActionPausedEventObject>;

export type ActionPausedEventFilter = TypedEventFilter<ActionPausedEvent>;

export interface ContributorTonicSpeedUpdatedEventObject {
  contributor: string;
  newSpeed: BigNumber;
}
export type ContributorTonicSpeedUpdatedEvent = TypedEvent<
  [string, BigNumber],
  ContributorTonicSpeedUpdatedEventObject
>;

export type ContributorTonicSpeedUpdatedEventFilter = TypedEventFilter<ContributorTonicSpeedUpdatedEvent>;

export interface DistributedBorrowerTonicEventObject {
  tToken: string;
  borrower: string;
  tonicDelta: BigNumber;
  tonicBorrowIndex: BigNumber;
}
export type DistributedBorrowerTonicEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DistributedBorrowerTonicEventObject
>;

export type DistributedBorrowerTonicEventFilter = TypedEventFilter<DistributedBorrowerTonicEvent>;

export interface DistributedSupplierTonicEventObject {
  tToken: string;
  supplier: string;
  tonicDelta: BigNumber;
  tonicSupplyIndex: BigNumber;
}
export type DistributedSupplierTonicEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DistributedSupplierTonicEventObject
>;

export type DistributedSupplierTonicEventFilter = TypedEventFilter<DistributedSupplierTonicEvent>;

export interface FailureEventObject {
  error: BigNumber;
  info: BigNumber;
  detail: BigNumber;
}
export type FailureEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], FailureEventObject>;

export type FailureEventFilter = TypedEventFilter<FailureEvent>;

export interface MarketEnteredEventObject {
  tToken: string;
  account: string;
}
export type MarketEnteredEvent = TypedEvent<[string, string], MarketEnteredEventObject>;

export type MarketEnteredEventFilter = TypedEventFilter<MarketEnteredEvent>;

export interface MarketExitedEventObject {
  tToken: string;
  account: string;
}
export type MarketExitedEvent = TypedEvent<[string, string], MarketExitedEventObject>;

export type MarketExitedEventFilter = TypedEventFilter<MarketExitedEvent>;

export interface MarketListedEventObject {
  tToken: string;
}
export type MarketListedEvent = TypedEvent<[string], MarketListedEventObject>;

export type MarketListedEventFilter = TypedEventFilter<MarketListedEvent>;

export interface NewBorrowCapEventObject {
  tToken: string;
  newBorrowCap: BigNumber;
}
export type NewBorrowCapEvent = TypedEvent<[string, BigNumber], NewBorrowCapEventObject>;

export type NewBorrowCapEventFilter = TypedEventFilter<NewBorrowCapEvent>;

export interface NewBorrowCapGuardianEventObject {
  oldBorrowCapGuardian: string;
  newBorrowCapGuardian: string;
}
export type NewBorrowCapGuardianEvent = TypedEvent<[string, string], NewBorrowCapGuardianEventObject>;

export type NewBorrowCapGuardianEventFilter = TypedEventFilter<NewBorrowCapGuardianEvent>;

export interface NewCloseFactorEventObject {
  oldCloseFactorMantissa: BigNumber;
  newCloseFactorMantissa: BigNumber;
}
export type NewCloseFactorEvent = TypedEvent<[BigNumber, BigNumber], NewCloseFactorEventObject>;

export type NewCloseFactorEventFilter = TypedEventFilter<NewCloseFactorEvent>;

export interface NewCollateralFactorEventObject {
  tToken: string;
  oldCollateralFactorMantissa: BigNumber;
  newCollateralFactorMantissa: BigNumber;
}
export type NewCollateralFactorEvent = TypedEvent<[string, BigNumber, BigNumber], NewCollateralFactorEventObject>;

export type NewCollateralFactorEventFilter = TypedEventFilter<NewCollateralFactorEvent>;

export interface NewLiquidationIncentiveEventObject {
  oldLiquidationIncentiveMantissa: BigNumber;
  newLiquidationIncentiveMantissa: BigNumber;
}
export type NewLiquidationIncentiveEvent = TypedEvent<[BigNumber, BigNumber], NewLiquidationIncentiveEventObject>;

export type NewLiquidationIncentiveEventFilter = TypedEventFilter<NewLiquidationIncentiveEvent>;

export interface NewPauseGuardianEventObject {
  oldPauseGuardian: string;
  newPauseGuardian: string;
}
export type NewPauseGuardianEvent = TypedEvent<[string, string], NewPauseGuardianEventObject>;

export type NewPauseGuardianEventFilter = TypedEventFilter<NewPauseGuardianEvent>;

export interface NewPriceOracleEventObject {
  oldPriceOracle: string;
  newPriceOracle: string;
}
export type NewPriceOracleEvent = TypedEvent<[string, string], NewPriceOracleEventObject>;

export type NewPriceOracleEventFilter = TypedEventFilter<NewPriceOracleEvent>;

export interface TVLProtectLimitUpdatedEventObject {
  tToken: string;
  newLimitPerUser: BigNumber;
}
export type TVLProtectLimitUpdatedEvent = TypedEvent<[string, BigNumber], TVLProtectLimitUpdatedEventObject>;

export type TVLProtectLimitUpdatedEventFilter = TypedEventFilter<TVLProtectLimitUpdatedEvent>;

export interface TonicGrantedEventObject {
  recipient: string;
  amount: BigNumber;
}
export type TonicGrantedEvent = TypedEvent<[string, BigNumber], TonicGrantedEventObject>;

export type TonicGrantedEventFilter = TypedEventFilter<TonicGrantedEvent>;

export interface TonicSpeedUpdatedEventObject {
  tToken: string;
  newSpeed: BigNumber;
}
export type TonicSpeedUpdatedEvent = TypedEvent<[string, BigNumber], TonicSpeedUpdatedEventObject>;

export type TonicSpeedUpdatedEventFilter = TypedEventFilter<TonicSpeedUpdatedEvent>;

export interface WhitelistAccountAddedEventObject {
  account: string;
}
export type WhitelistAccountAddedEvent = TypedEvent<[string], WhitelistAccountAddedEventObject>;

export type WhitelistAccountAddedEventFilter = TypedEventFilter<WhitelistAccountAddedEvent>;

export interface WhitelistAccountRemovedEventObject {
  account: string;
}
export type WhitelistAccountRemovedEvent = TypedEvent<[string], WhitelistAccountRemovedEventObject>;

export type WhitelistAccountRemovedEventFilter = TypedEventFilter<WhitelistAccountRemovedEvent>;

export interface WhitelistStatusChangedEventObject {
  enabled: boolean;
}
export type WhitelistStatusChangedEvent = TypedEvent<[boolean], WhitelistStatusChangedEventObject>;

export type WhitelistStatusChangedEventFilter = TypedEventFilter<WhitelistStatusChangedEvent>;

export interface TectonicCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TectonicCoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _addToWhitelistProtect(
      accounts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _become(
      unitroller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _borrowGuardianPaused(overrides?: CallOverrides): Promise<[boolean]>;

    _grantTonic(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _mintGuardianPaused(overrides?: CallOverrides): Promise<[boolean]>;

    _removeFromWhitelistProtect(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setBorrowCapGuardian(
      newBorrowCapGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setBorrowPaused(
      tToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setCloseFactor(
      newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setCollateralFactor(
      tToken: PromiseOrValue<string>,
      newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setContributorTonicSpeed(
      contributor: PromiseOrValue<string>,
      tonicSpeed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setMarketBorrowCaps(
      tTokens: PromiseOrValue<string>[],
      newBorrowCaps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setMintPaused(
      tToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setPauseGuardian(
      newPauseGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setPriceOracle(
      newOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setSeizePaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setTonicSpeed(
      tToken: PromiseOrValue<string>,
      tonicSpeed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setTransferPaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _setWhitelistProtect(
      whitelistStatus: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _supportMarket(
      tToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _updateTvlProtectLimit(
      tTokens: PromiseOrValue<string>[],
      newLimitPerUser: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    accountAssets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    borrowAllowed(
      tToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    borrowCapGuardian(overrides?: CallOverrides): Promise<[string]>;

    borrowCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    borrowVerify(
      tToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    checkMembership(
      account: PromiseOrValue<string>,
      tToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    'claimTonic(address[],address[],bool,bool)'(
      holders: PromiseOrValue<string>[],
      tTokens: PromiseOrValue<string>[],
      borrowers: PromiseOrValue<boolean>,
      suppliers: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'claimTonic(address)'(
      holder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'claimTonic(address,address[])'(
      holder: PromiseOrValue<string>,
      tTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    enterMarkets(
      tTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    exitMarket(
      tTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getAccountLiquidity(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getAllMarkets(overrides?: CallOverrides): Promise<[string[]]>;

    getAssetsIn(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string[]]>;

    getBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    getHypotheticalAccountLiquidity(
      account: PromiseOrValue<string>,
      tTokenModify: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getTonicAddress(overrides?: CallOverrides): Promise<[string]>;

    isDeprecated(tToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isTectonicCore(overrides?: CallOverrides): Promise<[boolean]>;

    lastContributorBlock(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidateBorrowAllowed(
      tTokenBorrowed: PromiseOrValue<string>,
      tTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    liquidateBorrowVerify(
      tTokenBorrowed: PromiseOrValue<string>,
      tTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    liquidateCalculateSeizeTokens(
      tTokenBorrowed: PromiseOrValue<string>,
      tTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    markets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, BigNumber, boolean] & {
        isListed: boolean;
        collateralFactorMantissa: BigNumber;
        isTonicized: boolean;
      }
    >;

    maxAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintAllowed(
      tToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mintGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    mintVerify(
      tToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      actualMintAmount: PromiseOrValue<BigNumberish>,
      mintTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    pauseGuardian(overrides?: CallOverrides): Promise<[string]>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    pendingTectonicCoreImplementation(overrides?: CallOverrides): Promise<[string]>;

    redeemAllowed(
      tToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    redeemVerify(
      tToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemAmount: PromiseOrValue<BigNumberish>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    repayBorrowAllowed(
      tToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    repayBorrowVerify(
      tToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      borrowerIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    seizeAllowed(
      tTokenCollateral: PromiseOrValue<string>,
      tTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    seizeGuardianPaused(overrides?: CallOverrides): Promise<[boolean]>;

    seizeVerify(
      tTokenCollateral: PromiseOrValue<string>,
      tTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    tectonicCoreImplementation(overrides?: CallOverrides): Promise<[string]>;

    tokenToPerUserTvlProtectLimit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    tonicAccrued(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    tonicBorrowState(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    tonicBorrowerIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    tonicContributorSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    tonicInitialIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    tonicRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    tonicSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    tonicSupplierIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    tonicSupplyState(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    transferAllowed(
      tToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferGuardianPaused(overrides?: CallOverrides): Promise<[boolean]>;

    transferVerify(
      tToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateContributorRewards(
      contributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    utilizedTvlAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    whitelistProtectEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    whitelistedAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
  };

  _addToWhitelistProtect(
    accounts: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _become(
    unitroller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _borrowGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

  _grantTonic(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _mintGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

  _removeFromWhitelistProtect(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setBorrowCapGuardian(
    newBorrowCapGuardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setBorrowPaused(
    tToken: PromiseOrValue<string>,
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setCloseFactor(
    newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setCollateralFactor(
    tToken: PromiseOrValue<string>,
    newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setContributorTonicSpeed(
    contributor: PromiseOrValue<string>,
    tonicSpeed: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setLiquidationIncentive(
    newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setMarketBorrowCaps(
    tTokens: PromiseOrValue<string>[],
    newBorrowCaps: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setMintPaused(
    tToken: PromiseOrValue<string>,
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setPauseGuardian(
    newPauseGuardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setPriceOracle(
    newOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setSeizePaused(
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setTonicSpeed(
    tToken: PromiseOrValue<string>,
    tonicSpeed: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setTransferPaused(
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _setWhitelistProtect(
    whitelistStatus: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _supportMarket(
    tToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _updateTvlProtectLimit(
    tTokens: PromiseOrValue<string>[],
    newLimitPerUser: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  accountAssets(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  borrowAllowed(
    tToken: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  borrowCapGuardian(overrides?: CallOverrides): Promise<string>;

  borrowCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  borrowGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  borrowVerify(
    tToken: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  checkMembership(
    account: PromiseOrValue<string>,
    tToken: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  'claimTonic(address[],address[],bool,bool)'(
    holders: PromiseOrValue<string>[],
    tTokens: PromiseOrValue<string>[],
    borrowers: PromiseOrValue<boolean>,
    suppliers: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'claimTonic(address)'(
    holder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'claimTonic(address,address[])'(
    holder: PromiseOrValue<string>,
    tTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  enterMarkets(
    tTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  exitMarket(
    tTokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getAccountLiquidity(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

  getAssetsIn(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

  getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getHypotheticalAccountLiquidity(
    account: PromiseOrValue<string>,
    tTokenModify: PromiseOrValue<string>,
    redeemTokens: PromiseOrValue<BigNumberish>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getTonicAddress(overrides?: CallOverrides): Promise<string>;

  isDeprecated(tToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isTectonicCore(overrides?: CallOverrides): Promise<boolean>;

  lastContributorBlock(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  liquidateBorrowAllowed(
    tTokenBorrowed: PromiseOrValue<string>,
    tTokenCollateral: PromiseOrValue<string>,
    liquidator: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    repayAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  liquidateBorrowVerify(
    tTokenBorrowed: PromiseOrValue<string>,
    tTokenCollateral: PromiseOrValue<string>,
    liquidator: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    actualRepayAmount: PromiseOrValue<BigNumberish>,
    seizeTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  liquidateCalculateSeizeTokens(
    tTokenBorrowed: PromiseOrValue<string>,
    tTokenCollateral: PromiseOrValue<string>,
    actualRepayAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>;

  liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  markets(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [boolean, BigNumber, boolean] & {
      isListed: boolean;
      collateralFactorMantissa: BigNumber;
      isTonicized: boolean;
    }
  >;

  maxAssets(overrides?: CallOverrides): Promise<BigNumber>;

  mintAllowed(
    tToken: PromiseOrValue<string>,
    minter: PromiseOrValue<string>,
    mintAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mintGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  mintVerify(
    tToken: PromiseOrValue<string>,
    minter: PromiseOrValue<string>,
    actualMintAmount: PromiseOrValue<BigNumberish>,
    mintTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  oracle(overrides?: CallOverrides): Promise<string>;

  pauseGuardian(overrides?: CallOverrides): Promise<string>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  pendingTectonicCoreImplementation(overrides?: CallOverrides): Promise<string>;

  redeemAllowed(
    tToken: PromiseOrValue<string>,
    redeemer: PromiseOrValue<string>,
    redeemTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  redeemVerify(
    tToken: PromiseOrValue<string>,
    redeemer: PromiseOrValue<string>,
    redeemAmount: PromiseOrValue<BigNumberish>,
    redeemTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  repayBorrowAllowed(
    tToken: PromiseOrValue<string>,
    payer: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    repayAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  repayBorrowVerify(
    tToken: PromiseOrValue<string>,
    payer: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    actualRepayAmount: PromiseOrValue<BigNumberish>,
    borrowerIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  seizeAllowed(
    tTokenCollateral: PromiseOrValue<string>,
    tTokenBorrowed: PromiseOrValue<string>,
    liquidator: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    seizeTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  seizeGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

  seizeVerify(
    tTokenCollateral: PromiseOrValue<string>,
    tTokenBorrowed: PromiseOrValue<string>,
    liquidator: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    seizeTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  tectonicCoreImplementation(overrides?: CallOverrides): Promise<string>;

  tokenToPerUserTvlProtectLimit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  tonicAccrued(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  tonicBorrowState(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

  tonicBorrowerIndex(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  tonicContributorSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  tonicInitialIndex(overrides?: CallOverrides): Promise<BigNumber>;

  tonicRate(overrides?: CallOverrides): Promise<BigNumber>;

  tonicSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  tonicSupplierIndex(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  tonicSupplyState(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

  transferAllowed(
    tToken: PromiseOrValue<string>,
    src: PromiseOrValue<string>,
    dst: PromiseOrValue<string>,
    transferTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

  transferVerify(
    tToken: PromiseOrValue<string>,
    src: PromiseOrValue<string>,
    dst: PromiseOrValue<string>,
    transferTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateContributorRewards(
    contributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  utilizedTvlAmount(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  whitelistProtectEnabled(overrides?: CallOverrides): Promise<boolean>;

  whitelistedAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    _addToWhitelistProtect(accounts: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    _become(unitroller: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    _borrowGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

    _grantTonic(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    _mintGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

    _removeFromWhitelistProtect(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    _setBorrowCapGuardian(newBorrowCapGuardian: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    _setBorrowPaused(
      tToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    _setCloseFactor(
      newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    _setCollateralFactor(
      tToken: PromiseOrValue<string>,
      newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    _setContributorTonicSpeed(
      contributor: PromiseOrValue<string>,
      tonicSpeed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    _setMarketBorrowCaps(
      tTokens: PromiseOrValue<string>[],
      newBorrowCaps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    _setMintPaused(
      tToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    _setPauseGuardian(newPauseGuardian: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    _setPriceOracle(newOracle: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    _setSeizePaused(state: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<boolean>;

    _setTonicSpeed(
      tToken: PromiseOrValue<string>,
      tonicSpeed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    _setTransferPaused(state: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<boolean>;

    _setWhitelistProtect(whitelistStatus: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    _supportMarket(tToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    _updateTvlProtectLimit(
      tTokens: PromiseOrValue<string>[],
      newLimitPerUser: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    accountAssets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    borrowAllowed(
      tToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    borrowCapGuardian(overrides?: CallOverrides): Promise<string>;

    borrowCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    borrowVerify(
      tToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    checkMembership(
      account: PromiseOrValue<string>,
      tToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'claimTonic(address[],address[],bool,bool)'(
      holders: PromiseOrValue<string>[],
      tTokens: PromiseOrValue<string>[],
      borrowers: PromiseOrValue<boolean>,
      suppliers: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    'claimTonic(address)'(holder: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    'claimTonic(address,address[])'(
      holder: PromiseOrValue<string>,
      tTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    enterMarkets(tTokens: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<BigNumber[]>;

    exitMarket(tTokenAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountLiquidity(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

    getAssetsIn(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getHypotheticalAccountLiquidity(
      account: PromiseOrValue<string>,
      tTokenModify: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getTonicAddress(overrides?: CallOverrides): Promise<string>;

    isDeprecated(tToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isTectonicCore(overrides?: CallOverrides): Promise<boolean>;

    lastContributorBlock(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    liquidateBorrowAllowed(
      tTokenBorrowed: PromiseOrValue<string>,
      tTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    liquidateBorrowVerify(
      tTokenBorrowed: PromiseOrValue<string>,
      tTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    liquidateCalculateSeizeTokens(
      tTokenBorrowed: PromiseOrValue<string>,
      tTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    markets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, BigNumber, boolean] & {
        isListed: boolean;
        collateralFactorMantissa: BigNumber;
        isTonicized: boolean;
      }
    >;

    maxAssets(overrides?: CallOverrides): Promise<BigNumber>;

    mintAllowed(
      tToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mintGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    mintVerify(
      tToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      actualMintAmount: PromiseOrValue<BigNumberish>,
      mintTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    oracle(overrides?: CallOverrides): Promise<string>;

    pauseGuardian(overrides?: CallOverrides): Promise<string>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    pendingTectonicCoreImplementation(overrides?: CallOverrides): Promise<string>;

    redeemAllowed(
      tToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    redeemVerify(
      tToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemAmount: PromiseOrValue<BigNumberish>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    repayBorrowAllowed(
      tToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    repayBorrowVerify(
      tToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      borrowerIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    seizeAllowed(
      tTokenCollateral: PromiseOrValue<string>,
      tTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    seizeGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

    seizeVerify(
      tTokenCollateral: PromiseOrValue<string>,
      tTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    tectonicCoreImplementation(overrides?: CallOverrides): Promise<string>;

    tokenToPerUserTvlProtectLimit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    tonicAccrued(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    tonicBorrowState(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    tonicBorrowerIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tonicContributorSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    tonicInitialIndex(overrides?: CallOverrides): Promise<BigNumber>;

    tonicRate(overrides?: CallOverrides): Promise<BigNumber>;

    tonicSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    tonicSupplierIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tonicSupplyState(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, number] & { index: BigNumber; block: number }>;

    transferAllowed(
      tToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transferGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

    transferVerify(
      tToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateContributorRewards(contributor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    utilizedTvlAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    whitelistProtectEnabled(overrides?: CallOverrides): Promise<boolean>;

    whitelistedAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    'ActionPaused(address,string,bool)'(tToken?: null, action?: null, pauseState?: null): ActionPausedEventFilter;
    ActionPaused(tToken?: null, action?: null, pauseState?: null): ActionPausedEventFilter;

    'ContributorTonicSpeedUpdated(address,uint256)'(
      contributor?: PromiseOrValue<string> | null,
      newSpeed?: null,
    ): ContributorTonicSpeedUpdatedEventFilter;
    ContributorTonicSpeedUpdated(
      contributor?: PromiseOrValue<string> | null,
      newSpeed?: null,
    ): ContributorTonicSpeedUpdatedEventFilter;

    'DistributedBorrowerTonic(address,address,uint256,uint256)'(
      tToken?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      tonicDelta?: null,
      tonicBorrowIndex?: null,
    ): DistributedBorrowerTonicEventFilter;
    DistributedBorrowerTonic(
      tToken?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      tonicDelta?: null,
      tonicBorrowIndex?: null,
    ): DistributedBorrowerTonicEventFilter;

    'DistributedSupplierTonic(address,address,uint256,uint256)'(
      tToken?: PromiseOrValue<string> | null,
      supplier?: PromiseOrValue<string> | null,
      tonicDelta?: null,
      tonicSupplyIndex?: null,
    ): DistributedSupplierTonicEventFilter;
    DistributedSupplierTonic(
      tToken?: PromiseOrValue<string> | null,
      supplier?: PromiseOrValue<string> | null,
      tonicDelta?: null,
      tonicSupplyIndex?: null,
    ): DistributedSupplierTonicEventFilter;

    'Failure(uint256,uint256,uint256)'(error?: null, info?: null, detail?: null): FailureEventFilter;
    Failure(error?: null, info?: null, detail?: null): FailureEventFilter;

    'MarketEntered(address,address)'(tToken?: null, account?: null): MarketEnteredEventFilter;
    MarketEntered(tToken?: null, account?: null): MarketEnteredEventFilter;

    'MarketExited(address,address)'(tToken?: null, account?: null): MarketExitedEventFilter;
    MarketExited(tToken?: null, account?: null): MarketExitedEventFilter;

    'MarketListed(address)'(tToken?: null): MarketListedEventFilter;
    MarketListed(tToken?: null): MarketListedEventFilter;

    'NewBorrowCap(address,uint256)'(
      tToken?: PromiseOrValue<string> | null,
      newBorrowCap?: null,
    ): NewBorrowCapEventFilter;
    NewBorrowCap(tToken?: PromiseOrValue<string> | null, newBorrowCap?: null): NewBorrowCapEventFilter;

    'NewBorrowCapGuardian(address,address)'(
      oldBorrowCapGuardian?: null,
      newBorrowCapGuardian?: null,
    ): NewBorrowCapGuardianEventFilter;
    NewBorrowCapGuardian(oldBorrowCapGuardian?: null, newBorrowCapGuardian?: null): NewBorrowCapGuardianEventFilter;

    'NewCloseFactor(uint256,uint256)'(
      oldCloseFactorMantissa?: null,
      newCloseFactorMantissa?: null,
    ): NewCloseFactorEventFilter;
    NewCloseFactor(oldCloseFactorMantissa?: null, newCloseFactorMantissa?: null): NewCloseFactorEventFilter;

    'NewCollateralFactor(address,uint256,uint256)'(
      tToken?: null,
      oldCollateralFactorMantissa?: null,
      newCollateralFactorMantissa?: null,
    ): NewCollateralFactorEventFilter;
    NewCollateralFactor(
      tToken?: null,
      oldCollateralFactorMantissa?: null,
      newCollateralFactorMantissa?: null,
    ): NewCollateralFactorEventFilter;

    'NewLiquidationIncentive(uint256,uint256)'(
      oldLiquidationIncentiveMantissa?: null,
      newLiquidationIncentiveMantissa?: null,
    ): NewLiquidationIncentiveEventFilter;
    NewLiquidationIncentive(
      oldLiquidationIncentiveMantissa?: null,
      newLiquidationIncentiveMantissa?: null,
    ): NewLiquidationIncentiveEventFilter;

    'NewPauseGuardian(address,address)'(oldPauseGuardian?: null, newPauseGuardian?: null): NewPauseGuardianEventFilter;
    NewPauseGuardian(oldPauseGuardian?: null, newPauseGuardian?: null): NewPauseGuardianEventFilter;

    'NewPriceOracle(address,address)'(oldPriceOracle?: null, newPriceOracle?: null): NewPriceOracleEventFilter;
    NewPriceOracle(oldPriceOracle?: null, newPriceOracle?: null): NewPriceOracleEventFilter;

    'TVLProtectLimitUpdated(address,uint256)'(
      tToken?: PromiseOrValue<string> | null,
      newLimitPerUser?: null,
    ): TVLProtectLimitUpdatedEventFilter;
    TVLProtectLimitUpdated(
      tToken?: PromiseOrValue<string> | null,
      newLimitPerUser?: null,
    ): TVLProtectLimitUpdatedEventFilter;

    'TonicGranted(address,uint256)'(recipient?: null, amount?: null): TonicGrantedEventFilter;
    TonicGranted(recipient?: null, amount?: null): TonicGrantedEventFilter;

    'TonicSpeedUpdated(address,uint256)'(
      tToken?: PromiseOrValue<string> | null,
      newSpeed?: null,
    ): TonicSpeedUpdatedEventFilter;
    TonicSpeedUpdated(tToken?: PromiseOrValue<string> | null, newSpeed?: null): TonicSpeedUpdatedEventFilter;

    'WhitelistAccountAdded(address)'(account?: null): WhitelistAccountAddedEventFilter;
    WhitelistAccountAdded(account?: null): WhitelistAccountAddedEventFilter;

    'WhitelistAccountRemoved(address)'(account?: null): WhitelistAccountRemovedEventFilter;
    WhitelistAccountRemoved(account?: null): WhitelistAccountRemovedEventFilter;

    'WhitelistStatusChanged(bool)'(enabled?: null): WhitelistStatusChangedEventFilter;
    WhitelistStatusChanged(enabled?: null): WhitelistStatusChangedEventFilter;
  };

  estimateGas: {
    _addToWhitelistProtect(
      accounts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _become(
      unitroller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _borrowGuardianPaused(overrides?: CallOverrides): Promise<BigNumber>;

    _grantTonic(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _mintGuardianPaused(overrides?: CallOverrides): Promise<BigNumber>;

    _removeFromWhitelistProtect(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setBorrowCapGuardian(
      newBorrowCapGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setBorrowPaused(
      tToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setCloseFactor(
      newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setCollateralFactor(
      tToken: PromiseOrValue<string>,
      newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setContributorTonicSpeed(
      contributor: PromiseOrValue<string>,
      tonicSpeed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setMarketBorrowCaps(
      tTokens: PromiseOrValue<string>[],
      newBorrowCaps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setMintPaused(
      tToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setPauseGuardian(
      newPauseGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setPriceOracle(
      newOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setSeizePaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setTonicSpeed(
      tToken: PromiseOrValue<string>,
      tonicSpeed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setTransferPaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _setWhitelistProtect(
      whitelistStatus: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _supportMarket(
      tToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _updateTvlProtectLimit(
      tTokens: PromiseOrValue<string>[],
      newLimitPerUser: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    accountAssets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowAllowed(
      tToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    borrowCapGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    borrowCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowVerify(
      tToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    checkMembership(
      account: PromiseOrValue<string>,
      tToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'claimTonic(address[],address[],bool,bool)'(
      holders: PromiseOrValue<string>[],
      tTokens: PromiseOrValue<string>[],
      borrowers: PromiseOrValue<boolean>,
      suppliers: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'claimTonic(address)'(
      holder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'claimTonic(address,address[])'(
      holder: PromiseOrValue<string>,
      tTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    enterMarkets(
      tTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    exitMarket(
      tTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getAccountLiquidity(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAllMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetsIn(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getHypotheticalAccountLiquidity(
      account: PromiseOrValue<string>,
      tTokenModify: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getTonicAddress(overrides?: CallOverrides): Promise<BigNumber>;

    isDeprecated(tToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isTectonicCore(overrides?: CallOverrides): Promise<BigNumber>;

    lastContributorBlock(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    liquidateBorrowAllowed(
      tTokenBorrowed: PromiseOrValue<string>,
      tTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    liquidateBorrowVerify(
      tTokenBorrowed: PromiseOrValue<string>,
      tTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    liquidateCalculateSeizeTokens(
      tTokenBorrowed: PromiseOrValue<string>,
      tTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    markets(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxAssets(overrides?: CallOverrides): Promise<BigNumber>;

    mintAllowed(
      tToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mintGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    mintVerify(
      tToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      actualMintAmount: PromiseOrValue<BigNumberish>,
      mintTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    pauseGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    pendingTectonicCoreImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    redeemAllowed(
      tToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    redeemVerify(
      tToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemAmount: PromiseOrValue<BigNumberish>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    repayBorrowAllowed(
      tToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    repayBorrowVerify(
      tToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      borrowerIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    seizeAllowed(
      tTokenCollateral: PromiseOrValue<string>,
      tTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    seizeGuardianPaused(overrides?: CallOverrides): Promise<BigNumber>;

    seizeVerify(
      tTokenCollateral: PromiseOrValue<string>,
      tTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    tectonicCoreImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    tokenToPerUserTvlProtectLimit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    tonicAccrued(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    tonicBorrowState(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    tonicBorrowerIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tonicContributorSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    tonicInitialIndex(overrides?: CallOverrides): Promise<BigNumber>;

    tonicRate(overrides?: CallOverrides): Promise<BigNumber>;

    tonicSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    tonicSupplierIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tonicSupplyState(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    transferAllowed(
      tToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferGuardianPaused(overrides?: CallOverrides): Promise<BigNumber>;

    transferVerify(
      tToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateContributorRewards(
      contributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    utilizedTvlAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    whitelistProtectEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _addToWhitelistProtect(
      accounts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _become(
      unitroller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _borrowGuardianPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _grantTonic(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _mintGuardianPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _removeFromWhitelistProtect(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setBorrowCapGuardian(
      newBorrowCapGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setBorrowPaused(
      tToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setCloseFactor(
      newCloseFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setCollateralFactor(
      tToken: PromiseOrValue<string>,
      newCollateralFactorMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setContributorTonicSpeed(
      contributor: PromiseOrValue<string>,
      tonicSpeed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setMarketBorrowCaps(
      tTokens: PromiseOrValue<string>[],
      newBorrowCaps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setMintPaused(
      tToken: PromiseOrValue<string>,
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setPauseGuardian(
      newPauseGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setPriceOracle(
      newOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setSeizePaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setTonicSpeed(
      tToken: PromiseOrValue<string>,
      tonicSpeed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setTransferPaused(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _setWhitelistProtect(
      whitelistStatus: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _supportMarket(
      tToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _updateTvlProtectLimit(
      tTokens: PromiseOrValue<string>[],
      newLimitPerUser: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    accountAssets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allMarkets(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowAllowed(
      tToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    borrowCapGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowCaps(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowVerify(
      tToken: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    checkMembership(
      account: PromiseOrValue<string>,
      tToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'claimTonic(address[],address[],bool,bool)'(
      holders: PromiseOrValue<string>[],
      tTokens: PromiseOrValue<string>[],
      borrowers: PromiseOrValue<boolean>,
      suppliers: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'claimTonic(address)'(
      holder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'claimTonic(address,address[])'(
      holder: PromiseOrValue<string>,
      tTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enterMarkets(
      tTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    exitMarket(
      tTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getAccountLiquidity(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetsIn(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHypotheticalAccountLiquidity(
      account: PromiseOrValue<string>,
      tTokenModify: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTonicAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDeprecated(tToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTectonicCore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastContributorBlock(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateBorrowAllowed(
      tTokenBorrowed: PromiseOrValue<string>,
      tTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    liquidateBorrowVerify(
      tTokenBorrowed: PromiseOrValue<string>,
      tTokenCollateral: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    liquidateCalculateSeizeTokens(
      tTokenBorrowed: PromiseOrValue<string>,
      tTokenCollateral: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    markets(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintAllowed(
      tToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      mintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mintGuardianPaused(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintVerify(
      tToken: PromiseOrValue<string>,
      minter: PromiseOrValue<string>,
      actualMintAmount: PromiseOrValue<BigNumberish>,
      mintTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingTectonicCoreImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemAllowed(
      tToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    redeemVerify(
      tToken: PromiseOrValue<string>,
      redeemer: PromiseOrValue<string>,
      redeemAmount: PromiseOrValue<BigNumberish>,
      redeemTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    repayBorrowAllowed(
      tToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      repayAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    repayBorrowVerify(
      tToken: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      actualRepayAmount: PromiseOrValue<BigNumberish>,
      borrowerIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    seizeAllowed(
      tTokenCollateral: PromiseOrValue<string>,
      tTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    seizeGuardianPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seizeVerify(
      tTokenCollateral: PromiseOrValue<string>,
      tTokenBorrowed: PromiseOrValue<string>,
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      seizeTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    tectonicCoreImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenToPerUserTvlProtectLimit(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    tonicAccrued(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tonicBorrowState(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tonicBorrowerIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    tonicContributorSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tonicInitialIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tonicRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tonicSpeeds(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tonicSupplierIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    tonicSupplyState(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferAllowed(
      tToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferGuardianPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferVerify(
      tToken: PromiseOrValue<string>,
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      transferTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateContributorRewards(
      contributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    utilizedTvlAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    whitelistProtectEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistedAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
