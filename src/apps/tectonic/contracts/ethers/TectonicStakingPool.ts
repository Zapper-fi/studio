/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface TectonicStakingPoolInterface extends utils.Interface {
  functions: {
    '_cooldownPeriod()': FunctionFragment;
    '_tonic()': FunctionFragment;
    '_xTonic()': FunctionFragment;
    'callerRewardBase()': FunctionFragment;
    'callerRewardRatio()': FunctionFragment;
    'contribute(uint256)': FunctionFragment;
    'deregisterToken(address)': FunctionFragment;
    'emergencyPull(uint256,address)': FunctionFragment;
    'enableTcmConvertPublicAccess()': FunctionFragment;
    'exchangeRateBase()': FunctionFragment;
    'getCooldownBlockNum(address)': FunctionFragment;
    'getCooldownTokens(address)': FunctionFragment;
    'getExchangeRate()': FunctionFragment;
    'getReleasableTokens(address)': FunctionFragment;
    'initialize(address,address,uint32,address,uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'performConversionForTokens(address[][],uint256[])': FunctionFragment;
    'performConversionForTokensFullBalance(address[][])': FunctionFragment;
    'registerToken(address)': FunctionFragment;
    'registerTokens(address[])': FunctionFragment;
    'release()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setCallerRewardRatio(uint256)': FunctionFragment;
    'setCooldownPeriod(uint32)': FunctionFragment;
    'setTcmImplementation(address)': FunctionFragment;
    'stake(uint256)': FunctionFragment;
    'tcmImplementation()': FunctionFragment;
    'tcmPublicAccess()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unstake(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | '_cooldownPeriod'
      | '_tonic'
      | '_xTonic'
      | 'callerRewardBase'
      | 'callerRewardRatio'
      | 'contribute'
      | 'deregisterToken'
      | 'emergencyPull'
      | 'enableTcmConvertPublicAccess'
      | 'exchangeRateBase'
      | 'getCooldownBlockNum'
      | 'getCooldownTokens'
      | 'getExchangeRate'
      | 'getReleasableTokens'
      | 'initialize'
      | 'owner'
      | 'performConversionForTokens'
      | 'performConversionForTokensFullBalance'
      | 'registerToken'
      | 'registerTokens'
      | 'release'
      | 'renounceOwnership'
      | 'setCallerRewardRatio'
      | 'setCooldownPeriod'
      | 'setTcmImplementation'
      | 'stake'
      | 'tcmImplementation'
      | 'tcmPublicAccess'
      | 'transferOwnership'
      | 'unstake',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: '_cooldownPeriod', values?: undefined): string;
  encodeFunctionData(functionFragment: '_tonic', values?: undefined): string;
  encodeFunctionData(functionFragment: '_xTonic', values?: undefined): string;
  encodeFunctionData(functionFragment: 'callerRewardBase', values?: undefined): string;
  encodeFunctionData(functionFragment: 'callerRewardRatio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'contribute', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'deregisterToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'emergencyPull',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'enableTcmConvertPublicAccess', values?: undefined): string;
  encodeFunctionData(functionFragment: 'exchangeRateBase', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getCooldownBlockNum', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getCooldownTokens', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getExchangeRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getReleasableTokens', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'performConversionForTokens',
    values: [PromiseOrValue<string>[][], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'performConversionForTokensFullBalance',
    values: [PromiseOrValue<string>[][]],
  ): string;
  encodeFunctionData(functionFragment: 'registerToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'registerTokens', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'release', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setCallerRewardRatio', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setCooldownPeriod', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setTcmImplementation', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'stake', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'tcmImplementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tcmPublicAccess', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'unstake', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: '_cooldownPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_tonic', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_xTonic', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'callerRewardBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'callerRewardRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'contribute', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deregisterToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyPull', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableTcmConvertPublicAccess', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exchangeRateBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCooldownBlockNum', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCooldownTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getExchangeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReleasableTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'performConversionForTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'performConversionForTokensFullBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'release', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCallerRewardRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCooldownPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTcmImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tcmImplementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tcmPublicAccess', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstake', data: BytesLike): Result;

  events: {
    'CallerRewardChanged(uint256,uint256)': EventFragment;
    'ConversionsPerformed(address[][],uint256[],uint256[],uint256)': EventFragment;
    'CooldownChanged(uint256,uint256)': EventFragment;
    'ExchangeRateUpdated(uint256,uint256)': EventFragment;
    'ImplementationChanged(address,address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'TokenDeregistered(address)': EventFragment;
    'TokenRegistered(address)': EventFragment;
    'TonicReleased(address,uint256,uint256)': EventFragment;
    'TonicStaked(address,uint256,uint256)': EventFragment;
    'TonicUnstaked(address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CallerRewardChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ConversionsPerformed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CooldownChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExchangeRateUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ImplementationChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenDeregistered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenRegistered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TonicReleased'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TonicStaked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TonicUnstaked'): EventFragment;
}

export interface CallerRewardChangedEventObject {
  oldRewardRatio: BigNumber;
  newRewardRatio: BigNumber;
}
export type CallerRewardChangedEvent = TypedEvent<[BigNumber, BigNumber], CallerRewardChangedEventObject>;

export type CallerRewardChangedEventFilter = TypedEventFilter<CallerRewardChangedEvent>;

export interface ConversionsPerformedEventObject {
  paths: string[][];
  amounts: BigNumber[];
  errorCodes: BigNumber[];
  tonicAmount: BigNumber;
}
export type ConversionsPerformedEvent = TypedEvent<
  [string[][], BigNumber[], BigNumber[], BigNumber],
  ConversionsPerformedEventObject
>;

export type ConversionsPerformedEventFilter = TypedEventFilter<ConversionsPerformedEvent>;

export interface CooldownChangedEventObject {
  oldCooldown: BigNumber;
  newCooldown: BigNumber;
}
export type CooldownChangedEvent = TypedEvent<[BigNumber, BigNumber], CooldownChangedEventObject>;

export type CooldownChangedEventFilter = TypedEventFilter<CooldownChangedEvent>;

export interface ExchangeRateUpdatedEventObject {
  newExchangeRate: BigNumber;
  timestamp: BigNumber;
}
export type ExchangeRateUpdatedEvent = TypedEvent<[BigNumber, BigNumber], ExchangeRateUpdatedEventObject>;

export type ExchangeRateUpdatedEventFilter = TypedEventFilter<ExchangeRateUpdatedEvent>;

export interface ImplementationChangedEventObject {
  oldImplementation: string;
  newImplementation: string;
}
export type ImplementationChangedEvent = TypedEvent<[string, string], ImplementationChangedEventObject>;

export type ImplementationChangedEventFilter = TypedEventFilter<ImplementationChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface TokenDeregisteredEventObject {
  token: string;
}
export type TokenDeregisteredEvent = TypedEvent<[string], TokenDeregisteredEventObject>;

export type TokenDeregisteredEventFilter = TypedEventFilter<TokenDeregisteredEvent>;

export interface TokenRegisteredEventObject {
  token: string;
}
export type TokenRegisteredEvent = TypedEvent<[string], TokenRegisteredEventObject>;

export type TokenRegisteredEventFilter = TypedEventFilter<TokenRegisteredEvent>;

export interface TonicReleasedEventObject {
  user: string;
  xTonicBurned: BigNumber;
  tonicReleased: BigNumber;
}
export type TonicReleasedEvent = TypedEvent<[string, BigNumber, BigNumber], TonicReleasedEventObject>;

export type TonicReleasedEventFilter = TypedEventFilter<TonicReleasedEvent>;

export interface TonicStakedEventObject {
  user: string;
  tonicStaked: BigNumber;
  xTonicMinted: BigNumber;
}
export type TonicStakedEvent = TypedEvent<[string, BigNumber, BigNumber], TonicStakedEventObject>;

export type TonicStakedEventFilter = TypedEventFilter<TonicStakedEvent>;

export interface TonicUnstakedEventObject {
  user: string;
  xTonicLocked: BigNumber;
  releasableBlockNum: BigNumber;
}
export type TonicUnstakedEvent = TypedEvent<[string, BigNumber, BigNumber], TonicUnstakedEventObject>;

export type TonicUnstakedEventFilter = TypedEventFilter<TonicUnstakedEvent>;

export interface TectonicStakingPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TectonicStakingPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _cooldownPeriod(overrides?: CallOverrides): Promise<[number]>;

    _tonic(overrides?: CallOverrides): Promise<[string]>;

    _xTonic(overrides?: CallOverrides): Promise<[string]>;

    callerRewardBase(overrides?: CallOverrides): Promise<[BigNumber]>;

    callerRewardRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    contribute(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deregisterToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    emergencyPull(
      amount: PromiseOrValue<BigNumberish>,
      dstAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    enableTcmConvertPublicAccess(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    exchangeRateBase(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCooldownBlockNum(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getCooldownTokens(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getExchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReleasableTokens(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      xTonicAddress: PromiseOrValue<string>,
      tonicAddress: PromiseOrValue<string>,
      cooldownPeriod: PromiseOrValue<BigNumberish>,
      tcmImplementation: PromiseOrValue<string>,
      callerRewardRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    performConversionForTokens(
      _paths: PromiseOrValue<string>[][],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    performConversionForTokensFullBalance(
      _paths: PromiseOrValue<string>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    registerToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    registerTokens(
      _tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    release(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setCallerRewardRatio(
      _callerRewardRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setCooldownPeriod(
      newCooldownPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTcmImplementation(
      _tcmImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    tcmImplementation(overrides?: CallOverrides): Promise<[string]>;

    tcmPublicAccess(overrides?: CallOverrides): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unstake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  _cooldownPeriod(overrides?: CallOverrides): Promise<number>;

  _tonic(overrides?: CallOverrides): Promise<string>;

  _xTonic(overrides?: CallOverrides): Promise<string>;

  callerRewardBase(overrides?: CallOverrides): Promise<BigNumber>;

  callerRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

  contribute(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deregisterToken(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  emergencyPull(
    amount: PromiseOrValue<BigNumberish>,
    dstAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  enableTcmConvertPublicAccess(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  exchangeRateBase(overrides?: CallOverrides): Promise<BigNumber>;

  getCooldownBlockNum(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getCooldownTokens(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  getReleasableTokens(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    xTonicAddress: PromiseOrValue<string>,
    tonicAddress: PromiseOrValue<string>,
    cooldownPeriod: PromiseOrValue<BigNumberish>,
    tcmImplementation: PromiseOrValue<string>,
    callerRewardRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  performConversionForTokens(
    _paths: PromiseOrValue<string>[][],
    _amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  performConversionForTokensFullBalance(
    _paths: PromiseOrValue<string>[][],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  registerToken(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  registerTokens(
    _tokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  release(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setCallerRewardRatio(
    _callerRewardRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setCooldownPeriod(
    newCooldownPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTcmImplementation(
    _tcmImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stake(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  tcmImplementation(overrides?: CallOverrides): Promise<string>;

  tcmPublicAccess(overrides?: CallOverrides): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unstake(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    _cooldownPeriod(overrides?: CallOverrides): Promise<number>;

    _tonic(overrides?: CallOverrides): Promise<string>;

    _xTonic(overrides?: CallOverrides): Promise<string>;

    callerRewardBase(overrides?: CallOverrides): Promise<BigNumber>;

    callerRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

    contribute(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    deregisterToken(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    emergencyPull(
      amount: PromiseOrValue<BigNumberish>,
      dstAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    enableTcmConvertPublicAccess(overrides?: CallOverrides): Promise<void>;

    exchangeRateBase(overrides?: CallOverrides): Promise<BigNumber>;

    getCooldownBlockNum(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getCooldownTokens(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    getReleasableTokens(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      xTonicAddress: PromiseOrValue<string>,
      tonicAddress: PromiseOrValue<string>,
      cooldownPeriod: PromiseOrValue<BigNumberish>,
      tcmImplementation: PromiseOrValue<string>,
      callerRewardRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    performConversionForTokens(
      _paths: PromiseOrValue<string>[][],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber[], BigNumber, BigNumber] & {
        errorCodes: BigNumber[];
        tonicAmount: BigNumber;
        minTonicAmount: BigNumber;
      }
    >;

    performConversionForTokensFullBalance(
      _paths: PromiseOrValue<string>[][],
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber[], BigNumber, BigNumber] & {
        errorCodes: BigNumber[];
        tonicAmount: BigNumber;
        minTonicAmount: BigNumber;
      }
    >;

    registerToken(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    registerTokens(_tokens: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    release(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCallerRewardRatio(_callerRewardRatio: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setCooldownPeriod(newCooldownPeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setTcmImplementation(_tcmImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    stake(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    tcmImplementation(overrides?: CallOverrides): Promise<string>;

    tcmPublicAccess(overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    unstake(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'CallerRewardChanged(uint256,uint256)'(
      oldRewardRatio?: null,
      newRewardRatio?: null,
    ): CallerRewardChangedEventFilter;
    CallerRewardChanged(oldRewardRatio?: null, newRewardRatio?: null): CallerRewardChangedEventFilter;

    'ConversionsPerformed(address[][],uint256[],uint256[],uint256)'(
      paths?: null,
      amounts?: null,
      errorCodes?: null,
      tonicAmount?: null,
    ): ConversionsPerformedEventFilter;
    ConversionsPerformed(
      paths?: null,
      amounts?: null,
      errorCodes?: null,
      tonicAmount?: null,
    ): ConversionsPerformedEventFilter;

    'CooldownChanged(uint256,uint256)'(oldCooldown?: null, newCooldown?: null): CooldownChangedEventFilter;
    CooldownChanged(oldCooldown?: null, newCooldown?: null): CooldownChangedEventFilter;

    'ExchangeRateUpdated(uint256,uint256)'(newExchangeRate?: null, timestamp?: null): ExchangeRateUpdatedEventFilter;
    ExchangeRateUpdated(newExchangeRate?: null, timestamp?: null): ExchangeRateUpdatedEventFilter;

    'ImplementationChanged(address,address)'(
      oldImplementation?: null,
      newImplementation?: null,
    ): ImplementationChangedEventFilter;
    ImplementationChanged(oldImplementation?: null, newImplementation?: null): ImplementationChangedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'TokenDeregistered(address)'(token?: null): TokenDeregisteredEventFilter;
    TokenDeregistered(token?: null): TokenDeregisteredEventFilter;

    'TokenRegistered(address)'(token?: null): TokenRegisteredEventFilter;
    TokenRegistered(token?: null): TokenRegisteredEventFilter;

    'TonicReleased(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      xTonicBurned?: null,
      tonicReleased?: null,
    ): TonicReleasedEventFilter;
    TonicReleased(
      user?: PromiseOrValue<string> | null,
      xTonicBurned?: null,
      tonicReleased?: null,
    ): TonicReleasedEventFilter;

    'TonicStaked(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      tonicStaked?: null,
      xTonicMinted?: null,
    ): TonicStakedEventFilter;
    TonicStaked(user?: PromiseOrValue<string> | null, tonicStaked?: null, xTonicMinted?: null): TonicStakedEventFilter;

    'TonicUnstaked(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      xTonicLocked?: null,
      releasableBlockNum?: null,
    ): TonicUnstakedEventFilter;
    TonicUnstaked(
      user?: PromiseOrValue<string> | null,
      xTonicLocked?: null,
      releasableBlockNum?: null,
    ): TonicUnstakedEventFilter;
  };

  estimateGas: {
    _cooldownPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    _tonic(overrides?: CallOverrides): Promise<BigNumber>;

    _xTonic(overrides?: CallOverrides): Promise<BigNumber>;

    callerRewardBase(overrides?: CallOverrides): Promise<BigNumber>;

    callerRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

    contribute(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deregisterToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    emergencyPull(
      amount: PromiseOrValue<BigNumberish>,
      dstAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    enableTcmConvertPublicAccess(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    exchangeRateBase(overrides?: CallOverrides): Promise<BigNumber>;

    getCooldownBlockNum(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getCooldownTokens(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    getReleasableTokens(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      xTonicAddress: PromiseOrValue<string>,
      tonicAddress: PromiseOrValue<string>,
      cooldownPeriod: PromiseOrValue<BigNumberish>,
      tcmImplementation: PromiseOrValue<string>,
      callerRewardRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    performConversionForTokens(
      _paths: PromiseOrValue<string>[][],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    performConversionForTokensFullBalance(
      _paths: PromiseOrValue<string>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    registerToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    registerTokens(
      _tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    release(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setCallerRewardRatio(
      _callerRewardRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setCooldownPeriod(
      newCooldownPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTcmImplementation(
      _tcmImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    tcmImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    tcmPublicAccess(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unstake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _cooldownPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _tonic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _xTonic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callerRewardBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callerRewardRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contribute(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deregisterToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    emergencyPull(
      amount: PromiseOrValue<BigNumberish>,
      dstAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    enableTcmConvertPublicAccess(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    exchangeRateBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCooldownBlockNum(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCooldownTokens(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReleasableTokens(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      xTonicAddress: PromiseOrValue<string>,
      tonicAddress: PromiseOrValue<string>,
      cooldownPeriod: PromiseOrValue<BigNumberish>,
      tcmImplementation: PromiseOrValue<string>,
      callerRewardRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performConversionForTokens(
      _paths: PromiseOrValue<string>[][],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    performConversionForTokensFullBalance(
      _paths: PromiseOrValue<string>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    registerToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    registerTokens(
      _tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    release(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setCallerRewardRatio(
      _callerRewardRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setCooldownPeriod(
      newCooldownPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTcmImplementation(
      _tcmImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    tcmImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tcmPublicAccess(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unstake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
