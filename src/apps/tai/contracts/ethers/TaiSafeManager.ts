/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface TaiSafeManagerInterface extends utils.Interface {
  functions: {
    'allowHandler(address,uint256)': FunctionFragment;
    'allowSAFE(uint256,address,uint256)': FunctionFragment;
    'collateralTypes(uint256)': FunctionFragment;
    'collectRewards(uint256,address)': FunctionFragment;
    'enterSystem(address,uint256)': FunctionFragment;
    'firstSAFEID(address)': FunctionFragment;
    'handlerCan(address,address)': FunctionFragment;
    'lastSAFEID(address)': FunctionFragment;
    'modifySAFECollateralization(uint256,int256,int256)': FunctionFragment;
    'moveSAFE(uint256,uint256)': FunctionFragment;
    'openSAFE(bytes32,address)': FunctionFragment;
    'ownsSAFE(uint256)': FunctionFragment;
    'protectSAFE(uint256,address,address)': FunctionFragment;
    'quitSystem(uint256,address)': FunctionFragment;
    'safeCan(address,uint256,address)': FunctionFragment;
    'safeCount(address)': FunctionFragment;
    'safeEngine()': FunctionFragment;
    'safeList(uint256)': FunctionFragment;
    'safei()': FunctionFragment;
    'safes(uint256)': FunctionFragment;
    'transferCollateral(uint256,address,uint256)': FunctionFragment;
    'transferCollateral(bytes32,uint256,address,uint256)': FunctionFragment;
    'transferInternalCoins(uint256,address,uint256)': FunctionFragment;
    'transferSAFEOwnership(uint256,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'allowHandler'
      | 'allowSAFE'
      | 'collateralTypes'
      | 'collectRewards'
      | 'enterSystem'
      | 'firstSAFEID'
      | 'handlerCan'
      | 'lastSAFEID'
      | 'modifySAFECollateralization'
      | 'moveSAFE'
      | 'openSAFE'
      | 'ownsSAFE'
      | 'protectSAFE'
      | 'quitSystem'
      | 'safeCan'
      | 'safeCount'
      | 'safeEngine'
      | 'safeList'
      | 'safei'
      | 'safes'
      | 'transferCollateral(uint256,address,uint256)'
      | 'transferCollateral(bytes32,uint256,address,uint256)'
      | 'transferInternalCoins'
      | 'transferSAFEOwnership',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'allowHandler',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'allowSAFE',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'collateralTypes', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'collectRewards',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'enterSystem',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'firstSAFEID', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'handlerCan', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lastSAFEID', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'modifySAFECollateralization',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'moveSAFE',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'openSAFE', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'ownsSAFE', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'protectSAFE',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'quitSystem',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeCan',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'safeCount', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'safeEngine', values?: undefined): string;
  encodeFunctionData(functionFragment: 'safeList', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'safei', values?: undefined): string;
  encodeFunctionData(functionFragment: 'safes', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'transferCollateral(uint256,address,uint256)',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferCollateral(bytes32,uint256,address,uint256)',
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferInternalCoins',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferSAFEOwnership',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(functionFragment: 'allowHandler', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowSAFE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateralTypes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collectRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enterSystem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'firstSAFEID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'handlerCan', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastSAFEID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'modifySAFECollateralization', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'moveSAFE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'openSAFE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownsSAFE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protectSAFE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'quitSystem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeCan', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeEngine', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safei', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferCollateral(uint256,address,uint256)', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferCollateral(bytes32,uint256,address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'transferInternalCoins', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferSAFEOwnership', data: BytesLike): Result;

  events: {
    'AllowHandler(address,address,uint256)': EventFragment;
    'AllowSAFE(address,uint256,address,uint256)': EventFragment;
    'CollectRewards(address,uint256,address)': EventFragment;
    'EnterSystem(address,address,uint256)': EventFragment;
    'ModifySAFECollateralization(address,uint256,int256,int256)': EventFragment;
    'MoveSAFE(address,uint256,uint256)': EventFragment;
    'OpenSAFE(address,address,uint256)': EventFragment;
    'ProtectSAFE(address,uint256,address,address)': EventFragment;
    'QuitSystem(address,uint256,address)': EventFragment;
    'TransferCollateral(address,uint256,address,uint256)': EventFragment;
    'TransferCollateral(address,bytes32,uint256,address,uint256)': EventFragment;
    'TransferInternalCoins(address,uint256,address,uint256)': EventFragment;
    'TransferSAFEOwnership(address,uint256,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AllowHandler'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AllowSAFE'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollectRewards'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EnterSystem'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ModifySAFECollateralization'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MoveSAFE'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OpenSAFE'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtectSAFE'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'QuitSystem'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferCollateral(address,uint256,address,uint256)'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferCollateral(address,bytes32,uint256,address,uint256)'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferInternalCoins'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferSAFEOwnership'): EventFragment;
}

export interface AllowHandlerEventObject {
  sender: string;
  usr: string;
  ok: BigNumber;
}
export type AllowHandlerEvent = TypedEvent<[string, string, BigNumber], AllowHandlerEventObject>;

export type AllowHandlerEventFilter = TypedEventFilter<AllowHandlerEvent>;

export interface AllowSAFEEventObject {
  sender: string;
  safe: BigNumber;
  usr: string;
  ok: BigNumber;
}
export type AllowSAFEEvent = TypedEvent<[string, BigNumber, string, BigNumber], AllowSAFEEventObject>;

export type AllowSAFEEventFilter = TypedEventFilter<AllowSAFEEvent>;

export interface CollectRewardsEventObject {
  sender: string;
  safe: BigNumber;
  rewards: string;
}
export type CollectRewardsEvent = TypedEvent<[string, BigNumber, string], CollectRewardsEventObject>;

export type CollectRewardsEventFilter = TypedEventFilter<CollectRewardsEvent>;

export interface EnterSystemEventObject {
  sender: string;
  src: string;
  safe: BigNumber;
}
export type EnterSystemEvent = TypedEvent<[string, string, BigNumber], EnterSystemEventObject>;

export type EnterSystemEventFilter = TypedEventFilter<EnterSystemEvent>;

export interface ModifySAFECollateralizationEventObject {
  sender: string;
  safe: BigNumber;
  deltaCollateral: BigNumber;
  deltaDebt: BigNumber;
}
export type ModifySAFECollateralizationEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  ModifySAFECollateralizationEventObject
>;

export type ModifySAFECollateralizationEventFilter = TypedEventFilter<ModifySAFECollateralizationEvent>;

export interface MoveSAFEEventObject {
  sender: string;
  safeSrc: BigNumber;
  safeDst: BigNumber;
}
export type MoveSAFEEvent = TypedEvent<[string, BigNumber, BigNumber], MoveSAFEEventObject>;

export type MoveSAFEEventFilter = TypedEventFilter<MoveSAFEEvent>;

export interface OpenSAFEEventObject {
  sender: string;
  own: string;
  safe: BigNumber;
}
export type OpenSAFEEvent = TypedEvent<[string, string, BigNumber], OpenSAFEEventObject>;

export type OpenSAFEEventFilter = TypedEventFilter<OpenSAFEEvent>;

export interface ProtectSAFEEventObject {
  sender: string;
  safe: BigNumber;
  liquidationEngine: string;
  saviour: string;
}
export type ProtectSAFEEvent = TypedEvent<[string, BigNumber, string, string], ProtectSAFEEventObject>;

export type ProtectSAFEEventFilter = TypedEventFilter<ProtectSAFEEvent>;

export interface QuitSystemEventObject {
  sender: string;
  safe: BigNumber;
  dst: string;
}
export type QuitSystemEvent = TypedEvent<[string, BigNumber, string], QuitSystemEventObject>;

export type QuitSystemEventFilter = TypedEventFilter<QuitSystemEvent>;

export interface TransferCollateral_address_uint256_address_uint256_EventObject {
  sender: string;
  safe: BigNumber;
  dst: string;
  wad: BigNumber;
}
export type TransferCollateral_address_uint256_address_uint256_Event = TypedEvent<
  [string, BigNumber, string, BigNumber],
  TransferCollateral_address_uint256_address_uint256_EventObject
>;

export type TransferCollateral_address_uint256_address_uint256_EventFilter =
  TypedEventFilter<TransferCollateral_address_uint256_address_uint256_Event>;

export interface TransferCollateral_address_bytes32_uint256_address_uint256_EventObject {
  sender: string;
  collateralType: string;
  safe: BigNumber;
  dst: string;
  wad: BigNumber;
}
export type TransferCollateral_address_bytes32_uint256_address_uint256_Event = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  TransferCollateral_address_bytes32_uint256_address_uint256_EventObject
>;

export type TransferCollateral_address_bytes32_uint256_address_uint256_EventFilter =
  TypedEventFilter<TransferCollateral_address_bytes32_uint256_address_uint256_Event>;

export interface TransferInternalCoinsEventObject {
  sender: string;
  safe: BigNumber;
  dst: string;
  rad: BigNumber;
}
export type TransferInternalCoinsEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  TransferInternalCoinsEventObject
>;

export type TransferInternalCoinsEventFilter = TypedEventFilter<TransferInternalCoinsEvent>;

export interface TransferSAFEOwnershipEventObject {
  sender: string;
  safe: BigNumber;
  dst: string;
}
export type TransferSAFEOwnershipEvent = TypedEvent<[string, BigNumber, string], TransferSAFEOwnershipEventObject>;

export type TransferSAFEOwnershipEventFilter = TypedEventFilter<TransferSAFEOwnershipEvent>;

export interface TaiSafeManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TaiSafeManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowHandler(
      usr: PromiseOrValue<string>,
      ok: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    allowSAFE(
      safe: PromiseOrValue<BigNumberish>,
      usr: PromiseOrValue<string>,
      ok: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    collateralTypes(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    collectRewards(
      safe: PromiseOrValue<BigNumberish>,
      debtRewards: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    enterSystem(
      src: PromiseOrValue<string>,
      safe: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    firstSAFEID(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    handlerCan(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    lastSAFEID(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    modifySAFECollateralization(
      safe: PromiseOrValue<BigNumberish>,
      deltaCollateral: PromiseOrValue<BigNumberish>,
      deltaDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    moveSAFE(
      safeSrc: PromiseOrValue<BigNumberish>,
      safeDst: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    openSAFE(
      collateralType: PromiseOrValue<BytesLike>,
      usr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    ownsSAFE(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    protectSAFE(
      safe: PromiseOrValue<BigNumberish>,
      liquidationEngine: PromiseOrValue<string>,
      saviour: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    quitSystem(
      safe: PromiseOrValue<BigNumberish>,
      dst: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    safeCan(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    safeCount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    safeEngine(overrides?: CallOverrides): Promise<[string]>;

    safeList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { prev: BigNumber; next: BigNumber }>;

    safei(overrides?: CallOverrides): Promise<[BigNumber]>;

    safes(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    'transferCollateral(uint256,address,uint256)'(
      safe: PromiseOrValue<BigNumberish>,
      dst: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'transferCollateral(bytes32,uint256,address,uint256)'(
      collateralType: PromiseOrValue<BytesLike>,
      safe: PromiseOrValue<BigNumberish>,
      dst: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferInternalCoins(
      safe: PromiseOrValue<BigNumberish>,
      dst: PromiseOrValue<string>,
      rad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferSAFEOwnership(
      safe: PromiseOrValue<BigNumberish>,
      dst: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  allowHandler(
    usr: PromiseOrValue<string>,
    ok: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  allowSAFE(
    safe: PromiseOrValue<BigNumberish>,
    usr: PromiseOrValue<string>,
    ok: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  collateralTypes(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  collectRewards(
    safe: PromiseOrValue<BigNumberish>,
    debtRewards: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  enterSystem(
    src: PromiseOrValue<string>,
    safe: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  firstSAFEID(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  handlerCan(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  lastSAFEID(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  modifySAFECollateralization(
    safe: PromiseOrValue<BigNumberish>,
    deltaCollateral: PromiseOrValue<BigNumberish>,
    deltaDebt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  moveSAFE(
    safeSrc: PromiseOrValue<BigNumberish>,
    safeDst: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  openSAFE(
    collateralType: PromiseOrValue<BytesLike>,
    usr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  ownsSAFE(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  protectSAFE(
    safe: PromiseOrValue<BigNumberish>,
    liquidationEngine: PromiseOrValue<string>,
    saviour: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  quitSystem(
    safe: PromiseOrValue<BigNumberish>,
    dst: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  safeCan(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  safeCount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  safeEngine(overrides?: CallOverrides): Promise<string>;

  safeList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { prev: BigNumber; next: BigNumber }>;

  safei(overrides?: CallOverrides): Promise<BigNumber>;

  safes(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  'transferCollateral(uint256,address,uint256)'(
    safe: PromiseOrValue<BigNumberish>,
    dst: PromiseOrValue<string>,
    wad: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'transferCollateral(bytes32,uint256,address,uint256)'(
    collateralType: PromiseOrValue<BytesLike>,
    safe: PromiseOrValue<BigNumberish>,
    dst: PromiseOrValue<string>,
    wad: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferInternalCoins(
    safe: PromiseOrValue<BigNumberish>,
    dst: PromiseOrValue<string>,
    rad: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferSAFEOwnership(
    safe: PromiseOrValue<BigNumberish>,
    dst: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    allowHandler(
      usr: PromiseOrValue<string>,
      ok: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    allowSAFE(
      safe: PromiseOrValue<BigNumberish>,
      usr: PromiseOrValue<string>,
      ok: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    collateralTypes(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    collectRewards(
      safe: PromiseOrValue<BigNumberish>,
      debtRewards: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    enterSystem(
      src: PromiseOrValue<string>,
      safe: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    firstSAFEID(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    handlerCan(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lastSAFEID(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    modifySAFECollateralization(
      safe: PromiseOrValue<BigNumberish>,
      deltaCollateral: PromiseOrValue<BigNumberish>,
      deltaDebt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    moveSAFE(
      safeSrc: PromiseOrValue<BigNumberish>,
      safeDst: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    openSAFE(
      collateralType: PromiseOrValue<BytesLike>,
      usr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    ownsSAFE(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    protectSAFE(
      safe: PromiseOrValue<BigNumberish>,
      liquidationEngine: PromiseOrValue<string>,
      saviour: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    quitSystem(
      safe: PromiseOrValue<BigNumberish>,
      dst: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    safeCan(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    safeCount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    safeEngine(overrides?: CallOverrides): Promise<string>;

    safeList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { prev: BigNumber; next: BigNumber }>;

    safei(overrides?: CallOverrides): Promise<BigNumber>;

    safes(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    'transferCollateral(uint256,address,uint256)'(
      safe: PromiseOrValue<BigNumberish>,
      dst: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    'transferCollateral(bytes32,uint256,address,uint256)'(
      collateralType: PromiseOrValue<BytesLike>,
      safe: PromiseOrValue<BigNumberish>,
      dst: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferInternalCoins(
      safe: PromiseOrValue<BigNumberish>,
      dst: PromiseOrValue<string>,
      rad: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferSAFEOwnership(
      safe: PromiseOrValue<BigNumberish>,
      dst: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'AllowHandler(address,address,uint256)'(sender?: null, usr?: null, ok?: null): AllowHandlerEventFilter;
    AllowHandler(sender?: null, usr?: null, ok?: null): AllowHandlerEventFilter;

    'AllowSAFE(address,uint256,address,uint256)'(
      sender?: null,
      safe?: null,
      usr?: null,
      ok?: null,
    ): AllowSAFEEventFilter;
    AllowSAFE(sender?: null, safe?: null, usr?: null, ok?: null): AllowSAFEEventFilter;

    'CollectRewards(address,uint256,address)'(sender?: null, safe?: null, rewards?: null): CollectRewardsEventFilter;
    CollectRewards(sender?: null, safe?: null, rewards?: null): CollectRewardsEventFilter;

    'EnterSystem(address,address,uint256)'(sender?: null, src?: null, safe?: null): EnterSystemEventFilter;
    EnterSystem(sender?: null, src?: null, safe?: null): EnterSystemEventFilter;

    'ModifySAFECollateralization(address,uint256,int256,int256)'(
      sender?: null,
      safe?: null,
      deltaCollateral?: null,
      deltaDebt?: null,
    ): ModifySAFECollateralizationEventFilter;
    ModifySAFECollateralization(
      sender?: null,
      safe?: null,
      deltaCollateral?: null,
      deltaDebt?: null,
    ): ModifySAFECollateralizationEventFilter;

    'MoveSAFE(address,uint256,uint256)'(sender?: null, safeSrc?: null, safeDst?: null): MoveSAFEEventFilter;
    MoveSAFE(sender?: null, safeSrc?: null, safeDst?: null): MoveSAFEEventFilter;

    'OpenSAFE(address,address,uint256)'(
      sender?: PromiseOrValue<string> | null,
      own?: PromiseOrValue<string> | null,
      safe?: PromiseOrValue<BigNumberish> | null,
    ): OpenSAFEEventFilter;
    OpenSAFE(
      sender?: PromiseOrValue<string> | null,
      own?: PromiseOrValue<string> | null,
      safe?: PromiseOrValue<BigNumberish> | null,
    ): OpenSAFEEventFilter;

    'ProtectSAFE(address,uint256,address,address)'(
      sender?: null,
      safe?: null,
      liquidationEngine?: null,
      saviour?: null,
    ): ProtectSAFEEventFilter;
    ProtectSAFE(sender?: null, safe?: null, liquidationEngine?: null, saviour?: null): ProtectSAFEEventFilter;

    'QuitSystem(address,uint256,address)'(sender?: null, safe?: null, dst?: null): QuitSystemEventFilter;
    QuitSystem(sender?: null, safe?: null, dst?: null): QuitSystemEventFilter;

    'TransferCollateral(address,uint256,address,uint256)'(
      sender?: null,
      safe?: null,
      dst?: null,
      wad?: null,
    ): TransferCollateral_address_uint256_address_uint256_EventFilter;
    'TransferCollateral(address,bytes32,uint256,address,uint256)'(
      sender?: null,
      collateralType?: null,
      safe?: null,
      dst?: null,
      wad?: null,
    ): TransferCollateral_address_bytes32_uint256_address_uint256_EventFilter;

    'TransferInternalCoins(address,uint256,address,uint256)'(
      sender?: null,
      safe?: null,
      dst?: null,
      rad?: null,
    ): TransferInternalCoinsEventFilter;
    TransferInternalCoins(sender?: null, safe?: null, dst?: null, rad?: null): TransferInternalCoinsEventFilter;

    'TransferSAFEOwnership(address,uint256,address)'(
      sender?: null,
      safe?: null,
      dst?: null,
    ): TransferSAFEOwnershipEventFilter;
    TransferSAFEOwnership(sender?: null, safe?: null, dst?: null): TransferSAFEOwnershipEventFilter;
  };

  estimateGas: {
    allowHandler(
      usr: PromiseOrValue<string>,
      ok: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    allowSAFE(
      safe: PromiseOrValue<BigNumberish>,
      usr: PromiseOrValue<string>,
      ok: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    collateralTypes(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    collectRewards(
      safe: PromiseOrValue<BigNumberish>,
      debtRewards: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    enterSystem(
      src: PromiseOrValue<string>,
      safe: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    firstSAFEID(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    handlerCan(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lastSAFEID(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    modifySAFECollateralization(
      safe: PromiseOrValue<BigNumberish>,
      deltaCollateral: PromiseOrValue<BigNumberish>,
      deltaDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    moveSAFE(
      safeSrc: PromiseOrValue<BigNumberish>,
      safeDst: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    openSAFE(
      collateralType: PromiseOrValue<BytesLike>,
      usr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    ownsSAFE(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    protectSAFE(
      safe: PromiseOrValue<BigNumberish>,
      liquidationEngine: PromiseOrValue<string>,
      saviour: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    quitSystem(
      safe: PromiseOrValue<BigNumberish>,
      dst: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    safeCan(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    safeCount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    safeEngine(overrides?: CallOverrides): Promise<BigNumber>;

    safeList(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    safei(overrides?: CallOverrides): Promise<BigNumber>;

    safes(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    'transferCollateral(uint256,address,uint256)'(
      safe: PromiseOrValue<BigNumberish>,
      dst: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'transferCollateral(bytes32,uint256,address,uint256)'(
      collateralType: PromiseOrValue<BytesLike>,
      safe: PromiseOrValue<BigNumberish>,
      dst: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferInternalCoins(
      safe: PromiseOrValue<BigNumberish>,
      dst: PromiseOrValue<string>,
      rad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferSAFEOwnership(
      safe: PromiseOrValue<BigNumberish>,
      dst: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowHandler(
      usr: PromiseOrValue<string>,
      ok: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    allowSAFE(
      safe: PromiseOrValue<BigNumberish>,
      usr: PromiseOrValue<string>,
      ok: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    collateralTypes(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectRewards(
      safe: PromiseOrValue<BigNumberish>,
      debtRewards: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    enterSystem(
      src: PromiseOrValue<string>,
      safe: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    firstSAFEID(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    handlerCan(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lastSAFEID(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    modifySAFECollateralization(
      safe: PromiseOrValue<BigNumberish>,
      deltaCollateral: PromiseOrValue<BigNumberish>,
      deltaDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    moveSAFE(
      safeSrc: PromiseOrValue<BigNumberish>,
      safeDst: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    openSAFE(
      collateralType: PromiseOrValue<BytesLike>,
      usr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    ownsSAFE(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protectSAFE(
      safe: PromiseOrValue<BigNumberish>,
      liquidationEngine: PromiseOrValue<string>,
      saviour: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    quitSystem(
      safe: PromiseOrValue<BigNumberish>,
      dst: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    safeCan(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    safeCount(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safeEngine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safeList(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safei(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safes(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'transferCollateral(uint256,address,uint256)'(
      safe: PromiseOrValue<BigNumberish>,
      dst: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'transferCollateral(bytes32,uint256,address,uint256)'(
      collateralType: PromiseOrValue<BytesLike>,
      safe: PromiseOrValue<BigNumberish>,
      dst: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferInternalCoins(
      safe: PromiseOrValue<BigNumberish>,
      dst: PromiseOrValue<string>,
      rad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferSAFEOwnership(
      safe: PromiseOrValue<BigNumberish>,
      dst: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
