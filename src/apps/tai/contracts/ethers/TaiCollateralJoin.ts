/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface TaiCollateralJoinInterface extends utils.Interface {
  functions: {
    'addAuthorization(address)': FunctionFragment;
    'authorizedAccounts(address)': FunctionFragment;
    'collateral()': FunctionFragment;
    'collateralType()': FunctionFragment;
    'contractEnabled()': FunctionFragment;
    'decimals()': FunctionFragment;
    'disableContract()': FunctionFragment;
    'exit(address,uint256)': FunctionFragment;
    'join(address,uint256)': FunctionFragment;
    'removeAuthorization(address)': FunctionFragment;
    'safeEngine()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addAuthorization'
      | 'authorizedAccounts'
      | 'collateral'
      | 'collateralType'
      | 'contractEnabled'
      | 'decimals'
      | 'disableContract'
      | 'exit'
      | 'join'
      | 'removeAuthorization'
      | 'safeEngine',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'addAuthorization', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'authorizedAccounts', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'collateral', values?: undefined): string;
  encodeFunctionData(functionFragment: 'collateralType', values?: undefined): string;
  encodeFunctionData(functionFragment: 'contractEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'disableContract', values?: undefined): string;
  encodeFunctionData(functionFragment: 'exit', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'join', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'removeAuthorization', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'safeEngine', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'addAuthorization', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'authorizedAccounts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateralType', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'contractEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'join', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeAuthorization', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeEngine', data: BytesLike): Result;

  events: {
    'AddAuthorization(address)': EventFragment;
    'DisableContract()': EventFragment;
    'Exit(address,address,uint256)': EventFragment;
    'Join(address,address,uint256)': EventFragment;
    'RemoveAuthorization(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddAuthorization'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DisableContract'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Exit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Join'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RemoveAuthorization'): EventFragment;
}

export interface AddAuthorizationEventObject {
  account: string;
}
export type AddAuthorizationEvent = TypedEvent<[string], AddAuthorizationEventObject>;

export type AddAuthorizationEventFilter = TypedEventFilter<AddAuthorizationEvent>;

export interface DisableContractEventObject {}
export type DisableContractEvent = TypedEvent<[], DisableContractEventObject>;

export type DisableContractEventFilter = TypedEventFilter<DisableContractEvent>;

export interface ExitEventObject {
  sender: string;
  account: string;
  wad: BigNumber;
}
export type ExitEvent = TypedEvent<[string, string, BigNumber], ExitEventObject>;

export type ExitEventFilter = TypedEventFilter<ExitEvent>;

export interface JoinEventObject {
  sender: string;
  account: string;
  wad: BigNumber;
}
export type JoinEvent = TypedEvent<[string, string, BigNumber], JoinEventObject>;

export type JoinEventFilter = TypedEventFilter<JoinEvent>;

export interface RemoveAuthorizationEventObject {
  account: string;
}
export type RemoveAuthorizationEvent = TypedEvent<[string], RemoveAuthorizationEventObject>;

export type RemoveAuthorizationEventFilter = TypedEventFilter<RemoveAuthorizationEvent>;

export interface TaiCollateralJoin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TaiCollateralJoinInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAuthorization(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    authorizedAccounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    collateral(overrides?: CallOverrides): Promise<[string]>;

    collateralType(overrides?: CallOverrides): Promise<[string]>;

    contractEnabled(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    disableContract(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    exit(
      account: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    join(
      account: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeAuthorization(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    safeEngine(overrides?: CallOverrides): Promise<[string]>;
  };

  addAuthorization(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  authorizedAccounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  collateral(overrides?: CallOverrides): Promise<string>;

  collateralType(overrides?: CallOverrides): Promise<string>;

  contractEnabled(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  disableContract(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  exit(
    account: PromiseOrValue<string>,
    wad: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  join(
    account: PromiseOrValue<string>,
    wad: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeAuthorization(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  safeEngine(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addAuthorization(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    authorizedAccounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    collateral(overrides?: CallOverrides): Promise<string>;

    collateralType(overrides?: CallOverrides): Promise<string>;

    contractEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    disableContract(overrides?: CallOverrides): Promise<void>;

    exit(account: PromiseOrValue<string>, wad: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    join(account: PromiseOrValue<string>, wad: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    removeAuthorization(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    safeEngine(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'AddAuthorization(address)'(account?: null): AddAuthorizationEventFilter;
    AddAuthorization(account?: null): AddAuthorizationEventFilter;

    'DisableContract()'(): DisableContractEventFilter;
    DisableContract(): DisableContractEventFilter;

    'Exit(address,address,uint256)'(sender?: null, account?: null, wad?: null): ExitEventFilter;
    Exit(sender?: null, account?: null, wad?: null): ExitEventFilter;

    'Join(address,address,uint256)'(sender?: null, account?: null, wad?: null): JoinEventFilter;
    Join(sender?: null, account?: null, wad?: null): JoinEventFilter;

    'RemoveAuthorization(address)'(account?: null): RemoveAuthorizationEventFilter;
    RemoveAuthorization(account?: null): RemoveAuthorizationEventFilter;
  };

  estimateGas: {
    addAuthorization(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    authorizedAccounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    collateral(overrides?: CallOverrides): Promise<BigNumber>;

    collateralType(overrides?: CallOverrides): Promise<BigNumber>;

    contractEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    disableContract(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    exit(
      account: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    join(
      account: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeAuthorization(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    safeEngine(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addAuthorization(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    authorizedAccounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableContract(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    exit(
      account: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    join(
      account: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeAuthorization(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    safeEngine(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
