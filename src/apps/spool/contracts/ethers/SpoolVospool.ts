/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export type GlobalGradualStruct = {
  totalMaturedVotingPower: PromiseOrValue<BigNumberish>;
  totalMaturingAmount: PromiseOrValue<BigNumberish>;
  totalRawUnmaturedVotingPower: PromiseOrValue<BigNumberish>;
  lastUpdatedTrancheIndex: PromiseOrValue<BigNumberish>;
};

export type GlobalGradualStructOutput = [number, number, BigNumber, number] & {
  totalMaturedVotingPower: number;
  totalMaturingAmount: number;
  totalRawUnmaturedVotingPower: BigNumber;
  lastUpdatedTrancheIndex: number;
};

export type UserTranchePositionStruct = {
  arrayIndex: PromiseOrValue<BigNumberish>;
  position: PromiseOrValue<BigNumberish>;
};

export type UserTranchePositionStructOutput = [number, number] & {
  arrayIndex: number;
  position: number;
};

export type UserGradualStruct = {
  maturedVotingPower: PromiseOrValue<BigNumberish>;
  maturingAmount: PromiseOrValue<BigNumberish>;
  rawUnmaturedVotingPower: PromiseOrValue<BigNumberish>;
  oldestTranchePosition: UserTranchePositionStruct;
  latestTranchePosition: UserTranchePositionStruct;
  lastUpdatedTrancheIndex: PromiseOrValue<BigNumberish>;
};

export type UserGradualStructOutput = [
  number,
  number,
  BigNumber,
  UserTranchePositionStructOutput,
  UserTranchePositionStructOutput,
  number,
] & {
  maturedVotingPower: number;
  maturingAmount: number;
  rawUnmaturedVotingPower: BigNumber;
  oldestTranchePosition: UserTranchePositionStructOutput;
  latestTranchePosition: UserTranchePositionStructOutput;
  lastUpdatedTrancheIndex: number;
};

export type TrancheStruct = { amount: PromiseOrValue<BigNumberish> };

export type TrancheStructOutput = [number] & { amount: number };

export type UserTrancheStruct = {
  amount: PromiseOrValue<BigNumberish>;
  index: PromiseOrValue<BigNumberish>;
};

export type UserTrancheStructOutput = [number, number] & {
  amount: number;
  index: number;
};

export interface SpoolVospoolInterface extends utils.Interface {
  functions: {
    'FULL_POWER_TIME()': FunctionFragment;
    'FULL_POWER_TRANCHES_COUNT()': FunctionFragment;
    'TRANCHE_TIME()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'burn(address,uint256)': FunctionFragment;
    'burnGradual(address,uint256,bool)': FunctionFragment;
    'decimals()': FunctionFragment;
    'firstTrancheStartTime()': FunctionFragment;
    'getCurrentTrancheIndex()': FunctionFragment;
    'getGlobalGradual()': FunctionFragment;
    'getLastFinishedTrancheIndex()': FunctionFragment;
    'getNextTrancheEndTime()': FunctionFragment;
    'getNotUpdatedGlobalGradual()': FunctionFragment;
    'getNotUpdatedUserGradual(address)': FunctionFragment;
    'getTotalGradualVotingPower()': FunctionFragment;
    'getTrancheEndTime(uint256)': FunctionFragment;
    'getTrancheIndex(uint256)': FunctionFragment;
    'getUserGradual(address)': FunctionFragment;
    'getUserGradualVotingPower(address)': FunctionFragment;
    'gradualMinters(address)': FunctionFragment;
    'indexedGlobalTranches(uint256)': FunctionFragment;
    'mint(address,uint256)': FunctionFragment;
    'mintGradual(address,uint256)': FunctionFragment;
    'minters(address)': FunctionFragment;
    'name()': FunctionFragment;
    'setGradualMinter(address,bool)': FunctionFragment;
    'setMinter(address,bool)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalInstantPower()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'updateUserVotingPower(address)': FunctionFragment;
    'updateVotingPower()': FunctionFragment;
    'userInstantPower(address)': FunctionFragment;
    'userTranches(address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'FULL_POWER_TIME'
      | 'FULL_POWER_TRANCHES_COUNT'
      | 'TRANCHE_TIME'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'burn'
      | 'burnGradual'
      | 'decimals'
      | 'firstTrancheStartTime'
      | 'getCurrentTrancheIndex'
      | 'getGlobalGradual'
      | 'getLastFinishedTrancheIndex'
      | 'getNextTrancheEndTime'
      | 'getNotUpdatedGlobalGradual'
      | 'getNotUpdatedUserGradual'
      | 'getTotalGradualVotingPower'
      | 'getTrancheEndTime'
      | 'getTrancheIndex'
      | 'getUserGradual'
      | 'getUserGradualVotingPower'
      | 'gradualMinters'
      | 'indexedGlobalTranches'
      | 'mint'
      | 'mintGradual'
      | 'minters'
      | 'name'
      | 'setGradualMinter'
      | 'setMinter'
      | 'symbol'
      | 'totalInstantPower'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'updateUserVotingPower'
      | 'updateVotingPower'
      | 'userInstantPower'
      | 'userTranches',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'FULL_POWER_TIME', values?: undefined): string;
  encodeFunctionData(functionFragment: 'FULL_POWER_TRANCHES_COUNT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'TRANCHE_TIME', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'burn', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'burnGradual',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'firstTrancheStartTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getCurrentTrancheIndex', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getGlobalGradual', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLastFinishedTrancheIndex', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getNextTrancheEndTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getNotUpdatedGlobalGradual', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getNotUpdatedUserGradual', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getTotalGradualVotingPower', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getTrancheEndTime', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getTrancheIndex', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getUserGradual', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getUserGradualVotingPower', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'gradualMinters', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'indexedGlobalTranches', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'mint', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'mintGradual',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'minters', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setGradualMinter',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setMinter', values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalInstantPower', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'updateUserVotingPower', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateVotingPower', values?: undefined): string;
  encodeFunctionData(functionFragment: 'userInstantPower', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'userTranches',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'FULL_POWER_TIME', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'FULL_POWER_TRANCHES_COUNT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'TRANCHE_TIME', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burnGradual', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'firstTrancheStartTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCurrentTrancheIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getGlobalGradual', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLastFinishedTrancheIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNextTrancheEndTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNotUpdatedGlobalGradual', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNotUpdatedUserGradual', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalGradualVotingPower', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTrancheEndTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTrancheIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserGradual', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserGradualVotingPower', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gradualMinters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'indexedGlobalTranches', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintGradual', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGradualMinter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMinter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalInstantPower', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateUserVotingPower', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateVotingPower', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userInstantPower', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userTranches', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Burned(address,uint256)': EventFragment;
    'GlobalGradualUpdated(uint16,uint48,uint48,uint56)': EventFragment;
    'GradualBurned(address,uint256,bool)': EventFragment;
    'GradualMinted(address,uint256)': EventFragment;
    'GradualMinterSet(address,bool)': EventFragment;
    'Minted(address,uint256)': EventFragment;
    'MinterSet(address,bool)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'UserGradualUpdated(address,uint16,uint48,uint48,uint56)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Burned'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GlobalGradualUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GradualBurned'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GradualMinted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GradualMinterSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Minted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MinterSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UserGradualUpdated'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BurnedEventObject {
  source: string;
  amount: BigNumber;
}
export type BurnedEvent = TypedEvent<[string, BigNumber], BurnedEventObject>;

export type BurnedEventFilter = TypedEventFilter<BurnedEvent>;

export interface GlobalGradualUpdatedEventObject {
  lastUpdatedTrancheIndex: number;
  totalMaturedVotingPower: number;
  totalMaturingAmount: number;
  totalRawUnmaturedVotingPower: BigNumber;
}
export type GlobalGradualUpdatedEvent = TypedEvent<
  [number, number, number, BigNumber],
  GlobalGradualUpdatedEventObject
>;

export type GlobalGradualUpdatedEventFilter = TypedEventFilter<GlobalGradualUpdatedEvent>;

export interface GradualBurnedEventObject {
  source: string;
  amount: BigNumber;
  burnAll: boolean;
}
export type GradualBurnedEvent = TypedEvent<[string, BigNumber, boolean], GradualBurnedEventObject>;

export type GradualBurnedEventFilter = TypedEventFilter<GradualBurnedEvent>;

export interface GradualMintedEventObject {
  recipient: string;
  amount: BigNumber;
}
export type GradualMintedEvent = TypedEvent<[string, BigNumber], GradualMintedEventObject>;

export type GradualMintedEventFilter = TypedEventFilter<GradualMintedEvent>;

export interface GradualMinterSetEventObject {
  minter: string;
  set: boolean;
}
export type GradualMinterSetEvent = TypedEvent<[string, boolean], GradualMinterSetEventObject>;

export type GradualMinterSetEventFilter = TypedEventFilter<GradualMinterSetEvent>;

export interface MintedEventObject {
  recipient: string;
  amount: BigNumber;
}
export type MintedEvent = TypedEvent<[string, BigNumber], MintedEventObject>;

export type MintedEventFilter = TypedEventFilter<MintedEvent>;

export interface MinterSetEventObject {
  minter: string;
  set: boolean;
}
export type MinterSetEvent = TypedEvent<[string, boolean], MinterSetEventObject>;

export type MinterSetEventFilter = TypedEventFilter<MinterSetEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UserGradualUpdatedEventObject {
  user: string;
  lastUpdatedTrancheIndex: number;
  maturedVotingPower: number;
  maturingAmount: number;
  rawUnmaturedVotingPower: BigNumber;
}
export type UserGradualUpdatedEvent = TypedEvent<
  [string, number, number, number, BigNumber],
  UserGradualUpdatedEventObject
>;

export type UserGradualUpdatedEventFilter = TypedEventFilter<UserGradualUpdatedEvent>;

export interface SpoolVospool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SpoolVospoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FULL_POWER_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    FULL_POWER_TRANCHES_COUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    TRANCHE_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    burnGradual(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      burnAll: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    firstTrancheStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentTrancheIndex(overrides?: CallOverrides): Promise<[number]>;

    getGlobalGradual(overrides?: CallOverrides): Promise<[GlobalGradualStructOutput]>;

    getLastFinishedTrancheIndex(overrides?: CallOverrides): Promise<[number]>;

    getNextTrancheEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNotUpdatedGlobalGradual(overrides?: CallOverrides): Promise<[GlobalGradualStructOutput]>;

    getNotUpdatedUserGradual(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[UserGradualStructOutput]>;

    getTotalGradualVotingPower(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTrancheEndTime(trancheIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTrancheIndex(time: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserGradual(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[UserGradualStructOutput]>;

    getUserGradualVotingPower(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    gradualMinters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    indexedGlobalTranches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [TrancheStructOutput, TrancheStructOutput, TrancheStructOutput, TrancheStructOutput, TrancheStructOutput] & {
        zero: TrancheStructOutput;
        one: TrancheStructOutput;
        two: TrancheStructOutput;
        three: TrancheStructOutput;
        four: TrancheStructOutput;
      }
    >;

    mint(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mintGradual(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    minters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    setGradualMinter(
      _gradualMinter: PromiseOrValue<string>,
      _set: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMinter(
      _minter: PromiseOrValue<string>,
      _set: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalInstantPower(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    transferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    updateUserVotingPower(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateVotingPower(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    userInstantPower(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    userTranches(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [UserTrancheStructOutput, UserTrancheStructOutput, UserTrancheStructOutput, UserTrancheStructOutput] & {
        zero: UserTrancheStructOutput;
        one: UserTrancheStructOutput;
        two: UserTrancheStructOutput;
        three: UserTrancheStructOutput;
      }
    >;
  };

  FULL_POWER_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  FULL_POWER_TRANCHES_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

  TRANCHE_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    from: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  burnGradual(
    from: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    burnAll: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  firstTrancheStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentTrancheIndex(overrides?: CallOverrides): Promise<number>;

  getGlobalGradual(overrides?: CallOverrides): Promise<GlobalGradualStructOutput>;

  getLastFinishedTrancheIndex(overrides?: CallOverrides): Promise<number>;

  getNextTrancheEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  getNotUpdatedGlobalGradual(overrides?: CallOverrides): Promise<GlobalGradualStructOutput>;

  getNotUpdatedUserGradual(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<UserGradualStructOutput>;

  getTotalGradualVotingPower(overrides?: CallOverrides): Promise<BigNumber>;

  getTrancheEndTime(trancheIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getTrancheIndex(time: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getUserGradual(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<UserGradualStructOutput>;

  getUserGradualVotingPower(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  gradualMinters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  indexedGlobalTranches(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [TrancheStructOutput, TrancheStructOutput, TrancheStructOutput, TrancheStructOutput, TrancheStructOutput] & {
      zero: TrancheStructOutput;
      one: TrancheStructOutput;
      two: TrancheStructOutput;
      three: TrancheStructOutput;
      four: TrancheStructOutput;
    }
  >;

  mint(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mintGradual(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  minters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  setGradualMinter(
    _gradualMinter: PromiseOrValue<string>,
    _set: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMinter(
    _minter: PromiseOrValue<string>,
    _set: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalInstantPower(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  transferFrom(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  updateUserVotingPower(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateVotingPower(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  userInstantPower(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  userTranches(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [UserTrancheStructOutput, UserTrancheStructOutput, UserTrancheStructOutput, UserTrancheStructOutput] & {
      zero: UserTrancheStructOutput;
      one: UserTrancheStructOutput;
      two: UserTrancheStructOutput;
      three: UserTrancheStructOutput;
    }
  >;

  callStatic: {
    FULL_POWER_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    FULL_POWER_TRANCHES_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    TRANCHE_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    burn(from: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    burnGradual(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      burnAll: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    firstTrancheStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTrancheIndex(overrides?: CallOverrides): Promise<number>;

    getGlobalGradual(overrides?: CallOverrides): Promise<GlobalGradualStructOutput>;

    getLastFinishedTrancheIndex(overrides?: CallOverrides): Promise<number>;

    getNextTrancheEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    getNotUpdatedGlobalGradual(overrides?: CallOverrides): Promise<GlobalGradualStructOutput>;

    getNotUpdatedUserGradual(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<UserGradualStructOutput>;

    getTotalGradualVotingPower(overrides?: CallOverrides): Promise<BigNumber>;

    getTrancheEndTime(trancheIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getTrancheIndex(time: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getUserGradual(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<UserGradualStructOutput>;

    getUserGradualVotingPower(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    gradualMinters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    indexedGlobalTranches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [TrancheStructOutput, TrancheStructOutput, TrancheStructOutput, TrancheStructOutput, TrancheStructOutput] & {
        zero: TrancheStructOutput;
        one: TrancheStructOutput;
        two: TrancheStructOutput;
        three: TrancheStructOutput;
        four: TrancheStructOutput;
      }
    >;

    mint(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    mintGradual(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    minters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    setGradualMinter(
      _gradualMinter: PromiseOrValue<string>,
      _set: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMinter(_minter: PromiseOrValue<string>, _set: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalInstantPower(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    updateUserVotingPower(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateVotingPower(overrides?: CallOverrides): Promise<void>;

    userInstantPower(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userTranches(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [UserTrancheStructOutput, UserTrancheStructOutput, UserTrancheStructOutput, UserTrancheStructOutput] & {
        zero: UserTrancheStructOutput;
        one: UserTrancheStructOutput;
        two: UserTrancheStructOutput;
        three: UserTrancheStructOutput;
      }
    >;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'Burned(address,uint256)'(source?: PromiseOrValue<string> | null, amount?: null): BurnedEventFilter;
    Burned(source?: PromiseOrValue<string> | null, amount?: null): BurnedEventFilter;

    'GlobalGradualUpdated(uint16,uint48,uint48,uint56)'(
      lastUpdatedTrancheIndex?: PromiseOrValue<BigNumberish> | null,
      totalMaturedVotingPower?: null,
      totalMaturingAmount?: null,
      totalRawUnmaturedVotingPower?: null,
    ): GlobalGradualUpdatedEventFilter;
    GlobalGradualUpdated(
      lastUpdatedTrancheIndex?: PromiseOrValue<BigNumberish> | null,
      totalMaturedVotingPower?: null,
      totalMaturingAmount?: null,
      totalRawUnmaturedVotingPower?: null,
    ): GlobalGradualUpdatedEventFilter;

    'GradualBurned(address,uint256,bool)'(
      source?: PromiseOrValue<string> | null,
      amount?: null,
      burnAll?: null,
    ): GradualBurnedEventFilter;
    GradualBurned(source?: PromiseOrValue<string> | null, amount?: null, burnAll?: null): GradualBurnedEventFilter;

    'GradualMinted(address,uint256)'(
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
    ): GradualMintedEventFilter;
    GradualMinted(recipient?: PromiseOrValue<string> | null, amount?: null): GradualMintedEventFilter;

    'GradualMinterSet(address,bool)'(minter?: PromiseOrValue<string> | null, set?: null): GradualMinterSetEventFilter;
    GradualMinterSet(minter?: PromiseOrValue<string> | null, set?: null): GradualMinterSetEventFilter;

    'Minted(address,uint256)'(recipient?: PromiseOrValue<string> | null, amount?: null): MintedEventFilter;
    Minted(recipient?: PromiseOrValue<string> | null, amount?: null): MintedEventFilter;

    'MinterSet(address,bool)'(minter?: PromiseOrValue<string> | null, set?: null): MinterSetEventFilter;
    MinterSet(minter?: PromiseOrValue<string> | null, set?: null): MinterSetEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;

    'UserGradualUpdated(address,uint16,uint48,uint48,uint56)'(
      user?: PromiseOrValue<string> | null,
      lastUpdatedTrancheIndex?: PromiseOrValue<BigNumberish> | null,
      maturedVotingPower?: null,
      maturingAmount?: null,
      rawUnmaturedVotingPower?: null,
    ): UserGradualUpdatedEventFilter;
    UserGradualUpdated(
      user?: PromiseOrValue<string> | null,
      lastUpdatedTrancheIndex?: PromiseOrValue<BigNumberish> | null,
      maturedVotingPower?: null,
      maturingAmount?: null,
      rawUnmaturedVotingPower?: null,
    ): UserGradualUpdatedEventFilter;
  };

  estimateGas: {
    FULL_POWER_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    FULL_POWER_TRANCHES_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    TRANCHE_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    burnGradual(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      burnAll: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    firstTrancheStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTrancheIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getGlobalGradual(overrides?: CallOverrides): Promise<BigNumber>;

    getLastFinishedTrancheIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getNextTrancheEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    getNotUpdatedGlobalGradual(overrides?: CallOverrides): Promise<BigNumber>;

    getNotUpdatedUserGradual(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalGradualVotingPower(overrides?: CallOverrides): Promise<BigNumber>;

    getTrancheEndTime(trancheIndex: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getTrancheIndex(time: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getUserGradual(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getUserGradualVotingPower(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    gradualMinters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    indexedGlobalTranches(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mintGradual(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    minters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    setGradualMinter(
      _gradualMinter: PromiseOrValue<string>,
      _set: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMinter(
      _minter: PromiseOrValue<string>,
      _set: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalInstantPower(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    updateUserVotingPower(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateVotingPower(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    userInstantPower(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userTranches(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FULL_POWER_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FULL_POWER_TRANCHES_COUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TRANCHE_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    burnGradual(
      from: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      burnAll: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstTrancheStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentTrancheIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGlobalGradual(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastFinishedTrancheIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNextTrancheEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNotUpdatedGlobalGradual(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNotUpdatedUserGradual(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalGradualVotingPower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTrancheEndTime(
      trancheIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTrancheIndex(time: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserGradual(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserGradualVotingPower(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gradualMinters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    indexedGlobalTranches(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mintGradual(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    minters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGradualMinter(
      _gradualMinter: PromiseOrValue<string>,
      _set: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMinter(
      _minter: PromiseOrValue<string>,
      _set: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalInstantPower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    transferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    updateUserVotingPower(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateVotingPower(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    userInstantPower(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userTranches(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
