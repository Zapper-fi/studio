/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace FixedPointMath {
  export type Uq192x64Struct = { x: BigNumberish };

  export type Uq192x64StructOutput = [BigNumber] & { x: BigNumber };
}

export declare namespace Pool {
  export type ViewDataStruct = {
    token: string;
    totalDeposited: BigNumberish;
    rewardWeight: BigNumberish;
    accumulatedRewardWeight: FixedPointMath.Uq192x64Struct;
    lastUpdatedBlock: BigNumberish;
    escrowPercentage: BigNumberish;
    exitFeePercentage: BigNumberish;
    rewardRate: BigNumberish;
    userDeposited: BigNumberish;
    userUnclaimed: BigNumberish;
    userTokenBalance: BigNumberish;
    userTokenApproval: BigNumberish;
  };

  export type ViewDataStructOutput = [
    string,
    BigNumber,
    BigNumber,
    FixedPointMath.Uq192x64StructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    token: string;
    totalDeposited: BigNumber;
    rewardWeight: BigNumber;
    accumulatedRewardWeight: FixedPointMath.Uq192x64StructOutput;
    lastUpdatedBlock: BigNumber;
    escrowPercentage: BigNumber;
    exitFeePercentage: BigNumber;
    rewardRate: BigNumber;
    userDeposited: BigNumber;
    userUnclaimed: BigNumber;
    userTokenBalance: BigNumber;
    userTokenApproval: BigNumber;
  };
}

export interface PieDaoStakingInterface extends utils.Interface {
  functions: {
    'acceptGovernance()': FunctionFragment;
    'claim(uint256)': FunctionFragment;
    'claimReferralRewards()': FunctionFragment;
    'createPool(address)': FunctionFragment;
    'deposit(uint256,uint256)': FunctionFragment;
    'depositReferred(uint256,uint256,address)': FunctionFragment;
    'emergencyExit(uint256)': FunctionFragment;
    'exit(uint256)': FunctionFragment;
    'exitFeeReceiver()': FunctionFragment;
    'getPoolEscrowPercentage(uint256)': FunctionFragment;
    'getPoolExitFeePercentage(uint256)': FunctionFragment;
    'getPoolRewardRate(uint256)': FunctionFragment;
    'getPoolRewardWeight(uint256)': FunctionFragment;
    'getPoolToken(uint256)': FunctionFragment;
    'getPoolTotalDeposited(uint256)': FunctionFragment;
    'getPools(address)': FunctionFragment;
    'getStakeTotalDeposited(address,uint256)': FunctionFragment;
    'getStakeTotalUnclaimed(address,uint256)': FunctionFragment;
    'governance()': FunctionFragment;
    'initialize(address,address,address,address,address)': FunctionFragment;
    'pendingGovernance()': FunctionFragment;
    'poolCount()': FunctionFragment;
    'referralEscrowPercentageOf(address)': FunctionFragment;
    'referralPercentageOf(address)': FunctionFragment;
    'referrerBalanceOf(address)': FunctionFragment;
    'referrerOf(address)': FunctionFragment;
    'reward()': FunctionFragment;
    'rewardRate()': FunctionFragment;
    'rewardSource()': FunctionFragment;
    'saveEth(address,uint256)': FunctionFragment;
    'saveToken(address,address,uint256)': FunctionFragment;
    'setEscrowPercentages(uint256[])': FunctionFragment;
    'setExitFeePercentages(uint256[])': FunctionFragment;
    'setExitFeeReceiver(address)': FunctionFragment;
    'setPendingGovernance(address)': FunctionFragment;
    'setReferrerValues(address,uint256,uint256)': FunctionFragment;
    'setRewardRate(uint256)': FunctionFragment;
    'setRewardWeights(uint256[])': FunctionFragment;
    'tokenPoolIds(address)': FunctionFragment;
    'totalRewardWeight()': FunctionFragment;
    'withdraw(uint256,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptGovernance'
      | 'claim'
      | 'claimReferralRewards'
      | 'createPool'
      | 'deposit'
      | 'depositReferred'
      | 'emergencyExit'
      | 'exit'
      | 'exitFeeReceiver'
      | 'getPoolEscrowPercentage'
      | 'getPoolExitFeePercentage'
      | 'getPoolRewardRate'
      | 'getPoolRewardWeight'
      | 'getPoolToken'
      | 'getPoolTotalDeposited'
      | 'getPools'
      | 'getStakeTotalDeposited'
      | 'getStakeTotalUnclaimed'
      | 'governance'
      | 'initialize'
      | 'pendingGovernance'
      | 'poolCount'
      | 'referralEscrowPercentageOf'
      | 'referralPercentageOf'
      | 'referrerBalanceOf'
      | 'referrerOf'
      | 'reward'
      | 'rewardRate'
      | 'rewardSource'
      | 'saveEth'
      | 'saveToken'
      | 'setEscrowPercentages'
      | 'setExitFeePercentages'
      | 'setExitFeeReceiver'
      | 'setPendingGovernance'
      | 'setReferrerValues'
      | 'setRewardRate'
      | 'setRewardWeights'
      | 'tokenPoolIds'
      | 'totalRewardWeight'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'acceptGovernance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claim', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'claimReferralRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'createPool', values: [string]): string;
  encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'depositReferred', values: [BigNumberish, BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'emergencyExit', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'exit', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'exitFeeReceiver', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPoolEscrowPercentage', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getPoolExitFeePercentage', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getPoolRewardRate', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getPoolRewardWeight', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getPoolToken', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getPoolTotalDeposited', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getPools', values: [string]): string;
  encodeFunctionData(functionFragment: 'getStakeTotalDeposited', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getStakeTotalUnclaimed', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'governance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string, string, string, string, string]): string;
  encodeFunctionData(functionFragment: 'pendingGovernance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'referralEscrowPercentageOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'referralPercentageOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'referrerBalanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'referrerOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'reward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardSource', values?: undefined): string;
  encodeFunctionData(functionFragment: 'saveEth', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'saveToken', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setEscrowPercentages', values: [BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'setExitFeePercentages', values: [BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'setExitFeeReceiver', values: [string]): string;
  encodeFunctionData(functionFragment: 'setPendingGovernance', values: [string]): string;
  encodeFunctionData(functionFragment: 'setReferrerValues', values: [string, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setRewardRate', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setRewardWeights', values: [BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'tokenPoolIds', values: [string]): string;
  encodeFunctionData(functionFragment: 'totalRewardWeight', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'acceptGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimReferralRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositReferred', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyExit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exitFeeReceiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolEscrowPercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolExitFeePercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolRewardRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolRewardWeight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolTotalDeposited', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStakeTotalDeposited', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStakeTotalUnclaimed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'referralEscrowPercentageOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'referralPercentageOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'referrerBalanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'referrerOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardSource', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'saveEth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'saveToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEscrowPercentages', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setExitFeePercentages', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setExitFeeReceiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPendingGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setReferrerValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewardRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewardWeights', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenPoolIds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalRewardWeight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'ExitFeeReceiverUpdated(address)': EventFragment;
    'GovernanceUpdated(address)': EventFragment;
    'PendingGovernanceUpdated(address)': EventFragment;
    'PoolCreated(uint256,address)': EventFragment;
    'PoolEscrowPercentageUpdated(uint256,uint256)': EventFragment;
    'PoolExitFeePercentageUpdated(uint256,uint256)': EventFragment;
    'PoolRewardWeightUpdated(uint256,uint256)': EventFragment;
    'ReferrerClaimed(address,uint256)': EventFragment;
    'ReferrerPaid(address,address,uint256)': EventFragment;
    'ReferrerSet(address,address)': EventFragment;
    'RewardRateUpdated(uint256)': EventFragment;
    'TokensClaimed(address,uint256,uint256)': EventFragment;
    'TokensDeposited(address,uint256,uint256)': EventFragment;
    'TokensWithdrawn(address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ExitFeeReceiverUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GovernanceUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PendingGovernanceUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolEscrowPercentageUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolExitFeePercentageUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolRewardWeightUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReferrerClaimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReferrerPaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReferrerSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardRateUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokensClaimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokensDeposited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokensWithdrawn'): EventFragment;
}

export interface ExitFeeReceiverUpdatedEventObject {
  exitFeeReceiver: string;
}
export type ExitFeeReceiverUpdatedEvent = TypedEvent<[string], ExitFeeReceiverUpdatedEventObject>;

export type ExitFeeReceiverUpdatedEventFilter = TypedEventFilter<ExitFeeReceiverUpdatedEvent>;

export interface GovernanceUpdatedEventObject {
  governance: string;
}
export type GovernanceUpdatedEvent = TypedEvent<[string], GovernanceUpdatedEventObject>;

export type GovernanceUpdatedEventFilter = TypedEventFilter<GovernanceUpdatedEvent>;

export interface PendingGovernanceUpdatedEventObject {
  pendingGovernance: string;
}
export type PendingGovernanceUpdatedEvent = TypedEvent<[string], PendingGovernanceUpdatedEventObject>;

export type PendingGovernanceUpdatedEventFilter = TypedEventFilter<PendingGovernanceUpdatedEvent>;

export interface PoolCreatedEventObject {
  poolId: BigNumber;
  token: string;
}
export type PoolCreatedEvent = TypedEvent<[BigNumber, string], PoolCreatedEventObject>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export interface PoolEscrowPercentageUpdatedEventObject {
  poolId: BigNumber;
  escrowPercentage: BigNumber;
}
export type PoolEscrowPercentageUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PoolEscrowPercentageUpdatedEventObject
>;

export type PoolEscrowPercentageUpdatedEventFilter = TypedEventFilter<PoolEscrowPercentageUpdatedEvent>;

export interface PoolExitFeePercentageUpdatedEventObject {
  poolId: BigNumber;
  exitFeePercentage: BigNumber;
}
export type PoolExitFeePercentageUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PoolExitFeePercentageUpdatedEventObject
>;

export type PoolExitFeePercentageUpdatedEventFilter = TypedEventFilter<PoolExitFeePercentageUpdatedEvent>;

export interface PoolRewardWeightUpdatedEventObject {
  poolId: BigNumber;
  rewardWeight: BigNumber;
}
export type PoolRewardWeightUpdatedEvent = TypedEvent<[BigNumber, BigNumber], PoolRewardWeightUpdatedEventObject>;

export type PoolRewardWeightUpdatedEventFilter = TypedEventFilter<PoolRewardWeightUpdatedEvent>;

export interface ReferrerClaimedEventObject {
  referrer: string;
  amount: BigNumber;
}
export type ReferrerClaimedEvent = TypedEvent<[string, BigNumber], ReferrerClaimedEventObject>;

export type ReferrerClaimedEventFilter = TypedEventFilter<ReferrerClaimedEvent>;

export interface ReferrerPaidEventObject {
  user: string;
  referrer: string;
  amount: BigNumber;
}
export type ReferrerPaidEvent = TypedEvent<[string, string, BigNumber], ReferrerPaidEventObject>;

export type ReferrerPaidEventFilter = TypedEventFilter<ReferrerPaidEvent>;

export interface ReferrerSetEventObject {
  user: string;
  referrer: string;
}
export type ReferrerSetEvent = TypedEvent<[string, string], ReferrerSetEventObject>;

export type ReferrerSetEventFilter = TypedEventFilter<ReferrerSetEvent>;

export interface RewardRateUpdatedEventObject {
  rewardRate: BigNumber;
}
export type RewardRateUpdatedEvent = TypedEvent<[BigNumber], RewardRateUpdatedEventObject>;

export type RewardRateUpdatedEventFilter = TypedEventFilter<RewardRateUpdatedEvent>;

export interface TokensClaimedEventObject {
  user: string;
  poolId: BigNumber;
  amount: BigNumber;
}
export type TokensClaimedEvent = TypedEvent<[string, BigNumber, BigNumber], TokensClaimedEventObject>;

export type TokensClaimedEventFilter = TypedEventFilter<TokensClaimedEvent>;

export interface TokensDepositedEventObject {
  user: string;
  poolId: BigNumber;
  amount: BigNumber;
}
export type TokensDepositedEvent = TypedEvent<[string, BigNumber, BigNumber], TokensDepositedEventObject>;

export type TokensDepositedEventFilter = TypedEventFilter<TokensDepositedEvent>;

export interface TokensWithdrawnEventObject {
  user: string;
  poolId: BigNumber;
  amount: BigNumber;
}
export type TokensWithdrawnEvent = TypedEvent<[string, BigNumber, BigNumber], TokensWithdrawnEventObject>;

export type TokensWithdrawnEventFilter = TypedEventFilter<TokensWithdrawnEvent>;

export interface PieDaoStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PieDaoStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    claim(
      _poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claimReferralRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    createPool(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deposit(
      _poolId: BigNumberish,
      _depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositReferred(
      _poolId: BigNumberish,
      _depositAmount: BigNumberish,
      _referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    emergencyExit(
      _poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    exit(
      _poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    exitFeeReceiver(overrides?: CallOverrides): Promise<[string]>;

    getPoolEscrowPercentage(_poolId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoolExitFeePercentage(_poolId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoolRewardRate(_poolId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoolRewardWeight(_poolId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoolToken(_poolId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getPoolTotalDeposited(_poolId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPools(_account: string, overrides?: CallOverrides): Promise<[Pool.ViewDataStructOutput[]]>;

    getStakeTotalDeposited(_account: string, _poolId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakeTotalUnclaimed(_account: string, _poolId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _reward: string,
      _rewardSource: string,
      _exitFeeReceiver: string,
      _rewardEscrow: string,
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    pendingGovernance(overrides?: CallOverrides): Promise<[string]>;

    poolCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    referralEscrowPercentageOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    referralPercentageOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    referrerBalanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    referrerOf(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    reward(overrides?: CallOverrides): Promise<[string]>;

    rewardRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardSource(overrides?: CallOverrides): Promise<[string]>;

    saveEth(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    saveToken(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setEscrowPercentages(
      _escrowPercentages: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setExitFeePercentages(
      _exitFeePercentages: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setExitFeeReceiver(
      _exitFeeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPendingGovernance(
      _pendingGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setReferrerValues(
      _referrer: string,
      _referralPercentage: BigNumberish,
      _referralEscrowPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRewardRate(
      _rewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRewardWeights(
      _rewardWeights: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    tokenPoolIds(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRewardWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _poolId: BigNumberish,
      _withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  acceptGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  claim(
    _poolId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claimReferralRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  createPool(_token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  deposit(
    _poolId: BigNumberish,
    _depositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositReferred(
    _poolId: BigNumberish,
    _depositAmount: BigNumberish,
    _referrer: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  emergencyExit(
    _poolId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  exit(
    _poolId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  exitFeeReceiver(overrides?: CallOverrides): Promise<string>;

  getPoolEscrowPercentage(_poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getPoolExitFeePercentage(_poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getPoolRewardRate(_poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getPoolRewardWeight(_poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getPoolToken(_poolId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getPoolTotalDeposited(_poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getPools(_account: string, overrides?: CallOverrides): Promise<Pool.ViewDataStructOutput[]>;

  getStakeTotalDeposited(_account: string, _poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getStakeTotalUnclaimed(_account: string, _poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  governance(overrides?: CallOverrides): Promise<string>;

  initialize(
    _reward: string,
    _rewardSource: string,
    _exitFeeReceiver: string,
    _rewardEscrow: string,
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  pendingGovernance(overrides?: CallOverrides): Promise<string>;

  poolCount(overrides?: CallOverrides): Promise<BigNumber>;

  referralEscrowPercentageOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  referralPercentageOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  referrerBalanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  referrerOf(arg0: string, overrides?: CallOverrides): Promise<string>;

  reward(overrides?: CallOverrides): Promise<string>;

  rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  rewardSource(overrides?: CallOverrides): Promise<string>;

  saveEth(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  saveToken(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setEscrowPercentages(
    _escrowPercentages: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setExitFeePercentages(
    _exitFeePercentages: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setExitFeeReceiver(
    _exitFeeReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPendingGovernance(
    _pendingGovernance: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setReferrerValues(
    _referrer: string,
    _referralPercentage: BigNumberish,
    _referralEscrowPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRewardRate(
    _rewardRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRewardWeights(
    _rewardWeights: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  tokenPoolIds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalRewardWeight(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _poolId: BigNumberish,
    _withdrawAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    claim(_poolId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    claimReferralRewards(overrides?: CallOverrides): Promise<void>;

    createPool(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(_poolId: BigNumberish, _depositAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositReferred(
      _poolId: BigNumberish,
      _depositAmount: BigNumberish,
      _referrer: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    emergencyExit(_poolId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    exit(_poolId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    exitFeeReceiver(overrides?: CallOverrides): Promise<string>;

    getPoolEscrowPercentage(_poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolExitFeePercentage(_poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolRewardRate(_poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolRewardWeight(_poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolToken(_poolId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getPoolTotalDeposited(_poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPools(_account: string, overrides?: CallOverrides): Promise<Pool.ViewDataStructOutput[]>;

    getStakeTotalDeposited(_account: string, _poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getStakeTotalUnclaimed(_account: string, _poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    initialize(
      _reward: string,
      _rewardSource: string,
      _exitFeeReceiver: string,
      _rewardEscrow: string,
      _governance: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    pendingGovernance(overrides?: CallOverrides): Promise<string>;

    poolCount(overrides?: CallOverrides): Promise<BigNumber>;

    referralEscrowPercentageOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    referralPercentageOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    referrerBalanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    referrerOf(arg0: string, overrides?: CallOverrides): Promise<string>;

    reward(overrides?: CallOverrides): Promise<string>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    rewardSource(overrides?: CallOverrides): Promise<string>;

    saveEth(_to: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    saveToken(_token: string, _to: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setEscrowPercentages(_escrowPercentages: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    setExitFeePercentages(_exitFeePercentages: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    setExitFeeReceiver(_exitFeeReceiver: string, overrides?: CallOverrides): Promise<void>;

    setPendingGovernance(_pendingGovernance: string, overrides?: CallOverrides): Promise<void>;

    setReferrerValues(
      _referrer: string,
      _referralPercentage: BigNumberish,
      _referralEscrowPercentage: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setRewardRate(_rewardRate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setRewardWeights(_rewardWeights: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    tokenPoolIds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalRewardWeight(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(_poolId: BigNumberish, _withdrawAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'ExitFeeReceiverUpdated(address)'(exitFeeReceiver?: string | null): ExitFeeReceiverUpdatedEventFilter;
    ExitFeeReceiverUpdated(exitFeeReceiver?: string | null): ExitFeeReceiverUpdatedEventFilter;

    'GovernanceUpdated(address)'(governance?: null): GovernanceUpdatedEventFilter;
    GovernanceUpdated(governance?: null): GovernanceUpdatedEventFilter;

    'PendingGovernanceUpdated(address)'(pendingGovernance?: null): PendingGovernanceUpdatedEventFilter;
    PendingGovernanceUpdated(pendingGovernance?: null): PendingGovernanceUpdatedEventFilter;

    'PoolCreated(uint256,address)'(poolId?: BigNumberish | null, token?: string | null): PoolCreatedEventFilter;
    PoolCreated(poolId?: BigNumberish | null, token?: string | null): PoolCreatedEventFilter;

    'PoolEscrowPercentageUpdated(uint256,uint256)'(
      poolId?: BigNumberish | null,
      escrowPercentage?: null,
    ): PoolEscrowPercentageUpdatedEventFilter;
    PoolEscrowPercentageUpdated(
      poolId?: BigNumberish | null,
      escrowPercentage?: null,
    ): PoolEscrowPercentageUpdatedEventFilter;

    'PoolExitFeePercentageUpdated(uint256,uint256)'(
      poolId?: BigNumberish | null,
      exitFeePercentage?: null,
    ): PoolExitFeePercentageUpdatedEventFilter;
    PoolExitFeePercentageUpdated(
      poolId?: BigNumberish | null,
      exitFeePercentage?: null,
    ): PoolExitFeePercentageUpdatedEventFilter;

    'PoolRewardWeightUpdated(uint256,uint256)'(
      poolId?: BigNumberish | null,
      rewardWeight?: null,
    ): PoolRewardWeightUpdatedEventFilter;
    PoolRewardWeightUpdated(poolId?: BigNumberish | null, rewardWeight?: null): PoolRewardWeightUpdatedEventFilter;

    'ReferrerClaimed(address,uint256)'(referrer?: string | null, amount?: null): ReferrerClaimedEventFilter;
    ReferrerClaimed(referrer?: string | null, amount?: null): ReferrerClaimedEventFilter;

    'ReferrerPaid(address,address,uint256)'(
      user?: string | null,
      referrer?: string | null,
      amount?: null,
    ): ReferrerPaidEventFilter;
    ReferrerPaid(user?: string | null, referrer?: string | null, amount?: null): ReferrerPaidEventFilter;

    'ReferrerSet(address,address)'(user?: string | null, referrer?: string | null): ReferrerSetEventFilter;
    ReferrerSet(user?: string | null, referrer?: string | null): ReferrerSetEventFilter;

    'RewardRateUpdated(uint256)'(rewardRate?: null): RewardRateUpdatedEventFilter;
    RewardRateUpdated(rewardRate?: null): RewardRateUpdatedEventFilter;

    'TokensClaimed(address,uint256,uint256)'(
      user?: string | null,
      poolId?: BigNumberish | null,
      amount?: null,
    ): TokensClaimedEventFilter;
    TokensClaimed(user?: string | null, poolId?: BigNumberish | null, amount?: null): TokensClaimedEventFilter;

    'TokensDeposited(address,uint256,uint256)'(
      user?: string | null,
      poolId?: BigNumberish | null,
      amount?: null,
    ): TokensDepositedEventFilter;
    TokensDeposited(user?: string | null, poolId?: BigNumberish | null, amount?: null): TokensDepositedEventFilter;

    'TokensWithdrawn(address,uint256,uint256)'(
      user?: string | null,
      poolId?: BigNumberish | null,
      amount?: null,
    ): TokensWithdrawnEventFilter;
    TokensWithdrawn(user?: string | null, poolId?: BigNumberish | null, amount?: null): TokensWithdrawnEventFilter;
  };

  estimateGas: {
    acceptGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    claim(_poolId: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    claimReferralRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    createPool(_token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    deposit(
      _poolId: BigNumberish,
      _depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    depositReferred(
      _poolId: BigNumberish,
      _depositAmount: BigNumberish,
      _referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    emergencyExit(
      _poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    exit(_poolId: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    exitFeeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolEscrowPercentage(_poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolExitFeePercentage(_poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolRewardRate(_poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolRewardWeight(_poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolToken(_poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolTotalDeposited(_poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPools(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getStakeTotalDeposited(_account: string, _poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getStakeTotalUnclaimed(_account: string, _poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _reward: string,
      _rewardSource: string,
      _exitFeeReceiver: string,
      _rewardEscrow: string,
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    pendingGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    poolCount(overrides?: CallOverrides): Promise<BigNumber>;

    referralEscrowPercentageOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    referralPercentageOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    referrerBalanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    referrerOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    reward(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    rewardSource(overrides?: CallOverrides): Promise<BigNumber>;

    saveEth(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    saveToken(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setEscrowPercentages(
      _escrowPercentages: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setExitFeePercentages(
      _exitFeePercentages: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setExitFeeReceiver(
      _exitFeeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setPendingGovernance(
      _pendingGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setReferrerValues(
      _referrer: string,
      _referralPercentage: BigNumberish,
      _referralEscrowPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setRewardRate(
      _rewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setRewardWeights(
      _rewardWeights: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    tokenPoolIds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalRewardWeight(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _poolId: BigNumberish,
      _withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    claim(
      _poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claimReferralRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    createPool(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      _poolId: BigNumberish,
      _depositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositReferred(
      _poolId: BigNumberish,
      _depositAmount: BigNumberish,
      _referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    emergencyExit(
      _poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    exit(
      _poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    exitFeeReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolEscrowPercentage(_poolId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolExitFeePercentage(_poolId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolRewardRate(_poolId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolRewardWeight(_poolId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolToken(_poolId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolTotalDeposited(_poolId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPools(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakeTotalDeposited(
      _account: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getStakeTotalUnclaimed(
      _account: string,
      _poolId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _reward: string,
      _rewardSource: string,
      _exitFeeReceiver: string,
      _rewardEscrow: string,
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    pendingGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referralEscrowPercentageOf(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referralPercentageOf(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referrerBalanceOf(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referrerOf(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardSource(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saveEth(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    saveToken(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setEscrowPercentages(
      _escrowPercentages: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setExitFeePercentages(
      _exitFeePercentages: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setExitFeeReceiver(
      _exitFeeReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPendingGovernance(
      _pendingGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setReferrerValues(
      _referrer: string,
      _referralPercentage: BigNumberish,
      _referralEscrowPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRewardRate(
      _rewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRewardWeights(
      _rewardWeights: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    tokenPoolIds(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRewardWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _poolId: BigNumberish,
      _withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
