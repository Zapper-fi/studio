/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace UserInfoStorage {
  export type CdpInfoStruct = {
    hasCdp: PromiseOrValue<boolean>;
    bitten: PromiseOrValue<boolean>;
    cdp: PromiseOrValue<BigNumberish>;
    ethDeposit: PromiseOrValue<BigNumberish>;
    daiDebt: PromiseOrValue<BigNumberish>;
    maxDaiDebt: PromiseOrValue<BigNumberish>;
    minEthDeposit: PromiseOrValue<BigNumberish>;
  };

  export type CdpInfoStructOutput = [boolean, boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    hasCdp: boolean;
    bitten: boolean;
    cdp: BigNumber;
    ethDeposit: BigNumber;
    daiDebt: BigNumber;
    maxDaiDebt: BigNumber;
    minEthDeposit: BigNumber;
  };

  export type ProxyInfoStruct = {
    hasProxy: PromiseOrValue<boolean>;
    userProxy: PromiseOrValue<string>;
  };

  export type ProxyInfoStructOutput = [boolean, string] & {
    hasProxy: boolean;
    userProxy: string;
  };

  export type UserRatingInfoStruct = {
    userRating: PromiseOrValue<BigNumberish>;
    userRatingProgressPerSec: PromiseOrValue<BigNumberish>;
    totalRating: PromiseOrValue<BigNumberish>;
    totalRatingProgressPerSec: PromiseOrValue<BigNumberish>;
    jarBalance: PromiseOrValue<BigNumberish>;
  };

  export type UserRatingInfoStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    userRating: BigNumber;
    userRatingProgressPerSec: BigNumber;
    totalRating: BigNumber;
    totalRatingProgressPerSec: BigNumber;
    jarBalance: BigNumber;
  };

  export type MiscInfoStruct = {
    spotPrice: PromiseOrValue<BigNumberish>;
    dustInWei: PromiseOrValue<BigNumberish>;
    blockNumber: PromiseOrValue<BigNumberish>;
  };

  export type MiscInfoStructOutput = [BigNumber, BigNumber, BigNumber] & {
    spotPrice: BigNumber;
    dustInWei: BigNumber;
    blockNumber: BigNumber;
  };

  export type UserWalletInfoStruct = {
    ethBalance: PromiseOrValue<BigNumberish>;
    daiBalance: PromiseOrValue<BigNumberish>;
    daiAllowance: PromiseOrValue<BigNumberish>;
  };

  export type UserWalletInfoStructOutput = [BigNumber, BigNumber, BigNumber] & {
    ethBalance: BigNumber;
    daiBalance: BigNumber;
    daiAllowance: BigNumber;
  };

  export type UserStateStruct = {
    proxyInfo: UserInfoStorage.ProxyInfoStruct;
    bCdpInfo: UserInfoStorage.CdpInfoStruct;
    makerdaoCdpInfo: UserInfoStorage.CdpInfoStruct;
    userRatingInfo: UserInfoStorage.UserRatingInfoStruct;
    miscInfo: UserInfoStorage.MiscInfoStruct;
    userWalletInfo: UserInfoStorage.UserWalletInfoStruct;
  };

  export type UserStateStructOutput = [
    UserInfoStorage.ProxyInfoStructOutput,
    UserInfoStorage.CdpInfoStructOutput,
    UserInfoStorage.CdpInfoStructOutput,
    UserInfoStorage.UserRatingInfoStructOutput,
    UserInfoStorage.MiscInfoStructOutput,
    UserInfoStorage.UserWalletInfoStructOutput,
  ] & {
    proxyInfo: UserInfoStorage.ProxyInfoStructOutput;
    bCdpInfo: UserInfoStorage.CdpInfoStructOutput;
    makerdaoCdpInfo: UserInfoStorage.CdpInfoStructOutput;
    userRatingInfo: UserInfoStorage.UserRatingInfoStructOutput;
    miscInfo: UserInfoStorage.MiscInfoStructOutput;
    userWalletInfo: UserInfoStorage.UserWalletInfoStructOutput;
  };
}

export interface BProtocolGetInfoInterface extends utils.Interface {
  functions: {
    'bitten()': FunctionFragment;
    'blockNumber()': FunctionFragment;
    'cdp()': FunctionFragment;
    'dai()': FunctionFragment;
    'daiAllowance()': FunctionFragment;
    'daiBalance()': FunctionFragment;
    'daiDebt()': FunctionFragment;
    'dustInWei()': FunctionFragment;
    'ethBalance()': FunctionFragment;
    'ethDeposit()': FunctionFragment;
    'findFirstNonZeroInkCdp(address,address,bytes32,address,address)': FunctionFragment;
    'getCdpInfo(address,address,bytes32,address,address,bool)': FunctionFragment;
    'getInfo(address,bytes32,address,address,address,address,address,address,address)': FunctionFragment;
    'getProxyInfo(address,address)': FunctionFragment;
    'getUserRatingInfo(bytes32,address,address,uint256,address)': FunctionFragment;
    'hasCdp()': FunctionFragment;
    'hasProxy()': FunctionFragment;
    'jarBalance()': FunctionFragment;
    'makerdaoCdp()': FunctionFragment;
    'makerdaoDaiDebt()': FunctionFragment;
    'makerdaoEthDeposit()': FunctionFragment;
    'makerdaoHasCdp()': FunctionFragment;
    'makerdaoMaxDaiDebt()': FunctionFragment;
    'maxDaiDebt()': FunctionFragment;
    'set(((bool,address),(bool,bool,uint256,uint256,uint256,uint256,uint256),(bool,bool,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256),(uint256,uint256,uint256)))': FunctionFragment;
    'setInfo(address,bytes32,address,address,address,address,address,address,address)': FunctionFragment;
    'spotPrice()': FunctionFragment;
    'totalRating()': FunctionFragment;
    'totalRatingProgressPerSec()': FunctionFragment;
    'userProxy()': FunctionFragment;
    'userRating()': FunctionFragment;
    'userRatingProgressPerSec()': FunctionFragment;
    'weth()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'bitten'
      | 'blockNumber'
      | 'cdp'
      | 'dai'
      | 'daiAllowance'
      | 'daiBalance'
      | 'daiDebt'
      | 'dustInWei'
      | 'ethBalance'
      | 'ethDeposit'
      | 'findFirstNonZeroInkCdp'
      | 'getCdpInfo'
      | 'getInfo'
      | 'getProxyInfo'
      | 'getUserRatingInfo'
      | 'hasCdp'
      | 'hasProxy'
      | 'jarBalance'
      | 'makerdaoCdp'
      | 'makerdaoDaiDebt'
      | 'makerdaoEthDeposit'
      | 'makerdaoHasCdp'
      | 'makerdaoMaxDaiDebt'
      | 'maxDaiDebt'
      | 'set'
      | 'setInfo'
      | 'spotPrice'
      | 'totalRating'
      | 'totalRatingProgressPerSec'
      | 'userProxy'
      | 'userRating'
      | 'userRatingProgressPerSec'
      | 'weth',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'bitten', values?: undefined): string;
  encodeFunctionData(functionFragment: 'blockNumber', values?: undefined): string;
  encodeFunctionData(functionFragment: 'cdp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'dai', values?: undefined): string;
  encodeFunctionData(functionFragment: 'daiAllowance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'daiBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'daiDebt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'dustInWei', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ethBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ethDeposit', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'findFirstNonZeroInkCdp',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getCdpInfo',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getInfo',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getProxyInfo',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserRatingInfo',
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'hasCdp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'hasProxy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'jarBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'makerdaoCdp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'makerdaoDaiDebt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'makerdaoEthDeposit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'makerdaoHasCdp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'makerdaoMaxDaiDebt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxDaiDebt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'set', values: [UserInfoStorage.UserStateStruct]): string;
  encodeFunctionData(
    functionFragment: 'setInfo',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'spotPrice', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalRating', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalRatingProgressPerSec', values?: undefined): string;
  encodeFunctionData(functionFragment: 'userProxy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'userRating', values?: undefined): string;
  encodeFunctionData(functionFragment: 'userRatingProgressPerSec', values?: undefined): string;
  encodeFunctionData(functionFragment: 'weth', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'bitten', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'blockNumber', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cdp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dai', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'daiAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'daiBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'daiDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dustInWei', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ethBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ethDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'findFirstNonZeroInkCdp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCdpInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProxyInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserRatingInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasCdp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasProxy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'jarBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'makerdaoCdp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'makerdaoDaiDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'makerdaoEthDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'makerdaoHasCdp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'makerdaoMaxDaiDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxDaiDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'spotPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalRating', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalRatingProgressPerSec', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userProxy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userRating', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userRatingProgressPerSec', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'weth', data: BytesLike): Result;

  events: {};
}

export interface BProtocolGetInfo extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BProtocolGetInfoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bitten(overrides?: CallOverrides): Promise<[boolean]>;

    blockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    cdp(overrides?: CallOverrides): Promise<[BigNumber]>;

    dai(overrides?: CallOverrides): Promise<[string]>;

    daiAllowance(overrides?: CallOverrides): Promise<[BigNumber]>;

    daiBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    daiDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    dustInWei(overrides?: CallOverrides): Promise<[BigNumber]>;

    ethBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    ethDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    findFirstNonZeroInkCdp(
      manager: PromiseOrValue<string>,
      guy: PromiseOrValue<string>,
      ilk: PromiseOrValue<BytesLike>,
      vat: PromiseOrValue<string>,
      getCdp: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getCdpInfo(
      guy: PromiseOrValue<string>,
      manager: PromiseOrValue<string>,
      ilk: PromiseOrValue<BytesLike>,
      vat: PromiseOrValue<string>,
      getCdp: PromiseOrValue<string>,
      b: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<
      [UserInfoStorage.CdpInfoStructOutput] & {
        info: UserInfoStorage.CdpInfoStructOutput;
      }
    >;

    getInfo(
      user: PromiseOrValue<string>,
      ilk: PromiseOrValue<BytesLike>,
      manager: PromiseOrValue<string>,
      makerDAOManager: PromiseOrValue<string>,
      getCdp: PromiseOrValue<string>,
      vat: PromiseOrValue<string>,
      spot: PromiseOrValue<string>,
      registry: PromiseOrValue<string>,
      jar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getProxyInfo(
      registry: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [UserInfoStorage.ProxyInfoStructOutput] & {
        info: UserInfoStorage.ProxyInfoStructOutput;
      }
    >;

    getUserRatingInfo(
      ilk: PromiseOrValue<BytesLike>,
      urn: PromiseOrValue<string>,
      vat: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      jar: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [UserInfoStorage.UserRatingInfoStructOutput] & {
        info: UserInfoStorage.UserRatingInfoStructOutput;
      }
    >;

    hasCdp(overrides?: CallOverrides): Promise<[boolean]>;

    hasProxy(overrides?: CallOverrides): Promise<[boolean]>;

    jarBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    makerdaoCdp(overrides?: CallOverrides): Promise<[BigNumber]>;

    makerdaoDaiDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    makerdaoEthDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    makerdaoHasCdp(overrides?: CallOverrides): Promise<[boolean]>;

    makerdaoMaxDaiDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDaiDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    set(
      state: UserInfoStorage.UserStateStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setInfo(
      user: PromiseOrValue<string>,
      ilk: PromiseOrValue<BytesLike>,
      manager: PromiseOrValue<string>,
      makerDAOManager: PromiseOrValue<string>,
      getCdp: PromiseOrValue<string>,
      vat: PromiseOrValue<string>,
      spot: PromiseOrValue<string>,
      registry: PromiseOrValue<string>,
      jar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    spotPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRating(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRatingProgressPerSec(overrides?: CallOverrides): Promise<[BigNumber]>;

    userProxy(overrides?: CallOverrides): Promise<[string]>;

    userRating(overrides?: CallOverrides): Promise<[BigNumber]>;

    userRatingProgressPerSec(overrides?: CallOverrides): Promise<[BigNumber]>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  bitten(overrides?: CallOverrides): Promise<boolean>;

  blockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  cdp(overrides?: CallOverrides): Promise<BigNumber>;

  dai(overrides?: CallOverrides): Promise<string>;

  daiAllowance(overrides?: CallOverrides): Promise<BigNumber>;

  daiBalance(overrides?: CallOverrides): Promise<BigNumber>;

  daiDebt(overrides?: CallOverrides): Promise<BigNumber>;

  dustInWei(overrides?: CallOverrides): Promise<BigNumber>;

  ethBalance(overrides?: CallOverrides): Promise<BigNumber>;

  ethDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  findFirstNonZeroInkCdp(
    manager: PromiseOrValue<string>,
    guy: PromiseOrValue<string>,
    ilk: PromiseOrValue<BytesLike>,
    vat: PromiseOrValue<string>,
    getCdp: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getCdpInfo(
    guy: PromiseOrValue<string>,
    manager: PromiseOrValue<string>,
    ilk: PromiseOrValue<BytesLike>,
    vat: PromiseOrValue<string>,
    getCdp: PromiseOrValue<string>,
    b: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<UserInfoStorage.CdpInfoStructOutput>;

  getInfo(
    user: PromiseOrValue<string>,
    ilk: PromiseOrValue<BytesLike>,
    manager: PromiseOrValue<string>,
    makerDAOManager: PromiseOrValue<string>,
    getCdp: PromiseOrValue<string>,
    vat: PromiseOrValue<string>,
    spot: PromiseOrValue<string>,
    registry: PromiseOrValue<string>,
    jar: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getProxyInfo(
    registry: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<UserInfoStorage.ProxyInfoStructOutput>;

  getUserRatingInfo(
    ilk: PromiseOrValue<BytesLike>,
    urn: PromiseOrValue<string>,
    vat: PromiseOrValue<string>,
    cdp: PromiseOrValue<BigNumberish>,
    jar: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<UserInfoStorage.UserRatingInfoStructOutput>;

  hasCdp(overrides?: CallOverrides): Promise<boolean>;

  hasProxy(overrides?: CallOverrides): Promise<boolean>;

  jarBalance(overrides?: CallOverrides): Promise<BigNumber>;

  makerdaoCdp(overrides?: CallOverrides): Promise<BigNumber>;

  makerdaoDaiDebt(overrides?: CallOverrides): Promise<BigNumber>;

  makerdaoEthDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  makerdaoHasCdp(overrides?: CallOverrides): Promise<boolean>;

  makerdaoMaxDaiDebt(overrides?: CallOverrides): Promise<BigNumber>;

  maxDaiDebt(overrides?: CallOverrides): Promise<BigNumber>;

  set(
    state: UserInfoStorage.UserStateStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setInfo(
    user: PromiseOrValue<string>,
    ilk: PromiseOrValue<BytesLike>,
    manager: PromiseOrValue<string>,
    makerDAOManager: PromiseOrValue<string>,
    getCdp: PromiseOrValue<string>,
    vat: PromiseOrValue<string>,
    spot: PromiseOrValue<string>,
    registry: PromiseOrValue<string>,
    jar: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  spotPrice(overrides?: CallOverrides): Promise<BigNumber>;

  totalRating(overrides?: CallOverrides): Promise<BigNumber>;

  totalRatingProgressPerSec(overrides?: CallOverrides): Promise<BigNumber>;

  userProxy(overrides?: CallOverrides): Promise<string>;

  userRating(overrides?: CallOverrides): Promise<BigNumber>;

  userRatingProgressPerSec(overrides?: CallOverrides): Promise<BigNumber>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    bitten(overrides?: CallOverrides): Promise<boolean>;

    blockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    cdp(overrides?: CallOverrides): Promise<BigNumber>;

    dai(overrides?: CallOverrides): Promise<string>;

    daiAllowance(overrides?: CallOverrides): Promise<BigNumber>;

    daiBalance(overrides?: CallOverrides): Promise<BigNumber>;

    daiDebt(overrides?: CallOverrides): Promise<BigNumber>;

    dustInWei(overrides?: CallOverrides): Promise<BigNumber>;

    ethBalance(overrides?: CallOverrides): Promise<BigNumber>;

    ethDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    findFirstNonZeroInkCdp(
      manager: PromiseOrValue<string>,
      guy: PromiseOrValue<string>,
      ilk: PromiseOrValue<BytesLike>,
      vat: PromiseOrValue<string>,
      getCdp: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCdpInfo(
      guy: PromiseOrValue<string>,
      manager: PromiseOrValue<string>,
      ilk: PromiseOrValue<BytesLike>,
      vat: PromiseOrValue<string>,
      getCdp: PromiseOrValue<string>,
      b: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<UserInfoStorage.CdpInfoStructOutput>;

    getInfo(
      user: PromiseOrValue<string>,
      ilk: PromiseOrValue<BytesLike>,
      manager: PromiseOrValue<string>,
      makerDAOManager: PromiseOrValue<string>,
      getCdp: PromiseOrValue<string>,
      vat: PromiseOrValue<string>,
      spot: PromiseOrValue<string>,
      registry: PromiseOrValue<string>,
      jar: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<UserInfoStorage.UserStateStructOutput>;

    getProxyInfo(
      registry: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<UserInfoStorage.ProxyInfoStructOutput>;

    getUserRatingInfo(
      ilk: PromiseOrValue<BytesLike>,
      urn: PromiseOrValue<string>,
      vat: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      jar: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<UserInfoStorage.UserRatingInfoStructOutput>;

    hasCdp(overrides?: CallOverrides): Promise<boolean>;

    hasProxy(overrides?: CallOverrides): Promise<boolean>;

    jarBalance(overrides?: CallOverrides): Promise<BigNumber>;

    makerdaoCdp(overrides?: CallOverrides): Promise<BigNumber>;

    makerdaoDaiDebt(overrides?: CallOverrides): Promise<BigNumber>;

    makerdaoEthDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    makerdaoHasCdp(overrides?: CallOverrides): Promise<boolean>;

    makerdaoMaxDaiDebt(overrides?: CallOverrides): Promise<BigNumber>;

    maxDaiDebt(overrides?: CallOverrides): Promise<BigNumber>;

    set(state: UserInfoStorage.UserStateStruct, overrides?: CallOverrides): Promise<void>;

    setInfo(
      user: PromiseOrValue<string>,
      ilk: PromiseOrValue<BytesLike>,
      manager: PromiseOrValue<string>,
      makerDAOManager: PromiseOrValue<string>,
      getCdp: PromiseOrValue<string>,
      vat: PromiseOrValue<string>,
      spot: PromiseOrValue<string>,
      registry: PromiseOrValue<string>,
      jar: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    spotPrice(overrides?: CallOverrides): Promise<BigNumber>;

    totalRating(overrides?: CallOverrides): Promise<BigNumber>;

    totalRatingProgressPerSec(overrides?: CallOverrides): Promise<BigNumber>;

    userProxy(overrides?: CallOverrides): Promise<string>;

    userRating(overrides?: CallOverrides): Promise<BigNumber>;

    userRatingProgressPerSec(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    bitten(overrides?: CallOverrides): Promise<BigNumber>;

    blockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    cdp(overrides?: CallOverrides): Promise<BigNumber>;

    dai(overrides?: CallOverrides): Promise<BigNumber>;

    daiAllowance(overrides?: CallOverrides): Promise<BigNumber>;

    daiBalance(overrides?: CallOverrides): Promise<BigNumber>;

    daiDebt(overrides?: CallOverrides): Promise<BigNumber>;

    dustInWei(overrides?: CallOverrides): Promise<BigNumber>;

    ethBalance(overrides?: CallOverrides): Promise<BigNumber>;

    ethDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    findFirstNonZeroInkCdp(
      manager: PromiseOrValue<string>,
      guy: PromiseOrValue<string>,
      ilk: PromiseOrValue<BytesLike>,
      vat: PromiseOrValue<string>,
      getCdp: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCdpInfo(
      guy: PromiseOrValue<string>,
      manager: PromiseOrValue<string>,
      ilk: PromiseOrValue<BytesLike>,
      vat: PromiseOrValue<string>,
      getCdp: PromiseOrValue<string>,
      b: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getInfo(
      user: PromiseOrValue<string>,
      ilk: PromiseOrValue<BytesLike>,
      manager: PromiseOrValue<string>,
      makerDAOManager: PromiseOrValue<string>,
      getCdp: PromiseOrValue<string>,
      vat: PromiseOrValue<string>,
      spot: PromiseOrValue<string>,
      registry: PromiseOrValue<string>,
      jar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getProxyInfo(
      registry: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserRatingInfo(
      ilk: PromiseOrValue<BytesLike>,
      urn: PromiseOrValue<string>,
      vat: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      jar: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    hasCdp(overrides?: CallOverrides): Promise<BigNumber>;

    hasProxy(overrides?: CallOverrides): Promise<BigNumber>;

    jarBalance(overrides?: CallOverrides): Promise<BigNumber>;

    makerdaoCdp(overrides?: CallOverrides): Promise<BigNumber>;

    makerdaoDaiDebt(overrides?: CallOverrides): Promise<BigNumber>;

    makerdaoEthDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    makerdaoHasCdp(overrides?: CallOverrides): Promise<BigNumber>;

    makerdaoMaxDaiDebt(overrides?: CallOverrides): Promise<BigNumber>;

    maxDaiDebt(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      state: UserInfoStorage.UserStateStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setInfo(
      user: PromiseOrValue<string>,
      ilk: PromiseOrValue<BytesLike>,
      manager: PromiseOrValue<string>,
      makerDAOManager: PromiseOrValue<string>,
      getCdp: PromiseOrValue<string>,
      vat: PromiseOrValue<string>,
      spot: PromiseOrValue<string>,
      registry: PromiseOrValue<string>,
      jar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    spotPrice(overrides?: CallOverrides): Promise<BigNumber>;

    totalRating(overrides?: CallOverrides): Promise<BigNumber>;

    totalRatingProgressPerSec(overrides?: CallOverrides): Promise<BigNumber>;

    userProxy(overrides?: CallOverrides): Promise<BigNumber>;

    userRating(overrides?: CallOverrides): Promise<BigNumber>;

    userRatingProgressPerSec(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bitten(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cdp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daiAllowance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daiBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daiDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dustInWei(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    findFirstNonZeroInkCdp(
      manager: PromiseOrValue<string>,
      guy: PromiseOrValue<string>,
      ilk: PromiseOrValue<BytesLike>,
      vat: PromiseOrValue<string>,
      getCdp: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getCdpInfo(
      guy: PromiseOrValue<string>,
      manager: PromiseOrValue<string>,
      ilk: PromiseOrValue<BytesLike>,
      vat: PromiseOrValue<string>,
      getCdp: PromiseOrValue<string>,
      b: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getInfo(
      user: PromiseOrValue<string>,
      ilk: PromiseOrValue<BytesLike>,
      manager: PromiseOrValue<string>,
      makerDAOManager: PromiseOrValue<string>,
      getCdp: PromiseOrValue<string>,
      vat: PromiseOrValue<string>,
      spot: PromiseOrValue<string>,
      registry: PromiseOrValue<string>,
      jar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getProxyInfo(
      registry: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserRatingInfo(
      ilk: PromiseOrValue<BytesLike>,
      urn: PromiseOrValue<string>,
      vat: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      jar: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    hasCdp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jarBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makerdaoCdp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makerdaoDaiDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makerdaoEthDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makerdaoHasCdp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makerdaoMaxDaiDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDaiDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    set(
      state: UserInfoStorage.UserStateStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setInfo(
      user: PromiseOrValue<string>,
      ilk: PromiseOrValue<BytesLike>,
      manager: PromiseOrValue<string>,
      makerDAOManager: PromiseOrValue<string>,
      getCdp: PromiseOrValue<string>,
      vat: PromiseOrValue<string>,
      spot: PromiseOrValue<string>,
      registry: PromiseOrValue<string>,
      jar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    spotPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRating(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRatingProgressPerSec(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userRating(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userRatingProgressPerSec(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
