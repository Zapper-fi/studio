/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace IToken {
  export type LoanOpenDataStruct = {
    loanId: PromiseOrValue<BytesLike>;
    principal: PromiseOrValue<BigNumberish>;
    collateral: PromiseOrValue<BigNumberish>;
  };

  export type LoanOpenDataStructOutput = [string, BigNumber, BigNumber] & {
    loanId: string;
    principal: BigNumber;
    collateral: BigNumber;
  };
}

export interface ITokenInterface extends utils.Interface {
  functions: {
    '_isPaused(bytes4)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'assetBalanceOf(address)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'borrow(bytes32,uint256,uint256,uint256,address,address,address,bytes)': FunctionFragment;
    'borrowInterestRate()': FunctionFragment;
    'burn(address,uint256)': FunctionFragment;
    'burnToEther(address,uint256)': FunctionFragment;
    'changeGuardian(address)': FunctionFragment;
    'checkpointPrice(address)': FunctionFragment;
    'flashBorrow(uint256,address,address,string,bytes)': FunctionFragment;
    'getGuardian()': FunctionFragment;
    'getPoolUtilization()': FunctionFragment;
    'initialPrice()': FunctionFragment;
    'loanParamsIds(uint256)': FunctionFragment;
    'loanTokenAddress()': FunctionFragment;
    'marginTrade(bytes32,uint256,uint256,uint256,address,address,bytes)': FunctionFragment;
    'mint(address,uint256)': FunctionFragment;
    'mintWithEther(address)': FunctionFragment;
    'name()': FunctionFragment;
    'nextBorrowInterestRate(uint256)': FunctionFragment;
    'nextSupplyInterestRate(int256)': FunctionFragment;
    'owner()': FunctionFragment;
    'profitOf(address)': FunctionFragment;
    'revokeApproval(address)': FunctionFragment;
    'setTarget(address)': FunctionFragment;
    'supplyInterestRate()': FunctionFragment;
    'symbol()': FunctionFragment;
    'toggleFunctionPause(bytes4)': FunctionFragment;
    'toggleFunctionUnPause(bytes4)': FunctionFragment;
    'tokenPrice()': FunctionFragment;
    'totalAssetBorrow()': FunctionFragment;
    'totalAssetSupply()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'totalSupplyInterestRate(uint256)': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateFlashBorrowFeePercent(uint256)': FunctionFragment;
    'updateSettings(address,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | '_isPaused'
      | 'allowance'
      | 'approve'
      | 'assetBalanceOf'
      | 'balanceOf'
      | 'borrow'
      | 'borrowInterestRate'
      | 'burn'
      | 'burnToEther'
      | 'changeGuardian'
      | 'checkpointPrice'
      | 'flashBorrow'
      | 'getGuardian'
      | 'getPoolUtilization'
      | 'initialPrice'
      | 'loanParamsIds'
      | 'loanTokenAddress'
      | 'marginTrade'
      | 'mint'
      | 'mintWithEther'
      | 'name'
      | 'nextBorrowInterestRate'
      | 'nextSupplyInterestRate'
      | 'owner'
      | 'profitOf'
      | 'revokeApproval'
      | 'setTarget'
      | 'supplyInterestRate'
      | 'symbol'
      | 'toggleFunctionPause'
      | 'toggleFunctionUnPause'
      | 'tokenPrice'
      | 'totalAssetBorrow'
      | 'totalAssetSupply'
      | 'totalSupply'
      | 'totalSupplyInterestRate'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'updateFlashBorrowFeePercent'
      | 'updateSettings',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: '_isPaused', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'assetBalanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'borrow',
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'borrowInterestRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'burn', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'burnToEther',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'changeGuardian', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'checkpointPrice', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'flashBorrow',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'getGuardian', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPoolUtilization', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialPrice', values?: undefined): string;
  encodeFunctionData(functionFragment: 'loanParamsIds', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'loanTokenAddress', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'marginTrade',
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'mint', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'mintWithEther', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nextBorrowInterestRate', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'nextSupplyInterestRate', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'profitOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'revokeApproval', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setTarget', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'supplyInterestRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'toggleFunctionPause', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'toggleFunctionUnPause', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'tokenPrice', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalAssetBorrow', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalAssetSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupplyInterestRate', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateFlashBorrowFeePercent', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'updateSettings',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;

  decodeFunctionResult(functionFragment: '_isPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'assetBalanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowInterestRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burnToEther', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkpointPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'flashBorrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolUtilization', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'loanParamsIds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'loanTokenAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marginTrade', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintWithEther', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nextBorrowInterestRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nextSupplyInterestRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'profitOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeApproval', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTarget', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supplyInterestRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'toggleFunctionPause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'toggleFunctionUnPause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAssetBorrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAssetSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupplyInterestRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateFlashBorrowFeePercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateSettings', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Burn(address,uint256,uint256,uint256)': EventFragment;
    'FlashBorrow(address,address,address,uint256)': EventFragment;
    'Mint(address,uint256,uint256,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Burn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FlashBorrow'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BurnEventObject {
  burner: string;
  tokenAmount: BigNumber;
  assetAmount: BigNumber;
  price: BigNumber;
}
export type BurnEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], BurnEventObject>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export interface FlashBorrowEventObject {
  borrower: string;
  target: string;
  loanToken: string;
  loanAmount: BigNumber;
}
export type FlashBorrowEvent = TypedEvent<[string, string, string, BigNumber], FlashBorrowEventObject>;

export type FlashBorrowEventFilter = TypedEventFilter<FlashBorrowEvent>;

export interface MintEventObject {
  minter: string;
  tokenAmount: BigNumber;
  assetAmount: BigNumber;
  price: BigNumber;
}
export type MintEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], MintEventObject>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface IToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _isPaused(sig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean] & { isPaused: boolean }>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    assetBalanceOf(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrow(
      loanId: PromiseOrValue<BytesLike>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      initialLoanDuration: PromiseOrValue<BigNumberish>,
      collateralTokenSent: PromiseOrValue<BigNumberish>,
      collateralTokenAddress: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      arg7: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    borrowInterestRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      receiver: PromiseOrValue<string>,
      burnAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    burnToEther(
      receiver: PromiseOrValue<string>,
      burnAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    changeGuardian(
      newGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    checkpointPrice(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    flashBorrow(
      borrowAmount: PromiseOrValue<BigNumberish>,
      borrower: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getGuardian(overrides?: CallOverrides): Promise<[string] & { guardian: string }>;

    getPoolUtilization(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    loanParamsIds(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    loanTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    marginTrade(
      loanId: PromiseOrValue<BytesLike>,
      leverageAmount: PromiseOrValue<BigNumberish>,
      loanTokenSent: PromiseOrValue<BigNumberish>,
      collateralTokenSent: PromiseOrValue<BigNumberish>,
      collateralTokenAddress: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      loanDataBytes: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mint(
      receiver: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mintWithEther(
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextBorrowInterestRate(borrowAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    nextSupplyInterestRate(supplyAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    profitOf(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    revokeApproval(
      _loanTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTarget(
      _newTarget: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supplyInterestRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    toggleFunctionPause(
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    toggleFunctionUnPause(
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    tokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAssetBorrow(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAssetSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyInterestRate(assetSupply: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateFlashBorrowFeePercent(
      newFeePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateSettings(
      settingsTarget: PromiseOrValue<string>,
      callData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  _isPaused(sig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  assetBalanceOf(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  borrow(
    loanId: PromiseOrValue<BytesLike>,
    withdrawAmount: PromiseOrValue<BigNumberish>,
    initialLoanDuration: PromiseOrValue<BigNumberish>,
    collateralTokenSent: PromiseOrValue<BigNumberish>,
    collateralTokenAddress: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    arg7: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  borrowInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    receiver: PromiseOrValue<string>,
    burnAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  burnToEther(
    receiver: PromiseOrValue<string>,
    burnAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  changeGuardian(
    newGuardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  checkpointPrice(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  flashBorrow(
    borrowAmount: PromiseOrValue<BigNumberish>,
    borrower: PromiseOrValue<string>,
    target: PromiseOrValue<string>,
    signature: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getGuardian(overrides?: CallOverrides): Promise<string>;

  getPoolUtilization(overrides?: CallOverrides): Promise<BigNumber>;

  initialPrice(overrides?: CallOverrides): Promise<BigNumber>;

  loanParamsIds(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  loanTokenAddress(overrides?: CallOverrides): Promise<string>;

  marginTrade(
    loanId: PromiseOrValue<BytesLike>,
    leverageAmount: PromiseOrValue<BigNumberish>,
    loanTokenSent: PromiseOrValue<BigNumberish>,
    collateralTokenSent: PromiseOrValue<BigNumberish>,
    collateralTokenAddress: PromiseOrValue<string>,
    trader: PromiseOrValue<string>,
    loanDataBytes: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mint(
    receiver: PromiseOrValue<string>,
    depositAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mintWithEther(
    receiver: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nextBorrowInterestRate(borrowAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  nextSupplyInterestRate(supplyAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  profitOf(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  revokeApproval(
    _loanTokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTarget(
    _newTarget: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  supplyInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  toggleFunctionPause(
    sig: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  toggleFunctionUnPause(
    sig: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  totalAssetBorrow(overrides?: CallOverrides): Promise<BigNumber>;

  totalAssetSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyInterestRate(assetSupply: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateFlashBorrowFeePercent(
    newFeePercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateSettings(
    settingsTarget: PromiseOrValue<string>,
    callData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    _isPaused(sig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    assetBalanceOf(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      loanId: PromiseOrValue<BytesLike>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      initialLoanDuration: PromiseOrValue<BigNumberish>,
      collateralTokenSent: PromiseOrValue<BigNumberish>,
      collateralTokenAddress: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      arg7: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<IToken.LoanOpenDataStructOutput>;

    borrowInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      receiver: PromiseOrValue<string>,
      burnAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    burnToEther(
      receiver: PromiseOrValue<string>,
      burnAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    changeGuardian(newGuardian: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    checkpointPrice(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    flashBorrow(
      borrowAmount: PromiseOrValue<BigNumberish>,
      borrower: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getGuardian(overrides?: CallOverrides): Promise<string>;

    getPoolUtilization(overrides?: CallOverrides): Promise<BigNumber>;

    initialPrice(overrides?: CallOverrides): Promise<BigNumber>;

    loanParamsIds(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    loanTokenAddress(overrides?: CallOverrides): Promise<string>;

    marginTrade(
      loanId: PromiseOrValue<BytesLike>,
      leverageAmount: PromiseOrValue<BigNumberish>,
      loanTokenSent: PromiseOrValue<BigNumberish>,
      collateralTokenSent: PromiseOrValue<BigNumberish>,
      collateralTokenAddress: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      loanDataBytes: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<IToken.LoanOpenDataStructOutput>;

    mint(
      receiver: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mintWithEther(receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nextBorrowInterestRate(borrowAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    nextSupplyInterestRate(supplyAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    profitOf(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    revokeApproval(_loanTokenAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setTarget(_newTarget: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    supplyInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    toggleFunctionPause(sig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    toggleFunctionUnPause(sig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssetBorrow(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssetSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyInterestRate(assetSupply: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateFlashBorrowFeePercent(newFeePercent: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateSettings(
      settingsTarget: PromiseOrValue<string>,
      callData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'Burn(address,uint256,uint256,uint256)'(
      burner?: PromiseOrValue<string> | null,
      tokenAmount?: null,
      assetAmount?: null,
      price?: null,
    ): BurnEventFilter;
    Burn(burner?: PromiseOrValue<string> | null, tokenAmount?: null, assetAmount?: null, price?: null): BurnEventFilter;

    'FlashBorrow(address,address,address,uint256)'(
      borrower?: null,
      target?: null,
      loanToken?: null,
      loanAmount?: null,
    ): FlashBorrowEventFilter;
    FlashBorrow(borrower?: null, target?: null, loanToken?: null, loanAmount?: null): FlashBorrowEventFilter;

    'Mint(address,uint256,uint256,uint256)'(
      minter?: PromiseOrValue<string> | null,
      tokenAmount?: null,
      assetAmount?: null,
      price?: null,
    ): MintEventFilter;
    Mint(minter?: PromiseOrValue<string> | null, tokenAmount?: null, assetAmount?: null, price?: null): MintEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
  };

  estimateGas: {
    _isPaused(sig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    assetBalanceOf(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      loanId: PromiseOrValue<BytesLike>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      initialLoanDuration: PromiseOrValue<BigNumberish>,
      collateralTokenSent: PromiseOrValue<BigNumberish>,
      collateralTokenAddress: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      arg7: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    borrowInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      receiver: PromiseOrValue<string>,
      burnAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    burnToEther(
      receiver: PromiseOrValue<string>,
      burnAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    changeGuardian(
      newGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    checkpointPrice(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    flashBorrow(
      borrowAmount: PromiseOrValue<BigNumberish>,
      borrower: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolUtilization(overrides?: CallOverrides): Promise<BigNumber>;

    initialPrice(overrides?: CallOverrides): Promise<BigNumber>;

    loanParamsIds(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    loanTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    marginTrade(
      loanId: PromiseOrValue<BytesLike>,
      leverageAmount: PromiseOrValue<BigNumberish>,
      loanTokenSent: PromiseOrValue<BigNumberish>,
      collateralTokenSent: PromiseOrValue<BigNumberish>,
      collateralTokenAddress: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      loanDataBytes: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mint(
      receiver: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mintWithEther(
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextBorrowInterestRate(borrowAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    nextSupplyInterestRate(supplyAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    profitOf(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    revokeApproval(
      _loanTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTarget(
      _newTarget: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    supplyInterestRate(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    toggleFunctionPause(
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    toggleFunctionUnPause(
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssetBorrow(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssetSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyInterestRate(assetSupply: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateFlashBorrowFeePercent(
      newFeePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateSettings(
      settingsTarget: PromiseOrValue<string>,
      callData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _isPaused(sig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    assetBalanceOf(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      loanId: PromiseOrValue<BytesLike>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      initialLoanDuration: PromiseOrValue<BigNumberish>,
      collateralTokenSent: PromiseOrValue<BigNumberish>,
      collateralTokenAddress: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      arg7: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    borrowInterestRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      receiver: PromiseOrValue<string>,
      burnAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    burnToEther(
      receiver: PromiseOrValue<string>,
      burnAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    changeGuardian(
      newGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    checkpointPrice(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flashBorrow(
      borrowAmount: PromiseOrValue<BigNumberish>,
      borrower: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolUtilization(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loanParamsIds(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loanTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marginTrade(
      loanId: PromiseOrValue<BytesLike>,
      leverageAmount: PromiseOrValue<BigNumberish>,
      loanTokenSent: PromiseOrValue<BigNumberish>,
      collateralTokenSent: PromiseOrValue<BigNumberish>,
      collateralTokenAddress: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      loanDataBytes: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mint(
      receiver: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mintWithEther(
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextBorrowInterestRate(
      borrowAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    nextSupplyInterestRate(
      supplyAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    profitOf(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeApproval(
      _loanTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTarget(
      _newTarget: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    supplyInterestRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleFunctionPause(
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    toggleFunctionUnPause(
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    tokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssetBorrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssetSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyInterestRate(
      assetSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateFlashBorrowFeePercent(
      newFeePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateSettings(
      settingsTarget: PromiseOrValue<string>,
      callData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
