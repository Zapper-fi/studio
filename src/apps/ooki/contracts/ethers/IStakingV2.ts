/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface IStakingV2Interface extends utils.Interface {
  functions: {
    '_isPaused(bytes4)': FunctionFragment;
    '_setProposalVals(address,uint256)': FunctionFragment;
    '_totalSupplyPerToken(address)': FunctionFragment;
    'addAltRewards(address,uint256)': FunctionFragment;
    'addRewards(uint256,uint256)': FunctionFragment;
    'balanceOfByAsset(address,address)': FunctionFragment;
    'balanceOfByAssets(address)': FunctionFragment;
    'balanceOfStored(address)': FunctionFragment;
    'changeGuardian(address)': FunctionFragment;
    'claim(bool)': FunctionFragment;
    'claimAltRewards()': FunctionFragment;
    'claimSushi()': FunctionFragment;
    'earned(address)': FunctionFragment;
    'exit()': FunctionFragment;
    'exitSushi()': FunctionFragment;
    'getGuardian()': FunctionFragment;
    'getVariableWeights()': FunctionFragment;
    'governor()': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingCrvRewards(address)': FunctionFragment;
    'setApprovals(address,address,uint256)': FunctionFragment;
    'setGovernor(address)': FunctionFragment;
    'setVoteDelegator(address)': FunctionFragment;
    'stake(address[],uint256[])': FunctionFragment;
    'toggleFunctionPause(bytes4)': FunctionFragment;
    'toggleFunctionUnPause(bytes4)': FunctionFragment;
    'totalSupplyByAsset(address)': FunctionFragment;
    'totalSupplyStored()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unstake(address[],uint256[])': FunctionFragment;
    'updateSettings(address,bytes)': FunctionFragment;
    'vestedBalanceForAmount(uint256,uint256,uint256)': FunctionFragment;
    'vestingLastSync(address)': FunctionFragment;
    'votingBalanceOf(address,uint256)': FunctionFragment;
    'votingBalanceOfNow(address)': FunctionFragment;
    'votingFromStakedBalanceOf(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | '_isPaused'
      | '_setProposalVals'
      | '_totalSupplyPerToken'
      | 'addAltRewards'
      | 'addRewards'
      | 'balanceOfByAsset'
      | 'balanceOfByAssets'
      | 'balanceOfStored'
      | 'changeGuardian'
      | 'claim'
      | 'claimAltRewards'
      | 'claimSushi'
      | 'earned'
      | 'exit'
      | 'exitSushi'
      | 'getGuardian'
      | 'getVariableWeights'
      | 'governor'
      | 'owner'
      | 'pendingCrvRewards'
      | 'setApprovals'
      | 'setGovernor'
      | 'setVoteDelegator'
      | 'stake'
      | 'toggleFunctionPause'
      | 'toggleFunctionUnPause'
      | 'totalSupplyByAsset'
      | 'totalSupplyStored'
      | 'transferOwnership'
      | 'unstake'
      | 'updateSettings'
      | 'vestedBalanceForAmount'
      | 'vestingLastSync'
      | 'votingBalanceOf'
      | 'votingBalanceOfNow'
      | 'votingFromStakedBalanceOf',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: '_isPaused', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: '_setProposalVals',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: '_totalSupplyPerToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'addAltRewards',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'addRewards',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOfByAsset',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOfByAssets', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'balanceOfStored', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'changeGuardian', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'claim', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'claimAltRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimSushi', values?: undefined): string;
  encodeFunctionData(functionFragment: 'earned', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'exit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'exitSushi', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getGuardian', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getVariableWeights', values?: undefined): string;
  encodeFunctionData(functionFragment: 'governor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingCrvRewards', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setApprovals',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setGovernor', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setVoteDelegator', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'stake',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(functionFragment: 'toggleFunctionPause', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'toggleFunctionUnPause', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'totalSupplyByAsset', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'totalSupplyStored', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'unstake',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateSettings',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'vestedBalanceForAmount',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'vestingLastSync', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'votingBalanceOf',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'votingBalanceOfNow', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'votingFromStakedBalanceOf', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: '_isPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_setProposalVals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_totalSupplyPerToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addAltRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfByAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfByAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfStored', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimAltRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimSushi', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'earned', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exitSushi', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVariableWeights', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingCrvRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGovernor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setVoteDelegator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'toggleFunctionPause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'toggleFunctionUnPause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupplyByAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupplyStored', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateSettings', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vestedBalanceForAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vestingLastSync', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'votingBalanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'votingBalanceOfNow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'votingFromStakedBalanceOf', data: BytesLike): Result;

  events: {};
}

export interface IStakingV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStakingV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _isPaused(sig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean] & { isPaused: boolean }>;

    _setProposalVals(
      account: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    _totalSupplyPerToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    addAltRewards(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addRewards(
      newOOKI: PromiseOrValue<BigNumberish>,
      newStableCoin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOfByAsset(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    balanceOfByAssets(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bzrxBalance: BigNumber;
        iOOKIBalance: BigNumber;
        vBZRXBalance: BigNumber;
        LPTokenBalance: BigNumber;
      }
    >;

    balanceOfStored(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        vestedBalance: BigNumber;
        vestingBalance: BigNumber;
      }
    >;

    changeGuardian(
      newGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claim(
      restake: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimAltRewards(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    claimSushi(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    earned(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        bzrxRewardsEarned: BigNumber;
        stableCoinRewardsEarned: BigNumber;
        bzrxRewardsVesting: BigNumber;
        stableCoinRewardsVesting: BigNumber;
        sushiRewardsEarned: BigNumber;
      }
    >;

    exit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    exitSushi(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    getGuardian(overrides?: CallOverrides): Promise<[string] & { guardian: string }>;

    getVariableWeights(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        vBZRXWeight: BigNumber;
        iOOKIWeight: BigNumber;
        LPTokenWeight: BigNumber;
      }
    >;

    governor(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingCrvRewards(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        bzrxRewardsEarned: BigNumber;
        stableCoinRewardsEarned: BigNumber;
        bzrxRewardsVesting: BigNumber;
        stableCoinRewardsVesting: BigNumber;
        sushiRewardsEarned: BigNumber;
      }
    >;

    setApprovals(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setGovernor(
      _governor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setVoteDelegator(
      stakingGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stake(
      tokens: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    toggleFunctionPause(
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    toggleFunctionUnPause(
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    totalSupplyByAsset(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyStored(overrides?: CallOverrides): Promise<[BigNumber] & { supply: BigNumber }>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unstake(
      tokens: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateSettings(
      settingsTarget: PromiseOrValue<string>,
      callData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    vestedBalanceForAmount(
      tokenBalance: PromiseOrValue<BigNumberish>,
      lastUpdate: PromiseOrValue<BigNumberish>,
      vestingEndTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { vested: BigNumber }>;

    vestingLastSync(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    votingBalanceOf(
      account: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { totalVotes: BigNumber }>;

    votingBalanceOfNow(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { totalVotes: BigNumber }>;

    votingFromStakedBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { totalVotes: BigNumber }>;
  };

  _isPaused(sig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  _setProposalVals(
    account: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  _totalSupplyPerToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  addAltRewards(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addRewards(
    newOOKI: PromiseOrValue<BigNumberish>,
    newStableCoin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOfByAsset(
    token: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  balanceOfByAssets(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bzrxBalance: BigNumber;
      iOOKIBalance: BigNumber;
      vBZRXBalance: BigNumber;
      LPTokenBalance: BigNumber;
    }
  >;

  balanceOfStored(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      vestedBalance: BigNumber;
      vestingBalance: BigNumber;
    }
  >;

  changeGuardian(
    newGuardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claim(
    restake: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimAltRewards(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  claimSushi(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  earned(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      bzrxRewardsEarned: BigNumber;
      stableCoinRewardsEarned: BigNumber;
      bzrxRewardsVesting: BigNumber;
      stableCoinRewardsVesting: BigNumber;
      sushiRewardsEarned: BigNumber;
    }
  >;

  exit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  exitSushi(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  getGuardian(overrides?: CallOverrides): Promise<string>;

  getVariableWeights(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      vBZRXWeight: BigNumber;
      iOOKIWeight: BigNumber;
      LPTokenWeight: BigNumber;
    }
  >;

  governor(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingCrvRewards(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      bzrxRewardsEarned: BigNumber;
      stableCoinRewardsEarned: BigNumber;
      bzrxRewardsVesting: BigNumber;
      stableCoinRewardsVesting: BigNumber;
      sushiRewardsEarned: BigNumber;
    }
  >;

  setApprovals(
    _token: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setGovernor(
    _governor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setVoteDelegator(
    stakingGovernance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stake(
    tokens: PromiseOrValue<string>[],
    values: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  toggleFunctionPause(
    sig: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  toggleFunctionUnPause(
    sig: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  totalSupplyByAsset(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyStored(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unstake(
    tokens: PromiseOrValue<string>[],
    values: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateSettings(
    settingsTarget: PromiseOrValue<string>,
    callData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  vestedBalanceForAmount(
    tokenBalance: PromiseOrValue<BigNumberish>,
    lastUpdate: PromiseOrValue<BigNumberish>,
    vestingEndTime: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  vestingLastSync(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  votingBalanceOf(
    account: PromiseOrValue<string>,
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  votingBalanceOfNow(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  votingFromStakedBalanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    _isPaused(sig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    _setProposalVals(
      account: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    _totalSupplyPerToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    addAltRewards(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    addRewards(
      newOOKI: PromiseOrValue<BigNumberish>,
      newStableCoin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    balanceOfByAsset(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOfByAssets(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bzrxBalance: BigNumber;
        iOOKIBalance: BigNumber;
        vBZRXBalance: BigNumber;
        LPTokenBalance: BigNumber;
      }
    >;

    balanceOfStored(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        vestedBalance: BigNumber;
        vestingBalance: BigNumber;
      }
    >;

    changeGuardian(newGuardian: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    claim(restake: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    claimAltRewards(overrides?: CallOverrides): Promise<void>;

    claimSushi(overrides?: CallOverrides): Promise<BigNumber>;

    earned(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        bzrxRewardsEarned: BigNumber;
        stableCoinRewardsEarned: BigNumber;
        bzrxRewardsVesting: BigNumber;
        stableCoinRewardsVesting: BigNumber;
        sushiRewardsEarned: BigNumber;
      }
    >;

    exit(overrides?: CallOverrides): Promise<void>;

    exitSushi(overrides?: CallOverrides): Promise<void>;

    getGuardian(overrides?: CallOverrides): Promise<string>;

    getVariableWeights(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        vBZRXWeight: BigNumber;
        iOOKIWeight: BigNumber;
        LPTokenWeight: BigNumber;
      }
    >;

    governor(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingCrvRewards(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        bzrxRewardsEarned: BigNumber;
        stableCoinRewardsEarned: BigNumber;
        bzrxRewardsVesting: BigNumber;
        stableCoinRewardsVesting: BigNumber;
        sushiRewardsEarned: BigNumber;
      }
    >;

    setApprovals(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setGovernor(_governor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setVoteDelegator(stakingGovernance: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    stake(
      tokens: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    toggleFunctionPause(sig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    toggleFunctionUnPause(sig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    totalSupplyByAsset(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyStored(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    unstake(
      tokens: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    updateSettings(
      settingsTarget: PromiseOrValue<string>,
      callData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    vestedBalanceForAmount(
      tokenBalance: PromiseOrValue<BigNumberish>,
      lastUpdate: PromiseOrValue<BigNumberish>,
      vestingEndTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    vestingLastSync(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    votingBalanceOf(
      account: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    votingBalanceOfNow(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    votingFromStakedBalanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    _isPaused(sig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    _setProposalVals(
      account: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    _totalSupplyPerToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    addAltRewards(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addRewards(
      newOOKI: PromiseOrValue<BigNumberish>,
      newStableCoin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOfByAsset(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOfByAssets(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfStored(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    changeGuardian(
      newGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claim(
      restake: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimAltRewards(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    claimSushi(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    earned(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    exit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    exitSushi(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    getGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    getVariableWeights(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingCrvRewards(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    setApprovals(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setGovernor(
      _governor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setVoteDelegator(
      stakingGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stake(
      tokens: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    toggleFunctionPause(
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    toggleFunctionUnPause(
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    totalSupplyByAsset(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyStored(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unstake(
      tokens: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateSettings(
      settingsTarget: PromiseOrValue<string>,
      callData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    vestedBalanceForAmount(
      tokenBalance: PromiseOrValue<BigNumberish>,
      lastUpdate: PromiseOrValue<BigNumberish>,
      vestingEndTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    vestingLastSync(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    votingBalanceOf(
      account: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    votingBalanceOfNow(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    votingFromStakedBalanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _isPaused(sig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _setProposalVals(
      account: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    _totalSupplyPerToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAltRewards(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addRewards(
      newOOKI: PromiseOrValue<BigNumberish>,
      newStableCoin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOfByAsset(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    balanceOfByAssets(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfStored(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeGuardian(
      newGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claim(
      restake: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimAltRewards(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    claimSushi(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    earned(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    exitSushi(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    getGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVariableWeights(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingCrvRewards(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApprovals(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setGovernor(
      _governor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setVoteDelegator(
      stakingGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stake(
      tokens: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    toggleFunctionPause(
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    toggleFunctionUnPause(
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    totalSupplyByAsset(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyStored(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unstake(
      tokens: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateSettings(
      settingsTarget: PromiseOrValue<string>,
      callData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    vestedBalanceForAmount(
      tokenBalance: PromiseOrValue<BigNumberish>,
      lastUpdate: PromiseOrValue<BigNumberish>,
      vestingEndTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    vestingLastSync(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingBalanceOf(
      account: PromiseOrValue<string>,
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    votingBalanceOfNow(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingFromStakedBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
