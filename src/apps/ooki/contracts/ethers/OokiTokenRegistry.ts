/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace TokenRegistry {
  export type TokenMetadataStruct = {
    token: PromiseOrValue<string>;
    asset: PromiseOrValue<string>;
  };

  export type TokenMetadataStructOutput = [string, string] & {
    token: string;
    asset: string;
  };
}

export interface OokiTokenRegistryInterface extends utils.Interface {
  functions: {
    'bZxContract()': FunctionFragment;
    'getTokens(uint256,uint256)': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'bZxContract' | 'getTokens'): FunctionFragment;

  encodeFunctionData(functionFragment: 'bZxContract', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getTokens',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'bZxContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTokens', data: BytesLike): Result;

  events: {};
}

export interface OokiTokenRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OokiTokenRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bZxContract(overrides?: CallOverrides): Promise<[string]>;

    getTokens(
      _start: PromiseOrValue<BigNumberish>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [TokenRegistry.TokenMetadataStructOutput[]] & {
        metadata: TokenRegistry.TokenMetadataStructOutput[];
      }
    >;
  };

  bZxContract(overrides?: CallOverrides): Promise<string>;

  getTokens(
    _start: PromiseOrValue<BigNumberish>,
    _count: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<TokenRegistry.TokenMetadataStructOutput[]>;

  callStatic: {
    bZxContract(overrides?: CallOverrides): Promise<string>;

    getTokens(
      _start: PromiseOrValue<BigNumberish>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<TokenRegistry.TokenMetadataStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    bZxContract(overrides?: CallOverrides): Promise<BigNumber>;

    getTokens(
      _start: PromiseOrValue<BigNumberish>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bZxContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokens(
      _start: PromiseOrValue<BigNumberish>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
