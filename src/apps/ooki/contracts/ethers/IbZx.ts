/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace IBZx {
  export type LoanOpenDataStruct = {
    loanId: PromiseOrValue<BytesLike>;
    principal: PromiseOrValue<BigNumberish>;
    collateral: PromiseOrValue<BigNumberish>;
  };

  export type LoanOpenDataStructOutput = [string, BigNumber, BigNumber] & {
    loanId: string;
    principal: BigNumber;
    collateral: BigNumber;
  };

  export type LoanReturnDataStruct = {
    loanId: PromiseOrValue<BytesLike>;
    endTimestamp: PromiseOrValue<BigNumberish>;
    loanToken: PromiseOrValue<string>;
    collateralToken: PromiseOrValue<string>;
    principal: PromiseOrValue<BigNumberish>;
    collateral: PromiseOrValue<BigNumberish>;
    interestOwedPerDay: PromiseOrValue<BigNumberish>;
    interestDepositRemaining: PromiseOrValue<BigNumberish>;
    startRate: PromiseOrValue<BigNumberish>;
    startMargin: PromiseOrValue<BigNumberish>;
    maintenanceMargin: PromiseOrValue<BigNumberish>;
    currentMargin: PromiseOrValue<BigNumberish>;
    maxLoanTerm: PromiseOrValue<BigNumberish>;
    maxLiquidatable: PromiseOrValue<BigNumberish>;
    maxSeizable: PromiseOrValue<BigNumberish>;
    depositValueAsLoanToken: PromiseOrValue<BigNumberish>;
    depositValueAsCollateralToken: PromiseOrValue<BigNumberish>;
  };

  export type LoanReturnDataStructOutput = [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    loanId: string;
    endTimestamp: BigNumber;
    loanToken: string;
    collateralToken: string;
    principal: BigNumber;
    collateral: BigNumber;
    interestOwedPerDay: BigNumber;
    interestDepositRemaining: BigNumber;
    startRate: BigNumber;
    startMargin: BigNumber;
    maintenanceMargin: BigNumber;
    currentMargin: BigNumber;
    maxLoanTerm: BigNumber;
    maxLiquidatable: BigNumber;
    maxSeizable: BigNumber;
    depositValueAsLoanToken: BigNumber;
    depositValueAsCollateralToken: BigNumber;
  };

  export type LoanParamsStruct = {
    id: PromiseOrValue<BytesLike>;
    active: PromiseOrValue<boolean>;
    owner: PromiseOrValue<string>;
    loanToken: PromiseOrValue<string>;
    collateralToken: PromiseOrValue<string>;
    minInitialMargin: PromiseOrValue<BigNumberish>;
    maintenanceMargin: PromiseOrValue<BigNumberish>;
    maxLoanTerm: PromiseOrValue<BigNumberish>;
  };

  export type LoanParamsStructOutput = [string, boolean, string, string, string, BigNumber, BigNumber, BigNumber] & {
    id: string;
    active: boolean;
    owner: string;
    loanToken: string;
    collateralToken: string;
    minInitialMargin: BigNumber;
    maintenanceMargin: BigNumber;
    maxLoanTerm: BigNumber;
  };

  export type LenderInterestStruct = {
    principalTotal: PromiseOrValue<BigNumberish>;
    owedPerDay: PromiseOrValue<BigNumberish>;
    owedTotal: PromiseOrValue<BigNumberish>;
    paidTotal: PromiseOrValue<BigNumberish>;
    updatedTimestamp: PromiseOrValue<BigNumberish>;
  };

  export type LenderInterestStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    principalTotal: BigNumber;
    owedPerDay: BigNumber;
    owedTotal: BigNumber;
    paidTotal: BigNumber;
    updatedTimestamp: BigNumber;
  };

  export type LoanInterestStruct = {
    owedPerDay: PromiseOrValue<BigNumberish>;
    depositTotal: PromiseOrValue<BigNumberish>;
    updatedTimestamp: PromiseOrValue<BigNumberish>;
  };

  export type LoanInterestStructOutput = [BigNumber, BigNumber, BigNumber] & {
    owedPerDay: BigNumber;
    depositTotal: BigNumber;
    updatedTimestamp: BigNumber;
  };

  export type LoanStruct = {
    id: PromiseOrValue<BytesLike>;
    loanParamsId: PromiseOrValue<BytesLike>;
    pendingTradesId: PromiseOrValue<BytesLike>;
    principal: PromiseOrValue<BigNumberish>;
    collateral: PromiseOrValue<BigNumberish>;
    startTimestamp: PromiseOrValue<BigNumberish>;
    endTimestamp: PromiseOrValue<BigNumberish>;
    startMargin: PromiseOrValue<BigNumberish>;
    startRate: PromiseOrValue<BigNumberish>;
    borrower: PromiseOrValue<string>;
    lender: PromiseOrValue<string>;
    active: PromiseOrValue<boolean>;
  };

  export type LoanStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    boolean,
  ] & {
    id: string;
    loanParamsId: string;
    pendingTradesId: string;
    principal: BigNumber;
    collateral: BigNumber;
    startTimestamp: BigNumber;
    endTimestamp: BigNumber;
    startMargin: BigNumber;
    startRate: BigNumber;
    borrower: string;
    lender: string;
    active: boolean;
  };
}

export interface IbZxInterface extends utils.Interface {
  functions: {
    '_isPaused(bytes4)': FunctionFragment;
    'affiliateFeePercent()': FunctionFragment;
    'borrowOrTradeFromPool(bytes32,bytes32,bool,uint256,address[4],uint256[5],bytes)': FunctionFragment;
    'borrowingFeePercent()': FunctionFragment;
    'borrowingFeeTokensHeld(address)': FunctionFragment;
    'borrowingFeeTokensPaid(address)': FunctionFragment;
    'changeGuardian(address)': FunctionFragment;
    'claimRewards(address)': FunctionFragment;
    'cleanupLoans(address,bytes32[])': FunctionFragment;
    'closeWithDeposit(bytes32,address,uint256)': FunctionFragment;
    'closeWithDepositWithGasToken(bytes32,address,address,uint256)': FunctionFragment;
    'closeWithSwap(bytes32,address,uint256,bool,bytes)': FunctionFragment;
    'closeWithSwapWithGasToken(bytes32,address,address,uint256,bool,bytes)': FunctionFragment;
    'delegatedManagers(bytes32,address)': FunctionFragment;
    'depositCollateral(bytes32,uint256)': FunctionFragment;
    'disableLoanParams(bytes32[])': FunctionFragment;
    'feesController()': FunctionFragment;
    'getActiveLoans(uint256,uint256,bool)': FunctionFragment;
    'getActiveLoansAdvanced(uint256,uint256,bool,bool)': FunctionFragment;
    'getActiveLoansCount()': FunctionFragment;
    'getBorrowAmount(address,address,uint256,uint256,bool)': FunctionFragment;
    'getBorrowAmountByParams(bytes32,uint256)': FunctionFragment;
    'getGuardian()': FunctionFragment;
    'getInterestModelValues(address,bytes32)': FunctionFragment;
    'getLoan(bytes32)': FunctionFragment;
    'getLoanInterestOutstanding(bytes32)': FunctionFragment;
    'getLoanParams(bytes32[])': FunctionFragment;
    'getLoanParamsList(address,uint256,uint256)': FunctionFragment;
    'getLoanPoolsList(uint256,uint256)': FunctionFragment;
    'getLoanPrincipal(bytes32)': FunctionFragment;
    'getPoolLastInterestRate(address)': FunctionFragment;
    'getPoolPrincipalStored(address)': FunctionFragment;
    'getRequiredCollateral(address,address,uint256,uint256,bool)': FunctionFragment;
    'getRequiredCollateralByParams(bytes32,uint256)': FunctionFragment;
    'getSwapExpectedReturn(address,address,uint256,bytes)': FunctionFragment;
    'getSwapExpectedReturn(address,address,address,uint256,bytes)': FunctionFragment;
    'getTWAI(address)': FunctionFragment;
    'getTarget(string)': FunctionFragment;
    'getTotalPrincipal(address,address)': FunctionFragment;
    'getUserLoans(address,uint256,uint256,uint8,bool,bool)': FunctionFragment;
    'getUserLoansCount(address,bool)': FunctionFragment;
    'isLoanPool(address)': FunctionFragment;
    'lenderInterest(address,address)': FunctionFragment;
    'lendingFeePercent()': FunctionFragment;
    'lendingFeeTokensHeld(address)': FunctionFragment;
    'lendingFeeTokensPaid(address)': FunctionFragment;
    'liquidate(bytes32,address,uint256)': FunctionFragment;
    'liquidateWithGasToken(bytes32,address,address,uint256)': FunctionFragment;
    'liquidationIncentivePercent(address,address)': FunctionFragment;
    'loanInterest(bytes32)': FunctionFragment;
    'loanParams(bytes32)': FunctionFragment;
    'loanPoolToUnderlying(address)': FunctionFragment;
    'loans(bytes32)': FunctionFragment;
    'logicTargets(bytes4)': FunctionFragment;
    'maxDisagreement()': FunctionFragment;
    'maxSwapSize()': FunctionFragment;
    'owner()': FunctionFragment;
    'pause(bytes4[])': FunctionFragment;
    'payFlashBorrowFees(address,uint256,uint256)': FunctionFragment;
    'priceFeeds()': FunctionFragment;
    'protocolTokenHeld()': FunctionFragment;
    'protocolTokenPaid()': FunctionFragment;
    'queryFees(address[],uint8)': FunctionFragment;
    'replaceContract(address)': FunctionFragment;
    'rewardsBalanceOf(address)': FunctionFragment;
    'setAffiliateFeePercent(uint256)': FunctionFragment;
    'setBorrowingFeePercent(uint256)': FunctionFragment;
    'setDelegatedManager(bytes32,address,bool)': FunctionFragment;
    'setDepositAmount(bytes32,uint256,uint256)': FunctionFragment;
    'setFeesController(address)': FunctionFragment;
    'setLendingFeePercent(uint256)': FunctionFragment;
    'setLiquidationIncentivePercent(address[],address[],uint256[])': FunctionFragment;
    'setLoanPool(address[],address[])': FunctionFragment;
    'setMaxDisagreement(uint256)': FunctionFragment;
    'setMaxSwapSize(uint256)': FunctionFragment;
    'setPriceFeedContract(address)': FunctionFragment;
    'setSourceBufferPercent(uint256)': FunctionFragment;
    'setSupportedTokens(address[],bool[],bool)': FunctionFragment;
    'setSwapsImplContract(address)': FunctionFragment;
    'setTWAISettings(uint32,uint32)': FunctionFragment;
    'setTargets(string[],address[])': FunctionFragment;
    'setTradingFeePercent(uint256)': FunctionFragment;
    'settleInterest(bytes32)': FunctionFragment;
    'setupLoanParams((bytes32,bool,address,address,address,uint256,uint256,uint256)[])': FunctionFragment;
    'setupLoanPoolTWAI(address)': FunctionFragment;
    'sourceBufferPercent()': FunctionFragment;
    'supportedTokens(address)': FunctionFragment;
    'swapExternal(address,address,address,address,uint256,uint256,bytes)': FunctionFragment;
    'swapExternalWithGasToken(address,address,address,address,address,uint256,uint256,bytes)': FunctionFragment;
    'swapsImpl()': FunctionFragment;
    'toggleFunctionPause(bytes4)': FunctionFragment;
    'toggleFunctionUnPause(bytes4)': FunctionFragment;
    'tradingFeePercent()': FunctionFragment;
    'tradingFeeTokensHeld(address)': FunctionFragment;
    'tradingFeeTokensPaid(address)': FunctionFragment;
    'transferLoan(bytes32,address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'underlyingToLoanPool(address)': FunctionFragment;
    'unpause(bytes4[])': FunctionFragment;
    'withdrawCollateral(bytes32,address,uint256)': FunctionFragment;
    'withdrawFees(address[],address,uint8)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | '_isPaused'
      | 'affiliateFeePercent'
      | 'borrowOrTradeFromPool'
      | 'borrowingFeePercent'
      | 'borrowingFeeTokensHeld'
      | 'borrowingFeeTokensPaid'
      | 'changeGuardian'
      | 'claimRewards'
      | 'cleanupLoans'
      | 'closeWithDeposit'
      | 'closeWithDepositWithGasToken'
      | 'closeWithSwap'
      | 'closeWithSwapWithGasToken'
      | 'delegatedManagers'
      | 'depositCollateral'
      | 'disableLoanParams'
      | 'feesController'
      | 'getActiveLoans'
      | 'getActiveLoansAdvanced'
      | 'getActiveLoansCount'
      | 'getBorrowAmount'
      | 'getBorrowAmountByParams'
      | 'getGuardian'
      | 'getInterestModelValues'
      | 'getLoan'
      | 'getLoanInterestOutstanding'
      | 'getLoanParams'
      | 'getLoanParamsList'
      | 'getLoanPoolsList'
      | 'getLoanPrincipal'
      | 'getPoolLastInterestRate'
      | 'getPoolPrincipalStored'
      | 'getRequiredCollateral'
      | 'getRequiredCollateralByParams'
      | 'getSwapExpectedReturn(address,address,uint256,bytes)'
      | 'getSwapExpectedReturn(address,address,address,uint256,bytes)'
      | 'getTWAI'
      | 'getTarget'
      | 'getTotalPrincipal'
      | 'getUserLoans'
      | 'getUserLoansCount'
      | 'isLoanPool'
      | 'lenderInterest'
      | 'lendingFeePercent'
      | 'lendingFeeTokensHeld'
      | 'lendingFeeTokensPaid'
      | 'liquidate'
      | 'liquidateWithGasToken'
      | 'liquidationIncentivePercent'
      | 'loanInterest'
      | 'loanParams'
      | 'loanPoolToUnderlying'
      | 'loans'
      | 'logicTargets'
      | 'maxDisagreement'
      | 'maxSwapSize'
      | 'owner'
      | 'pause'
      | 'payFlashBorrowFees'
      | 'priceFeeds'
      | 'protocolTokenHeld'
      | 'protocolTokenPaid'
      | 'queryFees'
      | 'replaceContract'
      | 'rewardsBalanceOf'
      | 'setAffiliateFeePercent'
      | 'setBorrowingFeePercent'
      | 'setDelegatedManager'
      | 'setDepositAmount'
      | 'setFeesController'
      | 'setLendingFeePercent'
      | 'setLiquidationIncentivePercent'
      | 'setLoanPool'
      | 'setMaxDisagreement'
      | 'setMaxSwapSize'
      | 'setPriceFeedContract'
      | 'setSourceBufferPercent'
      | 'setSupportedTokens'
      | 'setSwapsImplContract'
      | 'setTWAISettings'
      | 'setTargets'
      | 'setTradingFeePercent'
      | 'settleInterest'
      | 'setupLoanParams'
      | 'setupLoanPoolTWAI'
      | 'sourceBufferPercent'
      | 'supportedTokens'
      | 'swapExternal'
      | 'swapExternalWithGasToken'
      | 'swapsImpl'
      | 'toggleFunctionPause'
      | 'toggleFunctionUnPause'
      | 'tradingFeePercent'
      | 'tradingFeeTokensHeld'
      | 'tradingFeeTokensPaid'
      | 'transferLoan'
      | 'transferOwnership'
      | 'underlyingToLoanPool'
      | 'unpause'
      | 'withdrawCollateral'
      | 'withdrawFees',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: '_isPaused', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'affiliateFeePercent', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'borrowOrTradeFromPool',
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
      ],
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'borrowingFeePercent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'borrowingFeeTokensHeld', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'borrowingFeeTokensPaid', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'changeGuardian', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'claimRewards', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'cleanupLoans',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'closeWithDeposit',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'closeWithDepositWithGasToken',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'closeWithSwap',
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'closeWithSwapWithGasToken',
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'delegatedManagers',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositCollateral',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'disableLoanParams', values: [PromiseOrValue<BytesLike>[]]): string;
  encodeFunctionData(functionFragment: 'feesController', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getActiveLoans',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getActiveLoansAdvanced',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'getActiveLoansCount', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getBorrowAmount',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getBorrowAmountByParams',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getGuardian', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getInterestModelValues',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'getLoan', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'getLoanInterestOutstanding', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'getLoanParams', values: [PromiseOrValue<BytesLike>[]]): string;
  encodeFunctionData(
    functionFragment: 'getLoanParamsList',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getLoanPoolsList',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getLoanPrincipal', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'getPoolLastInterestRate', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getPoolPrincipalStored', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getRequiredCollateral',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getRequiredCollateralByParams',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getSwapExpectedReturn(address,address,uint256,bytes)',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getSwapExpectedReturn(address,address,address,uint256,bytes)',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'getTWAI', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getTarget', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getTotalPrincipal',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserLoans',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserLoansCount',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'isLoanPool', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'lenderInterest',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'lendingFeePercent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lendingFeeTokensHeld', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lendingFeeTokensPaid', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'liquidate',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidateWithGasToken',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'liquidationIncentivePercent',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'loanInterest', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'loanParams', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'loanPoolToUnderlying', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'loans', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'logicTargets', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'maxDisagreement', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxSwapSize', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values: [PromiseOrValue<BytesLike>[]]): string;
  encodeFunctionData(
    functionFragment: 'payFlashBorrowFees',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'priceFeeds', values?: undefined): string;
  encodeFunctionData(functionFragment: 'protocolTokenHeld', values?: undefined): string;
  encodeFunctionData(functionFragment: 'protocolTokenPaid', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'queryFees',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'replaceContract', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'rewardsBalanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setAffiliateFeePercent', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setBorrowingFeePercent', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setDelegatedManager',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDepositAmount',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setFeesController', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setLendingFeePercent', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setLiquidationIncentivePercent',
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'setLoanPool',
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(functionFragment: 'setMaxDisagreement', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setMaxSwapSize', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setPriceFeedContract', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setSourceBufferPercent', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setSupportedTokens',
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>[], PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setSwapsImplContract', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setTWAISettings',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setTargets',
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(functionFragment: 'setTradingFeePercent', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'settleInterest', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'setupLoanParams', values: [IBZx.LoanParamsStruct[]]): string;
  encodeFunctionData(functionFragment: 'setupLoanPoolTWAI', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'sourceBufferPercent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'supportedTokens', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'swapExternal',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapExternalWithGasToken',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'swapsImpl', values?: undefined): string;
  encodeFunctionData(functionFragment: 'toggleFunctionPause', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'toggleFunctionUnPause', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'tradingFeePercent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tradingFeeTokensHeld', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'tradingFeeTokensPaid', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'transferLoan',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'underlyingToLoanPool', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'unpause', values: [PromiseOrValue<BytesLike>[]]): string;
  encodeFunctionData(
    functionFragment: 'withdrawCollateral',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawFees',
    values: [PromiseOrValue<string>[], PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: '_isPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'affiliateFeePercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowOrTradeFromPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowingFeePercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowingFeeTokensHeld', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowingFeeTokensPaid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cleanupLoans', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeWithDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeWithDepositWithGasToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeWithSwap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeWithSwapWithGasToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegatedManagers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableLoanParams', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feesController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getActiveLoans', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getActiveLoansAdvanced', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getActiveLoansCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBorrowAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBorrowAmountByParams', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getInterestModelValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLoan', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLoanInterestOutstanding', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLoanParams', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLoanParamsList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLoanPoolsList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLoanPrincipal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolLastInterestRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolPrincipalStored', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRequiredCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRequiredCollateralByParams', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getSwapExpectedReturn(address,address,uint256,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getSwapExpectedReturn(address,address,address,uint256,bytes)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getTWAI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTarget', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalPrincipal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserLoans', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserLoansCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isLoanPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lenderInterest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lendingFeePercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lendingFeeTokensHeld', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lendingFeeTokensPaid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidateWithGasToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidationIncentivePercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'loanInterest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'loanParams', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'loanPoolToUnderlying', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'loans', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'logicTargets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxDisagreement', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxSwapSize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'payFlashBorrowFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'priceFeeds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protocolTokenHeld', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protocolTokenPaid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'replaceContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsBalanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAffiliateFeePercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBorrowingFeePercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDelegatedManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDepositAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeesController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLendingFeePercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLiquidationIncentivePercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLoanPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxDisagreement', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxSwapSize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPriceFeedContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSourceBufferPercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSupportedTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSwapsImplContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTWAISettings', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTargets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTradingFeePercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'settleInterest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setupLoanParams', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setupLoanPoolTWAI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sourceBufferPercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportedTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapExternal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapExternalWithGasToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapsImpl', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'toggleFunctionPause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'toggleFunctionUnPause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tradingFeePercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tradingFeeTokensHeld', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tradingFeeTokensPaid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferLoan', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'underlyingToLoanPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawFees', data: BytesLike): Result;

  events: {};
}

export interface IbZx extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IbZxInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _isPaused(sig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean] & { isPaused: boolean }>;

    affiliateFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowOrTradeFromPool(
      loanParamsId: PromiseOrValue<BytesLike>,
      loanId: PromiseOrValue<BytesLike>,
      isTorqueLoan: PromiseOrValue<boolean>,
      initialMargin: PromiseOrValue<BigNumberish>,
      sentAddresses: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
      sentValues: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
      ],
      loanDataBytes: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    borrowingFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowingFeeTokensHeld(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowingFeeTokensPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    changeGuardian(
      newGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimRewards(
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    cleanupLoans(
      loanToken: PromiseOrValue<string>,
      loanIds: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    closeWithDeposit(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    closeWithDepositWithGasToken(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      gasTokenUser: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    closeWithSwap(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      swapAmount: PromiseOrValue<BigNumberish>,
      returnTokenIsCollateral: PromiseOrValue<boolean>,
      loanDataBytes: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    closeWithSwapWithGasToken(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      gasTokenUser: PromiseOrValue<string>,
      swapAmount: PromiseOrValue<BigNumberish>,
      returnTokenIsCollateral: PromiseOrValue<boolean>,
      loanDataBytes: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    delegatedManagers(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    depositCollateral(
      loanId: PromiseOrValue<BytesLike>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    disableLoanParams(
      loanParamsIdList: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    feesController(overrides?: CallOverrides): Promise<[string]>;

    getActiveLoans(
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      unsafeOnly: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<
      [IBZx.LoanReturnDataStructOutput[]] & {
        loansData: IBZx.LoanReturnDataStructOutput[];
      }
    >;

    getActiveLoansAdvanced(
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      unsafeOnly: PromiseOrValue<boolean>,
      isLiquidatable: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<
      [IBZx.LoanReturnDataStructOutput[]] & {
        loansData: IBZx.LoanReturnDataStructOutput[];
      }
    >;

    getActiveLoansCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBorrowAmount(
      loanToken: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      collateralTokenAmount: PromiseOrValue<BigNumberish>,
      marginAmount: PromiseOrValue<BigNumberish>,
      isTorqueLoan: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { borrowAmount: BigNumber }>;

    getBorrowAmountByParams(
      loanParamsId: PromiseOrValue<BytesLike>,
      collateralTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { borrowAmount: BigNumber }>;

    getGuardian(overrides?: CallOverrides): Promise<[string] & { guardian: string }>;

    getInterestModelValues(
      pool: PromiseOrValue<string>,
      loanId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _poolLastUpdateTime: BigNumber;
        _poolPrincipalTotal: BigNumber;
        _poolInterestTotal: BigNumber;
        _poolRatePerTokenStored: BigNumber;
        _poolLastInterestRate: BigNumber;
        _loanPrincipalTotal: BigNumber;
        _loanInterestTotal: BigNumber;
        _loanRatePerTokenPaid: BigNumber;
      }
    >;

    getLoan(
      loanId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [IBZx.LoanReturnDataStructOutput] & {
        loanData: IBZx.LoanReturnDataStructOutput;
      }
    >;

    getLoanInterestOutstanding(
      loanId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { interest: BigNumber }>;

    getLoanParams(
      loanParamsIdList: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides,
    ): Promise<
      [IBZx.LoanParamsStructOutput[]] & {
        loanParamsList: IBZx.LoanParamsStructOutput[];
      }
    >;

    getLoanParamsList(
      owner: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string[]] & { loanParamsList: string[] }>;

    getLoanPoolsList(
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string[]] & { loanPoolsList: string[] }>;

    getLoanPrincipal(
      loanId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { principal: BigNumber }>;

    getPoolLastInterestRate(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoolPrincipalStored(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getRequiredCollateral(
      loanToken: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      newPrincipal: PromiseOrValue<BigNumberish>,
      marginAmount: PromiseOrValue<BigNumberish>,
      isTorqueLoan: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { collateralAmountRequired: BigNumber }>;

    getRequiredCollateralByParams(
      loanParamsId: PromiseOrValue<BytesLike>,
      newPrincipal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { collateralAmountRequired: BigNumber }>;

    'getSwapExpectedReturn(address,address,uint256,bytes)'(
      sourceToken: PromiseOrValue<string>,
      destToken: PromiseOrValue<string>,
      sourceTokenAmount: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'getSwapExpectedReturn(address,address,address,uint256,bytes)'(
      trader: PromiseOrValue<string>,
      sourceToken: PromiseOrValue<string>,
      destToken: PromiseOrValue<string>,
      sourceTokenAmount: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getTWAI(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { benchmarkRate: BigNumber }>;

    getTarget(sig: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    getTotalPrincipal(
      lender: PromiseOrValue<string>,
      loanToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getUserLoans(
      user: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      loanType: PromiseOrValue<BigNumberish>,
      isLender: PromiseOrValue<boolean>,
      unsafeOnly: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<
      [IBZx.LoanReturnDataStructOutput[]] & {
        loansData: IBZx.LoanReturnDataStructOutput[];
      }
    >;

    getUserLoansCount(
      user: PromiseOrValue<string>,
      isLender: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    isLoanPool(loanPool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    lenderInterest(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[IBZx.LenderInterestStructOutput]>;

    lendingFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    lendingFeeTokensHeld(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    lendingFeeTokensPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidate(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      closeAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    liquidateWithGasToken(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      gasTokenUser: PromiseOrValue<string>,
      closeAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    liquidationIncentivePercent(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    loanInterest(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[IBZx.LoanInterestStructOutput]>;

    loanParams(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[IBZx.LoanParamsStructOutput]>;

    loanPoolToUnderlying(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    loans(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[IBZx.LoanStructOutput]>;

    logicTargets(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    maxDisagreement(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxSwapSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      sig: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    payFlashBorrowFees(
      user: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      flashBorrowFeePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    priceFeeds(overrides?: CallOverrides): Promise<[string]>;

    protocolTokenHeld(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolTokenPaid(overrides?: CallOverrides): Promise<[BigNumber]>;

    queryFees(
      tokens: PromiseOrValue<string>[],
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        amountsHeld: BigNumber[];
        amountsPaid: BigNumber[];
      }
    >;

    replaceContract(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    rewardsBalanceOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { rewardsBalance: BigNumber }>;

    setAffiliateFeePercent(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setBorrowingFeePercent(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDelegatedManager(
      loanId: PromiseOrValue<BytesLike>,
      delegated: PromiseOrValue<string>,
      toggle: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDepositAmount(
      loanId: PromiseOrValue<BytesLike>,
      depositValueAsLoanToken: PromiseOrValue<BigNumberish>,
      depositValueAsCollateralToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFeesController(
      newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLendingFeePercent(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLiquidationIncentivePercent(
      loanTokens: PromiseOrValue<string>[],
      collateralTokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLoanPool(
      pools: PromiseOrValue<string>[],
      assets: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxDisagreement(
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxSwapSize(
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPriceFeedContract(
      newContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSourceBufferPercent(
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSupportedTokens(
      addrs: PromiseOrValue<string>[],
      toggles: PromiseOrValue<boolean>[],
      withApprovals: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSwapsImplContract(
      newContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTWAISettings(
      delta: PromiseOrValue<BigNumberish>,
      secondsAgo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTargets(
      sigsArr: PromiseOrValue<string>[],
      targetsArr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTradingFeePercent(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    settleInterest(
      loanId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setupLoanParams(
      loanParamsList: IBZx.LoanParamsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setupLoanPoolTWAI(
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    sourceBufferPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportedTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    swapExternal(
      sourceToken: PromiseOrValue<string>,
      destToken: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      returnToSender: PromiseOrValue<string>,
      sourceTokenAmount: PromiseOrValue<BigNumberish>,
      requiredDestTokenAmount: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swapExternalWithGasToken(
      sourceToken: PromiseOrValue<string>,
      destToken: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      returnToSender: PromiseOrValue<string>,
      gasTokenUser: PromiseOrValue<string>,
      sourceTokenAmount: PromiseOrValue<BigNumberish>,
      requiredDestTokenAmount: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swapsImpl(overrides?: CallOverrides): Promise<[string]>;

    toggleFunctionPause(
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    toggleFunctionUnPause(
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    tradingFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradingFeeTokensHeld(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    tradingFeeTokensPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    transferLoan(
      loanId: PromiseOrValue<BytesLike>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    underlyingToLoanPool(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    unpause(
      sig: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawCollateral(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawFees(
      tokens: PromiseOrValue<string>[],
      receiver: PromiseOrValue<string>,
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  _isPaused(sig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  affiliateFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  borrowOrTradeFromPool(
    loanParamsId: PromiseOrValue<BytesLike>,
    loanId: PromiseOrValue<BytesLike>,
    isTorqueLoan: PromiseOrValue<boolean>,
    initialMargin: PromiseOrValue<BigNumberish>,
    sentAddresses: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
    sentValues: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
    loanDataBytes: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  borrowingFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  borrowingFeeTokensHeld(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  borrowingFeeTokensPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  changeGuardian(
    newGuardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimRewards(
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  cleanupLoans(
    loanToken: PromiseOrValue<string>,
    loanIds: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  closeWithDeposit(
    loanId: PromiseOrValue<BytesLike>,
    receiver: PromiseOrValue<string>,
    depositAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  closeWithDepositWithGasToken(
    loanId: PromiseOrValue<BytesLike>,
    receiver: PromiseOrValue<string>,
    gasTokenUser: PromiseOrValue<string>,
    depositAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  closeWithSwap(
    loanId: PromiseOrValue<BytesLike>,
    receiver: PromiseOrValue<string>,
    swapAmount: PromiseOrValue<BigNumberish>,
    returnTokenIsCollateral: PromiseOrValue<boolean>,
    loanDataBytes: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  closeWithSwapWithGasToken(
    loanId: PromiseOrValue<BytesLike>,
    receiver: PromiseOrValue<string>,
    gasTokenUser: PromiseOrValue<string>,
    swapAmount: PromiseOrValue<BigNumberish>,
    returnTokenIsCollateral: PromiseOrValue<boolean>,
    loanDataBytes: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  delegatedManagers(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  depositCollateral(
    loanId: PromiseOrValue<BytesLike>,
    depositAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  disableLoanParams(
    loanParamsIdList: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  feesController(overrides?: CallOverrides): Promise<string>;

  getActiveLoans(
    start: PromiseOrValue<BigNumberish>,
    count: PromiseOrValue<BigNumberish>,
    unsafeOnly: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<IBZx.LoanReturnDataStructOutput[]>;

  getActiveLoansAdvanced(
    start: PromiseOrValue<BigNumberish>,
    count: PromiseOrValue<BigNumberish>,
    unsafeOnly: PromiseOrValue<boolean>,
    isLiquidatable: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<IBZx.LoanReturnDataStructOutput[]>;

  getActiveLoansCount(overrides?: CallOverrides): Promise<BigNumber>;

  getBorrowAmount(
    loanToken: PromiseOrValue<string>,
    collateralToken: PromiseOrValue<string>,
    collateralTokenAmount: PromiseOrValue<BigNumberish>,
    marginAmount: PromiseOrValue<BigNumberish>,
    isTorqueLoan: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getBorrowAmountByParams(
    loanParamsId: PromiseOrValue<BytesLike>,
    collateralTokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getGuardian(overrides?: CallOverrides): Promise<string>;

  getInterestModelValues(
    pool: PromiseOrValue<string>,
    loanId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      _poolLastUpdateTime: BigNumber;
      _poolPrincipalTotal: BigNumber;
      _poolInterestTotal: BigNumber;
      _poolRatePerTokenStored: BigNumber;
      _poolLastInterestRate: BigNumber;
      _loanPrincipalTotal: BigNumber;
      _loanInterestTotal: BigNumber;
      _loanRatePerTokenPaid: BigNumber;
    }
  >;

  getLoan(loanId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<IBZx.LoanReturnDataStructOutput>;

  getLoanInterestOutstanding(loanId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

  getLoanParams(
    loanParamsIdList: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides,
  ): Promise<IBZx.LoanParamsStructOutput[]>;

  getLoanParamsList(
    owner: PromiseOrValue<string>,
    start: PromiseOrValue<BigNumberish>,
    count: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string[]>;

  getLoanPoolsList(
    start: PromiseOrValue<BigNumberish>,
    count: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string[]>;

  getLoanPrincipal(loanId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

  getPoolLastInterestRate(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getPoolPrincipalStored(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getRequiredCollateral(
    loanToken: PromiseOrValue<string>,
    collateralToken: PromiseOrValue<string>,
    newPrincipal: PromiseOrValue<BigNumberish>,
    marginAmount: PromiseOrValue<BigNumberish>,
    isTorqueLoan: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getRequiredCollateralByParams(
    loanParamsId: PromiseOrValue<BytesLike>,
    newPrincipal: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'getSwapExpectedReturn(address,address,uint256,bytes)'(
    sourceToken: PromiseOrValue<string>,
    destToken: PromiseOrValue<string>,
    sourceTokenAmount: PromiseOrValue<BigNumberish>,
    swapData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'getSwapExpectedReturn(address,address,address,uint256,bytes)'(
    trader: PromiseOrValue<string>,
    sourceToken: PromiseOrValue<string>,
    destToken: PromiseOrValue<string>,
    sourceTokenAmount: PromiseOrValue<BigNumberish>,
    payload: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getTWAI(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getTarget(sig: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  getTotalPrincipal(
    lender: PromiseOrValue<string>,
    loanToken: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getUserLoans(
    user: PromiseOrValue<string>,
    start: PromiseOrValue<BigNumberish>,
    count: PromiseOrValue<BigNumberish>,
    loanType: PromiseOrValue<BigNumberish>,
    isLender: PromiseOrValue<boolean>,
    unsafeOnly: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<IBZx.LoanReturnDataStructOutput[]>;

  getUserLoansCount(
    user: PromiseOrValue<string>,
    isLender: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  isLoanPool(loanPool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  lenderInterest(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<IBZx.LenderInterestStructOutput>;

  lendingFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  lendingFeeTokensHeld(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  lendingFeeTokensPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  liquidate(
    loanId: PromiseOrValue<BytesLike>,
    receiver: PromiseOrValue<string>,
    closeAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  liquidateWithGasToken(
    loanId: PromiseOrValue<BytesLike>,
    receiver: PromiseOrValue<string>,
    gasTokenUser: PromiseOrValue<string>,
    closeAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  liquidationIncentivePercent(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  loanInterest(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<IBZx.LoanInterestStructOutput>;

  loanParams(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<IBZx.LoanParamsStructOutput>;

  loanPoolToUnderlying(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  loans(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<IBZx.LoanStructOutput>;

  logicTargets(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  maxDisagreement(overrides?: CallOverrides): Promise<BigNumber>;

  maxSwapSize(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    sig: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  payFlashBorrowFees(
    user: PromiseOrValue<string>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    flashBorrowFeePercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  priceFeeds(overrides?: CallOverrides): Promise<string>;

  protocolTokenHeld(overrides?: CallOverrides): Promise<BigNumber>;

  protocolTokenPaid(overrides?: CallOverrides): Promise<BigNumber>;

  queryFees(
    tokens: PromiseOrValue<string>[],
    feeType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber[], BigNumber[]] & {
      amountsHeld: BigNumber[];
      amountsPaid: BigNumber[];
    }
  >;

  replaceContract(
    target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  rewardsBalanceOf(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  setAffiliateFeePercent(
    newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setBorrowingFeePercent(
    newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDelegatedManager(
    loanId: PromiseOrValue<BytesLike>,
    delegated: PromiseOrValue<string>,
    toggle: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDepositAmount(
    loanId: PromiseOrValue<BytesLike>,
    depositValueAsLoanToken: PromiseOrValue<BigNumberish>,
    depositValueAsCollateralToken: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFeesController(
    newController: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLendingFeePercent(
    newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLiquidationIncentivePercent(
    loanTokens: PromiseOrValue<string>[],
    collateralTokens: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLoanPool(
    pools: PromiseOrValue<string>[],
    assets: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxDisagreement(
    newAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxSwapSize(
    newAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPriceFeedContract(
    newContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSourceBufferPercent(
    newAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSupportedTokens(
    addrs: PromiseOrValue<string>[],
    toggles: PromiseOrValue<boolean>[],
    withApprovals: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSwapsImplContract(
    newContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTWAISettings(
    delta: PromiseOrValue<BigNumberish>,
    secondsAgo: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTargets(
    sigsArr: PromiseOrValue<string>[],
    targetsArr: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTradingFeePercent(
    newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  settleInterest(
    loanId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setupLoanParams(
    loanParamsList: IBZx.LoanParamsStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setupLoanPoolTWAI(
    pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  sourceBufferPercent(overrides?: CallOverrides): Promise<BigNumber>;

  supportedTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  swapExternal(
    sourceToken: PromiseOrValue<string>,
    destToken: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    returnToSender: PromiseOrValue<string>,
    sourceTokenAmount: PromiseOrValue<BigNumberish>,
    requiredDestTokenAmount: PromiseOrValue<BigNumberish>,
    swapData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swapExternalWithGasToken(
    sourceToken: PromiseOrValue<string>,
    destToken: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    returnToSender: PromiseOrValue<string>,
    gasTokenUser: PromiseOrValue<string>,
    sourceTokenAmount: PromiseOrValue<BigNumberish>,
    requiredDestTokenAmount: PromiseOrValue<BigNumberish>,
    swapData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swapsImpl(overrides?: CallOverrides): Promise<string>;

  toggleFunctionPause(
    sig: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  toggleFunctionUnPause(
    sig: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  tradingFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  tradingFeeTokensHeld(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  tradingFeeTokensPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  transferLoan(
    loanId: PromiseOrValue<BytesLike>,
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  underlyingToLoanPool(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  unpause(
    sig: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawCollateral(
    loanId: PromiseOrValue<BytesLike>,
    receiver: PromiseOrValue<string>,
    withdrawAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawFees(
    tokens: PromiseOrValue<string>[],
    receiver: PromiseOrValue<string>,
    feeType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    _isPaused(sig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    affiliateFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    borrowOrTradeFromPool(
      loanParamsId: PromiseOrValue<BytesLike>,
      loanId: PromiseOrValue<BytesLike>,
      isTorqueLoan: PromiseOrValue<boolean>,
      initialMargin: PromiseOrValue<BigNumberish>,
      sentAddresses: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
      sentValues: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
      ],
      loanDataBytes: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<IBZx.LoanOpenDataStructOutput>;

    borrowingFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    borrowingFeeTokensHeld(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowingFeeTokensPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    changeGuardian(newGuardian: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    claimRewards(receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    cleanupLoans(
      loanToken: PromiseOrValue<string>,
      loanIds: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    closeWithDeposit(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, string] & {
        loanCloseAmount: BigNumber;
        withdrawAmount: BigNumber;
        withdrawToken: string;
      }
    >;

    closeWithDepositWithGasToken(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      gasTokenUser: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, string] & {
        loanCloseAmount: BigNumber;
        withdrawAmount: BigNumber;
        withdrawToken: string;
      }
    >;

    closeWithSwap(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      swapAmount: PromiseOrValue<BigNumberish>,
      returnTokenIsCollateral: PromiseOrValue<boolean>,
      loanDataBytes: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, string] & {
        loanCloseAmount: BigNumber;
        withdrawAmount: BigNumber;
        withdrawToken: string;
      }
    >;

    closeWithSwapWithGasToken(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      gasTokenUser: PromiseOrValue<string>,
      swapAmount: PromiseOrValue<BigNumberish>,
      returnTokenIsCollateral: PromiseOrValue<boolean>,
      loanDataBytes: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, string] & {
        loanCloseAmount: BigNumber;
        withdrawAmount: BigNumber;
        withdrawToken: string;
      }
    >;

    delegatedManagers(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    depositCollateral(
      loanId: PromiseOrValue<BytesLike>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    disableLoanParams(loanParamsIdList: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;

    feesController(overrides?: CallOverrides): Promise<string>;

    getActiveLoans(
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      unsafeOnly: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<IBZx.LoanReturnDataStructOutput[]>;

    getActiveLoansAdvanced(
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      unsafeOnly: PromiseOrValue<boolean>,
      isLiquidatable: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<IBZx.LoanReturnDataStructOutput[]>;

    getActiveLoansCount(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowAmount(
      loanToken: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      collateralTokenAmount: PromiseOrValue<BigNumberish>,
      marginAmount: PromiseOrValue<BigNumberish>,
      isTorqueLoan: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getBorrowAmountByParams(
      loanParamsId: PromiseOrValue<BytesLike>,
      collateralTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getGuardian(overrides?: CallOverrides): Promise<string>;

    getInterestModelValues(
      pool: PromiseOrValue<string>,
      loanId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _poolLastUpdateTime: BigNumber;
        _poolPrincipalTotal: BigNumber;
        _poolInterestTotal: BigNumber;
        _poolRatePerTokenStored: BigNumber;
        _poolLastInterestRate: BigNumber;
        _loanPrincipalTotal: BigNumber;
        _loanInterestTotal: BigNumber;
        _loanRatePerTokenPaid: BigNumber;
      }
    >;

    getLoan(loanId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<IBZx.LoanReturnDataStructOutput>;

    getLoanInterestOutstanding(loanId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getLoanParams(
      loanParamsIdList: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides,
    ): Promise<IBZx.LoanParamsStructOutput[]>;

    getLoanParamsList(
      owner: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string[]>;

    getLoanPoolsList(
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string[]>;

    getLoanPrincipal(loanId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolLastInterestRate(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolPrincipalStored(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRequiredCollateral(
      loanToken: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      newPrincipal: PromiseOrValue<BigNumberish>,
      marginAmount: PromiseOrValue<BigNumberish>,
      isTorqueLoan: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRequiredCollateralByParams(
      loanParamsId: PromiseOrValue<BytesLike>,
      newPrincipal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getSwapExpectedReturn(address,address,uint256,bytes)'(
      sourceToken: PromiseOrValue<string>,
      destToken: PromiseOrValue<string>,
      sourceTokenAmount: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getSwapExpectedReturn(address,address,address,uint256,bytes)'(
      trader: PromiseOrValue<string>,
      sourceToken: PromiseOrValue<string>,
      destToken: PromiseOrValue<string>,
      sourceTokenAmount: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getTWAI(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTarget(sig: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    getTotalPrincipal(
      lender: PromiseOrValue<string>,
      loanToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserLoans(
      user: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      loanType: PromiseOrValue<BigNumberish>,
      isLender: PromiseOrValue<boolean>,
      unsafeOnly: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<IBZx.LoanReturnDataStructOutput[]>;

    getUserLoansCount(
      user: PromiseOrValue<string>,
      isLender: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isLoanPool(loanPool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    lenderInterest(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<IBZx.LenderInterestStructOutput>;

    lendingFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    lendingFeeTokensHeld(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lendingFeeTokensPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      closeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, string] & {
        loanCloseAmount: BigNumber;
        seizedAmount: BigNumber;
        seizedToken: string;
      }
    >;

    liquidateWithGasToken(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      gasTokenUser: PromiseOrValue<string>,
      closeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, string] & {
        loanCloseAmount: BigNumber;
        seizedAmount: BigNumber;
        seizedToken: string;
      }
    >;

    liquidationIncentivePercent(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    loanInterest(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<IBZx.LoanInterestStructOutput>;

    loanParams(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<IBZx.LoanParamsStructOutput>;

    loanPoolToUnderlying(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    loans(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<IBZx.LoanStructOutput>;

    logicTargets(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    maxDisagreement(overrides?: CallOverrides): Promise<BigNumber>;

    maxSwapSize(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(sig: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;

    payFlashBorrowFees(
      user: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      flashBorrowFeePercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    priceFeeds(overrides?: CallOverrides): Promise<string>;

    protocolTokenHeld(overrides?: CallOverrides): Promise<BigNumber>;

    protocolTokenPaid(overrides?: CallOverrides): Promise<BigNumber>;

    queryFees(
      tokens: PromiseOrValue<string>[],
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        amountsHeld: BigNumber[];
        amountsPaid: BigNumber[];
      }
    >;

    replaceContract(target: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    rewardsBalanceOf(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    setAffiliateFeePercent(newValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setBorrowingFeePercent(newValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setDelegatedManager(
      loanId: PromiseOrValue<BytesLike>,
      delegated: PromiseOrValue<string>,
      toggle: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDepositAmount(
      loanId: PromiseOrValue<BytesLike>,
      depositValueAsLoanToken: PromiseOrValue<BigNumberish>,
      depositValueAsCollateralToken: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setFeesController(newController: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setLendingFeePercent(newValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setLiquidationIncentivePercent(
      loanTokens: PromiseOrValue<string>[],
      collateralTokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    setLoanPool(
      pools: PromiseOrValue<string>[],
      assets: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    setMaxDisagreement(newAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setMaxSwapSize(newAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setPriceFeedContract(newContract: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setSourceBufferPercent(newAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setSupportedTokens(
      addrs: PromiseOrValue<string>[],
      toggles: PromiseOrValue<boolean>[],
      withApprovals: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setSwapsImplContract(newContract: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setTWAISettings(
      delta: PromiseOrValue<BigNumberish>,
      secondsAgo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setTargets(
      sigsArr: PromiseOrValue<string>[],
      targetsArr: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    setTradingFeePercent(newValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    settleInterest(loanId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    setupLoanParams(loanParamsList: IBZx.LoanParamsStruct[], overrides?: CallOverrides): Promise<string[]>;

    setupLoanPoolTWAI(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    sourceBufferPercent(overrides?: CallOverrides): Promise<BigNumber>;

    supportedTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    swapExternal(
      sourceToken: PromiseOrValue<string>,
      destToken: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      returnToSender: PromiseOrValue<string>,
      sourceTokenAmount: PromiseOrValue<BigNumberish>,
      requiredDestTokenAmount: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        destTokenAmountReceived: BigNumber;
        sourceTokenAmountUsed: BigNumber;
      }
    >;

    swapExternalWithGasToken(
      sourceToken: PromiseOrValue<string>,
      destToken: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      returnToSender: PromiseOrValue<string>,
      gasTokenUser: PromiseOrValue<string>,
      sourceTokenAmount: PromiseOrValue<BigNumberish>,
      requiredDestTokenAmount: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        destTokenAmountReceived: BigNumber;
        sourceTokenAmountUsed: BigNumber;
      }
    >;

    swapsImpl(overrides?: CallOverrides): Promise<string>;

    toggleFunctionPause(sig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    toggleFunctionUnPause(sig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    tradingFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    tradingFeeTokensHeld(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    tradingFeeTokensPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    transferLoan(
      loanId: PromiseOrValue<BytesLike>,
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    underlyingToLoanPool(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    unpause(sig: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;

    withdrawCollateral(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    withdrawFees(
      tokens: PromiseOrValue<string>[],
      receiver: PromiseOrValue<string>,
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;
  };

  filters: {};

  estimateGas: {
    _isPaused(sig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    affiliateFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    borrowOrTradeFromPool(
      loanParamsId: PromiseOrValue<BytesLike>,
      loanId: PromiseOrValue<BytesLike>,
      isTorqueLoan: PromiseOrValue<boolean>,
      initialMargin: PromiseOrValue<BigNumberish>,
      sentAddresses: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
      sentValues: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
      ],
      loanDataBytes: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    borrowingFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    borrowingFeeTokensHeld(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrowingFeeTokensPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    changeGuardian(
      newGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimRewards(
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    cleanupLoans(
      loanToken: PromiseOrValue<string>,
      loanIds: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    closeWithDeposit(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    closeWithDepositWithGasToken(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      gasTokenUser: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    closeWithSwap(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      swapAmount: PromiseOrValue<BigNumberish>,
      returnTokenIsCollateral: PromiseOrValue<boolean>,
      loanDataBytes: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    closeWithSwapWithGasToken(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      gasTokenUser: PromiseOrValue<string>,
      swapAmount: PromiseOrValue<BigNumberish>,
      returnTokenIsCollateral: PromiseOrValue<boolean>,
      loanDataBytes: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    delegatedManagers(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    depositCollateral(
      loanId: PromiseOrValue<BytesLike>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    disableLoanParams(
      loanParamsIdList: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    feesController(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveLoans(
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      unsafeOnly: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getActiveLoansAdvanced(
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      unsafeOnly: PromiseOrValue<boolean>,
      isLiquidatable: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getActiveLoansCount(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowAmount(
      loanToken: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      collateralTokenAmount: PromiseOrValue<BigNumberish>,
      marginAmount: PromiseOrValue<BigNumberish>,
      isTorqueLoan: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getBorrowAmountByParams(
      loanParamsId: PromiseOrValue<BytesLike>,
      collateralTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    getInterestModelValues(
      pool: PromiseOrValue<string>,
      loanId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLoan(loanId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getLoanInterestOutstanding(loanId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getLoanParams(loanParamsIdList: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<BigNumber>;

    getLoanParamsList(
      owner: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLoanPoolsList(
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLoanPrincipal(loanId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolLastInterestRate(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolPrincipalStored(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRequiredCollateral(
      loanToken: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      newPrincipal: PromiseOrValue<BigNumberish>,
      marginAmount: PromiseOrValue<BigNumberish>,
      isTorqueLoan: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRequiredCollateralByParams(
      loanParamsId: PromiseOrValue<BytesLike>,
      newPrincipal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getSwapExpectedReturn(address,address,uint256,bytes)'(
      sourceToken: PromiseOrValue<string>,
      destToken: PromiseOrValue<string>,
      sourceTokenAmount: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'getSwapExpectedReturn(address,address,address,uint256,bytes)'(
      trader: PromiseOrValue<string>,
      sourceToken: PromiseOrValue<string>,
      destToken: PromiseOrValue<string>,
      sourceTokenAmount: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getTWAI(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTarget(sig: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPrincipal(
      lender: PromiseOrValue<string>,
      loanToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserLoans(
      user: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      loanType: PromiseOrValue<BigNumberish>,
      isLender: PromiseOrValue<boolean>,
      unsafeOnly: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserLoansCount(
      user: PromiseOrValue<string>,
      isLender: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isLoanPool(loanPool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lenderInterest(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lendingFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    lendingFeeTokensHeld(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lendingFeeTokensPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      closeAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    liquidateWithGasToken(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      gasTokenUser: PromiseOrValue<string>,
      closeAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    liquidationIncentivePercent(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    loanInterest(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    loanParams(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    loanPoolToUnderlying(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    loans(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    logicTargets(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    maxDisagreement(overrides?: CallOverrides): Promise<BigNumber>;

    maxSwapSize(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      sig: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    payFlashBorrowFees(
      user: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      flashBorrowFeePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    priceFeeds(overrides?: CallOverrides): Promise<BigNumber>;

    protocolTokenHeld(overrides?: CallOverrides): Promise<BigNumber>;

    protocolTokenPaid(overrides?: CallOverrides): Promise<BigNumber>;

    queryFees(
      tokens: PromiseOrValue<string>[],
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    replaceContract(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    rewardsBalanceOf(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    setAffiliateFeePercent(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setBorrowingFeePercent(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDelegatedManager(
      loanId: PromiseOrValue<BytesLike>,
      delegated: PromiseOrValue<string>,
      toggle: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDepositAmount(
      loanId: PromiseOrValue<BytesLike>,
      depositValueAsLoanToken: PromiseOrValue<BigNumberish>,
      depositValueAsCollateralToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFeesController(
      newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLendingFeePercent(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLiquidationIncentivePercent(
      loanTokens: PromiseOrValue<string>[],
      collateralTokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLoanPool(
      pools: PromiseOrValue<string>[],
      assets: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxDisagreement(
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxSwapSize(
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPriceFeedContract(
      newContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSourceBufferPercent(
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSupportedTokens(
      addrs: PromiseOrValue<string>[],
      toggles: PromiseOrValue<boolean>[],
      withApprovals: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSwapsImplContract(
      newContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTWAISettings(
      delta: PromiseOrValue<BigNumberish>,
      secondsAgo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTargets(
      sigsArr: PromiseOrValue<string>[],
      targetsArr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTradingFeePercent(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    settleInterest(
      loanId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setupLoanParams(
      loanParamsList: IBZx.LoanParamsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setupLoanPoolTWAI(
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    sourceBufferPercent(overrides?: CallOverrides): Promise<BigNumber>;

    supportedTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    swapExternal(
      sourceToken: PromiseOrValue<string>,
      destToken: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      returnToSender: PromiseOrValue<string>,
      sourceTokenAmount: PromiseOrValue<BigNumberish>,
      requiredDestTokenAmount: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swapExternalWithGasToken(
      sourceToken: PromiseOrValue<string>,
      destToken: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      returnToSender: PromiseOrValue<string>,
      gasTokenUser: PromiseOrValue<string>,
      sourceTokenAmount: PromiseOrValue<BigNumberish>,
      requiredDestTokenAmount: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swapsImpl(overrides?: CallOverrides): Promise<BigNumber>;

    toggleFunctionPause(
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    toggleFunctionUnPause(
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    tradingFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    tradingFeeTokensHeld(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    tradingFeeTokensPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    transferLoan(
      loanId: PromiseOrValue<BytesLike>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    underlyingToLoanPool(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      sig: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawCollateral(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawFees(
      tokens: PromiseOrValue<string>[],
      receiver: PromiseOrValue<string>,
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _isPaused(sig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    affiliateFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowOrTradeFromPool(
      loanParamsId: PromiseOrValue<BytesLike>,
      loanId: PromiseOrValue<BytesLike>,
      isTorqueLoan: PromiseOrValue<boolean>,
      initialMargin: PromiseOrValue<BigNumberish>,
      sentAddresses: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
      sentValues: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
      ],
      loanDataBytes: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    borrowingFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowingFeeTokensHeld(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowingFeeTokensPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeGuardian(
      newGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimRewards(
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    cleanupLoans(
      loanToken: PromiseOrValue<string>,
      loanIds: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    closeWithDeposit(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    closeWithDepositWithGasToken(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      gasTokenUser: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    closeWithSwap(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      swapAmount: PromiseOrValue<BigNumberish>,
      returnTokenIsCollateral: PromiseOrValue<boolean>,
      loanDataBytes: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    closeWithSwapWithGasToken(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      gasTokenUser: PromiseOrValue<string>,
      swapAmount: PromiseOrValue<BigNumberish>,
      returnTokenIsCollateral: PromiseOrValue<boolean>,
      loanDataBytes: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    delegatedManagers(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    depositCollateral(
      loanId: PromiseOrValue<BytesLike>,
      depositAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    disableLoanParams(
      loanParamsIdList: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    feesController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getActiveLoans(
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      unsafeOnly: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getActiveLoansAdvanced(
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      unsafeOnly: PromiseOrValue<boolean>,
      isLiquidatable: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getActiveLoansCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBorrowAmount(
      loanToken: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      collateralTokenAmount: PromiseOrValue<BigNumberish>,
      marginAmount: PromiseOrValue<BigNumberish>,
      isTorqueLoan: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getBorrowAmountByParams(
      loanParamsId: PromiseOrValue<BytesLike>,
      collateralTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInterestModelValues(
      pool: PromiseOrValue<string>,
      loanId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLoan(loanId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLoanInterestOutstanding(
      loanId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLoanParams(
      loanParamsIdList: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLoanParamsList(
      owner: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLoanPoolsList(
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLoanPrincipal(loanId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolLastInterestRate(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolPrincipalStored(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRequiredCollateral(
      loanToken: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      newPrincipal: PromiseOrValue<BigNumberish>,
      marginAmount: PromiseOrValue<BigNumberish>,
      isTorqueLoan: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRequiredCollateralByParams(
      loanParamsId: PromiseOrValue<BytesLike>,
      newPrincipal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getSwapExpectedReturn(address,address,uint256,bytes)'(
      sourceToken: PromiseOrValue<string>,
      destToken: PromiseOrValue<string>,
      sourceTokenAmount: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'getSwapExpectedReturn(address,address,address,uint256,bytes)'(
      trader: PromiseOrValue<string>,
      sourceToken: PromiseOrValue<string>,
      destToken: PromiseOrValue<string>,
      sourceTokenAmount: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getTWAI(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTarget(sig: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalPrincipal(
      lender: PromiseOrValue<string>,
      loanToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserLoans(
      user: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      loanType: PromiseOrValue<BigNumberish>,
      isLender: PromiseOrValue<boolean>,
      unsafeOnly: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserLoansCount(
      user: PromiseOrValue<string>,
      isLender: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isLoanPool(loanPool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lenderInterest(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lendingFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lendingFeeTokensHeld(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lendingFeeTokensPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidate(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      closeAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    liquidateWithGasToken(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      gasTokenUser: PromiseOrValue<string>,
      closeAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    liquidationIncentivePercent(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    loanInterest(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loanParams(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loanPoolToUnderlying(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loans(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    logicTargets(arg0: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDisagreement(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSwapSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      sig: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    payFlashBorrowFees(
      user: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      flashBorrowFeePercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    priceFeeds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolTokenHeld(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolTokenPaid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryFees(
      tokens: PromiseOrValue<string>[],
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    replaceContract(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    rewardsBalanceOf(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAffiliateFeePercent(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setBorrowingFeePercent(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDelegatedManager(
      loanId: PromiseOrValue<BytesLike>,
      delegated: PromiseOrValue<string>,
      toggle: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDepositAmount(
      loanId: PromiseOrValue<BytesLike>,
      depositValueAsLoanToken: PromiseOrValue<BigNumberish>,
      depositValueAsCollateralToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFeesController(
      newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLendingFeePercent(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLiquidationIncentivePercent(
      loanTokens: PromiseOrValue<string>[],
      collateralTokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLoanPool(
      pools: PromiseOrValue<string>[],
      assets: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxDisagreement(
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxSwapSize(
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPriceFeedContract(
      newContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSourceBufferPercent(
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSupportedTokens(
      addrs: PromiseOrValue<string>[],
      toggles: PromiseOrValue<boolean>[],
      withApprovals: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSwapsImplContract(
      newContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTWAISettings(
      delta: PromiseOrValue<BigNumberish>,
      secondsAgo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTargets(
      sigsArr: PromiseOrValue<string>[],
      targetsArr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTradingFeePercent(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    settleInterest(
      loanId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setupLoanParams(
      loanParamsList: IBZx.LoanParamsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setupLoanPoolTWAI(
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    sourceBufferPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportedTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapExternal(
      sourceToken: PromiseOrValue<string>,
      destToken: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      returnToSender: PromiseOrValue<string>,
      sourceTokenAmount: PromiseOrValue<BigNumberish>,
      requiredDestTokenAmount: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swapExternalWithGasToken(
      sourceToken: PromiseOrValue<string>,
      destToken: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      returnToSender: PromiseOrValue<string>,
      gasTokenUser: PromiseOrValue<string>,
      sourceTokenAmount: PromiseOrValue<BigNumberish>,
      requiredDestTokenAmount: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swapsImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleFunctionPause(
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    toggleFunctionUnPause(
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    tradingFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingFeeTokensHeld(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingFeeTokensPaid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferLoan(
      loanId: PromiseOrValue<BytesLike>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    underlyingToLoanPool(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      sig: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawCollateral(
      loanId: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      withdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      tokens: PromiseOrValue<string>[],
      receiver: PromiseOrValue<string>,
      feeType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
