/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface LlamaAirforceUnionVaultInterface extends utils.Interface {
  functions: {
    'CRVETH_CRV_INDEX()': FunctionFragment;
    'CRVETH_ETH_INDEX()': FunctionFragment;
    'CRV_TOKEN()': FunctionFragment;
    'CURVE_CRV_ETH_POOL()': FunctionFragment;
    'CURVE_CVXCRV_CRV_POOL()': FunctionFragment;
    'CURVE_CVX_ETH_POOL()': FunctionFragment;
    'CVXCRV_CRV_INDEX()': FunctionFragment;
    'CVXCRV_CVXCRV_INDEX()': FunctionFragment;
    'CVXCRV_STAKING_CONTRACT()': FunctionFragment;
    'CVXCRV_TOKEN()': FunctionFragment;
    'CVXETH_CVX_INDEX()': FunctionFragment;
    'CVXETH_ETH_INDEX()': FunctionFragment;
    'CVX_TOKEN()': FunctionFragment;
    'FEE_DENOMINATOR()': FunctionFragment;
    'MAX_CALL_INCENTIVE()': FunctionFragment;
    'MAX_PLATFORM_FEE()': FunctionFragment;
    'MAX_WITHDRAWAL_PENALTY()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'balanceOfUnderlying(address)': FunctionFragment;
    'callIncentive()': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'deposit(address,uint256)': FunctionFragment;
    'depositAll(address)': FunctionFragment;
    'harvest()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'outstanding3CrvRewards()': FunctionFragment;
    'outstandingCrvRewards()': FunctionFragment;
    'outstandingCvxRewards()': FunctionFragment;
    'owner()': FunctionFragment;
    'platform()': FunctionFragment;
    'platformFee()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setApprovals()': FunctionFragment;
    'setCallIncentive(uint256)': FunctionFragment;
    'setPlatform(address)': FunctionFragment;
    'setPlatformFee(uint256)': FunctionFragment;
    'setWithdrawalPenalty(uint256)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'totalUnderlying()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'underlying()': FunctionFragment;
    'withdraw(address,uint256)': FunctionFragment;
    'withdrawAll(address)': FunctionFragment;
    'withdrawAllAs(address,uint8,uint256)': FunctionFragment;
    'withdrawAllAs(address,uint8)': FunctionFragment;
    'withdrawAs(address,uint256,uint8)': FunctionFragment;
    'withdrawAs(address,uint256,uint8,uint256)': FunctionFragment;
    'withdrawalPenalty()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'CRVETH_CRV_INDEX'
      | 'CRVETH_ETH_INDEX'
      | 'CRV_TOKEN'
      | 'CURVE_CRV_ETH_POOL'
      | 'CURVE_CVXCRV_CRV_POOL'
      | 'CURVE_CVX_ETH_POOL'
      | 'CVXCRV_CRV_INDEX'
      | 'CVXCRV_CVXCRV_INDEX'
      | 'CVXCRV_STAKING_CONTRACT'
      | 'CVXCRV_TOKEN'
      | 'CVXETH_CVX_INDEX'
      | 'CVXETH_ETH_INDEX'
      | 'CVX_TOKEN'
      | 'FEE_DENOMINATOR'
      | 'MAX_CALL_INCENTIVE'
      | 'MAX_PLATFORM_FEE'
      | 'MAX_WITHDRAWAL_PENALTY'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'balanceOfUnderlying'
      | 'callIncentive'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit'
      | 'depositAll'
      | 'harvest'
      | 'increaseAllowance'
      | 'name'
      | 'outstanding3CrvRewards'
      | 'outstandingCrvRewards'
      | 'outstandingCvxRewards'
      | 'owner'
      | 'platform'
      | 'platformFee'
      | 'renounceOwnership'
      | 'setApprovals'
      | 'setCallIncentive'
      | 'setPlatform'
      | 'setPlatformFee'
      | 'setWithdrawalPenalty'
      | 'symbol'
      | 'totalSupply'
      | 'totalUnderlying'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'underlying'
      | 'withdraw'
      | 'withdrawAll'
      | 'withdrawAllAs(address,uint8,uint256)'
      | 'withdrawAllAs(address,uint8)'
      | 'withdrawAs(address,uint256,uint8)'
      | 'withdrawAs(address,uint256,uint8,uint256)'
      | 'withdrawalPenalty',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'CRVETH_CRV_INDEX', values?: undefined): string;
  encodeFunctionData(functionFragment: 'CRVETH_ETH_INDEX', values?: undefined): string;
  encodeFunctionData(functionFragment: 'CRV_TOKEN', values?: undefined): string;
  encodeFunctionData(functionFragment: 'CURVE_CRV_ETH_POOL', values?: undefined): string;
  encodeFunctionData(functionFragment: 'CURVE_CVXCRV_CRV_POOL', values?: undefined): string;
  encodeFunctionData(functionFragment: 'CURVE_CVX_ETH_POOL', values?: undefined): string;
  encodeFunctionData(functionFragment: 'CVXCRV_CRV_INDEX', values?: undefined): string;
  encodeFunctionData(functionFragment: 'CVXCRV_CVXCRV_INDEX', values?: undefined): string;
  encodeFunctionData(functionFragment: 'CVXCRV_STAKING_CONTRACT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'CVXCRV_TOKEN', values?: undefined): string;
  encodeFunctionData(functionFragment: 'CVXETH_CVX_INDEX', values?: undefined): string;
  encodeFunctionData(functionFragment: 'CVXETH_ETH_INDEX', values?: undefined): string;
  encodeFunctionData(functionFragment: 'CVX_TOKEN', values?: undefined): string;
  encodeFunctionData(functionFragment: 'FEE_DENOMINATOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_CALL_INCENTIVE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_PLATFORM_FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_WITHDRAWAL_PENALTY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'balanceOfUnderlying', values: [string]): string;
  encodeFunctionData(functionFragment: 'callIncentive', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'deposit', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'depositAll', values: [string]): string;
  encodeFunctionData(functionFragment: 'harvest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'outstanding3CrvRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'outstandingCrvRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'outstandingCvxRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'platform', values?: undefined): string;
  encodeFunctionData(functionFragment: 'platformFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setApprovals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setCallIncentive', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setPlatform', values: [string]): string;
  encodeFunctionData(functionFragment: 'setPlatformFee', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setWithdrawalPenalty', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalUnderlying', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'underlying', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawAll', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'withdrawAllAs(address,uint8,uint256)',
    values: [string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'withdrawAllAs(address,uint8)', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'withdrawAs(address,uint256,uint8)',
    values: [string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawAs(address,uint256,uint8,uint256)',
    values: [string, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'withdrawalPenalty', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'CRVETH_CRV_INDEX', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'CRVETH_ETH_INDEX', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'CRV_TOKEN', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'CURVE_CRV_ETH_POOL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'CURVE_CVXCRV_CRV_POOL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'CURVE_CVX_ETH_POOL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'CVXCRV_CRV_INDEX', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'CVXCRV_CVXCRV_INDEX', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'CVXCRV_STAKING_CONTRACT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'CVXCRV_TOKEN', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'CVXETH_CVX_INDEX', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'CVXETH_ETH_INDEX', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'CVX_TOKEN', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'FEE_DENOMINATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_CALL_INCENTIVE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_PLATFORM_FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_WITHDRAWAL_PENALTY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfUnderlying', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'callIncentive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'outstanding3CrvRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'outstandingCrvRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'outstandingCvxRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'platform', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'platformFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCallIncentive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPlatform', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPlatformFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWithdrawalPenalty', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalUnderlying', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'underlying', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAllAs(address,uint8,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAllAs(address,uint8)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAs(address,uint256,uint8)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAs(address,uint256,uint8,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawalPenalty', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'CallerIncentiveUpdated(uint256)': EventFragment;
    'Deposit(address,address,uint256)': EventFragment;
    'Harvest(address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'PlatformFeeUpdated(uint256)': EventFragment;
    'PlatformUpdated(address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Withdraw(address,address,uint256)': EventFragment;
    'WithdrawalPenaltyUpdated(uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CallerIncentiveUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Harvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PlatformFeeUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PlatformUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawalPenaltyUpdated'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface CallerIncentiveUpdatedEventObject {
  _incentive: BigNumber;
}
export type CallerIncentiveUpdatedEvent = TypedEvent<[BigNumber], CallerIncentiveUpdatedEventObject>;

export type CallerIncentiveUpdatedEventFilter = TypedEventFilter<CallerIncentiveUpdatedEvent>;

export interface DepositEventObject {
  _from: string;
  _to: string;
  _value: BigNumber;
}
export type DepositEvent = TypedEvent<[string, string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface HarvestEventObject {
  _caller: string;
  _value: BigNumber;
}
export type HarvestEvent = TypedEvent<[string, BigNumber], HarvestEventObject>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PlatformFeeUpdatedEventObject {
  _fee: BigNumber;
}
export type PlatformFeeUpdatedEvent = TypedEvent<[BigNumber], PlatformFeeUpdatedEventObject>;

export type PlatformFeeUpdatedEventFilter = TypedEventFilter<PlatformFeeUpdatedEvent>;

export interface PlatformUpdatedEventObject {
  _platform: string;
}
export type PlatformUpdatedEvent = TypedEvent<[string], PlatformUpdatedEventObject>;

export type PlatformUpdatedEventFilter = TypedEventFilter<PlatformUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawEventObject {
  _from: string;
  _to: string;
  _value: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawalPenaltyUpdatedEventObject {
  _penalty: BigNumber;
}
export type WithdrawalPenaltyUpdatedEvent = TypedEvent<[BigNumber], WithdrawalPenaltyUpdatedEventObject>;

export type WithdrawalPenaltyUpdatedEventFilter = TypedEventFilter<WithdrawalPenaltyUpdatedEvent>;

export interface LlamaAirforceUnionVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LlamaAirforceUnionVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CRVETH_CRV_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    CRVETH_ETH_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    CRV_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    CURVE_CRV_ETH_POOL(overrides?: CallOverrides): Promise<[string]>;

    CURVE_CVXCRV_CRV_POOL(overrides?: CallOverrides): Promise<[string]>;

    CURVE_CVX_ETH_POOL(overrides?: CallOverrides): Promise<[string]>;

    CVXCRV_CRV_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    CVXCRV_CVXCRV_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    CVXCRV_STAKING_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    CVXCRV_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    CVXETH_CVX_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    CVXETH_ETH_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    CVX_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_CALL_INCENTIVE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PLATFORM_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_WITHDRAWAL_PENALTY(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfUnderlying(user: string, overrides?: CallOverrides): Promise<[BigNumber] & { amount: BigNumber }>;

    callIncentive(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deposit(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositAll(_to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    harvest(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    outstanding3CrvRewards(overrides?: CallOverrides): Promise<[BigNumber] & { total: BigNumber }>;

    outstandingCrvRewards(overrides?: CallOverrides): Promise<[BigNumber] & { total: BigNumber }>;

    outstandingCvxRewards(overrides?: CallOverrides): Promise<[BigNumber] & { total: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    platform(overrides?: CallOverrides): Promise<[string]>;

    platformFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setApprovals(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setCallIncentive(
      _incentive: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPlatform(
      _platform: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPlatformFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setWithdrawalPenalty(
      _penalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalUnderlying(overrides?: CallOverrides): Promise<[BigNumber] & { total: BigNumber }>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawAll(_to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'withdrawAllAs(address,uint8,uint256)'(
      _to: string,
      option: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'withdrawAllAs(address,uint8)'(
      _to: string,
      option: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'withdrawAs(address,uint256,uint8)'(
      _to: string,
      _shares: BigNumberish,
      option: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'withdrawAs(address,uint256,uint8,uint256)'(
      _to: string,
      _shares: BigNumberish,
      option: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawalPenalty(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  CRVETH_CRV_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  CRVETH_ETH_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  CRV_TOKEN(overrides?: CallOverrides): Promise<string>;

  CURVE_CRV_ETH_POOL(overrides?: CallOverrides): Promise<string>;

  CURVE_CVXCRV_CRV_POOL(overrides?: CallOverrides): Promise<string>;

  CURVE_CVX_ETH_POOL(overrides?: CallOverrides): Promise<string>;

  CVXCRV_CRV_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  CVXCRV_CVXCRV_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  CVXCRV_STAKING_CONTRACT(overrides?: CallOverrides): Promise<string>;

  CVXCRV_TOKEN(overrides?: CallOverrides): Promise<string>;

  CVXETH_CVX_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  CVXETH_ETH_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  CVX_TOKEN(overrides?: CallOverrides): Promise<string>;

  FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_CALL_INCENTIVE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PLATFORM_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_WITHDRAWAL_PENALTY(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfUnderlying(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  callIncentive(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  deposit(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositAll(_to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  harvest(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  outstanding3CrvRewards(overrides?: CallOverrides): Promise<BigNumber>;

  outstandingCrvRewards(overrides?: CallOverrides): Promise<BigNumber>;

  outstandingCvxRewards(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  platform(overrides?: CallOverrides): Promise<string>;

  platformFee(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setApprovals(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setCallIncentive(
    _incentive: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPlatform(
    _platform: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPlatformFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setWithdrawalPenalty(
    _penalty: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _to: string,
    _shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawAll(_to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'withdrawAllAs(address,uint8,uint256)'(
    _to: string,
    option: BigNumberish,
    minAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'withdrawAllAs(address,uint8)'(
    _to: string,
    option: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'withdrawAs(address,uint256,uint8)'(
    _to: string,
    _shares: BigNumberish,
    option: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'withdrawAs(address,uint256,uint8,uint256)'(
    _to: string,
    _shares: BigNumberish,
    option: BigNumberish,
    minAmountOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawalPenalty(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    CRVETH_CRV_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    CRVETH_ETH_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    CRV_TOKEN(overrides?: CallOverrides): Promise<string>;

    CURVE_CRV_ETH_POOL(overrides?: CallOverrides): Promise<string>;

    CURVE_CVXCRV_CRV_POOL(overrides?: CallOverrides): Promise<string>;

    CURVE_CVX_ETH_POOL(overrides?: CallOverrides): Promise<string>;

    CVXCRV_CRV_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    CVXCRV_CVXCRV_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    CVXCRV_STAKING_CONTRACT(overrides?: CallOverrides): Promise<string>;

    CVXCRV_TOKEN(overrides?: CallOverrides): Promise<string>;

    CVXETH_CVX_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    CVXETH_ETH_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    CVX_TOKEN(overrides?: CallOverrides): Promise<string>;

    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_CALL_INCENTIVE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PLATFORM_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAWAL_PENALTY(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfUnderlying(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    callIncentive(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    deposit(_to: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    depositAll(_to: string, overrides?: CallOverrides): Promise<BigNumber>;

    harvest(overrides?: CallOverrides): Promise<void>;

    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    outstanding3CrvRewards(overrides?: CallOverrides): Promise<BigNumber>;

    outstandingCrvRewards(overrides?: CallOverrides): Promise<BigNumber>;

    outstandingCvxRewards(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    platform(overrides?: CallOverrides): Promise<string>;

    platformFee(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setApprovals(overrides?: CallOverrides): Promise<void>;

    setCallIncentive(_incentive: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setPlatform(_platform: string, overrides?: CallOverrides): Promise<void>;

    setPlatformFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setWithdrawalPenalty(_penalty: BigNumberish, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(sender: string, recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    underlying(overrides?: CallOverrides): Promise<string>;

    withdraw(_to: string, _shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAll(_to: string, overrides?: CallOverrides): Promise<BigNumber>;

    'withdrawAllAs(address,uint8,uint256)'(
      _to: string,
      option: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'withdrawAllAs(address,uint8)'(_to: string, option: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'withdrawAs(address,uint256,uint8)'(
      _to: string,
      _shares: BigNumberish,
      option: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'withdrawAs(address,uint256,uint8,uint256)'(
      _to: string,
      _shares: BigNumberish,
      option: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawalPenalty(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;

    'CallerIncentiveUpdated(uint256)'(_incentive?: null): CallerIncentiveUpdatedEventFilter;
    CallerIncentiveUpdated(_incentive?: null): CallerIncentiveUpdatedEventFilter;

    'Deposit(address,address,uint256)'(_from?: string | null, _to?: string | null, _value?: null): DepositEventFilter;
    Deposit(_from?: string | null, _to?: string | null, _value?: null): DepositEventFilter;

    'Harvest(address,uint256)'(_caller?: string | null, _value?: null): HarvestEventFilter;
    Harvest(_caller?: string | null, _value?: null): HarvestEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    'PlatformFeeUpdated(uint256)'(_fee?: null): PlatformFeeUpdatedEventFilter;
    PlatformFeeUpdated(_fee?: null): PlatformFeeUpdatedEventFilter;

    'PlatformUpdated(address)'(_platform?: string | null): PlatformUpdatedEventFilter;
    PlatformUpdated(_platform?: string | null): PlatformUpdatedEventFilter;

    'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;

    'Withdraw(address,address,uint256)'(_from?: string | null, _to?: string | null, _value?: null): WithdrawEventFilter;
    Withdraw(_from?: string | null, _to?: string | null, _value?: null): WithdrawEventFilter;

    'WithdrawalPenaltyUpdated(uint256)'(_penalty?: null): WithdrawalPenaltyUpdatedEventFilter;
    WithdrawalPenaltyUpdated(_penalty?: null): WithdrawalPenaltyUpdatedEventFilter;
  };

  estimateGas: {
    CRVETH_CRV_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    CRVETH_ETH_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    CRV_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    CURVE_CRV_ETH_POOL(overrides?: CallOverrides): Promise<BigNumber>;

    CURVE_CVXCRV_CRV_POOL(overrides?: CallOverrides): Promise<BigNumber>;

    CURVE_CVX_ETH_POOL(overrides?: CallOverrides): Promise<BigNumber>;

    CVXCRV_CRV_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    CVXCRV_CVXCRV_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    CVXCRV_STAKING_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    CVXCRV_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    CVXETH_CVX_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    CVXETH_ETH_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    CVX_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_CALL_INCENTIVE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PLATFORM_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WITHDRAWAL_PENALTY(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfUnderlying(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    callIncentive(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    deposit(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    depositAll(_to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    harvest(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    outstanding3CrvRewards(overrides?: CallOverrides): Promise<BigNumber>;

    outstandingCrvRewards(overrides?: CallOverrides): Promise<BigNumber>;

    outstandingCvxRewards(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    platform(overrides?: CallOverrides): Promise<BigNumber>;

    platformFee(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setApprovals(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setCallIncentive(
      _incentive: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setPlatform(_platform: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setPlatformFee(_fee: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setWithdrawalPenalty(
      _penalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawAll(_to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'withdrawAllAs(address,uint8,uint256)'(
      _to: string,
      option: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'withdrawAllAs(address,uint8)'(
      _to: string,
      option: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'withdrawAs(address,uint256,uint8)'(
      _to: string,
      _shares: BigNumberish,
      option: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'withdrawAs(address,uint256,uint8,uint256)'(
      _to: string,
      _shares: BigNumberish,
      option: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawalPenalty(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CRVETH_CRV_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CRVETH_ETH_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CRV_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CURVE_CRV_ETH_POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CURVE_CVXCRV_CRV_POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CURVE_CVX_ETH_POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CVXCRV_CRV_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CVXCRV_CVXCRV_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CVXCRV_STAKING_CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CVXCRV_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CVXETH_CVX_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CVXETH_ETH_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CVX_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_CALL_INCENTIVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_PLATFORM_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_WITHDRAWAL_PENALTY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfUnderlying(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callIncentive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositAll(_to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    harvest(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    outstanding3CrvRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    outstandingCrvRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    outstandingCvxRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platform(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platformFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setApprovals(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setCallIncentive(
      _incentive: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPlatform(
      _platform: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPlatformFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setWithdrawalPenalty(
      _penalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalUnderlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _to: string,
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'withdrawAllAs(address,uint8,uint256)'(
      _to: string,
      option: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'withdrawAllAs(address,uint8)'(
      _to: string,
      option: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'withdrawAs(address,uint256,uint8)'(
      _to: string,
      _shares: BigNumberish,
      option: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'withdrawAs(address,uint256,uint8,uint256)'(
      _to: string,
      _shares: BigNumberish,
      option: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawalPenalty(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
