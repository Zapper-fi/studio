/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace XArgoPledging {
  export type RewardDataStruct = { token: string; amount: BigNumberish };

  export type RewardDataStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };
}

export interface XArgoPledgingInterface extends utils.Interface {
  functions: {
    'admin()': FunctionFragment;
    'implementation()': FunctionFragment;
    'upgradeTo(address)': FunctionFragment;
    'upgradeToAndCall(address,bytes)': FunctionFragment;
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    '__xArgoPledging_init(address,address)': FunctionFragment;
    '_balances(address)': FunctionFragment;
    'addReward(address,address)': FunctionFragment;
    'approveRewardDistributor(address,address,bool)': FunctionFragment;
    'bonusEndBlock()': FunctionFragment;
    'claimableRewards(address)': FunctionFragment;
    'emergencyWithdraw()': FunctionFragment;
    'getReward()': FunctionFragment;
    'getRewardForDuration(address)': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'getUserMaxMorale()': FunctionFragment;
    'getUserMorale()': FunctionFragment;
    'getUserxArgoPledged()': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'lastTimeRewardApplicable(address)': FunctionFragment;
    'modifyEmissions(uint256,uint256,uint256)': FunctionFragment;
    'notifyRewardAmount(address,uint256)': FunctionFragment;
    'paused()': FunctionFragment;
    'pendingReward(address)': FunctionFragment;
    'pledge(uint256)': FunctionFragment;
    'poolInfo()': FunctionFragment;
    'rateMRLE()': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'rewardData(address)': FunctionFragment;
    'rewardDistributors(address,address)': FunctionFragment;
    'rewardPerBlock()': FunctionFragment;
    'rewardPerToken(address)': FunctionFragment;
    'rewardTokens(uint256)': FunctionFragment;
    'rewards(address,address)': FunctionFragment;
    'rewardsDuration()': FunctionFragment;
    'setMORALERate(uint256)': FunctionFragment;
    'setMORALEStartTime(uint256)': FunctionFragment;
    'stakingToken()': FunctionFragment;
    'startBlock()': FunctionFragment;
    'startTimeMRLE()': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'totalxARGO()': FunctionFragment;
    'unpledge(uint256)': FunctionFragment;
    'updatePool()': FunctionFragment;
    'userInfo(address)': FunctionFragment;
    'userMRLE(address,uint256)': FunctionFragment;
    'userRewardPerTokenPaid(address,address)': FunctionFragment;
    'wCRO()': FunctionFragment;
    'xARGO()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'admin'
      | 'implementation'
      | 'upgradeTo'
      | 'upgradeToAndCall'
      | 'DEFAULT_ADMIN_ROLE'
      | '__xArgoPledging_init'
      | '_balances'
      | 'addReward'
      | 'approveRewardDistributor'
      | 'bonusEndBlock'
      | 'claimableRewards'
      | 'emergencyWithdraw'
      | 'getReward'
      | 'getRewardForDuration'
      | 'getRoleAdmin'
      | 'getUserMaxMorale'
      | 'getUserMorale'
      | 'getUserxArgoPledged'
      | 'grantRole'
      | 'hasRole'
      | 'lastTimeRewardApplicable'
      | 'modifyEmissions'
      | 'notifyRewardAmount'
      | 'paused'
      | 'pendingReward'
      | 'pledge'
      | 'poolInfo'
      | 'rateMRLE'
      | 'renounceRole'
      | 'revokeRole'
      | 'rewardData'
      | 'rewardDistributors'
      | 'rewardPerBlock'
      | 'rewardPerToken'
      | 'rewardTokens'
      | 'rewards'
      | 'rewardsDuration'
      | 'setMORALERate'
      | 'setMORALEStartTime'
      | 'stakingToken'
      | 'startBlock'
      | 'startTimeMRLE'
      | 'supportsInterface'
      | 'totalSupply'
      | 'totalxARGO'
      | 'unpledge'
      | 'updatePool'
      | 'userInfo'
      | 'userMRLE'
      | 'userRewardPerTokenPaid'
      | 'wCRO'
      | 'xARGO',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'implementation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'upgradeTo', values: [string]): string;
  encodeFunctionData(functionFragment: 'upgradeToAndCall', values: [string, BytesLike]): string;
  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: '__xArgoPledging_init', values: [string, string]): string;
  encodeFunctionData(functionFragment: '_balances', values: [string]): string;
  encodeFunctionData(functionFragment: 'addReward', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'approveRewardDistributor', values: [string, string, boolean]): string;
  encodeFunctionData(functionFragment: 'bonusEndBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimableRewards', values: [string]): string;
  encodeFunctionData(functionFragment: 'emergencyWithdraw', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRewardForDuration', values: [string]): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'getUserMaxMorale', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getUserMorale', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getUserxArgoPledged', values?: undefined): string;
  encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'lastTimeRewardApplicable', values: [string]): string;
  encodeFunctionData(functionFragment: 'modifyEmissions', values: [BigNumberish, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'notifyRewardAmount', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingReward', values: [string]): string;
  encodeFunctionData(functionFragment: 'pledge', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'poolInfo', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rateMRLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'rewardData', values: [string]): string;
  encodeFunctionData(functionFragment: 'rewardDistributors', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'rewardPerBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardPerToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'rewardTokens', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'rewards', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'rewardsDuration', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setMORALERate', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setMORALEStartTime', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'stakingToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'startBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'startTimeMRLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalxARGO', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unpledge', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updatePool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'userInfo', values: [string]): string;
  encodeFunctionData(functionFragment: 'userMRLE', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'userRewardPerTokenPaid', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'wCRO', values?: undefined): string;
  encodeFunctionData(functionFragment: 'xARGO', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'implementation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeToAndCall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '__xArgoPledging_init', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_balances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approveRewardDistributor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bonusEndBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimableRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardForDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserMaxMorale', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserMorale', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserxArgoPledged', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastTimeRewardApplicable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'modifyEmissions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'notifyRewardAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pledge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rateMRLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardDistributors', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardPerBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardPerToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMORALERate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMORALEStartTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakingToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startTimeMRLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalxARGO', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpledge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userMRLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userRewardPerTokenPaid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'wCRO', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xARGO', data: BytesLike): Result;

  events: {
    'Upgraded(address)': EventFragment;
    'Deposit(address,uint256)': EventFragment;
    'EmergencyWithdraw(address,uint256)': EventFragment;
    'Paused(address)': EventFragment;
    'RewardAdded(uint256)': EventFragment;
    'RewardPaid(address,address,uint256)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'Staked(address,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
    'Withdraw(address,uint256)': EventFragment;
    'Withdrawn(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardPaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Staked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdrawn'): EventFragment;
}

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface DepositEventObject {
  user: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EmergencyWithdrawEventObject {
  user: string;
  amount: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<[string, BigNumber], EmergencyWithdrawEventObject>;

export type EmergencyWithdrawEventFilter = TypedEventFilter<EmergencyWithdrawEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RewardAddedEventObject {
  reward: BigNumber;
}
export type RewardAddedEvent = TypedEvent<[BigNumber], RewardAddedEventObject>;

export type RewardAddedEventFilter = TypedEventFilter<RewardAddedEvent>;

export interface RewardPaidEventObject {
  user: string;
  rewardsToken: string;
  reward: BigNumber;
}
export type RewardPaidEvent = TypedEvent<[string, string, BigNumber], RewardPaidEventObject>;

export type RewardPaidEventFilter = TypedEventFilter<RewardPaidEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface StakedEventObject {
  user: string;
  amount: BigNumber;
}
export type StakedEvent = TypedEvent<[string, BigNumber], StakedEventObject>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawEventObject {
  user: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawnEventObject {
  user: string;
  amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<[string, BigNumber], WithdrawnEventObject>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface XArgoPledging extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: XArgoPledgingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    implementation(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    __xArgoPledging_init(
      _admin: string,
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    _balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    addReward(
      _rewardsToken: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    approveRewardDistributor(
      _rewardsToken: string,
      _distributor: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    bonusEndBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimableRewards(
      account: string,
      overrides?: CallOverrides,
    ): Promise<
      [XArgoPledging.RewardDataStructOutput[]] & {
        _rewards: XArgoPledging.RewardDataStructOutput[];
      }
    >;

    emergencyWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    getReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    getRewardForDuration(_rewardsToken: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getUserMaxMorale(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserMorale(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserxArgoPledged(overrides?: CallOverrides): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>;

    lastTimeRewardApplicable(_rewardsToken: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    modifyEmissions(
      _rewardPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    notifyRewardAmount(
      _rewardsToken: string,
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingReward(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    pledge(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    poolInfo(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        lastRewardBlock: BigNumber;
        accRewardPerShare: BigNumber;
      }
    >;

    rateMRLE(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    rewardData(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        periodFinish: BigNumber;
        rewardRate: BigNumber;
        lastUpdateTime: BigNumber;
        rewardPerTokenStored: BigNumber;
      }
    >;

    rewardDistributors(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[boolean]>;

    rewardPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPerToken(_rewardsToken: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    rewards(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    setMORALERate(
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMORALEStartTime(
      _startTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    startTimeMRLE(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalxARGO(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpledge(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updatePool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }>;

    userMRLE(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startTime: BigNumber;
        maxMRLE: BigNumber;
        amountxArgo: BigNumber;
      }
    >;

    userRewardPerTokenPaid(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    wCRO(overrides?: CallOverrides): Promise<[string]>;

    xARGO(overrides?: CallOverrides): Promise<[string]>;
  };

  admin(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  implementation(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  __xArgoPledging_init(
    _admin: string,
    _stakingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  _balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  addReward(
    _rewardsToken: string,
    _distributor: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  approveRewardDistributor(
    _rewardsToken: string,
    _distributor: string,
    _approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  bonusEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

  claimableRewards(account: string, overrides?: CallOverrides): Promise<XArgoPledging.RewardDataStructOutput[]>;

  emergencyWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  getReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  getRewardForDuration(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getUserMaxMorale(overrides?: CallOverrides): Promise<BigNumber>;

  getUserMorale(overrides?: CallOverrides): Promise<BigNumber>;

  getUserxArgoPledged(overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

  lastTimeRewardApplicable(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

  modifyEmissions(
    _rewardPerBlock: BigNumberish,
    _startBlock: BigNumberish,
    _endBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  notifyRewardAmount(
    _rewardsToken: string,
    reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingReward(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  pledge(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  poolInfo(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber] & {
      lastRewardBlock: BigNumber;
      accRewardPerShare: BigNumber;
    }
  >;

  rateMRLE(overrides?: CallOverrides): Promise<BigNumber>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  rewardData(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      periodFinish: BigNumber;
      rewardRate: BigNumber;
      lastUpdateTime: BigNumber;
      rewardPerTokenStored: BigNumber;
    }
  >;

  rewardDistributors(arg0: string, arg1: string, overrides?: CallOverrides): Promise<boolean>;

  rewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPerToken(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

  rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  rewards(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

  setMORALERate(
    _rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMORALEStartTime(
    _startTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  startTimeMRLE(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalxARGO(overrides?: CallOverrides): Promise<BigNumber>;

  unpledge(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updatePool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  userInfo(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }>;

  userMRLE(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      startTime: BigNumber;
      maxMRLE: BigNumber;
      amountxArgo: BigNumber;
    }
  >;

  userRewardPerTokenPaid(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  wCRO(overrides?: CallOverrides): Promise<string>;

  xARGO(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    implementation(overrides?: CallOverrides): Promise<string>;

    upgradeTo(newImplementation: string, overrides?: CallOverrides): Promise<void>;

    upgradeToAndCall(newImplementation: string, data: BytesLike, overrides?: CallOverrides): Promise<void>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    __xArgoPledging_init(_admin: string, _stakingToken: string, overrides?: CallOverrides): Promise<void>;

    _balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    addReward(_rewardsToken: string, _distributor: string, overrides?: CallOverrides): Promise<void>;

    approveRewardDistributor(
      _rewardsToken: string,
      _distributor: string,
      _approved: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    bonusEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    claimableRewards(account: string, overrides?: CallOverrides): Promise<XArgoPledging.RewardDataStructOutput[]>;

    emergencyWithdraw(overrides?: CallOverrides): Promise<void>;

    getReward(overrides?: CallOverrides): Promise<void>;

    getRewardForDuration(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getUserMaxMorale(overrides?: CallOverrides): Promise<BigNumber>;

    getUserMorale(overrides?: CallOverrides): Promise<BigNumber>;

    getUserxArgoPledged(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

    lastTimeRewardApplicable(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    modifyEmissions(
      _rewardPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    notifyRewardAmount(_rewardsToken: string, reward: BigNumberish, overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingReward(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    pledge(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    poolInfo(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        lastRewardBlock: BigNumber;
        accRewardPerShare: BigNumber;
      }
    >;

    rateMRLE(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    rewardData(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        periodFinish: BigNumber;
        rewardRate: BigNumber;
        lastUpdateTime: BigNumber;
        rewardPerTokenStored: BigNumber;
      }
    >;

    rewardDistributors(arg0: string, arg1: string, overrides?: CallOverrides): Promise<boolean>;

    rewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerToken(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    rewards(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    setMORALERate(_rate: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setMORALEStartTime(_startTime: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    startTimeMRLE(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalxARGO(overrides?: CallOverrides): Promise<BigNumber>;

    unpledge(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updatePool(overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }>;

    userMRLE(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startTime: BigNumber;
        maxMRLE: BigNumber;
        amountxArgo: BigNumber;
      }
    >;

    userRewardPerTokenPaid(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    wCRO(overrides?: CallOverrides): Promise<string>;

    xARGO(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'Upgraded(address)'(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    'Deposit(address,uint256)'(user?: string | null, amount?: null): DepositEventFilter;
    Deposit(user?: string | null, amount?: null): DepositEventFilter;

    'EmergencyWithdraw(address,uint256)'(user?: string | null, amount?: null): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(user?: string | null, amount?: null): EmergencyWithdrawEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'RewardAdded(uint256)'(reward?: null): RewardAddedEventFilter;
    RewardAdded(reward?: null): RewardAddedEventFilter;

    'RewardPaid(address,address,uint256)'(
      user?: string | null,
      rewardsToken?: string | null,
      reward?: null,
    ): RewardPaidEventFilter;
    RewardPaid(user?: string | null, rewardsToken?: string | null, reward?: null): RewardPaidEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter;
    RoleGranted(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleRevokedEventFilter;

    'Staked(address,uint256)'(user?: string | null, amount?: null): StakedEventFilter;
    Staked(user?: string | null, amount?: null): StakedEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'Withdraw(address,uint256)'(user?: string | null, amount?: null): WithdrawEventFilter;
    Withdraw(user?: string | null, amount?: null): WithdrawEventFilter;

    'Withdrawn(address,uint256)'(user?: string | null, amount?: null): WithdrawnEventFilter;
    Withdrawn(user?: string | null, amount?: null): WithdrawnEventFilter;
  };

  estimateGas: {
    admin(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    implementation(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    __xArgoPledging_init(
      _admin: string,
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    _balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    addReward(
      _rewardsToken: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    approveRewardDistributor(
      _rewardsToken: string,
      _distributor: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    bonusEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    claimableRewards(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    getReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    getRewardForDuration(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getUserMaxMorale(overrides?: CallOverrides): Promise<BigNumber>;

    getUserMorale(overrides?: CallOverrides): Promise<BigNumber>;

    getUserxArgoPledged(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastTimeRewardApplicable(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    modifyEmissions(
      _rewardPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    notifyRewardAmount(
      _rewardsToken: string,
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingReward(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    pledge(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    poolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    rateMRLE(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    rewardData(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardDistributors(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerToken(_rewardsToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rewards(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    setMORALERate(_rate: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setMORALEStartTime(
      _startTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    startTimeMRLE(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalxARGO(overrides?: CallOverrides): Promise<BigNumber>;

    unpledge(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updatePool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userMRLE(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    userRewardPerTokenPaid(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    wCRO(overrides?: CallOverrides): Promise<BigNumber>;

    xARGO(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    implementation(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __xArgoPledging_init(
      _admin: string,
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    _balances(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addReward(
      _rewardsToken: string,
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    approveRewardDistributor(
      _rewardsToken: string,
      _distributor: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    bonusEndBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimableRewards(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    getReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    getRewardForDuration(_rewardsToken: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserMaxMorale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserMorale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserxArgoPledged(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(_rewardsToken: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    modifyEmissions(
      _rewardPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    notifyRewardAmount(
      _rewardsToken: string,
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingReward(_user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pledge(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    poolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rateMRLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    rewardData(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardDistributors(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerToken(_rewardsToken: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewards(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMORALERate(
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMORALEStartTime(
      _startTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startTimeMRLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalxARGO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpledge(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updatePool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userMRLE(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userRewardPerTokenPaid(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wCRO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xARGO(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
