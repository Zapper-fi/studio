/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface SolaceCoverProductInterface extends utils.Interface {
  functions: {
    'acceptGovernance()': FunctionFragment;
    'accountBalanceOf(address)': FunctionFragment;
    'activatePolicy(address,uint256,uint256,bytes)': FunctionFragment;
    'activeCoverLimit()': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'availableCoverCapacity()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'baseURI()': FunctionFragment;
    'chargeCycle()': FunctionFragment;
    'chargePremiums(address[],uint256[])': FunctionFragment;
    'cooldownPeriod()': FunctionFragment;
    'cooldownStart(address)': FunctionFragment;
    'coverLimitOf(uint256)': FunctionFragment;
    'deactivatePolicy()': FunctionFragment;
    'deposit(address,uint256)': FunctionFragment;
    'getApproved(uint256)': FunctionFragment;
    'getReferrerFromReferralCode(bytes)': FunctionFragment;
    'governance()': FunctionFragment;
    'governanceIsLocked()': FunctionFragment;
    'isApprovedForAll(address,address)': FunctionFragment;
    'isReferralCodeUsed(address)': FunctionFragment;
    'isReferralCodeValid(bytes)': FunctionFragment;
    'isReferralOn()': FunctionFragment;
    'lockGovernance()': FunctionFragment;
    'maxCover()': FunctionFragment;
    'maxRateDenom()': FunctionFragment;
    'maxRateNum()': FunctionFragment;
    'minRequiredAccountBalance(uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'ownerOf(uint256)': FunctionFragment;
    'paused()': FunctionFragment;
    'pendingGovernance()': FunctionFragment;
    'policyCount()': FunctionFragment;
    'policyOf(address)': FunctionFragment;
    'policyStatus(uint256)': FunctionFragment;
    'premiumsPaidOf(address)': FunctionFragment;
    'referralReward()': FunctionFragment;
    'referralThreshold()': FunctionFragment;
    'registry()': FunctionFragment;
    'rewardPointsOf(address)': FunctionFragment;
    'riskManager()': FunctionFragment;
    'safeTransferFrom(address,address,uint256)': FunctionFragment;
    'safeTransferFrom(address,address,uint256,bytes)': FunctionFragment;
    'setApprovalForAll(address,bool)': FunctionFragment;
    'setBaseURI(string)': FunctionFragment;
    'setChargeCycle(uint256)': FunctionFragment;
    'setCooldownPeriod(uint256)': FunctionFragment;
    'setIsReferralOn(bool)': FunctionFragment;
    'setMaxRateDenom(uint256)': FunctionFragment;
    'setMaxRateNum(uint256)': FunctionFragment;
    'setPaused(bool)': FunctionFragment;
    'setPendingGovernance(address)': FunctionFragment;
    'setReferralReward(uint256)': FunctionFragment;
    'setReferralThreshold(uint256)': FunctionFragment;
    'setRegistry(address)': FunctionFragment;
    'setRewardPoints(address,uint256)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'symbol()': FunctionFragment;
    'tokenURI(uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'updateCoverLimit(uint256,bytes)': FunctionFragment;
    'withdraw()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptGovernance'
      | 'accountBalanceOf'
      | 'activatePolicy'
      | 'activeCoverLimit'
      | 'approve'
      | 'availableCoverCapacity'
      | 'balanceOf'
      | 'baseURI'
      | 'chargeCycle'
      | 'chargePremiums'
      | 'cooldownPeriod'
      | 'cooldownStart'
      | 'coverLimitOf'
      | 'deactivatePolicy'
      | 'deposit'
      | 'getApproved'
      | 'getReferrerFromReferralCode'
      | 'governance'
      | 'governanceIsLocked'
      | 'isApprovedForAll'
      | 'isReferralCodeUsed'
      | 'isReferralCodeValid'
      | 'isReferralOn'
      | 'lockGovernance'
      | 'maxCover'
      | 'maxRateDenom'
      | 'maxRateNum'
      | 'minRequiredAccountBalance'
      | 'name'
      | 'ownerOf'
      | 'paused'
      | 'pendingGovernance'
      | 'policyCount'
      | 'policyOf'
      | 'policyStatus'
      | 'premiumsPaidOf'
      | 'referralReward'
      | 'referralThreshold'
      | 'registry'
      | 'rewardPointsOf'
      | 'riskManager'
      | 'safeTransferFrom(address,address,uint256)'
      | 'safeTransferFrom(address,address,uint256,bytes)'
      | 'setApprovalForAll'
      | 'setBaseURI'
      | 'setChargeCycle'
      | 'setCooldownPeriod'
      | 'setIsReferralOn'
      | 'setMaxRateDenom'
      | 'setMaxRateNum'
      | 'setPaused'
      | 'setPendingGovernance'
      | 'setReferralReward'
      | 'setReferralThreshold'
      | 'setRegistry'
      | 'setRewardPoints'
      | 'supportsInterface'
      | 'symbol'
      | 'tokenURI'
      | 'transferFrom'
      | 'updateCoverLimit'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'acceptGovernance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accountBalanceOf', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'activatePolicy',
    values: [string, BigNumberish, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'activeCoverLimit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'availableCoverCapacity', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'baseURI', values?: undefined): string;
  encodeFunctionData(functionFragment: 'chargeCycle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'chargePremiums', values: [string[], BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'cooldownPeriod', values?: undefined): string;
  encodeFunctionData(functionFragment: 'cooldownStart', values: [string]): string;
  encodeFunctionData(functionFragment: 'coverLimitOf', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'deactivatePolicy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getApproved', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getReferrerFromReferralCode', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'governance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'governanceIsLocked', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isApprovedForAll', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'isReferralCodeUsed', values: [string]): string;
  encodeFunctionData(functionFragment: 'isReferralCodeValid', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'isReferralOn', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lockGovernance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxCover', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxRateDenom', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxRateNum', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minRequiredAccountBalance', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ownerOf', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingGovernance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'policyCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'policyOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'policyStatus', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'premiumsPaidOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'referralReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'referralThreshold', values?: undefined): string;
  encodeFunctionData(functionFragment: 'registry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardPointsOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'riskManager', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    values: [string, string, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'setApprovalForAll', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'setBaseURI', values: [string]): string;
  encodeFunctionData(functionFragment: 'setChargeCycle', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setCooldownPeriod', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setIsReferralOn', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'setMaxRateDenom', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setMaxRateNum', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setPaused', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'setPendingGovernance', values: [string]): string;
  encodeFunctionData(functionFragment: 'setReferralReward', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setReferralThreshold', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setRegistry', values: [string]): string;
  encodeFunctionData(functionFragment: 'setRewardPoints', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenURI', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateCoverLimit', values: [BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'acceptGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountBalanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activatePolicy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activeCoverLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'availableCoverCapacity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'baseURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'chargeCycle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'chargePremiums', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cooldownPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cooldownStart', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'coverLimitOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deactivatePolicy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReferrerFromReferralCode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governanceIsLocked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isReferralCodeUsed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isReferralCodeValid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isReferralOn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxCover', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRateDenom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRateNum', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minRequiredAccountBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'policyCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'policyOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'policyStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'premiumsPaidOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'referralReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'referralThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardPointsOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'riskManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBaseURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setChargeCycle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCooldownPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setIsReferralOn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxRateDenom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxRateNum', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPendingGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setReferralReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setReferralThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewardPoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateCoverLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'ApprovalForAll(address,address,bool)': EventFragment;
    'BaseURISet(string)': EventFragment;
    'ChargeCycleSet(uint256)': EventFragment;
    'CooldownPeriodSet(uint256)': EventFragment;
    'CooldownStarted(address,uint256)': EventFragment;
    'CooldownStopped(address)': EventFragment;
    'DepositMade(address,address,uint256)': EventFragment;
    'GovernanceLocked()': EventFragment;
    'GovernancePending(address)': EventFragment;
    'GovernanceTransferred(address,address)': EventFragment;
    'IsReferralOnSet(bool)': EventFragment;
    'MaxRateDenomSet(uint256)': EventFragment;
    'MaxRateNumSet(uint256)': EventFragment;
    'PauseSet(bool)': EventFragment;
    'PolicyCreated(uint256)': EventFragment;
    'PolicyDeactivated(uint256)': EventFragment;
    'PolicyManagerUpdated(uint256)': EventFragment;
    'PolicyUpdated(uint256)': EventFragment;
    'PremiumCharged(address,uint256)': EventFragment;
    'PremiumPartiallyCharged(address,uint256,uint256)': EventFragment;
    'ReferralRewardSet(uint256)': EventFragment;
    'ReferralRewardsEarned(address,uint256)': EventFragment;
    'ReferralThresholdSet(uint256)': EventFragment;
    'RegistrySet(address)': EventFragment;
    'RewardPointsSet(address,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'WithdrawMade(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BaseURISet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ChargeCycleSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CooldownPeriodSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CooldownStarted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CooldownStopped'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositMade'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GovernanceLocked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GovernancePending'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GovernanceTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'IsReferralOnSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxRateDenomSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxRateNumSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PauseSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PolicyCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PolicyDeactivated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PolicyManagerUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PolicyUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PremiumCharged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PremiumPartiallyCharged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReferralRewardSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReferralRewardsEarned'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReferralThresholdSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RegistrySet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardPointsSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawMade'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<[string, string, boolean], ApprovalForAllEventObject>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BaseURISetEventObject {
  baseURI: string;
}
export type BaseURISetEvent = TypedEvent<[string], BaseURISetEventObject>;

export type BaseURISetEventFilter = TypedEventFilter<BaseURISetEvent>;

export interface ChargeCycleSetEventObject {
  chargeCycle: BigNumber;
}
export type ChargeCycleSetEvent = TypedEvent<[BigNumber], ChargeCycleSetEventObject>;

export type ChargeCycleSetEventFilter = TypedEventFilter<ChargeCycleSetEvent>;

export interface CooldownPeriodSetEventObject {
  cooldownPeriod: BigNumber;
}
export type CooldownPeriodSetEvent = TypedEvent<[BigNumber], CooldownPeriodSetEventObject>;

export type CooldownPeriodSetEventFilter = TypedEventFilter<CooldownPeriodSetEvent>;

export interface CooldownStartedEventObject {
  policyholder: string;
  startTime: BigNumber;
}
export type CooldownStartedEvent = TypedEvent<[string, BigNumber], CooldownStartedEventObject>;

export type CooldownStartedEventFilter = TypedEventFilter<CooldownStartedEvent>;

export interface CooldownStoppedEventObject {
  policyholder: string;
}
export type CooldownStoppedEvent = TypedEvent<[string], CooldownStoppedEventObject>;

export type CooldownStoppedEventFilter = TypedEventFilter<CooldownStoppedEvent>;

export interface DepositMadeEventObject {
  from: string;
  policyholder: string;
  amount: BigNumber;
}
export type DepositMadeEvent = TypedEvent<[string, string, BigNumber], DepositMadeEventObject>;

export type DepositMadeEventFilter = TypedEventFilter<DepositMadeEvent>;

export interface GovernanceLockedEventObject {}
export type GovernanceLockedEvent = TypedEvent<[], GovernanceLockedEventObject>;

export type GovernanceLockedEventFilter = TypedEventFilter<GovernanceLockedEvent>;

export interface GovernancePendingEventObject {
  pendingGovernance: string;
}
export type GovernancePendingEvent = TypedEvent<[string], GovernancePendingEventObject>;

export type GovernancePendingEventFilter = TypedEventFilter<GovernancePendingEvent>;

export interface GovernanceTransferredEventObject {
  oldGovernance: string;
  newGovernance: string;
}
export type GovernanceTransferredEvent = TypedEvent<[string, string], GovernanceTransferredEventObject>;

export type GovernanceTransferredEventFilter = TypedEventFilter<GovernanceTransferredEvent>;

export interface IsReferralOnSetEventObject {
  isReferralOn: boolean;
}
export type IsReferralOnSetEvent = TypedEvent<[boolean], IsReferralOnSetEventObject>;

export type IsReferralOnSetEventFilter = TypedEventFilter<IsReferralOnSetEvent>;

export interface MaxRateDenomSetEventObject {
  maxRateDenom: BigNumber;
}
export type MaxRateDenomSetEvent = TypedEvent<[BigNumber], MaxRateDenomSetEventObject>;

export type MaxRateDenomSetEventFilter = TypedEventFilter<MaxRateDenomSetEvent>;

export interface MaxRateNumSetEventObject {
  maxRateNum: BigNumber;
}
export type MaxRateNumSetEvent = TypedEvent<[BigNumber], MaxRateNumSetEventObject>;

export type MaxRateNumSetEventFilter = TypedEventFilter<MaxRateNumSetEvent>;

export interface PauseSetEventObject {
  pause: boolean;
}
export type PauseSetEvent = TypedEvent<[boolean], PauseSetEventObject>;

export type PauseSetEventFilter = TypedEventFilter<PauseSetEvent>;

export interface PolicyCreatedEventObject {
  policyID: BigNumber;
}
export type PolicyCreatedEvent = TypedEvent<[BigNumber], PolicyCreatedEventObject>;

export type PolicyCreatedEventFilter = TypedEventFilter<PolicyCreatedEvent>;

export interface PolicyDeactivatedEventObject {
  policyID: BigNumber;
}
export type PolicyDeactivatedEvent = TypedEvent<[BigNumber], PolicyDeactivatedEventObject>;

export type PolicyDeactivatedEventFilter = TypedEventFilter<PolicyDeactivatedEvent>;

export interface PolicyManagerUpdatedEventObject {
  activeCoverLimit: BigNumber;
}
export type PolicyManagerUpdatedEvent = TypedEvent<[BigNumber], PolicyManagerUpdatedEventObject>;

export type PolicyManagerUpdatedEventFilter = TypedEventFilter<PolicyManagerUpdatedEvent>;

export interface PolicyUpdatedEventObject {
  policyID: BigNumber;
}
export type PolicyUpdatedEvent = TypedEvent<[BigNumber], PolicyUpdatedEventObject>;

export type PolicyUpdatedEventFilter = TypedEventFilter<PolicyUpdatedEvent>;

export interface PremiumChargedEventObject {
  policyholder: string;
  amount: BigNumber;
}
export type PremiumChargedEvent = TypedEvent<[string, BigNumber], PremiumChargedEventObject>;

export type PremiumChargedEventFilter = TypedEventFilter<PremiumChargedEvent>;

export interface PremiumPartiallyChargedEventObject {
  policyholder: string;
  actualPremium: BigNumber;
  chargedPremium: BigNumber;
}
export type PremiumPartiallyChargedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PremiumPartiallyChargedEventObject
>;

export type PremiumPartiallyChargedEventFilter = TypedEventFilter<PremiumPartiallyChargedEvent>;

export interface ReferralRewardSetEventObject {
  referralReward: BigNumber;
}
export type ReferralRewardSetEvent = TypedEvent<[BigNumber], ReferralRewardSetEventObject>;

export type ReferralRewardSetEventFilter = TypedEventFilter<ReferralRewardSetEvent>;

export interface ReferralRewardsEarnedEventObject {
  rewardEarner: string;
  rewardPointsEarned: BigNumber;
}
export type ReferralRewardsEarnedEvent = TypedEvent<[string, BigNumber], ReferralRewardsEarnedEventObject>;

export type ReferralRewardsEarnedEventFilter = TypedEventFilter<ReferralRewardsEarnedEvent>;

export interface ReferralThresholdSetEventObject {
  referralThreshold: BigNumber;
}
export type ReferralThresholdSetEvent = TypedEvent<[BigNumber], ReferralThresholdSetEventObject>;

export type ReferralThresholdSetEventFilter = TypedEventFilter<ReferralThresholdSetEvent>;

export interface RegistrySetEventObject {
  registry: string;
}
export type RegistrySetEvent = TypedEvent<[string], RegistrySetEventObject>;

export type RegistrySetEventFilter = TypedEventFilter<RegistrySetEvent>;

export interface RewardPointsSetEventObject {
  policyholder: string;
  amountGifted: BigNumber;
}
export type RewardPointsSetEvent = TypedEvent<[string, BigNumber], RewardPointsSetEventObject>;

export type RewardPointsSetEventFilter = TypedEventFilter<RewardPointsSetEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawMadeEventObject {
  policyholder: string;
  amount: BigNumber;
}
export type WithdrawMadeEvent = TypedEvent<[string, BigNumber], WithdrawMadeEventObject>;

export type WithdrawMadeEventFilter = TypedEventFilter<WithdrawMadeEvent>;

export interface SolaceCoverProduct extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SolaceCoverProductInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    accountBalanceOf(policyholder: string, overrides?: CallOverrides): Promise<[BigNumber] & { balance: BigNumber }>;

    activatePolicy(
      policyholder_: string,
      coverLimit_: BigNumberish,
      amount_: BigNumberish,
      referralCode_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    activeCoverLimit(overrides?: CallOverrides): Promise<[BigNumber] & { amount: BigNumber }>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    availableCoverCapacity(overrides?: CallOverrides): Promise<[BigNumber] & { availableCoverCapacity_: BigNumber }>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    chargeCycle(overrides?: CallOverrides): Promise<[BigNumber] & { chargeCycle_: BigNumber }>;

    chargePremiums(
      holders: string[],
      premiums: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    cooldownPeriod(overrides?: CallOverrides): Promise<[BigNumber] & { cooldownPeriod_: BigNumber }>;

    cooldownStart(
      policyholder_: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { cooldownStart_: BigNumber }>;

    coverLimitOf(policyID_: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { amount: BigNumber }>;

    deactivatePolicy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    deposit(
      policyholder: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getReferrerFromReferralCode(
      referralCode: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string] & { referrer: string }>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    governanceIsLocked(overrides?: CallOverrides): Promise<[boolean]>;

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<[boolean]>;

    isReferralCodeUsed(
      policyholder: string,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { isReferralCodeUsed_: boolean }>;

    isReferralCodeValid(referralCode: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    isReferralOn(overrides?: CallOverrides): Promise<[boolean] & { isReferralOn_: boolean }>;

    lockGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    maxCover(overrides?: CallOverrides): Promise<[BigNumber] & { cover: BigNumber }>;

    maxRateDenom(overrides?: CallOverrides): Promise<[BigNumber] & { maxRateDenom_: BigNumber }>;

    maxRateNum(overrides?: CallOverrides): Promise<[BigNumber] & { maxRateNum_: BigNumber }>;

    minRequiredAccountBalance(
      coverLimit: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { minRequiredAccountBalance_: BigNumber }>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean] & { status: boolean }>;

    pendingGovernance(overrides?: CallOverrides): Promise<[string]>;

    policyCount(overrides?: CallOverrides): Promise<[BigNumber] & { count: BigNumber }>;

    policyOf(policyholder_: string, overrides?: CallOverrides): Promise<[BigNumber] & { policyID: BigNumber }>;

    policyStatus(policyID_: BigNumberish, overrides?: CallOverrides): Promise<[boolean] & { status: boolean }>;

    premiumsPaidOf(
      policyholder_: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { premiumsPaid_: BigNumber }>;

    referralReward(overrides?: CallOverrides): Promise<[BigNumber] & { referralReward_: BigNumber }>;

    referralThreshold(overrides?: CallOverrides): Promise<[BigNumber] & { referralThreshold_: BigNumber }>;

    registry(overrides?: CallOverrides): Promise<[string] & { registry_: string }>;

    rewardPointsOf(
      policyholder_: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { rewardPoints_: BigNumber }>;

    riskManager(overrides?: CallOverrides): Promise<[string] & { riskManager_: string }>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setBaseURI(
      baseURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setChargeCycle(
      chargeCycle_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setCooldownPeriod(
      cooldownPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setIsReferralOn(
      isReferralOn_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMaxRateDenom(
      maxRateDenom_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMaxRateNum(
      maxRateNum_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPaused(
      paused_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPendingGovernance(
      pendingGovernance_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setReferralReward(
      referralReward_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setReferralThreshold(
      referralThreshhold_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRegistry(
      registry_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRewardPoints(
      policyholder_: string,
      rewardPoints_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(policyID: BigNumberish, overrides?: CallOverrides): Promise<[string] & { tokenURI_: string }>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateCoverLimit(
      newCoverLimit_: BigNumberish,
      referralCode_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;
  };

  acceptGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  accountBalanceOf(policyholder: string, overrides?: CallOverrides): Promise<BigNumber>;

  activatePolicy(
    policyholder_: string,
    coverLimit_: BigNumberish,
    amount_: BigNumberish,
    referralCode_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  activeCoverLimit(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  availableCoverCapacity(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  chargeCycle(overrides?: CallOverrides): Promise<BigNumber>;

  chargePremiums(
    holders: string[],
    premiums: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  cooldownPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  cooldownStart(policyholder_: string, overrides?: CallOverrides): Promise<BigNumber>;

  coverLimitOf(policyID_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  deactivatePolicy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  deposit(
    policyholder: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getReferrerFromReferralCode(referralCode: BytesLike, overrides?: CallOverrides): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  governanceIsLocked(overrides?: CallOverrides): Promise<boolean>;

  isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

  isReferralCodeUsed(policyholder: string, overrides?: CallOverrides): Promise<boolean>;

  isReferralCodeValid(referralCode: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  isReferralOn(overrides?: CallOverrides): Promise<boolean>;

  lockGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  maxCover(overrides?: CallOverrides): Promise<BigNumber>;

  maxRateDenom(overrides?: CallOverrides): Promise<BigNumber>;

  maxRateNum(overrides?: CallOverrides): Promise<BigNumber>;

  minRequiredAccountBalance(coverLimit: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingGovernance(overrides?: CallOverrides): Promise<string>;

  policyCount(overrides?: CallOverrides): Promise<BigNumber>;

  policyOf(policyholder_: string, overrides?: CallOverrides): Promise<BigNumber>;

  policyStatus(policyID_: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  premiumsPaidOf(policyholder_: string, overrides?: CallOverrides): Promise<BigNumber>;

  referralReward(overrides?: CallOverrides): Promise<BigNumber>;

  referralThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  registry(overrides?: CallOverrides): Promise<string>;

  rewardPointsOf(policyholder_: string, overrides?: CallOverrides): Promise<BigNumber>;

  riskManager(overrides?: CallOverrides): Promise<string>;

  'safeTransferFrom(address,address,uint256)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'safeTransferFrom(address,address,uint256,bytes)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setBaseURI(
    baseURI_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setChargeCycle(
    chargeCycle_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setCooldownPeriod(
    cooldownPeriod_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setIsReferralOn(
    isReferralOn_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMaxRateDenom(
    maxRateDenom_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMaxRateNum(
    maxRateNum_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPaused(
    paused_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPendingGovernance(
    pendingGovernance_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setReferralReward(
    referralReward_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setReferralThreshold(
    referralThreshhold_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRegistry(
    registry_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRewardPoints(
    policyholder_: string,
    rewardPoints_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(policyID: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateCoverLimit(
    newCoverLimit_: BigNumberish,
    referralCode_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  callStatic: {
    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    accountBalanceOf(policyholder: string, overrides?: CallOverrides): Promise<BigNumber>;

    activatePolicy(
      policyholder_: string,
      coverLimit_: BigNumberish,
      amount_: BigNumberish,
      referralCode_: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    activeCoverLimit(overrides?: CallOverrides): Promise<BigNumber>;

    approve(to: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    availableCoverCapacity(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    chargeCycle(overrides?: CallOverrides): Promise<BigNumber>;

    chargePremiums(holders: string[], premiums: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    cooldownPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    cooldownStart(policyholder_: string, overrides?: CallOverrides): Promise<BigNumber>;

    coverLimitOf(policyID_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    deactivatePolicy(overrides?: CallOverrides): Promise<void>;

    deposit(policyholder: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getReferrerFromReferralCode(referralCode: BytesLike, overrides?: CallOverrides): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    governanceIsLocked(overrides?: CallOverrides): Promise<boolean>;

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

    isReferralCodeUsed(policyholder: string, overrides?: CallOverrides): Promise<boolean>;

    isReferralCodeValid(referralCode: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    isReferralOn(overrides?: CallOverrides): Promise<boolean>;

    lockGovernance(overrides?: CallOverrides): Promise<void>;

    maxCover(overrides?: CallOverrides): Promise<BigNumber>;

    maxRateDenom(overrides?: CallOverrides): Promise<BigNumber>;

    maxRateNum(overrides?: CallOverrides): Promise<BigNumber>;

    minRequiredAccountBalance(coverLimit: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingGovernance(overrides?: CallOverrides): Promise<string>;

    policyCount(overrides?: CallOverrides): Promise<BigNumber>;

    policyOf(policyholder_: string, overrides?: CallOverrides): Promise<BigNumber>;

    policyStatus(policyID_: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    premiumsPaidOf(policyholder_: string, overrides?: CallOverrides): Promise<BigNumber>;

    referralReward(overrides?: CallOverrides): Promise<BigNumber>;

    referralThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<string>;

    rewardPointsOf(policyholder_: string, overrides?: CallOverrides): Promise<BigNumber>;

    riskManager(overrides?: CallOverrides): Promise<string>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    setApprovalForAll(operator: string, approved: boolean, overrides?: CallOverrides): Promise<void>;

    setBaseURI(baseURI_: string, overrides?: CallOverrides): Promise<void>;

    setChargeCycle(chargeCycle_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setCooldownPeriod(cooldownPeriod_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setIsReferralOn(isReferralOn_: boolean, overrides?: CallOverrides): Promise<void>;

    setMaxRateDenom(maxRateDenom_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setMaxRateNum(maxRateNum_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setPaused(paused_: boolean, overrides?: CallOverrides): Promise<void>;

    setPendingGovernance(pendingGovernance_: string, overrides?: CallOverrides): Promise<void>;

    setReferralReward(referralReward_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setReferralThreshold(referralThreshhold_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setRegistry(registry_: string, overrides?: CallOverrides): Promise<void>;

    setRewardPoints(policyholder_: string, rewardPoints_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(policyID: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferFrom(from: string, to: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateCoverLimit(newCoverLimit_: BigNumberish, referralCode_: BytesLike, overrides?: CallOverrides): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, approved?: string | null, tokenId?: BigNumberish | null): ApprovalEventFilter;

    'ApprovalForAll(address,address,bool)'(
      owner?: string | null,
      operator?: string | null,
      approved?: null,
    ): ApprovalForAllEventFilter;
    ApprovalForAll(owner?: string | null, operator?: string | null, approved?: null): ApprovalForAllEventFilter;

    'BaseURISet(string)'(baseURI?: null): BaseURISetEventFilter;
    BaseURISet(baseURI?: null): BaseURISetEventFilter;

    'ChargeCycleSet(uint256)'(chargeCycle?: null): ChargeCycleSetEventFilter;
    ChargeCycleSet(chargeCycle?: null): ChargeCycleSetEventFilter;

    'CooldownPeriodSet(uint256)'(cooldownPeriod?: null): CooldownPeriodSetEventFilter;
    CooldownPeriodSet(cooldownPeriod?: null): CooldownPeriodSetEventFilter;

    'CooldownStarted(address,uint256)'(policyholder?: null, startTime?: null): CooldownStartedEventFilter;
    CooldownStarted(policyholder?: null, startTime?: null): CooldownStartedEventFilter;

    'CooldownStopped(address)'(policyholder?: null): CooldownStoppedEventFilter;
    CooldownStopped(policyholder?: null): CooldownStoppedEventFilter;

    'DepositMade(address,address,uint256)'(from?: null, policyholder?: null, amount?: null): DepositMadeEventFilter;
    DepositMade(from?: null, policyholder?: null, amount?: null): DepositMadeEventFilter;

    'GovernanceLocked()'(): GovernanceLockedEventFilter;
    GovernanceLocked(): GovernanceLockedEventFilter;

    'GovernancePending(address)'(pendingGovernance?: null): GovernancePendingEventFilter;
    GovernancePending(pendingGovernance?: null): GovernancePendingEventFilter;

    'GovernanceTransferred(address,address)'(
      oldGovernance?: null,
      newGovernance?: null,
    ): GovernanceTransferredEventFilter;
    GovernanceTransferred(oldGovernance?: null, newGovernance?: null): GovernanceTransferredEventFilter;

    'IsReferralOnSet(bool)'(isReferralOn?: null): IsReferralOnSetEventFilter;
    IsReferralOnSet(isReferralOn?: null): IsReferralOnSetEventFilter;

    'MaxRateDenomSet(uint256)'(maxRateDenom?: null): MaxRateDenomSetEventFilter;
    MaxRateDenomSet(maxRateDenom?: null): MaxRateDenomSetEventFilter;

    'MaxRateNumSet(uint256)'(maxRateNum?: null): MaxRateNumSetEventFilter;
    MaxRateNumSet(maxRateNum?: null): MaxRateNumSetEventFilter;

    'PauseSet(bool)'(pause?: null): PauseSetEventFilter;
    PauseSet(pause?: null): PauseSetEventFilter;

    'PolicyCreated(uint256)'(policyID?: null): PolicyCreatedEventFilter;
    PolicyCreated(policyID?: null): PolicyCreatedEventFilter;

    'PolicyDeactivated(uint256)'(policyID?: null): PolicyDeactivatedEventFilter;
    PolicyDeactivated(policyID?: null): PolicyDeactivatedEventFilter;

    'PolicyManagerUpdated(uint256)'(activeCoverLimit?: null): PolicyManagerUpdatedEventFilter;
    PolicyManagerUpdated(activeCoverLimit?: null): PolicyManagerUpdatedEventFilter;

    'PolicyUpdated(uint256)'(policyID?: null): PolicyUpdatedEventFilter;
    PolicyUpdated(policyID?: null): PolicyUpdatedEventFilter;

    'PremiumCharged(address,uint256)'(policyholder?: null, amount?: null): PremiumChargedEventFilter;
    PremiumCharged(policyholder?: null, amount?: null): PremiumChargedEventFilter;

    'PremiumPartiallyCharged(address,uint256,uint256)'(
      policyholder?: null,
      actualPremium?: null,
      chargedPremium?: null,
    ): PremiumPartiallyChargedEventFilter;
    PremiumPartiallyCharged(
      policyholder?: null,
      actualPremium?: null,
      chargedPremium?: null,
    ): PremiumPartiallyChargedEventFilter;

    'ReferralRewardSet(uint256)'(referralReward?: null): ReferralRewardSetEventFilter;
    ReferralRewardSet(referralReward?: null): ReferralRewardSetEventFilter;

    'ReferralRewardsEarned(address,uint256)'(
      rewardEarner?: null,
      rewardPointsEarned?: null,
    ): ReferralRewardsEarnedEventFilter;
    ReferralRewardsEarned(rewardEarner?: null, rewardPointsEarned?: null): ReferralRewardsEarnedEventFilter;

    'ReferralThresholdSet(uint256)'(referralThreshold?: null): ReferralThresholdSetEventFilter;
    ReferralThresholdSet(referralThreshold?: null): ReferralThresholdSetEventFilter;

    'RegistrySet(address)'(registry?: null): RegistrySetEventFilter;
    RegistrySet(registry?: null): RegistrySetEventFilter;

    'RewardPointsSet(address,uint256)'(policyholder?: null, amountGifted?: null): RewardPointsSetEventFilter;
    RewardPointsSet(policyholder?: null, amountGifted?: null): RewardPointsSetEventFilter;

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null,
    ): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, tokenId?: BigNumberish | null): TransferEventFilter;

    'WithdrawMade(address,uint256)'(policyholder?: null, amount?: null): WithdrawMadeEventFilter;
    WithdrawMade(policyholder?: null, amount?: null): WithdrawMadeEventFilter;
  };

  estimateGas: {
    acceptGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    accountBalanceOf(policyholder: string, overrides?: CallOverrides): Promise<BigNumber>;

    activatePolicy(
      policyholder_: string,
      coverLimit_: BigNumberish,
      amount_: BigNumberish,
      referralCode_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    activeCoverLimit(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    availableCoverCapacity(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    chargeCycle(overrides?: CallOverrides): Promise<BigNumber>;

    chargePremiums(
      holders: string[],
      premiums: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    cooldownPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    cooldownStart(policyholder_: string, overrides?: CallOverrides): Promise<BigNumber>;

    coverLimitOf(policyID_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    deactivatePolicy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    deposit(
      policyholder: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getReferrerFromReferralCode(referralCode: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    governanceIsLocked(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<BigNumber>;

    isReferralCodeUsed(policyholder: string, overrides?: CallOverrides): Promise<BigNumber>;

    isReferralCodeValid(referralCode: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    isReferralOn(overrides?: CallOverrides): Promise<BigNumber>;

    lockGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    maxCover(overrides?: CallOverrides): Promise<BigNumber>;

    maxRateDenom(overrides?: CallOverrides): Promise<BigNumber>;

    maxRateNum(overrides?: CallOverrides): Promise<BigNumber>;

    minRequiredAccountBalance(coverLimit: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    policyCount(overrides?: CallOverrides): Promise<BigNumber>;

    policyOf(policyholder_: string, overrides?: CallOverrides): Promise<BigNumber>;

    policyStatus(policyID_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    premiumsPaidOf(policyholder_: string, overrides?: CallOverrides): Promise<BigNumber>;

    referralReward(overrides?: CallOverrides): Promise<BigNumber>;

    referralThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPointsOf(policyholder_: string, overrides?: CallOverrides): Promise<BigNumber>;

    riskManager(overrides?: CallOverrides): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setBaseURI(baseURI_: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setChargeCycle(
      chargeCycle_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setCooldownPeriod(
      cooldownPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setIsReferralOn(
      isReferralOn_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMaxRateDenom(
      maxRateDenom_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMaxRateNum(
      maxRateNum_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setPaused(paused_: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setPendingGovernance(
      pendingGovernance_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setReferralReward(
      referralReward_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setReferralThreshold(
      referralThreshhold_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setRegistry(registry_: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setRewardPoints(
      policyholder_: string,
      rewardPoints_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(policyID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateCoverLimit(
      newCoverLimit_: BigNumberish,
      referralCode_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    accountBalanceOf(policyholder: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activatePolicy(
      policyholder_: string,
      coverLimit_: BigNumberish,
      amount_: BigNumberish,
      referralCode_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    activeCoverLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    availableCoverCapacity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chargeCycle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chargePremiums(
      holders: string[],
      premiums: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    cooldownPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cooldownStart(policyholder_: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coverLimitOf(policyID_: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deactivatePolicy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    deposit(
      policyholder: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReferrerFromReferralCode(referralCode: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceIsLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isReferralCodeUsed(policyholder: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isReferralCodeValid(referralCode: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isReferralOn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    maxCover(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRateDenom(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRateNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minRequiredAccountBalance(coverLimit: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    policyCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    policyOf(policyholder_: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    policyStatus(policyID_: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    premiumsPaidOf(policyholder_: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referralReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referralThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPointsOf(policyholder_: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    riskManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      baseURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setChargeCycle(
      chargeCycle_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setCooldownPeriod(
      cooldownPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setIsReferralOn(
      isReferralOn_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMaxRateDenom(
      maxRateDenom_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMaxRateNum(
      maxRateNum_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPaused(
      paused_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPendingGovernance(
      pendingGovernance_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setReferralReward(
      referralReward_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setReferralThreshold(
      referralThreshhold_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRegistry(
      registry_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRewardPoints(
      policyholder_: string,
      rewardPoints_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(policyID: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateCoverLimit(
      newCoverLimit_: BigNumberish,
      referralCode_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;
  };
}
