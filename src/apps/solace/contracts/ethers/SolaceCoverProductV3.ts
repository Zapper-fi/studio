/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface SolaceCoverProductV3Interface extends utils.Interface {
  functions: {
    'acceptGovernance()': FunctionFragment;
    'activeCoverLimit()': FunctionFragment;
    'addSigner(address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'availableCoverCapacity()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'baseURI()': FunctionFragment;
    'cancel(uint256,uint256,bytes)': FunctionFragment;
    'cancelPolicies(address[])': FunctionFragment;
    'chargeCycle()': FunctionFragment;
    'coverLimitOf(uint256)': FunctionFragment;
    'getApproved(uint256)': FunctionFragment;
    'getSigner(uint256)': FunctionFragment;
    'governance()': FunctionFragment;
    'governanceIsLocked()': FunctionFragment;
    'isApprovedForAll(address,address)': FunctionFragment;
    'isSigner(address)': FunctionFragment;
    'latestChargedTime()': FunctionFragment;
    'lockGovernance()': FunctionFragment;
    'maxCover()': FunctionFragment;
    'maxRateDenom()': FunctionFragment;
    'maxRateNum()': FunctionFragment;
    'minRequiredAccountBalance(uint256)': FunctionFragment;
    'minScpRequired(address)': FunctionFragment;
    'name()': FunctionFragment;
    'numSigners()': FunctionFragment;
    'ownerOf(uint256)': FunctionFragment;
    'paused()': FunctionFragment;
    'paymentManager()': FunctionFragment;
    'pendingGovernance()': FunctionFragment;
    'policyOf(address)': FunctionFragment;
    'policyStatus(uint256)': FunctionFragment;
    'purchase(address,uint256)': FunctionFragment;
    'purchaseWithNonStable(address,uint256,address,uint256,uint256,uint256,bytes)': FunctionFragment;
    'purchaseWithStable(address,uint256,address,uint256)': FunctionFragment;
    'registry()': FunctionFragment;
    'removeSigner(address)': FunctionFragment;
    'riskManager()': FunctionFragment;
    'safeTransferFrom(address,address,uint256)': FunctionFragment;
    'safeTransferFrom(address,address,uint256,bytes)': FunctionFragment;
    'setApprovalForAll(address,bool)': FunctionFragment;
    'setBaseURI(string)': FunctionFragment;
    'setChargeCycle(uint8)': FunctionFragment;
    'setChargedTime(uint256)': FunctionFragment;
    'setMaxRate(uint256,uint256)': FunctionFragment;
    'setPaused(bool)': FunctionFragment;
    'setPendingGovernance(address)': FunctionFragment;
    'setRegistry(address)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'symbol()': FunctionFragment;
    'tokenURI(uint256)': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'verifyPremium(uint256,address,uint256,bytes)': FunctionFragment;
    'verifyPrice(address,uint256,uint256,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptGovernance'
      | 'activeCoverLimit'
      | 'addSigner'
      | 'approve'
      | 'availableCoverCapacity'
      | 'balanceOf'
      | 'baseURI'
      | 'cancel'
      | 'cancelPolicies'
      | 'chargeCycle'
      | 'coverLimitOf'
      | 'getApproved'
      | 'getSigner'
      | 'governance'
      | 'governanceIsLocked'
      | 'isApprovedForAll'
      | 'isSigner'
      | 'latestChargedTime'
      | 'lockGovernance'
      | 'maxCover'
      | 'maxRateDenom'
      | 'maxRateNum'
      | 'minRequiredAccountBalance'
      | 'minScpRequired'
      | 'name'
      | 'numSigners'
      | 'ownerOf'
      | 'paused'
      | 'paymentManager'
      | 'pendingGovernance'
      | 'policyOf'
      | 'policyStatus'
      | 'purchase'
      | 'purchaseWithNonStable'
      | 'purchaseWithStable'
      | 'registry'
      | 'removeSigner'
      | 'riskManager'
      | 'safeTransferFrom(address,address,uint256)'
      | 'safeTransferFrom(address,address,uint256,bytes)'
      | 'setApprovalForAll'
      | 'setBaseURI'
      | 'setChargeCycle'
      | 'setChargedTime'
      | 'setMaxRate'
      | 'setPaused'
      | 'setPendingGovernance'
      | 'setRegistry'
      | 'supportsInterface'
      | 'symbol'
      | 'tokenURI'
      | 'totalSupply'
      | 'transferFrom'
      | 'verifyPremium'
      | 'verifyPrice',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'acceptGovernance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'activeCoverLimit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addSigner', values: [string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'availableCoverCapacity', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'baseURI', values?: undefined): string;
  encodeFunctionData(functionFragment: 'cancel', values: [BigNumberish, BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'cancelPolicies', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'chargeCycle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'coverLimitOf', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getApproved', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getSigner', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'governance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'governanceIsLocked', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isApprovedForAll', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'isSigner', values: [string]): string;
  encodeFunctionData(functionFragment: 'latestChargedTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lockGovernance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxCover', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxRateDenom', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxRateNum', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minRequiredAccountBalance', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'minScpRequired', values: [string]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'numSigners', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ownerOf', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paymentManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingGovernance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'policyOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'policyStatus', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'purchase', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'purchaseWithNonStable',
    values: [string, BigNumberish, string, BigNumberish, BigNumberish, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'purchaseWithStable',
    values: [string, BigNumberish, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'registry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'removeSigner', values: [string]): string;
  encodeFunctionData(functionFragment: 'riskManager', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    values: [string, string, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'setApprovalForAll', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'setBaseURI', values: [string]): string;
  encodeFunctionData(functionFragment: 'setChargeCycle', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setChargedTime', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setMaxRate', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setPaused', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'setPendingGovernance', values: [string]): string;
  encodeFunctionData(functionFragment: 'setRegistry', values: [string]): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenURI', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'verifyPremium',
    values: [BigNumberish, string, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'verifyPrice', values: [string, BigNumberish, BigNumberish, BytesLike]): string;

  decodeFunctionResult(functionFragment: 'acceptGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activeCoverLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addSigner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'availableCoverCapacity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'baseURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancel', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancelPolicies', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'chargeCycle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'coverLimitOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSigner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governanceIsLocked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isSigner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'latestChargedTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxCover', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRateDenom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRateNum', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minRequiredAccountBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minScpRequired', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numSigners', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paymentManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'policyOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'policyStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'purchase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'purchaseWithNonStable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'purchaseWithStable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeSigner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'riskManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBaseURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setChargeCycle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setChargedTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPendingGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'verifyPremium', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'verifyPrice', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'ApprovalForAll(address,address,bool)': EventFragment;
    'BaseURISet(string)': EventFragment;
    'ChargeCycleSet(uint256)': EventFragment;
    'DebtSet(address,uint256)': EventFragment;
    'GovernanceLocked()': EventFragment;
    'GovernancePending(address)': EventFragment;
    'GovernanceTransferred(address,address)': EventFragment;
    'LatestChargedTimeSet(uint256)': EventFragment;
    'MaxRateSet(uint256,uint256)': EventFragment;
    'PauseSet(bool)': EventFragment;
    'PolicyCanceled(uint256)': EventFragment;
    'PolicyCreated(uint256)': EventFragment;
    'PolicyUpdated(uint256)': EventFragment;
    'RegistrySet(address)': EventFragment;
    'SignerAdded(address)': EventFragment;
    'SignerRemoved(address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BaseURISet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ChargeCycleSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DebtSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GovernanceLocked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GovernancePending'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GovernanceTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LatestChargedTimeSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxRateSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PauseSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PolicyCanceled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PolicyCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PolicyUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RegistrySet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SignerAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SignerRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<[string, string, boolean], ApprovalForAllEventObject>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BaseURISetEventObject {
  baseURI: string;
}
export type BaseURISetEvent = TypedEvent<[string], BaseURISetEventObject>;

export type BaseURISetEventFilter = TypedEventFilter<BaseURISetEvent>;

export interface ChargeCycleSetEventObject {
  chargeCycle: BigNumber;
}
export type ChargeCycleSetEvent = TypedEvent<[BigNumber], ChargeCycleSetEventObject>;

export type ChargeCycleSetEventFilter = TypedEventFilter<ChargeCycleSetEvent>;

export interface DebtSetEventObject {
  policyholder: string;
  debtAmount: BigNumber;
}
export type DebtSetEvent = TypedEvent<[string, BigNumber], DebtSetEventObject>;

export type DebtSetEventFilter = TypedEventFilter<DebtSetEvent>;

export interface GovernanceLockedEventObject {}
export type GovernanceLockedEvent = TypedEvent<[], GovernanceLockedEventObject>;

export type GovernanceLockedEventFilter = TypedEventFilter<GovernanceLockedEvent>;

export interface GovernancePendingEventObject {
  pendingGovernance: string;
}
export type GovernancePendingEvent = TypedEvent<[string], GovernancePendingEventObject>;

export type GovernancePendingEventFilter = TypedEventFilter<GovernancePendingEvent>;

export interface GovernanceTransferredEventObject {
  oldGovernance: string;
  newGovernance: string;
}
export type GovernanceTransferredEvent = TypedEvent<[string, string], GovernanceTransferredEventObject>;

export type GovernanceTransferredEventFilter = TypedEventFilter<GovernanceTransferredEvent>;

export interface LatestChargedTimeSetEventObject {
  timestamp: BigNumber;
}
export type LatestChargedTimeSetEvent = TypedEvent<[BigNumber], LatestChargedTimeSetEventObject>;

export type LatestChargedTimeSetEventFilter = TypedEventFilter<LatestChargedTimeSetEvent>;

export interface MaxRateSetEventObject {
  maxRateNum: BigNumber;
  maxRateDenom: BigNumber;
}
export type MaxRateSetEvent = TypedEvent<[BigNumber, BigNumber], MaxRateSetEventObject>;

export type MaxRateSetEventFilter = TypedEventFilter<MaxRateSetEvent>;

export interface PauseSetEventObject {
  pause: boolean;
}
export type PauseSetEvent = TypedEvent<[boolean], PauseSetEventObject>;

export type PauseSetEventFilter = TypedEventFilter<PauseSetEvent>;

export interface PolicyCanceledEventObject {
  policyID: BigNumber;
}
export type PolicyCanceledEvent = TypedEvent<[BigNumber], PolicyCanceledEventObject>;

export type PolicyCanceledEventFilter = TypedEventFilter<PolicyCanceledEvent>;

export interface PolicyCreatedEventObject {
  policyID: BigNumber;
}
export type PolicyCreatedEvent = TypedEvent<[BigNumber], PolicyCreatedEventObject>;

export type PolicyCreatedEventFilter = TypedEventFilter<PolicyCreatedEvent>;

export interface PolicyUpdatedEventObject {
  policyID: BigNumber;
}
export type PolicyUpdatedEvent = TypedEvent<[BigNumber], PolicyUpdatedEventObject>;

export type PolicyUpdatedEventFilter = TypedEventFilter<PolicyUpdatedEvent>;

export interface RegistrySetEventObject {
  registry: string;
}
export type RegistrySetEvent = TypedEvent<[string], RegistrySetEventObject>;

export type RegistrySetEventFilter = TypedEventFilter<RegistrySetEvent>;

export interface SignerAddedEventObject {
  signer: string;
}
export type SignerAddedEvent = TypedEvent<[string], SignerAddedEventObject>;

export type SignerAddedEventFilter = TypedEventFilter<SignerAddedEvent>;

export interface SignerRemovedEventObject {
  signer: string;
}
export type SignerRemovedEvent = TypedEvent<[string], SignerRemovedEventObject>;

export type SignerRemovedEventFilter = TypedEventFilter<SignerRemovedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface SolaceCoverProductV3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SolaceCoverProductV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    activeCoverLimit(overrides?: CallOverrides): Promise<[BigNumber] & { amount: BigNumber }>;

    addSigner(
      signer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    availableCoverCapacity(overrides?: CallOverrides): Promise<[BigNumber] & { capacity: BigNumber }>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    cancel(
      _premium: BigNumberish,
      _deadline: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    cancelPolicies(
      _policyholders: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    chargeCycle(overrides?: CallOverrides): Promise<[BigNumber]>;

    coverLimitOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getSigner(index: BigNumberish, overrides?: CallOverrides): Promise<[string] & { signer: string }>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    governanceIsLocked(overrides?: CallOverrides): Promise<[boolean]>;

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<[boolean]>;

    isSigner(signer: string, overrides?: CallOverrides): Promise<[boolean]>;

    latestChargedTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    maxCover(overrides?: CallOverrides): Promise<[BigNumber] & { cover: BigNumber }>;

    maxRateDenom(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxRateNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    minRequiredAccountBalance(
      _coverLimit: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { mrab: BigNumber }>;

    minScpRequired(_policyholder: string, overrides?: CallOverrides): Promise<[BigNumber] & { amount: BigNumber }>;

    name(overrides?: CallOverrides): Promise<[string]>;

    numSigners(overrides?: CallOverrides): Promise<[BigNumber] & { count: BigNumber }>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    paymentManager(overrides?: CallOverrides): Promise<[string]>;

    pendingGovernance(overrides?: CallOverrides): Promise<[string]>;

    policyOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    policyStatus(_policyID: BigNumberish, overrides?: CallOverrides): Promise<[boolean] & { status: boolean }>;

    purchase(
      _user: string,
      _coverLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    purchaseWithNonStable(
      _user: string,
      _coverLimit: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      _price: BigNumberish,
      _priceDeadline: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    purchaseWithStable(
      _user: string,
      _coverLimit: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    removeSigner(
      signer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    riskManager(overrides?: CallOverrides): Promise<[string]>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setChargeCycle(
      _chargeCycle: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setChargedTime(
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMaxRate(
      _maxRateNum: BigNumberish,
      _maxRateDenom: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPaused(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPendingGovernance(
      pendingGovernance_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(policyID: BigNumberish, overrides?: CallOverrides): Promise<[string] & { uri: string }>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    verifyPremium(
      premium: BigNumberish,
      policyholder: string,
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    verifyPrice(
      token: string,
      price: BigNumberish,
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;
  };

  acceptGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  activeCoverLimit(overrides?: CallOverrides): Promise<BigNumber>;

  addSigner(signer: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  availableCoverCapacity(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  cancel(
    _premium: BigNumberish,
    _deadline: BigNumberish,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  cancelPolicies(
    _policyholders: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  chargeCycle(overrides?: CallOverrides): Promise<BigNumber>;

  coverLimitOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getSigner(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  governanceIsLocked(overrides?: CallOverrides): Promise<boolean>;

  isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

  isSigner(signer: string, overrides?: CallOverrides): Promise<boolean>;

  latestChargedTime(overrides?: CallOverrides): Promise<BigNumber>;

  lockGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  maxCover(overrides?: CallOverrides): Promise<BigNumber>;

  maxRateDenom(overrides?: CallOverrides): Promise<BigNumber>;

  maxRateNum(overrides?: CallOverrides): Promise<BigNumber>;

  minRequiredAccountBalance(_coverLimit: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  minScpRequired(_policyholder: string, overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  numSigners(overrides?: CallOverrides): Promise<BigNumber>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  paymentManager(overrides?: CallOverrides): Promise<string>;

  pendingGovernance(overrides?: CallOverrides): Promise<string>;

  policyOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  policyStatus(_policyID: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  purchase(
    _user: string,
    _coverLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  purchaseWithNonStable(
    _user: string,
    _coverLimit: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    _price: BigNumberish,
    _priceDeadline: BigNumberish,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  purchaseWithStable(
    _user: string,
    _coverLimit: BigNumberish,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  registry(overrides?: CallOverrides): Promise<string>;

  removeSigner(
    signer: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  riskManager(overrides?: CallOverrides): Promise<string>;

  'safeTransferFrom(address,address,uint256)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'safeTransferFrom(address,address,uint256,bytes)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setBaseURI(
    _baseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setChargeCycle(
    _chargeCycle: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setChargedTime(
    _timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMaxRate(
    _maxRateNum: BigNumberish,
    _maxRateDenom: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPaused(
    _paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPendingGovernance(
    pendingGovernance_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRegistry(
    _registry: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(policyID: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  verifyPremium(
    premium: BigNumberish,
    policyholder: string,
    deadline: BigNumberish,
    signature: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  verifyPrice(
    token: string,
    price: BigNumberish,
    deadline: BigNumberish,
    signature: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  callStatic: {
    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    activeCoverLimit(overrides?: CallOverrides): Promise<BigNumber>;

    addSigner(signer: string, overrides?: CallOverrides): Promise<void>;

    approve(to: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    availableCoverCapacity(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    cancel(
      _premium: BigNumberish,
      _deadline: BigNumberish,
      _signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    cancelPolicies(_policyholders: string[], overrides?: CallOverrides): Promise<void>;

    chargeCycle(overrides?: CallOverrides): Promise<BigNumber>;

    coverLimitOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getSigner(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    governanceIsLocked(overrides?: CallOverrides): Promise<boolean>;

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

    isSigner(signer: string, overrides?: CallOverrides): Promise<boolean>;

    latestChargedTime(overrides?: CallOverrides): Promise<BigNumber>;

    lockGovernance(overrides?: CallOverrides): Promise<void>;

    maxCover(overrides?: CallOverrides): Promise<BigNumber>;

    maxRateDenom(overrides?: CallOverrides): Promise<BigNumber>;

    maxRateNum(overrides?: CallOverrides): Promise<BigNumber>;

    minRequiredAccountBalance(_coverLimit: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    minScpRequired(_policyholder: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    numSigners(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    paymentManager(overrides?: CallOverrides): Promise<string>;

    pendingGovernance(overrides?: CallOverrides): Promise<string>;

    policyOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    policyStatus(_policyID: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    purchase(_user: string, _coverLimit: BigNumberish, overrides?: CallOverrides): Promise<void>;

    purchaseWithNonStable(
      _user: string,
      _coverLimit: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      _price: BigNumberish,
      _priceDeadline: BigNumberish,
      _signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    purchaseWithStable(
      _user: string,
      _coverLimit: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<string>;

    removeSigner(signer: string, overrides?: CallOverrides): Promise<void>;

    riskManager(overrides?: CallOverrides): Promise<string>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    setApprovalForAll(operator: string, approved: boolean, overrides?: CallOverrides): Promise<void>;

    setBaseURI(_baseURI: string, overrides?: CallOverrides): Promise<void>;

    setChargeCycle(_chargeCycle: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setChargedTime(_timestamp: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setMaxRate(_maxRateNum: BigNumberish, _maxRateDenom: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setPaused(_paused: boolean, overrides?: CallOverrides): Promise<void>;

    setPendingGovernance(pendingGovernance_: string, overrides?: CallOverrides): Promise<void>;

    setRegistry(_registry: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(policyID: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(from: string, to: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    verifyPremium(
      premium: BigNumberish,
      policyholder: string,
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    verifyPrice(
      token: string,
      price: BigNumberish,
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, approved?: string | null, tokenId?: BigNumberish | null): ApprovalEventFilter;

    'ApprovalForAll(address,address,bool)'(
      owner?: string | null,
      operator?: string | null,
      approved?: null,
    ): ApprovalForAllEventFilter;
    ApprovalForAll(owner?: string | null, operator?: string | null, approved?: null): ApprovalForAllEventFilter;

    'BaseURISet(string)'(baseURI?: null): BaseURISetEventFilter;
    BaseURISet(baseURI?: null): BaseURISetEventFilter;

    'ChargeCycleSet(uint256)'(chargeCycle?: null): ChargeCycleSetEventFilter;
    ChargeCycleSet(chargeCycle?: null): ChargeCycleSetEventFilter;

    'DebtSet(address,uint256)'(policyholder?: null, debtAmount?: null): DebtSetEventFilter;
    DebtSet(policyholder?: null, debtAmount?: null): DebtSetEventFilter;

    'GovernanceLocked()'(): GovernanceLockedEventFilter;
    GovernanceLocked(): GovernanceLockedEventFilter;

    'GovernancePending(address)'(pendingGovernance?: null): GovernancePendingEventFilter;
    GovernancePending(pendingGovernance?: null): GovernancePendingEventFilter;

    'GovernanceTransferred(address,address)'(
      oldGovernance?: null,
      newGovernance?: null,
    ): GovernanceTransferredEventFilter;
    GovernanceTransferred(oldGovernance?: null, newGovernance?: null): GovernanceTransferredEventFilter;

    'LatestChargedTimeSet(uint256)'(timestamp?: null): LatestChargedTimeSetEventFilter;
    LatestChargedTimeSet(timestamp?: null): LatestChargedTimeSetEventFilter;

    'MaxRateSet(uint256,uint256)'(maxRateNum?: null, maxRateDenom?: null): MaxRateSetEventFilter;
    MaxRateSet(maxRateNum?: null, maxRateDenom?: null): MaxRateSetEventFilter;

    'PauseSet(bool)'(pause?: null): PauseSetEventFilter;
    PauseSet(pause?: null): PauseSetEventFilter;

    'PolicyCanceled(uint256)'(policyID?: null): PolicyCanceledEventFilter;
    PolicyCanceled(policyID?: null): PolicyCanceledEventFilter;

    'PolicyCreated(uint256)'(policyID?: null): PolicyCreatedEventFilter;
    PolicyCreated(policyID?: null): PolicyCreatedEventFilter;

    'PolicyUpdated(uint256)'(policyID?: null): PolicyUpdatedEventFilter;
    PolicyUpdated(policyID?: null): PolicyUpdatedEventFilter;

    'RegistrySet(address)'(registry?: null): RegistrySetEventFilter;
    RegistrySet(registry?: null): RegistrySetEventFilter;

    'SignerAdded(address)'(signer?: null): SignerAddedEventFilter;
    SignerAdded(signer?: null): SignerAddedEventFilter;

    'SignerRemoved(address)'(signer?: null): SignerRemovedEventFilter;
    SignerRemoved(signer?: null): SignerRemovedEventFilter;

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null,
    ): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, tokenId?: BigNumberish | null): TransferEventFilter;
  };

  estimateGas: {
    acceptGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    activeCoverLimit(overrides?: CallOverrides): Promise<BigNumber>;

    addSigner(signer: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    availableCoverCapacity(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      _premium: BigNumberish,
      _deadline: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    cancelPolicies(
      _policyholders: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    chargeCycle(overrides?: CallOverrides): Promise<BigNumber>;

    coverLimitOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getSigner(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    governanceIsLocked(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<BigNumber>;

    isSigner(signer: string, overrides?: CallOverrides): Promise<BigNumber>;

    latestChargedTime(overrides?: CallOverrides): Promise<BigNumber>;

    lockGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    maxCover(overrides?: CallOverrides): Promise<BigNumber>;

    maxRateDenom(overrides?: CallOverrides): Promise<BigNumber>;

    maxRateNum(overrides?: CallOverrides): Promise<BigNumber>;

    minRequiredAccountBalance(_coverLimit: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    minScpRequired(_policyholder: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    numSigners(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    paymentManager(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    policyOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    policyStatus(_policyID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    purchase(
      _user: string,
      _coverLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    purchaseWithNonStable(
      _user: string,
      _coverLimit: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      _price: BigNumberish,
      _priceDeadline: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    purchaseWithStable(
      _user: string,
      _coverLimit: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    removeSigner(signer: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    riskManager(overrides?: CallOverrides): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setBaseURI(_baseURI: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setChargeCycle(
      _chargeCycle: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setChargedTime(
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMaxRate(
      _maxRateNum: BigNumberish,
      _maxRateDenom: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setPaused(_paused: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setPendingGovernance(
      pendingGovernance_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setRegistry(_registry: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(policyID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    verifyPremium(
      premium: BigNumberish,
      policyholder: string,
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    verifyPrice(
      token: string,
      price: BigNumberish,
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    activeCoverLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addSigner(
      signer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    availableCoverCapacity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancel(
      _premium: BigNumberish,
      _deadline: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    cancelPolicies(
      _policyholders: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    chargeCycle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coverLimitOf(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSigner(index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceIsLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSigner(signer: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestChargedTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    maxCover(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRateDenom(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRateNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minRequiredAccountBalance(_coverLimit: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minScpRequired(_policyholder: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numSigners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    policyOf(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    policyStatus(_policyID: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchase(
      _user: string,
      _coverLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    purchaseWithNonStable(
      _user: string,
      _coverLimit: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      _price: BigNumberish,
      _priceDeadline: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    purchaseWithStable(
      _user: string,
      _coverLimit: BigNumberish,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeSigner(
      signer: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    riskManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setChargeCycle(
      _chargeCycle: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setChargedTime(
      _timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMaxRate(
      _maxRateNum: BigNumberish,
      _maxRateDenom: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPaused(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPendingGovernance(
      pendingGovernance_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(policyID: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    verifyPremium(
      premium: BigNumberish,
      policyholder: string,
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    verifyPrice(
      token: string,
      price: BigNumberish,
      deadline: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
