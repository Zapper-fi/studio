/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export type MarketStateStruct = {
  totalPt: PromiseOrValue<BigNumberish>;
  totalSy: PromiseOrValue<BigNumberish>;
  totalLp: PromiseOrValue<BigNumberish>;
  treasury: PromiseOrValue<string>;
  scalarRoot: PromiseOrValue<BigNumberish>;
  expiry: PromiseOrValue<BigNumberish>;
  lnFeeRateRoot: PromiseOrValue<BigNumberish>;
  reserveFeePercent: PromiseOrValue<BigNumberish>;
  lastLnImpliedRate: PromiseOrValue<BigNumberish>;
};

export type MarketStateStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
] & {
  totalPt: BigNumber;
  totalSy: BigNumber;
  totalLp: BigNumber;
  treasury: string;
  scalarRoot: BigNumber;
  expiry: BigNumber;
  lnFeeRateRoot: BigNumber;
  reserveFeePercent: BigNumber;
  lastLnImpliedRate: BigNumber;
};

export interface PendleMarketInterface extends utils.Interface {
  functions: {
    'activeBalance(address)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'burn(address,address,uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'expiry()': FunctionFragment;
    'getRewardTokens()': FunctionFragment;
    'increaseObservationsCardinalityNext(uint16)': FunctionFragment;
    'isExpired()': FunctionFragment;
    'mint(address,uint256,uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'observe(uint32[])': FunctionFragment;
    'readState(address)': FunctionFragment;
    'readTokens()': FunctionFragment;
    'redeemRewards(address)': FunctionFragment;
    'swapExactPtForSy(address,uint256,bytes)': FunctionFragment;
    'swapSyForExactPt(address,uint256,bytes)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalActiveSupply()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'activeBalance'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'burn'
      | 'decimals'
      | 'expiry'
      | 'getRewardTokens'
      | 'increaseObservationsCardinalityNext'
      | 'isExpired'
      | 'mint'
      | 'name'
      | 'observe'
      | 'readState'
      | 'readTokens'
      | 'redeemRewards'
      | 'swapExactPtForSy'
      | 'swapSyForExactPt'
      | 'symbol'
      | 'totalActiveSupply'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'activeBalance', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'burn',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'expiry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRewardTokens', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'increaseObservationsCardinalityNext',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'isExpired', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'observe', values: [PromiseOrValue<BigNumberish>[]]): string;
  encodeFunctionData(functionFragment: 'readState', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'readTokens', values?: undefined): string;
  encodeFunctionData(functionFragment: 'redeemRewards', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'swapExactPtForSy',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'swapSyForExactPt',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalActiveSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'activeBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'expiry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseObservationsCardinalityNext', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isExpired', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'observe', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'readState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'readTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapExactPtForSy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'swapSyForExactPt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalActiveSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Burn(address,address,uint256,uint256,uint256)': EventFragment;
    'IncreaseObservationCardinalityNext(uint16,uint16)': EventFragment;
    'Mint(address,uint256,uint256,uint256)': EventFragment;
    'Swap(address,address,int256,int256,uint256,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'UpdateImpliedRate(uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Burn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'IncreaseObservationCardinalityNext'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Swap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateImpliedRate'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BurnEventObject {
  receiverSy: string;
  receiverPt: string;
  netLpBurned: BigNumber;
  netSyOut: BigNumber;
  netPtOut: BigNumber;
}
export type BurnEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber], BurnEventObject>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export interface IncreaseObservationCardinalityNextEventObject {
  observationCardinalityNextOld: number;
  observationCardinalityNextNew: number;
}
export type IncreaseObservationCardinalityNextEvent = TypedEvent<
  [number, number],
  IncreaseObservationCardinalityNextEventObject
>;

export type IncreaseObservationCardinalityNextEventFilter = TypedEventFilter<IncreaseObservationCardinalityNextEvent>;

export interface MintEventObject {
  receiver: string;
  netLpMinted: BigNumber;
  netSyUsed: BigNumber;
  netPtUsed: BigNumber;
}
export type MintEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], MintEventObject>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface SwapEventObject {
  caller: string;
  receiver: string;
  netPtOut: BigNumber;
  netSyOut: BigNumber;
  netSyFee: BigNumber;
  netSyToReserve: BigNumber;
}
export type SwapEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber, BigNumber], SwapEventObject>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UpdateImpliedRateEventObject {
  timestamp: BigNumber;
  lnLastImpliedRate: BigNumber;
}
export type UpdateImpliedRateEvent = TypedEvent<[BigNumber, BigNumber], UpdateImpliedRateEventObject>;

export type UpdateImpliedRateEventFilter = TypedEventFilter<UpdateImpliedRateEvent>;

export interface PendleMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PendleMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeBalance(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      receiverSy: PromiseOrValue<string>,
      receiverPt: PromiseOrValue<string>,
      netLpToBurn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    expiry(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardTokens(overrides?: CallOverrides): Promise<[string[]]>;

    increaseObservationsCardinalityNext(
      cardinalityNext: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isExpired(overrides?: CallOverrides): Promise<[boolean]>;

    mint(
      receiver: PromiseOrValue<string>,
      netSyDesired: PromiseOrValue<BigNumberish>,
      netPtDesired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    observe(
      secondsAgos: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]] & { lnImpliedRateCumulative: BigNumber[] }>;

    readState(
      router: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[MarketStateStructOutput] & { market: MarketStateStructOutput }>;

    readTokens(
      overrides?: CallOverrides,
    ): Promise<[string, string, string] & { _SY: string; _PT: string; _YT: string }>;

    redeemRewards(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swapExactPtForSy(
      receiver: PromiseOrValue<string>,
      exactPtIn: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    swapSyForExactPt(
      receiver: PromiseOrValue<string>,
      exactPtOut: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalActiveSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  activeBalance(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    receiverSy: PromiseOrValue<string>,
    receiverPt: PromiseOrValue<string>,
    netLpToBurn: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  expiry(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardTokens(overrides?: CallOverrides): Promise<string[]>;

  increaseObservationsCardinalityNext(
    cardinalityNext: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isExpired(overrides?: CallOverrides): Promise<boolean>;

  mint(
    receiver: PromiseOrValue<string>,
    netSyDesired: PromiseOrValue<BigNumberish>,
    netPtDesired: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  observe(secondsAgos: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber[]>;

  readState(router: PromiseOrValue<string>, overrides?: CallOverrides): Promise<MarketStateStructOutput>;

  readTokens(overrides?: CallOverrides): Promise<[string, string, string] & { _SY: string; _PT: string; _YT: string }>;

  redeemRewards(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swapExactPtForSy(
    receiver: PromiseOrValue<string>,
    exactPtIn: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  swapSyForExactPt(
    receiver: PromiseOrValue<string>,
    exactPtOut: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalActiveSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    activeBalance(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      receiverSy: PromiseOrValue<string>,
      receiverPt: PromiseOrValue<string>,
      netLpToBurn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { netSyOut: BigNumber; netPtOut: BigNumber }>;

    decimals(overrides?: CallOverrides): Promise<number>;

    expiry(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardTokens(overrides?: CallOverrides): Promise<string[]>;

    increaseObservationsCardinalityNext(
      cardinalityNext: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    isExpired(overrides?: CallOverrides): Promise<boolean>;

    mint(
      receiver: PromiseOrValue<string>,
      netSyDesired: PromiseOrValue<BigNumberish>,
      netPtDesired: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netSyUsed: BigNumber;
        netPtUsed: BigNumber;
      }
    >;

    name(overrides?: CallOverrides): Promise<string>;

    observe(secondsAgos: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber[]>;

    readState(router: PromiseOrValue<string>, overrides?: CallOverrides): Promise<MarketStateStructOutput>;

    readTokens(
      overrides?: CallOverrides,
    ): Promise<[string, string, string] & { _SY: string; _PT: string; _YT: string }>;

    redeemRewards(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;

    swapExactPtForSy(
      receiver: PromiseOrValue<string>,
      exactPtIn: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { netSyOut: BigNumber; netSyFee: BigNumber }>;

    swapSyForExactPt(
      receiver: PromiseOrValue<string>,
      exactPtOut: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { netSyIn: BigNumber; netSyFee: BigNumber }>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalActiveSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'Burn(address,address,uint256,uint256,uint256)'(
      receiverSy?: PromiseOrValue<string> | null,
      receiverPt?: PromiseOrValue<string> | null,
      netLpBurned?: null,
      netSyOut?: null,
      netPtOut?: null,
    ): BurnEventFilter;
    Burn(
      receiverSy?: PromiseOrValue<string> | null,
      receiverPt?: PromiseOrValue<string> | null,
      netLpBurned?: null,
      netSyOut?: null,
      netPtOut?: null,
    ): BurnEventFilter;

    'IncreaseObservationCardinalityNext(uint16,uint16)'(
      observationCardinalityNextOld?: null,
      observationCardinalityNextNew?: null,
    ): IncreaseObservationCardinalityNextEventFilter;
    IncreaseObservationCardinalityNext(
      observationCardinalityNextOld?: null,
      observationCardinalityNextNew?: null,
    ): IncreaseObservationCardinalityNextEventFilter;

    'Mint(address,uint256,uint256,uint256)'(
      receiver?: PromiseOrValue<string> | null,
      netLpMinted?: null,
      netSyUsed?: null,
      netPtUsed?: null,
    ): MintEventFilter;
    Mint(
      receiver?: PromiseOrValue<string> | null,
      netLpMinted?: null,
      netSyUsed?: null,
      netPtUsed?: null,
    ): MintEventFilter;

    'Swap(address,address,int256,int256,uint256,uint256)'(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      netPtOut?: null,
      netSyOut?: null,
      netSyFee?: null,
      netSyToReserve?: null,
    ): SwapEventFilter;
    Swap(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      netPtOut?: null,
      netSyOut?: null,
      netSyFee?: null,
      netSyToReserve?: null,
    ): SwapEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;

    'UpdateImpliedRate(uint256,uint256)'(
      timestamp?: PromiseOrValue<BigNumberish> | null,
      lnLastImpliedRate?: null,
    ): UpdateImpliedRateEventFilter;
    UpdateImpliedRate(
      timestamp?: PromiseOrValue<BigNumberish> | null,
      lnLastImpliedRate?: null,
    ): UpdateImpliedRateEventFilter;
  };

  estimateGas: {
    activeBalance(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      receiverSy: PromiseOrValue<string>,
      receiverPt: PromiseOrValue<string>,
      netLpToBurn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    expiry(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardTokens(overrides?: CallOverrides): Promise<BigNumber>;

    increaseObservationsCardinalityNext(
      cardinalityNext: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isExpired(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      receiver: PromiseOrValue<string>,
      netSyDesired: PromiseOrValue<BigNumberish>,
      netPtDesired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    observe(secondsAgos: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber>;

    readState(router: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    readTokens(overrides?: CallOverrides): Promise<BigNumber>;

    redeemRewards(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swapExactPtForSy(
      receiver: PromiseOrValue<string>,
      exactPtIn: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    swapSyForExactPt(
      receiver: PromiseOrValue<string>,
      exactPtOut: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalActiveSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeBalance(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      receiverSy: PromiseOrValue<string>,
      receiverPt: PromiseOrValue<string>,
      netLpToBurn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseObservationsCardinalityNext(
      cardinalityNext: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isExpired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      receiver: PromiseOrValue<string>,
      netSyDesired: PromiseOrValue<BigNumberish>,
      netPtDesired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    observe(secondsAgos: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    readState(router: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    readTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemRewards(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swapExactPtForSy(
      receiver: PromiseOrValue<string>,
      exactPtIn: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    swapSyForExactPt(
      receiver: PromiseOrValue<string>,
      exactPtOut: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalActiveSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
