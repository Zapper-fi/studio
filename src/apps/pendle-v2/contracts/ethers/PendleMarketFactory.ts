/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface PendleMarketFactoryInterface extends utils.Interface {
  functions: {
    'getMarketConfig(address)': FunctionFragment;
    'isValidMarket(address)': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'getMarketConfig' | 'isValidMarket'): FunctionFragment;

  encodeFunctionData(functionFragment: 'getMarketConfig', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isValidMarket', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'getMarketConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isValidMarket', data: BytesLike): Result;

  events: {
    'CreateNewMarket(address,address,int256,int256)': EventFragment;
    'NewMarketConfig(address,uint80,uint8)': EventFragment;
    'SetOverriddenFee(address,uint80,uint8)': EventFragment;
    'UnsetOverriddenFee(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CreateNewMarket'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewMarketConfig'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetOverriddenFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UnsetOverriddenFee'): EventFragment;
}

export interface CreateNewMarketEventObject {
  market: string;
  PT: string;
  scalarRoot: BigNumber;
  initialAnchor: BigNumber;
}
export type CreateNewMarketEvent = TypedEvent<[string, string, BigNumber, BigNumber], CreateNewMarketEventObject>;

export type CreateNewMarketEventFilter = TypedEventFilter<CreateNewMarketEvent>;

export interface NewMarketConfigEventObject {
  treasury: string;
  defaultLnFeeRateRoot: BigNumber;
  reserveFeePercent: number;
}
export type NewMarketConfigEvent = TypedEvent<[string, BigNumber, number], NewMarketConfigEventObject>;

export type NewMarketConfigEventFilter = TypedEventFilter<NewMarketConfigEvent>;

export interface SetOverriddenFeeEventObject {
  router: string;
  lnFeeRateRoot: BigNumber;
  reserveFeePercent: number;
}
export type SetOverriddenFeeEvent = TypedEvent<[string, BigNumber, number], SetOverriddenFeeEventObject>;

export type SetOverriddenFeeEventFilter = TypedEventFilter<SetOverriddenFeeEvent>;

export interface UnsetOverriddenFeeEventObject {
  router: string;
}
export type UnsetOverriddenFeeEvent = TypedEvent<[string], UnsetOverriddenFeeEventObject>;

export type UnsetOverriddenFeeEventFilter = TypedEventFilter<UnsetOverriddenFeeEvent>;

export interface PendleMarketFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PendleMarketFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getMarketConfig(
      router: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, number] & {
        treasury: string;
        lnFeeRateRoot: BigNumber;
        reserveFeePercent: number;
      }
    >;

    isValidMarket(market: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
  };

  getMarketConfig(
    router: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, number] & {
      treasury: string;
      lnFeeRateRoot: BigNumber;
      reserveFeePercent: number;
    }
  >;

  isValidMarket(market: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    getMarketConfig(
      router: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, number] & {
        treasury: string;
        lnFeeRateRoot: BigNumber;
        reserveFeePercent: number;
      }
    >;

    isValidMarket(market: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    'CreateNewMarket(address,address,int256,int256)'(
      market?: PromiseOrValue<string> | null,
      PT?: PromiseOrValue<string> | null,
      scalarRoot?: null,
      initialAnchor?: null,
    ): CreateNewMarketEventFilter;
    CreateNewMarket(
      market?: PromiseOrValue<string> | null,
      PT?: PromiseOrValue<string> | null,
      scalarRoot?: null,
      initialAnchor?: null,
    ): CreateNewMarketEventFilter;

    'NewMarketConfig(address,uint80,uint8)'(
      treasury?: PromiseOrValue<string> | null,
      defaultLnFeeRateRoot?: null,
      reserveFeePercent?: null,
    ): NewMarketConfigEventFilter;
    NewMarketConfig(
      treasury?: PromiseOrValue<string> | null,
      defaultLnFeeRateRoot?: null,
      reserveFeePercent?: null,
    ): NewMarketConfigEventFilter;

    'SetOverriddenFee(address,uint80,uint8)'(
      router?: PromiseOrValue<string> | null,
      lnFeeRateRoot?: null,
      reserveFeePercent?: null,
    ): SetOverriddenFeeEventFilter;
    SetOverriddenFee(
      router?: PromiseOrValue<string> | null,
      lnFeeRateRoot?: null,
      reserveFeePercent?: null,
    ): SetOverriddenFeeEventFilter;

    'UnsetOverriddenFee(address)'(router?: PromiseOrValue<string> | null): UnsetOverriddenFeeEventFilter;
    UnsetOverriddenFee(router?: PromiseOrValue<string> | null): UnsetOverriddenFeeEventFilter;
  };

  estimateGas: {
    getMarketConfig(router: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isValidMarket(market: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getMarketConfig(router: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidMarket(market: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
