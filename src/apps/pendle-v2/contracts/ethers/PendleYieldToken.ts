/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface PendleYieldTokenInterface extends utils.Interface {
  functions: {
    'PT()': FunctionFragment;
    'SY()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'decimals()': FunctionFragment;
    'doCacheIndexSameBlock()': FunctionFragment;
    'expiry()': FunctionFragment;
    'factory()': FunctionFragment;
    'getRewardTokens()': FunctionFragment;
    'isExpired()': FunctionFragment;
    'mintPY(address,address)': FunctionFragment;
    'name()': FunctionFragment;
    'pyIndexCurrent()': FunctionFragment;
    'pyIndexStored()': FunctionFragment;
    'redeemDueInterestAndRewards(address,bool,bool)': FunctionFragment;
    'redeemPY(address)': FunctionFragment;
    'redeemPYMulti(address[],uint256[])': FunctionFragment;
    'rewardIndexesCurrent()': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'userInterest(address)': FunctionFragment;
    'userReward(address,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'PT'
      | 'SY'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'decimals'
      | 'doCacheIndexSameBlock'
      | 'expiry'
      | 'factory'
      | 'getRewardTokens'
      | 'isExpired'
      | 'mintPY'
      | 'name'
      | 'pyIndexCurrent'
      | 'pyIndexStored'
      | 'redeemDueInterestAndRewards'
      | 'redeemPY'
      | 'redeemPYMulti'
      | 'rewardIndexesCurrent'
      | 'symbol'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'userInterest'
      | 'userReward',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'PT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SY', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'doCacheIndexSameBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'expiry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRewardTokens', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isExpired', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mintPY', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pyIndexCurrent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pyIndexStored', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'redeemDueInterestAndRewards',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'redeemPY', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'redeemPYMulti',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(functionFragment: 'rewardIndexesCurrent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'userInterest', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'userReward', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'PT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'doCacheIndexSameBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'expiry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isExpired', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintPY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pyIndexCurrent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pyIndexStored', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemDueInterestAndRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemPY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeemPYMulti', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardIndexesCurrent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userInterest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userReward', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Burn(address,address,uint256,uint256)': EventFragment;
    'Mint(address,address,address,uint256,uint256)': EventFragment;
    'NewInterestIndex(uint256)': EventFragment;
    'RedeemInterest(address,uint256)': EventFragment;
    'RedeemRewards(address,uint256[])': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'WithdrawFeeToTreasury(uint256[],uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Burn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewInterestIndex'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RedeemInterest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RedeemRewards'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawFeeToTreasury'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BurnEventObject {
  caller: string;
  receiver: string;
  amountPYToRedeem: BigNumber;
  amountSyOut: BigNumber;
}
export type BurnEvent = TypedEvent<[string, string, BigNumber, BigNumber], BurnEventObject>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export interface MintEventObject {
  caller: string;
  receiverPT: string;
  receiverYT: string;
  amountSyToMint: BigNumber;
  amountPYOut: BigNumber;
}
export type MintEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], MintEventObject>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface NewInterestIndexEventObject {
  newIndex: BigNumber;
}
export type NewInterestIndexEvent = TypedEvent<[BigNumber], NewInterestIndexEventObject>;

export type NewInterestIndexEventFilter = TypedEventFilter<NewInterestIndexEvent>;

export interface RedeemInterestEventObject {
  user: string;
  interestOut: BigNumber;
}
export type RedeemInterestEvent = TypedEvent<[string, BigNumber], RedeemInterestEventObject>;

export type RedeemInterestEventFilter = TypedEventFilter<RedeemInterestEvent>;

export interface RedeemRewardsEventObject {
  user: string;
  amountRewardsOut: BigNumber[];
}
export type RedeemRewardsEvent = TypedEvent<[string, BigNumber[]], RedeemRewardsEventObject>;

export type RedeemRewardsEventFilter = TypedEventFilter<RedeemRewardsEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawFeeToTreasuryEventObject {
  amountRewardsOut: BigNumber[];
  syOut: BigNumber;
}
export type WithdrawFeeToTreasuryEvent = TypedEvent<[BigNumber[], BigNumber], WithdrawFeeToTreasuryEventObject>;

export type WithdrawFeeToTreasuryEventFilter = TypedEventFilter<WithdrawFeeToTreasuryEvent>;

export interface PendleYieldToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PendleYieldTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PT(overrides?: CallOverrides): Promise<[string]>;

    SY(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    doCacheIndexSameBlock(overrides?: CallOverrides): Promise<[boolean]>;

    expiry(overrides?: CallOverrides): Promise<[BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getRewardTokens(overrides?: CallOverrides): Promise<[string[]]>;

    isExpired(overrides?: CallOverrides): Promise<[boolean]>;

    mintPY(
      receiverPT: PromiseOrValue<string>,
      receiverYT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    pyIndexCurrent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    pyIndexStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeemDueInterestAndRewards(
      user: PromiseOrValue<string>,
      redeemInterest: PromiseOrValue<boolean>,
      redeemRewards: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    redeemPY(
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    redeemPYMulti(
      receivers: PromiseOrValue<string>[],
      amountPYToRedeems: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    rewardIndexesCurrent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    userInterest(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        lastPYIndex: BigNumber;
        accruedInterest: BigNumber;
      }
    >;

    userReward(
      token: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { index: BigNumber; accrued: BigNumber }>;
  };

  PT(overrides?: CallOverrides): Promise<string>;

  SY(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  doCacheIndexSameBlock(overrides?: CallOverrides): Promise<boolean>;

  expiry(overrides?: CallOverrides): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  getRewardTokens(overrides?: CallOverrides): Promise<string[]>;

  isExpired(overrides?: CallOverrides): Promise<boolean>;

  mintPY(
    receiverPT: PromiseOrValue<string>,
    receiverYT: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  pyIndexCurrent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  pyIndexStored(overrides?: CallOverrides): Promise<BigNumber>;

  redeemDueInterestAndRewards(
    user: PromiseOrValue<string>,
    redeemInterest: PromiseOrValue<boolean>,
    redeemRewards: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  redeemPY(
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  redeemPYMulti(
    receivers: PromiseOrValue<string>[],
    amountPYToRedeems: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  rewardIndexesCurrent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  userInterest(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      lastPYIndex: BigNumber;
      accruedInterest: BigNumber;
    }
  >;

  userReward(
    token: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { index: BigNumber; accrued: BigNumber }>;

  callStatic: {
    PT(overrides?: CallOverrides): Promise<string>;

    SY(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    doCacheIndexSameBlock(overrides?: CallOverrides): Promise<boolean>;

    expiry(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    getRewardTokens(overrides?: CallOverrides): Promise<string[]>;

    isExpired(overrides?: CallOverrides): Promise<boolean>;

    mintPY(
      receiverPT: PromiseOrValue<string>,
      receiverYT: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    pyIndexCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    pyIndexStored(overrides?: CallOverrides): Promise<BigNumber>;

    redeemDueInterestAndRewards(
      user: PromiseOrValue<string>,
      redeemInterest: PromiseOrValue<boolean>,
      redeemRewards: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber[]] & {
        interestOut: BigNumber;
        rewardsOut: BigNumber[];
      }
    >;

    redeemPY(receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    redeemPYMulti(
      receivers: PromiseOrValue<string>[],
      amountPYToRedeems: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    rewardIndexesCurrent(overrides?: CallOverrides): Promise<BigNumber[]>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    userInterest(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        lastPYIndex: BigNumber;
        accruedInterest: BigNumber;
      }
    >;

    userReward(
      token: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { index: BigNumber; accrued: BigNumber }>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'Burn(address,address,uint256,uint256)'(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amountPYToRedeem?: null,
      amountSyOut?: null,
    ): BurnEventFilter;
    Burn(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amountPYToRedeem?: null,
      amountSyOut?: null,
    ): BurnEventFilter;

    'Mint(address,address,address,uint256,uint256)'(
      caller?: PromiseOrValue<string> | null,
      receiverPT?: PromiseOrValue<string> | null,
      receiverYT?: PromiseOrValue<string> | null,
      amountSyToMint?: null,
      amountPYOut?: null,
    ): MintEventFilter;
    Mint(
      caller?: PromiseOrValue<string> | null,
      receiverPT?: PromiseOrValue<string> | null,
      receiverYT?: PromiseOrValue<string> | null,
      amountSyToMint?: null,
      amountPYOut?: null,
    ): MintEventFilter;

    'NewInterestIndex(uint256)'(newIndex?: PromiseOrValue<BigNumberish> | null): NewInterestIndexEventFilter;
    NewInterestIndex(newIndex?: PromiseOrValue<BigNumberish> | null): NewInterestIndexEventFilter;

    'RedeemInterest(address,uint256)'(
      user?: PromiseOrValue<string> | null,
      interestOut?: null,
    ): RedeemInterestEventFilter;
    RedeemInterest(user?: PromiseOrValue<string> | null, interestOut?: null): RedeemInterestEventFilter;

    'RedeemRewards(address,uint256[])'(
      user?: PromiseOrValue<string> | null,
      amountRewardsOut?: null,
    ): RedeemRewardsEventFilter;
    RedeemRewards(user?: PromiseOrValue<string> | null, amountRewardsOut?: null): RedeemRewardsEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;

    'WithdrawFeeToTreasury(uint256[],uint256)'(amountRewardsOut?: null, syOut?: null): WithdrawFeeToTreasuryEventFilter;
    WithdrawFeeToTreasury(amountRewardsOut?: null, syOut?: null): WithdrawFeeToTreasuryEventFilter;
  };

  estimateGas: {
    PT(overrides?: CallOverrides): Promise<BigNumber>;

    SY(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    doCacheIndexSameBlock(overrides?: CallOverrides): Promise<BigNumber>;

    expiry(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardTokens(overrides?: CallOverrides): Promise<BigNumber>;

    isExpired(overrides?: CallOverrides): Promise<BigNumber>;

    mintPY(
      receiverPT: PromiseOrValue<string>,
      receiverYT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    pyIndexCurrent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    pyIndexStored(overrides?: CallOverrides): Promise<BigNumber>;

    redeemDueInterestAndRewards(
      user: PromiseOrValue<string>,
      redeemInterest: PromiseOrValue<boolean>,
      redeemRewards: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    redeemPY(
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    redeemPYMulti(
      receivers: PromiseOrValue<string>[],
      amountPYToRedeems: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    rewardIndexesCurrent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    userInterest(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userReward(
      token: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    doCacheIndexSameBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isExpired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintPY(
      receiverPT: PromiseOrValue<string>,
      receiverYT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pyIndexCurrent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    pyIndexStored(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemDueInterestAndRewards(
      user: PromiseOrValue<string>,
      redeemInterest: PromiseOrValue<boolean>,
      redeemRewards: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    redeemPY(
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    redeemPYMulti(
      receivers: PromiseOrValue<string>[],
      amountPYToRedeems: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    rewardIndexesCurrent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    userInterest(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userReward(
      token: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
