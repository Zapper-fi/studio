/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface BathTokenInterface extends utils.Interface {
  functions: {
    'DOMAIN_SEPARATOR()': FunctionFragment;
    'PERMIT_TYPEHASH()': FunctionFragment;
    'RubiconMarketAddress()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'approveMarket()': FunctionFragment;
    'asset()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'bathBuddy()': FunctionFragment;
    'bathHouse()': FunctionFragment;
    'bonusTokens(uint256)': FunctionFragment;
    'cancel(uint256,uint256)': FunctionFragment;
    'convertToAssets(uint256)': FunctionFragment;
    'convertToShares(uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'deposit(uint256,address)': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'feeBPS()': FunctionFragment;
    'feeTo()': FunctionFragment;
    'getAllBonusTokenReward()': FunctionFragment;
    'getBonusTokenReward(address)': FunctionFragment;
    'initialize(address,address,address)': FunctionFragment;
    'initialized()': FunctionFragment;
    'maxDeposit(address)': FunctionFragment;
    'maxMint(address)': FunctionFragment;
    'maxRedeem(address)': FunctionFragment;
    'maxWithdraw(address)': FunctionFragment;
    'mint(uint256,address)': FunctionFragment;
    'name()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'outstandingAmount()': FunctionFragment;
    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'placeOffer(uint256,address,uint256,address)': FunctionFragment;
    'previewDeposit(uint256)': FunctionFragment;
    'previewMint(uint256)': FunctionFragment;
    'previewRedeem(uint256)': FunctionFragment;
    'previewWithdraw(uint256)': FunctionFragment;
    'rebalance(address,address,uint256,uint256)': FunctionFragment;
    'redeem(uint256,address,address)': FunctionFragment;
    'removeFilledTradeAmount(uint256)': FunctionFragment;
    'setBathBuddy(address)': FunctionFragment;
    'setBathHouse(address)': FunctionFragment;
    'setBonusToken(address)': FunctionFragment;
    'setFeeBPS(uint256)': FunctionFragment;
    'setFeeTo(address)': FunctionFragment;
    'setMarket(address)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalAssets()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'underlyingBalance()': FunctionFragment;
    'underlyingERC20()': FunctionFragment;
    'underlyingToken()': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdraw(uint256,address,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DOMAIN_SEPARATOR'
      | 'PERMIT_TYPEHASH'
      | 'RubiconMarketAddress'
      | 'allowance'
      | 'approve'
      | 'approveMarket'
      | 'asset'
      | 'balanceOf'
      | 'bathBuddy'
      | 'bathHouse'
      | 'bonusTokens'
      | 'cancel'
      | 'convertToAssets'
      | 'convertToShares'
      | 'decimals'
      | 'deposit(uint256,address)'
      | 'deposit(uint256)'
      | 'feeBPS'
      | 'feeTo'
      | 'getAllBonusTokenReward'
      | 'getBonusTokenReward'
      | 'initialize'
      | 'initialized'
      | 'maxDeposit'
      | 'maxMint'
      | 'maxRedeem'
      | 'maxWithdraw'
      | 'mint'
      | 'name'
      | 'nonces'
      | 'outstandingAmount'
      | 'permit'
      | 'placeOffer'
      | 'previewDeposit'
      | 'previewMint'
      | 'previewRedeem'
      | 'previewWithdraw'
      | 'rebalance'
      | 'redeem'
      | 'removeFilledTradeAmount'
      | 'setBathBuddy'
      | 'setBathHouse'
      | 'setBonusToken'
      | 'setFeeBPS'
      | 'setFeeTo'
      | 'setMarket'
      | 'symbol'
      | 'totalAssets'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'underlyingBalance'
      | 'underlyingERC20'
      | 'underlyingToken'
      | 'withdraw(uint256)'
      | 'withdraw(uint256,address,address)',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PERMIT_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'RubiconMarketAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'approveMarket', values?: undefined): string;
  encodeFunctionData(functionFragment: 'asset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'bathBuddy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'bathHouse', values?: undefined): string;
  encodeFunctionData(functionFragment: 'bonusTokens', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'cancel', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'convertToAssets', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'convertToShares', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit(uint256,address)', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'deposit(uint256)', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'feeBPS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feeTo', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAllBonusTokenReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getBonusTokenReward', values: [string]): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string, string, string]): string;
  encodeFunctionData(functionFragment: 'initialized', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxDeposit', values: [string]): string;
  encodeFunctionData(functionFragment: 'maxMint', values: [string]): string;
  encodeFunctionData(functionFragment: 'maxRedeem', values: [string]): string;
  encodeFunctionData(functionFragment: 'maxWithdraw', values: [string]): string;
  encodeFunctionData(functionFragment: 'mint', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [string]): string;
  encodeFunctionData(functionFragment: 'outstandingAmount', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'permit',
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'placeOffer', values: [BigNumberish, string, BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'previewDeposit', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'previewMint', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'previewRedeem', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'previewWithdraw', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'rebalance', values: [string, string, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'redeem', values: [BigNumberish, string, string]): string;
  encodeFunctionData(functionFragment: 'removeFilledTradeAmount', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setBathBuddy', values: [string]): string;
  encodeFunctionData(functionFragment: 'setBathHouse', values: [string]): string;
  encodeFunctionData(functionFragment: 'setBonusToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'setFeeBPS', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setFeeTo', values: [string]): string;
  encodeFunctionData(functionFragment: 'setMarket', values: [string]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalAssets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'underlyingBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'underlyingERC20', values?: undefined): string;
  encodeFunctionData(functionFragment: 'underlyingToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw(uint256)', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'withdraw(uint256,address,address)',
    values: [BigNumberish, string, string],
  ): string;

  decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PERMIT_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'RubiconMarketAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approveMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bathBuddy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bathHouse', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bonusTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancel', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertToAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertToShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit(uint256,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit(uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeBPS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllBonusTokenReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBonusTokenReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialized', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRedeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'outstandingAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'placeOffer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewRedeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rebalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeFilledTradeAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBathBuddy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBathHouse', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBonusToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeBPS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'underlyingBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'underlyingERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'underlyingToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw(uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw(uint256,address,address)', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Deposit(address,address,uint256,uint256)': EventFragment;
    'LogClaimBonusTokn(address,address,address,uint256,uint256,address)': EventFragment;
    'LogDeposit(uint256,address,uint256,address,uint256,uint256,uint256)': EventFragment;
    'LogInit(uint256)': EventFragment;
    'LogPoolCancel(uint256,address,uint256,uint256,uint256,uint256)': EventFragment;
    'LogPoolOffer(uint256,address,uint256,uint256,uint256)': EventFragment;
    'LogRebalance(address,address,address,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'LogRemoveFilledTradeAmount(address,uint256,uint256,uint256,uint256)': EventFragment;
    'LogWithdraw(uint256,address,uint256,address,uint256,address,uint256,uint256,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Withdraw(address,address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogClaimBonusTokn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogDeposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogInit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogPoolCancel'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogPoolOffer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogRebalance'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogRemoveFilledTradeAmount'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DepositEventObject {
  caller: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type DepositEvent = TypedEvent<[string, string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface LogClaimBonusToknEventObject {
  caller: string;
  receiver: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
  bonusToken: string;
}
export type LogClaimBonusToknEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, string],
  LogClaimBonusToknEventObject
>;

export type LogClaimBonusToknEventFilter = TypedEventFilter<LogClaimBonusToknEvent>;

export interface LogDepositEventObject {
  depositedAmt: BigNumber;
  asset: string;
  sharesReceived: BigNumber;
  depositor: string;
  underlyingBalance: BigNumber;
  outstandingAmount: BigNumber;
  totalSupply: BigNumber;
}
export type LogDepositEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber, BigNumber, BigNumber],
  LogDepositEventObject
>;

export type LogDepositEventFilter = TypedEventFilter<LogDepositEvent>;

export interface LogInitEventObject {
  timeOfInit: BigNumber;
}
export type LogInitEvent = TypedEvent<[BigNumber], LogInitEventObject>;

export type LogInitEventFilter = TypedEventFilter<LogInitEvent>;

export interface LogPoolCancelEventObject {
  orderId: BigNumber;
  pool_asset: string;
  outstandingAmountToCancel: BigNumber;
  underlyingBalance: BigNumber;
  outstandingAmount: BigNumber;
  totalSupply: BigNumber;
}
export type LogPoolCancelEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber],
  LogPoolCancelEventObject
>;

export type LogPoolCancelEventFilter = TypedEventFilter<LogPoolCancelEvent>;

export interface LogPoolOfferEventObject {
  id: BigNumber;
  pool_asset: string;
  underlyingBalance: BigNumber;
  outstandingAmount: BigNumber;
  totalSupply: BigNumber;
}
export type LogPoolOfferEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  LogPoolOfferEventObject
>;

export type LogPoolOfferEventFilter = TypedEventFilter<LogPoolOfferEvent>;

export interface LogRebalanceEventObject {
  pool_asset: string;
  destination: string;
  transferAsset: string;
  rebalAmt: BigNumber;
  stratReward: BigNumber;
  underlyingBalance: BigNumber;
  outstandingAmount: BigNumber;
  totalSupply: BigNumber;
}
export type LogRebalanceEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LogRebalanceEventObject
>;

export type LogRebalanceEventFilter = TypedEventFilter<LogRebalanceEvent>;

export interface LogRemoveFilledTradeAmountEventObject {
  pool_asset: string;
  fillAmount: BigNumber;
  underlyingBalance: BigNumber;
  outstandingAmount: BigNumber;
  totalSupply: BigNumber;
}
export type LogRemoveFilledTradeAmountEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  LogRemoveFilledTradeAmountEventObject
>;

export type LogRemoveFilledTradeAmountEventFilter = TypedEventFilter<LogRemoveFilledTradeAmountEvent>;

export interface LogWithdrawEventObject {
  amountWithdrawn: BigNumber;
  asset: string;
  sharesWithdrawn: BigNumber;
  withdrawer: string;
  fee: BigNumber;
  feeTo: string;
  underlyingBalance: BigNumber;
  outstandingAmount: BigNumber;
  totalSupply: BigNumber;
}
export type LogWithdrawEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber, string, BigNumber, BigNumber, BigNumber],
  LogWithdrawEventObject
>;

export type LogWithdrawEventFilter = TypedEventFilter<LogWithdrawEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawEventObject {
  caller: string;
  receiver: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface BathToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BathTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    RubiconMarketAddress(overrides?: CallOverrides): Promise<[string]>;

    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    approveMarket(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string] & { assetTokenAddress: string }>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bathBuddy(overrides?: CallOverrides): Promise<[string]>;

    bathHouse(overrides?: CallOverrides): Promise<[string]>;

    bonusTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    cancel(
      id: BigNumberish,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    convertToAssets(shares: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { assets: BigNumber }>;

    convertToShares(assets: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { shares: BigNumber }>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    'deposit(uint256,address)'(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'deposit(uint256)'(
      assets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    feeBPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    getAllBonusTokenReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    getBonusTokenReward(
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initialize(
      token: string,
      market: string,
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    maxDeposit(receiver: string, overrides?: CallOverrides): Promise<[BigNumber] & { maxAssets: BigNumber }>;

    maxMint(receiver: string, overrides?: CallOverrides): Promise<[BigNumber] & { maxShares: BigNumber }>;

    maxRedeem(owner: string, overrides?: CallOverrides): Promise<[BigNumber] & { maxShares: BigNumber }>;

    maxWithdraw(owner: string, overrides?: CallOverrides): Promise<[BigNumber] & { maxAssets: BigNumber }>;

    mint(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    outstandingAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    placeOffer(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    previewDeposit(assets: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { shares: BigNumber }>;

    previewMint(shares: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { assets: BigNumber }>;

    previewRedeem(shares: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { assets: BigNumber }>;

    previewWithdraw(assets: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber] & { shares: BigNumber }>;

    rebalance(
      destination: string,
      filledAssetToRebalance: string,
      stratProportion: BigNumberish,
      rebalAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    redeem(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    removeFilledTradeAmount(
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setBathBuddy(
      newBuddy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setBathHouse(
      newBathHouse: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setBonusToken(
      newBonusERC20: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setFeeBPS(
      _feeBPS: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setFeeTo(_feeTo: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setMarket(
      newRubiconMarket: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber] & { totalManagedAssets: BigNumber }>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    underlyingBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    underlyingERC20(overrides?: CallOverrides): Promise<[string]>;

    underlyingToken(overrides?: CallOverrides): Promise<[string]>;

    'withdraw(uint256)'(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'withdraw(uint256,address,address)'(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  RubiconMarketAddress(overrides?: CallOverrides): Promise<string>;

  allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  approveMarket(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  bathBuddy(overrides?: CallOverrides): Promise<string>;

  bathHouse(overrides?: CallOverrides): Promise<string>;

  bonusTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  cancel(
    id: BigNumberish,
    amt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  convertToAssets(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  convertToShares(assets: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  'deposit(uint256,address)'(
    assets: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'deposit(uint256)'(
    assets: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  feeBPS(overrides?: CallOverrides): Promise<BigNumber>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  getAllBonusTokenReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  getBonusTokenReward(
    rewardToken: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initialize(
    token: string,
    market: string,
    _feeTo: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  maxDeposit(receiver: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxMint(receiver: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxRedeem(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxWithdraw(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    shares: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  outstandingAmount(overrides?: CallOverrides): Promise<BigNumber>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  placeOffer(
    pay_amt: BigNumberish,
    pay_gem: string,
    buy_amt: BigNumberish,
    buy_gem: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  previewDeposit(assets: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  previewMint(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  previewRedeem(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  previewWithdraw(assets: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  rebalance(
    destination: string,
    filledAssetToRebalance: string,
    stratProportion: BigNumberish,
    rebalAmt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  redeem(
    shares: BigNumberish,
    receiver: string,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  removeFilledTradeAmount(
    amt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setBathBuddy(
    newBuddy: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setBathHouse(
    newBathHouse: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setBonusToken(
    newBonusERC20: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setFeeBPS(
    _feeBPS: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setFeeTo(_feeTo: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setMarket(
    newRubiconMarket: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  underlyingBalance(overrides?: CallOverrides): Promise<BigNumber>;

  underlyingERC20(overrides?: CallOverrides): Promise<string>;

  underlyingToken(overrides?: CallOverrides): Promise<string>;

  'withdraw(uint256)'(
    _shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'withdraw(uint256,address,address)'(
    assets: BigNumberish,
    receiver: string,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    RubiconMarketAddress(overrides?: CallOverrides): Promise<string>;

    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    approveMarket(overrides?: CallOverrides): Promise<void>;

    asset(overrides?: CallOverrides): Promise<string>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bathBuddy(overrides?: CallOverrides): Promise<string>;

    bathHouse(overrides?: CallOverrides): Promise<string>;

    bonusTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    cancel(id: BigNumberish, amt: BigNumberish, overrides?: CallOverrides): Promise<void>;

    convertToAssets(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    convertToShares(assets: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    'deposit(uint256,address)'(assets: BigNumberish, receiver: string, overrides?: CallOverrides): Promise<BigNumber>;

    'deposit(uint256)'(assets: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    feeBPS(overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    getAllBonusTokenReward(overrides?: CallOverrides): Promise<void>;

    getBonusTokenReward(rewardToken: string, overrides?: CallOverrides): Promise<void>;

    initialize(token: string, market: string, _feeTo: string, overrides?: CallOverrides): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    maxDeposit(receiver: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(receiver: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    mint(shares: BigNumberish, receiver: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    outstandingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    placeOffer(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    previewDeposit(assets: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    previewMint(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    previewRedeem(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    previewWithdraw(assets: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(
      destination: string,
      filledAssetToRebalance: string,
      stratProportion: BigNumberish,
      rebalAmt: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    redeem(shares: BigNumberish, receiver: string, owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeFilledTradeAmount(amt: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setBathBuddy(newBuddy: string, overrides?: CallOverrides): Promise<void>;

    setBathHouse(newBathHouse: string, overrides?: CallOverrides): Promise<void>;

    setBonusToken(newBonusERC20: string, overrides?: CallOverrides): Promise<void>;

    setFeeBPS(_feeBPS: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFeeTo(_feeTo: string, overrides?: CallOverrides): Promise<void>;

    setMarket(newRubiconMarket: string, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(to: string, value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(from: string, to: string, value: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    underlyingBalance(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingERC20(overrides?: CallOverrides): Promise<string>;

    underlyingToken(overrides?: CallOverrides): Promise<string>;

    'withdraw(uint256)'(_shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'withdraw(uint256,address,address)'(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;

    'Deposit(address,address,uint256,uint256)'(
      caller?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null,
    ): DepositEventFilter;
    Deposit(caller?: string | null, owner?: string | null, assets?: null, shares?: null): DepositEventFilter;

    'LogClaimBonusTokn(address,address,address,uint256,uint256,address)'(
      caller?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null,
      bonusToken?: null,
    ): LogClaimBonusToknEventFilter;
    LogClaimBonusTokn(
      caller?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null,
      bonusToken?: null,
    ): LogClaimBonusToknEventFilter;

    'LogDeposit(uint256,address,uint256,address,uint256,uint256,uint256)'(
      depositedAmt?: null,
      asset?: null,
      sharesReceived?: null,
      depositor?: null,
      underlyingBalance?: null,
      outstandingAmount?: null,
      totalSupply?: null,
    ): LogDepositEventFilter;
    LogDeposit(
      depositedAmt?: null,
      asset?: null,
      sharesReceived?: null,
      depositor?: null,
      underlyingBalance?: null,
      outstandingAmount?: null,
      totalSupply?: null,
    ): LogDepositEventFilter;

    'LogInit(uint256)'(timeOfInit?: null): LogInitEventFilter;
    LogInit(timeOfInit?: null): LogInitEventFilter;

    'LogPoolCancel(uint256,address,uint256,uint256,uint256,uint256)'(
      orderId?: null,
      pool_asset?: null,
      outstandingAmountToCancel?: null,
      underlyingBalance?: null,
      outstandingAmount?: null,
      totalSupply?: null,
    ): LogPoolCancelEventFilter;
    LogPoolCancel(
      orderId?: null,
      pool_asset?: null,
      outstandingAmountToCancel?: null,
      underlyingBalance?: null,
      outstandingAmount?: null,
      totalSupply?: null,
    ): LogPoolCancelEventFilter;

    'LogPoolOffer(uint256,address,uint256,uint256,uint256)'(
      id?: null,
      pool_asset?: null,
      underlyingBalance?: null,
      outstandingAmount?: null,
      totalSupply?: null,
    ): LogPoolOfferEventFilter;
    LogPoolOffer(
      id?: null,
      pool_asset?: null,
      underlyingBalance?: null,
      outstandingAmount?: null,
      totalSupply?: null,
    ): LogPoolOfferEventFilter;

    'LogRebalance(address,address,address,uint256,uint256,uint256,uint256,uint256)'(
      pool_asset?: null,
      destination?: null,
      transferAsset?: null,
      rebalAmt?: null,
      stratReward?: null,
      underlyingBalance?: null,
      outstandingAmount?: null,
      totalSupply?: null,
    ): LogRebalanceEventFilter;
    LogRebalance(
      pool_asset?: null,
      destination?: null,
      transferAsset?: null,
      rebalAmt?: null,
      stratReward?: null,
      underlyingBalance?: null,
      outstandingAmount?: null,
      totalSupply?: null,
    ): LogRebalanceEventFilter;

    'LogRemoveFilledTradeAmount(address,uint256,uint256,uint256,uint256)'(
      pool_asset?: null,
      fillAmount?: null,
      underlyingBalance?: null,
      outstandingAmount?: null,
      totalSupply?: null,
    ): LogRemoveFilledTradeAmountEventFilter;
    LogRemoveFilledTradeAmount(
      pool_asset?: null,
      fillAmount?: null,
      underlyingBalance?: null,
      outstandingAmount?: null,
      totalSupply?: null,
    ): LogRemoveFilledTradeAmountEventFilter;

    'LogWithdraw(uint256,address,uint256,address,uint256,address,uint256,uint256,uint256)'(
      amountWithdrawn?: null,
      asset?: null,
      sharesWithdrawn?: null,
      withdrawer?: null,
      fee?: null,
      feeTo?: null,
      underlyingBalance?: null,
      outstandingAmount?: null,
      totalSupply?: null,
    ): LogWithdrawEventFilter;
    LogWithdraw(
      amountWithdrawn?: null,
      asset?: null,
      sharesWithdrawn?: null,
      withdrawer?: null,
      fee?: null,
      feeTo?: null,
      underlyingBalance?: null,
      outstandingAmount?: null,
      totalSupply?: null,
    ): LogWithdrawEventFilter;

    'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;

    'Withdraw(address,address,address,uint256,uint256)'(
      caller?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null,
    ): WithdrawEventFilter;
    Withdraw(
      caller?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null,
    ): WithdrawEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    RubiconMarketAddress(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    approveMarket(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bathBuddy(overrides?: CallOverrides): Promise<BigNumber>;

    bathHouse(overrides?: CallOverrides): Promise<BigNumber>;

    bonusTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      id: BigNumberish,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    convertToAssets(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    convertToShares(assets: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    'deposit(uint256,address)'(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'deposit(uint256)'(
      assets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    feeBPS(overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    getAllBonusTokenReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    getBonusTokenReward(
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initialize(
      token: string,
      market: string,
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    maxDeposit(receiver: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(receiver: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    outstandingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    placeOffer(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    previewDeposit(assets: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    previewMint(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    previewRedeem(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    previewWithdraw(assets: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(
      destination: string,
      filledAssetToRebalance: string,
      stratProportion: BigNumberish,
      rebalAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    redeem(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    removeFilledTradeAmount(
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setBathBuddy(newBuddy: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setBathHouse(newBathHouse: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setBonusToken(
      newBonusERC20: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setFeeBPS(_feeBPS: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setFeeTo(_feeTo: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setMarket(
      newRubiconMarket: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    underlyingBalance(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingERC20(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    'withdraw(uint256)'(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'withdraw(uint256,address,address)'(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RubiconMarketAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    approveMarket(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bathBuddy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bathHouse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bonusTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancel(
      id: BigNumberish,
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    convertToAssets(shares: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertToShares(assets: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'deposit(uint256,address)'(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'deposit(uint256)'(
      assets: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    feeBPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllBonusTokenReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    getBonusTokenReward(
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      token: string,
      market: string,
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDeposit(receiver: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxMint(receiver: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRedeem(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxWithdraw(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    outstandingAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    placeOffer(
      pay_amt: BigNumberish,
      pay_gem: string,
      buy_amt: BigNumberish,
      buy_gem: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    previewDeposit(assets: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewMint(shares: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewRedeem(shares: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewWithdraw(assets: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalance(
      destination: string,
      filledAssetToRebalance: string,
      stratProportion: BigNumberish,
      rebalAmt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    redeem(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    removeFilledTradeAmount(
      amt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setBathBuddy(
      newBuddy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setBathHouse(
      newBathHouse: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setBonusToken(
      newBonusERC20: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setFeeBPS(
      _feeBPS: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMarket(
      newRubiconMarket: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    underlyingBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingERC20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'withdraw(uint256)'(
      _shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'withdraw(uint256,address,address)'(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
