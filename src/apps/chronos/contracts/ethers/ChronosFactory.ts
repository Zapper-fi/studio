/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface ChronosFactoryInterface extends utils.Interface {
  functions: {
    'MAX_FEE()': FunctionFragment;
    'MAX_REFERRAL_FEE()': FunctionFragment;
    'MAX_REFERRAL_FEE_()': FunctionFragment;
    'acceptFeeManager()': FunctionFragment;
    'allPairs(uint256)': FunctionFragment;
    'allPairsLength()': FunctionFragment;
    'createPair(address,address,bool)': FunctionFragment;
    'dibs()': FunctionFragment;
    'feeManager()': FunctionFragment;
    'getFee(bool)': FunctionFragment;
    'getInitializable()': FunctionFragment;
    'getPair(address,address,bool)': FunctionFragment;
    'initialize()': FunctionFragment;
    'isPair(address)': FunctionFragment;
    'isPaused()': FunctionFragment;
    'owner()': FunctionFragment;
    'pairCodeHash()': FunctionFragment;
    'pairs()': FunctionFragment;
    'pendingFeeManager()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setDibs(address)': FunctionFragment;
    'setFee(uint256,uint256)': FunctionFragment;
    'setFeeManager(address)': FunctionFragment;
    'setPause(bool)': FunctionFragment;
    'setReferralFee(uint256)': FunctionFragment;
    'setStakingFeeAddress(address)': FunctionFragment;
    'setStakingFees(uint256)': FunctionFragment;
    'stableFee()': FunctionFragment;
    'stakingFeeHandler()': FunctionFragment;
    'stakingNFTFee()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'volatileFee()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'MAX_FEE'
      | 'MAX_REFERRAL_FEE'
      | 'MAX_REFERRAL_FEE_'
      | 'acceptFeeManager'
      | 'allPairs'
      | 'allPairsLength'
      | 'createPair'
      | 'dibs'
      | 'feeManager'
      | 'getFee'
      | 'getInitializable'
      | 'getPair'
      | 'initialize'
      | 'isPair'
      | 'isPaused'
      | 'owner'
      | 'pairCodeHash'
      | 'pairs'
      | 'pendingFeeManager'
      | 'renounceOwnership'
      | 'setDibs'
      | 'setFee'
      | 'setFeeManager'
      | 'setPause'
      | 'setReferralFee'
      | 'setStakingFeeAddress'
      | 'setStakingFees'
      | 'stableFee'
      | 'stakingFeeHandler'
      | 'stakingNFTFee'
      | 'transferOwnership'
      | 'volatileFee',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'MAX_FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_REFERRAL_FEE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_REFERRAL_FEE_', values?: undefined): string;
  encodeFunctionData(functionFragment: 'acceptFeeManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allPairs', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'allPairsLength', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'createPair',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'dibs', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feeManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getFee', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'getInitializable', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getPair',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'initialize', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isPair', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isPaused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pairCodeHash', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pairs', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingFeeManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setDibs', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setFee',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setFeeManager', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setPause', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'setReferralFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setStakingFeeAddress', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setStakingFees', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'stableFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stakingFeeHandler', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stakingNFTFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'volatileFee', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'MAX_FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_REFERRAL_FEE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_REFERRAL_FEE_', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptFeeManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allPairs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allPairsLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createPair', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dibs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getInitializable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPair', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isPair', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pairCodeHash', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pairs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingFeeManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDibs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setReferralFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setStakingFeeAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setStakingFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stableFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakingFeeHandler', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakingNFTFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'volatileFee', data: BytesLike): Result;

  events: {
    'FeesChanged(uint256,uint256,uint256)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'PairCreated(address,address,bool,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'FeesChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PairCreated'): EventFragment;
}

export interface FeesChangedEventObject {
  volatileFee: BigNumber;
  stableFee: BigNumber;
  changeMadeTimestamp: BigNumber;
}
export type FeesChangedEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], FeesChangedEventObject>;

export type FeesChangedEventFilter = TypedEventFilter<FeesChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PairCreatedEventObject {
  token0: string;
  token1: string;
  stable: boolean;
  pair: string;
  arg4: BigNumber;
}
export type PairCreatedEvent = TypedEvent<[string, string, boolean, string, BigNumber], PairCreatedEventObject>;

export type PairCreatedEventFilter = TypedEventFilter<PairCreatedEvent>;

export interface ChronosFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChronosFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_REFERRAL_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_REFERRAL_FEE_(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptFeeManager(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    allPairs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    allPairsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    createPair(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      stable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    dibs(overrides?: CallOverrides): Promise<[string]>;

    feeManager(overrides?: CallOverrides): Promise<[string]>;

    getFee(_stable: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getInitializable(overrides?: CallOverrides): Promise<[string, string, boolean]>;

    getPair(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    isPair(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isPaused(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairCodeHash(overrides?: CallOverrides): Promise<[string]>;

    pairs(overrides?: CallOverrides): Promise<[string[]]>;

    pendingFeeManager(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setDibs(
      _dibs: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFee(
      _stableFee: PromiseOrValue<BigNumberish>,
      _volatileFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFeeManager(
      _feeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPause(
      _state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setReferralFee(
      _refFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setStakingFeeAddress(
      _feehandler: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setStakingFees(
      _newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stableFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakingFeeHandler(overrides?: CallOverrides): Promise<[string]>;

    stakingNFTFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    volatileFee(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_REFERRAL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_REFERRAL_FEE_(overrides?: CallOverrides): Promise<BigNumber>;

  acceptFeeManager(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  allPairs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

  createPair(
    tokenA: PromiseOrValue<string>,
    tokenB: PromiseOrValue<string>,
    stable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  dibs(overrides?: CallOverrides): Promise<string>;

  feeManager(overrides?: CallOverrides): Promise<string>;

  getFee(_stable: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

  getInitializable(overrides?: CallOverrides): Promise<[string, string, boolean]>;

  getPair(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<string>;

  initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  isPair(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isPaused(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pairCodeHash(overrides?: CallOverrides): Promise<string>;

  pairs(overrides?: CallOverrides): Promise<string[]>;

  pendingFeeManager(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setDibs(
    _dibs: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFee(
    _stableFee: PromiseOrValue<BigNumberish>,
    _volatileFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFeeManager(
    _feeManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPause(
    _state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setReferralFee(
    _refFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setStakingFeeAddress(
    _feehandler: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setStakingFees(
    _newFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stableFee(overrides?: CallOverrides): Promise<BigNumber>;

  stakingFeeHandler(overrides?: CallOverrides): Promise<string>;

  stakingNFTFee(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  volatileFee(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REFERRAL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REFERRAL_FEE_(overrides?: CallOverrides): Promise<BigNumber>;

    acceptFeeManager(overrides?: CallOverrides): Promise<void>;

    allPairs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      stable: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<string>;

    dibs(overrides?: CallOverrides): Promise<string>;

    feeManager(overrides?: CallOverrides): Promise<string>;

    getFee(_stable: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

    getInitializable(overrides?: CallOverrides): Promise<[string, string, boolean]>;

    getPair(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isPair(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isPaused(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pairCodeHash(overrides?: CallOverrides): Promise<string>;

    pairs(overrides?: CallOverrides): Promise<string[]>;

    pendingFeeManager(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDibs(_dibs: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setFee(
      _stableFee: PromiseOrValue<BigNumberish>,
      _volatileFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setFeeManager(_feeManager: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setPause(_state: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setReferralFee(_refFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setStakingFeeAddress(_feehandler: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setStakingFees(_newFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    stableFee(overrides?: CallOverrides): Promise<BigNumber>;

    stakingFeeHandler(overrides?: CallOverrides): Promise<string>;

    stakingNFTFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    volatileFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'FeesChanged(uint256,uint256,uint256)'(
      volatileFee?: null,
      stableFee?: null,
      changeMadeTimestamp?: null,
    ): FeesChangedEventFilter;
    FeesChanged(volatileFee?: null, stableFee?: null, changeMadeTimestamp?: null): FeesChangedEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'PairCreated(address,address,bool,address,uint256)'(
      token0?: PromiseOrValue<string> | null,
      token1?: PromiseOrValue<string> | null,
      stable?: null,
      pair?: null,
      arg4?: null,
    ): PairCreatedEventFilter;
    PairCreated(
      token0?: PromiseOrValue<string> | null,
      token1?: PromiseOrValue<string> | null,
      stable?: null,
      pair?: null,
      arg4?: null,
    ): PairCreatedEventFilter;
  };

  estimateGas: {
    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REFERRAL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REFERRAL_FEE_(overrides?: CallOverrides): Promise<BigNumber>;

    acceptFeeManager(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    allPairs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      stable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    dibs(overrides?: CallOverrides): Promise<BigNumber>;

    feeManager(overrides?: CallOverrides): Promise<BigNumber>;

    getFee(_stable: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

    getInitializable(overrides?: CallOverrides): Promise<BigNumber>;

    getPair(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    isPair(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isPaused(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    pairs(overrides?: CallOverrides): Promise<BigNumber>;

    pendingFeeManager(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setDibs(
      _dibs: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFee(
      _stableFee: PromiseOrValue<BigNumberish>,
      _volatileFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFeeManager(
      _feeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPause(
      _state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setReferralFee(
      _refFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setStakingFeeAddress(
      _feehandler: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setStakingFees(
      _newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stableFee(overrides?: CallOverrides): Promise<BigNumber>;

    stakingFeeHandler(overrides?: CallOverrides): Promise<BigNumber>;

    stakingNFTFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    volatileFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_REFERRAL_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_REFERRAL_FEE_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptFeeManager(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    allPairs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allPairsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPair(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      stable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    dibs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFee(_stable: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInitializable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPair(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    isPair(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairCodeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingFeeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setDibs(
      _dibs: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFee(
      _stableFee: PromiseOrValue<BigNumberish>,
      _volatileFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFeeManager(
      _feeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPause(
      _state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setReferralFee(
      _refFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setStakingFeeAddress(
      _feehandler: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setStakingFees(
      _newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stableFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingFeeHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingNFTFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    volatileFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
