/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export type Fraction112Struct = { n: BigNumberish; d: BigNumberish };

export type Fraction112StructOutput = [BigNumber, BigNumber] & {
  n: BigNumber;
  d: BigNumber;
};

export type AverageRatesStruct = {
  blockNumber: BigNumberish;
  rate: Fraction112Struct;
  invRate: Fraction112Struct;
};

export type AverageRatesStructOutput = [number, Fraction112StructOutput, Fraction112StructOutput] & {
  blockNumber: number;
  rate: Fraction112StructOutput;
  invRate: Fraction112StructOutput;
};

export type PoolLiquidityStruct = {
  bntTradingLiquidity: BigNumberish;
  baseTokenTradingLiquidity: BigNumberish;
  stakedBalance: BigNumberish;
};

export type PoolLiquidityStructOutput = [BigNumber, BigNumber, BigNumber] & {
  bntTradingLiquidity: BigNumber;
  baseTokenTradingLiquidity: BigNumber;
  stakedBalance: BigNumber;
};

export type PoolStruct = {
  poolToken: string;
  tradingFeePPM: BigNumberish;
  tradingEnabled: boolean;
  depositingEnabled: boolean;
  averageRates: AverageRatesStruct;
  liquidity: PoolLiquidityStruct;
};

export type PoolStructOutput = [
  string,
  number,
  boolean,
  boolean,
  AverageRatesStructOutput,
  PoolLiquidityStructOutput,
] & {
  poolToken: string;
  tradingFeePPM: number;
  tradingEnabled: boolean;
  depositingEnabled: boolean;
  averageRates: AverageRatesStructOutput;
  liquidity: PoolLiquidityStructOutput;
};

export type TradeAmountAndFeeStruct = {
  amount: BigNumberish;
  tradingFeeAmount: BigNumberish;
  networkFeeAmount: BigNumberish;
};

export type TradeAmountAndFeeStructOutput = [BigNumber, BigNumber, BigNumber] & {
  amount: BigNumber;
  tradingFeeAmount: BigNumber;
  networkFeeAmount: BigNumber;
};

export type WithdrawalAmountsStruct = {
  totalAmount: BigNumberish;
  baseTokenAmount: BigNumberish;
  bntAmount: BigNumberish;
};

export type WithdrawalAmountsStructOutput = [BigNumber, BigNumber, BigNumber] & {
  totalAmount: BigNumber;
  baseTokenAmount: BigNumber;
  bntAmount: BigNumber;
};

export interface PoolCollectionInterface extends utils.Interface {
  functions: {
    'acceptOwnership()': FunctionFragment;
    'createPool(address)': FunctionFragment;
    'defaultTradingFeePPM()': FunctionFragment;
    'depositFor(bytes32,address,address,uint256)': FunctionFragment;
    'depositingEnabled(address)': FunctionFragment;
    'disableTrading(address)': FunctionFragment;
    'enableDepositing(address,bool)': FunctionFragment;
    'enableTrading(address,uint256,uint256)': FunctionFragment;
    'isPoolStable(address)': FunctionFragment;
    'isPoolValid(address)': FunctionFragment;
    'migratePoolIn(address,(address,uint32,bool,bool,(uint32,(uint112,uint112),(uint112,uint112)),(uint128,uint128,uint256)))': FunctionFragment;
    'migratePoolOut(address,address)': FunctionFragment;
    'newOwner()': FunctionFragment;
    'onFeesCollected(address,uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'poolCount()': FunctionFragment;
    'poolData(address)': FunctionFragment;
    'poolLiquidity(address)': FunctionFragment;
    'poolToken(address)': FunctionFragment;
    'poolTokenAmountToBurn(address,uint256,uint256)': FunctionFragment;
    'poolTokenToUnderlying(address,uint256)': FunctionFragment;
    'poolType()': FunctionFragment;
    'pools()': FunctionFragment;
    'setDefaultTradingFeePPM(uint32)': FunctionFragment;
    'setTradingFeePPM(address,uint32)': FunctionFragment;
    'tradeBySourceAmount(bytes32,address,address,uint256,uint256)': FunctionFragment;
    'tradeByTargetAmount(bytes32,address,address,uint256,uint256)': FunctionFragment;
    'tradeInputAndFeeByTargetAmount(address,address,uint256)': FunctionFragment;
    'tradeOutputAndFeeBySourceAmount(address,address,uint256)': FunctionFragment;
    'tradingEnabled(address)': FunctionFragment;
    'tradingFeePPM(address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'underlyingToPoolToken(address,uint256)': FunctionFragment;
    'version()': FunctionFragment;
    'withdraw(bytes32,address,address,uint256,uint256)': FunctionFragment;
    'withdrawalAmounts(address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptOwnership'
      | 'createPool'
      | 'defaultTradingFeePPM'
      | 'depositFor'
      | 'depositingEnabled'
      | 'disableTrading'
      | 'enableDepositing'
      | 'enableTrading'
      | 'isPoolStable'
      | 'isPoolValid'
      | 'migratePoolIn'
      | 'migratePoolOut'
      | 'newOwner'
      | 'onFeesCollected'
      | 'owner'
      | 'poolCount'
      | 'poolData'
      | 'poolLiquidity'
      | 'poolToken'
      | 'poolTokenAmountToBurn'
      | 'poolTokenToUnderlying'
      | 'poolType'
      | 'pools'
      | 'setDefaultTradingFeePPM'
      | 'setTradingFeePPM'
      | 'tradeBySourceAmount'
      | 'tradeByTargetAmount'
      | 'tradeInputAndFeeByTargetAmount'
      | 'tradeOutputAndFeeBySourceAmount'
      | 'tradingEnabled'
      | 'tradingFeePPM'
      | 'transferOwnership'
      | 'underlyingToPoolToken'
      | 'version'
      | 'withdraw'
      | 'withdrawalAmounts',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'createPool', values: [string]): string;
  encodeFunctionData(functionFragment: 'defaultTradingFeePPM', values?: undefined): string;
  encodeFunctionData(functionFragment: 'depositFor', values: [BytesLike, string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'depositingEnabled', values: [string]): string;
  encodeFunctionData(functionFragment: 'disableTrading', values: [string]): string;
  encodeFunctionData(functionFragment: 'enableDepositing', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'enableTrading', values: [string, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'isPoolStable', values: [string]): string;
  encodeFunctionData(functionFragment: 'isPoolValid', values: [string]): string;
  encodeFunctionData(functionFragment: 'migratePoolIn', values: [string, PoolStruct]): string;
  encodeFunctionData(functionFragment: 'migratePoolOut', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'newOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'onFeesCollected', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolData', values: [string]): string;
  encodeFunctionData(functionFragment: 'poolLiquidity', values: [string]): string;
  encodeFunctionData(functionFragment: 'poolToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'poolTokenAmountToBurn', values: [string, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'poolTokenToUnderlying', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'poolType', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pools', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setDefaultTradingFeePPM', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setTradingFeePPM', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'tradeBySourceAmount',
    values: [BytesLike, string, string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'tradeByTargetAmount',
    values: [BytesLike, string, string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'tradeInputAndFeeByTargetAmount',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'tradeOutputAndFeeBySourceAmount',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'tradingEnabled', values: [string]): string;
  encodeFunctionData(functionFragment: 'tradingFeePPM', values: [string]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'underlyingToPoolToken', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'version', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BytesLike, string, string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'withdrawalAmounts', values: [string, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'defaultTradingFeePPM', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositingEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableTrading', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableDepositing', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableTrading', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isPoolStable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isPoolValid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migratePoolIn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migratePoolOut', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'newOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onFeesCollected', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolTokenAmountToBurn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolTokenToUnderlying', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolType', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDefaultTradingFeePPM', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTradingFeePPM', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tradeBySourceAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tradeByTargetAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tradeInputAndFeeByTargetAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tradeOutputAndFeeBySourceAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tradingEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tradingFeePPM', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'underlyingToPoolToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawalAmounts', data: BytesLike): Result;

  events: {
    'DefaultTradingFeePPMUpdated(uint32,uint32)': EventFragment;
    'DepositingEnabled(address,bool)': EventFragment;
    'OwnerUpdate(address,address)': EventFragment;
    'TokensDeposited(bytes32,address,address,uint256,uint256)': EventFragment;
    'TokensWithdrawn(bytes32,address,address,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'TotalLiquidityUpdated(bytes32,address,uint256,uint256,uint256)': EventFragment;
    'TradingEnabled(address,bool,uint8)': EventFragment;
    'TradingFeePPMUpdated(address,uint32,uint32)': EventFragment;
    'TradingLiquidityUpdated(bytes32,address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'DefaultTradingFeePPMUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositingEnabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerUpdate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokensDeposited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokensWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TotalLiquidityUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TradingEnabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TradingFeePPMUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TradingLiquidityUpdated'): EventFragment;
}

export interface DefaultTradingFeePPMUpdatedEventObject {
  prevFeePPM: number;
  newFeePPM: number;
}
export type DefaultTradingFeePPMUpdatedEvent = TypedEvent<[number, number], DefaultTradingFeePPMUpdatedEventObject>;

export type DefaultTradingFeePPMUpdatedEventFilter = TypedEventFilter<DefaultTradingFeePPMUpdatedEvent>;

export interface DepositingEnabledEventObject {
  pool: string;
  newStatus: boolean;
}
export type DepositingEnabledEvent = TypedEvent<[string, boolean], DepositingEnabledEventObject>;

export type DepositingEnabledEventFilter = TypedEventFilter<DepositingEnabledEvent>;

export interface OwnerUpdateEventObject {
  prevOwner: string;
  newOwner: string;
}
export type OwnerUpdateEvent = TypedEvent<[string, string], OwnerUpdateEventObject>;

export type OwnerUpdateEventFilter = TypedEventFilter<OwnerUpdateEvent>;

export interface TokensDepositedEventObject {
  contextId: string;
  provider: string;
  token: string;
  tokenAmount: BigNumber;
  poolTokenAmount: BigNumber;
}
export type TokensDepositedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TokensDepositedEventObject
>;

export type TokensDepositedEventFilter = TypedEventFilter<TokensDepositedEvent>;

export interface TokensWithdrawnEventObject {
  contextId: string;
  provider: string;
  token: string;
  tokenAmount: BigNumber;
  poolTokenAmount: BigNumber;
  externalProtectionBaseTokenAmount: BigNumber;
  bntAmount: BigNumber;
  withdrawalFeeAmount: BigNumber;
}
export type TokensWithdrawnEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  TokensWithdrawnEventObject
>;

export type TokensWithdrawnEventFilter = TypedEventFilter<TokensWithdrawnEvent>;

export interface TotalLiquidityUpdatedEventObject {
  contextId: string;
  pool: string;
  liquidity: BigNumber;
  stakedBalance: BigNumber;
  poolTokenSupply: BigNumber;
}
export type TotalLiquidityUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  TotalLiquidityUpdatedEventObject
>;

export type TotalLiquidityUpdatedEventFilter = TypedEventFilter<TotalLiquidityUpdatedEvent>;

export interface TradingEnabledEventObject {
  pool: string;
  newStatus: boolean;
  reason: number;
}
export type TradingEnabledEvent = TypedEvent<[string, boolean, number], TradingEnabledEventObject>;

export type TradingEnabledEventFilter = TypedEventFilter<TradingEnabledEvent>;

export interface TradingFeePPMUpdatedEventObject {
  pool: string;
  prevFeePPM: number;
  newFeePPM: number;
}
export type TradingFeePPMUpdatedEvent = TypedEvent<[string, number, number], TradingFeePPMUpdatedEventObject>;

export type TradingFeePPMUpdatedEventFilter = TypedEventFilter<TradingFeePPMUpdatedEvent>;

export interface TradingLiquidityUpdatedEventObject {
  contextId: string;
  pool: string;
  token: string;
  prevLiquidity: BigNumber;
  newLiquidity: BigNumber;
}
export type TradingLiquidityUpdatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TradingLiquidityUpdatedEventObject
>;

export type TradingLiquidityUpdatedEventFilter = TypedEventFilter<TradingLiquidityUpdatedEvent>;

export interface PoolCollection extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolCollectionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    createPool(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    defaultTradingFeePPM(overrides?: CallOverrides): Promise<[number]>;

    depositFor(
      contextId: BytesLike,
      provider: string,
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositingEnabled(pool: string, overrides?: CallOverrides): Promise<[boolean]>;

    disableTrading(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    enableDepositing(
      pool: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    enableTrading(
      pool: string,
      bntVirtualBalance: BigNumberish,
      baseTokenVirtualBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isPoolStable(pool: string, overrides?: CallOverrides): Promise<[boolean]>;

    isPoolValid(pool: string, overrides?: CallOverrides): Promise<[boolean]>;

    migratePoolIn(
      pool: string,
      data: PoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    migratePoolOut(
      pool: string,
      targetPoolCollection: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    newOwner(overrides?: CallOverrides): Promise<[string]>;

    onFeesCollected(
      pool: string,
      feeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolData(pool: string, overrides?: CallOverrides): Promise<[PoolStructOutput]>;

    poolLiquidity(pool: string, overrides?: CallOverrides): Promise<[PoolLiquidityStructOutput]>;

    poolToken(pool: string, overrides?: CallOverrides): Promise<[string]>;

    poolTokenAmountToBurn(
      pool: string,
      tokenAmountToDistribute: BigNumberish,
      protocolPoolTokenAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    poolTokenToUnderlying(pool: string, poolTokenAmount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    poolType(overrides?: CallOverrides): Promise<[number]>;

    pools(overrides?: CallOverrides): Promise<[string[]]>;

    setDefaultTradingFeePPM(
      newDefaultTradingFeePPM: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTradingFeePPM(
      pool: string,
      newTradingFeePPM: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    tradeBySourceAmount(
      contextId: BytesLike,
      sourceToken: string,
      targetToken: string,
      sourceAmount: BigNumberish,
      minReturnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    tradeByTargetAmount(
      contextId: BytesLike,
      sourceToken: string,
      targetToken: string,
      targetAmount: BigNumberish,
      maxSourceAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    tradeInputAndFeeByTargetAmount(
      sourceToken: string,
      targetToken: string,
      targetAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[TradeAmountAndFeeStructOutput]>;

    tradeOutputAndFeeBySourceAmount(
      sourceToken: string,
      targetToken: string,
      sourceAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[TradeAmountAndFeeStructOutput]>;

    tradingEnabled(pool: string, overrides?: CallOverrides): Promise<[boolean]>;

    tradingFeePPM(pool: string, overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      ownerCandidate: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    underlyingToPoolToken(pool: string, tokenAmount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    version(overrides?: CallOverrides): Promise<[number]>;

    withdraw(
      contextId: BytesLike,
      provider: string,
      pool: string,
      poolTokenAmount: BigNumberish,
      baseTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawalAmounts(
      pool: string,
      poolTokenAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[WithdrawalAmountsStructOutput]>;
  };

  acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  createPool(token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  defaultTradingFeePPM(overrides?: CallOverrides): Promise<number>;

  depositFor(
    contextId: BytesLike,
    provider: string,
    pool: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositingEnabled(pool: string, overrides?: CallOverrides): Promise<boolean>;

  disableTrading(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  enableDepositing(
    pool: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  enableTrading(
    pool: string,
    bntVirtualBalance: BigNumberish,
    baseTokenVirtualBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isPoolStable(pool: string, overrides?: CallOverrides): Promise<boolean>;

  isPoolValid(pool: string, overrides?: CallOverrides): Promise<boolean>;

  migratePoolIn(
    pool: string,
    data: PoolStruct,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  migratePoolOut(
    pool: string,
    targetPoolCollection: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  newOwner(overrides?: CallOverrides): Promise<string>;

  onFeesCollected(
    pool: string,
    feeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolCount(overrides?: CallOverrides): Promise<BigNumber>;

  poolData(pool: string, overrides?: CallOverrides): Promise<PoolStructOutput>;

  poolLiquidity(pool: string, overrides?: CallOverrides): Promise<PoolLiquidityStructOutput>;

  poolToken(pool: string, overrides?: CallOverrides): Promise<string>;

  poolTokenAmountToBurn(
    pool: string,
    tokenAmountToDistribute: BigNumberish,
    protocolPoolTokenAmount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  poolTokenToUnderlying(pool: string, poolTokenAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  poolType(overrides?: CallOverrides): Promise<number>;

  pools(overrides?: CallOverrides): Promise<string[]>;

  setDefaultTradingFeePPM(
    newDefaultTradingFeePPM: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setTradingFeePPM(
    pool: string,
    newTradingFeePPM: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  tradeBySourceAmount(
    contextId: BytesLike,
    sourceToken: string,
    targetToken: string,
    sourceAmount: BigNumberish,
    minReturnAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  tradeByTargetAmount(
    contextId: BytesLike,
    sourceToken: string,
    targetToken: string,
    targetAmount: BigNumberish,
    maxSourceAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  tradeInputAndFeeByTargetAmount(
    sourceToken: string,
    targetToken: string,
    targetAmount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<TradeAmountAndFeeStructOutput>;

  tradeOutputAndFeeBySourceAmount(
    sourceToken: string,
    targetToken: string,
    sourceAmount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<TradeAmountAndFeeStructOutput>;

  tradingEnabled(pool: string, overrides?: CallOverrides): Promise<boolean>;

  tradingFeePPM(pool: string, overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    ownerCandidate: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  underlyingToPoolToken(pool: string, tokenAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<number>;

  withdraw(
    contextId: BytesLike,
    provider: string,
    pool: string,
    poolTokenAmount: BigNumberish,
    baseTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawalAmounts(
    pool: string,
    poolTokenAmount: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<WithdrawalAmountsStructOutput>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    createPool(token: string, overrides?: CallOverrides): Promise<void>;

    defaultTradingFeePPM(overrides?: CallOverrides): Promise<number>;

    depositFor(
      contextId: BytesLike,
      provider: string,
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    depositingEnabled(pool: string, overrides?: CallOverrides): Promise<boolean>;

    disableTrading(pool: string, overrides?: CallOverrides): Promise<void>;

    enableDepositing(pool: string, status: boolean, overrides?: CallOverrides): Promise<void>;

    enableTrading(
      pool: string,
      bntVirtualBalance: BigNumberish,
      baseTokenVirtualBalance: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    isPoolStable(pool: string, overrides?: CallOverrides): Promise<boolean>;

    isPoolValid(pool: string, overrides?: CallOverrides): Promise<boolean>;

    migratePoolIn(pool: string, data: PoolStruct, overrides?: CallOverrides): Promise<void>;

    migratePoolOut(pool: string, targetPoolCollection: string, overrides?: CallOverrides): Promise<void>;

    newOwner(overrides?: CallOverrides): Promise<string>;

    onFeesCollected(pool: string, feeAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolCount(overrides?: CallOverrides): Promise<BigNumber>;

    poolData(pool: string, overrides?: CallOverrides): Promise<PoolStructOutput>;

    poolLiquidity(pool: string, overrides?: CallOverrides): Promise<PoolLiquidityStructOutput>;

    poolToken(pool: string, overrides?: CallOverrides): Promise<string>;

    poolTokenAmountToBurn(
      pool: string,
      tokenAmountToDistribute: BigNumberish,
      protocolPoolTokenAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    poolTokenToUnderlying(pool: string, poolTokenAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    poolType(overrides?: CallOverrides): Promise<number>;

    pools(overrides?: CallOverrides): Promise<string[]>;

    setDefaultTradingFeePPM(newDefaultTradingFeePPM: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setTradingFeePPM(pool: string, newTradingFeePPM: BigNumberish, overrides?: CallOverrides): Promise<void>;

    tradeBySourceAmount(
      contextId: BytesLike,
      sourceToken: string,
      targetToken: string,
      sourceAmount: BigNumberish,
      minReturnAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<TradeAmountAndFeeStructOutput>;

    tradeByTargetAmount(
      contextId: BytesLike,
      sourceToken: string,
      targetToken: string,
      targetAmount: BigNumberish,
      maxSourceAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<TradeAmountAndFeeStructOutput>;

    tradeInputAndFeeByTargetAmount(
      sourceToken: string,
      targetToken: string,
      targetAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<TradeAmountAndFeeStructOutput>;

    tradeOutputAndFeeBySourceAmount(
      sourceToken: string,
      targetToken: string,
      sourceAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<TradeAmountAndFeeStructOutput>;

    tradingEnabled(pool: string, overrides?: CallOverrides): Promise<boolean>;

    tradingFeePPM(pool: string, overrides?: CallOverrides): Promise<number>;

    transferOwnership(ownerCandidate: string, overrides?: CallOverrides): Promise<void>;

    underlyingToPoolToken(pool: string, tokenAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<number>;

    withdraw(
      contextId: BytesLike,
      provider: string,
      pool: string,
      poolTokenAmount: BigNumberish,
      baseTokenAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    withdrawalAmounts(
      pool: string,
      poolTokenAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<WithdrawalAmountsStructOutput>;
  };

  filters: {
    'DefaultTradingFeePPMUpdated(uint32,uint32)'(
      prevFeePPM?: null,
      newFeePPM?: null,
    ): DefaultTradingFeePPMUpdatedEventFilter;
    DefaultTradingFeePPMUpdated(prevFeePPM?: null, newFeePPM?: null): DefaultTradingFeePPMUpdatedEventFilter;

    'DepositingEnabled(address,bool)'(pool?: string | null, newStatus?: boolean | null): DepositingEnabledEventFilter;
    DepositingEnabled(pool?: string | null, newStatus?: boolean | null): DepositingEnabledEventFilter;

    'OwnerUpdate(address,address)'(prevOwner?: string | null, newOwner?: string | null): OwnerUpdateEventFilter;
    OwnerUpdate(prevOwner?: string | null, newOwner?: string | null): OwnerUpdateEventFilter;

    'TokensDeposited(bytes32,address,address,uint256,uint256)'(
      contextId?: BytesLike | null,
      provider?: string | null,
      token?: string | null,
      tokenAmount?: null,
      poolTokenAmount?: null,
    ): TokensDepositedEventFilter;
    TokensDeposited(
      contextId?: BytesLike | null,
      provider?: string | null,
      token?: string | null,
      tokenAmount?: null,
      poolTokenAmount?: null,
    ): TokensDepositedEventFilter;

    'TokensWithdrawn(bytes32,address,address,uint256,uint256,uint256,uint256,uint256)'(
      contextId?: BytesLike | null,
      provider?: string | null,
      token?: string | null,
      tokenAmount?: null,
      poolTokenAmount?: null,
      externalProtectionBaseTokenAmount?: null,
      bntAmount?: null,
      withdrawalFeeAmount?: null,
    ): TokensWithdrawnEventFilter;
    TokensWithdrawn(
      contextId?: BytesLike | null,
      provider?: string | null,
      token?: string | null,
      tokenAmount?: null,
      poolTokenAmount?: null,
      externalProtectionBaseTokenAmount?: null,
      bntAmount?: null,
      withdrawalFeeAmount?: null,
    ): TokensWithdrawnEventFilter;

    'TotalLiquidityUpdated(bytes32,address,uint256,uint256,uint256)'(
      contextId?: BytesLike | null,
      pool?: string | null,
      liquidity?: null,
      stakedBalance?: null,
      poolTokenSupply?: null,
    ): TotalLiquidityUpdatedEventFilter;
    TotalLiquidityUpdated(
      contextId?: BytesLike | null,
      pool?: string | null,
      liquidity?: null,
      stakedBalance?: null,
      poolTokenSupply?: null,
    ): TotalLiquidityUpdatedEventFilter;

    'TradingEnabled(address,bool,uint8)'(
      pool?: string | null,
      newStatus?: boolean | null,
      reason?: BigNumberish | null,
    ): TradingEnabledEventFilter;
    TradingEnabled(
      pool?: string | null,
      newStatus?: boolean | null,
      reason?: BigNumberish | null,
    ): TradingEnabledEventFilter;

    'TradingFeePPMUpdated(address,uint32,uint32)'(
      pool?: string | null,
      prevFeePPM?: null,
      newFeePPM?: null,
    ): TradingFeePPMUpdatedEventFilter;
    TradingFeePPMUpdated(pool?: string | null, prevFeePPM?: null, newFeePPM?: null): TradingFeePPMUpdatedEventFilter;

    'TradingLiquidityUpdated(bytes32,address,address,uint256,uint256)'(
      contextId?: BytesLike | null,
      pool?: string | null,
      token?: string | null,
      prevLiquidity?: null,
      newLiquidity?: null,
    ): TradingLiquidityUpdatedEventFilter;
    TradingLiquidityUpdated(
      contextId?: BytesLike | null,
      pool?: string | null,
      token?: string | null,
      prevLiquidity?: null,
      newLiquidity?: null,
    ): TradingLiquidityUpdatedEventFilter;
  };

  estimateGas: {
    acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    createPool(token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    defaultTradingFeePPM(overrides?: CallOverrides): Promise<BigNumber>;

    depositFor(
      contextId: BytesLike,
      provider: string,
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    depositingEnabled(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    disableTrading(pool: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    enableDepositing(
      pool: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    enableTrading(
      pool: string,
      bntVirtualBalance: BigNumberish,
      baseTokenVirtualBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isPoolStable(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    isPoolValid(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    migratePoolIn(
      pool: string,
      data: PoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    migratePoolOut(
      pool: string,
      targetPoolCollection: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    newOwner(overrides?: CallOverrides): Promise<BigNumber>;

    onFeesCollected(
      pool: string,
      feeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolCount(overrides?: CallOverrides): Promise<BigNumber>;

    poolData(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolLiquidity(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolToken(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolTokenAmountToBurn(
      pool: string,
      tokenAmountToDistribute: BigNumberish,
      protocolPoolTokenAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    poolTokenToUnderlying(pool: string, poolTokenAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    poolType(overrides?: CallOverrides): Promise<BigNumber>;

    pools(overrides?: CallOverrides): Promise<BigNumber>;

    setDefaultTradingFeePPM(
      newDefaultTradingFeePPM: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setTradingFeePPM(
      pool: string,
      newTradingFeePPM: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    tradeBySourceAmount(
      contextId: BytesLike,
      sourceToken: string,
      targetToken: string,
      sourceAmount: BigNumberish,
      minReturnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    tradeByTargetAmount(
      contextId: BytesLike,
      sourceToken: string,
      targetToken: string,
      targetAmount: BigNumberish,
      maxSourceAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    tradeInputAndFeeByTargetAmount(
      sourceToken: string,
      targetToken: string,
      targetAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tradeOutputAndFeeBySourceAmount(
      sourceToken: string,
      targetToken: string,
      sourceAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tradingEnabled(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    tradingFeePPM(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      ownerCandidate: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    underlyingToPoolToken(pool: string, tokenAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      contextId: BytesLike,
      provider: string,
      pool: string,
      poolTokenAmount: BigNumberish,
      baseTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawalAmounts(pool: string, poolTokenAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    createPool(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    defaultTradingFeePPM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositFor(
      contextId: BytesLike,
      provider: string,
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositingEnabled(pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableTrading(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    enableDepositing(
      pool: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    enableTrading(
      pool: string,
      bntVirtualBalance: BigNumberish,
      baseTokenVirtualBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isPoolStable(pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPoolValid(pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migratePoolIn(
      pool: string,
      data: PoolStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    migratePoolOut(
      pool: string,
      targetPoolCollection: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    newOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onFeesCollected(
      pool: string,
      feeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolData(pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolLiquidity(pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolToken(pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolTokenAmountToBurn(
      pool: string,
      tokenAmountToDistribute: BigNumberish,
      protocolPoolTokenAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    poolTokenToUnderlying(
      pool: string,
      poolTokenAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    poolType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDefaultTradingFeePPM(
      newDefaultTradingFeePPM: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setTradingFeePPM(
      pool: string,
      newTradingFeePPM: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    tradeBySourceAmount(
      contextId: BytesLike,
      sourceToken: string,
      targetToken: string,
      sourceAmount: BigNumberish,
      minReturnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    tradeByTargetAmount(
      contextId: BytesLike,
      sourceToken: string,
      targetToken: string,
      targetAmount: BigNumberish,
      maxSourceAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    tradeInputAndFeeByTargetAmount(
      sourceToken: string,
      targetToken: string,
      targetAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    tradeOutputAndFeeBySourceAmount(
      sourceToken: string,
      targetToken: string,
      sourceAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    tradingEnabled(pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingFeePPM(pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      ownerCandidate: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    underlyingToPoolToken(
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      contextId: BytesLike,
      provider: string,
      pool: string,
      poolTokenAmount: BigNumberish,
      baseTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawalAmounts(
      pool: string,
      poolTokenAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
