/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface BancorNetworkInterface extends utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'addPoolCollection(address)': FunctionFragment;
    'cancelWithdrawal(uint256)': FunctionFragment;
    'collectionByPool(address)': FunctionFragment;
    'createPool(uint16,address)': FunctionFragment;
    'createPools(uint16,address[])': FunctionFragment;
    'deposit(address,uint256)': FunctionFragment;
    'depositFor(address,address,uint256)': FunctionFragment;
    'depositForPermitted(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'depositPermitted(address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'flashLoan(address,uint256,address,bytes)': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'getRoleMember(bytes32,uint256)': FunctionFragment;
    'getRoleMemberCount(bytes32)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'initWithdrawal(address,uint256)': FunctionFragment;
    'initWithdrawalPermitted(address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'initialize(address,address,address)': FunctionFragment;
    'isPaused()': FunctionFragment;
    'isPoolValid(address)': FunctionFragment;
    'latestPoolCollection(uint16)': FunctionFragment;
    'liquidityPools()': FunctionFragment;
    'migrateLiquidity(address,address,uint256,uint256,uint256)': FunctionFragment;
    'migratePools(address[])': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'pendingNetworkFeeAmount()': FunctionFragment;
    'poolCollections()': FunctionFragment;
    'postUpgrade(bytes)': FunctionFragment;
    'removePoolCollection(address,address)': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'resume()': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'roleAdmin()': FunctionFragment;
    'roleEmergencyStopper()': FunctionFragment;
    'roleMigrationManager()': FunctionFragment;
    'roleNetworkFeeManager()': FunctionFragment;
    'setLatestPoolCollection(address)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'tradeBySourceAmount(address,address,uint256,uint256,uint256,address)': FunctionFragment;
    'tradeBySourceAmountPermitted(address,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)': FunctionFragment;
    'tradeByTargetAmount(address,address,uint256,uint256,uint256,address)': FunctionFragment;
    'tradeByTargetAmountPermitted(address,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)': FunctionFragment;
    'version()': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdrawNetworkFees(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DEFAULT_ADMIN_ROLE'
      | 'addPoolCollection'
      | 'cancelWithdrawal'
      | 'collectionByPool'
      | 'createPool'
      | 'createPools'
      | 'deposit'
      | 'depositFor'
      | 'depositForPermitted'
      | 'depositPermitted'
      | 'flashLoan'
      | 'getRoleAdmin'
      | 'getRoleMember'
      | 'getRoleMemberCount'
      | 'grantRole'
      | 'hasRole'
      | 'initWithdrawal'
      | 'initWithdrawalPermitted'
      | 'initialize'
      | 'isPaused'
      | 'isPoolValid'
      | 'latestPoolCollection'
      | 'liquidityPools'
      | 'migrateLiquidity'
      | 'migratePools'
      | 'pause'
      | 'paused'
      | 'pendingNetworkFeeAmount'
      | 'poolCollections'
      | 'postUpgrade'
      | 'removePoolCollection'
      | 'renounceRole'
      | 'resume'
      | 'revokeRole'
      | 'roleAdmin'
      | 'roleEmergencyStopper'
      | 'roleMigrationManager'
      | 'roleNetworkFeeManager'
      | 'setLatestPoolCollection'
      | 'supportsInterface'
      | 'tradeBySourceAmount'
      | 'tradeBySourceAmountPermitted'
      | 'tradeByTargetAmount'
      | 'tradeByTargetAmountPermitted'
      | 'version'
      | 'withdraw'
      | 'withdrawNetworkFees',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addPoolCollection', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'cancelWithdrawal', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'collectionByPool', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'createPool',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'createPools',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositFor',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositForPermitted',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositPermitted',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'flashLoan',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'getRoleMember',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getRoleMemberCount', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'initWithdrawal',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'initWithdrawalPermitted',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'isPaused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isPoolValid', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'latestPoolCollection', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'liquidityPools', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'migrateLiquidity',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'migratePools', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingNetworkFeeAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolCollections', values?: undefined): string;
  encodeFunctionData(functionFragment: 'postUpgrade', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'removePoolCollection',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'resume', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'roleAdmin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'roleEmergencyStopper', values?: undefined): string;
  encodeFunctionData(functionFragment: 'roleMigrationManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'roleNetworkFeeManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setLatestPoolCollection', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'tradeBySourceAmount',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'tradeBySourceAmountPermitted',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'tradeByTargetAmount',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'tradeByTargetAmountPermitted',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'version', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'withdrawNetworkFees', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addPoolCollection', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancelWithdrawal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collectionByPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createPools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositForPermitted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositPermitted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'flashLoan', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleMember', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleMemberCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initWithdrawal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initWithdrawalPermitted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isPoolValid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'latestPoolCollection', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidityPools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migrateLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migratePools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingNetworkFeeAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolCollections', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'postUpgrade', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removePoolCollection', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resume', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'roleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'roleEmergencyStopper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'roleMigrationManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'roleNetworkFeeManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLatestPoolCollection', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tradeBySourceAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tradeBySourceAmountPermitted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tradeByTargetAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tradeByTargetAmountPermitted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawNetworkFees', data: BytesLike): Result;

  events: {
    'FlashLoanCompleted(address,address,uint256,uint256)': EventFragment;
    'FundsMigrated(bytes32,address,address,uint256,uint256,uint256)': EventFragment;
    'LatestPoolCollectionReplaced(uint16,address,address)': EventFragment;
    'NetworkFeesWithdrawn(address,address,uint256)': EventFragment;
    'Paused(address)': EventFragment;
    'PoolAdded(address,address)': EventFragment;
    'PoolCollectionAdded(uint16,address)': EventFragment;
    'PoolCollectionRemoved(uint16,address)': EventFragment;
    'PoolCreated(address,address)': EventFragment;
    'PoolRemoved(address,address)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'TokensTraded(bytes32,address,address,uint256,uint256,uint256,uint256,uint256,address)': EventFragment;
    'Unpaused(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'FlashLoanCompleted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FundsMigrated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LatestPoolCollectionReplaced'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NetworkFeesWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolCollectionAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolCollectionRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokensTraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export interface FlashLoanCompletedEventObject {
  token: string;
  borrower: string;
  amount: BigNumber;
  feeAmount: BigNumber;
}
export type FlashLoanCompletedEvent = TypedEvent<[string, string, BigNumber, BigNumber], FlashLoanCompletedEventObject>;

export type FlashLoanCompletedEventFilter = TypedEventFilter<FlashLoanCompletedEvent>;

export interface FundsMigratedEventObject {
  contextId: string;
  token: string;
  provider: string;
  amount: BigNumber;
  availableAmount: BigNumber;
  originalAmount: BigNumber;
}
export type FundsMigratedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  FundsMigratedEventObject
>;

export type FundsMigratedEventFilter = TypedEventFilter<FundsMigratedEvent>;

export interface LatestPoolCollectionReplacedEventObject {
  poolType: number;
  prevPoolCollection: string;
  newPoolCollection: string;
}
export type LatestPoolCollectionReplacedEvent = TypedEvent<
  [number, string, string],
  LatestPoolCollectionReplacedEventObject
>;

export type LatestPoolCollectionReplacedEventFilter = TypedEventFilter<LatestPoolCollectionReplacedEvent>;

export interface NetworkFeesWithdrawnEventObject {
  caller: string;
  recipient: string;
  amount: BigNumber;
}
export type NetworkFeesWithdrawnEvent = TypedEvent<[string, string, BigNumber], NetworkFeesWithdrawnEventObject>;

export type NetworkFeesWithdrawnEventFilter = TypedEventFilter<NetworkFeesWithdrawnEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PoolAddedEventObject {
  pool: string;
  poolCollection: string;
}
export type PoolAddedEvent = TypedEvent<[string, string], PoolAddedEventObject>;

export type PoolAddedEventFilter = TypedEventFilter<PoolAddedEvent>;

export interface PoolCollectionAddedEventObject {
  poolType: number;
  poolCollection: string;
}
export type PoolCollectionAddedEvent = TypedEvent<[number, string], PoolCollectionAddedEventObject>;

export type PoolCollectionAddedEventFilter = TypedEventFilter<PoolCollectionAddedEvent>;

export interface PoolCollectionRemovedEventObject {
  poolType: number;
  poolCollection: string;
}
export type PoolCollectionRemovedEvent = TypedEvent<[number, string], PoolCollectionRemovedEventObject>;

export type PoolCollectionRemovedEventFilter = TypedEventFilter<PoolCollectionRemovedEvent>;

export interface PoolCreatedEventObject {
  pool: string;
  poolCollection: string;
}
export type PoolCreatedEvent = TypedEvent<[string, string], PoolCreatedEventObject>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export interface PoolRemovedEventObject {
  pool: string;
  poolCollection: string;
}
export type PoolRemovedEvent = TypedEvent<[string, string], PoolRemovedEventObject>;

export type PoolRemovedEventFilter = TypedEventFilter<PoolRemovedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TokensTradedEventObject {
  contextId: string;
  sourceToken: string;
  targetToken: string;
  sourceAmount: BigNumber;
  targetAmount: BigNumber;
  bntAmount: BigNumber;
  targetFeeAmount: BigNumber;
  bntFeeAmount: BigNumber;
  trader: string;
}
export type TokensTradedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string],
  TokensTradedEventObject
>;

export type TokensTradedEventFilter = TypedEventFilter<TokensTradedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface BancorNetwork extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BancorNetworkInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addPoolCollection(
      poolCollection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    cancelWithdrawal(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    collectionByPool(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    createPool(
      poolType: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createPools(
      poolType: PromiseOrValue<BigNumberish>,
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deposit(
      pool: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositFor(
      provider: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositForPermitted(
      provider: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositPermitted(
      pool: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    flashLoan(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    initWithdrawal(
      poolToken: PromiseOrValue<string>,
      poolTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initWithdrawalPermitted(
      poolToken: PromiseOrValue<string>,
      poolTokenAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initialize(
      initBNTPool: PromiseOrValue<string>,
      initPendingWithdrawals: PromiseOrValue<string>,
      initPoolMigrator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isPaused(overrides?: CallOverrides): Promise<[boolean]>;

    isPoolValid(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    latestPoolCollection(poolType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    liquidityPools(overrides?: CallOverrides): Promise<[string[]]>;

    migrateLiquidity(
      token: PromiseOrValue<string>,
      provider: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      availableAmount: PromiseOrValue<BigNumberish>,
      originalAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    migratePools(
      pools: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingNetworkFeeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolCollections(overrides?: CallOverrides): Promise<[string[]]>;

    postUpgrade(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removePoolCollection(
      poolCollection: PromiseOrValue<string>,
      newLatestPoolCollection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    resume(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    roleAdmin(overrides?: CallOverrides): Promise<[string]>;

    roleEmergencyStopper(overrides?: CallOverrides): Promise<[string]>;

    roleMigrationManager(overrides?: CallOverrides): Promise<[string]>;

    roleNetworkFeeManager(overrides?: CallOverrides): Promise<[string]>;

    setLatestPoolCollection(
      poolCollection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

    tradeBySourceAmount(
      sourceToken: PromiseOrValue<string>,
      targetToken: PromiseOrValue<string>,
      sourceAmount: PromiseOrValue<BigNumberish>,
      minReturnAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    tradeBySourceAmountPermitted(
      sourceToken: PromiseOrValue<string>,
      targetToken: PromiseOrValue<string>,
      sourceAmount: PromiseOrValue<BigNumberish>,
      minReturnAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    tradeByTargetAmount(
      sourceToken: PromiseOrValue<string>,
      targetToken: PromiseOrValue<string>,
      targetAmount: PromiseOrValue<BigNumberish>,
      maxSourceAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    tradeByTargetAmountPermitted(
      sourceToken: PromiseOrValue<string>,
      targetToken: PromiseOrValue<string>,
      targetAmount: PromiseOrValue<BigNumberish>,
      maxSourceAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[number]>;

    withdraw(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawNetworkFees(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  addPoolCollection(
    poolCollection: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  cancelWithdrawal(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  collectionByPool(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  createPool(
    poolType: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createPools(
    poolType: PromiseOrValue<BigNumberish>,
    tokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deposit(
    pool: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositFor(
    provider: PromiseOrValue<string>,
    pool: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositForPermitted(
    provider: PromiseOrValue<string>,
    pool: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositPermitted(
    pool: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  flashLoan(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  initWithdrawal(
    poolToken: PromiseOrValue<string>,
    poolTokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initWithdrawalPermitted(
    poolToken: PromiseOrValue<string>,
    poolTokenAmount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initialize(
    initBNTPool: PromiseOrValue<string>,
    initPendingWithdrawals: PromiseOrValue<string>,
    initPoolMigrator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isPaused(overrides?: CallOverrides): Promise<boolean>;

  isPoolValid(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  latestPoolCollection(poolType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  liquidityPools(overrides?: CallOverrides): Promise<string[]>;

  migrateLiquidity(
    token: PromiseOrValue<string>,
    provider: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    availableAmount: PromiseOrValue<BigNumberish>,
    originalAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  migratePools(
    pools: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingNetworkFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  poolCollections(overrides?: CallOverrides): Promise<string[]>;

  postUpgrade(
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removePoolCollection(
    poolCollection: PromiseOrValue<string>,
    newLatestPoolCollection: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  resume(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  roleAdmin(overrides?: CallOverrides): Promise<string>;

  roleEmergencyStopper(overrides?: CallOverrides): Promise<string>;

  roleMigrationManager(overrides?: CallOverrides): Promise<string>;

  roleNetworkFeeManager(overrides?: CallOverrides): Promise<string>;

  setLatestPoolCollection(
    poolCollection: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  tradeBySourceAmount(
    sourceToken: PromiseOrValue<string>,
    targetToken: PromiseOrValue<string>,
    sourceAmount: PromiseOrValue<BigNumberish>,
    minReturnAmount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    beneficiary: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  tradeBySourceAmountPermitted(
    sourceToken: PromiseOrValue<string>,
    targetToken: PromiseOrValue<string>,
    sourceAmount: PromiseOrValue<BigNumberish>,
    minReturnAmount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    beneficiary: PromiseOrValue<string>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  tradeByTargetAmount(
    sourceToken: PromiseOrValue<string>,
    targetToken: PromiseOrValue<string>,
    targetAmount: PromiseOrValue<BigNumberish>,
    maxSourceAmount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    beneficiary: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  tradeByTargetAmountPermitted(
    sourceToken: PromiseOrValue<string>,
    targetToken: PromiseOrValue<string>,
    targetAmount: PromiseOrValue<BigNumberish>,
    maxSourceAmount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    beneficiary: PromiseOrValue<string>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<number>;

  withdraw(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawNetworkFees(
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    addPoolCollection(poolCollection: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    cancelWithdrawal(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    collectionByPool(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    createPool(
      poolType: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    createPools(
      poolType: PromiseOrValue<BigNumberish>,
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    deposit(
      pool: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    depositFor(
      provider: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    depositForPermitted(
      provider: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    depositPermitted(
      pool: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    flashLoan(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    initWithdrawal(
      poolToken: PromiseOrValue<string>,
      poolTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initWithdrawalPermitted(
      poolToken: PromiseOrValue<string>,
      poolTokenAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(
      initBNTPool: PromiseOrValue<string>,
      initPendingWithdrawals: PromiseOrValue<string>,
      initPoolMigrator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    isPaused(overrides?: CallOverrides): Promise<boolean>;

    isPoolValid(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    latestPoolCollection(poolType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    liquidityPools(overrides?: CallOverrides): Promise<string[]>;

    migrateLiquidity(
      token: PromiseOrValue<string>,
      provider: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      availableAmount: PromiseOrValue<BigNumberish>,
      originalAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    migratePools(pools: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingNetworkFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    poolCollections(overrides?: CallOverrides): Promise<string[]>;

    postUpgrade(data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    removePoolCollection(
      poolCollection: PromiseOrValue<string>,
      newLatestPoolCollection: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    resume(overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    roleAdmin(overrides?: CallOverrides): Promise<string>;

    roleEmergencyStopper(overrides?: CallOverrides): Promise<string>;

    roleMigrationManager(overrides?: CallOverrides): Promise<string>;

    roleNetworkFeeManager(overrides?: CallOverrides): Promise<string>;

    setLatestPoolCollection(poolCollection: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    tradeBySourceAmount(
      sourceToken: PromiseOrValue<string>,
      targetToken: PromiseOrValue<string>,
      sourceAmount: PromiseOrValue<BigNumberish>,
      minReturnAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tradeBySourceAmountPermitted(
      sourceToken: PromiseOrValue<string>,
      targetToken: PromiseOrValue<string>,
      sourceAmount: PromiseOrValue<BigNumberish>,
      minReturnAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tradeByTargetAmount(
      sourceToken: PromiseOrValue<string>,
      targetToken: PromiseOrValue<string>,
      targetAmount: PromiseOrValue<BigNumberish>,
      maxSourceAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tradeByTargetAmountPermitted(
      sourceToken: PromiseOrValue<string>,
      targetToken: PromiseOrValue<string>,
      targetAmount: PromiseOrValue<BigNumberish>,
      maxSourceAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<number>;

    withdraw(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawNetworkFees(recipient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'FlashLoanCompleted(address,address,uint256,uint256)'(
      token?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      amount?: null,
      feeAmount?: null,
    ): FlashLoanCompletedEventFilter;
    FlashLoanCompleted(
      token?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      amount?: null,
      feeAmount?: null,
    ): FlashLoanCompletedEventFilter;

    'FundsMigrated(bytes32,address,address,uint256,uint256,uint256)'(
      contextId?: PromiseOrValue<BytesLike> | null,
      token?: PromiseOrValue<string> | null,
      provider?: PromiseOrValue<string> | null,
      amount?: null,
      availableAmount?: null,
      originalAmount?: null,
    ): FundsMigratedEventFilter;
    FundsMigrated(
      contextId?: PromiseOrValue<BytesLike> | null,
      token?: PromiseOrValue<string> | null,
      provider?: PromiseOrValue<string> | null,
      amount?: null,
      availableAmount?: null,
      originalAmount?: null,
    ): FundsMigratedEventFilter;

    'LatestPoolCollectionReplaced(uint16,address,address)'(
      poolType?: PromiseOrValue<BigNumberish> | null,
      prevPoolCollection?: PromiseOrValue<string> | null,
      newPoolCollection?: PromiseOrValue<string> | null,
    ): LatestPoolCollectionReplacedEventFilter;
    LatestPoolCollectionReplaced(
      poolType?: PromiseOrValue<BigNumberish> | null,
      prevPoolCollection?: PromiseOrValue<string> | null,
      newPoolCollection?: PromiseOrValue<string> | null,
    ): LatestPoolCollectionReplacedEventFilter;

    'NetworkFeesWithdrawn(address,address,uint256)'(
      caller?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
    ): NetworkFeesWithdrawnEventFilter;
    NetworkFeesWithdrawn(
      caller?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
    ): NetworkFeesWithdrawnEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'PoolAdded(address,address)'(
      pool?: PromiseOrValue<string> | null,
      poolCollection?: PromiseOrValue<string> | null,
    ): PoolAddedEventFilter;
    PoolAdded(
      pool?: PromiseOrValue<string> | null,
      poolCollection?: PromiseOrValue<string> | null,
    ): PoolAddedEventFilter;

    'PoolCollectionAdded(uint16,address)'(
      poolType?: PromiseOrValue<BigNumberish> | null,
      poolCollection?: PromiseOrValue<string> | null,
    ): PoolCollectionAddedEventFilter;
    PoolCollectionAdded(
      poolType?: PromiseOrValue<BigNumberish> | null,
      poolCollection?: PromiseOrValue<string> | null,
    ): PoolCollectionAddedEventFilter;

    'PoolCollectionRemoved(uint16,address)'(
      poolType?: PromiseOrValue<BigNumberish> | null,
      poolCollection?: PromiseOrValue<string> | null,
    ): PoolCollectionRemovedEventFilter;
    PoolCollectionRemoved(
      poolType?: PromiseOrValue<BigNumberish> | null,
      poolCollection?: PromiseOrValue<string> | null,
    ): PoolCollectionRemovedEventFilter;

    'PoolCreated(address,address)'(
      pool?: PromiseOrValue<string> | null,
      poolCollection?: PromiseOrValue<string> | null,
    ): PoolCreatedEventFilter;
    PoolCreated(
      pool?: PromiseOrValue<string> | null,
      poolCollection?: PromiseOrValue<string> | null,
    ): PoolCreatedEventFilter;

    'PoolRemoved(address,address)'(
      pool?: PromiseOrValue<string> | null,
      poolCollection?: PromiseOrValue<string> | null,
    ): PoolRemovedEventFilter;
    PoolRemoved(
      pool?: PromiseOrValue<string> | null,
      poolCollection?: PromiseOrValue<string> | null,
    ): PoolRemovedEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;

    'TokensTraded(bytes32,address,address,uint256,uint256,uint256,uint256,uint256,address)'(
      contextId?: PromiseOrValue<BytesLike> | null,
      sourceToken?: PromiseOrValue<string> | null,
      targetToken?: PromiseOrValue<string> | null,
      sourceAmount?: null,
      targetAmount?: null,
      bntAmount?: null,
      targetFeeAmount?: null,
      bntFeeAmount?: null,
      trader?: null,
    ): TokensTradedEventFilter;
    TokensTraded(
      contextId?: PromiseOrValue<BytesLike> | null,
      sourceToken?: PromiseOrValue<string> | null,
      targetToken?: PromiseOrValue<string> | null,
      sourceAmount?: null,
      targetAmount?: null,
      bntAmount?: null,
      targetFeeAmount?: null,
      bntFeeAmount?: null,
      trader?: null,
    ): TokensTradedEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addPoolCollection(
      poolCollection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    cancelWithdrawal(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    collectionByPool(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    createPool(
      poolType: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createPools(
      poolType: PromiseOrValue<BigNumberish>,
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deposit(
      pool: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositFor(
      provider: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositForPermitted(
      provider: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositPermitted(
      pool: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    flashLoan(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initWithdrawal(
      poolToken: PromiseOrValue<string>,
      poolTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initWithdrawalPermitted(
      poolToken: PromiseOrValue<string>,
      poolTokenAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initialize(
      initBNTPool: PromiseOrValue<string>,
      initPendingWithdrawals: PromiseOrValue<string>,
      initPoolMigrator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isPaused(overrides?: CallOverrides): Promise<BigNumber>;

    isPoolValid(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    latestPoolCollection(poolType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    liquidityPools(overrides?: CallOverrides): Promise<BigNumber>;

    migrateLiquidity(
      token: PromiseOrValue<string>,
      provider: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      availableAmount: PromiseOrValue<BigNumberish>,
      originalAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    migratePools(
      pools: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingNetworkFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    poolCollections(overrides?: CallOverrides): Promise<BigNumber>;

    postUpgrade(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removePoolCollection(
      poolCollection: PromiseOrValue<string>,
      newLatestPoolCollection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    resume(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    roleAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    roleEmergencyStopper(overrides?: CallOverrides): Promise<BigNumber>;

    roleMigrationManager(overrides?: CallOverrides): Promise<BigNumber>;

    roleNetworkFeeManager(overrides?: CallOverrides): Promise<BigNumber>;

    setLatestPoolCollection(
      poolCollection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    tradeBySourceAmount(
      sourceToken: PromiseOrValue<string>,
      targetToken: PromiseOrValue<string>,
      sourceAmount: PromiseOrValue<BigNumberish>,
      minReturnAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    tradeBySourceAmountPermitted(
      sourceToken: PromiseOrValue<string>,
      targetToken: PromiseOrValue<string>,
      sourceAmount: PromiseOrValue<BigNumberish>,
      minReturnAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    tradeByTargetAmount(
      sourceToken: PromiseOrValue<string>,
      targetToken: PromiseOrValue<string>,
      targetAmount: PromiseOrValue<BigNumberish>,
      maxSourceAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    tradeByTargetAmountPermitted(
      sourceToken: PromiseOrValue<string>,
      targetToken: PromiseOrValue<string>,
      targetAmount: PromiseOrValue<BigNumberish>,
      maxSourceAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawNetworkFees(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPoolCollection(
      poolCollection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    cancelWithdrawal(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    collectionByPool(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPool(
      poolType: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createPools(
      poolType: PromiseOrValue<BigNumberish>,
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      pool: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositFor(
      provider: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositForPermitted(
      provider: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositPermitted(
      pool: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    flashLoan(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initWithdrawal(
      poolToken: PromiseOrValue<string>,
      poolTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initWithdrawalPermitted(
      poolToken: PromiseOrValue<string>,
      poolTokenAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      initBNTPool: PromiseOrValue<string>,
      initPendingWithdrawals: PromiseOrValue<string>,
      initPoolMigrator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPoolValid(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestPoolCollection(
      poolType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    liquidityPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateLiquidity(
      token: PromiseOrValue<string>,
      provider: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      availableAmount: PromiseOrValue<BigNumberish>,
      originalAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    migratePools(
      pools: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingNetworkFeeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolCollections(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postUpgrade(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removePoolCollection(
      poolCollection: PromiseOrValue<string>,
      newLatestPoolCollection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    resume(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    roleAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roleEmergencyStopper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roleMigrationManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roleNetworkFeeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setLatestPoolCollection(
      poolCollection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradeBySourceAmount(
      sourceToken: PromiseOrValue<string>,
      targetToken: PromiseOrValue<string>,
      sourceAmount: PromiseOrValue<BigNumberish>,
      minReturnAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    tradeBySourceAmountPermitted(
      sourceToken: PromiseOrValue<string>,
      targetToken: PromiseOrValue<string>,
      sourceAmount: PromiseOrValue<BigNumberish>,
      minReturnAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    tradeByTargetAmount(
      sourceToken: PromiseOrValue<string>,
      targetToken: PromiseOrValue<string>,
      targetAmount: PromiseOrValue<BigNumberish>,
      maxSourceAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    tradeByTargetAmountPermitted(
      sourceToken: PromiseOrValue<string>,
      targetToken: PromiseOrValue<string>,
      targetAmount: PromiseOrValue<BigNumberish>,
      maxSourceAmount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      beneficiary: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawNetworkFees(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
