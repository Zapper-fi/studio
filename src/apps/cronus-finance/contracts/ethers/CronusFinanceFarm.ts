/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface CronusFinanceFarmInterface extends utils.Interface {
  functions: {
    'CLP()': FunctionFragment;
    'CRN()': FunctionFragment;
    'MASTER_CHEF()': FunctionFragment;
    'MASTER_PID()': FunctionFragment;
    'add(uint256,uint256)': FunctionFragment;
    'claim(uint256)': FunctionFragment;
    'crnPerSec()': FunctionFragment;
    'depositWithExactCrn(uint256,uint256)': FunctionFragment;
    'depositWithExactCrnFor(uint256,uint256,address)': FunctionFragment;
    'depositWithExactLP(uint256,uint256)': FunctionFragment;
    'depositWithExactLPFor(uint256,uint256,address)': FunctionFragment;
    'emergencyWithdraw(uint256)': FunctionFragment;
    'emergencyWithdrawFee()': FunctionFragment;
    'feeRecipient()': FunctionFragment;
    'getCLPAmount(uint256)': FunctionFragment;
    'getCRNAmount(uint256)': FunctionFragment;
    'harvestFromMasterChef()': FunctionFragment;
    'init(address)': FunctionFragment;
    'isLockAdded(uint256)': FunctionFragment;
    'lockInfo(uint256)': FunctionFragment;
    'locksCount()': FunctionFragment;
    'massUpdateLocks()': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingTokens(uint256,address)': FunctionFragment;
    'ratio()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'set(uint256,uint256,uint256)': FunctionFragment;
    'setEmergencyWithdrawFee(uint256)': FunctionFragment;
    'setFeeRecipient(address)': FunctionFragment;
    'setRatio(uint256)': FunctionFragment;
    'setUnlockAll(bool)': FunctionFragment;
    'setWithdrawFee(uint256)': FunctionFragment;
    'totalAllocPoint()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unlockAll()': FunctionFragment;
    'updateLock(uint256)': FunctionFragment;
    'userInfo(uint256,address)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdrawFee()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'CLP'
      | 'CRN'
      | 'MASTER_CHEF'
      | 'MASTER_PID'
      | 'add'
      | 'claim'
      | 'crnPerSec'
      | 'depositWithExactCrn'
      | 'depositWithExactCrnFor'
      | 'depositWithExactLP'
      | 'depositWithExactLPFor'
      | 'emergencyWithdraw'
      | 'emergencyWithdrawFee'
      | 'feeRecipient'
      | 'getCLPAmount'
      | 'getCRNAmount'
      | 'harvestFromMasterChef'
      | 'init'
      | 'isLockAdded'
      | 'lockInfo'
      | 'locksCount'
      | 'massUpdateLocks'
      | 'owner'
      | 'pendingTokens'
      | 'ratio'
      | 'renounceOwnership'
      | 'set'
      | 'setEmergencyWithdrawFee'
      | 'setFeeRecipient'
      | 'setRatio'
      | 'setUnlockAll'
      | 'setWithdrawFee'
      | 'totalAllocPoint'
      | 'transferOwnership'
      | 'unlockAll'
      | 'updateLock'
      | 'userInfo'
      | 'withdraw'
      | 'withdrawFee',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'CLP', values?: undefined): string;
  encodeFunctionData(functionFragment: 'CRN', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MASTER_CHEF', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MASTER_PID', values?: undefined): string;
  encodeFunctionData(functionFragment: 'add', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'claim', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'crnPerSec', values?: undefined): string;
  encodeFunctionData(functionFragment: 'depositWithExactCrn', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'depositWithExactCrnFor', values: [BigNumberish, BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'depositWithExactLP', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'depositWithExactLPFor', values: [BigNumberish, BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'emergencyWithdraw', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'emergencyWithdrawFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feeRecipient', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getCLPAmount', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getCRNAmount', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'harvestFromMasterChef', values?: undefined): string;
  encodeFunctionData(functionFragment: 'init', values: [string]): string;
  encodeFunctionData(functionFragment: 'isLockAdded', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'lockInfo', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'locksCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'massUpdateLocks', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingTokens', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'ratio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'set', values: [BigNumberish, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setEmergencyWithdrawFee', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setFeeRecipient', values: [string]): string;
  encodeFunctionData(functionFragment: 'setRatio', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setUnlockAll', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'setWithdrawFee', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'totalAllocPoint', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'unlockAll', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateLock', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'userInfo', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawFee', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'CLP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'CRN', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MASTER_CHEF', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MASTER_PID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'add', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'crnPerSec', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositWithExactCrn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositWithExactCrnFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositWithExactLP', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositWithExactLPFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdrawFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeRecipient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCLPAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCRNAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvestFromMasterChef', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'init', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isLockAdded', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'locksCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'massUpdateLocks', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ratio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEmergencyWithdrawFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeRecipient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUnlockAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWithdrawFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAllocPoint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unlockAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateLock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawFee', data: BytesLike): Result;

  events: {
    'Add(uint256,uint256,uint256)': EventFragment;
    'Deposit(address,uint256,uint256,uint256,uint256)': EventFragment;
    'EmergencyWithdraw(address,uint256,uint256,uint256,uint256)': EventFragment;
    'Harvest(address,uint256,uint256)': EventFragment;
    'Init()': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Set(uint256,uint256,uint256)': EventFragment;
    'UpdatePool(uint256,uint256,uint256,uint256)': EventFragment;
    'Withdraw(address,uint256,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Add'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Harvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Init'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Set'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatePool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface AddEventObject {
  lockId: BigNumber;
  allocPoint: BigNumber;
  lockDuration: BigNumber;
}
export type AddEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], AddEventObject>;

export type AddEventFilter = TypedEventFilter<AddEvent>;

export interface DepositEventObject {
  user: string;
  lockId: BigNumber;
  amount: BigNumber;
  crnAmount: BigNumber;
  clpAmount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EmergencyWithdrawEventObject {
  user: string;
  lockId: BigNumber;
  amount: BigNumber;
  crnAmount: BigNumber;
  clpAmount: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  EmergencyWithdrawEventObject
>;

export type EmergencyWithdrawEventFilter = TypedEventFilter<EmergencyWithdrawEvent>;

export interface HarvestEventObject {
  user: string;
  lockId: BigNumber;
  amount: BigNumber;
}
export type HarvestEvent = TypedEvent<[string, BigNumber, BigNumber], HarvestEventObject>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export interface InitEventObject {}
export type InitEvent = TypedEvent<[], InitEventObject>;

export type InitEventFilter = TypedEventFilter<InitEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface SetEventObject {
  lockId: BigNumber;
  allocPoint: BigNumber;
  lockDuration: BigNumber;
}
export type SetEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], SetEventObject>;

export type SetEventFilter = TypedEventFilter<SetEvent>;

export interface UpdatePoolEventObject {
  lockId: BigNumber;
  lastRewardTimestamp: BigNumber;
  totalDeposit: BigNumber;
  accCrnPerShare: BigNumber;
}
export type UpdatePoolEvent = TypedEvent<[BigNumber, BigNumber, BigNumber, BigNumber], UpdatePoolEventObject>;

export type UpdatePoolEventFilter = TypedEventFilter<UpdatePoolEvent>;

export interface WithdrawEventObject {
  user: string;
  lockId: BigNumber;
  amount: BigNumber;
  crnAmount: BigNumber;
  clpAmount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface CronusFinanceFarm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CronusFinanceFarmInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CLP(overrides?: CallOverrides): Promise<[string]>;

    CRN(overrides?: CallOverrides): Promise<[string]>;

    MASTER_CHEF(overrides?: CallOverrides): Promise<[string]>;

    MASTER_PID(overrides?: CallOverrides): Promise<[BigNumber]>;

    add(
      allocPoint: BigNumberish,
      lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claim(
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    crnPerSec(overrides?: CallOverrides): Promise<[BigNumber] & { amount: BigNumber }>;

    depositWithExactCrn(
      lockId: BigNumberish,
      crnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositWithExactCrnFor(
      lockId: BigNumberish,
      crnAmount: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositWithExactLP(
      lockId: BigNumberish,
      clpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositWithExactLPFor(
      lockId: BigNumberish,
      clpAmount: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    emergencyWithdrawFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    getCLPAmount(CRN_amount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    getCRNAmount(CLP_Amount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    harvestFromMasterChef(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    init(dummyToken: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    isLockAdded(arg0: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    lockInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        accCrnPerShare: BigNumber;
        lastRewardTimestamp: BigNumber;
        allocPoint: BigNumber;
        lockDuration: BigNumber;
        totalDeposit: BigNumber;
        totalCLP: BigNumber;
      }
    >;

    locksCount(overrides?: CallOverrides): Promise<[BigNumber] & { locks: BigNumber }>;

    massUpdateLocks(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingTokens(
      _lockId: BigNumberish,
      _user: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { pendingCrn: BigNumber }>;

    ratio(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    set(
      _lockId: BigNumberish,
      _allocPoint: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setEmergencyWithdrawFee(
      _emergencyWithdrawFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setFeeRecipient(
      _feeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRatio(
      _ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setUnlockAll(
      _unlock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setWithdrawFee(
      _withdrawFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    unlockAll(overrides?: CallOverrides): Promise<[boolean]>;

    updateLock(
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        lastDeposit: BigNumber;
        crnAmount: BigNumber;
        clpAmount: BigNumber;
      }
    >;

    withdraw(
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawFee(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  CLP(overrides?: CallOverrides): Promise<string>;

  CRN(overrides?: CallOverrides): Promise<string>;

  MASTER_CHEF(overrides?: CallOverrides): Promise<string>;

  MASTER_PID(overrides?: CallOverrides): Promise<BigNumber>;

  add(
    allocPoint: BigNumberish,
    lockDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claim(
    lockId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  crnPerSec(overrides?: CallOverrides): Promise<BigNumber>;

  depositWithExactCrn(
    lockId: BigNumberish,
    crnAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositWithExactCrnFor(
    lockId: BigNumberish,
    crnAmount: BigNumberish,
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositWithExactLP(
    lockId: BigNumberish,
    clpAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositWithExactLPFor(
    lockId: BigNumberish,
    clpAmount: BigNumberish,
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    lockId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  emergencyWithdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  getCLPAmount(CRN_amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getCRNAmount(CLP_Amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  harvestFromMasterChef(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  init(dummyToken: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  isLockAdded(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  lockInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      accCrnPerShare: BigNumber;
      lastRewardTimestamp: BigNumber;
      allocPoint: BigNumber;
      lockDuration: BigNumber;
      totalDeposit: BigNumber;
      totalCLP: BigNumber;
    }
  >;

  locksCount(overrides?: CallOverrides): Promise<BigNumber>;

  massUpdateLocks(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingTokens(_lockId: BigNumberish, _user: string, overrides?: CallOverrides): Promise<BigNumber>;

  ratio(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  set(
    _lockId: BigNumberish,
    _allocPoint: BigNumberish,
    _lockDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setEmergencyWithdrawFee(
    _emergencyWithdrawFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setFeeRecipient(
    _feeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRatio(
    _ratio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setUnlockAll(
    _unlock: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setWithdrawFee(
    _withdrawFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  unlockAll(overrides?: CallOverrides): Promise<boolean>;

  updateLock(
    lockId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      lastDeposit: BigNumber;
      crnAmount: BigNumber;
      clpAmount: BigNumber;
    }
  >;

  withdraw(
    lockId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    CLP(overrides?: CallOverrides): Promise<string>;

    CRN(overrides?: CallOverrides): Promise<string>;

    MASTER_CHEF(overrides?: CallOverrides): Promise<string>;

    MASTER_PID(overrides?: CallOverrides): Promise<BigNumber>;

    add(allocPoint: BigNumberish, lockDuration: BigNumberish, overrides?: CallOverrides): Promise<void>;

    claim(lockId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    crnPerSec(overrides?: CallOverrides): Promise<BigNumber>;

    depositWithExactCrn(lockId: BigNumberish, crnAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositWithExactCrnFor(
      lockId: BigNumberish,
      crnAmount: BigNumberish,
      beneficiary: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositWithExactLP(lockId: BigNumberish, clpAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositWithExactLPFor(
      lockId: BigNumberish,
      clpAmount: BigNumberish,
      beneficiary: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    emergencyWithdraw(lockId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    emergencyWithdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    getCLPAmount(CRN_amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getCRNAmount(CLP_Amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    harvestFromMasterChef(overrides?: CallOverrides): Promise<void>;

    init(dummyToken: string, overrides?: CallOverrides): Promise<void>;

    isLockAdded(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    lockInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        accCrnPerShare: BigNumber;
        lastRewardTimestamp: BigNumber;
        allocPoint: BigNumber;
        lockDuration: BigNumber;
        totalDeposit: BigNumber;
        totalCLP: BigNumber;
      }
    >;

    locksCount(overrides?: CallOverrides): Promise<BigNumber>;

    massUpdateLocks(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingTokens(_lockId: BigNumberish, _user: string, overrides?: CallOverrides): Promise<BigNumber>;

    ratio(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    set(
      _lockId: BigNumberish,
      _allocPoint: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setEmergencyWithdrawFee(_emergencyWithdrawFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFeeRecipient(_feeRecipient: string, overrides?: CallOverrides): Promise<void>;

    setRatio(_ratio: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setUnlockAll(_unlock: boolean, overrides?: CallOverrides): Promise<void>;

    setWithdrawFee(_withdrawFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    unlockAll(overrides?: CallOverrides): Promise<boolean>;

    updateLock(lockId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        lastDeposit: BigNumber;
        crnAmount: BigNumber;
        clpAmount: BigNumber;
      }
    >;

    withdraw(lockId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'Add(uint256,uint256,uint256)'(
      lockId?: BigNumberish | null,
      allocPoint?: null,
      lockDuration?: null,
    ): AddEventFilter;
    Add(lockId?: BigNumberish | null, allocPoint?: null, lockDuration?: null): AddEventFilter;

    'Deposit(address,uint256,uint256,uint256,uint256)'(
      user?: string | null,
      lockId?: BigNumberish | null,
      amount?: null,
      crnAmount?: null,
      clpAmount?: null,
    ): DepositEventFilter;
    Deposit(
      user?: string | null,
      lockId?: BigNumberish | null,
      amount?: null,
      crnAmount?: null,
      clpAmount?: null,
    ): DepositEventFilter;

    'EmergencyWithdraw(address,uint256,uint256,uint256,uint256)'(
      user?: string | null,
      lockId?: BigNumberish | null,
      amount?: null,
      crnAmount?: null,
      clpAmount?: null,
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(
      user?: string | null,
      lockId?: BigNumberish | null,
      amount?: null,
      crnAmount?: null,
      clpAmount?: null,
    ): EmergencyWithdrawEventFilter;

    'Harvest(address,uint256,uint256)'(
      user?: string | null,
      lockId?: BigNumberish | null,
      amount?: null,
    ): HarvestEventFilter;
    Harvest(user?: string | null, lockId?: BigNumberish | null, amount?: null): HarvestEventFilter;

    'Init()'(): InitEventFilter;
    Init(): InitEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    'Set(uint256,uint256,uint256)'(
      lockId?: BigNumberish | null,
      allocPoint?: null,
      lockDuration?: null,
    ): SetEventFilter;
    Set(lockId?: BigNumberish | null, allocPoint?: null, lockDuration?: null): SetEventFilter;

    'UpdatePool(uint256,uint256,uint256,uint256)'(
      lockId?: BigNumberish | null,
      lastRewardTimestamp?: null,
      totalDeposit?: null,
      accCrnPerShare?: null,
    ): UpdatePoolEventFilter;
    UpdatePool(
      lockId?: BigNumberish | null,
      lastRewardTimestamp?: null,
      totalDeposit?: null,
      accCrnPerShare?: null,
    ): UpdatePoolEventFilter;

    'Withdraw(address,uint256,uint256,uint256,uint256)'(
      user?: string | null,
      lockId?: BigNumberish | null,
      amount?: null,
      crnAmount?: null,
      clpAmount?: null,
    ): WithdrawEventFilter;
    Withdraw(
      user?: string | null,
      lockId?: BigNumberish | null,
      amount?: null,
      crnAmount?: null,
      clpAmount?: null,
    ): WithdrawEventFilter;
  };

  estimateGas: {
    CLP(overrides?: CallOverrides): Promise<BigNumber>;

    CRN(overrides?: CallOverrides): Promise<BigNumber>;

    MASTER_CHEF(overrides?: CallOverrides): Promise<BigNumber>;

    MASTER_PID(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      allocPoint: BigNumberish,
      lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    claim(lockId: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    crnPerSec(overrides?: CallOverrides): Promise<BigNumber>;

    depositWithExactCrn(
      lockId: BigNumberish,
      crnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    depositWithExactCrnFor(
      lockId: BigNumberish,
      crnAmount: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    depositWithExactLP(
      lockId: BigNumberish,
      clpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    depositWithExactLPFor(
      lockId: BigNumberish,
      clpAmount: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    emergencyWithdraw(
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    emergencyWithdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    getCLPAmount(CRN_amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getCRNAmount(CLP_Amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    harvestFromMasterChef(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    init(dummyToken: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    isLockAdded(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    lockInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    locksCount(overrides?: CallOverrides): Promise<BigNumber>;

    massUpdateLocks(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingTokens(_lockId: BigNumberish, _user: string, overrides?: CallOverrides): Promise<BigNumber>;

    ratio(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    set(
      _lockId: BigNumberish,
      _allocPoint: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setEmergencyWithdrawFee(
      _emergencyWithdrawFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setFeeRecipient(
      _feeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setRatio(_ratio: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setUnlockAll(_unlock: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setWithdrawFee(
      _withdrawFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    unlockAll(overrides?: CallOverrides): Promise<BigNumber>;

    updateLock(lockId: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userInfo(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(lockId: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CLP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CRN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MASTER_CHEF(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MASTER_PID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    add(
      allocPoint: BigNumberish,
      lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claim(
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    crnPerSec(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositWithExactCrn(
      lockId: BigNumberish,
      crnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositWithExactCrnFor(
      lockId: BigNumberish,
      crnAmount: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositWithExactLP(
      lockId: BigNumberish,
      clpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositWithExactLPFor(
      lockId: BigNumberish,
      clpAmount: BigNumberish,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCLPAmount(CRN_amount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCRNAmount(CLP_Amount: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestFromMasterChef(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    init(
      dummyToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isLockAdded(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    locksCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    massUpdateLocks(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingTokens(_lockId: BigNumberish, _user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ratio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    set(
      _lockId: BigNumberish,
      _allocPoint: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setEmergencyWithdrawFee(
      _emergencyWithdrawFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setFeeRecipient(
      _feeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRatio(
      _ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setUnlockAll(
      _unlock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setWithdrawFee(
      _withdrawFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    unlockAll(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateLock(
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userInfo(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      lockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
