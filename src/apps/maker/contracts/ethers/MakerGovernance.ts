/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface MakerGovernanceInterface extends utils.Interface {
  functions: {
    'IOU()': FunctionFragment;
    'getUserRoles(address)': FunctionFragment;
    'setOwner(address)': FunctionFragment;
    'GOV()': FunctionFragment;
    'getCapabilityRoles(address,bytes4)': FunctionFragment;
    'isCapabilityPublic(address,bytes4)': FunctionFragment;
    'MAX_YAYS()': FunctionFragment;
    'lift(address)': FunctionFragment;
    'etch(address[])': FunctionFragment;
    'approvals(address)': FunctionFragment;
    'setUserRole(address,uint8,bool)': FunctionFragment;
    'setAuthority(address)': FunctionFragment;
    'setRoleCapability(uint8,address,bytes4,bool)': FunctionFragment;
    'owner()': FunctionFragment;
    'hasUserRole(address,uint8)': FunctionFragment;
    'vote(bytes32)': FunctionFragment;
    'vote(address[])': FunctionFragment;
    'canCall(address,address,bytes4)': FunctionFragment;
    'authority()': FunctionFragment;
    'slates(bytes32,uint256)': FunctionFragment;
    'setPublicCapability(address,bytes4,bool)': FunctionFragment;
    'setRootUser(address,bool)': FunctionFragment;
    'votes(address)': FunctionFragment;
    'free(uint256)': FunctionFragment;
    'lock(uint256)': FunctionFragment;
    'isUserRoot(address)': FunctionFragment;
    'deposits(address)': FunctionFragment;
    'hat()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'IOU'
      | 'getUserRoles'
      | 'setOwner'
      | 'GOV'
      | 'getCapabilityRoles'
      | 'isCapabilityPublic'
      | 'MAX_YAYS'
      | 'lift'
      | 'etch'
      | 'approvals'
      | 'setUserRole'
      | 'setAuthority'
      | 'setRoleCapability'
      | 'owner'
      | 'hasUserRole'
      | 'vote(bytes32)'
      | 'vote(address[])'
      | 'canCall'
      | 'authority'
      | 'slates'
      | 'setPublicCapability'
      | 'setRootUser'
      | 'votes'
      | 'free'
      | 'lock'
      | 'isUserRoot'
      | 'deposits'
      | 'hat',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'IOU', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getUserRoles', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setOwner', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'GOV', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getCapabilityRoles',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'isCapabilityPublic',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'MAX_YAYS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lift', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'etch', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'approvals', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setUserRole',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setAuthority', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setRoleCapability',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BytesLike>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'hasUserRole',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'vote(bytes32)', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'vote(address[])', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(
    functionFragment: 'canCall',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'authority', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'slates',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setPublicCapability',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setRootUser',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'votes', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'free', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'lock', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'isUserRoot', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'deposits', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'hat', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'IOU', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserRoles', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'GOV', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCapabilityRoles', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isCapabilityPublic', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_YAYS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lift', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'etch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approvals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUserRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAuthority', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRoleCapability', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasUserRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vote(bytes32)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vote(address[])', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'canCall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'authority', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'slates', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPublicCapability', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRootUser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'votes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'free', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isUserRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hat', data: BytesLike): Result;

  events: {
    'Etch(bytes32)': EventFragment;
    'LogNote(bytes4,address,bytes32,bytes32,uint256,bytes)': EventFragment;
    'LogSetAuthority(address)': EventFragment;
    'LogSetOwner(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Etch'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogNote'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogSetAuthority'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogSetOwner'): EventFragment;
}

export interface EtchEventObject {
  slate: string;
}
export type EtchEvent = TypedEvent<[string], EtchEventObject>;

export type EtchEventFilter = TypedEventFilter<EtchEvent>;

export interface LogNoteEventObject {
  sig: string;
  guy: string;
  foo: string;
  bar: string;
  wad: BigNumber;
  fax: string;
}
export type LogNoteEvent = TypedEvent<[string, string, string, string, BigNumber, string], LogNoteEventObject>;

export type LogNoteEventFilter = TypedEventFilter<LogNoteEvent>;

export interface LogSetAuthorityEventObject {
  authority: string;
}
export type LogSetAuthorityEvent = TypedEvent<[string], LogSetAuthorityEventObject>;

export type LogSetAuthorityEventFilter = TypedEventFilter<LogSetAuthorityEvent>;

export interface LogSetOwnerEventObject {
  owner: string;
}
export type LogSetOwnerEvent = TypedEvent<[string], LogSetOwnerEventObject>;

export type LogSetOwnerEventFilter = TypedEventFilter<LogSetOwnerEvent>;

export interface MakerGovernance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MakerGovernanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IOU(overrides?: CallOverrides): Promise<[string]>;

    getUserRoles(who: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    setOwner(
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    GOV(overrides?: CallOverrides): Promise<[string]>;

    getCapabilityRoles(
      code: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    isCapabilityPublic(
      code: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    MAX_YAYS(overrides?: CallOverrides): Promise<[BigNumber]>;

    lift(
      whom: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    etch(
      yays: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    approvals(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    setUserRole(
      who: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setAuthority(
      authority_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRoleCapability(
      role: PromiseOrValue<BigNumberish>,
      code: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    hasUserRole(
      who: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    'vote(bytes32)'(
      slate: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'vote(address[])'(
      yays: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    canCall(
      caller: PromiseOrValue<string>,
      code: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    slates(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    setPublicCapability(
      code: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRootUser(
      who: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    votes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    free(
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    lock(
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isUserRoot(who: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    deposits(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    hat(overrides?: CallOverrides): Promise<[string]>;
  };

  IOU(overrides?: CallOverrides): Promise<string>;

  getUserRoles(who: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  setOwner(
    owner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  GOV(overrides?: CallOverrides): Promise<string>;

  getCapabilityRoles(
    code: PromiseOrValue<string>,
    sig: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<string>;

  isCapabilityPublic(
    code: PromiseOrValue<string>,
    sig: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  MAX_YAYS(overrides?: CallOverrides): Promise<BigNumber>;

  lift(
    whom: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  etch(
    yays: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  approvals(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  setUserRole(
    who: PromiseOrValue<string>,
    role: PromiseOrValue<BigNumberish>,
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setAuthority(
    authority_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRoleCapability(
    role: PromiseOrValue<BigNumberish>,
    code: PromiseOrValue<string>,
    sig: PromiseOrValue<BytesLike>,
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  hasUserRole(
    who: PromiseOrValue<string>,
    role: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  'vote(bytes32)'(
    slate: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'vote(address[])'(
    yays: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  canCall(
    caller: PromiseOrValue<string>,
    code: PromiseOrValue<string>,
    sig: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  authority(overrides?: CallOverrides): Promise<string>;

  slates(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  setPublicCapability(
    code: PromiseOrValue<string>,
    sig: PromiseOrValue<BytesLike>,
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRootUser(
    who: PromiseOrValue<string>,
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  votes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  free(
    wad: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  lock(
    wad: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isUserRoot(who: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  deposits(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  hat(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    IOU(overrides?: CallOverrides): Promise<string>;

    getUserRoles(who: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    setOwner(owner_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    GOV(overrides?: CallOverrides): Promise<string>;

    getCapabilityRoles(
      code: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>;

    isCapabilityPublic(
      code: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    MAX_YAYS(overrides?: CallOverrides): Promise<BigNumber>;

    lift(whom: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    etch(yays: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<string>;

    approvals(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    setUserRole(
      who: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setAuthority(authority_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setRoleCapability(
      role: PromiseOrValue<BigNumberish>,
      code: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    hasUserRole(
      who: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    'vote(bytes32)'(slate: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    'vote(address[])'(yays: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<string>;

    canCall(
      caller: PromiseOrValue<string>,
      code: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    authority(overrides?: CallOverrides): Promise<string>;

    slates(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    setPublicCapability(
      code: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setRootUser(
      who: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    votes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    free(wad: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    lock(wad: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    isUserRoot(who: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    deposits(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    hat(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'Etch(bytes32)'(slate?: PromiseOrValue<BytesLike> | null): EtchEventFilter;
    Etch(slate?: PromiseOrValue<BytesLike> | null): EtchEventFilter;

    'LogNote(bytes4,address,bytes32,bytes32,uint256,bytes)'(
      sig?: PromiseOrValue<BytesLike> | null,
      guy?: PromiseOrValue<string> | null,
      foo?: PromiseOrValue<BytesLike> | null,
      bar?: PromiseOrValue<BytesLike> | null,
      wad?: null,
      fax?: null,
    ): LogNoteEventFilter;
    LogNote(
      sig?: PromiseOrValue<BytesLike> | null,
      guy?: PromiseOrValue<string> | null,
      foo?: PromiseOrValue<BytesLike> | null,
      bar?: PromiseOrValue<BytesLike> | null,
      wad?: null,
      fax?: null,
    ): LogNoteEventFilter;

    'LogSetAuthority(address)'(authority?: PromiseOrValue<string> | null): LogSetAuthorityEventFilter;
    LogSetAuthority(authority?: PromiseOrValue<string> | null): LogSetAuthorityEventFilter;

    'LogSetOwner(address)'(owner?: PromiseOrValue<string> | null): LogSetOwnerEventFilter;
    LogSetOwner(owner?: PromiseOrValue<string> | null): LogSetOwnerEventFilter;
  };

  estimateGas: {
    IOU(overrides?: CallOverrides): Promise<BigNumber>;

    getUserRoles(who: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    GOV(overrides?: CallOverrides): Promise<BigNumber>;

    getCapabilityRoles(
      code: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isCapabilityPublic(
      code: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    MAX_YAYS(overrides?: CallOverrides): Promise<BigNumber>;

    lift(whom: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    etch(yays: PromiseOrValue<string>[], overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    approvals(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    setUserRole(
      who: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setAuthority(
      authority_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRoleCapability(
      role: PromiseOrValue<BigNumberish>,
      code: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    hasUserRole(
      who: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'vote(bytes32)'(
      slate: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'vote(address[])'(
      yays: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    canCall(
      caller: PromiseOrValue<string>,
      code: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    slates(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setPublicCapability(
      code: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRootUser(
      who: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    votes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    free(
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    lock(
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isUserRoot(who: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    deposits(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    hat(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    IOU(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserRoles(who: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOwner(
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    GOV(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCapabilityRoles(
      code: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isCapabilityPublic(
      code: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    MAX_YAYS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lift(
      whom: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    etch(
      yays: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    approvals(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setUserRole(
      who: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setAuthority(
      authority_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRoleCapability(
      role: PromiseOrValue<BigNumberish>,
      code: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasUserRole(
      who: PromiseOrValue<string>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'vote(bytes32)'(
      slate: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'vote(address[])'(
      yays: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    canCall(
      caller: PromiseOrValue<string>,
      code: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    slates(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    setPublicCapability(
      code: PromiseOrValue<string>,
      sig: PromiseOrValue<BytesLike>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRootUser(
      who: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    votes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    free(
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    lock(
      wad: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isUserRoot(who: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposits(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hat(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
