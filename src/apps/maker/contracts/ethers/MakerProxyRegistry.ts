/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface MakerProxyRegistryInterface extends utils.Interface {
  functions: {
    'build()': FunctionFragment;
    'build(address)': FunctionFragment;
    'proxies(address)': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'build()' | 'build(address)' | 'proxies'): FunctionFragment;

  encodeFunctionData(functionFragment: 'build()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'build(address)', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'proxies', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'build()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'build(address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proxies', data: BytesLike): Result;

  events: {};
}

export interface MakerProxyRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MakerProxyRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    'build()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    'build(address)'(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    proxies(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
  };

  'build()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  'build(address)'(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  proxies(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    'build()'(overrides?: CallOverrides): Promise<string>;

    'build(address)'(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    proxies(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    'build()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    'build(address)'(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    proxies(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    'build()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    'build(address)'(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    proxies(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
