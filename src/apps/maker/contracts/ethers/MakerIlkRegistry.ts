/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface MakerIlkRegistryInterface extends utils.Interface {
  functions: {
    'add(address)': FunctionFragment;
    'cat()': FunctionFragment;
    'class(bytes32)': FunctionFragment;
    'count()': FunctionFragment;
    'dec(bytes32)': FunctionFragment;
    'deny(address)': FunctionFragment;
    'dog()': FunctionFragment;
    'file(bytes32,bytes32,uint256)': FunctionFragment;
    'file(bytes32,bytes32,string)': FunctionFragment;
    'file(bytes32,address)': FunctionFragment;
    'file(bytes32,bytes32,address)': FunctionFragment;
    'gem(bytes32)': FunctionFragment;
    'get(uint256)': FunctionFragment;
    'ilkData(bytes32)': FunctionFragment;
    'info(bytes32)': FunctionFragment;
    'join(bytes32)': FunctionFragment;
    'list()': FunctionFragment;
    'list(uint256,uint256)': FunctionFragment;
    'name(bytes32)': FunctionFragment;
    'pip(bytes32)': FunctionFragment;
    'pos(bytes32)': FunctionFragment;
    'put(bytes32,address,address,uint256,uint256,address,address,string,string)': FunctionFragment;
    'rely(address)': FunctionFragment;
    'remove(bytes32)': FunctionFragment;
    'removeAuth(bytes32)': FunctionFragment;
    'spot()': FunctionFragment;
    'symbol(bytes32)': FunctionFragment;
    'update(bytes32)': FunctionFragment;
    'vat()': FunctionFragment;
    'wards(address)': FunctionFragment;
    'xlip(bytes32)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'add'
      | 'cat'
      | 'class'
      | 'count'
      | 'dec'
      | 'deny'
      | 'dog'
      | 'file(bytes32,bytes32,uint256)'
      | 'file(bytes32,bytes32,string)'
      | 'file(bytes32,address)'
      | 'file(bytes32,bytes32,address)'
      | 'gem'
      | 'get'
      | 'ilkData'
      | 'info'
      | 'join'
      | 'list()'
      | 'list(uint256,uint256)'
      | 'name'
      | 'pip'
      | 'pos'
      | 'put'
      | 'rely'
      | 'remove'
      | 'removeAuth'
      | 'spot'
      | 'symbol'
      | 'update'
      | 'vat'
      | 'wards'
      | 'xlip',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'add', values: [string]): string;
  encodeFunctionData(functionFragment: 'cat', values?: undefined): string;
  encodeFunctionData(functionFragment: 'class', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'count', values?: undefined): string;
  encodeFunctionData(functionFragment: 'dec', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'deny', values: [string]): string;
  encodeFunctionData(functionFragment: 'dog', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'file(bytes32,bytes32,uint256)',
    values: [BytesLike, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'file(bytes32,bytes32,string)', values: [BytesLike, BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'file(bytes32,address)', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'file(bytes32,bytes32,address)', values: [BytesLike, BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'gem', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'get', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'ilkData', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'info', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'join', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'list()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'list(uint256,uint256)', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'name', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'pip', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'pos', values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'put',
    values: [BytesLike, string, string, BigNumberish, BigNumberish, string, string, string, string],
  ): string;
  encodeFunctionData(functionFragment: 'rely', values: [string]): string;
  encodeFunctionData(functionFragment: 'remove', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'removeAuth', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'spot', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'update', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'vat', values?: undefined): string;
  encodeFunctionData(functionFragment: 'wards', values: [string]): string;
  encodeFunctionData(functionFragment: 'xlip', values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: 'add', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cat', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'class', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'count', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dec', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deny', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dog', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'file(bytes32,bytes32,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'file(bytes32,bytes32,string)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'file(bytes32,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'file(bytes32,bytes32,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'get', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ilkData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'info', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'join', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'list()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'list(uint256,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pip', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pos', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'put', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rely', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'remove', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeAuth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'spot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'update', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vat', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'wards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'xlip', data: BytesLike): Result;

  events: {
    'AddIlk(bytes32)': EventFragment;
    'Deny(address)': EventFragment;
    'NameError(bytes32)': EventFragment;
    'Rely(address)': EventFragment;
    'RemoveIlk(bytes32)': EventFragment;
    'SymbolError(bytes32)': EventFragment;
    'UpdateIlk(bytes32)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddIlk'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deny'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NameError'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Rely'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RemoveIlk'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SymbolError'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateIlk'): EventFragment;
}

export interface AddIlkEventObject {
  ilk: string;
}
export type AddIlkEvent = TypedEvent<[string], AddIlkEventObject>;

export type AddIlkEventFilter = TypedEventFilter<AddIlkEvent>;

export interface DenyEventObject {
  usr: string;
}
export type DenyEvent = TypedEvent<[string], DenyEventObject>;

export type DenyEventFilter = TypedEventFilter<DenyEvent>;

export interface NameErrorEventObject {
  ilk: string;
}
export type NameErrorEvent = TypedEvent<[string], NameErrorEventObject>;

export type NameErrorEventFilter = TypedEventFilter<NameErrorEvent>;

export interface RelyEventObject {
  usr: string;
}
export type RelyEvent = TypedEvent<[string], RelyEventObject>;

export type RelyEventFilter = TypedEventFilter<RelyEvent>;

export interface RemoveIlkEventObject {
  ilk: string;
}
export type RemoveIlkEvent = TypedEvent<[string], RemoveIlkEventObject>;

export type RemoveIlkEventFilter = TypedEventFilter<RemoveIlkEvent>;

export interface SymbolErrorEventObject {
  ilk: string;
}
export type SymbolErrorEvent = TypedEvent<[string], SymbolErrorEventObject>;

export type SymbolErrorEventFilter = TypedEventFilter<SymbolErrorEvent>;

export interface UpdateIlkEventObject {
  ilk: string;
}
export type UpdateIlkEvent = TypedEvent<[string], UpdateIlkEventObject>;

export type UpdateIlkEventFilter = TypedEventFilter<UpdateIlkEvent>;

export interface MakerIlkRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MakerIlkRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add(adapter: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    cat(overrides?: CallOverrides): Promise<[string]>;

    class(ilk: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    count(overrides?: CallOverrides): Promise<[BigNumber]>;

    dec(ilk: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    deny(usr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    dog(overrides?: CallOverrides): Promise<[string]>;

    'file(bytes32,bytes32,uint256)'(
      ilk: BytesLike,
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'file(bytes32,bytes32,string)'(
      ilk: BytesLike,
      what: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'file(bytes32,address)'(
      what: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'file(bytes32,bytes32,address)'(
      ilk: BytesLike,
      what: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    gem(ilk: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    get(pos: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    ilkData(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, string, string, number, BigNumber, string, string, string, string] & {
        pos: BigNumber;
        join: string;
        gem: string;
        dec: number;
        class: BigNumber;
        pip: string;
        xlip: string;
        name: string;
        symbol: string;
      }
    >;

    info(
      ilk: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, BigNumber, string, string, string, string] & {
        name: string;
        symbol: string;
        class: BigNumber;
        dec: BigNumber;
        gem: string;
        pip: string;
        join: string;
        xlip: string;
      }
    >;

    join(ilk: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    'list()'(overrides?: CallOverrides): Promise<[string[]]>;

    'list(uint256,uint256)'(start: BigNumberish, end: BigNumberish, overrides?: CallOverrides): Promise<[string[]]>;

    name(ilk: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    pip(ilk: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    pos(ilk: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    put(
      _ilk: BytesLike,
      _join: string,
      _gem: string,
      _dec: BigNumberish,
      _class: BigNumberish,
      _pip: string,
      _xlip: string,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    rely(usr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    remove(ilk: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    removeAuth(
      ilk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    spot(overrides?: CallOverrides): Promise<[string]>;

    symbol(ilk: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    update(ilk: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    vat(overrides?: CallOverrides): Promise<[string]>;

    wards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    xlip(ilk: BytesLike, overrides?: CallOverrides): Promise<[string]>;
  };

  add(adapter: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  cat(overrides?: CallOverrides): Promise<string>;

  class(ilk: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  count(overrides?: CallOverrides): Promise<BigNumber>;

  dec(ilk: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  deny(usr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  dog(overrides?: CallOverrides): Promise<string>;

  'file(bytes32,bytes32,uint256)'(
    ilk: BytesLike,
    what: BytesLike,
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'file(bytes32,bytes32,string)'(
    ilk: BytesLike,
    what: BytesLike,
    data: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'file(bytes32,address)'(
    what: BytesLike,
    data: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'file(bytes32,bytes32,address)'(
    ilk: BytesLike,
    what: BytesLike,
    data: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  gem(ilk: BytesLike, overrides?: CallOverrides): Promise<string>;

  get(pos: BigNumberish, overrides?: CallOverrides): Promise<string>;

  ilkData(
    arg0: BytesLike,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, string, string, number, BigNumber, string, string, string, string] & {
      pos: BigNumber;
      join: string;
      gem: string;
      dec: number;
      class: BigNumber;
      pip: string;
      xlip: string;
      name: string;
      symbol: string;
    }
  >;

  info(
    ilk: BytesLike,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, BigNumber, BigNumber, string, string, string, string] & {
      name: string;
      symbol: string;
      class: BigNumber;
      dec: BigNumber;
      gem: string;
      pip: string;
      join: string;
      xlip: string;
    }
  >;

  join(ilk: BytesLike, overrides?: CallOverrides): Promise<string>;

  'list()'(overrides?: CallOverrides): Promise<string[]>;

  'list(uint256,uint256)'(start: BigNumberish, end: BigNumberish, overrides?: CallOverrides): Promise<string[]>;

  name(ilk: BytesLike, overrides?: CallOverrides): Promise<string>;

  pip(ilk: BytesLike, overrides?: CallOverrides): Promise<string>;

  pos(ilk: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  put(
    _ilk: BytesLike,
    _join: string,
    _gem: string,
    _dec: BigNumberish,
    _class: BigNumberish,
    _pip: string,
    _xlip: string,
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  rely(usr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  remove(ilk: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  removeAuth(ilk: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  spot(overrides?: CallOverrides): Promise<string>;

  symbol(ilk: BytesLike, overrides?: CallOverrides): Promise<string>;

  update(ilk: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  vat(overrides?: CallOverrides): Promise<string>;

  wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  xlip(ilk: BytesLike, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    add(adapter: string, overrides?: CallOverrides): Promise<void>;

    cat(overrides?: CallOverrides): Promise<string>;

    class(ilk: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    dec(ilk: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    deny(usr: string, overrides?: CallOverrides): Promise<void>;

    dog(overrides?: CallOverrides): Promise<string>;

    'file(bytes32,bytes32,uint256)'(
      ilk: BytesLike,
      what: BytesLike,
      data: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'file(bytes32,bytes32,string)'(
      ilk: BytesLike,
      what: BytesLike,
      data: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'file(bytes32,address)'(what: BytesLike, data: string, overrides?: CallOverrides): Promise<void>;

    'file(bytes32,bytes32,address)'(
      ilk: BytesLike,
      what: BytesLike,
      data: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    gem(ilk: BytesLike, overrides?: CallOverrides): Promise<string>;

    get(pos: BigNumberish, overrides?: CallOverrides): Promise<string>;

    ilkData(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, string, string, number, BigNumber, string, string, string, string] & {
        pos: BigNumber;
        join: string;
        gem: string;
        dec: number;
        class: BigNumber;
        pip: string;
        xlip: string;
        name: string;
        symbol: string;
      }
    >;

    info(
      ilk: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, BigNumber, string, string, string, string] & {
        name: string;
        symbol: string;
        class: BigNumber;
        dec: BigNumber;
        gem: string;
        pip: string;
        join: string;
        xlip: string;
      }
    >;

    join(ilk: BytesLike, overrides?: CallOverrides): Promise<string>;

    'list()'(overrides?: CallOverrides): Promise<string[]>;

    'list(uint256,uint256)'(start: BigNumberish, end: BigNumberish, overrides?: CallOverrides): Promise<string[]>;

    name(ilk: BytesLike, overrides?: CallOverrides): Promise<string>;

    pip(ilk: BytesLike, overrides?: CallOverrides): Promise<string>;

    pos(ilk: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    put(
      _ilk: BytesLike,
      _join: string,
      _gem: string,
      _dec: BigNumberish,
      _class: BigNumberish,
      _pip: string,
      _xlip: string,
      _name: string,
      _symbol: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    rely(usr: string, overrides?: CallOverrides): Promise<void>;

    remove(ilk: BytesLike, overrides?: CallOverrides): Promise<void>;

    removeAuth(ilk: BytesLike, overrides?: CallOverrides): Promise<void>;

    spot(overrides?: CallOverrides): Promise<string>;

    symbol(ilk: BytesLike, overrides?: CallOverrides): Promise<string>;

    update(ilk: BytesLike, overrides?: CallOverrides): Promise<void>;

    vat(overrides?: CallOverrides): Promise<string>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    xlip(ilk: BytesLike, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'AddIlk(bytes32)'(ilk?: null): AddIlkEventFilter;
    AddIlk(ilk?: null): AddIlkEventFilter;

    'Deny(address)'(usr?: null): DenyEventFilter;
    Deny(usr?: null): DenyEventFilter;

    'NameError(bytes32)'(ilk?: null): NameErrorEventFilter;
    NameError(ilk?: null): NameErrorEventFilter;

    'Rely(address)'(usr?: null): RelyEventFilter;
    Rely(usr?: null): RelyEventFilter;

    'RemoveIlk(bytes32)'(ilk?: null): RemoveIlkEventFilter;
    RemoveIlk(ilk?: null): RemoveIlkEventFilter;

    'SymbolError(bytes32)'(ilk?: null): SymbolErrorEventFilter;
    SymbolError(ilk?: null): SymbolErrorEventFilter;

    'UpdateIlk(bytes32)'(ilk?: null): UpdateIlkEventFilter;
    UpdateIlk(ilk?: null): UpdateIlkEventFilter;
  };

  estimateGas: {
    add(adapter: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    cat(overrides?: CallOverrides): Promise<BigNumber>;

    class(ilk: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    dec(ilk: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    deny(usr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    dog(overrides?: CallOverrides): Promise<BigNumber>;

    'file(bytes32,bytes32,uint256)'(
      ilk: BytesLike,
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'file(bytes32,bytes32,string)'(
      ilk: BytesLike,
      what: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'file(bytes32,address)'(
      what: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'file(bytes32,bytes32,address)'(
      ilk: BytesLike,
      what: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    gem(ilk: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    get(pos: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ilkData(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    info(ilk: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    join(ilk: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'list()'(overrides?: CallOverrides): Promise<BigNumber>;

    'list(uint256,uint256)'(start: BigNumberish, end: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    name(ilk: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    pip(ilk: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    pos(ilk: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    put(
      _ilk: BytesLike,
      _join: string,
      _gem: string,
      _dec: BigNumberish,
      _class: BigNumberish,
      _pip: string,
      _xlip: string,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    rely(usr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    remove(ilk: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    removeAuth(ilk: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    spot(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(ilk: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    update(ilk: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    vat(overrides?: CallOverrides): Promise<BigNumber>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    xlip(ilk: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    add(adapter: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    cat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    class(ilk: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dec(ilk: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deny(usr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    dog(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'file(bytes32,bytes32,uint256)'(
      ilk: BytesLike,
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'file(bytes32,bytes32,string)'(
      ilk: BytesLike,
      what: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'file(bytes32,address)'(
      what: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'file(bytes32,bytes32,address)'(
      ilk: BytesLike,
      what: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    gem(ilk: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get(pos: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ilkData(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    info(ilk: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    join(ilk: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'list()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'list(uint256,uint256)'(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    name(ilk: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pip(ilk: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pos(ilk: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    put(
      _ilk: BytesLike,
      _join: string,
      _gem: string,
      _dec: BigNumberish,
      _class: BigNumberish,
      _pip: string,
      _xlip: string,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    rely(usr: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    remove(ilk: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    removeAuth(
      ilk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    spot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(ilk: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    update(ilk: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    vat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wards(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xlip(ilk: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
