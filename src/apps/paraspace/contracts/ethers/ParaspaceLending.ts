/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace DataTypes {
  export type TokenDataStruct = {
    symbol: PromiseOrValue<string>;
    tokenAddress: PromiseOrValue<string>;
  };

  export type TokenDataStructOutput = [string, string] & {
    symbol: string;
    tokenAddress: string;
  };

  export type ReserveConfigDataStruct = {
    decimals: PromiseOrValue<BigNumberish>;
    ltv: PromiseOrValue<BigNumberish>;
    liquidationThreshold: PromiseOrValue<BigNumberish>;
    liquidationBonus: PromiseOrValue<BigNumberish>;
    reserveFactor: PromiseOrValue<BigNumberish>;
    usageAsCollateralEnabled: PromiseOrValue<boolean>;
    borrowingEnabled: PromiseOrValue<boolean>;
    isActive: PromiseOrValue<boolean>;
    isFrozen: PromiseOrValue<boolean>;
    isPaused: PromiseOrValue<boolean>;
  };

  export type ReserveConfigDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
  ] & {
    decimals: BigNumber;
    ltv: BigNumber;
    liquidationThreshold: BigNumber;
    liquidationBonus: BigNumber;
    reserveFactor: BigNumber;
    usageAsCollateralEnabled: boolean;
    borrowingEnabled: boolean;
    isActive: boolean;
    isFrozen: boolean;
    isPaused: boolean;
  };
}

export interface ParaspaceLendingInterface extends utils.Interface {
  functions: {
    'ADDRESSES_PROVIDER()': FunctionFragment;
    'getAllReservesTokens()': FunctionFragment;
    'getAllXTokens()': FunctionFragment;
    'getLiquidationProtocolFee(address)': FunctionFragment;
    'getReserveCaps(address)': FunctionFragment;
    'getReserveConfigurationData(address)': FunctionFragment;
    'getReserveData(address)': FunctionFragment;
    'getReserveTokensAddresses(address)': FunctionFragment;
    'getSiloedBorrowing(address)': FunctionFragment;
    'getStrategyAddresses(address)': FunctionFragment;
    'getTotalDebt(address)': FunctionFragment;
    'getUserReserveData(address,address)': FunctionFragment;
    'getXTokenTotalSupply(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'ADDRESSES_PROVIDER'
      | 'getAllReservesTokens'
      | 'getAllXTokens'
      | 'getLiquidationProtocolFee'
      | 'getReserveCaps'
      | 'getReserveConfigurationData'
      | 'getReserveData'
      | 'getReserveTokensAddresses'
      | 'getSiloedBorrowing'
      | 'getStrategyAddresses'
      | 'getTotalDebt'
      | 'getUserReserveData'
      | 'getXTokenTotalSupply',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'ADDRESSES_PROVIDER', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAllReservesTokens', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAllXTokens', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLiquidationProtocolFee', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getReserveCaps', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getReserveConfigurationData', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getReserveData', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getReserveTokensAddresses', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getSiloedBorrowing', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getStrategyAddresses', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getTotalDebt', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getUserReserveData',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getXTokenTotalSupply', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'ADDRESSES_PROVIDER', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllReservesTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllXTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLiquidationProtocolFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReserveCaps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReserveConfigurationData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReserveData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReserveTokensAddresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSiloedBorrowing', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStrategyAddresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserReserveData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getXTokenTotalSupply', data: BytesLike): Result;

  events: {};
}

export interface ParaspaceLending extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ParaspaceLendingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<[string]>;

    getAllReservesTokens(overrides?: CallOverrides): Promise<[DataTypes.TokenDataStructOutput[]]>;

    getAllXTokens(overrides?: CallOverrides): Promise<[DataTypes.TokenDataStructOutput[]]>;

    getLiquidationProtocolFee(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getReserveCaps(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { borrowCap: BigNumber; supplyCap: BigNumber }>;

    getReserveConfigurationData(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [DataTypes.ReserveConfigDataStructOutput] & {
        reserveData: DataTypes.ReserveConfigDataStructOutput;
      }
    >;

    getReserveData(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        accruedToTreasuryScaled: BigNumber;
        totalPToken: BigNumber;
        totalVariableDebt: BigNumber;
        liquidityRate: BigNumber;
        variableBorrowRate: BigNumber;
        liquidityIndex: BigNumber;
        variableBorrowIndex: BigNumber;
        lastUpdateTimestamp: number;
      }
    >;

    getReserveTokensAddresses(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string] & {
        xTokenAddress: string;
        variableDebtTokenAddress: string;
      }
    >;

    getSiloedBorrowing(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    getStrategyAddresses(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string] & {
        interestRateStrategyAddress: string;
        auctionStrategyAddress: string;
      }
    >;

    getTotalDebt(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserReserveData(
      asset: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        currentXTokenBalance: BigNumber;
        scaledXTokenBalance: BigNumber;
        collateralizedBalance: BigNumber;
        currentVariableDebt: BigNumber;
        scaledVariableDebt: BigNumber;
        liquidityRate: BigNumber;
        usageAsCollateralEnabled: boolean;
      }
    >;

    getXTokenTotalSupply(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<string>;

  getAllReservesTokens(overrides?: CallOverrides): Promise<DataTypes.TokenDataStructOutput[]>;

  getAllXTokens(overrides?: CallOverrides): Promise<DataTypes.TokenDataStructOutput[]>;

  getLiquidationProtocolFee(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getReserveCaps(
    asset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { borrowCap: BigNumber; supplyCap: BigNumber }>;

  getReserveConfigurationData(
    asset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<DataTypes.ReserveConfigDataStructOutput>;

  getReserveData(
    asset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
      accruedToTreasuryScaled: BigNumber;
      totalPToken: BigNumber;
      totalVariableDebt: BigNumber;
      liquidityRate: BigNumber;
      variableBorrowRate: BigNumber;
      liquidityIndex: BigNumber;
      variableBorrowIndex: BigNumber;
      lastUpdateTimestamp: number;
    }
  >;

  getReserveTokensAddresses(
    asset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [string, string] & {
      xTokenAddress: string;
      variableDebtTokenAddress: string;
    }
  >;

  getSiloedBorrowing(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  getStrategyAddresses(
    asset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [string, string] & {
      interestRateStrategyAddress: string;
      auctionStrategyAddress: string;
    }
  >;

  getTotalDebt(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getUserReserveData(
    asset: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      currentXTokenBalance: BigNumber;
      scaledXTokenBalance: BigNumber;
      collateralizedBalance: BigNumber;
      currentVariableDebt: BigNumber;
      scaledVariableDebt: BigNumber;
      liquidityRate: BigNumber;
      usageAsCollateralEnabled: boolean;
    }
  >;

  getXTokenTotalSupply(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<string>;

    getAllReservesTokens(overrides?: CallOverrides): Promise<DataTypes.TokenDataStructOutput[]>;

    getAllXTokens(overrides?: CallOverrides): Promise<DataTypes.TokenDataStructOutput[]>;

    getLiquidationProtocolFee(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getReserveCaps(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { borrowCap: BigNumber; supplyCap: BigNumber }>;

    getReserveConfigurationData(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<DataTypes.ReserveConfigDataStructOutput>;

    getReserveData(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        accruedToTreasuryScaled: BigNumber;
        totalPToken: BigNumber;
        totalVariableDebt: BigNumber;
        liquidityRate: BigNumber;
        variableBorrowRate: BigNumber;
        liquidityIndex: BigNumber;
        variableBorrowIndex: BigNumber;
        lastUpdateTimestamp: number;
      }
    >;

    getReserveTokensAddresses(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string] & {
        xTokenAddress: string;
        variableDebtTokenAddress: string;
      }
    >;

    getSiloedBorrowing(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    getStrategyAddresses(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string] & {
        interestRateStrategyAddress: string;
        auctionStrategyAddress: string;
      }
    >;

    getTotalDebt(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getUserReserveData(
      asset: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        currentXTokenBalance: BigNumber;
        scaledXTokenBalance: BigNumber;
        collateralizedBalance: BigNumber;
        currentVariableDebt: BigNumber;
        scaledVariableDebt: BigNumber;
        liquidityRate: BigNumber;
        usageAsCollateralEnabled: boolean;
      }
    >;

    getXTokenTotalSupply(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    getAllReservesTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getAllXTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidationProtocolFee(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getReserveCaps(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getReserveConfigurationData(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getReserveData(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getReserveTokensAddresses(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getSiloedBorrowing(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getStrategyAddresses(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDebt(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getUserReserveData(
      asset: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getXTokenTotalSupply(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ADDRESSES_PROVIDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllReservesTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllXTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidationProtocolFee(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserveCaps(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserveConfigurationData(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getReserveData(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserveTokensAddresses(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSiloedBorrowing(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStrategyAddresses(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalDebt(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserReserveData(
      asset: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getXTokenTotalSupply(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
