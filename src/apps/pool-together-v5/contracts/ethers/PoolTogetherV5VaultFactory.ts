/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface PoolTogetherV5VaultFactoryInterface extends utils.Interface {
  functions: {
    'allVaults(uint256)': FunctionFragment;
    'deployVault(address,string,string,address,address,address,address,uint32,address)': FunctionFragment;
    'deployedVaults(address)': FunctionFragment;
    'deployerNonces(address)': FunctionFragment;
    'totalVaults()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: 'allVaults' | 'deployVault' | 'deployedVaults' | 'deployerNonces' | 'totalVaults',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'allVaults', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'deployVault',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'deployedVaults', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'deployerNonces', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'totalVaults', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'allVaults', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deployVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deployedVaults', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deployerNonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalVaults', data: BytesLike): Result;

  events: {
    'NewFactoryVault(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'NewFactoryVault'): EventFragment;
}

export interface NewFactoryVaultEventObject {
  vault: string;
  vaultFactory: string;
}
export type NewFactoryVaultEvent = TypedEvent<[string, string], NewFactoryVaultEventObject>;

export type NewFactoryVaultEventFilter = TypedEventFilter<NewFactoryVaultEvent>;

export interface PoolTogetherV5VaultFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolTogetherV5VaultFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allVaults(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    deployVault(
      _asset: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _yieldVault: PromiseOrValue<string>,
      _prizePool: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      _yieldFeeRecipient: PromiseOrValue<string>,
      _yieldFeePercentage: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deployedVaults(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    deployerNonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalVaults(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  allVaults(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  deployVault(
    _asset: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _yieldVault: PromiseOrValue<string>,
    _prizePool: PromiseOrValue<string>,
    _claimer: PromiseOrValue<string>,
    _yieldFeeRecipient: PromiseOrValue<string>,
    _yieldFeePercentage: PromiseOrValue<BigNumberish>,
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deployedVaults(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  deployerNonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  totalVaults(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    allVaults(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    deployVault(
      _asset: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _yieldVault: PromiseOrValue<string>,
      _prizePool: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      _yieldFeeRecipient: PromiseOrValue<string>,
      _yieldFeePercentage: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>;

    deployedVaults(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    deployerNonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    totalVaults(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'NewFactoryVault(address,address)'(
      vault?: PromiseOrValue<string> | null,
      vaultFactory?: PromiseOrValue<string> | null,
    ): NewFactoryVaultEventFilter;
    NewFactoryVault(
      vault?: PromiseOrValue<string> | null,
      vaultFactory?: PromiseOrValue<string> | null,
    ): NewFactoryVaultEventFilter;
  };

  estimateGas: {
    allVaults(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    deployVault(
      _asset: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _yieldVault: PromiseOrValue<string>,
      _prizePool: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      _yieldFeeRecipient: PromiseOrValue<string>,
      _yieldFeePercentage: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deployedVaults(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    deployerNonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    totalVaults(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allVaults(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployVault(
      _asset: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _yieldVault: PromiseOrValue<string>,
      _prizePool: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      _yieldFeeRecipient: PromiseOrValue<string>,
      _yieldFeePercentage: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deployedVaults(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployerNonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVaults(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
