/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface JonesStakingRewardsFactoryInterface extends utils.Interface {
  functions: {
    'addToContractWhitelist(address,uint256)': FunctionFragment;
    'deploy(address,uint256,uint256,uint256,uint256,uint256)': FunctionFragment;
    'notifyRewardAmount(uint256)': FunctionFragment;
    'notifyRewardAmounts()': FunctionFragment;
    'owner()': FunctionFragment;
    'removeFromContractWhitelist(address,uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardsTokenJones()': FunctionFragment;
    'stakingID(uint256)': FunctionFragment;
    'stakingRewardsGenesis()': FunctionFragment;
    'stakingRewardsInfoByStakingToken(uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'withdrawRewardToken(uint256)': FunctionFragment;
    'withdrawRewardTokensFromContract(uint256,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addToContractWhitelist'
      | 'deploy'
      | 'notifyRewardAmount'
      | 'notifyRewardAmounts'
      | 'owner'
      | 'removeFromContractWhitelist'
      | 'renounceOwnership'
      | 'rewardsTokenJones'
      | 'stakingID'
      | 'stakingRewardsGenesis'
      | 'stakingRewardsInfoByStakingToken'
      | 'transferOwnership'
      | 'withdrawRewardToken'
      | 'withdrawRewardTokensFromContract',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'addToContractWhitelist', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'deploy',
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'notifyRewardAmount', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'notifyRewardAmounts', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'removeFromContractWhitelist', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardsTokenJones', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stakingID', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'stakingRewardsGenesis', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stakingRewardsInfoByStakingToken', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'withdrawRewardToken', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'withdrawRewardTokensFromContract',
    values: [BigNumberish, BigNumberish],
  ): string;

  decodeFunctionResult(functionFragment: 'addToContractWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deploy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'notifyRewardAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'notifyRewardAmounts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeFromContractWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsTokenJones', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakingID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakingRewardsGenesis', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakingRewardsInfoByStakingToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawRewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawRewardTokensFromContract', data: BytesLike): Result;

  events: {
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface JonesStakingRewardsFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JonesStakingRewardsFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addToContractWhitelist(
      _contract: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deploy(
      _stakingToken: string,
      _rewardAmountJONES: BigNumberish,
      _rewardsDuration: BigNumberish,
      _boostedTimePeriod: BigNumberish,
      _boost: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    notifyRewardAmount(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    notifyRewardAmounts(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeFromContractWhitelist(
      _contract: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    rewardsTokenJones(overrides?: CallOverrides): Promise<[string]>;

    stakingID(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    stakingRewardsGenesis(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakingRewardsInfoByStakingToken(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber] & {
        stakingRewards: string;
        rewardAmountJONES: BigNumber;
        id: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawRewardToken(
      _amountJONES: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawRewardTokensFromContract(
      _amountJONES: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  addToContractWhitelist(
    _contract: string,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  deploy(
    _stakingToken: string,
    _rewardAmountJONES: BigNumberish,
    _rewardsDuration: BigNumberish,
    _boostedTimePeriod: BigNumberish,
    _boost: BigNumberish,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  notifyRewardAmount(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  notifyRewardAmounts(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeFromContractWhitelist(
    _contract: string,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  rewardsTokenJones(overrides?: CallOverrides): Promise<string>;

  stakingID(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  stakingRewardsGenesis(overrides?: CallOverrides): Promise<BigNumber>;

  stakingRewardsInfoByStakingToken(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, BigNumber] & {
      stakingRewards: string;
      rewardAmountJONES: BigNumber;
      id: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawRewardToken(
    _amountJONES: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawRewardTokensFromContract(
    _amountJONES: BigNumberish,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    addToContractWhitelist(_contract: string, _id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    deploy(
      _stakingToken: string,
      _rewardAmountJONES: BigNumberish,
      _rewardsDuration: BigNumberish,
      _boostedTimePeriod: BigNumberish,
      _boost: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    notifyRewardAmount(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    notifyRewardAmounts(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeFromContractWhitelist(_contract: string, _id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardsTokenJones(overrides?: CallOverrides): Promise<string>;

    stakingID(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    stakingRewardsGenesis(overrides?: CallOverrides): Promise<BigNumber>;

    stakingRewardsInfoByStakingToken(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber] & {
        stakingRewards: string;
        rewardAmountJONES: BigNumber;
        id: BigNumber;
      }
    >;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    withdrawRewardToken(_amountJONES: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawRewardTokensFromContract(
      _amountJONES: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addToContractWhitelist(
      _contract: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    deploy(
      _stakingToken: string,
      _rewardAmountJONES: BigNumberish,
      _rewardsDuration: BigNumberish,
      _boostedTimePeriod: BigNumberish,
      _boost: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    notifyRewardAmount(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    notifyRewardAmounts(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromContractWhitelist(
      _contract: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    rewardsTokenJones(overrides?: CallOverrides): Promise<BigNumber>;

    stakingID(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    stakingRewardsGenesis(overrides?: CallOverrides): Promise<BigNumber>;

    stakingRewardsInfoByStakingToken(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawRewardToken(
      _amountJONES: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawRewardTokensFromContract(
      _amountJONES: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToContractWhitelist(
      _contract: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    deploy(
      _stakingToken: string,
      _rewardAmountJONES: BigNumberish,
      _rewardsDuration: BigNumberish,
      _boostedTimePeriod: BigNumberish,
      _boost: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    notifyRewardAmount(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    notifyRewardAmounts(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromContractWhitelist(
      _contract: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    rewardsTokenJones(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingID(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingRewardsGenesis(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingRewardsInfoByStakingToken(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawRewardToken(
      _amountJONES: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawRewardTokensFromContract(
      _amountJONES: BigNumberish,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
