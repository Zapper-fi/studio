/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { getContract, GetContractReturnType, PublicClient } from 'viem';

export const rariFusePoolsDirectoryAbi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'index',
        type: 'uint256',
      },
      {
        components: [
          {
            internalType: 'string',
            name: 'name',
            type: 'string',
          },
          {
            internalType: 'address',
            name: 'creator',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'comptroller',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'blockPosted',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'timestampPosted',
            type: 'uint256',
          },
        ],
        indexed: false,
        internalType: 'struct FusePoolDirectory.FusePool',
        name: 'pool',
        type: 'tuple',
      },
    ],
    name: 'PoolRegistered',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'deployerWhitelist',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
    constant: true,
  },
  {
    inputs: [],
    name: 'enforceDeployerWhitelist',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
    constant: true,
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
    constant: true,
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'poolExists',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
    constant: true,
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'pools',
    outputs: [
      {
        internalType: 'string',
        name: 'name',
        type: 'string',
      },
      {
        internalType: 'address',
        name: 'creator',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'comptroller',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'blockPosted',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'timestampPosted',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
    constant: true,
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bool',
        name: '_enforceDeployerWhitelist',
        type: 'bool',
      },
      {
        internalType: 'address[]',
        name: '_deployerWhitelist',
        type: 'address[]',
      },
    ],
    name: 'initialize',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bool',
        name: '_enforceDeployerWhitelist',
        type: 'bool',
      },
    ],
    name: '_setDeployerWhitelistEnforcement',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: 'deployers',
        type: 'address[]',
      },
    ],
    name: '_whitelistDeployers',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'name',
        type: 'string',
      },
      {
        internalType: 'address',
        name: 'comptroller',
        type: 'address',
      },
    ],
    name: 'registerPool',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'name',
        type: 'string',
      },
      {
        internalType: 'address',
        name: 'implementation',
        type: 'address',
      },
      {
        internalType: 'bool',
        name: 'enforceWhitelist',
        type: 'bool',
      },
      {
        internalType: 'uint256',
        name: 'closeFactor',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'maxAssets',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'liquidationIncentive',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'priceOracle',
        type: 'address',
      },
    ],
    name: 'deployPool',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getAllPools',
    outputs: [
      {
        components: [
          {
            internalType: 'string',
            name: 'name',
            type: 'string',
          },
          {
            internalType: 'address',
            name: 'creator',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'comptroller',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'blockPosted',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'timestampPosted',
            type: 'uint256',
          },
        ],
        internalType: 'struct FusePoolDirectory.FusePool[]',
        name: '',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
    constant: true,
  },
  {
    inputs: [],
    name: 'getPublicPools',
    outputs: [
      {
        internalType: 'uint256[]',
        name: '',
        type: 'uint256[]',
      },
      {
        components: [
          {
            internalType: 'string',
            name: 'name',
            type: 'string',
          },
          {
            internalType: 'address',
            name: 'creator',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'comptroller',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'blockPosted',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'timestampPosted',
            type: 'uint256',
          },
        ],
        internalType: 'struct FusePoolDirectory.FusePool[]',
        name: '',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
    constant: true,
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'getPoolsByAccount',
    outputs: [
      {
        internalType: 'uint256[]',
        name: '',
        type: 'uint256[]',
      },
      {
        components: [
          {
            internalType: 'string',
            name: 'name',
            type: 'string',
          },
          {
            internalType: 'address',
            name: 'creator',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'comptroller',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'blockPosted',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'timestampPosted',
            type: 'uint256',
          },
        ],
        internalType: 'struct FusePoolDirectory.FusePool[]',
        name: '',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
    constant: true,
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'getBookmarks',
    outputs: [
      {
        internalType: 'address[]',
        name: '',
        type: 'address[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
    constant: true,
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'comptroller',
        type: 'address',
      },
    ],
    name: 'bookmarkPool',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
] as const;

export type RariFusePoolsDirectory = typeof rariFusePoolsDirectoryAbi;
export type RariFusePoolsDirectoryContract = GetContractReturnType<RariFusePoolsDirectory, PublicClient>;

export class RariFusePoolsDirectory__factory {
  static connect(address: string, client: PublicClient) {
    return getContract({ address, abi: rariFusePoolsDirectoryAbi, publicClient: client });
  }
}
