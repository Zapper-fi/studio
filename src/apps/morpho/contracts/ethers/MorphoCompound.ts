/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace Types {
  export type MaxGasForMatchingStruct = {
    supply: PromiseOrValue<BigNumberish>;
    borrow: PromiseOrValue<BigNumberish>;
    withdraw: PromiseOrValue<BigNumberish>;
    repay: PromiseOrValue<BigNumberish>;
  };

  export type MaxGasForMatchingStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {
    supply: BigNumber;
    borrow: BigNumber;
    withdraw: BigNumber;
    repay: BigNumber;
  };

  export type MarketParametersStruct = {
    reserveFactor: PromiseOrValue<BigNumberish>;
    p2pIndexCursor: PromiseOrValue<BigNumberish>;
  };

  export type MarketParametersStructOutput = [number, number] & {
    reserveFactor: number;
    p2pIndexCursor: number;
  };
}

export interface MorphoCompoundInterface extends utils.Interface {
  functions: {
    'CTOKEN_DECIMALS()': FunctionFragment;
    'MAX_BASIS_POINTS()': FunctionFragment;
    'WAD()': FunctionFragment;
    'borrow(address,uint256)': FunctionFragment;
    'borrow(address,uint256,uint256)': FunctionFragment;
    'borrowBalanceInOf(address,address)': FunctionFragment;
    'cEth()': FunctionFragment;
    'claimRewards(address[],bool)': FunctionFragment;
    'claimToTreasury(address[],uint256[])': FunctionFragment;
    'comptroller()': FunctionFragment;
    'createMarket(address,(uint16,uint16))': FunctionFragment;
    'defaultMaxGasForMatching()': FunctionFragment;
    'deltas(address)': FunctionFragment;
    'dustThreshold()': FunctionFragment;
    'enteredMarkets(address,uint256)': FunctionFragment;
    'getAllMarkets()': FunctionFragment;
    'getEnteredMarkets(address)': FunctionFragment;
    'getHead(address,uint8)': FunctionFragment;
    'getNext(address,uint8,address)': FunctionFragment;
    'incentivesVault()': FunctionFragment;
    'initialize(address,address,address,(uint64,uint64,uint64,uint64),uint256,uint256,address,address)': FunctionFragment;
    'interestRatesManager()': FunctionFragment;
    'isClaimRewardsPaused()': FunctionFragment;
    'lastBorrowBlock(address)': FunctionFragment;
    'lastPoolIndexes(address)': FunctionFragment;
    'liquidate(address,address,address,uint256)': FunctionFragment;
    'marketParameters(address)': FunctionFragment;
    'marketStatus(address)': FunctionFragment;
    'marketsCreated(uint256)': FunctionFragment;
    'maxSortedUsers()': FunctionFragment;
    'owner()': FunctionFragment;
    'p2pBorrowIndex(address)': FunctionFragment;
    'p2pDisabled(address)': FunctionFragment;
    'p2pSupplyIndex(address)': FunctionFragment;
    'positionsManager()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'repay(address,address,uint256)': FunctionFragment;
    'rewardsManager()': FunctionFragment;
    'setClaimRewardsPauseStatus(bool)': FunctionFragment;
    'setDefaultMaxGasForMatching((uint64,uint64,uint64,uint64))': FunctionFragment;
    'setDustThreshold(uint256)': FunctionFragment;
    'setIncentivesVault(address)': FunctionFragment;
    'setInterestRatesManager(address)': FunctionFragment;
    'setMaxSortedUsers(uint256)': FunctionFragment;
    'setP2PDisabled(address,bool)': FunctionFragment;
    'setP2PIndexCursor(address,uint16)': FunctionFragment;
    'setPartialPauseStatus(address,bool)': FunctionFragment;
    'setPauseStatus(address,bool)': FunctionFragment;
    'setPositionsManager(address)': FunctionFragment;
    'setReserveFactor(address,uint16)': FunctionFragment;
    'setRewardsManager(address)': FunctionFragment;
    'setTreasuryVault(address)': FunctionFragment;
    'supply(address,address,uint256)': FunctionFragment;
    'supply(address,address,uint256,uint256)': FunctionFragment;
    'supplyBalanceInOf(address,address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'treasuryVault()': FunctionFragment;
    'updateP2PIndexes(address)': FunctionFragment;
    'userMembership(address,address)': FunctionFragment;
    'wEth()': FunctionFragment;
    'withdraw(address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'CTOKEN_DECIMALS'
      | 'MAX_BASIS_POINTS'
      | 'WAD'
      | 'borrow(address,uint256)'
      | 'borrow(address,uint256,uint256)'
      | 'borrowBalanceInOf'
      | 'cEth'
      | 'claimRewards'
      | 'claimToTreasury'
      | 'comptroller'
      | 'createMarket'
      | 'defaultMaxGasForMatching'
      | 'deltas'
      | 'dustThreshold'
      | 'enteredMarkets'
      | 'getAllMarkets'
      | 'getEnteredMarkets'
      | 'getHead'
      | 'getNext'
      | 'incentivesVault'
      | 'initialize'
      | 'interestRatesManager'
      | 'isClaimRewardsPaused'
      | 'lastBorrowBlock'
      | 'lastPoolIndexes'
      | 'liquidate'
      | 'marketParameters'
      | 'marketStatus'
      | 'marketsCreated'
      | 'maxSortedUsers'
      | 'owner'
      | 'p2pBorrowIndex'
      | 'p2pDisabled'
      | 'p2pSupplyIndex'
      | 'positionsManager'
      | 'renounceOwnership'
      | 'repay'
      | 'rewardsManager'
      | 'setClaimRewardsPauseStatus'
      | 'setDefaultMaxGasForMatching'
      | 'setDustThreshold'
      | 'setIncentivesVault'
      | 'setInterestRatesManager'
      | 'setMaxSortedUsers'
      | 'setP2PDisabled'
      | 'setP2PIndexCursor'
      | 'setPartialPauseStatus'
      | 'setPauseStatus'
      | 'setPositionsManager'
      | 'setReserveFactor'
      | 'setRewardsManager'
      | 'setTreasuryVault'
      | 'supply(address,address,uint256)'
      | 'supply(address,address,uint256,uint256)'
      | 'supplyBalanceInOf'
      | 'transferOwnership'
      | 'treasuryVault'
      | 'updateP2PIndexes'
      | 'userMembership'
      | 'wEth'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'CTOKEN_DECIMALS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_BASIS_POINTS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'WAD', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'borrow(address,uint256)',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'borrow(address,uint256,uint256)',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'borrowBalanceInOf',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'cEth', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'claimRewards',
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'claimToTreasury',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(functionFragment: 'comptroller', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'createMarket',
    values: [PromiseOrValue<string>, Types.MarketParametersStruct],
  ): string;
  encodeFunctionData(functionFragment: 'defaultMaxGasForMatching', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deltas', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'dustThreshold', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'enteredMarkets',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getAllMarkets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getEnteredMarkets', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getHead',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getNext',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'incentivesVault', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      Types.MaxGasForMatchingStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'interestRatesManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isClaimRewardsPaused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastBorrowBlock', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'lastPoolIndexes', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'liquidate',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'marketParameters', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'marketStatus', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'marketsCreated', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'maxSortedUsers', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'p2pBorrowIndex', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'p2pDisabled', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'p2pSupplyIndex', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'positionsManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'repay',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'rewardsManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setClaimRewardsPauseStatus', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'setDefaultMaxGasForMatching', values: [Types.MaxGasForMatchingStruct]): string;
  encodeFunctionData(functionFragment: 'setDustThreshold', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setIncentivesVault', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setInterestRatesManager', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setMaxSortedUsers', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setP2PDisabled',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setP2PIndexCursor',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setPartialPauseStatus',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setPauseStatus',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setPositionsManager', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setReserveFactor',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setRewardsManager', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setTreasuryVault', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'supply(address,address,uint256)',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'supply(address,address,uint256,uint256)',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'supplyBalanceInOf',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'treasuryVault', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateP2PIndexes', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'userMembership',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'wEth', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'CTOKEN_DECIMALS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_BASIS_POINTS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'WAD', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrow(address,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrow(address,uint256,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowBalanceInOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cEth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimToTreasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'comptroller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'defaultMaxGasForMatching', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deltas', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dustThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enteredMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEnteredMarkets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getHead', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNext', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'incentivesVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'interestRatesManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isClaimRewardsPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastBorrowBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastPoolIndexes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketParameters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketsCreated', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxSortedUsers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'p2pBorrowIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'p2pDisabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'p2pSupplyIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'positionsManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setClaimRewardsPauseStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDefaultMaxGasForMatching', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDustThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setIncentivesVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setInterestRatesManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxSortedUsers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setP2PDisabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setP2PIndexCursor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPartialPauseStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPauseStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPositionsManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setReserveFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewardsManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTreasuryVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supply(address,address,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supply(address,address,uint256,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supplyBalanceInOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasuryVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateP2PIndexes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userMembership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'wEth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'ClaimRewardsPauseStatusSet(bool)': EventFragment;
    'DefaultMaxGasForMatchingSet(tuple)': EventFragment;
    'DustThresholdSet(uint256)': EventFragment;
    'IncentivesVaultSet(address)': EventFragment;
    'InterestRatesSet(address)': EventFragment;
    'MarketCreated(address,uint16,uint16)': EventFragment;
    'MaxSortedUsersSet(uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'P2PIndexCursorSet(address,uint16)': EventFragment;
    'P2PStatusSet(address,bool)': EventFragment;
    'PartialPauseStatusSet(address,bool)': EventFragment;
    'PauseStatusSet(address,bool)': EventFragment;
    'PositionsManagerSet(address)': EventFragment;
    'ReserveFactorSet(address,uint16)': EventFragment;
    'ReserveFeeClaimed(address,uint256)': EventFragment;
    'RewardsClaimed(address,uint256,bool)': EventFragment;
    'RewardsManagerSet(address)': EventFragment;
    'TreasuryVaultSet(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ClaimRewardsPauseStatusSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DefaultMaxGasForMatchingSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DustThresholdSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'IncentivesVaultSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InterestRatesSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxSortedUsersSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'P2PIndexCursorSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'P2PStatusSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PartialPauseStatusSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PauseStatusSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PositionsManagerSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReserveFactorSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReserveFeeClaimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardsClaimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardsManagerSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TreasuryVaultSet'): EventFragment;
}

export interface ClaimRewardsPauseStatusSetEventObject {
  _newStatus: boolean;
}
export type ClaimRewardsPauseStatusSetEvent = TypedEvent<[boolean], ClaimRewardsPauseStatusSetEventObject>;

export type ClaimRewardsPauseStatusSetEventFilter = TypedEventFilter<ClaimRewardsPauseStatusSetEvent>;

export interface DefaultMaxGasForMatchingSetEventObject {
  _defaultMaxGasForMatching: Types.MaxGasForMatchingStructOutput;
}
export type DefaultMaxGasForMatchingSetEvent = TypedEvent<
  [Types.MaxGasForMatchingStructOutput],
  DefaultMaxGasForMatchingSetEventObject
>;

export type DefaultMaxGasForMatchingSetEventFilter = TypedEventFilter<DefaultMaxGasForMatchingSetEvent>;

export interface DustThresholdSetEventObject {
  _dustThreshold: BigNumber;
}
export type DustThresholdSetEvent = TypedEvent<[BigNumber], DustThresholdSetEventObject>;

export type DustThresholdSetEventFilter = TypedEventFilter<DustThresholdSetEvent>;

export interface IncentivesVaultSetEventObject {
  _newIncentivesVaultAddress: string;
}
export type IncentivesVaultSetEvent = TypedEvent<[string], IncentivesVaultSetEventObject>;

export type IncentivesVaultSetEventFilter = TypedEventFilter<IncentivesVaultSetEvent>;

export interface InterestRatesSetEventObject {
  _interestRatesManager: string;
}
export type InterestRatesSetEvent = TypedEvent<[string], InterestRatesSetEventObject>;

export type InterestRatesSetEventFilter = TypedEventFilter<InterestRatesSetEvent>;

export interface MarketCreatedEventObject {
  _poolTokenAddress: string;
  _reserveFactor: number;
  _p2pIndexCursor: number;
}
export type MarketCreatedEvent = TypedEvent<[string, number, number], MarketCreatedEventObject>;

export type MarketCreatedEventFilter = TypedEventFilter<MarketCreatedEvent>;

export interface MaxSortedUsersSetEventObject {
  _newValue: BigNumber;
}
export type MaxSortedUsersSetEvent = TypedEvent<[BigNumber], MaxSortedUsersSetEventObject>;

export type MaxSortedUsersSetEventFilter = TypedEventFilter<MaxSortedUsersSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface P2PIndexCursorSetEventObject {
  _poolTokenAddress: string;
  _newValue: number;
}
export type P2PIndexCursorSetEvent = TypedEvent<[string, number], P2PIndexCursorSetEventObject>;

export type P2PIndexCursorSetEventFilter = TypedEventFilter<P2PIndexCursorSetEvent>;

export interface P2PStatusSetEventObject {
  _poolTokenAddress: string;
  _p2pDisabled: boolean;
}
export type P2PStatusSetEvent = TypedEvent<[string, boolean], P2PStatusSetEventObject>;

export type P2PStatusSetEventFilter = TypedEventFilter<P2PStatusSetEvent>;

export interface PartialPauseStatusSetEventObject {
  _poolTokenAddress: string;
  _newStatus: boolean;
}
export type PartialPauseStatusSetEvent = TypedEvent<[string, boolean], PartialPauseStatusSetEventObject>;

export type PartialPauseStatusSetEventFilter = TypedEventFilter<PartialPauseStatusSetEvent>;

export interface PauseStatusSetEventObject {
  _poolTokenAddress: string;
  _newStatus: boolean;
}
export type PauseStatusSetEvent = TypedEvent<[string, boolean], PauseStatusSetEventObject>;

export type PauseStatusSetEventFilter = TypedEventFilter<PauseStatusSetEvent>;

export interface PositionsManagerSetEventObject {
  _positionsManager: string;
}
export type PositionsManagerSetEvent = TypedEvent<[string], PositionsManagerSetEventObject>;

export type PositionsManagerSetEventFilter = TypedEventFilter<PositionsManagerSetEvent>;

export interface ReserveFactorSetEventObject {
  _poolTokenAddress: string;
  _newValue: number;
}
export type ReserveFactorSetEvent = TypedEvent<[string, number], ReserveFactorSetEventObject>;

export type ReserveFactorSetEventFilter = TypedEventFilter<ReserveFactorSetEvent>;

export interface ReserveFeeClaimedEventObject {
  _poolTokenAddress: string;
  _amountClaimed: BigNumber;
}
export type ReserveFeeClaimedEvent = TypedEvent<[string, BigNumber], ReserveFeeClaimedEventObject>;

export type ReserveFeeClaimedEventFilter = TypedEventFilter<ReserveFeeClaimedEvent>;

export interface RewardsClaimedEventObject {
  _user: string;
  _amountClaimed: BigNumber;
  _traded: boolean;
}
export type RewardsClaimedEvent = TypedEvent<[string, BigNumber, boolean], RewardsClaimedEventObject>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface RewardsManagerSetEventObject {
  _newRewardsManagerAddress: string;
}
export type RewardsManagerSetEvent = TypedEvent<[string], RewardsManagerSetEventObject>;

export type RewardsManagerSetEventFilter = TypedEventFilter<RewardsManagerSetEvent>;

export interface TreasuryVaultSetEventObject {
  _newTreasuryVaultAddress: string;
}
export type TreasuryVaultSetEvent = TypedEvent<[string], TreasuryVaultSetEventObject>;

export type TreasuryVaultSetEventFilter = TypedEventFilter<TreasuryVaultSetEvent>;

export interface MorphoCompound extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MorphoCompoundInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CTOKEN_DECIMALS(overrides?: CallOverrides): Promise<[number]>;

    MAX_BASIS_POINTS(overrides?: CallOverrides): Promise<[number]>;

    WAD(overrides?: CallOverrides): Promise<[BigNumber]>;

    'borrow(address,uint256)'(
      _poolTokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'borrow(address,uint256,uint256)'(
      _poolTokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _maxGasForMatching: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    borrowBalanceInOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { inP2P: BigNumber; onPool: BigNumber }>;

    cEth(overrides?: CallOverrides): Promise<[string]>;

    claimRewards(
      _cTokenAddresses: PromiseOrValue<string>[],
      _tradeForMorphoToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimToTreasury(
      _poolTokenAddresses: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    comptroller(overrides?: CallOverrides): Promise<[string]>;

    createMarket(
      _poolTokenAddress: PromiseOrValue<string>,
      _marketParams: Types.MarketParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    defaultMaxGasForMatching(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        supply: BigNumber;
        borrow: BigNumber;
        withdraw: BigNumber;
        repay: BigNumber;
      }
    >;

    deltas(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        p2pSupplyDelta: BigNumber;
        p2pBorrowDelta: BigNumber;
        p2pSupplyAmount: BigNumber;
        p2pBorrowAmount: BigNumber;
      }
    >;

    dustThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    enteredMarkets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getAllMarkets(overrides?: CallOverrides): Promise<[string[]] & { marketsCreated_: string[] }>;

    getEnteredMarkets(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string[]] & { enteredMarkets_: string[] }>;

    getHead(
      _poolTokenAddress: PromiseOrValue<string>,
      _positionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string] & { head: string }>;

    getNext(
      _poolTokenAddress: PromiseOrValue<string>,
      _positionType: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string] & { next: string }>;

    incentivesVault(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _positionsManager: PromiseOrValue<string>,
      _interestRatesManager: PromiseOrValue<string>,
      _comptroller: PromiseOrValue<string>,
      _defaultMaxGasForMatching: Types.MaxGasForMatchingStruct,
      _dustThreshold: PromiseOrValue<BigNumberish>,
      _maxSortedUsers: PromiseOrValue<BigNumberish>,
      _cEth: PromiseOrValue<string>,
      _wEth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    interestRatesManager(overrides?: CallOverrides): Promise<[string]>;

    isClaimRewardsPaused(overrides?: CallOverrides): Promise<[boolean]>;

    lastBorrowBlock(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    lastPoolIndexes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [number, BigNumber, BigNumber] & {
        lastUpdateBlockNumber: number;
        lastSupplyPoolIndex: BigNumber;
        lastBorrowPoolIndex: BigNumber;
      }
    >;

    liquidate(
      _poolTokenBorrowedAddress: PromiseOrValue<string>,
      _poolTokenCollateralAddress: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    marketParameters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[number, number] & { reserveFactor: number; p2pIndexCursor: number }>;

    marketStatus(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, boolean, boolean] & {
        isCreated: boolean;
        isPaused: boolean;
        isPartiallyPaused: boolean;
      }
    >;

    marketsCreated(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    maxSortedUsers(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    p2pBorrowIndex(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    p2pDisabled(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    p2pSupplyIndex(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    positionsManager(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    repay(
      _poolTokenAddress: PromiseOrValue<string>,
      _onBehalf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    rewardsManager(overrides?: CallOverrides): Promise<[string]>;

    setClaimRewardsPauseStatus(
      _newStatus: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDefaultMaxGasForMatching(
      _defaultMaxGasForMatching: Types.MaxGasForMatchingStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDustThreshold(
      _dustThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setIncentivesVault(
      _incentivesVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setInterestRatesManager(
      _interestRatesManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxSortedUsers(
      _newMaxSortedUsers: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setP2PDisabled(
      _poolTokenAddress: PromiseOrValue<string>,
      _newStatus: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setP2PIndexCursor(
      _poolTokenAddress: PromiseOrValue<string>,
      _p2pIndexCursor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPartialPauseStatus(
      _poolTokenAddress: PromiseOrValue<string>,
      _newStatus: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPauseStatus(
      _poolTokenAddress: PromiseOrValue<string>,
      _newStatus: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPositionsManager(
      _positionsManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setReserveFactor(
      _poolTokenAddress: PromiseOrValue<string>,
      _newReserveFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRewardsManager(
      _rewardsManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTreasuryVault(
      _treasuryVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'supply(address,address,uint256)'(
      _poolTokenAddress: PromiseOrValue<string>,
      _onBehalf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'supply(address,address,uint256,uint256)'(
      _poolTokenAddress: PromiseOrValue<string>,
      _onBehalf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _maxGasForMatching: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supplyBalanceInOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { inP2P: BigNumber; onPool: BigNumber }>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    treasuryVault(overrides?: CallOverrides): Promise<[string]>;

    updateP2PIndexes(
      _poolTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    userMembership(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    wEth(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _poolTokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  CTOKEN_DECIMALS(overrides?: CallOverrides): Promise<number>;

  MAX_BASIS_POINTS(overrides?: CallOverrides): Promise<number>;

  WAD(overrides?: CallOverrides): Promise<BigNumber>;

  'borrow(address,uint256)'(
    _poolTokenAddress: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'borrow(address,uint256,uint256)'(
    _poolTokenAddress: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _maxGasForMatching: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  borrowBalanceInOf(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { inP2P: BigNumber; onPool: BigNumber }>;

  cEth(overrides?: CallOverrides): Promise<string>;

  claimRewards(
    _cTokenAddresses: PromiseOrValue<string>[],
    _tradeForMorphoToken: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimToTreasury(
    _poolTokenAddresses: PromiseOrValue<string>[],
    _amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  comptroller(overrides?: CallOverrides): Promise<string>;

  createMarket(
    _poolTokenAddress: PromiseOrValue<string>,
    _marketParams: Types.MarketParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  defaultMaxGasForMatching(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      supply: BigNumber;
      borrow: BigNumber;
      withdraw: BigNumber;
      repay: BigNumber;
    }
  >;

  deltas(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      p2pSupplyDelta: BigNumber;
      p2pBorrowDelta: BigNumber;
      p2pSupplyAmount: BigNumber;
      p2pBorrowAmount: BigNumber;
    }
  >;

  dustThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  enteredMarkets(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

  getEnteredMarkets(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

  getHead(
    _poolTokenAddress: PromiseOrValue<string>,
    _positionType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  getNext(
    _poolTokenAddress: PromiseOrValue<string>,
    _positionType: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<string>;

  incentivesVault(overrides?: CallOverrides): Promise<string>;

  initialize(
    _positionsManager: PromiseOrValue<string>,
    _interestRatesManager: PromiseOrValue<string>,
    _comptroller: PromiseOrValue<string>,
    _defaultMaxGasForMatching: Types.MaxGasForMatchingStruct,
    _dustThreshold: PromiseOrValue<BigNumberish>,
    _maxSortedUsers: PromiseOrValue<BigNumberish>,
    _cEth: PromiseOrValue<string>,
    _wEth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  interestRatesManager(overrides?: CallOverrides): Promise<string>;

  isClaimRewardsPaused(overrides?: CallOverrides): Promise<boolean>;

  lastBorrowBlock(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  lastPoolIndexes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [number, BigNumber, BigNumber] & {
      lastUpdateBlockNumber: number;
      lastSupplyPoolIndex: BigNumber;
      lastBorrowPoolIndex: BigNumber;
    }
  >;

  liquidate(
    _poolTokenBorrowedAddress: PromiseOrValue<string>,
    _poolTokenCollateralAddress: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  marketParameters(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[number, number] & { reserveFactor: number; p2pIndexCursor: number }>;

  marketStatus(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [boolean, boolean, boolean] & {
      isCreated: boolean;
      isPaused: boolean;
      isPartiallyPaused: boolean;
    }
  >;

  marketsCreated(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  maxSortedUsers(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  p2pBorrowIndex(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  p2pDisabled(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  p2pSupplyIndex(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  positionsManager(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  repay(
    _poolTokenAddress: PromiseOrValue<string>,
    _onBehalf: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  rewardsManager(overrides?: CallOverrides): Promise<string>;

  setClaimRewardsPauseStatus(
    _newStatus: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDefaultMaxGasForMatching(
    _defaultMaxGasForMatching: Types.MaxGasForMatchingStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDustThreshold(
    _dustThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setIncentivesVault(
    _incentivesVault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setInterestRatesManager(
    _interestRatesManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxSortedUsers(
    _newMaxSortedUsers: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setP2PDisabled(
    _poolTokenAddress: PromiseOrValue<string>,
    _newStatus: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setP2PIndexCursor(
    _poolTokenAddress: PromiseOrValue<string>,
    _p2pIndexCursor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPartialPauseStatus(
    _poolTokenAddress: PromiseOrValue<string>,
    _newStatus: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPauseStatus(
    _poolTokenAddress: PromiseOrValue<string>,
    _newStatus: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPositionsManager(
    _positionsManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setReserveFactor(
    _poolTokenAddress: PromiseOrValue<string>,
    _newReserveFactor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRewardsManager(
    _rewardsManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTreasuryVault(
    _treasuryVault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'supply(address,address,uint256)'(
    _poolTokenAddress: PromiseOrValue<string>,
    _onBehalf: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'supply(address,address,uint256,uint256)'(
    _poolTokenAddress: PromiseOrValue<string>,
    _onBehalf: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _maxGasForMatching: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  supplyBalanceInOf(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { inP2P: BigNumber; onPool: BigNumber }>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  treasuryVault(overrides?: CallOverrides): Promise<string>;

  updateP2PIndexes(
    _poolTokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  userMembership(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  wEth(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _poolTokenAddress: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    CTOKEN_DECIMALS(overrides?: CallOverrides): Promise<number>;

    MAX_BASIS_POINTS(overrides?: CallOverrides): Promise<number>;

    WAD(overrides?: CallOverrides): Promise<BigNumber>;

    'borrow(address,uint256)'(
      _poolTokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    'borrow(address,uint256,uint256)'(
      _poolTokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _maxGasForMatching: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    borrowBalanceInOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { inP2P: BigNumber; onPool: BigNumber }>;

    cEth(overrides?: CallOverrides): Promise<string>;

    claimRewards(
      _cTokenAddresses: PromiseOrValue<string>[],
      _tradeForMorphoToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    claimToTreasury(
      _poolTokenAddresses: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    comptroller(overrides?: CallOverrides): Promise<string>;

    createMarket(
      _poolTokenAddress: PromiseOrValue<string>,
      _marketParams: Types.MarketParametersStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    defaultMaxGasForMatching(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        supply: BigNumber;
        borrow: BigNumber;
        withdraw: BigNumber;
        repay: BigNumber;
      }
    >;

    deltas(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        p2pSupplyDelta: BigNumber;
        p2pBorrowDelta: BigNumber;
        p2pSupplyAmount: BigNumber;
        p2pBorrowAmount: BigNumber;
      }
    >;

    dustThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    enteredMarkets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

    getEnteredMarkets(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

    getHead(
      _poolTokenAddress: PromiseOrValue<string>,
      _positionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getNext(
      _poolTokenAddress: PromiseOrValue<string>,
      _positionType: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>;

    incentivesVault(overrides?: CallOverrides): Promise<string>;

    initialize(
      _positionsManager: PromiseOrValue<string>,
      _interestRatesManager: PromiseOrValue<string>,
      _comptroller: PromiseOrValue<string>,
      _defaultMaxGasForMatching: Types.MaxGasForMatchingStruct,
      _dustThreshold: PromiseOrValue<BigNumberish>,
      _maxSortedUsers: PromiseOrValue<BigNumberish>,
      _cEth: PromiseOrValue<string>,
      _wEth: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    interestRatesManager(overrides?: CallOverrides): Promise<string>;

    isClaimRewardsPaused(overrides?: CallOverrides): Promise<boolean>;

    lastBorrowBlock(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lastPoolIndexes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [number, BigNumber, BigNumber] & {
        lastUpdateBlockNumber: number;
        lastSupplyPoolIndex: BigNumber;
        lastBorrowPoolIndex: BigNumber;
      }
    >;

    liquidate(
      _poolTokenBorrowedAddress: PromiseOrValue<string>,
      _poolTokenCollateralAddress: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    marketParameters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[number, number] & { reserveFactor: number; p2pIndexCursor: number }>;

    marketStatus(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, boolean, boolean] & {
        isCreated: boolean;
        isPaused: boolean;
        isPartiallyPaused: boolean;
      }
    >;

    marketsCreated(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    maxSortedUsers(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    p2pBorrowIndex(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    p2pDisabled(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    p2pSupplyIndex(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    positionsManager(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repay(
      _poolTokenAddress: PromiseOrValue<string>,
      _onBehalf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    rewardsManager(overrides?: CallOverrides): Promise<string>;

    setClaimRewardsPauseStatus(_newStatus: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setDefaultMaxGasForMatching(
      _defaultMaxGasForMatching: Types.MaxGasForMatchingStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDustThreshold(_dustThreshold: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setIncentivesVault(_incentivesVault: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setInterestRatesManager(_interestRatesManager: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setMaxSortedUsers(_newMaxSortedUsers: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setP2PDisabled(
      _poolTokenAddress: PromiseOrValue<string>,
      _newStatus: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setP2PIndexCursor(
      _poolTokenAddress: PromiseOrValue<string>,
      _p2pIndexCursor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setPartialPauseStatus(
      _poolTokenAddress: PromiseOrValue<string>,
      _newStatus: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setPauseStatus(
      _poolTokenAddress: PromiseOrValue<string>,
      _newStatus: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setPositionsManager(_positionsManager: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setReserveFactor(
      _poolTokenAddress: PromiseOrValue<string>,
      _newReserveFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setRewardsManager(_rewardsManager: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setTreasuryVault(_treasuryVault: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    'supply(address,address,uint256)'(
      _poolTokenAddress: PromiseOrValue<string>,
      _onBehalf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    'supply(address,address,uint256,uint256)'(
      _poolTokenAddress: PromiseOrValue<string>,
      _onBehalf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _maxGasForMatching: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    supplyBalanceInOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { inP2P: BigNumber; onPool: BigNumber }>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    treasuryVault(overrides?: CallOverrides): Promise<string>;

    updateP2PIndexes(_poolTokenAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    userMembership(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    wEth(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _poolTokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'ClaimRewardsPauseStatusSet(bool)'(_newStatus?: null): ClaimRewardsPauseStatusSetEventFilter;
    ClaimRewardsPauseStatusSet(_newStatus?: null): ClaimRewardsPauseStatusSetEventFilter;

    'DefaultMaxGasForMatchingSet(tuple)'(_defaultMaxGasForMatching?: null): DefaultMaxGasForMatchingSetEventFilter;
    DefaultMaxGasForMatchingSet(_defaultMaxGasForMatching?: null): DefaultMaxGasForMatchingSetEventFilter;

    'DustThresholdSet(uint256)'(_dustThreshold?: null): DustThresholdSetEventFilter;
    DustThresholdSet(_dustThreshold?: null): DustThresholdSetEventFilter;

    'IncentivesVaultSet(address)'(
      _newIncentivesVaultAddress?: PromiseOrValue<string> | null,
    ): IncentivesVaultSetEventFilter;
    IncentivesVaultSet(_newIncentivesVaultAddress?: PromiseOrValue<string> | null): IncentivesVaultSetEventFilter;

    'InterestRatesSet(address)'(_interestRatesManager?: PromiseOrValue<string> | null): InterestRatesSetEventFilter;
    InterestRatesSet(_interestRatesManager?: PromiseOrValue<string> | null): InterestRatesSetEventFilter;

    'MarketCreated(address,uint16,uint16)'(
      _poolTokenAddress?: PromiseOrValue<string> | null,
      _reserveFactor?: null,
      _p2pIndexCursor?: null,
    ): MarketCreatedEventFilter;
    MarketCreated(
      _poolTokenAddress?: PromiseOrValue<string> | null,
      _reserveFactor?: null,
      _p2pIndexCursor?: null,
    ): MarketCreatedEventFilter;

    'MaxSortedUsersSet(uint256)'(_newValue?: null): MaxSortedUsersSetEventFilter;
    MaxSortedUsersSet(_newValue?: null): MaxSortedUsersSetEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'P2PIndexCursorSet(address,uint16)'(
      _poolTokenAddress?: PromiseOrValue<string> | null,
      _newValue?: null,
    ): P2PIndexCursorSetEventFilter;
    P2PIndexCursorSet(
      _poolTokenAddress?: PromiseOrValue<string> | null,
      _newValue?: null,
    ): P2PIndexCursorSetEventFilter;

    'P2PStatusSet(address,bool)'(
      _poolTokenAddress?: PromiseOrValue<string> | null,
      _p2pDisabled?: null,
    ): P2PStatusSetEventFilter;
    P2PStatusSet(_poolTokenAddress?: PromiseOrValue<string> | null, _p2pDisabled?: null): P2PStatusSetEventFilter;

    'PartialPauseStatusSet(address,bool)'(
      _poolTokenAddress?: PromiseOrValue<string> | null,
      _newStatus?: null,
    ): PartialPauseStatusSetEventFilter;
    PartialPauseStatusSet(
      _poolTokenAddress?: PromiseOrValue<string> | null,
      _newStatus?: null,
    ): PartialPauseStatusSetEventFilter;

    'PauseStatusSet(address,bool)'(
      _poolTokenAddress?: PromiseOrValue<string> | null,
      _newStatus?: null,
    ): PauseStatusSetEventFilter;
    PauseStatusSet(_poolTokenAddress?: PromiseOrValue<string> | null, _newStatus?: null): PauseStatusSetEventFilter;

    'PositionsManagerSet(address)'(_positionsManager?: PromiseOrValue<string> | null): PositionsManagerSetEventFilter;
    PositionsManagerSet(_positionsManager?: PromiseOrValue<string> | null): PositionsManagerSetEventFilter;

    'ReserveFactorSet(address,uint16)'(
      _poolTokenAddress?: PromiseOrValue<string> | null,
      _newValue?: null,
    ): ReserveFactorSetEventFilter;
    ReserveFactorSet(_poolTokenAddress?: PromiseOrValue<string> | null, _newValue?: null): ReserveFactorSetEventFilter;

    'ReserveFeeClaimed(address,uint256)'(
      _poolTokenAddress?: PromiseOrValue<string> | null,
      _amountClaimed?: null,
    ): ReserveFeeClaimedEventFilter;
    ReserveFeeClaimed(
      _poolTokenAddress?: PromiseOrValue<string> | null,
      _amountClaimed?: null,
    ): ReserveFeeClaimedEventFilter;

    'RewardsClaimed(address,uint256,bool)'(
      _user?: PromiseOrValue<string> | null,
      _amountClaimed?: null,
      _traded?: PromiseOrValue<boolean> | null,
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      _user?: PromiseOrValue<string> | null,
      _amountClaimed?: null,
      _traded?: PromiseOrValue<boolean> | null,
    ): RewardsClaimedEventFilter;

    'RewardsManagerSet(address)'(
      _newRewardsManagerAddress?: PromiseOrValue<string> | null,
    ): RewardsManagerSetEventFilter;
    RewardsManagerSet(_newRewardsManagerAddress?: PromiseOrValue<string> | null): RewardsManagerSetEventFilter;

    'TreasuryVaultSet(address)'(_newTreasuryVaultAddress?: PromiseOrValue<string> | null): TreasuryVaultSetEventFilter;
    TreasuryVaultSet(_newTreasuryVaultAddress?: PromiseOrValue<string> | null): TreasuryVaultSetEventFilter;
  };

  estimateGas: {
    CTOKEN_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    WAD(overrides?: CallOverrides): Promise<BigNumber>;

    'borrow(address,uint256)'(
      _poolTokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'borrow(address,uint256,uint256)'(
      _poolTokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _maxGasForMatching: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    borrowBalanceInOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    cEth(overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(
      _cTokenAddresses: PromiseOrValue<string>[],
      _tradeForMorphoToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimToTreasury(
      _poolTokenAddresses: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    comptroller(overrides?: CallOverrides): Promise<BigNumber>;

    createMarket(
      _poolTokenAddress: PromiseOrValue<string>,
      _marketParams: Types.MarketParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    defaultMaxGasForMatching(overrides?: CallOverrides): Promise<BigNumber>;

    deltas(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    dustThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    enteredMarkets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getAllMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    getEnteredMarkets(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getHead(
      _poolTokenAddress: PromiseOrValue<string>,
      _positionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getNext(
      _poolTokenAddress: PromiseOrValue<string>,
      _positionType: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    incentivesVault(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _positionsManager: PromiseOrValue<string>,
      _interestRatesManager: PromiseOrValue<string>,
      _comptroller: PromiseOrValue<string>,
      _defaultMaxGasForMatching: Types.MaxGasForMatchingStruct,
      _dustThreshold: PromiseOrValue<BigNumberish>,
      _maxSortedUsers: PromiseOrValue<BigNumberish>,
      _cEth: PromiseOrValue<string>,
      _wEth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    interestRatesManager(overrides?: CallOverrides): Promise<BigNumber>;

    isClaimRewardsPaused(overrides?: CallOverrides): Promise<BigNumber>;

    lastBorrowBlock(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    lastPoolIndexes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      _poolTokenBorrowedAddress: PromiseOrValue<string>,
      _poolTokenCollateralAddress: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    marketParameters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    marketStatus(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    marketsCreated(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    maxSortedUsers(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    p2pBorrowIndex(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    p2pDisabled(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    p2pSupplyIndex(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    positionsManager(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    repay(
      _poolTokenAddress: PromiseOrValue<string>,
      _onBehalf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    rewardsManager(overrides?: CallOverrides): Promise<BigNumber>;

    setClaimRewardsPauseStatus(
      _newStatus: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDefaultMaxGasForMatching(
      _defaultMaxGasForMatching: Types.MaxGasForMatchingStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDustThreshold(
      _dustThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setIncentivesVault(
      _incentivesVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setInterestRatesManager(
      _interestRatesManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxSortedUsers(
      _newMaxSortedUsers: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setP2PDisabled(
      _poolTokenAddress: PromiseOrValue<string>,
      _newStatus: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setP2PIndexCursor(
      _poolTokenAddress: PromiseOrValue<string>,
      _p2pIndexCursor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPartialPauseStatus(
      _poolTokenAddress: PromiseOrValue<string>,
      _newStatus: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPauseStatus(
      _poolTokenAddress: PromiseOrValue<string>,
      _newStatus: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPositionsManager(
      _positionsManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setReserveFactor(
      _poolTokenAddress: PromiseOrValue<string>,
      _newReserveFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRewardsManager(
      _rewardsManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTreasuryVault(
      _treasuryVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'supply(address,address,uint256)'(
      _poolTokenAddress: PromiseOrValue<string>,
      _onBehalf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'supply(address,address,uint256,uint256)'(
      _poolTokenAddress: PromiseOrValue<string>,
      _onBehalf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _maxGasForMatching: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    supplyBalanceInOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    treasuryVault(overrides?: CallOverrides): Promise<BigNumber>;

    updateP2PIndexes(
      _poolTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    userMembership(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    wEth(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _poolTokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CTOKEN_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BASIS_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WAD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'borrow(address,uint256)'(
      _poolTokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'borrow(address,uint256,uint256)'(
      _poolTokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _maxGasForMatching: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    borrowBalanceInOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    cEth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimRewards(
      _cTokenAddresses: PromiseOrValue<string>[],
      _tradeForMorphoToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimToTreasury(
      _poolTokenAddresses: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    comptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createMarket(
      _poolTokenAddress: PromiseOrValue<string>,
      _marketParams: Types.MarketParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    defaultMaxGasForMatching(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deltas(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dustThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enteredMarkets(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getAllMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEnteredMarkets(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHead(
      _poolTokenAddress: PromiseOrValue<string>,
      _positionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getNext(
      _poolTokenAddress: PromiseOrValue<string>,
      _positionType: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    incentivesVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _positionsManager: PromiseOrValue<string>,
      _interestRatesManager: PromiseOrValue<string>,
      _comptroller: PromiseOrValue<string>,
      _defaultMaxGasForMatching: Types.MaxGasForMatchingStruct,
      _dustThreshold: PromiseOrValue<BigNumberish>,
      _maxSortedUsers: PromiseOrValue<BigNumberish>,
      _cEth: PromiseOrValue<string>,
      _wEth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    interestRatesManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isClaimRewardsPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastBorrowBlock(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastPoolIndexes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidate(
      _poolTokenBorrowedAddress: PromiseOrValue<string>,
      _poolTokenCollateralAddress: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    marketParameters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketStatus(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketsCreated(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSortedUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    p2pBorrowIndex(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    p2pDisabled(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    p2pSupplyIndex(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positionsManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    repay(
      _poolTokenAddress: PromiseOrValue<string>,
      _onBehalf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    rewardsManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setClaimRewardsPauseStatus(
      _newStatus: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDefaultMaxGasForMatching(
      _defaultMaxGasForMatching: Types.MaxGasForMatchingStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDustThreshold(
      _dustThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setIncentivesVault(
      _incentivesVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setInterestRatesManager(
      _interestRatesManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxSortedUsers(
      _newMaxSortedUsers: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setP2PDisabled(
      _poolTokenAddress: PromiseOrValue<string>,
      _newStatus: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setP2PIndexCursor(
      _poolTokenAddress: PromiseOrValue<string>,
      _p2pIndexCursor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPartialPauseStatus(
      _poolTokenAddress: PromiseOrValue<string>,
      _newStatus: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPauseStatus(
      _poolTokenAddress: PromiseOrValue<string>,
      _newStatus: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPositionsManager(
      _positionsManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setReserveFactor(
      _poolTokenAddress: PromiseOrValue<string>,
      _newReserveFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRewardsManager(
      _rewardsManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTreasuryVault(
      _treasuryVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'supply(address,address,uint256)'(
      _poolTokenAddress: PromiseOrValue<string>,
      _onBehalf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'supply(address,address,uint256,uint256)'(
      _poolTokenAddress: PromiseOrValue<string>,
      _onBehalf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _maxGasForMatching: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    supplyBalanceInOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    treasuryVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateP2PIndexes(
      _poolTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    userMembership(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    wEth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _poolTokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
