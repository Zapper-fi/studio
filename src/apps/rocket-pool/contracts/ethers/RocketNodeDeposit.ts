/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface RocketNodeDepositInterface extends utils.Interface {
  functions: {
    'deposit(uint256,bytes,bytes,bytes32,uint256,address)': FunctionFragment;
    'getDepositType(uint256)': FunctionFragment;
    'version()': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'deposit' | 'getDepositType' | 'version'): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'deposit',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'getDepositType', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'version', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDepositType', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result;

  events: {
    'DepositReceived(address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'DepositReceived'): EventFragment;
}

export interface DepositReceivedEventObject {
  from: string;
  amount: BigNumber;
  time: BigNumber;
}
export type DepositReceivedEvent = TypedEvent<[string, BigNumber, BigNumber], DepositReceivedEventObject>;

export type DepositReceivedEventFilter = TypedEventFilter<DepositReceivedEvent>;

export interface RocketNodeDeposit extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RocketNodeDepositInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      _minimumNodeFee: PromiseOrValue<BigNumberish>,
      _validatorPubkey: PromiseOrValue<BytesLike>,
      _validatorSignature: PromiseOrValue<BytesLike>,
      _depositDataRoot: PromiseOrValue<BytesLike>,
      _salt: PromiseOrValue<BigNumberish>,
      _expectedMinipoolAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getDepositType(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number]>;

    version(overrides?: CallOverrides): Promise<[number]>;
  };

  deposit(
    _minimumNodeFee: PromiseOrValue<BigNumberish>,
    _validatorPubkey: PromiseOrValue<BytesLike>,
    _validatorSignature: PromiseOrValue<BytesLike>,
    _depositDataRoot: PromiseOrValue<BytesLike>,
    _salt: PromiseOrValue<BigNumberish>,
    _expectedMinipoolAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getDepositType(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;

  version(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    deposit(
      _minimumNodeFee: PromiseOrValue<BigNumberish>,
      _validatorPubkey: PromiseOrValue<BytesLike>,
      _validatorSignature: PromiseOrValue<BytesLike>,
      _depositDataRoot: PromiseOrValue<BytesLike>,
      _salt: PromiseOrValue<BigNumberish>,
      _expectedMinipoolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getDepositType(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;

    version(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    'DepositReceived(address,uint256,uint256)'(
      from?: PromiseOrValue<string> | null,
      amount?: null,
      time?: null,
    ): DepositReceivedEventFilter;
    DepositReceived(from?: PromiseOrValue<string> | null, amount?: null, time?: null): DepositReceivedEventFilter;
  };

  estimateGas: {
    deposit(
      _minimumNodeFee: PromiseOrValue<BigNumberish>,
      _validatorPubkey: PromiseOrValue<BytesLike>,
      _validatorSignature: PromiseOrValue<BytesLike>,
      _depositDataRoot: PromiseOrValue<BytesLike>,
      _salt: PromiseOrValue<BigNumberish>,
      _expectedMinipoolAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getDepositType(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      _minimumNodeFee: PromiseOrValue<BigNumberish>,
      _validatorPubkey: PromiseOrValue<BytesLike>,
      _validatorSignature: PromiseOrValue<BytesLike>,
      _depositDataRoot: PromiseOrValue<BytesLike>,
      _salt: PromiseOrValue<BigNumberish>,
      _expectedMinipoolAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getDepositType(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
