/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface YearnStakingRewardRegistryInterface extends utils.Interface {
  functions: {
    'addStakingPool(address,address,bool)': FunctionFragment;
    'approvedPoolOwner(address)': FunctionFragment;
    'isRegistered(address)': FunctionFragment;
    'isStakingPoolEndorsed(address)': FunctionFragment;
    'numTokens()': FunctionFragment;
    'owner()': FunctionFragment;
    'poolEndorsers(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setApprovedPoolOwner(address,bool)': FunctionFragment;
    'setPoolEndorsers(address,bool)': FunctionFragment;
    'stakingPool(address)': FunctionFragment;
    'tokens(uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addStakingPool'
      | 'approvedPoolOwner'
      | 'isRegistered'
      | 'isStakingPoolEndorsed'
      | 'numTokens'
      | 'owner'
      | 'poolEndorsers'
      | 'renounceOwnership'
      | 'setApprovedPoolOwner'
      | 'setPoolEndorsers'
      | 'stakingPool'
      | 'tokens'
      | 'transferOwnership',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addStakingPool',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'approvedPoolOwner', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isRegistered', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isStakingPoolEndorsed', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'numTokens', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolEndorsers', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setApprovedPoolOwner',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setPoolEndorsers',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'stakingPool', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'tokens', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'addStakingPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approvedPoolOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isRegistered', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isStakingPoolEndorsed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolEndorsers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovedPoolOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPoolEndorsers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakingPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;

  events: {
    'ApprovedPoolEndorser(address,bool)': EventFragment;
    'ApprovedPoolOwnerUpdated(address,bool)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'StakingPoolAdded(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ApprovedPoolEndorser'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ApprovedPoolOwnerUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StakingPoolAdded'): EventFragment;
}

export interface ApprovedPoolEndorserEventObject {
  account: string;
  canEndorse: boolean;
}
export type ApprovedPoolEndorserEvent = TypedEvent<[string, boolean], ApprovedPoolEndorserEventObject>;

export type ApprovedPoolEndorserEventFilter = TypedEventFilter<ApprovedPoolEndorserEvent>;

export interface ApprovedPoolOwnerUpdatedEventObject {
  governance: string;
  approved: boolean;
}
export type ApprovedPoolOwnerUpdatedEvent = TypedEvent<[string, boolean], ApprovedPoolOwnerUpdatedEventObject>;

export type ApprovedPoolOwnerUpdatedEventFilter = TypedEventFilter<ApprovedPoolOwnerUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface StakingPoolAddedEventObject {
  token: string;
  stakingPool: string;
}
export type StakingPoolAddedEvent = TypedEvent<[string, string], StakingPoolAddedEventObject>;

export type StakingPoolAddedEventFilter = TypedEventFilter<StakingPoolAddedEvent>;

export interface YearnStakingRewardRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: YearnStakingRewardRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addStakingPool(
      _stakingPool: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _replaceExistingPool: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    approvedPoolOwner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isRegistered(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isStakingPoolEndorsed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    numTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolEndorsers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setApprovedPoolOwner(
      _addr: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPoolEndorsers(
      _addr: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stakingPool(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    tokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  addStakingPool(
    _stakingPool: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _replaceExistingPool: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  approvedPoolOwner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isRegistered(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isStakingPoolEndorsed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  numTokens(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolEndorsers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setApprovedPoolOwner(
    _addr: PromiseOrValue<string>,
    _approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPoolEndorsers(
    _addr: PromiseOrValue<string>,
    _approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stakingPool(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  tokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    addStakingPool(
      _stakingPool: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _replaceExistingPool: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    approvedPoolOwner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isRegistered(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isStakingPoolEndorsed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    numTokens(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolEndorsers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setApprovedPoolOwner(
      _addr: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setPoolEndorsers(
      _addr: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    stakingPool(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    tokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'ApprovedPoolEndorser(address,bool)'(account?: null, canEndorse?: null): ApprovedPoolEndorserEventFilter;
    ApprovedPoolEndorser(account?: null, canEndorse?: null): ApprovedPoolEndorserEventFilter;

    'ApprovedPoolOwnerUpdated(address,bool)'(governance?: null, approved?: null): ApprovedPoolOwnerUpdatedEventFilter;
    ApprovedPoolOwnerUpdated(governance?: null, approved?: null): ApprovedPoolOwnerUpdatedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'StakingPoolAdded(address,address)'(
      token?: PromiseOrValue<string> | null,
      stakingPool?: PromiseOrValue<string> | null,
    ): StakingPoolAddedEventFilter;
    StakingPoolAdded(
      token?: PromiseOrValue<string> | null,
      stakingPool?: PromiseOrValue<string> | null,
    ): StakingPoolAddedEventFilter;
  };

  estimateGas: {
    addStakingPool(
      _stakingPool: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _replaceExistingPool: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    approvedPoolOwner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isRegistered(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isStakingPoolEndorsed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    numTokens(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolEndorsers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setApprovedPoolOwner(
      _addr: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPoolEndorsers(
      _addr: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stakingPool(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    tokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addStakingPool(
      _stakingPool: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _replaceExistingPool: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    approvedPoolOwner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRegistered(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isStakingPoolEndorsed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolEndorsers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setApprovedPoolOwner(
      _addr: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPoolEndorsers(
      _addr: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stakingPool(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
