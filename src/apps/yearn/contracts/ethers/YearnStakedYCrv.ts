/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface YearnStakedYCrvInterface extends utils.Interface {
  functions: {
    'initialize(address,address,address,string,string)': FunctionFragment;
    'initialize(address,address,address,string,string,address)': FunctionFragment;
    'initialize(address,address,address,string,string,address,address)': FunctionFragment;
    'apiVersion()': FunctionFragment;
    'setName(string)': FunctionFragment;
    'setSymbol(string)': FunctionFragment;
    'setGovernance(address)': FunctionFragment;
    'acceptGovernance()': FunctionFragment;
    'setManagement(address)': FunctionFragment;
    'setRewards(address)': FunctionFragment;
    'setLockedProfitDegradation(uint256)': FunctionFragment;
    'setDepositLimit(uint256)': FunctionFragment;
    'setPerformanceFee(uint256)': FunctionFragment;
    'setManagementFee(uint256)': FunctionFragment;
    'setGuardian(address)': FunctionFragment;
    'setEmergencyShutdown(bool)': FunctionFragment;
    'setWithdrawalQueue(address[20])': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'permit(address,address,uint256,uint256,bytes)': FunctionFragment;
    'totalAssets()': FunctionFragment;
    'deposit()': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'deposit(uint256,address)': FunctionFragment;
    'maxAvailableShares()': FunctionFragment;
    'withdraw()': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdraw(uint256,address)': FunctionFragment;
    'withdraw(uint256,address,uint256)': FunctionFragment;
    'pricePerShare()': FunctionFragment;
    'addStrategy(address,uint256,uint256,uint256,uint256)': FunctionFragment;
    'updateStrategyDebtRatio(address,uint256)': FunctionFragment;
    'updateStrategyMinDebtPerHarvest(address,uint256)': FunctionFragment;
    'updateStrategyMaxDebtPerHarvest(address,uint256)': FunctionFragment;
    'updateStrategyPerformanceFee(address,uint256)': FunctionFragment;
    'migrateStrategy(address,address)': FunctionFragment;
    'revokeStrategy()': FunctionFragment;
    'revokeStrategy(address)': FunctionFragment;
    'addStrategyToQueue(address)': FunctionFragment;
    'removeStrategyFromQueue(address)': FunctionFragment;
    'debtOutstanding()': FunctionFragment;
    'debtOutstanding(address)': FunctionFragment;
    'creditAvailable()': FunctionFragment;
    'creditAvailable(address)': FunctionFragment;
    'availableDepositLimit()': FunctionFragment;
    'expectedReturn()': FunctionFragment;
    'expectedReturn(address)': FunctionFragment;
    'report(uint256,uint256,uint256)': FunctionFragment;
    'sweep(address)': FunctionFragment;
    'sweep(address,uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'symbol()': FunctionFragment;
    'decimals()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'token()': FunctionFragment;
    'governance()': FunctionFragment;
    'management()': FunctionFragment;
    'guardian()': FunctionFragment;
    'strategies(address)': FunctionFragment;
    'withdrawalQueue(uint256)': FunctionFragment;
    'emergencyShutdown()': FunctionFragment;
    'depositLimit()': FunctionFragment;
    'debtRatio()': FunctionFragment;
    'totalDebt()': FunctionFragment;
    'lastReport()': FunctionFragment;
    'activation()': FunctionFragment;
    'lockedProfit()': FunctionFragment;
    'lockedProfitDegradation()': FunctionFragment;
    'rewards()': FunctionFragment;
    'managementFee()': FunctionFragment;
    'performanceFee()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'DOMAIN_SEPARATOR()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'initialize(address,address,address,string,string)'
      | 'initialize(address,address,address,string,string,address)'
      | 'initialize(address,address,address,string,string,address,address)'
      | 'apiVersion'
      | 'setName'
      | 'setSymbol'
      | 'setGovernance'
      | 'acceptGovernance'
      | 'setManagement'
      | 'setRewards'
      | 'setLockedProfitDegradation'
      | 'setDepositLimit'
      | 'setPerformanceFee'
      | 'setManagementFee'
      | 'setGuardian'
      | 'setEmergencyShutdown'
      | 'setWithdrawalQueue'
      | 'transfer'
      | 'transferFrom'
      | 'approve'
      | 'increaseAllowance'
      | 'decreaseAllowance'
      | 'permit'
      | 'totalAssets'
      | 'deposit()'
      | 'deposit(uint256)'
      | 'deposit(uint256,address)'
      | 'maxAvailableShares'
      | 'withdraw()'
      | 'withdraw(uint256)'
      | 'withdraw(uint256,address)'
      | 'withdraw(uint256,address,uint256)'
      | 'pricePerShare'
      | 'addStrategy'
      | 'updateStrategyDebtRatio'
      | 'updateStrategyMinDebtPerHarvest'
      | 'updateStrategyMaxDebtPerHarvest'
      | 'updateStrategyPerformanceFee'
      | 'migrateStrategy'
      | 'revokeStrategy()'
      | 'revokeStrategy(address)'
      | 'addStrategyToQueue'
      | 'removeStrategyFromQueue'
      | 'debtOutstanding()'
      | 'debtOutstanding(address)'
      | 'creditAvailable()'
      | 'creditAvailable(address)'
      | 'availableDepositLimit'
      | 'expectedReturn()'
      | 'expectedReturn(address)'
      | 'report'
      | 'sweep(address)'
      | 'sweep(address,uint256)'
      | 'name'
      | 'symbol'
      | 'decimals'
      | 'balanceOf'
      | 'allowance'
      | 'totalSupply'
      | 'token'
      | 'governance'
      | 'management'
      | 'guardian'
      | 'strategies'
      | 'withdrawalQueue'
      | 'emergencyShutdown'
      | 'depositLimit'
      | 'debtRatio'
      | 'totalDebt'
      | 'lastReport'
      | 'activation'
      | 'lockedProfit'
      | 'lockedProfitDegradation'
      | 'rewards'
      | 'managementFee'
      | 'performanceFee'
      | 'nonces'
      | 'DOMAIN_SEPARATOR',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'initialize(address,address,address,string,string)',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize(address,address,address,string,string,address)',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize(address,address,address,string,string,address,address)',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'apiVersion', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setName', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setSymbol', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setGovernance', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'acceptGovernance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setManagement', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setRewards', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setLockedProfitDegradation', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setDepositLimit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setPerformanceFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setManagementFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setGuardian', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setEmergencyShutdown', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'setWithdrawalQueue', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'permit',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'totalAssets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit(uint256)', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'deposit(uint256,address)',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'maxAvailableShares', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw(uint256)', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'withdraw(uint256,address)',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw(uint256,address,uint256)',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'pricePerShare', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addStrategy',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateStrategyDebtRatio',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateStrategyMinDebtPerHarvest',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateStrategyMaxDebtPerHarvest',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateStrategyPerformanceFee',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'migrateStrategy',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'revokeStrategy()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'revokeStrategy(address)', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'addStrategyToQueue', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'removeStrategyFromQueue', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'debtOutstanding()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'debtOutstanding(address)', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'creditAvailable()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'creditAvailable(address)', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'availableDepositLimit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'expectedReturn()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'expectedReturn(address)', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'report',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'sweep(address)', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'sweep(address,uint256)',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'governance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'management', values?: undefined): string;
  encodeFunctionData(functionFragment: 'guardian', values?: undefined): string;
  encodeFunctionData(functionFragment: 'strategies', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'withdrawalQueue', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'emergencyShutdown', values?: undefined): string;
  encodeFunctionData(functionFragment: 'depositLimit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'debtRatio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalDebt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastReport', values?: undefined): string;
  encodeFunctionData(functionFragment: 'activation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lockedProfit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lockedProfitDegradation', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'managementFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'performanceFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'initialize(address,address,address,string,string)', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'initialize(address,address,address,string,string,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'initialize(address,address,address,string,string,address,address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'apiVersion', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setName', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSymbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setManagement', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLockedProfitDegradation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDepositLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPerformanceFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setManagementFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGuardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEmergencyShutdown', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWithdrawalQueue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit(uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit(uint256,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxAvailableShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw(uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw(uint256,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw(uint256,address,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pricePerShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateStrategyDebtRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateStrategyMinDebtPerHarvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateStrategyMaxDebtPerHarvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateStrategyPerformanceFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migrateStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeStrategy()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeStrategy(address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addStrategyToQueue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeStrategyFromQueue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'debtOutstanding()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'debtOutstanding(address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'creditAvailable()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'creditAvailable(address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'availableDepositLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'expectedReturn()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'expectedReturn(address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'report', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sweep(address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sweep(address,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'management', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'guardian', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategies', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawalQueue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyShutdown', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'debtRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastReport', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockedProfit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockedProfitDegradation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'managementFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'performanceFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;

  events: {
    'Transfer(address,address,uint256)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'StrategyAdded(address,uint256,uint256,uint256,uint256)': EventFragment;
    'StrategyReported(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'UpdateGovernance(address)': EventFragment;
    'UpdateManagement(address)': EventFragment;
    'UpdateRewards(address)': EventFragment;
    'UpdateDepositLimit(uint256)': EventFragment;
    'UpdatePerformanceFee(uint256)': EventFragment;
    'UpdateManagementFee(uint256)': EventFragment;
    'UpdateGuardian(address)': EventFragment;
    'EmergencyShutdown(bool)': EventFragment;
    'UpdateWithdrawalQueue(address[20])': EventFragment;
    'StrategyUpdateDebtRatio(address,uint256)': EventFragment;
    'StrategyUpdateMinDebtPerHarvest(address,uint256)': EventFragment;
    'StrategyUpdateMaxDebtPerHarvest(address,uint256)': EventFragment;
    'StrategyUpdatePerformanceFee(address,uint256)': EventFragment;
    'StrategyMigrated(address,address)': EventFragment;
    'StrategyRevoked(address)': EventFragment;
    'StrategyRemovedFromQueue(address)': EventFragment;
    'StrategyAddedToQueue(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyReported'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateGovernance'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateManagement'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateRewards'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateDepositLimit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatePerformanceFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateManagementFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateGuardian'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyShutdown'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateWithdrawalQueue'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyUpdateDebtRatio'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyUpdateMinDebtPerHarvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyUpdateMaxDebtPerHarvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyUpdatePerformanceFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyMigrated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyRemovedFromQueue'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrategyAddedToQueue'): EventFragment;
}

export interface TransferEventObject {
  sender: string;
  receiver: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface StrategyAddedEventObject {
  strategy: string;
  debtRatio: BigNumber;
  minDebtPerHarvest: BigNumber;
  maxDebtPerHarvest: BigNumber;
  performanceFee: BigNumber;
}
export type StrategyAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  StrategyAddedEventObject
>;

export type StrategyAddedEventFilter = TypedEventFilter<StrategyAddedEvent>;

export interface StrategyReportedEventObject {
  strategy: string;
  gain: BigNumber;
  loss: BigNumber;
  debtPaid: BigNumber;
  totalGain: BigNumber;
  totalLoss: BigNumber;
  totalDebt: BigNumber;
  debtAdded: BigNumber;
  debtRatio: BigNumber;
}
export type StrategyReportedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  StrategyReportedEventObject
>;

export type StrategyReportedEventFilter = TypedEventFilter<StrategyReportedEvent>;

export interface UpdateGovernanceEventObject {
  governance: string;
}
export type UpdateGovernanceEvent = TypedEvent<[string], UpdateGovernanceEventObject>;

export type UpdateGovernanceEventFilter = TypedEventFilter<UpdateGovernanceEvent>;

export interface UpdateManagementEventObject {
  management: string;
}
export type UpdateManagementEvent = TypedEvent<[string], UpdateManagementEventObject>;

export type UpdateManagementEventFilter = TypedEventFilter<UpdateManagementEvent>;

export interface UpdateRewardsEventObject {
  rewards: string;
}
export type UpdateRewardsEvent = TypedEvent<[string], UpdateRewardsEventObject>;

export type UpdateRewardsEventFilter = TypedEventFilter<UpdateRewardsEvent>;

export interface UpdateDepositLimitEventObject {
  depositLimit: BigNumber;
}
export type UpdateDepositLimitEvent = TypedEvent<[BigNumber], UpdateDepositLimitEventObject>;

export type UpdateDepositLimitEventFilter = TypedEventFilter<UpdateDepositLimitEvent>;

export interface UpdatePerformanceFeeEventObject {
  performanceFee: BigNumber;
}
export type UpdatePerformanceFeeEvent = TypedEvent<[BigNumber], UpdatePerformanceFeeEventObject>;

export type UpdatePerformanceFeeEventFilter = TypedEventFilter<UpdatePerformanceFeeEvent>;

export interface UpdateManagementFeeEventObject {
  managementFee: BigNumber;
}
export type UpdateManagementFeeEvent = TypedEvent<[BigNumber], UpdateManagementFeeEventObject>;

export type UpdateManagementFeeEventFilter = TypedEventFilter<UpdateManagementFeeEvent>;

export interface UpdateGuardianEventObject {
  guardian: string;
}
export type UpdateGuardianEvent = TypedEvent<[string], UpdateGuardianEventObject>;

export type UpdateGuardianEventFilter = TypedEventFilter<UpdateGuardianEvent>;

export interface EmergencyShutdownEventObject {
  active: boolean;
}
export type EmergencyShutdownEvent = TypedEvent<[boolean], EmergencyShutdownEventObject>;

export type EmergencyShutdownEventFilter = TypedEventFilter<EmergencyShutdownEvent>;

export interface UpdateWithdrawalQueueEventObject {
  queue: string[];
}
export type UpdateWithdrawalQueueEvent = TypedEvent<[string[]], UpdateWithdrawalQueueEventObject>;

export type UpdateWithdrawalQueueEventFilter = TypedEventFilter<UpdateWithdrawalQueueEvent>;

export interface StrategyUpdateDebtRatioEventObject {
  strategy: string;
  debtRatio: BigNumber;
}
export type StrategyUpdateDebtRatioEvent = TypedEvent<[string, BigNumber], StrategyUpdateDebtRatioEventObject>;

export type StrategyUpdateDebtRatioEventFilter = TypedEventFilter<StrategyUpdateDebtRatioEvent>;

export interface StrategyUpdateMinDebtPerHarvestEventObject {
  strategy: string;
  minDebtPerHarvest: BigNumber;
}
export type StrategyUpdateMinDebtPerHarvestEvent = TypedEvent<
  [string, BigNumber],
  StrategyUpdateMinDebtPerHarvestEventObject
>;

export type StrategyUpdateMinDebtPerHarvestEventFilter = TypedEventFilter<StrategyUpdateMinDebtPerHarvestEvent>;

export interface StrategyUpdateMaxDebtPerHarvestEventObject {
  strategy: string;
  maxDebtPerHarvest: BigNumber;
}
export type StrategyUpdateMaxDebtPerHarvestEvent = TypedEvent<
  [string, BigNumber],
  StrategyUpdateMaxDebtPerHarvestEventObject
>;

export type StrategyUpdateMaxDebtPerHarvestEventFilter = TypedEventFilter<StrategyUpdateMaxDebtPerHarvestEvent>;

export interface StrategyUpdatePerformanceFeeEventObject {
  strategy: string;
  performanceFee: BigNumber;
}
export type StrategyUpdatePerformanceFeeEvent = TypedEvent<
  [string, BigNumber],
  StrategyUpdatePerformanceFeeEventObject
>;

export type StrategyUpdatePerformanceFeeEventFilter = TypedEventFilter<StrategyUpdatePerformanceFeeEvent>;

export interface StrategyMigratedEventObject {
  oldVersion: string;
  newVersion: string;
}
export type StrategyMigratedEvent = TypedEvent<[string, string], StrategyMigratedEventObject>;

export type StrategyMigratedEventFilter = TypedEventFilter<StrategyMigratedEvent>;

export interface StrategyRevokedEventObject {
  strategy: string;
}
export type StrategyRevokedEvent = TypedEvent<[string], StrategyRevokedEventObject>;

export type StrategyRevokedEventFilter = TypedEventFilter<StrategyRevokedEvent>;

export interface StrategyRemovedFromQueueEventObject {
  strategy: string;
}
export type StrategyRemovedFromQueueEvent = TypedEvent<[string], StrategyRemovedFromQueueEventObject>;

export type StrategyRemovedFromQueueEventFilter = TypedEventFilter<StrategyRemovedFromQueueEvent>;

export interface StrategyAddedToQueueEventObject {
  strategy: string;
}
export type StrategyAddedToQueueEvent = TypedEvent<[string], StrategyAddedToQueueEventObject>;

export type StrategyAddedToQueueEventFilter = TypedEventFilter<StrategyAddedToQueueEvent>;

export interface YearnStakedYCrv extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: YearnStakedYCrvInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    'initialize(address,address,address,string,string)'(
      token: PromiseOrValue<string>,
      governance: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      nameOverride: PromiseOrValue<string>,
      symbolOverride: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'initialize(address,address,address,string,string,address)'(
      token: PromiseOrValue<string>,
      governance: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      nameOverride: PromiseOrValue<string>,
      symbolOverride: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'initialize(address,address,address,string,string,address,address)'(
      token: PromiseOrValue<string>,
      governance: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      nameOverride: PromiseOrValue<string>,
      symbolOverride: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      management: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    apiVersion(overrides?: CallOverrides): Promise<[string]>;

    setName(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setSymbol(
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setGovernance(
      governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    acceptGovernance(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setManagement(
      management: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRewards(
      rewards: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLockedProfitDegradation(
      degradation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDepositLimit(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPerformanceFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setManagementFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setGuardian(
      guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setEmergencyShutdown(
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setWithdrawalQueue(
      queue: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transfer(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    'deposit()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    'deposit(uint256)'(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'deposit(uint256,address)'(
      _amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    maxAvailableShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    'withdraw()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    'withdraw(uint256)'(
      maxShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'withdraw(uint256,address)'(
      maxShares: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'withdraw(uint256,address,uint256)'(
      maxShares: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      maxLoss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    pricePerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    addStrategy(
      strategy: PromiseOrValue<string>,
      debtRatio: PromiseOrValue<BigNumberish>,
      minDebtPerHarvest: PromiseOrValue<BigNumberish>,
      maxDebtPerHarvest: PromiseOrValue<BigNumberish>,
      performanceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateStrategyDebtRatio(
      strategy: PromiseOrValue<string>,
      debtRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateStrategyMinDebtPerHarvest(
      strategy: PromiseOrValue<string>,
      minDebtPerHarvest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateStrategyMaxDebtPerHarvest(
      strategy: PromiseOrValue<string>,
      maxDebtPerHarvest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateStrategyPerformanceFee(
      strategy: PromiseOrValue<string>,
      performanceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    migrateStrategy(
      oldVersion: PromiseOrValue<string>,
      newVersion: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'revokeStrategy()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    'revokeStrategy(address)'(
      strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addStrategyToQueue(
      strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeStrategyFromQueue(
      strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'debtOutstanding()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    'debtOutstanding(address)'(strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    'creditAvailable()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    'creditAvailable(address)'(strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    availableDepositLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    'expectedReturn()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    'expectedReturn(address)'(strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    report(
      gain: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      _debtPayment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'sweep(address)'(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'sweep(address,uint256)'(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    management(overrides?: CallOverrides): Promise<[string]>;

    guardian(overrides?: CallOverrides): Promise<[string]>;

    strategies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        performanceFee: BigNumber;
        activation: BigNumber;
        debtRatio: BigNumber;
        minDebtPerHarvest: BigNumber;
        maxDebtPerHarvest: BigNumber;
        lastReport: BigNumber;
        totalDebt: BigNumber;
        totalGain: BigNumber;
        totalLoss: BigNumber;
      }
    >;

    withdrawalQueue(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    emergencyShutdown(overrides?: CallOverrides): Promise<[boolean]>;

    depositLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    debtRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastReport(overrides?: CallOverrides): Promise<[BigNumber]>;

    activation(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedProfit(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedProfitDegradation(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewards(overrides?: CallOverrides): Promise<[string]>;

    managementFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    performanceFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;
  };

  'initialize(address,address,address,string,string)'(
    token: PromiseOrValue<string>,
    governance: PromiseOrValue<string>,
    rewards: PromiseOrValue<string>,
    nameOverride: PromiseOrValue<string>,
    symbolOverride: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'initialize(address,address,address,string,string,address)'(
    token: PromiseOrValue<string>,
    governance: PromiseOrValue<string>,
    rewards: PromiseOrValue<string>,
    nameOverride: PromiseOrValue<string>,
    symbolOverride: PromiseOrValue<string>,
    guardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'initialize(address,address,address,string,string,address,address)'(
    token: PromiseOrValue<string>,
    governance: PromiseOrValue<string>,
    rewards: PromiseOrValue<string>,
    nameOverride: PromiseOrValue<string>,
    symbolOverride: PromiseOrValue<string>,
    guardian: PromiseOrValue<string>,
    management: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  apiVersion(overrides?: CallOverrides): Promise<string>;

  setName(
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setSymbol(
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setGovernance(
    governance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  acceptGovernance(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setManagement(
    management: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRewards(
    rewards: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLockedProfitDegradation(
    degradation: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDepositLimit(
    limit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPerformanceFee(
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setManagementFee(
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setGuardian(
    guardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setEmergencyShutdown(
    active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setWithdrawalQueue(
    queue: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transfer(
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  permit(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    expiry: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  'deposit()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  'deposit(uint256)'(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'deposit(uint256,address)'(
    _amount: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  maxAvailableShares(overrides?: CallOverrides): Promise<BigNumber>;

  'withdraw()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  'withdraw(uint256)'(
    maxShares: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'withdraw(uint256,address)'(
    maxShares: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'withdraw(uint256,address,uint256)'(
    maxShares: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    maxLoss: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

  addStrategy(
    strategy: PromiseOrValue<string>,
    debtRatio: PromiseOrValue<BigNumberish>,
    minDebtPerHarvest: PromiseOrValue<BigNumberish>,
    maxDebtPerHarvest: PromiseOrValue<BigNumberish>,
    performanceFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateStrategyDebtRatio(
    strategy: PromiseOrValue<string>,
    debtRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateStrategyMinDebtPerHarvest(
    strategy: PromiseOrValue<string>,
    minDebtPerHarvest: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateStrategyMaxDebtPerHarvest(
    strategy: PromiseOrValue<string>,
    maxDebtPerHarvest: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateStrategyPerformanceFee(
    strategy: PromiseOrValue<string>,
    performanceFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  migrateStrategy(
    oldVersion: PromiseOrValue<string>,
    newVersion: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'revokeStrategy()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  'revokeStrategy(address)'(
    strategy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addStrategyToQueue(
    strategy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeStrategyFromQueue(
    strategy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'debtOutstanding()'(overrides?: CallOverrides): Promise<BigNumber>;

  'debtOutstanding(address)'(strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  'creditAvailable()'(overrides?: CallOverrides): Promise<BigNumber>;

  'creditAvailable(address)'(strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  availableDepositLimit(overrides?: CallOverrides): Promise<BigNumber>;

  'expectedReturn()'(overrides?: CallOverrides): Promise<BigNumber>;

  'expectedReturn(address)'(strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  report(
    gain: PromiseOrValue<BigNumberish>,
    loss: PromiseOrValue<BigNumberish>,
    _debtPayment: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'sweep(address)'(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'sweep(address,uint256)'(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  allowance(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  management(overrides?: CallOverrides): Promise<string>;

  guardian(overrides?: CallOverrides): Promise<string>;

  strategies(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      performanceFee: BigNumber;
      activation: BigNumber;
      debtRatio: BigNumber;
      minDebtPerHarvest: BigNumber;
      maxDebtPerHarvest: BigNumber;
      lastReport: BigNumber;
      totalDebt: BigNumber;
      totalGain: BigNumber;
      totalLoss: BigNumber;
    }
  >;

  withdrawalQueue(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  emergencyShutdown(overrides?: CallOverrides): Promise<boolean>;

  depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

  debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

  totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

  lastReport(overrides?: CallOverrides): Promise<BigNumber>;

  activation(overrides?: CallOverrides): Promise<BigNumber>;

  lockedProfit(overrides?: CallOverrides): Promise<BigNumber>;

  lockedProfitDegradation(overrides?: CallOverrides): Promise<BigNumber>;

  rewards(overrides?: CallOverrides): Promise<string>;

  managementFee(overrides?: CallOverrides): Promise<BigNumber>;

  performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

  nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    'initialize(address,address,address,string,string)'(
      token: PromiseOrValue<string>,
      governance: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      nameOverride: PromiseOrValue<string>,
      symbolOverride: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    'initialize(address,address,address,string,string,address)'(
      token: PromiseOrValue<string>,
      governance: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      nameOverride: PromiseOrValue<string>,
      symbolOverride: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    'initialize(address,address,address,string,string,address,address)'(
      token: PromiseOrValue<string>,
      governance: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      nameOverride: PromiseOrValue<string>,
      symbolOverride: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      management: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    apiVersion(overrides?: CallOverrides): Promise<string>;

    setName(name: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setSymbol(symbol: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setGovernance(governance: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    setManagement(management: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setRewards(rewards: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setLockedProfitDegradation(degradation: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setDepositLimit(limit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setPerformanceFee(fee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setManagementFee(fee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setGuardian(guardian: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setEmergencyShutdown(active: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setWithdrawalQueue(queue: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    transfer(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    'deposit()'(overrides?: CallOverrides): Promise<BigNumber>;

    'deposit(uint256)'(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    'deposit(uint256,address)'(
      _amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    maxAvailableShares(overrides?: CallOverrides): Promise<BigNumber>;

    'withdraw()'(overrides?: CallOverrides): Promise<BigNumber>;

    'withdraw(uint256)'(maxShares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    'withdraw(uint256,address)'(
      maxShares: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'withdraw(uint256,address,uint256)'(
      maxShares: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      maxLoss: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    addStrategy(
      strategy: PromiseOrValue<string>,
      debtRatio: PromiseOrValue<BigNumberish>,
      minDebtPerHarvest: PromiseOrValue<BigNumberish>,
      maxDebtPerHarvest: PromiseOrValue<BigNumberish>,
      performanceFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateStrategyDebtRatio(
      strategy: PromiseOrValue<string>,
      debtRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateStrategyMinDebtPerHarvest(
      strategy: PromiseOrValue<string>,
      minDebtPerHarvest: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateStrategyMaxDebtPerHarvest(
      strategy: PromiseOrValue<string>,
      maxDebtPerHarvest: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateStrategyPerformanceFee(
      strategy: PromiseOrValue<string>,
      performanceFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    migrateStrategy(
      oldVersion: PromiseOrValue<string>,
      newVersion: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    'revokeStrategy()'(overrides?: CallOverrides): Promise<void>;

    'revokeStrategy(address)'(strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    addStrategyToQueue(strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    removeStrategyFromQueue(strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    'debtOutstanding()'(overrides?: CallOverrides): Promise<BigNumber>;

    'debtOutstanding(address)'(strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    'creditAvailable()'(overrides?: CallOverrides): Promise<BigNumber>;

    'creditAvailable(address)'(strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    availableDepositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    'expectedReturn()'(overrides?: CallOverrides): Promise<BigNumber>;

    'expectedReturn(address)'(strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    report(
      gain: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      _debtPayment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'sweep(address)'(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    'sweep(address,uint256)'(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    management(overrides?: CallOverrides): Promise<string>;

    guardian(overrides?: CallOverrides): Promise<string>;

    strategies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        performanceFee: BigNumber;
        activation: BigNumber;
        debtRatio: BigNumber;
        minDebtPerHarvest: BigNumber;
        maxDebtPerHarvest: BigNumber;
        lastReport: BigNumber;
        totalDebt: BigNumber;
        totalGain: BigNumber;
        totalLoss: BigNumber;
      }
    >;

    withdrawalQueue(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    emergencyShutdown(overrides?: CallOverrides): Promise<boolean>;

    depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    lastReport(overrides?: CallOverrides): Promise<BigNumber>;

    activation(overrides?: CallOverrides): Promise<BigNumber>;

    lockedProfit(overrides?: CallOverrides): Promise<BigNumber>;

    lockedProfitDegradation(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(overrides?: CallOverrides): Promise<string>;

    managementFee(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'Transfer(address,address,uint256)'(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      sender?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;

    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'StrategyAdded(address,uint256,uint256,uint256,uint256)'(
      strategy?: PromiseOrValue<string> | null,
      debtRatio?: null,
      minDebtPerHarvest?: null,
      maxDebtPerHarvest?: null,
      performanceFee?: null,
    ): StrategyAddedEventFilter;
    StrategyAdded(
      strategy?: PromiseOrValue<string> | null,
      debtRatio?: null,
      minDebtPerHarvest?: null,
      maxDebtPerHarvest?: null,
      performanceFee?: null,
    ): StrategyAddedEventFilter;

    'StrategyReported(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)'(
      strategy?: PromiseOrValue<string> | null,
      gain?: null,
      loss?: null,
      debtPaid?: null,
      totalGain?: null,
      totalLoss?: null,
      totalDebt?: null,
      debtAdded?: null,
      debtRatio?: null,
    ): StrategyReportedEventFilter;
    StrategyReported(
      strategy?: PromiseOrValue<string> | null,
      gain?: null,
      loss?: null,
      debtPaid?: null,
      totalGain?: null,
      totalLoss?: null,
      totalDebt?: null,
      debtAdded?: null,
      debtRatio?: null,
    ): StrategyReportedEventFilter;

    'UpdateGovernance(address)'(governance?: null): UpdateGovernanceEventFilter;
    UpdateGovernance(governance?: null): UpdateGovernanceEventFilter;

    'UpdateManagement(address)'(management?: null): UpdateManagementEventFilter;
    UpdateManagement(management?: null): UpdateManagementEventFilter;

    'UpdateRewards(address)'(rewards?: null): UpdateRewardsEventFilter;
    UpdateRewards(rewards?: null): UpdateRewardsEventFilter;

    'UpdateDepositLimit(uint256)'(depositLimit?: null): UpdateDepositLimitEventFilter;
    UpdateDepositLimit(depositLimit?: null): UpdateDepositLimitEventFilter;

    'UpdatePerformanceFee(uint256)'(performanceFee?: null): UpdatePerformanceFeeEventFilter;
    UpdatePerformanceFee(performanceFee?: null): UpdatePerformanceFeeEventFilter;

    'UpdateManagementFee(uint256)'(managementFee?: null): UpdateManagementFeeEventFilter;
    UpdateManagementFee(managementFee?: null): UpdateManagementFeeEventFilter;

    'UpdateGuardian(address)'(guardian?: null): UpdateGuardianEventFilter;
    UpdateGuardian(guardian?: null): UpdateGuardianEventFilter;

    'EmergencyShutdown(bool)'(active?: null): EmergencyShutdownEventFilter;
    EmergencyShutdown(active?: null): EmergencyShutdownEventFilter;

    'UpdateWithdrawalQueue(address[20])'(queue?: null): UpdateWithdrawalQueueEventFilter;
    UpdateWithdrawalQueue(queue?: null): UpdateWithdrawalQueueEventFilter;

    'StrategyUpdateDebtRatio(address,uint256)'(
      strategy?: PromiseOrValue<string> | null,
      debtRatio?: null,
    ): StrategyUpdateDebtRatioEventFilter;
    StrategyUpdateDebtRatio(
      strategy?: PromiseOrValue<string> | null,
      debtRatio?: null,
    ): StrategyUpdateDebtRatioEventFilter;

    'StrategyUpdateMinDebtPerHarvest(address,uint256)'(
      strategy?: PromiseOrValue<string> | null,
      minDebtPerHarvest?: null,
    ): StrategyUpdateMinDebtPerHarvestEventFilter;
    StrategyUpdateMinDebtPerHarvest(
      strategy?: PromiseOrValue<string> | null,
      minDebtPerHarvest?: null,
    ): StrategyUpdateMinDebtPerHarvestEventFilter;

    'StrategyUpdateMaxDebtPerHarvest(address,uint256)'(
      strategy?: PromiseOrValue<string> | null,
      maxDebtPerHarvest?: null,
    ): StrategyUpdateMaxDebtPerHarvestEventFilter;
    StrategyUpdateMaxDebtPerHarvest(
      strategy?: PromiseOrValue<string> | null,
      maxDebtPerHarvest?: null,
    ): StrategyUpdateMaxDebtPerHarvestEventFilter;

    'StrategyUpdatePerformanceFee(address,uint256)'(
      strategy?: PromiseOrValue<string> | null,
      performanceFee?: null,
    ): StrategyUpdatePerformanceFeeEventFilter;
    StrategyUpdatePerformanceFee(
      strategy?: PromiseOrValue<string> | null,
      performanceFee?: null,
    ): StrategyUpdatePerformanceFeeEventFilter;

    'StrategyMigrated(address,address)'(
      oldVersion?: PromiseOrValue<string> | null,
      newVersion?: PromiseOrValue<string> | null,
    ): StrategyMigratedEventFilter;
    StrategyMigrated(
      oldVersion?: PromiseOrValue<string> | null,
      newVersion?: PromiseOrValue<string> | null,
    ): StrategyMigratedEventFilter;

    'StrategyRevoked(address)'(strategy?: PromiseOrValue<string> | null): StrategyRevokedEventFilter;
    StrategyRevoked(strategy?: PromiseOrValue<string> | null): StrategyRevokedEventFilter;

    'StrategyRemovedFromQueue(address)'(strategy?: PromiseOrValue<string> | null): StrategyRemovedFromQueueEventFilter;
    StrategyRemovedFromQueue(strategy?: PromiseOrValue<string> | null): StrategyRemovedFromQueueEventFilter;

    'StrategyAddedToQueue(address)'(strategy?: PromiseOrValue<string> | null): StrategyAddedToQueueEventFilter;
    StrategyAddedToQueue(strategy?: PromiseOrValue<string> | null): StrategyAddedToQueueEventFilter;
  };

  estimateGas: {
    'initialize(address,address,address,string,string)'(
      token: PromiseOrValue<string>,
      governance: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      nameOverride: PromiseOrValue<string>,
      symbolOverride: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'initialize(address,address,address,string,string,address)'(
      token: PromiseOrValue<string>,
      governance: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      nameOverride: PromiseOrValue<string>,
      symbolOverride: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'initialize(address,address,address,string,string,address,address)'(
      token: PromiseOrValue<string>,
      governance: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      nameOverride: PromiseOrValue<string>,
      symbolOverride: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      management: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    apiVersion(overrides?: CallOverrides): Promise<BigNumber>;

    setName(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setSymbol(
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setGovernance(
      governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    acceptGovernance(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setManagement(
      management: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRewards(
      rewards: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLockedProfitDegradation(
      degradation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDepositLimit(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPerformanceFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setManagementFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setGuardian(
      guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setEmergencyShutdown(
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setWithdrawalQueue(
      queue: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transfer(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    'deposit()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    'deposit(uint256)'(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'deposit(uint256,address)'(
      _amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    maxAvailableShares(overrides?: CallOverrides): Promise<BigNumber>;

    'withdraw()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    'withdraw(uint256)'(
      maxShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'withdraw(uint256,address)'(
      maxShares: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'withdraw(uint256,address,uint256)'(
      maxShares: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      maxLoss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    addStrategy(
      strategy: PromiseOrValue<string>,
      debtRatio: PromiseOrValue<BigNumberish>,
      minDebtPerHarvest: PromiseOrValue<BigNumberish>,
      maxDebtPerHarvest: PromiseOrValue<BigNumberish>,
      performanceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateStrategyDebtRatio(
      strategy: PromiseOrValue<string>,
      debtRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateStrategyMinDebtPerHarvest(
      strategy: PromiseOrValue<string>,
      minDebtPerHarvest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateStrategyMaxDebtPerHarvest(
      strategy: PromiseOrValue<string>,
      maxDebtPerHarvest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateStrategyPerformanceFee(
      strategy: PromiseOrValue<string>,
      performanceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    migrateStrategy(
      oldVersion: PromiseOrValue<string>,
      newVersion: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'revokeStrategy()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    'revokeStrategy(address)'(
      strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addStrategyToQueue(
      strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeStrategyFromQueue(
      strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'debtOutstanding()'(overrides?: CallOverrides): Promise<BigNumber>;

    'debtOutstanding(address)'(strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    'creditAvailable()'(overrides?: CallOverrides): Promise<BigNumber>;

    'creditAvailable(address)'(strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    availableDepositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    'expectedReturn()'(overrides?: CallOverrides): Promise<BigNumber>;

    'expectedReturn(address)'(strategy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    report(
      gain: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      _debtPayment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'sweep(address)'(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'sweep(address,uint256)'(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    management(overrides?: CallOverrides): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    strategies(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalQueue(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    emergencyShutdown(overrides?: CallOverrides): Promise<BigNumber>;

    depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    lastReport(overrides?: CallOverrides): Promise<BigNumber>;

    activation(overrides?: CallOverrides): Promise<BigNumber>;

    lockedProfit(overrides?: CallOverrides): Promise<BigNumber>;

    lockedProfitDegradation(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(overrides?: CallOverrides): Promise<BigNumber>;

    managementFee(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    'initialize(address,address,address,string,string)'(
      token: PromiseOrValue<string>,
      governance: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      nameOverride: PromiseOrValue<string>,
      symbolOverride: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'initialize(address,address,address,string,string,address)'(
      token: PromiseOrValue<string>,
      governance: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      nameOverride: PromiseOrValue<string>,
      symbolOverride: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'initialize(address,address,address,string,string,address,address)'(
      token: PromiseOrValue<string>,
      governance: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      nameOverride: PromiseOrValue<string>,
      symbolOverride: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      management: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    apiVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setName(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setSymbol(
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setGovernance(
      governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    acceptGovernance(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setManagement(
      management: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRewards(
      rewards: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLockedProfitDegradation(
      degradation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDepositLimit(
      limit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPerformanceFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setManagementFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setGuardian(
      guardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setEmergencyShutdown(
      active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setWithdrawalQueue(
      queue: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transfer(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'deposit()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    'deposit(uint256)'(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'deposit(uint256,address)'(
      _amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    maxAvailableShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'withdraw()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    'withdraw(uint256)'(
      maxShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'withdraw(uint256,address)'(
      maxShares: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'withdraw(uint256,address,uint256)'(
      maxShares: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      maxLoss: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    pricePerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addStrategy(
      strategy: PromiseOrValue<string>,
      debtRatio: PromiseOrValue<BigNumberish>,
      minDebtPerHarvest: PromiseOrValue<BigNumberish>,
      maxDebtPerHarvest: PromiseOrValue<BigNumberish>,
      performanceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateStrategyDebtRatio(
      strategy: PromiseOrValue<string>,
      debtRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateStrategyMinDebtPerHarvest(
      strategy: PromiseOrValue<string>,
      minDebtPerHarvest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateStrategyMaxDebtPerHarvest(
      strategy: PromiseOrValue<string>,
      maxDebtPerHarvest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateStrategyPerformanceFee(
      strategy: PromiseOrValue<string>,
      performanceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    migrateStrategy(
      oldVersion: PromiseOrValue<string>,
      newVersion: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'revokeStrategy()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    'revokeStrategy(address)'(
      strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addStrategyToQueue(
      strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeStrategyFromQueue(
      strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'debtOutstanding()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'debtOutstanding(address)'(
      strategy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'creditAvailable()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'creditAvailable(address)'(
      strategy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    availableDepositLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'expectedReturn()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'expectedReturn(address)'(
      strategy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    report(
      gain: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      _debtPayment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'sweep(address)'(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'sweep(address,uint256)'(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    management(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategies(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawalQueue(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyShutdown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastReport(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedProfit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedProfitDegradation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managementFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performanceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
