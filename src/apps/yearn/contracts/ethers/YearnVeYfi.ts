/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface YearnVeYfiInterface extends utils.Interface {
  functions: {
    'get_last_user_point(address)': FunctionFragment;
    'checkpoint()': FunctionFragment;
    'modify_lock(uint256,uint256)': FunctionFragment;
    'modify_lock(uint256,uint256,address)': FunctionFragment;
    'withdraw()': FunctionFragment;
    'find_epoch_by_timestamp(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'balanceOf(address,uint256)': FunctionFragment;
    'getPriorVotes(address,uint256)': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'totalSupply(uint256)': FunctionFragment;
    'totalSupplyAt(uint256)': FunctionFragment;
    'token()': FunctionFragment;
    'reward_pool()': FunctionFragment;
    'name()': FunctionFragment;
    'symbol()': FunctionFragment;
    'decimals()': FunctionFragment;
    'supply()': FunctionFragment;
    'locked(address)': FunctionFragment;
    'epoch(address)': FunctionFragment;
    'point_history(address,uint256)': FunctionFragment;
    'slope_changes(address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'get_last_user_point'
      | 'checkpoint'
      | 'modify_lock(uint256,uint256)'
      | 'modify_lock(uint256,uint256,address)'
      | 'withdraw'
      | 'find_epoch_by_timestamp'
      | 'balanceOf(address)'
      | 'balanceOf(address,uint256)'
      | 'getPriorVotes'
      | 'totalSupply()'
      | 'totalSupply(uint256)'
      | 'totalSupplyAt'
      | 'token'
      | 'reward_pool'
      | 'name'
      | 'symbol'
      | 'decimals'
      | 'supply'
      | 'locked'
      | 'epoch'
      | 'point_history'
      | 'slope_changes',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'get_last_user_point', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'checkpoint', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'modify_lock(uint256,uint256)',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'modify_lock(uint256,uint256,address)',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'find_epoch_by_timestamp',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf(address)', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'balanceOf(address,uint256)',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getPriorVotes',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'totalSupply()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply(uint256)', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'totalSupplyAt', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reward_pool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'supply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'locked', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'epoch', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'point_history',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'slope_changes',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'get_last_user_point', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkpoint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'modify_lock(uint256,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'modify_lock(uint256,uint256,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'find_epoch_by_timestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf(address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf(address,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPriorVotes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply(uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupplyAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward_pool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'locked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'epoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'point_history', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'slope_changes', data: BytesLike): Result;

  events: {
    'ModifyLock(address,address,uint256,uint256,uint256)': EventFragment;
    'Withdraw(address,uint256,uint256)': EventFragment;
    'Penalty(address,uint256,uint256)': EventFragment;
    'Supply(uint256,uint256,uint256)': EventFragment;
    'Initialized(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ModifyLock'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Penalty'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Supply'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
}

export interface ModifyLockEventObject {
  sender: string;
  user: string;
  amount: BigNumber;
  locktime: BigNumber;
  ts: BigNumber;
}
export type ModifyLockEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber], ModifyLockEventObject>;

export type ModifyLockEventFilter = TypedEventFilter<ModifyLockEvent>;

export interface WithdrawEventObject {
  user: string;
  amount: BigNumber;
  ts: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface PenaltyEventObject {
  user: string;
  amount: BigNumber;
  ts: BigNumber;
}
export type PenaltyEvent = TypedEvent<[string, BigNumber, BigNumber], PenaltyEventObject>;

export type PenaltyEventFilter = TypedEventFilter<PenaltyEvent>;

export interface SupplyEventObject {
  old_supply: BigNumber;
  new_supply: BigNumber;
  ts: BigNumber;
}
export type SupplyEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], SupplyEventObject>;

export type SupplyEventFilter = TypedEventFilter<SupplyEvent>;

export interface InitializedEventObject {
  token: string;
  reward_pool: string;
}
export type InitializedEvent = TypedEvent<[string, string], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface YearnVeYfi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: YearnVeYfiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    get_last_user_point(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          bias: BigNumber;
          slope: BigNumber;
          ts: BigNumber;
          blk: BigNumber;
        },
      ]
    >;

    checkpoint(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    'modify_lock(uint256,uint256)'(
      amount: PromiseOrValue<BigNumberish>,
      unlock_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'modify_lock(uint256,uint256,address)'(
      amount: PromiseOrValue<BigNumberish>,
      unlock_time: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    find_epoch_by_timestamp(
      user: PromiseOrValue<string>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'balanceOf(address)'(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    'balanceOf(address,uint256)'(
      user: PromiseOrValue<string>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getPriorVotes(
      user: PromiseOrValue<string>,
      height: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'totalSupply()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    'totalSupply(uint256)'(ts: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyAt(height: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    reward_pool(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    supply(overrides?: CallOverrides): Promise<[BigNumber]>;

    locked(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[[BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber }]>;

    epoch(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    point_history(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          bias: BigNumber;
          slope: BigNumber;
          ts: BigNumber;
          blk: BigNumber;
        },
      ]
    >;

    slope_changes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;
  };

  get_last_user_point(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bias: BigNumber;
      slope: BigNumber;
      ts: BigNumber;
      blk: BigNumber;
    }
  >;

  checkpoint(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  'modify_lock(uint256,uint256)'(
    amount: PromiseOrValue<BigNumberish>,
    unlock_time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'modify_lock(uint256,uint256,address)'(
    amount: PromiseOrValue<BigNumberish>,
    unlock_time: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  find_epoch_by_timestamp(
    user: PromiseOrValue<string>,
    ts: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'balanceOf(address)'(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  'balanceOf(address,uint256)'(
    user: PromiseOrValue<string>,
    ts: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getPriorVotes(
    user: PromiseOrValue<string>,
    height: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

  'totalSupply(uint256)'(ts: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyAt(height: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  reward_pool(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  supply(overrides?: CallOverrides): Promise<BigNumber>;

  locked(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber }>;

  epoch(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  point_history(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bias: BigNumber;
      slope: BigNumber;
      ts: BigNumber;
      blk: BigNumber;
    }
  >;

  slope_changes(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  callStatic: {
    get_last_user_point(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        ts: BigNumber;
        blk: BigNumber;
      }
    >;

    checkpoint(overrides?: CallOverrides): Promise<void>;

    'modify_lock(uint256,uint256)'(
      amount: PromiseOrValue<BigNumberish>,
      unlock_time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber }>;

    'modify_lock(uint256,uint256,address)'(
      amount: PromiseOrValue<BigNumberish>,
      unlock_time: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber }>;

    withdraw(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { amount: BigNumber; penalty: BigNumber }>;

    find_epoch_by_timestamp(
      user: PromiseOrValue<string>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'balanceOf(address)'(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    'balanceOf(address,uint256)'(
      user: PromiseOrValue<string>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPriorVotes(
      user: PromiseOrValue<string>,
      height: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    'totalSupply(uint256)'(ts: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(height: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    reward_pool(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    supply(overrides?: CallOverrides): Promise<BigNumber>;

    locked(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber }>;

    epoch(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    point_history(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        ts: BigNumber;
        blk: BigNumber;
      }
    >;

    slope_changes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {
    'ModifyLock(address,address,uint256,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      amount?: null,
      locktime?: null,
      ts?: null,
    ): ModifyLockEventFilter;
    ModifyLock(
      sender?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      amount?: null,
      locktime?: null,
      ts?: null,
    ): ModifyLockEventFilter;

    'Withdraw(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      ts?: null,
    ): WithdrawEventFilter;
    Withdraw(user?: PromiseOrValue<string> | null, amount?: null, ts?: null): WithdrawEventFilter;

    'Penalty(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      ts?: null,
    ): PenaltyEventFilter;
    Penalty(user?: PromiseOrValue<string> | null, amount?: null, ts?: null): PenaltyEventFilter;

    'Supply(uint256,uint256,uint256)'(old_supply?: null, new_supply?: null, ts?: null): SupplyEventFilter;
    Supply(old_supply?: null, new_supply?: null, ts?: null): SupplyEventFilter;

    'Initialized(address,address)'(token?: null, reward_pool?: null): InitializedEventFilter;
    Initialized(token?: null, reward_pool?: null): InitializedEventFilter;
  };

  estimateGas: {
    get_last_user_point(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    checkpoint(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    'modify_lock(uint256,uint256)'(
      amount: PromiseOrValue<BigNumberish>,
      unlock_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'modify_lock(uint256,uint256,address)'(
      amount: PromiseOrValue<BigNumberish>,
      unlock_time: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    find_epoch_by_timestamp(
      user: PromiseOrValue<string>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'balanceOf(address)'(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    'balanceOf(address,uint256)'(
      user: PromiseOrValue<string>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPriorVotes(
      user: PromiseOrValue<string>,
      height: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    'totalSupply(uint256)'(ts: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(height: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    reward_pool(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    supply(overrides?: CallOverrides): Promise<BigNumber>;

    locked(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    epoch(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    point_history(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    slope_changes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    get_last_user_point(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkpoint(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    'modify_lock(uint256,uint256)'(
      amount: PromiseOrValue<BigNumberish>,
      unlock_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'modify_lock(uint256,uint256,address)'(
      amount: PromiseOrValue<BigNumberish>,
      unlock_time: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    find_epoch_by_timestamp(
      user: PromiseOrValue<string>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'balanceOf(address)'(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'balanceOf(address,uint256)'(
      user: PromiseOrValue<string>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPriorVotes(
      user: PromiseOrValue<string>,
      height: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'totalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'totalSupply(uint256)'(ts: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyAt(height: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    locked(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epoch(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    point_history(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    slope_changes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
