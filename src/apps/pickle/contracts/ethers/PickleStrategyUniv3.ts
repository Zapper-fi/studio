/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface PickleStrategyUniv3Interface extends utils.Interface {
  functions: {
    'amountsForLiquid()': FunctionFragment;
    'controller()': FunctionFragment;
    'deposit()': FunctionFragment;
    'determineTicks()': FunctionFragment;
    'execute(address,bytes)': FunctionFragment;
    'getHarvestable()': FunctionFragment;
    'getName()': FunctionFragment;
    'governance()': FunctionFragment;
    'harvest()': FunctionFragment;
    'harvesters(address)': FunctionFragment;
    'liquidityOf()': FunctionFragment;
    'liquidityOfPool()': FunctionFragment;
    'liquidityOfThis()': FunctionFragment;
    'nftManager()': FunctionFragment;
    'onERC721Received(address,address,uint256,bytes)': FunctionFragment;
    'performanceTreasuryFee()': FunctionFragment;
    'performanceTreasuryMax()': FunctionFragment;
    'pool()': FunctionFragment;
    'rebalance()': FunctionFragment;
    'revokeHarvesters(address[])': FunctionFragment;
    'setController(address)': FunctionFragment;
    'setGovernance(address)': FunctionFragment;
    'setPerformanceTreasuryFee(uint256)': FunctionFragment;
    'setStrategist(address)': FunctionFragment;
    'setTickRangeMultiplier(int24)': FunctionFragment;
    'setTimelock(address)': FunctionFragment;
    'setTwapTime(uint24)': FunctionFragment;
    'strategist()': FunctionFragment;
    'tick_lower()': FunctionFragment;
    'tick_upper()': FunctionFragment;
    'timelock()': FunctionFragment;
    'token0()': FunctionFragment;
    'token1()': FunctionFragment;
    'tokenId()': FunctionFragment;
    'univ3Router()': FunctionFragment;
    'whitelistHarvesters(address[])': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdraw(address)': FunctionFragment;
    'withdrawAll()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'amountsForLiquid'
      | 'controller'
      | 'deposit'
      | 'determineTicks'
      | 'execute'
      | 'getHarvestable'
      | 'getName'
      | 'governance'
      | 'harvest'
      | 'harvesters'
      | 'liquidityOf'
      | 'liquidityOfPool'
      | 'liquidityOfThis'
      | 'nftManager'
      | 'onERC721Received'
      | 'performanceTreasuryFee'
      | 'performanceTreasuryMax'
      | 'pool'
      | 'rebalance'
      | 'revokeHarvesters'
      | 'setController'
      | 'setGovernance'
      | 'setPerformanceTreasuryFee'
      | 'setStrategist'
      | 'setTickRangeMultiplier'
      | 'setTimelock'
      | 'setTwapTime'
      | 'strategist'
      | 'tick_lower'
      | 'tick_upper'
      | 'timelock'
      | 'token0'
      | 'token1'
      | 'tokenId'
      | 'univ3Router'
      | 'whitelistHarvesters'
      | 'withdraw(uint256)'
      | 'withdraw(address)'
      | 'withdrawAll',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'amountsForLiquid', values?: undefined): string;
  encodeFunctionData(functionFragment: 'controller', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'determineTicks', values?: undefined): string;
  encodeFunctionData(functionFragment: 'execute', values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'getHarvestable', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getName', values?: undefined): string;
  encodeFunctionData(functionFragment: 'governance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'harvest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'harvesters', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'liquidityOf', values?: undefined): string;
  encodeFunctionData(functionFragment: 'liquidityOfPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'liquidityOfThis', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nftManager', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'onERC721Received',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'performanceTreasuryFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'performanceTreasuryMax', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rebalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'revokeHarvesters', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'setController', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setGovernance', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setPerformanceTreasuryFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setStrategist', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setTickRangeMultiplier', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setTimelock', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setTwapTime', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'strategist', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tick_lower', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tick_upper', values?: undefined): string;
  encodeFunctionData(functionFragment: 'timelock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token0', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token1', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'univ3Router', values?: undefined): string;
  encodeFunctionData(functionFragment: 'whitelistHarvesters', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(functionFragment: 'withdraw(uint256)', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'withdraw(address)', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'withdrawAll', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'amountsForLiquid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'controller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'determineTicks', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'execute', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getHarvestable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getName', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvesters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidityOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidityOfPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidityOfThis', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nftManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onERC721Received', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'performanceTreasuryFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'performanceTreasuryMax', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rebalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeHarvesters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPerformanceTreasuryFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setStrategist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTickRangeMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTimelock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTwapTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tick_lower', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tick_upper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timelock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token0', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token1', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'univ3Router', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistHarvesters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw(uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw(address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAll', data: BytesLike): Result;

  events: {
    'Deposited(uint256,uint256,uint256)': EventFragment;
    'Harvested(uint256)': EventFragment;
    'InitialDeposited(uint256)': EventFragment;
    'Rebalanced(uint256,int24,int24)': EventFragment;
    'Withdrawn(uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Deposited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Harvested'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InitialDeposited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Rebalanced'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdrawn'): EventFragment;
}

export interface DepositedEventObject {
  tokenId: BigNumber;
  token0Balance: BigNumber;
  token1Balance: BigNumber;
}
export type DepositedEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], DepositedEventObject>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface HarvestedEventObject {
  tokenId: BigNumber;
}
export type HarvestedEvent = TypedEvent<[BigNumber], HarvestedEventObject>;

export type HarvestedEventFilter = TypedEventFilter<HarvestedEvent>;

export interface InitialDepositedEventObject {
  tokenId: BigNumber;
}
export type InitialDepositedEvent = TypedEvent<[BigNumber], InitialDepositedEventObject>;

export type InitialDepositedEventFilter = TypedEventFilter<InitialDepositedEvent>;

export interface RebalancedEventObject {
  tokenId: BigNumber;
  _tickLower: number;
  _tickUpper: number;
}
export type RebalancedEvent = TypedEvent<[BigNumber, number, number], RebalancedEventObject>;

export type RebalancedEventFilter = TypedEventFilter<RebalancedEvent>;

export interface WithdrawnEventObject {
  tokenId: BigNumber;
  _liquidity: BigNumber;
}
export type WithdrawnEvent = TypedEvent<[BigNumber, BigNumber], WithdrawnEventObject>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface PickleStrategyUniv3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PickleStrategyUniv3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    amountsForLiquid(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    deposit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    determineTicks(overrides?: CallOverrides): Promise<[number, number]>;

    execute(
      _target: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getHarvestable(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    harvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    harvesters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    liquidityOf(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityOfPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityOfThis(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftManager(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    performanceTreasuryFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    performanceTreasuryMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    rebalance(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    revokeHarvesters(
      _harvesters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPerformanceTreasuryFee(
      _performanceTreasuryFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setStrategist(
      _strategist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTickRangeMultiplier(
      _tickRangeMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTimelock(
      _timelock: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTwapTime(
      _twapTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    strategist(overrides?: CallOverrides): Promise<[string]>;

    tick_lower(overrides?: CallOverrides): Promise<[number]>;

    tick_upper(overrides?: CallOverrides): Promise<[number]>;

    timelock(overrides?: CallOverrides): Promise<[string]>;

    token0(overrides?: CallOverrides): Promise<[string]>;

    token1(overrides?: CallOverrides): Promise<[string]>;

    tokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    univ3Router(overrides?: CallOverrides): Promise<[string]>;

    whitelistHarvesters(
      _harvesters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'withdraw(uint256)'(
      _liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'withdraw(address)'(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;
  };

  amountsForLiquid(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  controller(overrides?: CallOverrides): Promise<string>;

  deposit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  determineTicks(overrides?: CallOverrides): Promise<[number, number]>;

  execute(
    _target: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getHarvestable(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  getName(overrides?: CallOverrides): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  harvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  harvesters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  liquidityOf(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityOfPool(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityOfThis(overrides?: CallOverrides): Promise<BigNumber>;

  nftManager(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<string>;

  performanceTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

  performanceTreasuryMax(overrides?: CallOverrides): Promise<BigNumber>;

  pool(overrides?: CallOverrides): Promise<string>;

  rebalance(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  revokeHarvesters(
    _harvesters: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setController(
    _controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPerformanceTreasuryFee(
    _performanceTreasuryFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setStrategist(
    _strategist: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTickRangeMultiplier(
    _tickRangeMultiplier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTimelock(
    _timelock: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTwapTime(
    _twapTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  strategist(overrides?: CallOverrides): Promise<string>;

  tick_lower(overrides?: CallOverrides): Promise<number>;

  tick_upper(overrides?: CallOverrides): Promise<number>;

  timelock(overrides?: CallOverrides): Promise<string>;

  token0(overrides?: CallOverrides): Promise<string>;

  token1(overrides?: CallOverrides): Promise<string>;

  tokenId(overrides?: CallOverrides): Promise<BigNumber>;

  univ3Router(overrides?: CallOverrides): Promise<string>;

  whitelistHarvesters(
    _harvesters: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'withdraw(uint256)'(
    _liquidity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'withdraw(address)'(
    _asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  callStatic: {
    amountsForLiquid(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    controller(overrides?: CallOverrides): Promise<string>;

    deposit(overrides?: CallOverrides): Promise<void>;

    determineTicks(overrides?: CallOverrides): Promise<[number, number]>;

    execute(
      _target: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>;

    getHarvestable(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getName(overrides?: CallOverrides): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    harvest(overrides?: CallOverrides): Promise<void>;

    harvesters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    liquidityOf(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityOfPool(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityOfThis(overrides?: CallOverrides): Promise<BigNumber>;

    nftManager(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>;

    performanceTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    performanceTreasuryMax(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<string>;

    rebalance(overrides?: CallOverrides): Promise<BigNumber>;

    revokeHarvesters(_harvesters: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    setController(_controller: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setGovernance(_governance: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setPerformanceTreasuryFee(
      _performanceTreasuryFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setStrategist(_strategist: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setTickRangeMultiplier(
      _tickRangeMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setTimelock(_timelock: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setTwapTime(_twapTime: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    strategist(overrides?: CallOverrides): Promise<string>;

    tick_lower(overrides?: CallOverrides): Promise<number>;

    tick_upper(overrides?: CallOverrides): Promise<number>;

    timelock(overrides?: CallOverrides): Promise<string>;

    token0(overrides?: CallOverrides): Promise<string>;

    token1(overrides?: CallOverrides): Promise<string>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    univ3Router(overrides?: CallOverrides): Promise<string>;

    whitelistHarvesters(_harvesters: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    'withdraw(uint256)'(
      _liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { a0: BigNumber; a1: BigNumber }>;

    'withdraw(address)'(_asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAll(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { a0: BigNumber; a1: BigNumber }>;
  };

  filters: {
    'Deposited(uint256,uint256,uint256)'(
      tokenId?: null,
      token0Balance?: null,
      token1Balance?: null,
    ): DepositedEventFilter;
    Deposited(tokenId?: null, token0Balance?: null, token1Balance?: null): DepositedEventFilter;

    'Harvested(uint256)'(tokenId?: null): HarvestedEventFilter;
    Harvested(tokenId?: null): HarvestedEventFilter;

    'InitialDeposited(uint256)'(tokenId?: null): InitialDepositedEventFilter;
    InitialDeposited(tokenId?: null): InitialDepositedEventFilter;

    'Rebalanced(uint256,int24,int24)'(tokenId?: null, _tickLower?: null, _tickUpper?: null): RebalancedEventFilter;
    Rebalanced(tokenId?: null, _tickLower?: null, _tickUpper?: null): RebalancedEventFilter;

    'Withdrawn(uint256,uint256)'(tokenId?: null, _liquidity?: null): WithdrawnEventFilter;
    Withdrawn(tokenId?: null, _liquidity?: null): WithdrawnEventFilter;
  };

  estimateGas: {
    amountsForLiquid(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    determineTicks(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      _target: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getHarvestable(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    harvesters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    liquidityOf(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityOfPool(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityOfThis(overrides?: CallOverrides): Promise<BigNumber>;

    nftManager(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    performanceTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    performanceTreasuryMax(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    revokeHarvesters(
      _harvesters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setGovernance(
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPerformanceTreasuryFee(
      _performanceTreasuryFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setStrategist(
      _strategist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTickRangeMultiplier(
      _tickRangeMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTimelock(
      _timelock: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTwapTime(
      _twapTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    strategist(overrides?: CallOverrides): Promise<BigNumber>;

    tick_lower(overrides?: CallOverrides): Promise<BigNumber>;

    tick_upper(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    univ3Router(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistHarvesters(
      _harvesters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'withdraw(uint256)'(
      _liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'withdraw(address)'(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    amountsForLiquid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    determineTicks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      _target: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getHarvestable(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    harvesters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityOf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityOfPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityOfThis(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    performanceTreasuryFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performanceTreasuryMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalance(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    revokeHarvesters(
      _harvesters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPerformanceTreasuryFee(
      _performanceTreasuryFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setStrategist(
      _strategist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTickRangeMultiplier(
      _tickRangeMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTimelock(
      _timelock: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTwapTime(
      _twapTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    strategist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tick_lower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tick_upper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    univ3Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistHarvesters(
      _harvesters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'withdraw(uint256)'(
      _liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'withdraw(address)'(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;
  };
}
