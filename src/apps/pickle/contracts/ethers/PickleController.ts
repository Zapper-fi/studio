/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface PickleControllerInterface extends utils.Interface {
  functions: {
    'approveStrategy(address,address)': FunctionFragment;
    'approvedJarConverters(address)': FunctionFragment;
    'approvedStrategies(address,address)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'burn()': FunctionFragment;
    'converters(address,address)': FunctionFragment;
    'devfund()': FunctionFragment;
    'earn(address,uint256,uint256)': FunctionFragment;
    'earn(address,uint256)': FunctionFragment;
    'getLowerTick(address)': FunctionFragment;
    'getUpperTick(address)': FunctionFragment;
    'governance()': FunctionFragment;
    'inCaseStrategyTokenGetStuck(address,address)': FunctionFragment;
    'inCaseTokensGetStuck(address,uint256)': FunctionFragment;
    'jars(address)': FunctionFragment;
    'liquidityOf(address)': FunctionFragment;
    'onERC721Received(address,address,uint256,bytes)': FunctionFragment;
    'removeJar(address)': FunctionFragment;
    'removeStrategy(address)': FunctionFragment;
    'revokeStrategy(address,address)': FunctionFragment;
    'setDevFund(address)': FunctionFragment;
    'setGovernance(address)': FunctionFragment;
    'setJar(address,address)': FunctionFragment;
    'setStrategist(address)': FunctionFragment;
    'setStrategy(address,address)': FunctionFragment;
    'setTimelock(address)': FunctionFragment;
    'setTreasury(address)': FunctionFragment;
    'strategies(address)': FunctionFragment;
    'strategist()': FunctionFragment;
    'timelock()': FunctionFragment;
    'treasury()': FunctionFragment;
    'withdraw(address,uint256)': FunctionFragment;
    'withdrawAll(address)': FunctionFragment;
    'withdrawReward(address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'approveStrategy'
      | 'approvedJarConverters'
      | 'approvedStrategies'
      | 'balanceOf'
      | 'burn'
      | 'converters'
      | 'devfund'
      | 'earn(address,uint256,uint256)'
      | 'earn(address,uint256)'
      | 'getLowerTick'
      | 'getUpperTick'
      | 'governance'
      | 'inCaseStrategyTokenGetStuck'
      | 'inCaseTokensGetStuck'
      | 'jars'
      | 'liquidityOf'
      | 'onERC721Received'
      | 'removeJar'
      | 'removeStrategy'
      | 'revokeStrategy'
      | 'setDevFund'
      | 'setGovernance'
      | 'setJar'
      | 'setStrategist'
      | 'setStrategy'
      | 'setTimelock'
      | 'setTreasury'
      | 'strategies'
      | 'strategist'
      | 'timelock'
      | 'treasury'
      | 'withdraw'
      | 'withdrawAll'
      | 'withdrawReward',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'approveStrategy',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'approvedJarConverters', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approvedStrategies',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'burn', values?: undefined): string;
  encodeFunctionData(functionFragment: 'converters', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'devfund', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'earn(address,uint256,uint256)',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'earn(address,uint256)',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getLowerTick', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getUpperTick', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'governance', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'inCaseStrategyTokenGetStuck',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'inCaseTokensGetStuck',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'jars', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'liquidityOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'onERC721Received',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'removeJar', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'removeStrategy', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'revokeStrategy',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'setDevFund', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setGovernance', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setJar', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setStrategist', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setStrategy', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setTimelock', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setTreasury', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'strategies', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'strategist', values?: undefined): string;
  encodeFunctionData(functionFragment: 'timelock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'treasury', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'withdrawAll', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'withdrawReward',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'approveStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approvedJarConverters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approvedStrategies', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'converters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'devfund', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'earn(address,uint256,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'earn(address,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLowerTick', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUpperTick', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'inCaseStrategyTokenGetStuck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'inCaseTokensGetStuck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'jars', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidityOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onERC721Received', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeJar', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDevFund', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setJar', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setStrategist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setStrategy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTimelock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTreasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategies', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strategist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timelock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawReward', data: BytesLike): Result;

  events: {};
}

export interface PickleController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PickleControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveStrategy(
      _pool: PromiseOrValue<string>,
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    approvedJarConverters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    approvedStrategies(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    balanceOf(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(overrides?: CallOverrides): Promise<[string]>;

    converters(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    devfund(overrides?: CallOverrides): Promise<[string]>;

    'earn(address,uint256,uint256)'(
      _pool: PromiseOrValue<string>,
      _token0Amount: PromiseOrValue<BigNumberish>,
      _token1Amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'earn(address,uint256)'(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getLowerTick(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[number]>;

    getUpperTick(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[number]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    inCaseStrategyTokenGetStuck(
      _strategy: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    inCaseTokensGetStuck(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    jars(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    liquidityOf(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    removeJar(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeStrategy(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    revokeStrategy(
      _pool: PromiseOrValue<string>,
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDevFund(
      _devfund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setJar(
      _pool: PromiseOrValue<string>,
      _jar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setStrategist(
      _strategist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setStrategy(
      _pool: PromiseOrValue<string>,
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTimelock(
      _timelock: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    strategies(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    strategist(overrides?: CallOverrides): Promise<[string]>;

    timelock(overrides?: CallOverrides): Promise<[string]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _pool: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawAll(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawReward(
      _token: PromiseOrValue<string>,
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  approveStrategy(
    _pool: PromiseOrValue<string>,
    _strategy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  approvedJarConverters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  approvedStrategies(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  balanceOf(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  burn(overrides?: CallOverrides): Promise<string>;

  converters(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  devfund(overrides?: CallOverrides): Promise<string>;

  'earn(address,uint256,uint256)'(
    _pool: PromiseOrValue<string>,
    _token0Amount: PromiseOrValue<BigNumberish>,
    _token1Amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'earn(address,uint256)'(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getLowerTick(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>;

  getUpperTick(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>;

  governance(overrides?: CallOverrides): Promise<string>;

  inCaseStrategyTokenGetStuck(
    _strategy: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  inCaseTokensGetStuck(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  jars(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  liquidityOf(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<string>;

  removeJar(
    _pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeStrategy(
    _pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  revokeStrategy(
    _pool: PromiseOrValue<string>,
    _strategy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDevFund(
    _devfund: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setJar(
    _pool: PromiseOrValue<string>,
    _jar: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setStrategist(
    _strategist: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setStrategy(
    _pool: PromiseOrValue<string>,
    _strategy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTimelock(
    _timelock: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  strategies(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  strategist(overrides?: CallOverrides): Promise<string>;

  timelock(overrides?: CallOverrides): Promise<string>;

  treasury(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _pool: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawAll(
    _pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawReward(
    _token: PromiseOrValue<string>,
    _reward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    approveStrategy(
      _pool: PromiseOrValue<string>,
      _strategy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    approvedJarConverters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    approvedStrategies(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    balanceOf(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    burn(overrides?: CallOverrides): Promise<string>;

    converters(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    devfund(overrides?: CallOverrides): Promise<string>;

    'earn(address,uint256,uint256)'(
      _pool: PromiseOrValue<string>,
      _token0Amount: PromiseOrValue<BigNumberish>,
      _token1Amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    'earn(address,uint256)'(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getLowerTick(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>;

    getUpperTick(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>;

    governance(overrides?: CallOverrides): Promise<string>;

    inCaseStrategyTokenGetStuck(
      _strategy: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    inCaseTokensGetStuck(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    jars(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    liquidityOf(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>;

    removeJar(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    removeStrategy(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    revokeStrategy(
      _pool: PromiseOrValue<string>,
      _strategy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDevFund(_devfund: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setGovernance(_governance: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setJar(_pool: PromiseOrValue<string>, _jar: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setStrategist(_strategist: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setStrategy(
      _pool: PromiseOrValue<string>,
      _strategy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setTimelock(_timelock: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    strategies(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    strategist(overrides?: CallOverrides): Promise<string>;

    timelock(overrides?: CallOverrides): Promise<string>;

    treasury(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _pool: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { a0: BigNumber; a1: BigNumber }>;

    withdrawAll(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { a0: BigNumber; a1: BigNumber }>;

    withdrawReward(
      _token: PromiseOrValue<string>,
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    approveStrategy(
      _pool: PromiseOrValue<string>,
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    approvedJarConverters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    approvedStrategies(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOf(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    burn(overrides?: CallOverrides): Promise<BigNumber>;

    converters(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    devfund(overrides?: CallOverrides): Promise<BigNumber>;

    'earn(address,uint256,uint256)'(
      _pool: PromiseOrValue<string>,
      _token0Amount: PromiseOrValue<BigNumberish>,
      _token1Amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'earn(address,uint256)'(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getLowerTick(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getUpperTick(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    inCaseStrategyTokenGetStuck(
      _strategy: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    inCaseTokensGetStuck(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    jars(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    liquidityOf(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    removeJar(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeStrategy(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    revokeStrategy(
      _pool: PromiseOrValue<string>,
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDevFund(
      _devfund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setGovernance(
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setJar(
      _pool: PromiseOrValue<string>,
      _jar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setStrategist(
      _strategist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setStrategy(
      _pool: PromiseOrValue<string>,
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTimelock(
      _timelock: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    strategies(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    strategist(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _pool: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawAll(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawReward(
      _token: PromiseOrValue<string>,
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveStrategy(
      _pool: PromiseOrValue<string>,
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    approvedJarConverters(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approvedStrategies(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    balanceOf(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    converters(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    devfund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'earn(address,uint256,uint256)'(
      _pool: PromiseOrValue<string>,
      _token0Amount: PromiseOrValue<BigNumberish>,
      _token1Amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'earn(address,uint256)'(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getLowerTick(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUpperTick(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inCaseStrategyTokenGetStuck(
      _strategy: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    inCaseTokensGetStuck(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    jars(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityOf(_pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    removeJar(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeStrategy(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    revokeStrategy(
      _pool: PromiseOrValue<string>,
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDevFund(
      _devfund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setJar(
      _pool: PromiseOrValue<string>,
      _jar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setStrategist(
      _strategist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setStrategy(
      _pool: PromiseOrValue<string>,
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTimelock(
      _timelock: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    strategies(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _pool: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawReward(
      _token: PromiseOrValue<string>,
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
