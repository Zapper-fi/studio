/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface AelinPoolInterface extends utils.Interface {
  functions: {
    'acceptDealTokens(uint256)': FunctionFragment;
    'acceptMaxDealTokens()': FunctionFragment;
    'acceptSponsor()': FunctionFragment;
    'aelinDeal()': FunctionFragment;
    'aelinDealLogicAddress()': FunctionFragment;
    'aelinRewardsAddress()': FunctionFragment;
    'allowList(address)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'amountAccepted(address)': FunctionFragment;
    'amountWithdrawn(address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'calledInitialize()': FunctionFragment;
    'createDeal(address,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'futureSponsor()': FunctionFragment;
    'hasAllowList()': FunctionFragment;
    'holder()': FunctionFragment;
    'holderFundingExpiry()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initialize(string,string,uint256,address,uint256,uint256,address,uint256,address,address)': FunctionFragment;
    'maxDealAccept(address)': FunctionFragment;
    'maxProRataAmount(address)': FunctionFragment;
    'name()': FunctionFragment;
    'numberOfDeals()': FunctionFragment;
    'openPeriodEligible(address)': FunctionFragment;
    'poolExpiry()': FunctionFragment;
    'poolFactory()': FunctionFragment;
    'proRataConversion()': FunctionFragment;
    'purchaseExpiry()': FunctionFragment;
    'purchasePoolTokens(uint256)': FunctionFragment;
    'purchaseToken()': FunctionFragment;
    'purchaseTokenCap()': FunctionFragment;
    'purchaseTokenDecimals()': FunctionFragment;
    'purchaseTokenTotalForDeal()': FunctionFragment;
    'setSponsor(address)': FunctionFragment;
    'sponsor()': FunctionFragment;
    'sponsorFee()': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalAmountAccepted()': FunctionFragment;
    'totalAmountWithdrawn()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'updateAllowList(address[],uint256[])': FunctionFragment;
    'withdrawFromPool(uint256)': FunctionFragment;
    'withdrawMaxFromPool()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptDealTokens'
      | 'acceptMaxDealTokens'
      | 'acceptSponsor'
      | 'aelinDeal'
      | 'aelinDealLogicAddress'
      | 'aelinRewardsAddress'
      | 'allowList'
      | 'allowance'
      | 'amountAccepted'
      | 'amountWithdrawn'
      | 'approve'
      | 'balanceOf'
      | 'calledInitialize'
      | 'createDeal'
      | 'decimals'
      | 'decreaseAllowance'
      | 'futureSponsor'
      | 'hasAllowList'
      | 'holder'
      | 'holderFundingExpiry'
      | 'increaseAllowance'
      | 'initialize'
      | 'maxDealAccept'
      | 'maxProRataAmount'
      | 'name'
      | 'numberOfDeals'
      | 'openPeriodEligible'
      | 'poolExpiry'
      | 'poolFactory'
      | 'proRataConversion'
      | 'purchaseExpiry'
      | 'purchasePoolTokens'
      | 'purchaseToken'
      | 'purchaseTokenCap'
      | 'purchaseTokenDecimals'
      | 'purchaseTokenTotalForDeal'
      | 'setSponsor'
      | 'sponsor'
      | 'sponsorFee'
      | 'symbol'
      | 'totalAmountAccepted'
      | 'totalAmountWithdrawn'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'updateAllowList'
      | 'withdrawFromPool'
      | 'withdrawMaxFromPool',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'acceptDealTokens', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'acceptMaxDealTokens', values?: undefined): string;
  encodeFunctionData(functionFragment: 'acceptSponsor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'aelinDeal', values?: undefined): string;
  encodeFunctionData(functionFragment: 'aelinDealLogicAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'aelinRewardsAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowList', values: [string]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'amountAccepted', values: [string]): string;
  encodeFunctionData(functionFragment: 'amountWithdrawn', values: [string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'calledInitialize', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'createDeal',
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'futureSponsor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'hasAllowList', values?: undefined): string;
  encodeFunctionData(functionFragment: 'holder', values?: undefined): string;
  encodeFunctionData(functionFragment: 'holderFundingExpiry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, BigNumberish, string, BigNumberish, BigNumberish, string, BigNumberish, string, string],
  ): string;
  encodeFunctionData(functionFragment: 'maxDealAccept', values: [string]): string;
  encodeFunctionData(functionFragment: 'maxProRataAmount', values: [string]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'numberOfDeals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'openPeriodEligible', values: [string]): string;
  encodeFunctionData(functionFragment: 'poolExpiry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolFactory', values?: undefined): string;
  encodeFunctionData(functionFragment: 'proRataConversion', values?: undefined): string;
  encodeFunctionData(functionFragment: 'purchaseExpiry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'purchasePoolTokens', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'purchaseToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'purchaseTokenCap', values?: undefined): string;
  encodeFunctionData(functionFragment: 'purchaseTokenDecimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'purchaseTokenTotalForDeal', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setSponsor', values: [string]): string;
  encodeFunctionData(functionFragment: 'sponsor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'sponsorFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalAmountAccepted', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalAmountWithdrawn', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateAllowList', values: [string[], BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'withdrawFromPool', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawMaxFromPool', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'acceptDealTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptMaxDealTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptSponsor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'aelinDeal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'aelinDealLogicAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'aelinRewardsAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'amountAccepted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'amountWithdrawn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calledInitialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createDeal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'futureSponsor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasAllowList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'holder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'holderFundingExpiry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxDealAccept', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxProRataAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numberOfDeals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'openPeriodEligible', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolExpiry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolFactory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proRataConversion', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'purchaseExpiry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'purchasePoolTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'purchaseToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'purchaseTokenCap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'purchaseTokenDecimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'purchaseTokenTotalForDeal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSponsor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sponsor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sponsorFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAmountAccepted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAmountWithdrawn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateAllowList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawFromPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawMaxFromPool', data: BytesLike): Result;

  events: {
    'AcceptDeal(address,address,uint256,uint256,uint256)': EventFragment;
    'AelinToken(string,string,uint8)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'CreateDeal(string,string,address,address)': EventFragment;
    'DealDetail(address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256)': EventFragment;
    'PurchasePoolToken(address,uint256)': EventFragment;
    'SetSponsor(address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'WithdrawFromPool(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AcceptDeal'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AelinToken'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CreateDeal'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DealDetail'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PurchasePoolToken'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetSponsor'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawFromPool'): EventFragment;
}

export interface AcceptDealEventObject {
  purchaser: string;
  dealAddress: string;
  poolTokenAmount: BigNumber;
  sponsorFee: BigNumber;
  aelinFee: BigNumber;
}
export type AcceptDealEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber], AcceptDealEventObject>;

export type AcceptDealEventFilter = TypedEventFilter<AcceptDealEvent>;

export interface AelinTokenEventObject {
  name: string;
  symbol: string;
  decimals: number;
}
export type AelinTokenEvent = TypedEvent<[string, string, number], AelinTokenEventObject>;

export type AelinTokenEventFilter = TypedEventFilter<AelinTokenEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface CreateDealEventObject {
  name: string;
  symbol: string;
  sponsor: string;
  dealContract: string;
}
export type CreateDealEvent = TypedEvent<[string, string, string, string], CreateDealEventObject>;

export type CreateDealEventFilter = TypedEventFilter<CreateDealEvent>;

export interface DealDetailEventObject {
  dealContract: string;
  underlyingDealToken: string;
  purchaseTokenTotalForDeal: BigNumber;
  underlyingDealTokenTotal: BigNumber;
  vestingPeriod: BigNumber;
  vestingCliff: BigNumber;
  proRataRedemptionPeriod: BigNumber;
  openRedemptionPeriod: BigNumber;
  holder: string;
  holderFundingDuration: BigNumber;
}
export type DealDetailEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string, BigNumber],
  DealDetailEventObject
>;

export type DealDetailEventFilter = TypedEventFilter<DealDetailEvent>;

export interface PurchasePoolTokenEventObject {
  purchaser: string;
  purchaseTokenAmount: BigNumber;
}
export type PurchasePoolTokenEvent = TypedEvent<[string, BigNumber], PurchasePoolTokenEventObject>;

export type PurchasePoolTokenEventFilter = TypedEventFilter<PurchasePoolTokenEvent>;

export interface SetSponsorEventObject {
  sponsor: string;
}
export type SetSponsorEvent = TypedEvent<[string], SetSponsorEventObject>;

export type SetSponsorEventFilter = TypedEventFilter<SetSponsorEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawFromPoolEventObject {
  purchaser: string;
  purchaseTokenAmount: BigNumber;
}
export type WithdrawFromPoolEvent = TypedEvent<[string, BigNumber], WithdrawFromPoolEventObject>;

export type WithdrawFromPoolEventFilter = TypedEventFilter<WithdrawFromPoolEvent>;

export interface AelinPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AelinPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptDealTokens(
      poolTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    acceptMaxDealTokens(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    acceptSponsor(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    aelinDeal(overrides?: CallOverrides): Promise<[string]>;

    aelinDealLogicAddress(overrides?: CallOverrides): Promise<[string]>;

    aelinRewardsAddress(overrides?: CallOverrides): Promise<[string]>;

    allowList(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    amountAccepted(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    amountWithdrawn(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    calledInitialize(overrides?: CallOverrides): Promise<[boolean]>;

    createDeal(
      _underlyingDealToken: string,
      _purchaseTokenTotalForDeal: BigNumberish,
      _underlyingDealTokenTotal: BigNumberish,
      _vestingPeriod: BigNumberish,
      _vestingCliff: BigNumberish,
      _proRataRedemptionPeriod: BigNumberish,
      _openRedemptionPeriod: BigNumberish,
      _holder: string,
      _holderFundingDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    futureSponsor(overrides?: CallOverrides): Promise<[string]>;

    hasAllowList(overrides?: CallOverrides): Promise<[boolean]>;

    holder(overrides?: CallOverrides): Promise<[string]>;

    holderFundingExpiry(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _name: string,
      _symbol: string,
      _purchaseTokenCap: BigNumberish,
      _purchaseToken: string,
      _duration: BigNumberish,
      _sponsorFee: BigNumberish,
      _sponsor: string,
      _purchaseDuration: BigNumberish,
      _aelinDealLogicAddress: string,
      _aelinRewardsAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    maxDealAccept(purchaser: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxProRataAmount(purchaser: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    numberOfDeals(overrides?: CallOverrides): Promise<[number]>;

    openPeriodEligible(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    poolExpiry(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolFactory(overrides?: CallOverrides): Promise<[string]>;

    proRataConversion(overrides?: CallOverrides): Promise<[BigNumber]>;

    purchaseExpiry(overrides?: CallOverrides): Promise<[BigNumber]>;

    purchasePoolTokens(
      _purchaseTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    purchaseToken(overrides?: CallOverrides): Promise<[string]>;

    purchaseTokenCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    purchaseTokenDecimals(overrides?: CallOverrides): Promise<[number]>;

    purchaseTokenTotalForDeal(overrides?: CallOverrides): Promise<[BigNumber]>;

    setSponsor(
      _sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    sponsor(overrides?: CallOverrides): Promise<[string]>;

    sponsorFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalAmountAccepted(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAmountWithdrawn(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      dst: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      src: string,
      dst: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateAllowList(
      _allowList: string[],
      _allowListAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawFromPool(
      purchaseTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawMaxFromPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;
  };

  acceptDealTokens(
    poolTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  acceptMaxDealTokens(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  acceptSponsor(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  aelinDeal(overrides?: CallOverrides): Promise<string>;

  aelinDealLogicAddress(overrides?: CallOverrides): Promise<string>;

  aelinRewardsAddress(overrides?: CallOverrides): Promise<string>;

  allowList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  amountAccepted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  amountWithdrawn(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  calledInitialize(overrides?: CallOverrides): Promise<boolean>;

  createDeal(
    _underlyingDealToken: string,
    _purchaseTokenTotalForDeal: BigNumberish,
    _underlyingDealTokenTotal: BigNumberish,
    _vestingPeriod: BigNumberish,
    _vestingCliff: BigNumberish,
    _proRataRedemptionPeriod: BigNumberish,
    _openRedemptionPeriod: BigNumberish,
    _holder: string,
    _holderFundingDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  futureSponsor(overrides?: CallOverrides): Promise<string>;

  hasAllowList(overrides?: CallOverrides): Promise<boolean>;

  holder(overrides?: CallOverrides): Promise<string>;

  holderFundingExpiry(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _name: string,
    _symbol: string,
    _purchaseTokenCap: BigNumberish,
    _purchaseToken: string,
    _duration: BigNumberish,
    _sponsorFee: BigNumberish,
    _sponsor: string,
    _purchaseDuration: BigNumberish,
    _aelinDealLogicAddress: string,
    _aelinRewardsAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  maxDealAccept(purchaser: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxProRataAmount(purchaser: string, overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  numberOfDeals(overrides?: CallOverrides): Promise<number>;

  openPeriodEligible(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  poolExpiry(overrides?: CallOverrides): Promise<BigNumber>;

  poolFactory(overrides?: CallOverrides): Promise<string>;

  proRataConversion(overrides?: CallOverrides): Promise<BigNumber>;

  purchaseExpiry(overrides?: CallOverrides): Promise<BigNumber>;

  purchasePoolTokens(
    _purchaseTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  purchaseToken(overrides?: CallOverrides): Promise<string>;

  purchaseTokenCap(overrides?: CallOverrides): Promise<BigNumber>;

  purchaseTokenDecimals(overrides?: CallOverrides): Promise<number>;

  purchaseTokenTotalForDeal(overrides?: CallOverrides): Promise<BigNumber>;

  setSponsor(
    _sponsor: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  sponsor(overrides?: CallOverrides): Promise<string>;

  sponsorFee(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalAmountAccepted(overrides?: CallOverrides): Promise<BigNumber>;

  totalAmountWithdrawn(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    dst: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    src: string,
    dst: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateAllowList(
    _allowList: string[],
    _allowListAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawFromPool(
    purchaseTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawMaxFromPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  callStatic: {
    acceptDealTokens(poolTokenAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    acceptMaxDealTokens(overrides?: CallOverrides): Promise<void>;

    acceptSponsor(overrides?: CallOverrides): Promise<void>;

    aelinDeal(overrides?: CallOverrides): Promise<string>;

    aelinDealLogicAddress(overrides?: CallOverrides): Promise<string>;

    aelinRewardsAddress(overrides?: CallOverrides): Promise<string>;

    allowList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    amountAccepted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    amountWithdrawn(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    calledInitialize(overrides?: CallOverrides): Promise<boolean>;

    createDeal(
      _underlyingDealToken: string,
      _purchaseTokenTotalForDeal: BigNumberish,
      _underlyingDealTokenTotal: BigNumberish,
      _vestingPeriod: BigNumberish,
      _vestingCliff: BigNumberish,
      _proRataRedemptionPeriod: BigNumberish,
      _openRedemptionPeriod: BigNumberish,
      _holder: string,
      _holderFundingDuration: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    futureSponsor(overrides?: CallOverrides): Promise<string>;

    hasAllowList(overrides?: CallOverrides): Promise<boolean>;

    holder(overrides?: CallOverrides): Promise<string>;

    holderFundingExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _name: string,
      _symbol: string,
      _purchaseTokenCap: BigNumberish,
      _purchaseToken: string,
      _duration: BigNumberish,
      _sponsorFee: BigNumberish,
      _sponsor: string,
      _purchaseDuration: BigNumberish,
      _aelinDealLogicAddress: string,
      _aelinRewardsAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    maxDealAccept(purchaser: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxProRataAmount(purchaser: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    numberOfDeals(overrides?: CallOverrides): Promise<number>;

    openPeriodEligible(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    poolExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    poolFactory(overrides?: CallOverrides): Promise<string>;

    proRataConversion(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    purchasePoolTokens(_purchaseTokenAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    purchaseToken(overrides?: CallOverrides): Promise<string>;

    purchaseTokenCap(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseTokenDecimals(overrides?: CallOverrides): Promise<number>;

    purchaseTokenTotalForDeal(overrides?: CallOverrides): Promise<BigNumber>;

    setSponsor(_sponsor: string, overrides?: CallOverrides): Promise<void>;

    sponsor(overrides?: CallOverrides): Promise<string>;

    sponsorFee(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalAmountAccepted(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmountWithdrawn(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(dst: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(src: string, dst: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    updateAllowList(_allowList: string[], _allowListAmounts: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    withdrawFromPool(purchaseTokenAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawMaxFromPool(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'AcceptDeal(address,address,uint256,uint256,uint256)'(
      purchaser?: string | null,
      dealAddress?: string | null,
      poolTokenAmount?: null,
      sponsorFee?: null,
      aelinFee?: null,
    ): AcceptDealEventFilter;
    AcceptDeal(
      purchaser?: string | null,
      dealAddress?: string | null,
      poolTokenAmount?: null,
      sponsorFee?: null,
      aelinFee?: null,
    ): AcceptDealEventFilter;

    'AelinToken(string,string,uint8)'(name?: null, symbol?: null, decimals?: null): AelinTokenEventFilter;
    AelinToken(name?: null, symbol?: null, decimals?: null): AelinTokenEventFilter;

    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;

    'CreateDeal(string,string,address,address)'(
      name?: null,
      symbol?: null,
      sponsor?: string | null,
      dealContract?: string | null,
    ): CreateDealEventFilter;
    CreateDeal(
      name?: null,
      symbol?: null,
      sponsor?: string | null,
      dealContract?: string | null,
    ): CreateDealEventFilter;

    'DealDetail(address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256)'(
      dealContract?: string | null,
      underlyingDealToken?: string | null,
      purchaseTokenTotalForDeal?: null,
      underlyingDealTokenTotal?: null,
      vestingPeriod?: null,
      vestingCliff?: null,
      proRataRedemptionPeriod?: null,
      openRedemptionPeriod?: null,
      holder?: string | null,
      holderFundingDuration?: null,
    ): DealDetailEventFilter;
    DealDetail(
      dealContract?: string | null,
      underlyingDealToken?: string | null,
      purchaseTokenTotalForDeal?: null,
      underlyingDealTokenTotal?: null,
      vestingPeriod?: null,
      vestingCliff?: null,
      proRataRedemptionPeriod?: null,
      openRedemptionPeriod?: null,
      holder?: string | null,
      holderFundingDuration?: null,
    ): DealDetailEventFilter;

    'PurchasePoolToken(address,uint256)'(
      purchaser?: string | null,
      purchaseTokenAmount?: null,
    ): PurchasePoolTokenEventFilter;
    PurchasePoolToken(purchaser?: string | null, purchaseTokenAmount?: null): PurchasePoolTokenEventFilter;

    'SetSponsor(address)'(sponsor?: string | null): SetSponsorEventFilter;
    SetSponsor(sponsor?: string | null): SetSponsorEventFilter;

    'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;

    'WithdrawFromPool(address,uint256)'(
      purchaser?: string | null,
      purchaseTokenAmount?: null,
    ): WithdrawFromPoolEventFilter;
    WithdrawFromPool(purchaser?: string | null, purchaseTokenAmount?: null): WithdrawFromPoolEventFilter;
  };

  estimateGas: {
    acceptDealTokens(
      poolTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    acceptMaxDealTokens(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    acceptSponsor(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    aelinDeal(overrides?: CallOverrides): Promise<BigNumber>;

    aelinDealLogicAddress(overrides?: CallOverrides): Promise<BigNumber>;

    aelinRewardsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    allowList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    amountAccepted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    amountWithdrawn(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    calledInitialize(overrides?: CallOverrides): Promise<BigNumber>;

    createDeal(
      _underlyingDealToken: string,
      _purchaseTokenTotalForDeal: BigNumberish,
      _underlyingDealTokenTotal: BigNumberish,
      _vestingPeriod: BigNumberish,
      _vestingCliff: BigNumberish,
      _proRataRedemptionPeriod: BigNumberish,
      _openRedemptionPeriod: BigNumberish,
      _holder: string,
      _holderFundingDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    futureSponsor(overrides?: CallOverrides): Promise<BigNumber>;

    hasAllowList(overrides?: CallOverrides): Promise<BigNumber>;

    holder(overrides?: CallOverrides): Promise<BigNumber>;

    holderFundingExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initialize(
      _name: string,
      _symbol: string,
      _purchaseTokenCap: BigNumberish,
      _purchaseToken: string,
      _duration: BigNumberish,
      _sponsorFee: BigNumberish,
      _sponsor: string,
      _purchaseDuration: BigNumberish,
      _aelinDealLogicAddress: string,
      _aelinRewardsAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    maxDealAccept(purchaser: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxProRataAmount(purchaser: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfDeals(overrides?: CallOverrides): Promise<BigNumber>;

    openPeriodEligible(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    poolFactory(overrides?: CallOverrides): Promise<BigNumber>;

    proRataConversion(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    purchasePoolTokens(
      _purchaseTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    purchaseToken(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseTokenCap(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseTokenDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseTokenTotalForDeal(overrides?: CallOverrides): Promise<BigNumber>;

    setSponsor(_sponsor: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    sponsor(overrides?: CallOverrides): Promise<BigNumber>;

    sponsorFee(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmountAccepted(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmountWithdrawn(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      src: string,
      dst: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateAllowList(
      _allowList: string[],
      _allowListAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawFromPool(
      purchaseTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawMaxFromPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptDealTokens(
      poolTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    acceptMaxDealTokens(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    acceptSponsor(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    aelinDeal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aelinDealLogicAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aelinRewardsAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowList(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    amountAccepted(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    amountWithdrawn(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calledInitialize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createDeal(
      _underlyingDealToken: string,
      _purchaseTokenTotalForDeal: BigNumberish,
      _underlyingDealTokenTotal: BigNumberish,
      _vestingPeriod: BigNumberish,
      _vestingCliff: BigNumberish,
      _proRataRedemptionPeriod: BigNumberish,
      _openRedemptionPeriod: BigNumberish,
      _holder: string,
      _holderFundingDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    futureSponsor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasAllowList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    holder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    holderFundingExpiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _name: string,
      _symbol: string,
      _purchaseTokenCap: BigNumberish,
      _purchaseToken: string,
      _duration: BigNumberish,
      _sponsorFee: BigNumberish,
      _sponsor: string,
      _purchaseDuration: BigNumberish,
      _aelinDealLogicAddress: string,
      _aelinRewardsAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    maxDealAccept(purchaser: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxProRataAmount(purchaser: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfDeals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openPeriodEligible(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolExpiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proRataConversion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseExpiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchasePoolTokens(
      _purchaseTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    purchaseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseTokenCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseTokenDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseTokenTotalForDeal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setSponsor(
      _sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    sponsor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sponsorFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAmountAccepted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAmountWithdrawn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      dst: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      src: string,
      dst: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateAllowList(
      _allowList: string[],
      _allowListAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawFromPool(
      purchaseTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawMaxFromPool(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;
  };
}
