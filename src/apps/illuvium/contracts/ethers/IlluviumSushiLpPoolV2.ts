/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace Stake {
  export type DataStruct = {
    value: BigNumberish;
    lockedFrom: BigNumberish;
    lockedUntil: BigNumberish;
    isYield: boolean;
  };

  export type DataStructOutput = [BigNumber, BigNumber, BigNumber, boolean] & {
    value: BigNumber;
    lockedFrom: BigNumber;
    lockedUntil: BigNumber;
    isYield: boolean;
  };
}

export declare namespace CorePool {
  export type UnstakeParameterStruct = {
    stakeId: BigNumberish;
    value: BigNumberish;
  };

  export type UnstakeParameterStructOutput = [BigNumber, BigNumber] & {
    stakeId: BigNumber;
    value: BigNumber;
  };
}

export interface IlluviumSushiLpPoolV2Interface extends utils.Interface {
  functions: {
    'balanceOf(address)': FunctionFragment;
    'blacklistUsers(address[])': FunctionFragment;
    'claimAllRewards(bool)': FunctionFragment;
    'claimVaultRewards()': FunctionFragment;
    'claimVaultRewardsFromRouter(address)': FunctionFragment;
    'claimYieldRewards(bool)': FunctionFragment;
    'claimYieldRewardsFromRouter(address,bool)': FunctionFragment;
    'getStake(address,uint256)': FunctionFragment;
    'getStakesLength(address)': FunctionFragment;
    'getTotalReserves()': FunctionFragment;
    'getV1StakeId(address,uint256)': FunctionFragment;
    'getV1StakePosition(address,uint256)': FunctionFragment;
    'globalWeight()': FunctionFragment;
    'initialize(address,address,address,address,uint64,uint32,address,uint256)': FunctionFragment;
    'isBlacklisted(address)': FunctionFragment;
    'isFlashPool()': FunctionFragment;
    'lastYieldDistribution()': FunctionFragment;
    'migrateLockedStakes(uint256[])': FunctionFragment;
    'moveFundsFromWallet(address)': FunctionFragment;
    'pause(bool)': FunctionFragment;
    'paused()': FunctionFragment;
    'pendingRewards(address)': FunctionFragment;
    'poolToken()': FunctionFragment;
    'poolTokenReserve()': FunctionFragment;
    'receiveVaultRewards(uint256)': FunctionFragment;
    'setV1GlobalWeight(uint256)': FunctionFragment;
    'setVault(address)': FunctionFragment;
    'setWeight(uint32)': FunctionFragment;
    'stake(uint256,uint64)': FunctionFragment;
    'sync()': FunctionFragment;
    'unstake(uint256,uint256)': FunctionFragment;
    'unstakeMultiple((uint256,uint256)[],bool)': FunctionFragment;
    'upgradeTo(address)': FunctionFragment;
    'upgradeToAndCall(address,bytes)': FunctionFragment;
    'users(address)': FunctionFragment;
    'v1GlobalWeight()': FunctionFragment;
    'v1StakesWeights(address,uint256)': FunctionFragment;
    'vaultRewardsPerWeight()': FunctionFragment;
    'weight()': FunctionFragment;
    'yieldRewardsPerWeight()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'balanceOf'
      | 'blacklistUsers'
      | 'claimAllRewards'
      | 'claimVaultRewards'
      | 'claimVaultRewardsFromRouter'
      | 'claimYieldRewards'
      | 'claimYieldRewardsFromRouter'
      | 'getStake'
      | 'getStakesLength'
      | 'getTotalReserves'
      | 'getV1StakeId'
      | 'getV1StakePosition'
      | 'globalWeight'
      | 'initialize'
      | 'isBlacklisted'
      | 'isFlashPool'
      | 'lastYieldDistribution'
      | 'migrateLockedStakes'
      | 'moveFundsFromWallet'
      | 'pause'
      | 'paused'
      | 'pendingRewards'
      | 'poolToken'
      | 'poolTokenReserve'
      | 'receiveVaultRewards'
      | 'setV1GlobalWeight'
      | 'setVault'
      | 'setWeight'
      | 'stake'
      | 'sync'
      | 'unstake'
      | 'unstakeMultiple'
      | 'upgradeTo'
      | 'upgradeToAndCall'
      | 'users'
      | 'v1GlobalWeight'
      | 'v1StakesWeights'
      | 'vaultRewardsPerWeight'
      | 'weight'
      | 'yieldRewardsPerWeight',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'blacklistUsers', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'claimAllRewards', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'claimVaultRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimVaultRewardsFromRouter', values: [string]): string;
  encodeFunctionData(functionFragment: 'claimYieldRewards', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'claimYieldRewardsFromRouter', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'getStake', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getStakesLength', values: [string]): string;
  encodeFunctionData(functionFragment: 'getTotalReserves', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getV1StakeId', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getV1StakePosition', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'globalWeight', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, string, string, BigNumberish, BigNumberish, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'isBlacklisted', values: [string]): string;
  encodeFunctionData(functionFragment: 'isFlashPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastYieldDistribution', values?: undefined): string;
  encodeFunctionData(functionFragment: 'migrateLockedStakes', values: [BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'moveFundsFromWallet', values: [string]): string;
  encodeFunctionData(functionFragment: 'pause', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingRewards', values: [string]): string;
  encodeFunctionData(functionFragment: 'poolToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolTokenReserve', values?: undefined): string;
  encodeFunctionData(functionFragment: 'receiveVaultRewards', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setV1GlobalWeight', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setVault', values: [string]): string;
  encodeFunctionData(functionFragment: 'setWeight', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'stake', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'sync', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unstake', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'unstakeMultiple', values: [CorePool.UnstakeParameterStruct[], boolean]): string;
  encodeFunctionData(functionFragment: 'upgradeTo', values: [string]): string;
  encodeFunctionData(functionFragment: 'upgradeToAndCall', values: [string, BytesLike]): string;
  encodeFunctionData(functionFragment: 'users', values: [string]): string;
  encodeFunctionData(functionFragment: 'v1GlobalWeight', values?: undefined): string;
  encodeFunctionData(functionFragment: 'v1StakesWeights', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'vaultRewardsPerWeight', values?: undefined): string;
  encodeFunctionData(functionFragment: 'weight', values?: undefined): string;
  encodeFunctionData(functionFragment: 'yieldRewardsPerWeight', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'blacklistUsers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimAllRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimVaultRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimVaultRewardsFromRouter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimYieldRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimYieldRewardsFromRouter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStakesLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalReserves', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getV1StakeId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getV1StakePosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'globalWeight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isBlacklisted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isFlashPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastYieldDistribution', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migrateLockedStakes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'moveFundsFromWallet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolTokenReserve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'receiveVaultRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setV1GlobalWeight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWeight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sync', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstakeMultiple', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradeToAndCall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'users', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'v1GlobalWeight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'v1StakesWeights', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaultRewardsPerWeight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'weight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'yieldRewardsPerWeight', data: BytesLike): Result;

  events: {
    'AdminChanged(address,address)': EventFragment;
    'BeaconUpgraded(address)': EventFragment;
    'LogClaimVaultRewards(address,address,uint256)': EventFragment;
    'LogClaimYieldRewards(address,address,bool,uint256)': EventFragment;
    'LogMigrateLockedStakes(address,uint256)': EventFragment;
    'LogMoveFundsFromWallet(address,address,uint248,uint248,uint128,uint128,uint128,uint128)': EventFragment;
    'LogReceiveVaultRewards(address,uint256)': EventFragment;
    'LogSetVault(address,address,address)': EventFragment;
    'LogStake(address,address,uint256,uint256,uint64)': EventFragment;
    'LogSync(address,uint256,uint64)': EventFragment;
    'LogUnstakeLocked(address,uint256,uint256,bool)': EventFragment;
    'LogUnstakeLockedMultiple(address,uint256,bool)': EventFragment;
    'LogUpdateRewards(address,address,uint256,uint256)': EventFragment;
    'Paused(address)': EventFragment;
    'Unpaused(address)': EventFragment;
    'Upgraded(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogClaimVaultRewards'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogClaimYieldRewards'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogMigrateLockedStakes'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogMoveFundsFromWallet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogReceiveVaultRewards'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogSetVault'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogStake'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogSync'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogUnstakeLocked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogUnstakeLockedMultiple'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogUpdateRewards'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<[string, string], AdminChangedEventObject>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<[string], BeaconUpgradedEventObject>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface LogClaimVaultRewardsEventObject {
  by: string;
  from: string;
  value: BigNumber;
}
export type LogClaimVaultRewardsEvent = TypedEvent<[string, string, BigNumber], LogClaimVaultRewardsEventObject>;

export type LogClaimVaultRewardsEventFilter = TypedEventFilter<LogClaimVaultRewardsEvent>;

export interface LogClaimYieldRewardsEventObject {
  by: string;
  from: string;
  sILV: boolean;
  value: BigNumber;
}
export type LogClaimYieldRewardsEvent = TypedEvent<
  [string, string, boolean, BigNumber],
  LogClaimYieldRewardsEventObject
>;

export type LogClaimYieldRewardsEventFilter = TypedEventFilter<LogClaimYieldRewardsEvent>;

export interface LogMigrateLockedStakesEventObject {
  from: string;
  totalV1WeightAdded: BigNumber;
}
export type LogMigrateLockedStakesEvent = TypedEvent<[string, BigNumber], LogMigrateLockedStakesEventObject>;

export type LogMigrateLockedStakesEventFilter = TypedEventFilter<LogMigrateLockedStakesEvent>;

export interface LogMoveFundsFromWalletEventObject {
  from: string;
  to: string;
  previousTotalWeight: BigNumber;
  newTotalWeight: BigNumber;
  previousYield: BigNumber;
  newYield: BigNumber;
  previousRevDis: BigNumber;
  newRevDis: BigNumber;
}
export type LogMoveFundsFromWalletEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LogMoveFundsFromWalletEventObject
>;

export type LogMoveFundsFromWalletEventFilter = TypedEventFilter<LogMoveFundsFromWalletEvent>;

export interface LogReceiveVaultRewardsEventObject {
  by: string;
  value: BigNumber;
}
export type LogReceiveVaultRewardsEvent = TypedEvent<[string, BigNumber], LogReceiveVaultRewardsEventObject>;

export type LogReceiveVaultRewardsEventFilter = TypedEventFilter<LogReceiveVaultRewardsEvent>;

export interface LogSetVaultEventObject {
  by: string;
  previousVault: string;
  newVault: string;
}
export type LogSetVaultEvent = TypedEvent<[string, string, string], LogSetVaultEventObject>;

export type LogSetVaultEventFilter = TypedEventFilter<LogSetVaultEvent>;

export interface LogStakeEventObject {
  by: string;
  from: string;
  stakeId: BigNumber;
  value: BigNumber;
  lockUntil: BigNumber;
}
export type LogStakeEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber], LogStakeEventObject>;

export type LogStakeEventFilter = TypedEventFilter<LogStakeEvent>;

export interface LogSyncEventObject {
  by: string;
  yieldRewardsPerWeight: BigNumber;
  lastYieldDistribution: BigNumber;
}
export type LogSyncEvent = TypedEvent<[string, BigNumber, BigNumber], LogSyncEventObject>;

export type LogSyncEventFilter = TypedEventFilter<LogSyncEvent>;

export interface LogUnstakeLockedEventObject {
  to: string;
  stakeId: BigNumber;
  value: BigNumber;
  isYield: boolean;
}
export type LogUnstakeLockedEvent = TypedEvent<[string, BigNumber, BigNumber, boolean], LogUnstakeLockedEventObject>;

export type LogUnstakeLockedEventFilter = TypedEventFilter<LogUnstakeLockedEvent>;

export interface LogUnstakeLockedMultipleEventObject {
  to: string;
  totalValue: BigNumber;
  unstakingYield: boolean;
}
export type LogUnstakeLockedMultipleEvent = TypedEvent<
  [string, BigNumber, boolean],
  LogUnstakeLockedMultipleEventObject
>;

export type LogUnstakeLockedMultipleEventFilter = TypedEventFilter<LogUnstakeLockedMultipleEvent>;

export interface LogUpdateRewardsEventObject {
  by: string;
  from: string;
  yieldValue: BigNumber;
  revDisValue: BigNumber;
}
export type LogUpdateRewardsEvent = TypedEvent<[string, string, BigNumber, BigNumber], LogUpdateRewardsEventObject>;

export type LogUpdateRewardsEventFilter = TypedEventFilter<LogUpdateRewardsEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface IlluviumSushiLpPoolV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IlluviumSushiLpPoolV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(_user: string, overrides?: CallOverrides): Promise<[BigNumber] & { balance: BigNumber }>;

    blacklistUsers(
      _users: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claimAllRewards(
      _useSILV: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claimVaultRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    claimVaultRewardsFromRouter(
      _staker: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claimYieldRewards(
      _useSILV: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    claimYieldRewardsFromRouter(
      _staker: string,
      _useSILV: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getStake(_user: string, _stakeId: BigNumberish, overrides?: CallOverrides): Promise<[Stake.DataStructOutput]>;

    getStakesLength(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalReserves(overrides?: CallOverrides): Promise<[BigNumber] & { totalReserves: BigNumber }>;

    getV1StakeId(_user: string, _position: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    getV1StakePosition(
      _user: string,
      _desiredId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { position: BigNumber }>;

    globalWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      ilv_: string,
      silv_: string,
      _poolToken: string,
      _factory: string,
      _initTime: BigNumberish,
      _weight: BigNumberish,
      _corePoolV1: string,
      v1StakeMaxPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isFlashPool(overrides?: CallOverrides): Promise<[boolean]>;

    lastYieldDistribution(overrides?: CallOverrides): Promise<[BigNumber]>;

    migrateLockedStakes(
      _stakeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    moveFundsFromWallet(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    pause(
      _shouldPause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingRewards(
      _staker: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        pendingYield: BigNumber;
        pendingRevDis: BigNumber;
      }
    >;

    poolToken(overrides?: CallOverrides): Promise<[string]>;

    poolTokenReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    receiveVaultRewards(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setV1GlobalWeight(
      _v1GlobalWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setVault(vault_: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setWeight(
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    stake(
      _value: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    sync(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    unstake(
      _stakeId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    unstakeMultiple(
      _stakes: CorePool.UnstakeParameterStruct[],
      _unstakingYield: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    users(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
        pendingYield: BigNumber;
        pendingRevDis: BigNumber;
        totalWeight: BigNumber;
        v1IdsLength: number;
        yieldRewardsPerWeightPaid: BigNumber;
        vaultRewardsPerWeightPaid: BigNumber;
      }
    >;

    v1GlobalWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    v1StakesWeights(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    vaultRewardsPerWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    weight(overrides?: CallOverrides): Promise<[number]>;

    yieldRewardsPerWeight(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  blacklistUsers(
    _users: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claimAllRewards(
    _useSILV: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claimVaultRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  claimVaultRewardsFromRouter(
    _staker: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claimYieldRewards(
    _useSILV: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  claimYieldRewardsFromRouter(
    _staker: string,
    _useSILV: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getStake(_user: string, _stakeId: BigNumberish, overrides?: CallOverrides): Promise<Stake.DataStructOutput>;

  getStakesLength(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getTotalReserves(overrides?: CallOverrides): Promise<BigNumber>;

  getV1StakeId(_user: string, _position: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getV1StakePosition(_user: string, _desiredId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  globalWeight(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    ilv_: string,
    silv_: string,
    _poolToken: string,
    _factory: string,
    _initTime: BigNumberish,
    _weight: BigNumberish,
    _corePoolV1: string,
    v1StakeMaxPeriod_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isFlashPool(overrides?: CallOverrides): Promise<boolean>;

  lastYieldDistribution(overrides?: CallOverrides): Promise<BigNumber>;

  migrateLockedStakes(
    _stakeIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  moveFundsFromWallet(
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  pause(
    _shouldPause: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingRewards(
    _staker: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      pendingYield: BigNumber;
      pendingRevDis: BigNumber;
    }
  >;

  poolToken(overrides?: CallOverrides): Promise<string>;

  poolTokenReserve(overrides?: CallOverrides): Promise<BigNumber>;

  receiveVaultRewards(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setV1GlobalWeight(
    _v1GlobalWeight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setVault(vault_: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setWeight(
    _weight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  stake(
    _value: BigNumberish,
    _lockDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  sync(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  unstake(
    _stakeId: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  unstakeMultiple(
    _stakes: CorePool.UnstakeParameterStruct[],
    _unstakingYield: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  users(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
      pendingYield: BigNumber;
      pendingRevDis: BigNumber;
      totalWeight: BigNumber;
      v1IdsLength: number;
      yieldRewardsPerWeightPaid: BigNumber;
      vaultRewardsPerWeightPaid: BigNumber;
    }
  >;

  v1GlobalWeight(overrides?: CallOverrides): Promise<BigNumber>;

  v1StakesWeights(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  vaultRewardsPerWeight(overrides?: CallOverrides): Promise<BigNumber>;

  weight(overrides?: CallOverrides): Promise<number>;

  yieldRewardsPerWeight(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    blacklistUsers(_users: string[], overrides?: CallOverrides): Promise<void>;

    claimAllRewards(_useSILV: boolean, overrides?: CallOverrides): Promise<void>;

    claimVaultRewards(overrides?: CallOverrides): Promise<void>;

    claimVaultRewardsFromRouter(_staker: string, overrides?: CallOverrides): Promise<void>;

    claimYieldRewards(_useSILV: boolean, overrides?: CallOverrides): Promise<void>;

    claimYieldRewardsFromRouter(_staker: string, _useSILV: boolean, overrides?: CallOverrides): Promise<void>;

    getStake(_user: string, _stakeId: BigNumberish, overrides?: CallOverrides): Promise<Stake.DataStructOutput>;

    getStakesLength(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalReserves(overrides?: CallOverrides): Promise<BigNumber>;

    getV1StakeId(_user: string, _position: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getV1StakePosition(_user: string, _desiredId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    globalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      ilv_: string,
      silv_: string,
      _poolToken: string,
      _factory: string,
      _initTime: BigNumberish,
      _weight: BigNumberish,
      _corePoolV1: string,
      v1StakeMaxPeriod_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isFlashPool(overrides?: CallOverrides): Promise<boolean>;

    lastYieldDistribution(overrides?: CallOverrides): Promise<BigNumber>;

    migrateLockedStakes(_stakeIds: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    moveFundsFromWallet(_to: string, overrides?: CallOverrides): Promise<void>;

    pause(_shouldPause: boolean, overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingRewards(
      _staker: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        pendingYield: BigNumber;
        pendingRevDis: BigNumber;
      }
    >;

    poolToken(overrides?: CallOverrides): Promise<string>;

    poolTokenReserve(overrides?: CallOverrides): Promise<BigNumber>;

    receiveVaultRewards(_value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setV1GlobalWeight(_v1GlobalWeight: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setVault(vault_: string, overrides?: CallOverrides): Promise<void>;

    setWeight(_weight: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stake(_value: BigNumberish, _lockDuration: BigNumberish, overrides?: CallOverrides): Promise<void>;

    sync(overrides?: CallOverrides): Promise<void>;

    unstake(_stakeId: BigNumberish, _value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    unstakeMultiple(
      _stakes: CorePool.UnstakeParameterStruct[],
      _unstakingYield: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    upgradeTo(newImplementation: string, overrides?: CallOverrides): Promise<void>;

    upgradeToAndCall(newImplementation: string, data: BytesLike, overrides?: CallOverrides): Promise<void>;

    users(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
        pendingYield: BigNumber;
        pendingRevDis: BigNumber;
        totalWeight: BigNumber;
        v1IdsLength: number;
        yieldRewardsPerWeightPaid: BigNumber;
        vaultRewardsPerWeightPaid: BigNumber;
      }
    >;

    v1GlobalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    v1StakesWeights(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    vaultRewardsPerWeight(overrides?: CallOverrides): Promise<BigNumber>;

    weight(overrides?: CallOverrides): Promise<number>;

    yieldRewardsPerWeight(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'AdminChanged(address,address)'(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
    AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;

    'BeaconUpgraded(address)'(beacon?: string | null): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    'LogClaimVaultRewards(address,address,uint256)'(
      by?: string | null,
      from?: string | null,
      value?: null,
    ): LogClaimVaultRewardsEventFilter;
    LogClaimVaultRewards(by?: string | null, from?: string | null, value?: null): LogClaimVaultRewardsEventFilter;

    'LogClaimYieldRewards(address,address,bool,uint256)'(
      by?: string | null,
      from?: string | null,
      sILV?: null,
      value?: null,
    ): LogClaimYieldRewardsEventFilter;
    LogClaimYieldRewards(
      by?: string | null,
      from?: string | null,
      sILV?: null,
      value?: null,
    ): LogClaimYieldRewardsEventFilter;

    'LogMigrateLockedStakes(address,uint256)'(
      from?: string | null,
      totalV1WeightAdded?: null,
    ): LogMigrateLockedStakesEventFilter;
    LogMigrateLockedStakes(from?: string | null, totalV1WeightAdded?: null): LogMigrateLockedStakesEventFilter;

    'LogMoveFundsFromWallet(address,address,uint248,uint248,uint128,uint128,uint128,uint128)'(
      from?: string | null,
      to?: string | null,
      previousTotalWeight?: null,
      newTotalWeight?: null,
      previousYield?: null,
      newYield?: null,
      previousRevDis?: null,
      newRevDis?: null,
    ): LogMoveFundsFromWalletEventFilter;
    LogMoveFundsFromWallet(
      from?: string | null,
      to?: string | null,
      previousTotalWeight?: null,
      newTotalWeight?: null,
      previousYield?: null,
      newYield?: null,
      previousRevDis?: null,
      newRevDis?: null,
    ): LogMoveFundsFromWalletEventFilter;

    'LogReceiveVaultRewards(address,uint256)'(by?: string | null, value?: null): LogReceiveVaultRewardsEventFilter;
    LogReceiveVaultRewards(by?: string | null, value?: null): LogReceiveVaultRewardsEventFilter;

    'LogSetVault(address,address,address)'(
      by?: string | null,
      previousVault?: null,
      newVault?: null,
    ): LogSetVaultEventFilter;
    LogSetVault(by?: string | null, previousVault?: null, newVault?: null): LogSetVaultEventFilter;

    'LogStake(address,address,uint256,uint256,uint64)'(
      by?: string | null,
      from?: string | null,
      stakeId?: null,
      value?: null,
      lockUntil?: null,
    ): LogStakeEventFilter;
    LogStake(
      by?: string | null,
      from?: string | null,
      stakeId?: null,
      value?: null,
      lockUntil?: null,
    ): LogStakeEventFilter;

    'LogSync(address,uint256,uint64)'(
      by?: string | null,
      yieldRewardsPerWeight?: null,
      lastYieldDistribution?: null,
    ): LogSyncEventFilter;
    LogSync(by?: string | null, yieldRewardsPerWeight?: null, lastYieldDistribution?: null): LogSyncEventFilter;

    'LogUnstakeLocked(address,uint256,uint256,bool)'(
      to?: string | null,
      stakeId?: null,
      value?: null,
      isYield?: null,
    ): LogUnstakeLockedEventFilter;
    LogUnstakeLocked(to?: string | null, stakeId?: null, value?: null, isYield?: null): LogUnstakeLockedEventFilter;

    'LogUnstakeLockedMultiple(address,uint256,bool)'(
      to?: string | null,
      totalValue?: null,
      unstakingYield?: null,
    ): LogUnstakeLockedMultipleEventFilter;
    LogUnstakeLockedMultiple(
      to?: string | null,
      totalValue?: null,
      unstakingYield?: null,
    ): LogUnstakeLockedMultipleEventFilter;

    'LogUpdateRewards(address,address,uint256,uint256)'(
      by?: string | null,
      from?: string | null,
      yieldValue?: null,
      revDisValue?: null,
    ): LogUpdateRewardsEventFilter;
    LogUpdateRewards(
      by?: string | null,
      from?: string | null,
      yieldValue?: null,
      revDisValue?: null,
    ): LogUpdateRewardsEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'Upgraded(address)'(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    blacklistUsers(_users: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    claimAllRewards(_useSILV: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    claimVaultRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    claimVaultRewardsFromRouter(
      _staker: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    claimYieldRewards(
      _useSILV: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    claimYieldRewardsFromRouter(
      _staker: string,
      _useSILV: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getStake(_user: string, _stakeId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getStakesLength(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalReserves(overrides?: CallOverrides): Promise<BigNumber>;

    getV1StakeId(_user: string, _position: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getV1StakePosition(_user: string, _desiredId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    globalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      ilv_: string,
      silv_: string,
      _poolToken: string,
      _factory: string,
      _initTime: BigNumberish,
      _weight: BigNumberish,
      _corePoolV1: string,
      v1StakeMaxPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isFlashPool(overrides?: CallOverrides): Promise<BigNumber>;

    lastYieldDistribution(overrides?: CallOverrides): Promise<BigNumber>;

    migrateLockedStakes(
      _stakeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    moveFundsFromWallet(_to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    pause(_shouldPause: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(_staker: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolToken(overrides?: CallOverrides): Promise<BigNumber>;

    poolTokenReserve(overrides?: CallOverrides): Promise<BigNumber>;

    receiveVaultRewards(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setV1GlobalWeight(
      _v1GlobalWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setVault(vault_: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setWeight(_weight: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    stake(
      _value: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    sync(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    unstake(
      _stakeId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    unstakeMultiple(
      _stakes: CorePool.UnstakeParameterStruct[],
      _unstakingYield: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    users(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    v1GlobalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    v1StakesWeights(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    vaultRewardsPerWeight(overrides?: CallOverrides): Promise<BigNumber>;

    weight(overrides?: CallOverrides): Promise<BigNumber>;

    yieldRewardsPerWeight(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(_user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blacklistUsers(
      _users: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claimAllRewards(
      _useSILV: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claimVaultRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    claimVaultRewardsFromRouter(
      _staker: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claimYieldRewards(
      _useSILV: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    claimYieldRewardsFromRouter(
      _staker: string,
      _useSILV: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getStake(_user: string, _stakeId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakesLength(_user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getV1StakeId(_user: string, _position: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getV1StakePosition(
      _user: string,
      _desiredId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    globalWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      ilv_: string,
      silv_: string,
      _poolToken: string,
      _factory: string,
      _initTime: BigNumberish,
      _weight: BigNumberish,
      _corePoolV1: string,
      v1StakeMaxPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isFlashPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastYieldDistribution(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateLockedStakes(
      _stakeIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    moveFundsFromWallet(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    pause(
      _shouldPause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRewards(_staker: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolTokenReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiveVaultRewards(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setV1GlobalWeight(
      _v1GlobalWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setVault(
      vault_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setWeight(
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    stake(
      _value: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    sync(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    unstake(
      _stakeId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    unstakeMultiple(
      _stakes: CorePool.UnstakeParameterStruct[],
      _unstakingYield: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    users(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    v1GlobalWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    v1StakesWeights(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultRewardsPerWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yieldRewardsPerWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
