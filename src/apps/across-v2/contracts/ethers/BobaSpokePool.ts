/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace SpokePoolInterface {
  export type RelayerRefundLeafStruct = {
    amountToReturn: BigNumberish;
    chainId: BigNumberish;
    refundAmounts: BigNumberish[];
    leafId: BigNumberish;
    l2TokenAddress: string;
    refundAddresses: string[];
  };

  export type RelayerRefundLeafStructOutput = [BigNumber, BigNumber, BigNumber[], number, string, string[]] & {
    amountToReturn: BigNumber;
    chainId: BigNumber;
    refundAmounts: BigNumber[];
    leafId: number;
    l2TokenAddress: string;
    refundAddresses: string[];
  };
}

export interface BobaSpokePoolInterface extends utils.Interface {
  functions: {
    'chainId()': FunctionFragment;
    'crossDomainAdmin()': FunctionFragment;
    'deposit(address,address,uint256,uint256,uint64,uint32)': FunctionFragment;
    'depositQuoteTimeBuffer()': FunctionFragment;
    'emergencyDeleteRootBundle(uint256)': FunctionFragment;
    'enabledDepositRoutes(address,uint256)': FunctionFragment;
    'executeRelayerRefundLeaf(uint32,(uint256,uint256,uint256[],uint32,address,address[]),bytes32[])': FunctionFragment;
    'executeSlowRelayLeaf(address,address,address,uint256,uint256,uint64,uint64,uint32,uint32,bytes32[])': FunctionFragment;
    'fillRelay(address,address,address,uint256,uint256,uint256,uint256,uint64,uint64,uint32)': FunctionFragment;
    'fillRelayWithUpdatedFee(address,address,address,uint256,uint256,uint256,uint256,uint64,uint64,uint64,uint32,bytes)': FunctionFragment;
    'getCurrentTime()': FunctionFragment;
    'hubPool()': FunctionFragment;
    'l1Gas()': FunctionFragment;
    'l2Eth()': FunctionFragment;
    'messenger()': FunctionFragment;
    'multicall(bytes[])': FunctionFragment;
    'numberOfDeposits()': FunctionFragment;
    'relayFills(bytes32)': FunctionFragment;
    'relayRootBundle(bytes32,bytes32)': FunctionFragment;
    'rootBundles(uint256)': FunctionFragment;
    'setCrossDomainAdmin(address)': FunctionFragment;
    'setCurrentTime(uint256)': FunctionFragment;
    'setDepositQuoteTimeBuffer(uint32)': FunctionFragment;
    'setEnableRoute(address,uint256,bool)': FunctionFragment;
    'setHubPool(address)': FunctionFragment;
    'setL1GasLimit(uint32)': FunctionFragment;
    'setTokenBridge(address,address)': FunctionFragment;
    'speedUpDeposit(address,uint64,uint32,bytes)': FunctionFragment;
    'timerAddress()': FunctionFragment;
    'tokenBridges(address)': FunctionFragment;
    'wrappedNativeToken()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'chainId'
      | 'crossDomainAdmin'
      | 'deposit'
      | 'depositQuoteTimeBuffer'
      | 'emergencyDeleteRootBundle'
      | 'enabledDepositRoutes'
      | 'executeRelayerRefundLeaf'
      | 'executeSlowRelayLeaf'
      | 'fillRelay'
      | 'fillRelayWithUpdatedFee'
      | 'getCurrentTime'
      | 'hubPool'
      | 'l1Gas'
      | 'l2Eth'
      | 'messenger'
      | 'multicall'
      | 'numberOfDeposits'
      | 'relayFills'
      | 'relayRootBundle'
      | 'rootBundles'
      | 'setCrossDomainAdmin'
      | 'setCurrentTime'
      | 'setDepositQuoteTimeBuffer'
      | 'setEnableRoute'
      | 'setHubPool'
      | 'setL1GasLimit'
      | 'setTokenBridge'
      | 'speedUpDeposit'
      | 'timerAddress'
      | 'tokenBridges'
      | 'wrappedNativeToken',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'chainId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'crossDomainAdmin', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'depositQuoteTimeBuffer', values?: undefined): string;
  encodeFunctionData(functionFragment: 'emergencyDeleteRootBundle', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'enabledDepositRoutes', values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'executeRelayerRefundLeaf',
    values: [BigNumberish, SpokePoolInterface.RelayerRefundLeafStruct, BytesLike[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'executeSlowRelayLeaf',
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike[],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'fillRelay',
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'fillRelayWithUpdatedFee',
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'getCurrentTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'hubPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'l1Gas', values?: undefined): string;
  encodeFunctionData(functionFragment: 'l2Eth', values?: undefined): string;
  encodeFunctionData(functionFragment: 'messenger', values?: undefined): string;
  encodeFunctionData(functionFragment: 'multicall', values: [BytesLike[]]): string;
  encodeFunctionData(functionFragment: 'numberOfDeposits', values?: undefined): string;
  encodeFunctionData(functionFragment: 'relayFills', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'relayRootBundle', values: [BytesLike, BytesLike]): string;
  encodeFunctionData(functionFragment: 'rootBundles', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setCrossDomainAdmin', values: [string]): string;
  encodeFunctionData(functionFragment: 'setCurrentTime', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setDepositQuoteTimeBuffer', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setEnableRoute', values: [string, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'setHubPool', values: [string]): string;
  encodeFunctionData(functionFragment: 'setL1GasLimit', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setTokenBridge', values: [string, string]): string;
  encodeFunctionData(
    functionFragment: 'speedUpDeposit',
    values: [string, BigNumberish, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'timerAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenBridges', values: [string]): string;
  encodeFunctionData(functionFragment: 'wrappedNativeToken', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'chainId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'crossDomainAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositQuoteTimeBuffer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyDeleteRootBundle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enabledDepositRoutes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'executeRelayerRefundLeaf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'executeSlowRelayLeaf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fillRelay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fillRelayWithUpdatedFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCurrentTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hubPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'l1Gas', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'l2Eth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'messenger', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'multicall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numberOfDeposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'relayFills', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'relayRootBundle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rootBundles', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCrossDomainAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCurrentTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDepositQuoteTimeBuffer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEnableRoute', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setHubPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setL1GasLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTokenBridge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'speedUpDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timerAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenBridges', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'wrappedNativeToken', data: BytesLike): Result;

  events: {
    'EmergencyDeleteRootBundle(uint256)': EventFragment;
    'EnabledDepositRoute(address,uint256,bool)': EventFragment;
    'ExecutedRelayerRefundRoot(uint256,uint256,uint256[],uint32,uint32,address,address[],address)': EventFragment;
    'FilledRelay(uint256,uint256,uint256,uint256,uint256,uint256,uint64,uint64,uint64,uint32,address,address,address,address,bool)': EventFragment;
    'FundsDeposited(uint256,uint256,uint256,uint64,uint32,uint32,address,address,address)': EventFragment;
    'OptimismTokensBridged(address,address,uint256,uint256)': EventFragment;
    'RelayedRootBundle(uint32,bytes32,bytes32)': EventFragment;
    'RequestedSpeedUpDeposit(uint64,uint32,address,bytes)': EventFragment;
    'SetDepositQuoteTimeBuffer(uint32)': EventFragment;
    'SetHubPool(address)': EventFragment;
    'SetL1Gas(uint32)': EventFragment;
    'SetL2TokenBridge(address,address)': EventFragment;
    'SetXDomainAdmin(address)': EventFragment;
    'TokensBridged(uint256,uint256,uint32,address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'EmergencyDeleteRootBundle'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EnabledDepositRoute'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExecutedRelayerRefundRoot'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FilledRelay'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FundsDeposited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OptimismTokensBridged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RelayedRootBundle'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RequestedSpeedUpDeposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetDepositQuoteTimeBuffer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetHubPool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetL1Gas'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetL2TokenBridge'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetXDomainAdmin'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokensBridged'): EventFragment;
}

export interface EmergencyDeleteRootBundleEventObject {
  rootBundleId: BigNumber;
}
export type EmergencyDeleteRootBundleEvent = TypedEvent<[BigNumber], EmergencyDeleteRootBundleEventObject>;

export type EmergencyDeleteRootBundleEventFilter = TypedEventFilter<EmergencyDeleteRootBundleEvent>;

export interface EnabledDepositRouteEventObject {
  originToken: string;
  destinationChainId: BigNumber;
  enabled: boolean;
}
export type EnabledDepositRouteEvent = TypedEvent<[string, BigNumber, boolean], EnabledDepositRouteEventObject>;

export type EnabledDepositRouteEventFilter = TypedEventFilter<EnabledDepositRouteEvent>;

export interface ExecutedRelayerRefundRootEventObject {
  amountToReturn: BigNumber;
  chainId: BigNumber;
  refundAmounts: BigNumber[];
  rootBundleId: number;
  leafId: number;
  l2TokenAddress: string;
  refundAddresses: string[];
  caller: string;
}
export type ExecutedRelayerRefundRootEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber[], number, number, string, string[], string],
  ExecutedRelayerRefundRootEventObject
>;

export type ExecutedRelayerRefundRootEventFilter = TypedEventFilter<ExecutedRelayerRefundRootEvent>;

export interface FilledRelayEventObject {
  amount: BigNumber;
  totalFilledAmount: BigNumber;
  fillAmount: BigNumber;
  repaymentChainId: BigNumber;
  originChainId: BigNumber;
  destinationChainId: BigNumber;
  relayerFeePct: BigNumber;
  appliedRelayerFeePct: BigNumber;
  realizedLpFeePct: BigNumber;
  depositId: number;
  destinationToken: string;
  relayer: string;
  depositor: string;
  recipient: string;
  isSlowRelay: boolean;
}
export type FilledRelayEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
    string,
    string,
    string,
    boolean,
  ],
  FilledRelayEventObject
>;

export type FilledRelayEventFilter = TypedEventFilter<FilledRelayEvent>;

export interface FundsDepositedEventObject {
  amount: BigNumber;
  originChainId: BigNumber;
  destinationChainId: BigNumber;
  relayerFeePct: BigNumber;
  depositId: number;
  quoteTimestamp: number;
  originToken: string;
  recipient: string;
  depositor: string;
}
export type FundsDepositedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, number, number, string, string, string],
  FundsDepositedEventObject
>;

export type FundsDepositedEventFilter = TypedEventFilter<FundsDepositedEvent>;

export interface OptimismTokensBridgedEventObject {
  l2Token: string;
  target: string;
  numberOfTokensBridged: BigNumber;
  l1Gas: BigNumber;
}
export type OptimismTokensBridgedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  OptimismTokensBridgedEventObject
>;

export type OptimismTokensBridgedEventFilter = TypedEventFilter<OptimismTokensBridgedEvent>;

export interface RelayedRootBundleEventObject {
  rootBundleId: number;
  relayerRefundRoot: string;
  slowRelayRoot: string;
}
export type RelayedRootBundleEvent = TypedEvent<[number, string, string], RelayedRootBundleEventObject>;

export type RelayedRootBundleEventFilter = TypedEventFilter<RelayedRootBundleEvent>;

export interface RequestedSpeedUpDepositEventObject {
  newRelayerFeePct: BigNumber;
  depositId: number;
  depositor: string;
  depositorSignature: string;
}
export type RequestedSpeedUpDepositEvent = TypedEvent<
  [BigNumber, number, string, string],
  RequestedSpeedUpDepositEventObject
>;

export type RequestedSpeedUpDepositEventFilter = TypedEventFilter<RequestedSpeedUpDepositEvent>;

export interface SetDepositQuoteTimeBufferEventObject {
  newBuffer: number;
}
export type SetDepositQuoteTimeBufferEvent = TypedEvent<[number], SetDepositQuoteTimeBufferEventObject>;

export type SetDepositQuoteTimeBufferEventFilter = TypedEventFilter<SetDepositQuoteTimeBufferEvent>;

export interface SetHubPoolEventObject {
  newHubPool: string;
}
export type SetHubPoolEvent = TypedEvent<[string], SetHubPoolEventObject>;

export type SetHubPoolEventFilter = TypedEventFilter<SetHubPoolEvent>;

export interface SetL1GasEventObject {
  newL1Gas: number;
}
export type SetL1GasEvent = TypedEvent<[number], SetL1GasEventObject>;

export type SetL1GasEventFilter = TypedEventFilter<SetL1GasEvent>;

export interface SetL2TokenBridgeEventObject {
  l2Token: string;
  tokenBridge: string;
}
export type SetL2TokenBridgeEvent = TypedEvent<[string, string], SetL2TokenBridgeEventObject>;

export type SetL2TokenBridgeEventFilter = TypedEventFilter<SetL2TokenBridgeEvent>;

export interface SetXDomainAdminEventObject {
  newAdmin: string;
}
export type SetXDomainAdminEvent = TypedEvent<[string], SetXDomainAdminEventObject>;

export type SetXDomainAdminEventFilter = TypedEventFilter<SetXDomainAdminEvent>;

export interface TokensBridgedEventObject {
  amountToReturn: BigNumber;
  chainId: BigNumber;
  leafId: number;
  l2TokenAddress: string;
  caller: string;
}
export type TokensBridgedEvent = TypedEvent<[BigNumber, BigNumber, number, string, string], TokensBridgedEventObject>;

export type TokensBridgedEventFilter = TypedEventFilter<TokensBridgedEvent>;

export interface BobaSpokePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BobaSpokePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    chainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    crossDomainAdmin(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      recipient: string,
      originToken: string,
      amount: BigNumberish,
      destinationChainId: BigNumberish,
      relayerFeePct: BigNumberish,
      quoteTimestamp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositQuoteTimeBuffer(overrides?: CallOverrides): Promise<[number]>;

    emergencyDeleteRootBundle(
      rootBundleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    enabledDepositRoutes(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    executeRelayerRefundLeaf(
      rootBundleId: BigNumberish,
      relayerRefundLeaf: SpokePoolInterface.RelayerRefundLeafStruct,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    executeSlowRelayLeaf(
      depositor: string,
      recipient: string,
      destinationToken: string,
      totalRelayAmount: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      rootBundleId: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    fillRelay(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    fillRelayWithUpdatedFee(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      newRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      depositorSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    hubPool(overrides?: CallOverrides): Promise<[string]>;

    l1Gas(overrides?: CallOverrides): Promise<[number]>;

    l2Eth(overrides?: CallOverrides): Promise<[string]>;

    messenger(overrides?: CallOverrides): Promise<[string]>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    numberOfDeposits(overrides?: CallOverrides): Promise<[number]>;

    relayFills(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    relayRootBundle(
      relayerRefundRoot: BytesLike,
      slowRelayRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    rootBundles(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string, string] & { slowRelayRoot: string; relayerRefundRoot: string }>;

    setCrossDomainAdmin(
      newCrossDomainAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDepositQuoteTimeBuffer(
      newDepositQuoteTimeBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setEnableRoute(
      originToken: string,
      destinationChainId: BigNumberish,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setHubPool(
      newHubPool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setL1GasLimit(
      newl1Gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTokenBridge(
      l2Token: string,
      tokenBridge: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    speedUpDeposit(
      depositor: string,
      newRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      depositorSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<[string]>;

    tokenBridges(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    wrappedNativeToken(overrides?: CallOverrides): Promise<[string]>;
  };

  chainId(overrides?: CallOverrides): Promise<BigNumber>;

  crossDomainAdmin(overrides?: CallOverrides): Promise<string>;

  deposit(
    recipient: string,
    originToken: string,
    amount: BigNumberish,
    destinationChainId: BigNumberish,
    relayerFeePct: BigNumberish,
    quoteTimestamp: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositQuoteTimeBuffer(overrides?: CallOverrides): Promise<number>;

  emergencyDeleteRootBundle(
    rootBundleId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  enabledDepositRoutes(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  executeRelayerRefundLeaf(
    rootBundleId: BigNumberish,
    relayerRefundLeaf: SpokePoolInterface.RelayerRefundLeafStruct,
    proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  executeSlowRelayLeaf(
    depositor: string,
    recipient: string,
    destinationToken: string,
    totalRelayAmount: BigNumberish,
    originChainId: BigNumberish,
    realizedLpFeePct: BigNumberish,
    relayerFeePct: BigNumberish,
    depositId: BigNumberish,
    rootBundleId: BigNumberish,
    proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  fillRelay(
    depositor: string,
    recipient: string,
    destinationToken: string,
    amount: BigNumberish,
    maxTokensToSend: BigNumberish,
    repaymentChainId: BigNumberish,
    originChainId: BigNumberish,
    realizedLpFeePct: BigNumberish,
    relayerFeePct: BigNumberish,
    depositId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  fillRelayWithUpdatedFee(
    depositor: string,
    recipient: string,
    destinationToken: string,
    amount: BigNumberish,
    maxTokensToSend: BigNumberish,
    repaymentChainId: BigNumberish,
    originChainId: BigNumberish,
    realizedLpFeePct: BigNumberish,
    relayerFeePct: BigNumberish,
    newRelayerFeePct: BigNumberish,
    depositId: BigNumberish,
    depositorSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  hubPool(overrides?: CallOverrides): Promise<string>;

  l1Gas(overrides?: CallOverrides): Promise<number>;

  l2Eth(overrides?: CallOverrides): Promise<string>;

  messenger(overrides?: CallOverrides): Promise<string>;

  multicall(
    data: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  numberOfDeposits(overrides?: CallOverrides): Promise<number>;

  relayFills(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  relayRootBundle(
    relayerRefundRoot: BytesLike,
    slowRelayRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  rootBundles(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[string, string] & { slowRelayRoot: string; relayerRefundRoot: string }>;

  setCrossDomainAdmin(
    newCrossDomainAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setCurrentTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setDepositQuoteTimeBuffer(
    newDepositQuoteTimeBuffer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setEnableRoute(
    originToken: string,
    destinationChainId: BigNumberish,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setHubPool(
    newHubPool: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setL1GasLimit(
    newl1Gas: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setTokenBridge(
    l2Token: string,
    tokenBridge: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  speedUpDeposit(
    depositor: string,
    newRelayerFeePct: BigNumberish,
    depositId: BigNumberish,
    depositorSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  timerAddress(overrides?: CallOverrides): Promise<string>;

  tokenBridges(arg0: string, overrides?: CallOverrides): Promise<string>;

  wrappedNativeToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    crossDomainAdmin(overrides?: CallOverrides): Promise<string>;

    deposit(
      recipient: string,
      originToken: string,
      amount: BigNumberish,
      destinationChainId: BigNumberish,
      relayerFeePct: BigNumberish,
      quoteTimestamp: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositQuoteTimeBuffer(overrides?: CallOverrides): Promise<number>;

    emergencyDeleteRootBundle(rootBundleId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    enabledDepositRoutes(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    executeRelayerRefundLeaf(
      rootBundleId: BigNumberish,
      relayerRefundLeaf: SpokePoolInterface.RelayerRefundLeafStruct,
      proof: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<void>;

    executeSlowRelayLeaf(
      depositor: string,
      recipient: string,
      destinationToken: string,
      totalRelayAmount: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      rootBundleId: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides,
    ): Promise<void>;

    fillRelay(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    fillRelayWithUpdatedFee(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      newRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      depositorSignature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    hubPool(overrides?: CallOverrides): Promise<string>;

    l1Gas(overrides?: CallOverrides): Promise<number>;

    l2Eth(overrides?: CallOverrides): Promise<string>;

    messenger(overrides?: CallOverrides): Promise<string>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    numberOfDeposits(overrides?: CallOverrides): Promise<number>;

    relayFills(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    relayRootBundle(relayerRefundRoot: BytesLike, slowRelayRoot: BytesLike, overrides?: CallOverrides): Promise<void>;

    rootBundles(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string, string] & { slowRelayRoot: string; relayerRefundRoot: string }>;

    setCrossDomainAdmin(newCrossDomainAdmin: string, overrides?: CallOverrides): Promise<void>;

    setCurrentTime(time: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setDepositQuoteTimeBuffer(newDepositQuoteTimeBuffer: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setEnableRoute(
      originToken: string,
      destinationChainId: BigNumberish,
      enabled: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    setHubPool(newHubPool: string, overrides?: CallOverrides): Promise<void>;

    setL1GasLimit(newl1Gas: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setTokenBridge(l2Token: string, tokenBridge: string, overrides?: CallOverrides): Promise<void>;

    speedUpDeposit(
      depositor: string,
      newRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      depositorSignature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    timerAddress(overrides?: CallOverrides): Promise<string>;

    tokenBridges(arg0: string, overrides?: CallOverrides): Promise<string>;

    wrappedNativeToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'EmergencyDeleteRootBundle(uint256)'(rootBundleId?: BigNumberish | null): EmergencyDeleteRootBundleEventFilter;
    EmergencyDeleteRootBundle(rootBundleId?: BigNumberish | null): EmergencyDeleteRootBundleEventFilter;

    'EnabledDepositRoute(address,uint256,bool)'(
      originToken?: string | null,
      destinationChainId?: BigNumberish | null,
      enabled?: null,
    ): EnabledDepositRouteEventFilter;
    EnabledDepositRoute(
      originToken?: string | null,
      destinationChainId?: BigNumberish | null,
      enabled?: null,
    ): EnabledDepositRouteEventFilter;

    'ExecutedRelayerRefundRoot(uint256,uint256,uint256[],uint32,uint32,address,address[],address)'(
      amountToReturn?: null,
      chainId?: BigNumberish | null,
      refundAmounts?: null,
      rootBundleId?: BigNumberish | null,
      leafId?: BigNumberish | null,
      l2TokenAddress?: null,
      refundAddresses?: null,
      caller?: null,
    ): ExecutedRelayerRefundRootEventFilter;
    ExecutedRelayerRefundRoot(
      amountToReturn?: null,
      chainId?: BigNumberish | null,
      refundAmounts?: null,
      rootBundleId?: BigNumberish | null,
      leafId?: BigNumberish | null,
      l2TokenAddress?: null,
      refundAddresses?: null,
      caller?: null,
    ): ExecutedRelayerRefundRootEventFilter;

    'FilledRelay(uint256,uint256,uint256,uint256,uint256,uint256,uint64,uint64,uint64,uint32,address,address,address,address,bool)'(
      amount?: null,
      totalFilledAmount?: null,
      fillAmount?: null,
      repaymentChainId?: null,
      originChainId?: null,
      destinationChainId?: null,
      relayerFeePct?: null,
      appliedRelayerFeePct?: null,
      realizedLpFeePct?: null,
      depositId?: null,
      destinationToken?: null,
      relayer?: string | null,
      depositor?: string | null,
      recipient?: null,
      isSlowRelay?: null,
    ): FilledRelayEventFilter;
    FilledRelay(
      amount?: null,
      totalFilledAmount?: null,
      fillAmount?: null,
      repaymentChainId?: null,
      originChainId?: null,
      destinationChainId?: null,
      relayerFeePct?: null,
      appliedRelayerFeePct?: null,
      realizedLpFeePct?: null,
      depositId?: null,
      destinationToken?: null,
      relayer?: string | null,
      depositor?: string | null,
      recipient?: null,
      isSlowRelay?: null,
    ): FilledRelayEventFilter;

    'FundsDeposited(uint256,uint256,uint256,uint64,uint32,uint32,address,address,address)'(
      amount?: null,
      originChainId?: null,
      destinationChainId?: null,
      relayerFeePct?: null,
      depositId?: BigNumberish | null,
      quoteTimestamp?: null,
      originToken?: string | null,
      recipient?: null,
      depositor?: string | null,
    ): FundsDepositedEventFilter;
    FundsDeposited(
      amount?: null,
      originChainId?: null,
      destinationChainId?: null,
      relayerFeePct?: null,
      depositId?: BigNumberish | null,
      quoteTimestamp?: null,
      originToken?: string | null,
      recipient?: null,
      depositor?: string | null,
    ): FundsDepositedEventFilter;

    'OptimismTokensBridged(address,address,uint256,uint256)'(
      l2Token?: string | null,
      target?: null,
      numberOfTokensBridged?: null,
      l1Gas?: null,
    ): OptimismTokensBridgedEventFilter;
    OptimismTokensBridged(
      l2Token?: string | null,
      target?: null,
      numberOfTokensBridged?: null,
      l1Gas?: null,
    ): OptimismTokensBridgedEventFilter;

    'RelayedRootBundle(uint32,bytes32,bytes32)'(
      rootBundleId?: BigNumberish | null,
      relayerRefundRoot?: BytesLike | null,
      slowRelayRoot?: BytesLike | null,
    ): RelayedRootBundleEventFilter;
    RelayedRootBundle(
      rootBundleId?: BigNumberish | null,
      relayerRefundRoot?: BytesLike | null,
      slowRelayRoot?: BytesLike | null,
    ): RelayedRootBundleEventFilter;

    'RequestedSpeedUpDeposit(uint64,uint32,address,bytes)'(
      newRelayerFeePct?: null,
      depositId?: BigNumberish | null,
      depositor?: string | null,
      depositorSignature?: null,
    ): RequestedSpeedUpDepositEventFilter;
    RequestedSpeedUpDeposit(
      newRelayerFeePct?: null,
      depositId?: BigNumberish | null,
      depositor?: string | null,
      depositorSignature?: null,
    ): RequestedSpeedUpDepositEventFilter;

    'SetDepositQuoteTimeBuffer(uint32)'(newBuffer?: null): SetDepositQuoteTimeBufferEventFilter;
    SetDepositQuoteTimeBuffer(newBuffer?: null): SetDepositQuoteTimeBufferEventFilter;

    'SetHubPool(address)'(newHubPool?: string | null): SetHubPoolEventFilter;
    SetHubPool(newHubPool?: string | null): SetHubPoolEventFilter;

    'SetL1Gas(uint32)'(newL1Gas?: BigNumberish | null): SetL1GasEventFilter;
    SetL1Gas(newL1Gas?: BigNumberish | null): SetL1GasEventFilter;

    'SetL2TokenBridge(address,address)'(
      l2Token?: string | null,
      tokenBridge?: string | null,
    ): SetL2TokenBridgeEventFilter;
    SetL2TokenBridge(l2Token?: string | null, tokenBridge?: string | null): SetL2TokenBridgeEventFilter;

    'SetXDomainAdmin(address)'(newAdmin?: string | null): SetXDomainAdminEventFilter;
    SetXDomainAdmin(newAdmin?: string | null): SetXDomainAdminEventFilter;

    'TokensBridged(uint256,uint256,uint32,address,address)'(
      amountToReturn?: null,
      chainId?: BigNumberish | null,
      leafId?: BigNumberish | null,
      l2TokenAddress?: string | null,
      caller?: null,
    ): TokensBridgedEventFilter;
    TokensBridged(
      amountToReturn?: null,
      chainId?: BigNumberish | null,
      leafId?: BigNumberish | null,
      l2TokenAddress?: string | null,
      caller?: null,
    ): TokensBridgedEventFilter;
  };

  estimateGas: {
    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    crossDomainAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      recipient: string,
      originToken: string,
      amount: BigNumberish,
      destinationChainId: BigNumberish,
      relayerFeePct: BigNumberish,
      quoteTimestamp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    depositQuoteTimeBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyDeleteRootBundle(
      rootBundleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    enabledDepositRoutes(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    executeRelayerRefundLeaf(
      rootBundleId: BigNumberish,
      relayerRefundLeaf: SpokePoolInterface.RelayerRefundLeafStruct,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    executeSlowRelayLeaf(
      depositor: string,
      recipient: string,
      destinationToken: string,
      totalRelayAmount: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      rootBundleId: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    fillRelay(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    fillRelayWithUpdatedFee(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      newRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      depositorSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    hubPool(overrides?: CallOverrides): Promise<BigNumber>;

    l1Gas(overrides?: CallOverrides): Promise<BigNumber>;

    l2Eth(overrides?: CallOverrides): Promise<BigNumber>;

    messenger(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    numberOfDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    relayFills(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    relayRootBundle(
      relayerRefundRoot: BytesLike,
      slowRelayRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    rootBundles(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setCrossDomainAdmin(
      newCrossDomainAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setCurrentTime(time: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setDepositQuoteTimeBuffer(
      newDepositQuoteTimeBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setEnableRoute(
      originToken: string,
      destinationChainId: BigNumberish,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setHubPool(newHubPool: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setL1GasLimit(
      newl1Gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setTokenBridge(
      l2Token: string,
      tokenBridge: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    speedUpDeposit(
      depositor: string,
      newRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      depositorSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    timerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBridges(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    wrappedNativeToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crossDomainAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      recipient: string,
      originToken: string,
      amount: BigNumberish,
      destinationChainId: BigNumberish,
      relayerFeePct: BigNumberish,
      quoteTimestamp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositQuoteTimeBuffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyDeleteRootBundle(
      rootBundleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    enabledDepositRoutes(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeRelayerRefundLeaf(
      rootBundleId: BigNumberish,
      relayerRefundLeaf: SpokePoolInterface.RelayerRefundLeafStruct,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    executeSlowRelayLeaf(
      depositor: string,
      recipient: string,
      destinationToken: string,
      totalRelayAmount: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      rootBundleId: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    fillRelay(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    fillRelayWithUpdatedFee(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      newRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      depositorSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hubPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l1Gas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2Eth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    numberOfDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relayFills(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relayRootBundle(
      relayerRefundRoot: BytesLike,
      slowRelayRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    rootBundles(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCrossDomainAdmin(
      newCrossDomainAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setDepositQuoteTimeBuffer(
      newDepositQuoteTimeBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setEnableRoute(
      originToken: string,
      destinationChainId: BigNumberish,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setHubPool(
      newHubPool: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setL1GasLimit(
      newl1Gas: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setTokenBridge(
      l2Token: string,
      tokenBridge: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    speedUpDeposit(
      depositor: string,
      newRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      depositorSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenBridges(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wrappedNativeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
