/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface WMasterChefInterface extends utils.Interface {
  functions: {
    'balanceOf(address,uint256)': FunctionFragment;
    'balanceOfBatch(address[],uint256[])': FunctionFragment;
    'burn(uint256,uint256)': FunctionFragment;
    'chef()': FunctionFragment;
    'collSizeToLpBalance(uint256,uint256)': FunctionFragment;
    'decodeId(uint256)': FunctionFragment;
    'dedicatedWorkers(address)': FunctionFragment;
    'dexHelper()': FunctionFragment;
    'encodeId(uint256)': FunctionFragment;
    'exists(uint256)': FunctionFragment;
    'getDexHelper()': FunctionFragment;
    'getTokenByPid(uint256)': FunctionFragment;
    'getUnderlyingToken(uint256)': FunctionFragment;
    'harvestReward(uint256)': FunctionFragment;
    'initialize(address,address)': FunctionFragment;
    'isApprovedForAll(address,address)': FunctionFragment;
    'lpBalanceToCollSize(uint256,uint256)': FunctionFragment;
    'mint(uint256,uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardToken()': FunctionFragment;
    'safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)': FunctionFragment;
    'safeTransferFrom(address,address,uint256,uint256,bytes)': FunctionFragment;
    'setApprovalForAll(address,bool)': FunctionFragment;
    'setDedicatedWorkers(address[],bool)': FunctionFragment;
    'setDexHelper(address)': FunctionFragment;
    'stake(uint256,uint256)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'totalSupply(uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'uri(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'balanceOf'
      | 'balanceOfBatch'
      | 'burn'
      | 'chef'
      | 'collSizeToLpBalance'
      | 'decodeId'
      | 'dedicatedWorkers'
      | 'dexHelper'
      | 'encodeId'
      | 'exists'
      | 'getDexHelper'
      | 'getTokenByPid'
      | 'getUnderlyingToken'
      | 'harvestReward'
      | 'initialize'
      | 'isApprovedForAll'
      | 'lpBalanceToCollSize'
      | 'mint'
      | 'owner'
      | 'renounceOwnership'
      | 'rewardToken'
      | 'safeBatchTransferFrom'
      | 'safeTransferFrom'
      | 'setApprovalForAll'
      | 'setDedicatedWorkers'
      | 'setDexHelper'
      | 'stake'
      | 'supportsInterface'
      | 'totalSupply'
      | 'transferOwnership'
      | 'uri',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOfBatch',
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'burn',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'chef', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'collSizeToLpBalance',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'decodeId', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'dedicatedWorkers', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'dexHelper', values?: undefined): string;
  encodeFunctionData(functionFragment: 'encodeId', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'exists', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getDexHelper', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getTokenByPid', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getUnderlyingToken', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'harvestReward', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'initialize', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'lpBalanceToCollSize',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'safeBatchTransferFrom',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDedicatedWorkers',
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setDexHelper', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'stake',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'totalSupply', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'uri', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfBatch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'chef', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collSizeToLpBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decodeId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dedicatedWorkers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dexHelper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'encodeId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exists', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDexHelper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTokenByPid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUnderlyingToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvestReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lpBalanceToCollSize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeBatchTransferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDedicatedWorkers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDexHelper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'uri', data: BytesLike): Result;

  events: {
    'ApprovalForAll(address,address,bool)': EventFragment;
    'Burn(uint256,uint256,uint256)': EventFragment;
    'Harvest(uint256,uint256)': EventFragment;
    'Mint(uint256,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'SetWorkers(address,bool)': EventFragment;
    'Stake(uint256,uint256)': EventFragment;
    'TransferBatch(address,address,address,uint256[],uint256[])': EventFragment;
    'TransferSingle(address,address,address,uint256,uint256)': EventFragment;
    'URI(string,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Burn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Harvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetWorkers'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Stake'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferBatch'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferSingle'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'URI'): EventFragment;
}

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<[string, string, boolean], ApprovalForAllEventObject>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BurnEventObject {
  pid: BigNumber;
  collAmount: BigNumber;
  lpAmount: BigNumber;
}
export type BurnEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], BurnEventObject>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export interface HarvestEventObject {
  pid: BigNumber;
  rewardAmount: BigNumber;
}
export type HarvestEvent = TypedEvent<[BigNumber, BigNumber], HarvestEventObject>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export interface MintEventObject {
  pid: BigNumber;
  collAmount: BigNumber;
  lpAmount: BigNumber;
}
export type MintEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], MintEventObject>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface SetWorkersEventObject {
  workers: string;
  ok: boolean;
}
export type SetWorkersEvent = TypedEvent<[string, boolean], SetWorkersEventObject>;

export type SetWorkersEventFilter = TypedEventFilter<SetWorkersEvent>;

export interface StakeEventObject {
  pid: BigNumber;
  lpAmount: BigNumber;
}
export type StakeEvent = TypedEvent<[BigNumber, BigNumber], StakeEventObject>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], TransferSingleEventObject>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface URIEventObject {
  value: string;
  id: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface WMasterChef extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WMasterChefInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]]>;

    burn(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    chef(overrides?: CallOverrides): Promise<[string]>;

    collSizeToLpBalance(
      collId: PromiseOrValue<BigNumberish>,
      collSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    decodeId(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & { pid: BigNumber }>;

    dedicatedWorkers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    dexHelper(overrides?: CallOverrides): Promise<[string]>;

    encodeId(pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & { id: BigNumber }>;

    exists(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    getDexHelper(overrides?: CallOverrides): Promise<[string]>;

    getTokenByPid(pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    getUnderlyingToken(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    harvestReward(
      pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _chef: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    lpBalanceToCollSize(
      collId: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { collSize: BigNumber }>;

    mint(
      pid: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDedicatedWorkers(
      workers: PromiseOrValue<string>[],
      ok: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDexHelper(
      helper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stake(
      pid: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

    totalSupply(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    uri(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
  };

  balanceOf(
    account: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: PromiseOrValue<string>[],
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  burn(
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  chef(overrides?: CallOverrides): Promise<string>;

  collSizeToLpBalance(
    collId: PromiseOrValue<BigNumberish>,
    collSize: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  decodeId(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  dedicatedWorkers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  dexHelper(overrides?: CallOverrides): Promise<string>;

  encodeId(pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  exists(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  getDexHelper(overrides?: CallOverrides): Promise<string>;

  getTokenByPid(pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  getUnderlyingToken(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  harvestReward(
    pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _chef: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    account: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  lpBalanceToCollSize(
    collId: PromiseOrValue<BigNumberish>,
    balance: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  mint(
    pid: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  safeBatchTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDedicatedWorkers(
    workers: PromiseOrValue<string>[],
    ok: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDexHelper(
    helper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stake(
    pid: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  totalSupply(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  uri(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    burn(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    chef(overrides?: CallOverrides): Promise<string>;

    collSizeToLpBalance(
      collId: PromiseOrValue<BigNumberish>,
      collSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    decodeId(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    dedicatedWorkers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    dexHelper(overrides?: CallOverrides): Promise<string>;

    encodeId(pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    exists(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    getDexHelper(overrides?: CallOverrides): Promise<string>;

    getTokenByPid(pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    getUnderlyingToken(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    harvestReward(pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    initialize(
      _chef: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    lpBalanceToCollSize(
      collId: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mint(
      pid: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDedicatedWorkers(
      workers: PromiseOrValue<string>[],
      ok: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDexHelper(helper: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    stake(
      pid: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    totalSupply(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    uri(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'ApprovalForAll(address,address,bool)'(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null,
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null,
    ): ApprovalForAllEventFilter;

    'Burn(uint256,uint256,uint256)'(
      pid?: PromiseOrValue<BigNumberish> | null,
      collAmount?: null,
      lpAmount?: null,
    ): BurnEventFilter;
    Burn(pid?: PromiseOrValue<BigNumberish> | null, collAmount?: null, lpAmount?: null): BurnEventFilter;

    'Harvest(uint256,uint256)'(pid?: PromiseOrValue<BigNumberish> | null, rewardAmount?: null): HarvestEventFilter;
    Harvest(pid?: PromiseOrValue<BigNumberish> | null, rewardAmount?: null): HarvestEventFilter;

    'Mint(uint256,uint256,uint256)'(
      pid?: PromiseOrValue<BigNumberish> | null,
      collAmount?: null,
      lpAmount?: null,
    ): MintEventFilter;
    Mint(pid?: PromiseOrValue<BigNumberish> | null, collAmount?: null, lpAmount?: null): MintEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'SetWorkers(address,bool)'(workers?: null, ok?: null): SetWorkersEventFilter;
    SetWorkers(workers?: null, ok?: null): SetWorkersEventFilter;

    'Stake(uint256,uint256)'(pid?: PromiseOrValue<BigNumberish> | null, lpAmount?: null): StakeEventFilter;
    Stake(pid?: PromiseOrValue<BigNumberish> | null, lpAmount?: null): StakeEventFilter;

    'TransferBatch(address,address,address,uint256[],uint256[])'(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null,
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null,
    ): TransferBatchEventFilter;

    'TransferSingle(address,address,address,uint256,uint256)'(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null,
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null,
    ): TransferSingleEventFilter;

    'URI(string,uint256)'(value?: null, id?: PromiseOrValue<BigNumberish> | null): URIEventFilter;
    URI(value?: null, id?: PromiseOrValue<BigNumberish> | null): URIEventFilter;
  };

  estimateGas: {
    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    burn(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    chef(overrides?: CallOverrides): Promise<BigNumber>;

    collSizeToLpBalance(
      collId: PromiseOrValue<BigNumberish>,
      collSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    decodeId(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    dedicatedWorkers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    dexHelper(overrides?: CallOverrides): Promise<BigNumber>;

    encodeId(pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    exists(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getDexHelper(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenByPid(pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getUnderlyingToken(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    harvestReward(
      pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initialize(
      _chef: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lpBalanceToCollSize(
      collId: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    mint(
      pid: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDedicatedWorkers(
      workers: PromiseOrValue<string>[],
      ok: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDexHelper(
      helper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stake(
      pid: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    uri(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    burn(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    chef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collSizeToLpBalance(
      collId: PromiseOrValue<BigNumberish>,
      collSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    decodeId(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dedicatedWorkers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dexHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    encodeId(pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exists(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDexHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenByPid(pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnderlyingToken(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestReward(
      pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _chef: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lpBalanceToCollSize(
      collId: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    mint(
      pid: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDedicatedWorkers(
      workers: PromiseOrValue<string>[],
      ok: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDexHelper(
      helper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stake(
      pid: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    uri(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
