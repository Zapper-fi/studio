/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface VelodromeVeInterface extends utils.Interface {
  functions: {
    'DELEGATION_TYPEHASH()': FunctionFragment;
    'DOMAIN_TYPEHASH()': FunctionFragment;
    'MAX_DELEGATES()': FunctionFragment;
    'abstain(uint256)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'artProxy()': FunctionFragment;
    'attach(uint256)': FunctionFragment;
    'attachments(uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'balanceOfAtNFT(uint256,uint256)': FunctionFragment;
    'balanceOfNFT(uint256)': FunctionFragment;
    'balanceOfNFTAt(uint256,uint256)': FunctionFragment;
    'block_number()': FunctionFragment;
    'checkpoint()': FunctionFragment;
    'checkpoints(address,uint32)': FunctionFragment;
    'create_lock(uint256,uint256)': FunctionFragment;
    'create_lock_for(uint256,uint256,address)': FunctionFragment;
    'decimals()': FunctionFragment;
    'delegate(address)': FunctionFragment;
    'delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'delegates(address)': FunctionFragment;
    'deposit_for(uint256,uint256)': FunctionFragment;
    'detach(uint256)': FunctionFragment;
    'epoch()': FunctionFragment;
    'getApproved(uint256)': FunctionFragment;
    'getPastTotalSupply(uint256)': FunctionFragment;
    'getPastVotes(address,uint256)': FunctionFragment;
    'getPastVotesIndex(address,uint256)': FunctionFragment;
    'getVotes(address)': FunctionFragment;
    'get_last_user_slope(uint256)': FunctionFragment;
    'increase_amount(uint256,uint256)': FunctionFragment;
    'increase_unlock_time(uint256,uint256)': FunctionFragment;
    'isApprovedForAll(address,address)': FunctionFragment;
    'isApprovedOrOwner(address,uint256)': FunctionFragment;
    'locked(uint256)': FunctionFragment;
    'locked__end(uint256)': FunctionFragment;
    'merge(uint256,uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'numCheckpoints(address)': FunctionFragment;
    'ownerOf(uint256)': FunctionFragment;
    'ownership_change(uint256)': FunctionFragment;
    'point_history(uint256)': FunctionFragment;
    'safeTransferFrom(address,address,uint256)': FunctionFragment;
    'safeTransferFrom(address,address,uint256,bytes)': FunctionFragment;
    'setApprovalForAll(address,bool)': FunctionFragment;
    'setArtProxy(address)': FunctionFragment;
    'setTeam(address)': FunctionFragment;
    'setVoter(address)': FunctionFragment;
    'slope_changes(uint256)': FunctionFragment;
    'supply()': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'symbol()': FunctionFragment;
    'team()': FunctionFragment;
    'token()': FunctionFragment;
    'tokenOfOwnerByIndex(address,uint256)': FunctionFragment;
    'tokenURI(uint256)': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'totalSupplyAt(uint256)': FunctionFragment;
    'totalSupplyAtT(uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'user_point_epoch(uint256)': FunctionFragment;
    'user_point_history(uint256,uint256)': FunctionFragment;
    'user_point_history__ts(uint256,uint256)': FunctionFragment;
    'version()': FunctionFragment;
    'voted(uint256)': FunctionFragment;
    'voter()': FunctionFragment;
    'voting(uint256)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DELEGATION_TYPEHASH'
      | 'DOMAIN_TYPEHASH'
      | 'MAX_DELEGATES'
      | 'abstain'
      | 'approve'
      | 'artProxy'
      | 'attach'
      | 'attachments'
      | 'balanceOf'
      | 'balanceOfAtNFT'
      | 'balanceOfNFT'
      | 'balanceOfNFTAt'
      | 'block_number'
      | 'checkpoint'
      | 'checkpoints'
      | 'create_lock'
      | 'create_lock_for'
      | 'decimals'
      | 'delegate'
      | 'delegateBySig'
      | 'delegates'
      | 'deposit_for'
      | 'detach'
      | 'epoch'
      | 'getApproved'
      | 'getPastTotalSupply'
      | 'getPastVotes'
      | 'getPastVotesIndex'
      | 'getVotes'
      | 'get_last_user_slope'
      | 'increase_amount'
      | 'increase_unlock_time'
      | 'isApprovedForAll'
      | 'isApprovedOrOwner'
      | 'locked'
      | 'locked__end'
      | 'merge'
      | 'name'
      | 'nonces'
      | 'numCheckpoints'
      | 'ownerOf'
      | 'ownership_change'
      | 'point_history'
      | 'safeTransferFrom(address,address,uint256)'
      | 'safeTransferFrom(address,address,uint256,bytes)'
      | 'setApprovalForAll'
      | 'setArtProxy'
      | 'setTeam'
      | 'setVoter'
      | 'slope_changes'
      | 'supply'
      | 'supportsInterface'
      | 'symbol'
      | 'team'
      | 'token'
      | 'tokenOfOwnerByIndex'
      | 'tokenURI'
      | 'totalSupply'
      | 'totalSupplyAt'
      | 'totalSupplyAtT'
      | 'transferFrom'
      | 'user_point_epoch'
      | 'user_point_history'
      | 'user_point_history__ts'
      | 'version'
      | 'voted'
      | 'voter'
      | 'voting'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DELEGATION_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DOMAIN_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_DELEGATES', values?: undefined): string;
  encodeFunctionData(functionFragment: 'abstain', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'artProxy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'attach', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'attachments', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'balanceOfAtNFT', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOfNFT', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOfNFTAt', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'block_number', values?: undefined): string;
  encodeFunctionData(functionFragment: 'checkpoint', values?: undefined): string;
  encodeFunctionData(functionFragment: 'checkpoints', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'create_lock', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'create_lock_for', values: [BigNumberish, BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'delegate', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'delegateBySig',
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'delegates', values: [string]): string;
  encodeFunctionData(functionFragment: 'deposit_for', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'detach', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'epoch', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getApproved', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getPastTotalSupply', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getPastVotes', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getPastVotesIndex', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getVotes', values: [string]): string;
  encodeFunctionData(functionFragment: 'get_last_user_slope', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'increase_amount', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'increase_unlock_time', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'isApprovedForAll', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'isApprovedOrOwner', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'locked', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'locked__end', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'merge', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [string]): string;
  encodeFunctionData(functionFragment: 'numCheckpoints', values: [string]): string;
  encodeFunctionData(functionFragment: 'ownerOf', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'ownership_change', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'point_history', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    values: [string, string, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'setApprovalForAll', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'setArtProxy', values: [string]): string;
  encodeFunctionData(functionFragment: 'setTeam', values: [string]): string;
  encodeFunctionData(functionFragment: 'setVoter', values: [string]): string;
  encodeFunctionData(functionFragment: 'slope_changes', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'supply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'team', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenOfOwnerByIndex', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'tokenURI', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupplyAt', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'totalSupplyAtT', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'user_point_epoch', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'user_point_history', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'user_point_history__ts', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'version', values?: undefined): string;
  encodeFunctionData(functionFragment: 'voted', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'voter', values?: undefined): string;
  encodeFunctionData(functionFragment: 'voting', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'DELEGATION_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DOMAIN_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_DELEGATES', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'abstain', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'artProxy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'attach', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'attachments', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfAtNFT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfNFT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOfNFTAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'block_number', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkpoint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkpoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'create_lock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'create_lock_for', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegateBySig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegates', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit_for', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'detach', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'epoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPastTotalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPastVotes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPastVotesIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVotes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'get_last_user_slope', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increase_amount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increase_unlock_time', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedOrOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'locked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'locked__end', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'merge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numCheckpoints', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownership_change', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'point_history', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setArtProxy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTeam', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setVoter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'slope_changes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'team', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenOfOwnerByIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupplyAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupplyAtT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'user_point_epoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'user_point_history', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'user_point_history__ts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'voted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'voter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'voting', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'ApprovalForAll(address,address,bool)': EventFragment;
    'DelegateChanged(address,address,address)': EventFragment;
    'DelegateVotesChanged(address,uint256,uint256)': EventFragment;
    'Deposit(address,uint256,uint256,uint256,uint8,uint256)': EventFragment;
    'Supply(uint256,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Withdraw(address,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DelegateChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DelegateVotesChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Supply'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<[string, string, boolean], ApprovalForAllEventObject>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface DelegateChangedEventObject {
  delegator: string;
  fromDelegate: string;
  toDelegate: string;
}
export type DelegateChangedEvent = TypedEvent<[string, string, string], DelegateChangedEventObject>;

export type DelegateChangedEventFilter = TypedEventFilter<DelegateChangedEvent>;

export interface DelegateVotesChangedEventObject {
  delegate: string;
  previousBalance: BigNumber;
  newBalance: BigNumber;
}
export type DelegateVotesChangedEvent = TypedEvent<[string, BigNumber, BigNumber], DelegateVotesChangedEventObject>;

export type DelegateVotesChangedEventFilter = TypedEventFilter<DelegateVotesChangedEvent>;

export interface DepositEventObject {
  provider: string;
  tokenId: BigNumber;
  value: BigNumber;
  locktime: BigNumber;
  deposit_type: number;
  ts: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber, number, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface SupplyEventObject {
  prevSupply: BigNumber;
  supply: BigNumber;
}
export type SupplyEvent = TypedEvent<[BigNumber, BigNumber], SupplyEventObject>;

export type SupplyEventFilter = TypedEventFilter<SupplyEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawEventObject {
  provider: string;
  tokenId: BigNumber;
  value: BigNumber;
  ts: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface VelodromeVe extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VelodromeVeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    MAX_DELEGATES(overrides?: CallOverrides): Promise<[BigNumber]>;

    abstain(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    approve(
      _approved: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    artProxy(overrides?: CallOverrides): Promise<[string]>;

    attach(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    attachments(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfAtNFT(_tokenId: BigNumberish, _block: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfNFT(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfNFTAt(_tokenId: BigNumberish, _t: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    block_number(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkpoint(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    checkpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;

    create_lock(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    create_lock_for(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    delegates(delegator: string, overrides?: CallOverrides): Promise<[string]>;

    deposit_for(
      _tokenId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    detach(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    epoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    getApproved(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getPastTotalSupply(timestamp: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPastVotes(account: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPastVotesIndex(account: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    getVotes(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    get_last_user_slope(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    increase_amount(
      _tokenId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    increase_unlock_time(
      _tokenId: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isApprovedForAll(_owner: string, _operator: string, overrides?: CallOverrides): Promise<[boolean]>;

    isApprovedOrOwner(_spender: string, _tokenId: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    locked(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber }>;

    locked__end(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    merge(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    ownerOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    ownership_change(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    point_history(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        ts: BigNumber;
        blk: BigNumber;
      }
    >;

    'safeTransferFrom(address,address,uint256)'(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setArtProxy(
      _proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTeam(_team: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setVoter(_voter: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    slope_changes(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    supply(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(_interfaceID: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    team(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenOfOwnerByIndex(_owner: string, _tokenIndex: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyAt(_block: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyAtT(t: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    user_point_epoch(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    user_point_history(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        ts: BigNumber;
        blk: BigNumber;
      }
    >;

    user_point_history__ts(_tokenId: BigNumberish, _idx: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    voted(arg0: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    voter(overrides?: CallOverrides): Promise<[string]>;

    voting(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  MAX_DELEGATES(overrides?: CallOverrides): Promise<BigNumber>;

  abstain(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  approve(
    _approved: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  artProxy(overrides?: CallOverrides): Promise<string>;

  attach(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  attachments(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfAtNFT(_tokenId: BigNumberish, _block: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfNFT(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfNFTAt(_tokenId: BigNumberish, _t: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  block_number(overrides?: CallOverrides): Promise<BigNumber>;

  checkpoint(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  checkpoints(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  create_lock(
    _value: BigNumberish,
    _lock_duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  create_lock_for(
    _value: BigNumberish,
    _lock_duration: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  delegate(
    delegatee: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  delegateBySig(
    delegatee: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  delegates(delegator: string, overrides?: CallOverrides): Promise<string>;

  deposit_for(
    _tokenId: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  detach(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  epoch(overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getPastTotalSupply(timestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getPastVotes(account: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getPastVotesIndex(account: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<number>;

  getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  get_last_user_slope(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  increase_amount(
    _tokenId: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  increase_unlock_time(
    _tokenId: BigNumberish,
    _lock_duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isApprovedForAll(_owner: string, _operator: string, overrides?: CallOverrides): Promise<boolean>;

  isApprovedOrOwner(_spender: string, _tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  locked(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber }>;

  locked__end(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  merge(
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<number>;

  ownerOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  ownership_change(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  point_history(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bias: BigNumber;
      slope: BigNumber;
      ts: BigNumber;
      blk: BigNumber;
    }
  >;

  'safeTransferFrom(address,address,uint256)'(
    _from: string,
    _to: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'safeTransferFrom(address,address,uint256,bytes)'(
    _from: string,
    _to: string,
    _tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    _operator: string,
    _approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setArtProxy(
    _proxy: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setTeam(_team: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setVoter(_voter: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  slope_changes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  supply(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(_interfaceID: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  team(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenOfOwnerByIndex(_owner: string, _tokenIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyAt(_block: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyAtT(t: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    _from: string,
    _to: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  user_point_epoch(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  user_point_history(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bias: BigNumber;
      slope: BigNumber;
      ts: BigNumber;
      blk: BigNumber;
    }
  >;

  user_point_history__ts(_tokenId: BigNumberish, _idx: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<string>;

  voted(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  voter(overrides?: CallOverrides): Promise<string>;

  voting(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    MAX_DELEGATES(overrides?: CallOverrides): Promise<BigNumber>;

    abstain(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    approve(_approved: string, _tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    artProxy(overrides?: CallOverrides): Promise<string>;

    attach(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    attachments(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfAtNFT(_tokenId: BigNumberish, _block: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfNFT(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfNFTAt(_tokenId: BigNumberish, _t: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    block_number(overrides?: CallOverrides): Promise<BigNumber>;

    checkpoint(overrides?: CallOverrides): Promise<void>;

    checkpoints(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    create_lock(_value: BigNumberish, _lock_duration: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    create_lock_for(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    delegate(delegatee: string, overrides?: CallOverrides): Promise<void>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    delegates(delegator: string, overrides?: CallOverrides): Promise<string>;

    deposit_for(_tokenId: BigNumberish, _value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    detach(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getPastTotalSupply(timestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPastVotes(account: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPastVotesIndex(account: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<number>;

    getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    get_last_user_slope(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    increase_amount(_tokenId: BigNumberish, _value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    increase_unlock_time(
      _tokenId: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    isApprovedForAll(_owner: string, _operator: string, overrides?: CallOverrides): Promise<boolean>;

    isApprovedOrOwner(_spender: string, _tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    locked(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber }>;

    locked__end(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    merge(_from: BigNumberish, _to: BigNumberish, overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<number>;

    ownerOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    ownership_change(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    point_history(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        ts: BigNumber;
        blk: BigNumber;
      }
    >;

    'safeTransferFrom(address,address,uint256)'(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    setApprovalForAll(_operator: string, _approved: boolean, overrides?: CallOverrides): Promise<void>;

    setArtProxy(_proxy: string, overrides?: CallOverrides): Promise<void>;

    setTeam(_team: string, overrides?: CallOverrides): Promise<void>;

    setVoter(_voter: string, overrides?: CallOverrides): Promise<void>;

    slope_changes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    supply(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(_interfaceID: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    team(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenOfOwnerByIndex(_owner: string, _tokenIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(_block: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAtT(t: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(_from: string, _to: string, _tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    user_point_epoch(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    user_point_history(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        ts: BigNumber;
        blk: BigNumber;
      }
    >;

    user_point_history__ts(_tokenId: BigNumberish, _idx: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<string>;

    voted(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    voter(overrides?: CallOverrides): Promise<string>;

    voting(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdraw(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, approved?: string | null, tokenId?: BigNumberish | null): ApprovalEventFilter;

    'ApprovalForAll(address,address,bool)'(
      owner?: string | null,
      operator?: string | null,
      approved?: null,
    ): ApprovalForAllEventFilter;
    ApprovalForAll(owner?: string | null, operator?: string | null, approved?: null): ApprovalForAllEventFilter;

    'DelegateChanged(address,address,address)'(
      delegator?: string | null,
      fromDelegate?: string | null,
      toDelegate?: string | null,
    ): DelegateChangedEventFilter;
    DelegateChanged(
      delegator?: string | null,
      fromDelegate?: string | null,
      toDelegate?: string | null,
    ): DelegateChangedEventFilter;

    'DelegateVotesChanged(address,uint256,uint256)'(
      delegate?: string | null,
      previousBalance?: null,
      newBalance?: null,
    ): DelegateVotesChangedEventFilter;
    DelegateVotesChanged(
      delegate?: string | null,
      previousBalance?: null,
      newBalance?: null,
    ): DelegateVotesChangedEventFilter;

    'Deposit(address,uint256,uint256,uint256,uint8,uint256)'(
      provider?: string | null,
      tokenId?: null,
      value?: null,
      locktime?: BigNumberish | null,
      deposit_type?: null,
      ts?: null,
    ): DepositEventFilter;
    Deposit(
      provider?: string | null,
      tokenId?: null,
      value?: null,
      locktime?: BigNumberish | null,
      deposit_type?: null,
      ts?: null,
    ): DepositEventFilter;

    'Supply(uint256,uint256)'(prevSupply?: null, supply?: null): SupplyEventFilter;
    Supply(prevSupply?: null, supply?: null): SupplyEventFilter;

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null,
    ): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, tokenId?: BigNumberish | null): TransferEventFilter;

    'Withdraw(address,uint256,uint256,uint256)'(
      provider?: string | null,
      tokenId?: null,
      value?: null,
      ts?: null,
    ): WithdrawEventFilter;
    Withdraw(provider?: string | null, tokenId?: null, value?: null, ts?: null): WithdrawEventFilter;
  };

  estimateGas: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DELEGATES(overrides?: CallOverrides): Promise<BigNumber>;

    abstain(_tokenId: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    approve(
      _approved: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    artProxy(overrides?: CallOverrides): Promise<BigNumber>;

    attach(_tokenId: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    attachments(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfAtNFT(_tokenId: BigNumberish, _block: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfNFT(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfNFTAt(_tokenId: BigNumberish, _t: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    block_number(overrides?: CallOverrides): Promise<BigNumber>;

    checkpoint(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    checkpoints(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    create_lock(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    create_lock_for(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    delegate(delegatee: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    delegates(delegator: string, overrides?: CallOverrides): Promise<BigNumber>;

    deposit_for(
      _tokenId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    detach(_tokenId: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPastTotalSupply(timestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPastVotes(account: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getPastVotesIndex(account: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    get_last_user_slope(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    increase_amount(
      _tokenId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    increase_unlock_time(
      _tokenId: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isApprovedForAll(_owner: string, _operator: string, overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedOrOwner(_spender: string, _tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    locked(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    locked__end(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    merge(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ownership_change(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    point_history(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256)'(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setArtProxy(_proxy: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setTeam(_team: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setVoter(_voter: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    slope_changes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    supply(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(_interfaceID: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    team(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenOfOwnerByIndex(_owner: string, _tokenIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(_block: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAtT(t: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    user_point_epoch(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    user_point_history(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    user_point_history__ts(_tokenId: BigNumberish, _idx: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    voted(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    voter(overrides?: CallOverrides): Promise<BigNumber>;

    voting(_tokenId: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdraw(_tokenId: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_DELEGATES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    abstain(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    approve(
      _approved: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    artProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    attach(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    attachments(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfAtNFT(
      _tokenId: BigNumberish,
      _block: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    balanceOfNFT(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfNFTAt(_tokenId: BigNumberish, _t: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    block_number(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkpoint(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    checkpoints(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    create_lock(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    create_lock_for(
      _value: BigNumberish,
      _lock_duration: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    delegates(delegator: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit_for(
      _tokenId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    detach(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPastTotalSupply(timestamp: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPastVotes(account: string, timestamp: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPastVotesIndex(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getVotes(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_last_user_slope(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increase_amount(
      _tokenId: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    increase_unlock_time(
      _tokenId: BigNumberish,
      _lock_duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(_owner: string, _operator: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedOrOwner(
      _spender: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    locked(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    locked__end(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    merge(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownership_change(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    point_history(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256)'(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setArtProxy(
      _proxy: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setTeam(_team: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setVoter(
      _voter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    slope_changes(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(_interfaceID: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    team(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      _owner: string,
      _tokenIndex: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyAt(_block: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyAtT(t: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    user_point_epoch(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    user_point_history(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    user_point_history__ts(
      _tokenId: BigNumberish,
      _idx: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voted(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voting(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
