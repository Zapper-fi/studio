/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface XcaliburSwapFactoryInterface extends utils.Interface {
  functions: {
    'acceptPauser()': FunctionFragment;
    'admin()': FunctionFragment;
    'allPairs(uint256)': FunctionFragment;
    'allPairsLength()': FunctionFragment;
    'createPair(address,address,bool)': FunctionFragment;
    'fee(bool)': FunctionFragment;
    'feeCollector()': FunctionFragment;
    'getInitializable()': FunctionFragment;
    'getPair(address,address,bool)': FunctionFragment;
    'isPair(address)': FunctionFragment;
    'isPaused()': FunctionFragment;
    'pairCodeHash()': FunctionFragment;
    'pauser()': FunctionFragment;
    'pendingPauser()': FunctionFragment;
    'setAdmin(address)': FunctionFragment;
    'setFeeTier(bool,uint256)': FunctionFragment;
    'setPause(bool)': FunctionFragment;
    'setPauser(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptPauser'
      | 'admin'
      | 'allPairs'
      | 'allPairsLength'
      | 'createPair'
      | 'fee'
      | 'feeCollector'
      | 'getInitializable'
      | 'getPair'
      | 'isPair'
      | 'isPaused'
      | 'pairCodeHash'
      | 'pauser'
      | 'pendingPauser'
      | 'setAdmin'
      | 'setFeeTier'
      | 'setPause'
      | 'setPauser',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'acceptPauser', values?: undefined): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allPairs', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'allPairsLength', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'createPair',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'fee', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'feeCollector', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getInitializable', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getPair',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'isPair', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isPaused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pairCodeHash', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pauser', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingPauser', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setAdmin', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setFeeTier',
    values: [PromiseOrValue<boolean>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setPause', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'setPauser', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'acceptPauser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allPairs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allPairsLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createPair', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeCollector', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getInitializable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPair', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isPair', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pairCodeHash', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pauser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingPauser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeTier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPauser', data: BytesLike): Result;

  events: {
    'PairCreated(address,address,bool,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'PairCreated'): EventFragment;
}

export interface PairCreatedEventObject {
  token0: string;
  token1: string;
  stable: boolean;
  pair: string;
  arg4: BigNumber;
}
export type PairCreatedEvent = TypedEvent<[string, string, boolean, string, BigNumber], PairCreatedEventObject>;

export type PairCreatedEventFilter = TypedEventFilter<PairCreatedEvent>;

export interface XcaliburSwapFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: XcaliburSwapFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptPauser(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    allPairs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    allPairsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    createPair(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      stable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    fee(arg0: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[BigNumber]>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    getInitializable(overrides?: CallOverrides): Promise<[string, string, boolean, BigNumber]>;

    getPair(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    isPair(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isPaused(overrides?: CallOverrides): Promise<[boolean]>;

    pairCodeHash(overrides?: CallOverrides): Promise<[string]>;

    pauser(overrides?: CallOverrides): Promise<[string]>;

    pendingPauser(overrides?: CallOverrides): Promise<[string]>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFeeTier(
      _stable: PromiseOrValue<boolean>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPause(
      _state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPauser(
      _pauser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  acceptPauser(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  allPairs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

  createPair(
    tokenA: PromiseOrValue<string>,
    tokenB: PromiseOrValue<string>,
    stable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  fee(arg0: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  getInitializable(overrides?: CallOverrides): Promise<[string, string, boolean, BigNumber]>;

  getPair(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<boolean>,
    overrides?: CallOverrides,
  ): Promise<string>;

  isPair(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isPaused(overrides?: CallOverrides): Promise<boolean>;

  pairCodeHash(overrides?: CallOverrides): Promise<string>;

  pauser(overrides?: CallOverrides): Promise<string>;

  pendingPauser(overrides?: CallOverrides): Promise<string>;

  setAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFeeTier(
    _stable: PromiseOrValue<boolean>,
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPause(
    _state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPauser(
    _pauser: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptPauser(overrides?: CallOverrides): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    allPairs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      stable: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<string>;

    fee(arg0: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    getInitializable(overrides?: CallOverrides): Promise<[string, string, boolean, BigNumber]>;

    getPair(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<string>;

    isPair(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isPaused(overrides?: CallOverrides): Promise<boolean>;

    pairCodeHash(overrides?: CallOverrides): Promise<string>;

    pauser(overrides?: CallOverrides): Promise<string>;

    pendingPauser(overrides?: CallOverrides): Promise<string>;

    setAdmin(_admin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setFeeTier(
      _stable: PromiseOrValue<boolean>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setPause(_state: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setPauser(_pauser: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'PairCreated(address,address,bool,address,uint256)'(
      token0?: PromiseOrValue<string> | null,
      token1?: PromiseOrValue<string> | null,
      stable?: null,
      pair?: null,
      arg4?: null,
    ): PairCreatedEventFilter;
    PairCreated(
      token0?: PromiseOrValue<string> | null,
      token1?: PromiseOrValue<string> | null,
      stable?: null,
      pair?: null,
      arg4?: null,
    ): PairCreatedEventFilter;
  };

  estimateGas: {
    acceptPauser(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    allPairs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      stable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    fee(arg0: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    getInitializable(overrides?: CallOverrides): Promise<BigNumber>;

    getPair(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isPair(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isPaused(overrides?: CallOverrides): Promise<BigNumber>;

    pairCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    pauser(overrides?: CallOverrides): Promise<BigNumber>;

    pendingPauser(overrides?: CallOverrides): Promise<BigNumber>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFeeTier(
      _stable: PromiseOrValue<boolean>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPause(
      _state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPauser(
      _pauser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptPauser(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allPairs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allPairsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPair(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      stable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    fee(arg0: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInitializable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPair(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isPair(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairCodeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingPauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFeeTier(
      _stable: PromiseOrValue<boolean>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPause(
      _state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPauser(
      _pauser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
