/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace IKeep3rJobFundableLiquidity {
  export type TickCacheStruct = {
    current: PromiseOrValue<BigNumberish>;
    difference: PromiseOrValue<BigNumberish>;
    period: PromiseOrValue<BigNumberish>;
  };

  export type TickCacheStructOutput = [BigNumber, BigNumber, BigNumber] & {
    current: BigNumber;
    difference: BigNumber;
    period: BigNumber;
  };
}

export interface KeeperJobManagerInterface extends utils.Interface {
  functions: {
    'acceptGovernance()': FunctionFragment;
    'acceptJobMigration(address,address)': FunctionFragment;
    'acceptJobOwnership(address)': FunctionFragment;
    'activate(address)': FunctionFragment;
    'addDisputer(address)': FunctionFragment;
    'addJob(address)': FunctionFragment;
    'addLiquidityToJob(address,address,uint256)': FunctionFragment;
    'addSlasher(address)': FunctionFragment;
    'addTokenCreditsToJob(address,address,uint256)': FunctionFragment;
    'approveLiquidity(address)': FunctionFragment;
    'approvedLiquidities()': FunctionFragment;
    'bond(address,uint256)': FunctionFragment;
    'bondTime()': FunctionFragment;
    'bondedPayment(address,uint256)': FunctionFragment;
    'bonds(address,address)': FunctionFragment;
    'canActivateAfter(address,address)': FunctionFragment;
    'canWithdrawAfter(address,address)': FunctionFragment;
    'changeJobOwnership(address,address)': FunctionFragment;
    'directTokenPayment(address,address,uint256)': FunctionFragment;
    'dispute(address)': FunctionFragment;
    'disputers(address)': FunctionFragment;
    'disputes(address)': FunctionFragment;
    'fee()': FunctionFragment;
    'firstSeen(address)': FunctionFragment;
    'forceLiquidityCreditsToJob(address,uint256)': FunctionFragment;
    'governance()': FunctionFragment;
    'hasBonded(address)': FunctionFragment;
    'inflationPeriod()': FunctionFragment;
    'isBondedKeeper(address,address,uint256,uint256,uint256)': FunctionFragment;
    'isKeeper(address)': FunctionFragment;
    'jobLiquidityCredits(address)': FunctionFragment;
    'jobOwner(address)': FunctionFragment;
    'jobPendingOwner(address)': FunctionFragment;
    'jobPeriodCredits(address)': FunctionFragment;
    'jobTokenCredits(address,address)': FunctionFragment;
    'jobTokenCreditsAddedAt(address,address)': FunctionFragment;
    'jobs()': FunctionFragment;
    'keep3rHelper()': FunctionFragment;
    'keep3rV1()': FunctionFragment;
    'keep3rV1Proxy()': FunctionFragment;
    'keepers()': FunctionFragment;
    'kp3rWethPool()': FunctionFragment;
    'liquidityAmount(address,address)': FunctionFragment;
    'liquidityMinimum()': FunctionFragment;
    'migrateJob(address,address)': FunctionFragment;
    'observeLiquidity(address)': FunctionFragment;
    'pendingBonds(address,address)': FunctionFragment;
    'pendingGovernance()': FunctionFragment;
    'pendingJobMigrations(address)': FunctionFragment;
    'pendingUnbonds(address,address)': FunctionFragment;
    'quoteLiquidity(address,uint256)': FunctionFragment;
    'removeDisputer(address)': FunctionFragment;
    'removeSlasher(address)': FunctionFragment;
    'resolve(address)': FunctionFragment;
    'revoke(address)': FunctionFragment;
    'revokeLiquidity(address)': FunctionFragment;
    'rewardPeriodTime()': FunctionFragment;
    'rewardedAt(address)': FunctionFragment;
    'sendDust(address,uint256,address)': FunctionFragment;
    'setBondTime(uint256)': FunctionFragment;
    'setFee(uint256)': FunctionFragment;
    'setGovernance(address)': FunctionFragment;
    'setInflationPeriod(uint256)': FunctionFragment;
    'setKeep3rHelper(address)': FunctionFragment;
    'setKeep3rV1(address)': FunctionFragment;
    'setKeep3rV1Proxy(address)': FunctionFragment;
    'setKp3rWethPool(address)': FunctionFragment;
    'setLiquidityMinimum(uint256)': FunctionFragment;
    'setRewardPeriodTime(uint256)': FunctionFragment;
    'setUnbondTime(uint256)': FunctionFragment;
    'slash(address,address,uint256,uint256)': FunctionFragment;
    'slashLiquidityFromJob(address,address,uint256)': FunctionFragment;
    'slashTokenFromJob(address,address,uint256)': FunctionFragment;
    'slashers(address)': FunctionFragment;
    'totalJobCredits(address)': FunctionFragment;
    'unbond(address,uint256)': FunctionFragment;
    'unbondLiquidityFromJob(address,address,uint256)': FunctionFragment;
    'unbondTime()': FunctionFragment;
    'withdraw(address)': FunctionFragment;
    'withdrawLiquidityFromJob(address,address,address)': FunctionFragment;
    'withdrawTokenCreditsFromJob(address,address,uint256,address)': FunctionFragment;
    'workCompleted(address)': FunctionFragment;
    'worked(address)': FunctionFragment;
    'workedAt(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptGovernance'
      | 'acceptJobMigration'
      | 'acceptJobOwnership'
      | 'activate'
      | 'addDisputer'
      | 'addJob'
      | 'addLiquidityToJob'
      | 'addSlasher'
      | 'addTokenCreditsToJob'
      | 'approveLiquidity'
      | 'approvedLiquidities'
      | 'bond'
      | 'bondTime'
      | 'bondedPayment'
      | 'bonds'
      | 'canActivateAfter'
      | 'canWithdrawAfter'
      | 'changeJobOwnership'
      | 'directTokenPayment'
      | 'dispute'
      | 'disputers'
      | 'disputes'
      | 'fee'
      | 'firstSeen'
      | 'forceLiquidityCreditsToJob'
      | 'governance'
      | 'hasBonded'
      | 'inflationPeriod'
      | 'isBondedKeeper'
      | 'isKeeper'
      | 'jobLiquidityCredits'
      | 'jobOwner'
      | 'jobPendingOwner'
      | 'jobPeriodCredits'
      | 'jobTokenCredits'
      | 'jobTokenCreditsAddedAt'
      | 'jobs'
      | 'keep3rHelper'
      | 'keep3rV1'
      | 'keep3rV1Proxy'
      | 'keepers'
      | 'kp3rWethPool'
      | 'liquidityAmount'
      | 'liquidityMinimum'
      | 'migrateJob'
      | 'observeLiquidity'
      | 'pendingBonds'
      | 'pendingGovernance'
      | 'pendingJobMigrations'
      | 'pendingUnbonds'
      | 'quoteLiquidity'
      | 'removeDisputer'
      | 'removeSlasher'
      | 'resolve'
      | 'revoke'
      | 'revokeLiquidity'
      | 'rewardPeriodTime'
      | 'rewardedAt'
      | 'sendDust'
      | 'setBondTime'
      | 'setFee'
      | 'setGovernance'
      | 'setInflationPeriod'
      | 'setKeep3rHelper'
      | 'setKeep3rV1'
      | 'setKeep3rV1Proxy'
      | 'setKp3rWethPool'
      | 'setLiquidityMinimum'
      | 'setRewardPeriodTime'
      | 'setUnbondTime'
      | 'slash'
      | 'slashLiquidityFromJob'
      | 'slashTokenFromJob'
      | 'slashers'
      | 'totalJobCredits'
      | 'unbond'
      | 'unbondLiquidityFromJob'
      | 'unbondTime'
      | 'withdraw'
      | 'withdrawLiquidityFromJob'
      | 'withdrawTokenCreditsFromJob'
      | 'workCompleted'
      | 'worked'
      | 'workedAt',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'acceptGovernance', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'acceptJobMigration',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'acceptJobOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'activate', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'addDisputer', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'addJob', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'addLiquidityToJob',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'addSlasher', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'addTokenCreditsToJob',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'approveLiquidity', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'approvedLiquidities', values?: undefined): string;
  encodeFunctionData(functionFragment: 'bond', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'bondTime', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'bondedPayment',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'bonds', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'canActivateAfter',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'canWithdrawAfter',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'changeJobOwnership',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'directTokenPayment',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'dispute', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'disputers', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'disputes', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'fee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'firstSeen', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'forceLiquidityCreditsToJob',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'governance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'hasBonded', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'inflationPeriod', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'isBondedKeeper',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'isKeeper', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'jobLiquidityCredits', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'jobOwner', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'jobPendingOwner', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'jobPeriodCredits', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'jobTokenCredits',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'jobTokenCreditsAddedAt',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'jobs', values?: undefined): string;
  encodeFunctionData(functionFragment: 'keep3rHelper', values?: undefined): string;
  encodeFunctionData(functionFragment: 'keep3rV1', values?: undefined): string;
  encodeFunctionData(functionFragment: 'keep3rV1Proxy', values?: undefined): string;
  encodeFunctionData(functionFragment: 'keepers', values?: undefined): string;
  encodeFunctionData(functionFragment: 'kp3rWethPool', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'liquidityAmount',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'liquidityMinimum', values?: undefined): string;
  encodeFunctionData(functionFragment: 'migrateJob', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'observeLiquidity', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'pendingBonds',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'pendingGovernance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingJobMigrations', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'pendingUnbonds',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteLiquidity',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'removeDisputer', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'removeSlasher', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'resolve', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'revoke', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'revokeLiquidity', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'rewardPeriodTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardedAt', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'sendDust',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'setBondTime', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setGovernance', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setInflationPeriod', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setKeep3rHelper', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setKeep3rV1', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setKeep3rV1Proxy', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setKp3rWethPool', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setLiquidityMinimum', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setRewardPeriodTime', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setUnbondTime', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'slash',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'slashLiquidityFromJob',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'slashTokenFromJob',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'slashers', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'totalJobCredits', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'unbond',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'unbondLiquidityFromJob',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'unbondTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'withdrawLiquidityFromJob',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawTokenCreditsFromJob',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'workCompleted', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'worked', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'workedAt', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'acceptGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptJobMigration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptJobOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addDisputer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addJob', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addLiquidityToJob', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addSlasher', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addTokenCreditsToJob', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approveLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approvedLiquidities', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bond', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bondTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bondedPayment', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bonds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'canActivateAfter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'canWithdrawAfter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeJobOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'directTokenPayment', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dispute', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disputers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disputes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'firstSeen', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'forceLiquidityCreditsToJob', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasBonded', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'inflationPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isBondedKeeper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isKeeper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'jobLiquidityCredits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'jobOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'jobPendingOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'jobPeriodCredits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'jobTokenCredits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'jobTokenCreditsAddedAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'jobs', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'keep3rHelper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'keep3rV1', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'keep3rV1Proxy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'keepers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'kp3rWethPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidityAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidityMinimum', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migrateJob', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'observeLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingBonds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingJobMigrations', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingUnbonds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'quoteLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeDisputer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeSlasher', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'resolve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revoke', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardPeriodTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardedAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sendDust', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBondTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setInflationPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setKeep3rHelper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setKeep3rV1', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setKeep3rV1Proxy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setKp3rWethPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLiquidityMinimum', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewardPeriodTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUnbondTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'slash', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'slashLiquidityFromJob', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'slashTokenFromJob', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'slashers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalJobCredits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unbond', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unbondLiquidityFromJob', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unbondTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawLiquidityFromJob', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawTokenCreditsFromJob', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'workCompleted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'worked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'workedAt', data: BytesLike): Result;

  events: {
    'Activation(address,address,uint256)': EventFragment;
    'BondTimeChange(uint256)': EventFragment;
    'Bonding(address,address,uint256)': EventFragment;
    'Dispute(address,address)': EventFragment;
    'DisputerAdded(address)': EventFragment;
    'DisputerRemoved(address)': EventFragment;
    'DustSent(address,uint256,address)': EventFragment;
    'FeeChange(uint256)': EventFragment;
    'GovernanceProposal(address)': EventFragment;
    'GovernanceSet(address)': EventFragment;
    'InflationPeriodChange(uint256)': EventFragment;
    'JobAddition(address,address)': EventFragment;
    'JobMigrationRequested(address,address)': EventFragment;
    'JobMigrationSuccessful(address,address)': EventFragment;
    'JobOwnershipAssent(address,address,address)': EventFragment;
    'JobOwnershipChange(address,address,address)': EventFragment;
    'JobSlashLiquidity(address,address,address,uint256)': EventFragment;
    'JobSlashToken(address,address,address,uint256)': EventFragment;
    'Keep3rHelperChange(address)': EventFragment;
    'Keep3rV1Change(address)': EventFragment;
    'Keep3rV1ProxyChange(address)': EventFragment;
    'KeeperRevoke(address,address)': EventFragment;
    'KeeperSlash(address,address,uint256)': EventFragment;
    'KeeperValidation(uint256)': EventFragment;
    'KeeperWork(address,address,address,uint256,uint256)': EventFragment;
    'Kp3rWethPoolChange(address)': EventFragment;
    'LiquidityAddition(address,address,address,uint256)': EventFragment;
    'LiquidityApproval(address)': EventFragment;
    'LiquidityCreditsForced(address,uint256,uint256)': EventFragment;
    'LiquidityCreditsReward(address,uint256,uint256,uint256)': EventFragment;
    'LiquidityMinimumChange(uint256)': EventFragment;
    'LiquidityRevocation(address)': EventFragment;
    'LiquidityWithdrawal(address,address,address,uint256)': EventFragment;
    'Resolve(address,address)': EventFragment;
    'RewardPeriodTimeChange(uint256)': EventFragment;
    'SlasherAdded(address)': EventFragment;
    'SlasherRemoved(address)': EventFragment;
    'TokenCreditAddition(address,address,address,uint256)': EventFragment;
    'TokenCreditWithdrawal(address,address,address,uint256)': EventFragment;
    'UnbondTimeChange(uint256)': EventFragment;
    'Unbonding(address,address,uint256)': EventFragment;
    'Withdrawal(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Activation'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BondTimeChange'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Bonding'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Dispute'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DisputerAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DisputerRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DustSent'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeChange'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GovernanceProposal'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GovernanceSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InflationPeriodChange'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'JobAddition'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'JobMigrationRequested'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'JobMigrationSuccessful'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'JobOwnershipAssent'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'JobOwnershipChange'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'JobSlashLiquidity'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'JobSlashToken'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Keep3rHelperChange'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Keep3rV1Change'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Keep3rV1ProxyChange'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'KeeperRevoke'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'KeeperSlash'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'KeeperValidation'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'KeeperWork'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Kp3rWethPoolChange'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidityAddition'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidityApproval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidityCreditsForced'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidityCreditsReward'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidityMinimumChange'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidityRevocation'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidityWithdrawal'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Resolve'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardPeriodTimeChange'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SlasherAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SlasherRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenCreditAddition'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenCreditWithdrawal'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UnbondTimeChange'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unbonding'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdrawal'): EventFragment;
}

export interface ActivationEventObject {
  _keeper: string;
  _bond: string;
  _amount: BigNumber;
}
export type ActivationEvent = TypedEvent<[string, string, BigNumber], ActivationEventObject>;

export type ActivationEventFilter = TypedEventFilter<ActivationEvent>;

export interface BondTimeChangeEventObject {
  _bondTime: BigNumber;
}
export type BondTimeChangeEvent = TypedEvent<[BigNumber], BondTimeChangeEventObject>;

export type BondTimeChangeEventFilter = TypedEventFilter<BondTimeChangeEvent>;

export interface BondingEventObject {
  _keeper: string;
  _bonding: string;
  _amount: BigNumber;
}
export type BondingEvent = TypedEvent<[string, string, BigNumber], BondingEventObject>;

export type BondingEventFilter = TypedEventFilter<BondingEvent>;

export interface DisputeEventObject {
  _jobOrKeeper: string;
  _disputer: string;
}
export type DisputeEvent = TypedEvent<[string, string], DisputeEventObject>;

export type DisputeEventFilter = TypedEventFilter<DisputeEvent>;

export interface DisputerAddedEventObject {
  _disputer: string;
}
export type DisputerAddedEvent = TypedEvent<[string], DisputerAddedEventObject>;

export type DisputerAddedEventFilter = TypedEventFilter<DisputerAddedEvent>;

export interface DisputerRemovedEventObject {
  _disputer: string;
}
export type DisputerRemovedEvent = TypedEvent<[string], DisputerRemovedEventObject>;

export type DisputerRemovedEventFilter = TypedEventFilter<DisputerRemovedEvent>;

export interface DustSentEventObject {
  _token: string;
  _amount: BigNumber;
  _to: string;
}
export type DustSentEvent = TypedEvent<[string, BigNumber, string], DustSentEventObject>;

export type DustSentEventFilter = TypedEventFilter<DustSentEvent>;

export interface FeeChangeEventObject {
  _fee: BigNumber;
}
export type FeeChangeEvent = TypedEvent<[BigNumber], FeeChangeEventObject>;

export type FeeChangeEventFilter = TypedEventFilter<FeeChangeEvent>;

export interface GovernanceProposalEventObject {
  _pendingGovernance: string;
}
export type GovernanceProposalEvent = TypedEvent<[string], GovernanceProposalEventObject>;

export type GovernanceProposalEventFilter = TypedEventFilter<GovernanceProposalEvent>;

export interface GovernanceSetEventObject {
  _governance: string;
}
export type GovernanceSetEvent = TypedEvent<[string], GovernanceSetEventObject>;

export type GovernanceSetEventFilter = TypedEventFilter<GovernanceSetEvent>;

export interface InflationPeriodChangeEventObject {
  _inflationPeriod: BigNumber;
}
export type InflationPeriodChangeEvent = TypedEvent<[BigNumber], InflationPeriodChangeEventObject>;

export type InflationPeriodChangeEventFilter = TypedEventFilter<InflationPeriodChangeEvent>;

export interface JobAdditionEventObject {
  _job: string;
  _jobOwner: string;
}
export type JobAdditionEvent = TypedEvent<[string, string], JobAdditionEventObject>;

export type JobAdditionEventFilter = TypedEventFilter<JobAdditionEvent>;

export interface JobMigrationRequestedEventObject {
  _fromJob: string;
  _toJob: string;
}
export type JobMigrationRequestedEvent = TypedEvent<[string, string], JobMigrationRequestedEventObject>;

export type JobMigrationRequestedEventFilter = TypedEventFilter<JobMigrationRequestedEvent>;

export interface JobMigrationSuccessfulEventObject {
  _fromJob: string;
  _toJob: string;
}
export type JobMigrationSuccessfulEvent = TypedEvent<[string, string], JobMigrationSuccessfulEventObject>;

export type JobMigrationSuccessfulEventFilter = TypedEventFilter<JobMigrationSuccessfulEvent>;

export interface JobOwnershipAssentEventObject {
  _job: string;
  _previousOwner: string;
  _newOwner: string;
}
export type JobOwnershipAssentEvent = TypedEvent<[string, string, string], JobOwnershipAssentEventObject>;

export type JobOwnershipAssentEventFilter = TypedEventFilter<JobOwnershipAssentEvent>;

export interface JobOwnershipChangeEventObject {
  _job: string;
  _owner: string;
  _pendingOwner: string;
}
export type JobOwnershipChangeEvent = TypedEvent<[string, string, string], JobOwnershipChangeEventObject>;

export type JobOwnershipChangeEventFilter = TypedEventFilter<JobOwnershipChangeEvent>;

export interface JobSlashLiquidityEventObject {
  _job: string;
  _liquidity: string;
  _slasher: string;
  _amount: BigNumber;
}
export type JobSlashLiquidityEvent = TypedEvent<[string, string, string, BigNumber], JobSlashLiquidityEventObject>;

export type JobSlashLiquidityEventFilter = TypedEventFilter<JobSlashLiquidityEvent>;

export interface JobSlashTokenEventObject {
  _job: string;
  _token: string;
  _slasher: string;
  _amount: BigNumber;
}
export type JobSlashTokenEvent = TypedEvent<[string, string, string, BigNumber], JobSlashTokenEventObject>;

export type JobSlashTokenEventFilter = TypedEventFilter<JobSlashTokenEvent>;

export interface Keep3rHelperChangeEventObject {
  _keep3rHelper: string;
}
export type Keep3rHelperChangeEvent = TypedEvent<[string], Keep3rHelperChangeEventObject>;

export type Keep3rHelperChangeEventFilter = TypedEventFilter<Keep3rHelperChangeEvent>;

export interface Keep3rV1ChangeEventObject {
  _keep3rV1: string;
}
export type Keep3rV1ChangeEvent = TypedEvent<[string], Keep3rV1ChangeEventObject>;

export type Keep3rV1ChangeEventFilter = TypedEventFilter<Keep3rV1ChangeEvent>;

export interface Keep3rV1ProxyChangeEventObject {
  _keep3rV1Proxy: string;
}
export type Keep3rV1ProxyChangeEvent = TypedEvent<[string], Keep3rV1ProxyChangeEventObject>;

export type Keep3rV1ProxyChangeEventFilter = TypedEventFilter<Keep3rV1ProxyChangeEvent>;

export interface KeeperRevokeEventObject {
  _keeper: string;
  _slasher: string;
}
export type KeeperRevokeEvent = TypedEvent<[string, string], KeeperRevokeEventObject>;

export type KeeperRevokeEventFilter = TypedEventFilter<KeeperRevokeEvent>;

export interface KeeperSlashEventObject {
  _keeper: string;
  _slasher: string;
  _amount: BigNumber;
}
export type KeeperSlashEvent = TypedEvent<[string, string, BigNumber], KeeperSlashEventObject>;

export type KeeperSlashEventFilter = TypedEventFilter<KeeperSlashEvent>;

export interface KeeperValidationEventObject {
  _gasLeft: BigNumber;
}
export type KeeperValidationEvent = TypedEvent<[BigNumber], KeeperValidationEventObject>;

export type KeeperValidationEventFilter = TypedEventFilter<KeeperValidationEvent>;

export interface KeeperWorkEventObject {
  _credit: string;
  _job: string;
  _keeper: string;
  _payment: BigNumber;
  _gasLeft: BigNumber;
}
export type KeeperWorkEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], KeeperWorkEventObject>;

export type KeeperWorkEventFilter = TypedEventFilter<KeeperWorkEvent>;

export interface Kp3rWethPoolChangeEventObject {
  _kp3rWethPool: string;
}
export type Kp3rWethPoolChangeEvent = TypedEvent<[string], Kp3rWethPoolChangeEventObject>;

export type Kp3rWethPoolChangeEventFilter = TypedEventFilter<Kp3rWethPoolChangeEvent>;

export interface LiquidityAdditionEventObject {
  _job: string;
  _liquidity: string;
  _provider: string;
  _amount: BigNumber;
}
export type LiquidityAdditionEvent = TypedEvent<[string, string, string, BigNumber], LiquidityAdditionEventObject>;

export type LiquidityAdditionEventFilter = TypedEventFilter<LiquidityAdditionEvent>;

export interface LiquidityApprovalEventObject {
  _liquidity: string;
}
export type LiquidityApprovalEvent = TypedEvent<[string], LiquidityApprovalEventObject>;

export type LiquidityApprovalEventFilter = TypedEventFilter<LiquidityApprovalEvent>;

export interface LiquidityCreditsForcedEventObject {
  _job: string;
  _rewardedAt: BigNumber;
  _currentCredits: BigNumber;
}
export type LiquidityCreditsForcedEvent = TypedEvent<[string, BigNumber, BigNumber], LiquidityCreditsForcedEventObject>;

export type LiquidityCreditsForcedEventFilter = TypedEventFilter<LiquidityCreditsForcedEvent>;

export interface LiquidityCreditsRewardEventObject {
  _job: string;
  _rewardedAt: BigNumber;
  _currentCredits: BigNumber;
  _periodCredits: BigNumber;
}
export type LiquidityCreditsRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  LiquidityCreditsRewardEventObject
>;

export type LiquidityCreditsRewardEventFilter = TypedEventFilter<LiquidityCreditsRewardEvent>;

export interface LiquidityMinimumChangeEventObject {
  _liquidityMinimum: BigNumber;
}
export type LiquidityMinimumChangeEvent = TypedEvent<[BigNumber], LiquidityMinimumChangeEventObject>;

export type LiquidityMinimumChangeEventFilter = TypedEventFilter<LiquidityMinimumChangeEvent>;

export interface LiquidityRevocationEventObject {
  _liquidity: string;
}
export type LiquidityRevocationEvent = TypedEvent<[string], LiquidityRevocationEventObject>;

export type LiquidityRevocationEventFilter = TypedEventFilter<LiquidityRevocationEvent>;

export interface LiquidityWithdrawalEventObject {
  _job: string;
  _liquidity: string;
  _receiver: string;
  _amount: BigNumber;
}
export type LiquidityWithdrawalEvent = TypedEvent<[string, string, string, BigNumber], LiquidityWithdrawalEventObject>;

export type LiquidityWithdrawalEventFilter = TypedEventFilter<LiquidityWithdrawalEvent>;

export interface ResolveEventObject {
  _jobOrKeeper: string;
  _resolver: string;
}
export type ResolveEvent = TypedEvent<[string, string], ResolveEventObject>;

export type ResolveEventFilter = TypedEventFilter<ResolveEvent>;

export interface RewardPeriodTimeChangeEventObject {
  _rewardPeriodTime: BigNumber;
}
export type RewardPeriodTimeChangeEvent = TypedEvent<[BigNumber], RewardPeriodTimeChangeEventObject>;

export type RewardPeriodTimeChangeEventFilter = TypedEventFilter<RewardPeriodTimeChangeEvent>;

export interface SlasherAddedEventObject {
  _slasher: string;
}
export type SlasherAddedEvent = TypedEvent<[string], SlasherAddedEventObject>;

export type SlasherAddedEventFilter = TypedEventFilter<SlasherAddedEvent>;

export interface SlasherRemovedEventObject {
  _slasher: string;
}
export type SlasherRemovedEvent = TypedEvent<[string], SlasherRemovedEventObject>;

export type SlasherRemovedEventFilter = TypedEventFilter<SlasherRemovedEvent>;

export interface TokenCreditAdditionEventObject {
  _job: string;
  _token: string;
  _provider: string;
  _amount: BigNumber;
}
export type TokenCreditAdditionEvent = TypedEvent<[string, string, string, BigNumber], TokenCreditAdditionEventObject>;

export type TokenCreditAdditionEventFilter = TypedEventFilter<TokenCreditAdditionEvent>;

export interface TokenCreditWithdrawalEventObject {
  _job: string;
  _token: string;
  _receiver: string;
  _amount: BigNumber;
}
export type TokenCreditWithdrawalEvent = TypedEvent<
  [string, string, string, BigNumber],
  TokenCreditWithdrawalEventObject
>;

export type TokenCreditWithdrawalEventFilter = TypedEventFilter<TokenCreditWithdrawalEvent>;

export interface UnbondTimeChangeEventObject {
  _unbondTime: BigNumber;
}
export type UnbondTimeChangeEvent = TypedEvent<[BigNumber], UnbondTimeChangeEventObject>;

export type UnbondTimeChangeEventFilter = TypedEventFilter<UnbondTimeChangeEvent>;

export interface UnbondingEventObject {
  _keeperOrJob: string;
  _unbonding: string;
  _amount: BigNumber;
}
export type UnbondingEvent = TypedEvent<[string, string, BigNumber], UnbondingEventObject>;

export type UnbondingEventFilter = TypedEventFilter<UnbondingEvent>;

export interface WithdrawalEventObject {
  _keeper: string;
  _bond: string;
  _amount: BigNumber;
}
export type WithdrawalEvent = TypedEvent<[string, string, BigNumber], WithdrawalEventObject>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface KeeperJobManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KeeperJobManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptGovernance(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    acceptJobMigration(
      _fromJob: PromiseOrValue<string>,
      _toJob: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    acceptJobOwnership(
      _job: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    activate(
      _bonding: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addDisputer(
      _disputer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addJob(
      _job: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addLiquidityToJob(
      _job: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addSlasher(
      _slasher: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addTokenCreditsToJob(
      _job: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    approveLiquidity(
      _liquidity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    approvedLiquidities(overrides?: CallOverrides): Promise<[string[]] & { _list: string[] }>;

    bond(
      _bonding: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    bondTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    bondedPayment(
      _keeper: PromiseOrValue<string>,
      _payment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    bonds(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    canActivateAfter(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    canWithdrawAfter(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    changeJobOwnership(
      _job: PromiseOrValue<string>,
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    directTokenPayment(
      _token: PromiseOrValue<string>,
      _keeper: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    dispute(
      _jobOrKeeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    disputers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    disputes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    firstSeen(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    forceLiquidityCreditsToJob(
      _job: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    hasBonded(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    inflationPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    isBondedKeeper(
      _keeper: PromiseOrValue<string>,
      _bond: PromiseOrValue<string>,
      _minBond: PromiseOrValue<BigNumberish>,
      _earned: PromiseOrValue<BigNumberish>,
      _age: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    jobLiquidityCredits(
      _job: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { _liquidityCredits: BigNumber }>;

    jobOwner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    jobPendingOwner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    jobPeriodCredits(
      _job: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { _periodCredits: BigNumber }>;

    jobTokenCredits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    jobTokenCreditsAddedAt(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    jobs(overrides?: CallOverrides): Promise<[string[]] & { _list: string[] }>;

    keep3rHelper(overrides?: CallOverrides): Promise<[string]>;

    keep3rV1(overrides?: CallOverrides): Promise<[string]>;

    keep3rV1Proxy(overrides?: CallOverrides): Promise<[string]>;

    keepers(overrides?: CallOverrides): Promise<[string[]] & { _list: string[] }>;

    kp3rWethPool(overrides?: CallOverrides): Promise<[string]>;

    liquidityAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    liquidityMinimum(overrides?: CallOverrides): Promise<[BigNumber]>;

    migrateJob(
      _fromJob: PromiseOrValue<string>,
      _toJob: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    observeLiquidity(
      _liquidity: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [IKeep3rJobFundableLiquidity.TickCacheStructOutput] & {
        _tickCache: IKeep3rJobFundableLiquidity.TickCacheStructOutput;
      }
    >;

    pendingBonds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    pendingGovernance(overrides?: CallOverrides): Promise<[string]>;

    pendingJobMigrations(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    pendingUnbonds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    quoteLiquidity(
      _liquidity: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { _periodCredits: BigNumber }>;

    removeDisputer(
      _disputer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    removeSlasher(
      _slasher: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    resolve(
      _jobOrKeeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    revoke(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    revokeLiquidity(
      _liquidity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    rewardPeriodTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardedAt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    sendDust(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setBondTime(
      _bondTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setInflationPeriod(
      _inflationPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setKeep3rHelper(
      _keep3rHelper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setKeep3rV1(
      _keep3rV1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setKeep3rV1Proxy(
      _keep3rV1Proxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setKp3rWethPool(
      _kp3rWethPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLiquidityMinimum(
      _liquidityMinimum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRewardPeriodTime(
      _rewardPeriodTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setUnbondTime(
      _unbondTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    slash(
      _keeper: PromiseOrValue<string>,
      _bonded: PromiseOrValue<string>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _unbondAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    slashLiquidityFromJob(
      _job: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    slashTokenFromJob(
      _job: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    slashers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    totalJobCredits(
      _job: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { _credits: BigNumber }>;

    unbond(
      _bonding: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unbondLiquidityFromJob(
      _job: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unbondTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _bonding: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawLiquidityFromJob(
      _job: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawTokenCreditsFromJob(
      _job: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    workCompleted(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    worked(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    workedAt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  acceptGovernance(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  acceptJobMigration(
    _fromJob: PromiseOrValue<string>,
    _toJob: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  acceptJobOwnership(
    _job: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  activate(
    _bonding: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addDisputer(
    _disputer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addJob(
    _job: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addLiquidityToJob(
    _job: PromiseOrValue<string>,
    _liquidity: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addSlasher(
    _slasher: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addTokenCreditsToJob(
    _job: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  approveLiquidity(
    _liquidity: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  approvedLiquidities(overrides?: CallOverrides): Promise<string[]>;

  bond(
    _bonding: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  bondTime(overrides?: CallOverrides): Promise<BigNumber>;

  bondedPayment(
    _keeper: PromiseOrValue<string>,
    _payment: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  bonds(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  canActivateAfter(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  canWithdrawAfter(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  changeJobOwnership(
    _job: PromiseOrValue<string>,
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  directTokenPayment(
    _token: PromiseOrValue<string>,
    _keeper: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  dispute(
    _jobOrKeeper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  disputers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  disputes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  firstSeen(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  forceLiquidityCreditsToJob(
    _job: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  governance(overrides?: CallOverrides): Promise<string>;

  hasBonded(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  inflationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  isBondedKeeper(
    _keeper: PromiseOrValue<string>,
    _bond: PromiseOrValue<string>,
    _minBond: PromiseOrValue<BigNumberish>,
    _earned: PromiseOrValue<BigNumberish>,
    _age: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isKeeper(
    _keeper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  jobLiquidityCredits(_job: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  jobOwner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  jobPendingOwner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  jobPeriodCredits(_job: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  jobTokenCredits(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  jobTokenCreditsAddedAt(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  jobs(overrides?: CallOverrides): Promise<string[]>;

  keep3rHelper(overrides?: CallOverrides): Promise<string>;

  keep3rV1(overrides?: CallOverrides): Promise<string>;

  keep3rV1Proxy(overrides?: CallOverrides): Promise<string>;

  keepers(overrides?: CallOverrides): Promise<string[]>;

  kp3rWethPool(overrides?: CallOverrides): Promise<string>;

  liquidityAmount(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  liquidityMinimum(overrides?: CallOverrides): Promise<BigNumber>;

  migrateJob(
    _fromJob: PromiseOrValue<string>,
    _toJob: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  observeLiquidity(
    _liquidity: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<IKeep3rJobFundableLiquidity.TickCacheStructOutput>;

  pendingBonds(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  pendingGovernance(overrides?: CallOverrides): Promise<string>;

  pendingJobMigrations(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  pendingUnbonds(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  quoteLiquidity(
    _liquidity: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  removeDisputer(
    _disputer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  removeSlasher(
    _slasher: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  resolve(
    _jobOrKeeper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  revoke(
    _keeper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  revokeLiquidity(
    _liquidity: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  rewardPeriodTime(overrides?: CallOverrides): Promise<BigNumber>;

  rewardedAt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  sendDust(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setBondTime(
    _bondTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setInflationPeriod(
    _inflationPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setKeep3rHelper(
    _keep3rHelper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setKeep3rV1(
    _keep3rV1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setKeep3rV1Proxy(
    _keep3rV1Proxy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setKp3rWethPool(
    _kp3rWethPool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLiquidityMinimum(
    _liquidityMinimum: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRewardPeriodTime(
    _rewardPeriodTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setUnbondTime(
    _unbondTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  slash(
    _keeper: PromiseOrValue<string>,
    _bonded: PromiseOrValue<string>,
    _bondAmount: PromiseOrValue<BigNumberish>,
    _unbondAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  slashLiquidityFromJob(
    _job: PromiseOrValue<string>,
    _liquidity: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  slashTokenFromJob(
    _job: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  slashers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  totalJobCredits(_job: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  unbond(
    _bonding: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unbondLiquidityFromJob(
    _job: PromiseOrValue<string>,
    _liquidity: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unbondTime(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _bonding: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawLiquidityFromJob(
    _job: PromiseOrValue<string>,
    _liquidity: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawTokenCreditsFromJob(
    _job: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  workCompleted(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  worked(
    _keeper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  workedAt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    acceptJobMigration(
      _fromJob: PromiseOrValue<string>,
      _toJob: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    acceptJobOwnership(_job: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    activate(_bonding: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    addDisputer(_disputer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    addJob(_job: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    addLiquidityToJob(
      _job: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    addSlasher(_slasher: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    addTokenCreditsToJob(
      _job: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    approveLiquidity(_liquidity: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    approvedLiquidities(overrides?: CallOverrides): Promise<string[]>;

    bond(
      _bonding: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    bondTime(overrides?: CallOverrides): Promise<BigNumber>;

    bondedPayment(
      _keeper: PromiseOrValue<string>,
      _payment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    bonds(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    canActivateAfter(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    canWithdrawAfter(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    changeJobOwnership(
      _job: PromiseOrValue<string>,
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    directTokenPayment(
      _token: PromiseOrValue<string>,
      _keeper: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    dispute(_jobOrKeeper: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    disputers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    disputes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    firstSeen(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    forceLiquidityCreditsToJob(
      _job: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    governance(overrides?: CallOverrides): Promise<string>;

    hasBonded(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    inflationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    isBondedKeeper(
      _keeper: PromiseOrValue<string>,
      _bond: PromiseOrValue<string>,
      _minBond: PromiseOrValue<BigNumberish>,
      _earned: PromiseOrValue<BigNumberish>,
      _age: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isKeeper(_keeper: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    jobLiquidityCredits(_job: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    jobOwner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    jobPendingOwner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    jobPeriodCredits(_job: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    jobTokenCredits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    jobTokenCreditsAddedAt(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    jobs(overrides?: CallOverrides): Promise<string[]>;

    keep3rHelper(overrides?: CallOverrides): Promise<string>;

    keep3rV1(overrides?: CallOverrides): Promise<string>;

    keep3rV1Proxy(overrides?: CallOverrides): Promise<string>;

    keepers(overrides?: CallOverrides): Promise<string[]>;

    kp3rWethPool(overrides?: CallOverrides): Promise<string>;

    liquidityAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    liquidityMinimum(overrides?: CallOverrides): Promise<BigNumber>;

    migrateJob(
      _fromJob: PromiseOrValue<string>,
      _toJob: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    observeLiquidity(
      _liquidity: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<IKeep3rJobFundableLiquidity.TickCacheStructOutput>;

    pendingBonds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pendingGovernance(overrides?: CallOverrides): Promise<string>;

    pendingJobMigrations(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    pendingUnbonds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    quoteLiquidity(
      _liquidity: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    removeDisputer(_disputer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    removeSlasher(_slasher: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    resolve(_jobOrKeeper: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    revoke(_keeper: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    revokeLiquidity(_liquidity: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    rewardPeriodTime(overrides?: CallOverrides): Promise<BigNumber>;

    rewardedAt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    sendDust(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setBondTime(_bondTime: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setFee(_fee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setGovernance(_governance: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setInflationPeriod(_inflationPeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setKeep3rHelper(_keep3rHelper: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setKeep3rV1(_keep3rV1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setKeep3rV1Proxy(_keep3rV1Proxy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setKp3rWethPool(_kp3rWethPool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setLiquidityMinimum(_liquidityMinimum: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setRewardPeriodTime(_rewardPeriodTime: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setUnbondTime(_unbondTime: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    slash(
      _keeper: PromiseOrValue<string>,
      _bonded: PromiseOrValue<string>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _unbondAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    slashLiquidityFromJob(
      _job: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    slashTokenFromJob(
      _job: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    slashers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    totalJobCredits(_job: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    unbond(
      _bonding: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    unbondLiquidityFromJob(
      _job: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    unbondTime(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(_bonding: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    withdrawLiquidityFromJob(
      _job: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawTokenCreditsFromJob(
      _job: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    workCompleted(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    worked(_keeper: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    workedAt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'Activation(address,address,uint256)'(
      _keeper?: PromiseOrValue<string> | null,
      _bond?: PromiseOrValue<string> | null,
      _amount?: null,
    ): ActivationEventFilter;
    Activation(
      _keeper?: PromiseOrValue<string> | null,
      _bond?: PromiseOrValue<string> | null,
      _amount?: null,
    ): ActivationEventFilter;

    'BondTimeChange(uint256)'(_bondTime?: null): BondTimeChangeEventFilter;
    BondTimeChange(_bondTime?: null): BondTimeChangeEventFilter;

    'Bonding(address,address,uint256)'(
      _keeper?: PromiseOrValue<string> | null,
      _bonding?: PromiseOrValue<string> | null,
      _amount?: null,
    ): BondingEventFilter;
    Bonding(
      _keeper?: PromiseOrValue<string> | null,
      _bonding?: PromiseOrValue<string> | null,
      _amount?: null,
    ): BondingEventFilter;

    'Dispute(address,address)'(
      _jobOrKeeper?: PromiseOrValue<string> | null,
      _disputer?: PromiseOrValue<string> | null,
    ): DisputeEventFilter;
    Dispute(
      _jobOrKeeper?: PromiseOrValue<string> | null,
      _disputer?: PromiseOrValue<string> | null,
    ): DisputeEventFilter;

    'DisputerAdded(address)'(_disputer?: null): DisputerAddedEventFilter;
    DisputerAdded(_disputer?: null): DisputerAddedEventFilter;

    'DisputerRemoved(address)'(_disputer?: null): DisputerRemovedEventFilter;
    DisputerRemoved(_disputer?: null): DisputerRemovedEventFilter;

    'DustSent(address,uint256,address)'(_token?: null, _amount?: null, _to?: null): DustSentEventFilter;
    DustSent(_token?: null, _amount?: null, _to?: null): DustSentEventFilter;

    'FeeChange(uint256)'(_fee?: null): FeeChangeEventFilter;
    FeeChange(_fee?: null): FeeChangeEventFilter;

    'GovernanceProposal(address)'(_pendingGovernance?: null): GovernanceProposalEventFilter;
    GovernanceProposal(_pendingGovernance?: null): GovernanceProposalEventFilter;

    'GovernanceSet(address)'(_governance?: null): GovernanceSetEventFilter;
    GovernanceSet(_governance?: null): GovernanceSetEventFilter;

    'InflationPeriodChange(uint256)'(_inflationPeriod?: null): InflationPeriodChangeEventFilter;
    InflationPeriodChange(_inflationPeriod?: null): InflationPeriodChangeEventFilter;

    'JobAddition(address,address)'(
      _job?: PromiseOrValue<string> | null,
      _jobOwner?: PromiseOrValue<string> | null,
    ): JobAdditionEventFilter;
    JobAddition(
      _job?: PromiseOrValue<string> | null,
      _jobOwner?: PromiseOrValue<string> | null,
    ): JobAdditionEventFilter;

    'JobMigrationRequested(address,address)'(
      _fromJob?: PromiseOrValue<string> | null,
      _toJob?: null,
    ): JobMigrationRequestedEventFilter;
    JobMigrationRequested(_fromJob?: PromiseOrValue<string> | null, _toJob?: null): JobMigrationRequestedEventFilter;

    'JobMigrationSuccessful(address,address)'(
      _fromJob?: null,
      _toJob?: PromiseOrValue<string> | null,
    ): JobMigrationSuccessfulEventFilter;
    JobMigrationSuccessful(_fromJob?: null, _toJob?: PromiseOrValue<string> | null): JobMigrationSuccessfulEventFilter;

    'JobOwnershipAssent(address,address,address)'(
      _job?: PromiseOrValue<string> | null,
      _previousOwner?: PromiseOrValue<string> | null,
      _newOwner?: PromiseOrValue<string> | null,
    ): JobOwnershipAssentEventFilter;
    JobOwnershipAssent(
      _job?: PromiseOrValue<string> | null,
      _previousOwner?: PromiseOrValue<string> | null,
      _newOwner?: PromiseOrValue<string> | null,
    ): JobOwnershipAssentEventFilter;

    'JobOwnershipChange(address,address,address)'(
      _job?: PromiseOrValue<string> | null,
      _owner?: PromiseOrValue<string> | null,
      _pendingOwner?: PromiseOrValue<string> | null,
    ): JobOwnershipChangeEventFilter;
    JobOwnershipChange(
      _job?: PromiseOrValue<string> | null,
      _owner?: PromiseOrValue<string> | null,
      _pendingOwner?: PromiseOrValue<string> | null,
    ): JobOwnershipChangeEventFilter;

    'JobSlashLiquidity(address,address,address,uint256)'(
      _job?: PromiseOrValue<string> | null,
      _liquidity?: null,
      _slasher?: PromiseOrValue<string> | null,
      _amount?: null,
    ): JobSlashLiquidityEventFilter;
    JobSlashLiquidity(
      _job?: PromiseOrValue<string> | null,
      _liquidity?: null,
      _slasher?: PromiseOrValue<string> | null,
      _amount?: null,
    ): JobSlashLiquidityEventFilter;

    'JobSlashToken(address,address,address,uint256)'(
      _job?: PromiseOrValue<string> | null,
      _token?: null,
      _slasher?: PromiseOrValue<string> | null,
      _amount?: null,
    ): JobSlashTokenEventFilter;
    JobSlashToken(
      _job?: PromiseOrValue<string> | null,
      _token?: null,
      _slasher?: PromiseOrValue<string> | null,
      _amount?: null,
    ): JobSlashTokenEventFilter;

    'Keep3rHelperChange(address)'(_keep3rHelper?: null): Keep3rHelperChangeEventFilter;
    Keep3rHelperChange(_keep3rHelper?: null): Keep3rHelperChangeEventFilter;

    'Keep3rV1Change(address)'(_keep3rV1?: null): Keep3rV1ChangeEventFilter;
    Keep3rV1Change(_keep3rV1?: null): Keep3rV1ChangeEventFilter;

    'Keep3rV1ProxyChange(address)'(_keep3rV1Proxy?: null): Keep3rV1ProxyChangeEventFilter;
    Keep3rV1ProxyChange(_keep3rV1Proxy?: null): Keep3rV1ProxyChangeEventFilter;

    'KeeperRevoke(address,address)'(
      _keeper?: PromiseOrValue<string> | null,
      _slasher?: PromiseOrValue<string> | null,
    ): KeeperRevokeEventFilter;
    KeeperRevoke(
      _keeper?: PromiseOrValue<string> | null,
      _slasher?: PromiseOrValue<string> | null,
    ): KeeperRevokeEventFilter;

    'KeeperSlash(address,address,uint256)'(
      _keeper?: PromiseOrValue<string> | null,
      _slasher?: PromiseOrValue<string> | null,
      _amount?: null,
    ): KeeperSlashEventFilter;
    KeeperSlash(
      _keeper?: PromiseOrValue<string> | null,
      _slasher?: PromiseOrValue<string> | null,
      _amount?: null,
    ): KeeperSlashEventFilter;

    'KeeperValidation(uint256)'(_gasLeft?: null): KeeperValidationEventFilter;
    KeeperValidation(_gasLeft?: null): KeeperValidationEventFilter;

    'KeeperWork(address,address,address,uint256,uint256)'(
      _credit?: PromiseOrValue<string> | null,
      _job?: PromiseOrValue<string> | null,
      _keeper?: PromiseOrValue<string> | null,
      _payment?: null,
      _gasLeft?: null,
    ): KeeperWorkEventFilter;
    KeeperWork(
      _credit?: PromiseOrValue<string> | null,
      _job?: PromiseOrValue<string> | null,
      _keeper?: PromiseOrValue<string> | null,
      _payment?: null,
      _gasLeft?: null,
    ): KeeperWorkEventFilter;

    'Kp3rWethPoolChange(address)'(_kp3rWethPool?: null): Kp3rWethPoolChangeEventFilter;
    Kp3rWethPoolChange(_kp3rWethPool?: null): Kp3rWethPoolChangeEventFilter;

    'LiquidityAddition(address,address,address,uint256)'(
      _job?: PromiseOrValue<string> | null,
      _liquidity?: PromiseOrValue<string> | null,
      _provider?: PromiseOrValue<string> | null,
      _amount?: null,
    ): LiquidityAdditionEventFilter;
    LiquidityAddition(
      _job?: PromiseOrValue<string> | null,
      _liquidity?: PromiseOrValue<string> | null,
      _provider?: PromiseOrValue<string> | null,
      _amount?: null,
    ): LiquidityAdditionEventFilter;

    'LiquidityApproval(address)'(_liquidity?: null): LiquidityApprovalEventFilter;
    LiquidityApproval(_liquidity?: null): LiquidityApprovalEventFilter;

    'LiquidityCreditsForced(address,uint256,uint256)'(
      _job?: PromiseOrValue<string> | null,
      _rewardedAt?: null,
      _currentCredits?: null,
    ): LiquidityCreditsForcedEventFilter;
    LiquidityCreditsForced(
      _job?: PromiseOrValue<string> | null,
      _rewardedAt?: null,
      _currentCredits?: null,
    ): LiquidityCreditsForcedEventFilter;

    'LiquidityCreditsReward(address,uint256,uint256,uint256)'(
      _job?: PromiseOrValue<string> | null,
      _rewardedAt?: null,
      _currentCredits?: null,
      _periodCredits?: null,
    ): LiquidityCreditsRewardEventFilter;
    LiquidityCreditsReward(
      _job?: PromiseOrValue<string> | null,
      _rewardedAt?: null,
      _currentCredits?: null,
      _periodCredits?: null,
    ): LiquidityCreditsRewardEventFilter;

    'LiquidityMinimumChange(uint256)'(_liquidityMinimum?: null): LiquidityMinimumChangeEventFilter;
    LiquidityMinimumChange(_liquidityMinimum?: null): LiquidityMinimumChangeEventFilter;

    'LiquidityRevocation(address)'(_liquidity?: null): LiquidityRevocationEventFilter;
    LiquidityRevocation(_liquidity?: null): LiquidityRevocationEventFilter;

    'LiquidityWithdrawal(address,address,address,uint256)'(
      _job?: PromiseOrValue<string> | null,
      _liquidity?: PromiseOrValue<string> | null,
      _receiver?: PromiseOrValue<string> | null,
      _amount?: null,
    ): LiquidityWithdrawalEventFilter;
    LiquidityWithdrawal(
      _job?: PromiseOrValue<string> | null,
      _liquidity?: PromiseOrValue<string> | null,
      _receiver?: PromiseOrValue<string> | null,
      _amount?: null,
    ): LiquidityWithdrawalEventFilter;

    'Resolve(address,address)'(
      _jobOrKeeper?: PromiseOrValue<string> | null,
      _resolver?: PromiseOrValue<string> | null,
    ): ResolveEventFilter;
    Resolve(
      _jobOrKeeper?: PromiseOrValue<string> | null,
      _resolver?: PromiseOrValue<string> | null,
    ): ResolveEventFilter;

    'RewardPeriodTimeChange(uint256)'(_rewardPeriodTime?: null): RewardPeriodTimeChangeEventFilter;
    RewardPeriodTimeChange(_rewardPeriodTime?: null): RewardPeriodTimeChangeEventFilter;

    'SlasherAdded(address)'(_slasher?: null): SlasherAddedEventFilter;
    SlasherAdded(_slasher?: null): SlasherAddedEventFilter;

    'SlasherRemoved(address)'(_slasher?: null): SlasherRemovedEventFilter;
    SlasherRemoved(_slasher?: null): SlasherRemovedEventFilter;

    'TokenCreditAddition(address,address,address,uint256)'(
      _job?: PromiseOrValue<string> | null,
      _token?: PromiseOrValue<string> | null,
      _provider?: PromiseOrValue<string> | null,
      _amount?: null,
    ): TokenCreditAdditionEventFilter;
    TokenCreditAddition(
      _job?: PromiseOrValue<string> | null,
      _token?: PromiseOrValue<string> | null,
      _provider?: PromiseOrValue<string> | null,
      _amount?: null,
    ): TokenCreditAdditionEventFilter;

    'TokenCreditWithdrawal(address,address,address,uint256)'(
      _job?: PromiseOrValue<string> | null,
      _token?: PromiseOrValue<string> | null,
      _receiver?: PromiseOrValue<string> | null,
      _amount?: null,
    ): TokenCreditWithdrawalEventFilter;
    TokenCreditWithdrawal(
      _job?: PromiseOrValue<string> | null,
      _token?: PromiseOrValue<string> | null,
      _receiver?: PromiseOrValue<string> | null,
      _amount?: null,
    ): TokenCreditWithdrawalEventFilter;

    'UnbondTimeChange(uint256)'(_unbondTime?: null): UnbondTimeChangeEventFilter;
    UnbondTimeChange(_unbondTime?: null): UnbondTimeChangeEventFilter;

    'Unbonding(address,address,uint256)'(
      _keeperOrJob?: PromiseOrValue<string> | null,
      _unbonding?: PromiseOrValue<string> | null,
      _amount?: null,
    ): UnbondingEventFilter;
    Unbonding(
      _keeperOrJob?: PromiseOrValue<string> | null,
      _unbonding?: PromiseOrValue<string> | null,
      _amount?: null,
    ): UnbondingEventFilter;

    'Withdrawal(address,address,uint256)'(
      _keeper?: PromiseOrValue<string> | null,
      _bond?: PromiseOrValue<string> | null,
      _amount?: null,
    ): WithdrawalEventFilter;
    Withdrawal(
      _keeper?: PromiseOrValue<string> | null,
      _bond?: PromiseOrValue<string> | null,
      _amount?: null,
    ): WithdrawalEventFilter;
  };

  estimateGas: {
    acceptGovernance(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    acceptJobMigration(
      _fromJob: PromiseOrValue<string>,
      _toJob: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    acceptJobOwnership(
      _job: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    activate(
      _bonding: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addDisputer(
      _disputer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addJob(_job: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    addLiquidityToJob(
      _job: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addSlasher(
      _slasher: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addTokenCreditsToJob(
      _job: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    approveLiquidity(
      _liquidity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    approvedLiquidities(overrides?: CallOverrides): Promise<BigNumber>;

    bond(
      _bonding: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    bondTime(overrides?: CallOverrides): Promise<BigNumber>;

    bondedPayment(
      _keeper: PromiseOrValue<string>,
      _payment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    bonds(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    canActivateAfter(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    canWithdrawAfter(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    changeJobOwnership(
      _job: PromiseOrValue<string>,
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    directTokenPayment(
      _token: PromiseOrValue<string>,
      _keeper: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    dispute(
      _jobOrKeeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    disputers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    disputes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    firstSeen(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    forceLiquidityCreditsToJob(
      _job: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    hasBonded(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    inflationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    isBondedKeeper(
      _keeper: PromiseOrValue<string>,
      _bond: PromiseOrValue<string>,
      _minBond: PromiseOrValue<BigNumberish>,
      _earned: PromiseOrValue<BigNumberish>,
      _age: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    jobLiquidityCredits(_job: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    jobOwner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    jobPendingOwner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    jobPeriodCredits(_job: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    jobTokenCredits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    jobTokenCreditsAddedAt(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    jobs(overrides?: CallOverrides): Promise<BigNumber>;

    keep3rHelper(overrides?: CallOverrides): Promise<BigNumber>;

    keep3rV1(overrides?: CallOverrides): Promise<BigNumber>;

    keep3rV1Proxy(overrides?: CallOverrides): Promise<BigNumber>;

    keepers(overrides?: CallOverrides): Promise<BigNumber>;

    kp3rWethPool(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    liquidityMinimum(overrides?: CallOverrides): Promise<BigNumber>;

    migrateJob(
      _fromJob: PromiseOrValue<string>,
      _toJob: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    observeLiquidity(_liquidity: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    pendingBonds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pendingGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    pendingJobMigrations(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    pendingUnbonds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    quoteLiquidity(
      _liquidity: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    removeDisputer(
      _disputer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    removeSlasher(
      _slasher: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    resolve(
      _jobOrKeeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    revoke(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    revokeLiquidity(
      _liquidity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    rewardPeriodTime(overrides?: CallOverrides): Promise<BigNumber>;

    rewardedAt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    sendDust(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setBondTime(
      _bondTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setGovernance(
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setInflationPeriod(
      _inflationPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setKeep3rHelper(
      _keep3rHelper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setKeep3rV1(
      _keep3rV1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setKeep3rV1Proxy(
      _keep3rV1Proxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setKp3rWethPool(
      _kp3rWethPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLiquidityMinimum(
      _liquidityMinimum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRewardPeriodTime(
      _rewardPeriodTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setUnbondTime(
      _unbondTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    slash(
      _keeper: PromiseOrValue<string>,
      _bonded: PromiseOrValue<string>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _unbondAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    slashLiquidityFromJob(
      _job: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    slashTokenFromJob(
      _job: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    slashers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    totalJobCredits(_job: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    unbond(
      _bonding: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unbondLiquidityFromJob(
      _job: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unbondTime(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _bonding: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawLiquidityFromJob(
      _job: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawTokenCreditsFromJob(
      _job: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    workCompleted(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    worked(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    workedAt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernance(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    acceptJobMigration(
      _fromJob: PromiseOrValue<string>,
      _toJob: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    acceptJobOwnership(
      _job: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    activate(
      _bonding: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addDisputer(
      _disputer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addJob(
      _job: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addLiquidityToJob(
      _job: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addSlasher(
      _slasher: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addTokenCreditsToJob(
      _job: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    approveLiquidity(
      _liquidity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    approvedLiquidities(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bond(
      _bonding: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    bondTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondedPayment(
      _keeper: PromiseOrValue<string>,
      _payment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    bonds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    canActivateAfter(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    canWithdrawAfter(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    changeJobOwnership(
      _job: PromiseOrValue<string>,
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    directTokenPayment(
      _token: PromiseOrValue<string>,
      _keeper: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    dispute(
      _jobOrKeeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    disputers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disputes(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstSeen(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forceLiquidityCreditsToJob(
      _job: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasBonded(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inflationPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isBondedKeeper(
      _keeper: PromiseOrValue<string>,
      _bond: PromiseOrValue<string>,
      _minBond: PromiseOrValue<BigNumberish>,
      _earned: PromiseOrValue<BigNumberish>,
      _age: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    jobLiquidityCredits(_job: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jobOwner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jobPendingOwner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jobPeriodCredits(_job: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jobTokenCredits(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    jobTokenCreditsAddedAt(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    jobs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keep3rHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keep3rV1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keep3rV1Proxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keepers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kp3rWethPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    liquidityMinimum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateJob(
      _fromJob: PromiseOrValue<string>,
      _toJob: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    observeLiquidity(_liquidity: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingBonds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    pendingGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingJobMigrations(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingUnbonds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    quoteLiquidity(
      _liquidity: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    removeDisputer(
      _disputer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    removeSlasher(
      _slasher: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    resolve(
      _jobOrKeeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    revoke(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    revokeLiquidity(
      _liquidity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    rewardPeriodTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardedAt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendDust(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setBondTime(
      _bondTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setInflationPeriod(
      _inflationPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setKeep3rHelper(
      _keep3rHelper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setKeep3rV1(
      _keep3rV1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setKeep3rV1Proxy(
      _keep3rV1Proxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setKp3rWethPool(
      _kp3rWethPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLiquidityMinimum(
      _liquidityMinimum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRewardPeriodTime(
      _rewardPeriodTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setUnbondTime(
      _unbondTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    slash(
      _keeper: PromiseOrValue<string>,
      _bonded: PromiseOrValue<string>,
      _bondAmount: PromiseOrValue<BigNumberish>,
      _unbondAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    slashLiquidityFromJob(
      _job: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    slashTokenFromJob(
      _job: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    slashers(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalJobCredits(_job: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unbond(
      _bonding: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unbondLiquidityFromJob(
      _job: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unbondTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _bonding: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawLiquidityFromJob(
      _job: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawTokenCreditsFromJob(
      _job: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    workCompleted(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    worked(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    workedAt(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
