/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface KeeperRedeemableTokenInterface extends utils.Interface {
  functions: {
    'acceptGov()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'assetToAsset(address,uint256,address,uint32)': FunctionFragment;
    'assetToEth(address,uint256,uint32)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'calc(uint256)': FunctionFragment;
    'claim(uint256)': FunctionFragment;
    'claim()': FunctionFragment;
    'commitDiscount()': FunctionFragment;
    'commitTreasury()': FunctionFragment;
    'decimals()': FunctionFragment;
    'delayDiscount()': FunctionFragment;
    'delayGov()': FunctionFragment;
    'delayTreasury()': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'discount()': FunctionFragment;
    'ethToAsset(uint256,address,uint32)': FunctionFragment;
    'gov()': FunctionFragment;
    'name()': FunctionFragment;
    'nextDiscount()': FunctionFragment;
    'nextGov()': FunctionFragment;
    'nextIndex()': FunctionFragment;
    'nextTreasury()': FunctionFragment;
    'oKP3R()': FunctionFragment;
    'options(uint256)': FunctionFragment;
    'price()': FunctionFragment;
    'redeem(uint256)': FunctionFragment;
    'refund(uint256[])': FunctionFragment;
    'setDiscount(uint256)': FunctionFragment;
    'setGov(address)': FunctionFragment;
    'setTreasury(address)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'treasury()': FunctionFragment;
    'twap()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptGov'
      | 'allowance'
      | 'approve'
      | 'assetToAsset'
      | 'assetToEth'
      | 'balanceOf'
      | 'calc'
      | 'claim(uint256)'
      | 'claim()'
      | 'commitDiscount'
      | 'commitTreasury'
      | 'decimals'
      | 'delayDiscount'
      | 'delayGov'
      | 'delayTreasury'
      | 'deposit'
      | 'discount'
      | 'ethToAsset'
      | 'gov'
      | 'name'
      | 'nextDiscount'
      | 'nextGov'
      | 'nextIndex'
      | 'nextTreasury'
      | 'oKP3R'
      | 'options'
      | 'price'
      | 'redeem'
      | 'refund'
      | 'setDiscount'
      | 'setGov'
      | 'setTreasury'
      | 'symbol'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'treasury'
      | 'twap',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'acceptGov', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'assetToAsset',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'assetToEth',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'calc', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'claim(uint256)', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'claim()', values?: undefined): string;
  encodeFunctionData(functionFragment: 'commitDiscount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'commitTreasury', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'delayDiscount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'delayGov', values?: undefined): string;
  encodeFunctionData(functionFragment: 'delayTreasury', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'discount', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'ethToAsset',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'gov', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nextDiscount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nextGov', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nextIndex', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nextTreasury', values?: undefined): string;
  encodeFunctionData(functionFragment: 'oKP3R', values?: undefined): string;
  encodeFunctionData(functionFragment: 'options', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'price', values?: undefined): string;
  encodeFunctionData(functionFragment: 'redeem', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'refund', values: [PromiseOrValue<BigNumberish>[]]): string;
  encodeFunctionData(functionFragment: 'setDiscount', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setGov', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setTreasury', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'treasury', values?: undefined): string;
  encodeFunctionData(functionFragment: 'twap', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'acceptGov', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'assetToAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'assetToEth', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calc', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim(uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'commitDiscount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'commitTreasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delayDiscount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delayGov', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delayTreasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'discount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ethToAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gov', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nextDiscount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nextGov', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nextIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nextTreasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'oKP3R', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'options', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'price', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'refund', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDiscount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGov', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTreasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'twap', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Created(address,uint256,uint256,uint256,uint256)': EventFragment;
    'Redeem(address,address,uint256,uint256,uint256)': EventFragment;
    'Refund(address,address,uint256,uint256,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Created'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Redeem'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Refund'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  amount: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface CreatedEventObject {
  owner: string;
  amount: BigNumber;
  strike: BigNumber;
  expiry: BigNumber;
  id: BigNumber;
}
export type CreatedEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber, BigNumber], CreatedEventObject>;

export type CreatedEventFilter = TypedEventFilter<CreatedEvent>;

export interface RedeemEventObject {
  from: string;
  owner: string;
  amount: BigNumber;
  strike: BigNumber;
  id: BigNumber;
}
export type RedeemEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber], RedeemEventObject>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface RefundEventObject {
  from: string;
  owner: string;
  amount: BigNumber;
  strike: BigNumber;
  id: BigNumber;
}
export type RefundEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber], RefundEventObject>;

export type RefundEventFilter = TypedEventFilter<RefundEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface KeeperRedeemableToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KeeperRedeemableTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptGov(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    assetToAsset(
      _tokenIn: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _tokenOut: PromiseOrValue<string>,
      _twapPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { ethAmountOut: BigNumber }>;

    assetToEth(
      _tokenIn: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _twapPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { ethAmountOut: BigNumber }>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    calc(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    'claim(uint256)'(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'claim()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    commitDiscount(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    commitTreasury(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    delayDiscount(overrides?: CallOverrides): Promise<[BigNumber]>;

    delayGov(overrides?: CallOverrides): Promise<[BigNumber]>;

    delayTreasury(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    discount(overrides?: CallOverrides): Promise<[BigNumber]>;

    ethToAsset(
      _ethAmountIn: PromiseOrValue<BigNumberish>,
      _tokenOut: PromiseOrValue<string>,
      _twapPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextDiscount(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextGov(overrides?: CallOverrides): Promise<[string]>;

    nextIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextTreasury(overrides?: CallOverrides): Promise<[string]>;

    oKP3R(overrides?: CallOverrides): Promise<[string]>;

    options(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        amount: BigNumber;
        strike: BigNumber;
        expiry: BigNumber;
        exercised: boolean;
      }
    >;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeem(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    refund(
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDiscount(
      _discount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    twap(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  acceptGov(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  allowance(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  assetToAsset(
    _tokenIn: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    _tokenOut: PromiseOrValue<string>,
    _twapPeriod: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  assetToEth(
    _tokenIn: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    _twapPeriod: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  calc(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  'claim(uint256)'(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'claim()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  commitDiscount(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  commitTreasury(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  delayDiscount(overrides?: CallOverrides): Promise<BigNumber>;

  delayGov(overrides?: CallOverrides): Promise<BigNumber>;

  delayTreasury(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  discount(overrides?: CallOverrides): Promise<BigNumber>;

  ethToAsset(
    _ethAmountIn: PromiseOrValue<BigNumberish>,
    _tokenOut: PromiseOrValue<string>,
    _twapPeriod: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  nextDiscount(overrides?: CallOverrides): Promise<BigNumber>;

  nextGov(overrides?: CallOverrides): Promise<string>;

  nextIndex(overrides?: CallOverrides): Promise<BigNumber>;

  nextTreasury(overrides?: CallOverrides): Promise<string>;

  oKP3R(overrides?: CallOverrides): Promise<string>;

  options(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      amount: BigNumber;
      strike: BigNumber;
      expiry: BigNumber;
      exercised: boolean;
    }
  >;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  refund(
    _ids: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDiscount(
    _discount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setGov(
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    dst: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    src: PromiseOrValue<string>,
    dst: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  twap(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    acceptGov(overrides?: CallOverrides): Promise<void>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    assetToAsset(
      _tokenIn: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _tokenOut: PromiseOrValue<string>,
      _twapPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    assetToEth(
      _tokenIn: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _twapPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    calc(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    'claim(uint256)'(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    'claim()'(overrides?: CallOverrides): Promise<BigNumber>;

    commitDiscount(overrides?: CallOverrides): Promise<void>;

    commitTreasury(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    delayDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    delayGov(overrides?: CallOverrides): Promise<BigNumber>;

    delayTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    discount(overrides?: CallOverrides): Promise<BigNumber>;

    ethToAsset(
      _ethAmountIn: PromiseOrValue<BigNumberish>,
      _tokenOut: PromiseOrValue<string>,
      _twapPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    nextDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    nextGov(overrides?: CallOverrides): Promise<string>;

    nextIndex(overrides?: CallOverrides): Promise<BigNumber>;

    nextTreasury(overrides?: CallOverrides): Promise<string>;

    oKP3R(overrides?: CallOverrides): Promise<string>;

    options(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        amount: BigNumber;
        strike: BigNumber;
        expiry: BigNumber;
        exercised: boolean;
      }
    >;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(id: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    refund(_ids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;

    setDiscount(_discount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setGov(_gov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    treasury(overrides?: CallOverrides): Promise<string>;

    twap(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      amount?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      amount?: null,
    ): ApprovalEventFilter;

    'Created(address,uint256,uint256,uint256,uint256)'(
      owner?: PromiseOrValue<string> | null,
      amount?: null,
      strike?: null,
      expiry?: null,
      id?: null,
    ): CreatedEventFilter;
    Created(
      owner?: PromiseOrValue<string> | null,
      amount?: null,
      strike?: null,
      expiry?: null,
      id?: null,
    ): CreatedEventFilter;

    'Redeem(address,address,uint256,uint256,uint256)'(
      from?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      amount?: null,
      strike?: null,
      id?: null,
    ): RedeemEventFilter;
    Redeem(
      from?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      amount?: null,
      strike?: null,
      id?: null,
    ): RedeemEventFilter;

    'Refund(address,address,uint256,uint256,uint256)'(
      from?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      amount?: null,
      strike?: null,
      id?: null,
    ): RefundEventFilter;
    Refund(
      from?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      amount?: null,
      strike?: null,
      id?: null,
    ): RefundEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
    ): TransferEventFilter;
  };

  estimateGas: {
    acceptGov(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    assetToAsset(
      _tokenIn: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _tokenOut: PromiseOrValue<string>,
      _twapPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    assetToEth(
      _tokenIn: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _twapPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    calc(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    'claim(uint256)'(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'claim()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    commitDiscount(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    commitTreasury(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    delayDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    delayGov(overrides?: CallOverrides): Promise<BigNumber>;

    delayTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    discount(overrides?: CallOverrides): Promise<BigNumber>;

    ethToAsset(
      _ethAmountIn: PromiseOrValue<BigNumberish>,
      _tokenOut: PromiseOrValue<string>,
      _twapPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    nextGov(overrides?: CallOverrides): Promise<BigNumber>;

    nextIndex(overrides?: CallOverrides): Promise<BigNumber>;

    nextTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    oKP3R(overrides?: CallOverrides): Promise<BigNumber>;

    options(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    refund(
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDiscount(
      _discount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setGov(_gov: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    twap(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGov(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    assetToAsset(
      _tokenIn: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _tokenOut: PromiseOrValue<string>,
      _twapPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    assetToEth(
      _tokenIn: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _twapPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calc(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'claim(uint256)'(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'claim()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    commitDiscount(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    commitTreasury(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delayDiscount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delayGov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delayTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    discount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethToAsset(
      _ethAmountIn: PromiseOrValue<BigNumberish>,
      _tokenOut: PromiseOrValue<string>,
      _twapPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextDiscount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextGov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oKP3R(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    options(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    refund(
      _ids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDiscount(
      _discount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    twap(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
