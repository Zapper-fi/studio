/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface InsuraceStakersPoolV2Interface extends utils.Interface {
  functions: {
    'addStkAmount(address,uint256)': FunctionFragment;
    'claimPayout(address,address,uint256,address,uint256,uint256,uint256)': FunctionFragment;
    'getPoolRewardPerLPToken(address)': FunctionFragment;
    'getRewardPerBlockPerPool(address)': FunctionFragment;
    'getRewardToken()': FunctionFragment;
    'getStakedAmountPT(address)': FunctionFragment;
    'harvestRewards(address,address,address)': FunctionFragment;
    'harvestedRewardsPerAPerLPT(address,address)': FunctionFragment;
    'initializeStakersPoolV2()': FunctionFragment;
    'insurTokenAddress()': FunctionFragment;
    'nonceFlagMap(uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'paused()': FunctionFragment;
    'poolLastCalcBlock(address)': FunctionFragment;
    'poolRewardPerLPToken(address)': FunctionFragment;
    'poolWeightPT(address)': FunctionFragment;
    'reCalcPoolPT(address)': FunctionFragment;
    'rebalancePools(uint256,address[],uint256[],uint256,uint8[],bytes32[],bytes32[])': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardEndBlock()': FunctionFragment;
    'rewardPerBlock()': FunctionFragment;
    'rewardStartBlock()': FunctionFragment;
    'securityMatrix()': FunctionFragment;
    'setPoolWeight(address,uint256,address[])': FunctionFragment;
    'setRewardInfo(uint256,uint256,uint256,address[])': FunctionFragment;
    'setStakersPoolSigner(address,bool)': FunctionFragment;
    'settlePendingRewards(address,address)': FunctionFragment;
    'setup(address,address)': FunctionFragment;
    'showHarvestRewards(address,address)': FunctionFragment;
    'showPendingRewards(address,address)': FunctionFragment;
    'signerFlagMap(address)': FunctionFragment;
    'stakedAmountPT(address)': FunctionFragment;
    'stkRewardsPerAPerLPT(address,address)': FunctionFragment;
    'totalPoolWeight()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'withdrawTokens(address,uint256,address,address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addStkAmount'
      | 'claimPayout'
      | 'getPoolRewardPerLPToken'
      | 'getRewardPerBlockPerPool'
      | 'getRewardToken'
      | 'getStakedAmountPT'
      | 'harvestRewards'
      | 'harvestedRewardsPerAPerLPT'
      | 'initializeStakersPoolV2'
      | 'insurTokenAddress'
      | 'nonceFlagMap'
      | 'owner'
      | 'paused'
      | 'poolLastCalcBlock'
      | 'poolRewardPerLPToken'
      | 'poolWeightPT'
      | 'reCalcPoolPT'
      | 'rebalancePools'
      | 'renounceOwnership'
      | 'rewardEndBlock'
      | 'rewardPerBlock'
      | 'rewardStartBlock'
      | 'securityMatrix'
      | 'setPoolWeight'
      | 'setRewardInfo'
      | 'setStakersPoolSigner'
      | 'settlePendingRewards'
      | 'setup'
      | 'showHarvestRewards'
      | 'showPendingRewards'
      | 'signerFlagMap'
      | 'stakedAmountPT'
      | 'stkRewardsPerAPerLPT'
      | 'totalPoolWeight'
      | 'transferOwnership'
      | 'withdrawTokens',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addStkAmount',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'claimPayout',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'getPoolRewardPerLPToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getRewardPerBlockPerPool', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getRewardToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getStakedAmountPT', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'harvestRewards',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'harvestedRewardsPerAPerLPT',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'initializeStakersPoolV2', values?: undefined): string;
  encodeFunctionData(functionFragment: 'insurTokenAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonceFlagMap', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolLastCalcBlock', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'poolRewardPerLPToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'poolWeightPT', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'reCalcPoolPT', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'rebalancePools',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>[],
    ],
  ): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardEndBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardPerBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardStartBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'securityMatrix', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setPoolWeight',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'setRewardInfo',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'setStakersPoolSigner',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'settlePendingRewards',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'setup', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'showHarvestRewards',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'showPendingRewards',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'signerFlagMap', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'stakedAmountPT', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'stkRewardsPerAPerLPT',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'totalPoolWeight', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'withdrawTokens',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;

  decodeFunctionResult(functionFragment: 'addStkAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimPayout', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolRewardPerLPToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardPerBlockPerPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStakedAmountPT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvestRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvestedRewardsPerAPerLPT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initializeStakersPoolV2', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'insurTokenAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonceFlagMap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolLastCalcBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolRewardPerLPToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolWeightPT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reCalcPoolPT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rebalancePools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardEndBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardPerBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardStartBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'securityMatrix', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPoolWeight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewardInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setStakersPoolSigner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'settlePendingRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setup', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'showHarvestRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'showPendingRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'signerFlagMap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakedAmountPT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stkRewardsPerAPerLPT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalPoolWeight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawTokens', data: BytesLike): Result;

  events: {
    'ClaimPayoutEvent(address,address,uint256,uint256,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'SetRewardInfo(uint256,uint256,uint256)': EventFragment;
    'SetStakersPoolSignerEvent(address,bool)': EventFragment;
    'StakedAmountPTEvent(address,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ClaimPayoutEvent'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetRewardInfo'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetStakersPoolSignerEvent'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StakedAmountPTEvent'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export interface ClaimPayoutEventEventObject {
  _fromToken: string;
  _paymentToken: string;
  _settleAmtPT: BigNumber;
  _claimId: BigNumber;
  _fromRate: BigNumber;
  _toRate: BigNumber;
}
export type ClaimPayoutEventEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  ClaimPayoutEventEventObject
>;

export type ClaimPayoutEventEventFilter = TypedEventFilter<ClaimPayoutEventEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SetRewardInfoEventObject {
  _rewardStartBlock: BigNumber;
  _rewardEndBlock: BigNumber;
  _rewardPerBlock: BigNumber;
}
export type SetRewardInfoEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], SetRewardInfoEventObject>;

export type SetRewardInfoEventFilter = TypedEventFilter<SetRewardInfoEvent>;

export interface SetStakersPoolSignerEventEventObject {
  signer: string;
  enabled: boolean;
}
export type SetStakersPoolSignerEventEvent = TypedEvent<[string, boolean], SetStakersPoolSignerEventEventObject>;

export type SetStakersPoolSignerEventEventFilter = TypedEventFilter<SetStakersPoolSignerEventEvent>;

export interface StakedAmountPTEventEventObject {
  _token: string;
  _amount: BigNumber;
}
export type StakedAmountPTEventEvent = TypedEvent<[string, BigNumber], StakedAmountPTEventEventObject>;

export type StakedAmountPTEventEventFilter = TypedEventFilter<StakedAmountPTEventEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface InsuraceStakersPoolV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InsuraceStakersPoolV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addStkAmount(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimPayout(
      _fromToken: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _settleAmtPT: PromiseOrValue<BigNumberish>,
      _claimToSettlementPool: PromiseOrValue<string>,
      _claimId: PromiseOrValue<BigNumberish>,
      _fromRate: PromiseOrValue<BigNumberish>,
      _toRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getPoolRewardPerLPToken(_lpToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardPerBlockPerPool(_lpToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardToken(overrides?: CallOverrides): Promise<[string]>;

    getStakedAmountPT(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    harvestRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    harvestedRewardsPerAPerLPT(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    initializeStakersPoolV2(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    insurTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    nonceFlagMap(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    poolLastCalcBlock(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    poolRewardPerLPToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    poolWeightPT(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    reCalcPoolPT(
      _lpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    rebalancePools(
      _rewardPerBlock: PromiseOrValue<BigNumberish>,
      _lpTokens: PromiseOrValue<string>[],
      _weightList: PromiseOrValue<BigNumberish>[],
      _nounce: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>[],
      r: PromiseOrValue<BytesLike>[],
      s: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    rewardEndBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardStartBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    securityMatrix(overrides?: CallOverrides): Promise<[string]>;

    setPoolWeight(
      _lpToken: PromiseOrValue<string>,
      _poolWeightPT: PromiseOrValue<BigNumberish>,
      _lpTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRewardInfo(
      _rewardStartBlock: PromiseOrValue<BigNumberish>,
      _rewardEndBlock: PromiseOrValue<BigNumberish>,
      _rewardPerBlock: PromiseOrValue<BigNumberish>,
      _lpTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setStakersPoolSigner(
      signer: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    settlePendingRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setup(
      _securityMatrix: PromiseOrValue<string>,
      _insurTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    showHarvestRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    showPendingRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    signerFlagMap(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    stakedAmountPT(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    stkRewardsPerAPerLPT(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    totalPoolWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawTokens(
      _to: PromiseOrValue<string>,
      _withdrawAmtAfterFee: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _feePool: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  addStkAmount(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimPayout(
    _fromToken: PromiseOrValue<string>,
    _paymentToken: PromiseOrValue<string>,
    _settleAmtPT: PromiseOrValue<BigNumberish>,
    _claimToSettlementPool: PromiseOrValue<string>,
    _claimId: PromiseOrValue<BigNumberish>,
    _fromRate: PromiseOrValue<BigNumberish>,
    _toRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getPoolRewardPerLPToken(_lpToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getRewardPerBlockPerPool(_lpToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getRewardToken(overrides?: CallOverrides): Promise<string>;

  getStakedAmountPT(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  harvestRewards(
    _account: PromiseOrValue<string>,
    _lpToken: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  harvestedRewardsPerAPerLPT(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  initializeStakersPoolV2(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  insurTokenAddress(overrides?: CallOverrides): Promise<string>;

  nonceFlagMap(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  poolLastCalcBlock(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  poolRewardPerLPToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  poolWeightPT(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  reCalcPoolPT(
    _lpToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  rebalancePools(
    _rewardPerBlock: PromiseOrValue<BigNumberish>,
    _lpTokens: PromiseOrValue<string>[],
    _weightList: PromiseOrValue<BigNumberish>[],
    _nounce: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>[],
    r: PromiseOrValue<BytesLike>[],
    s: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  rewardEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  rewardStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

  securityMatrix(overrides?: CallOverrides): Promise<string>;

  setPoolWeight(
    _lpToken: PromiseOrValue<string>,
    _poolWeightPT: PromiseOrValue<BigNumberish>,
    _lpTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRewardInfo(
    _rewardStartBlock: PromiseOrValue<BigNumberish>,
    _rewardEndBlock: PromiseOrValue<BigNumberish>,
    _rewardPerBlock: PromiseOrValue<BigNumberish>,
    _lpTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setStakersPoolSigner(
    signer: PromiseOrValue<string>,
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  settlePendingRewards(
    _account: PromiseOrValue<string>,
    _lpToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setup(
    _securityMatrix: PromiseOrValue<string>,
    _insurTokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  showHarvestRewards(
    _account: PromiseOrValue<string>,
    _lpToken: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  showPendingRewards(
    _account: PromiseOrValue<string>,
    _lpToken: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  signerFlagMap(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  stakedAmountPT(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  stkRewardsPerAPerLPT(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  totalPoolWeight(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawTokens(
    _to: PromiseOrValue<string>,
    _withdrawAmtAfterFee: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    _feePool: PromiseOrValue<string>,
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    addStkAmount(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    claimPayout(
      _fromToken: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _settleAmtPT: PromiseOrValue<BigNumberish>,
      _claimToSettlementPool: PromiseOrValue<string>,
      _claimId: PromiseOrValue<BigNumberish>,
      _fromRate: PromiseOrValue<BigNumberish>,
      _toRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getPoolRewardPerLPToken(_lpToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRewardPerBlockPerPool(_lpToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRewardToken(overrides?: CallOverrides): Promise<string>;

    getStakedAmountPT(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    harvestRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    harvestedRewardsPerAPerLPT(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initializeStakersPoolV2(overrides?: CallOverrides): Promise<void>;

    insurTokenAddress(overrides?: CallOverrides): Promise<string>;

    nonceFlagMap(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    poolLastCalcBlock(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    poolRewardPerLPToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    poolWeightPT(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    reCalcPoolPT(_lpToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    rebalancePools(
      _rewardPerBlock: PromiseOrValue<BigNumberish>,
      _lpTokens: PromiseOrValue<string>[],
      _weightList: PromiseOrValue<BigNumberish>[],
      _nounce: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>[],
      r: PromiseOrValue<BytesLike>[],
      s: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    rewardStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    securityMatrix(overrides?: CallOverrides): Promise<string>;

    setPoolWeight(
      _lpToken: PromiseOrValue<string>,
      _poolWeightPT: PromiseOrValue<BigNumberish>,
      _lpTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    setRewardInfo(
      _rewardStartBlock: PromiseOrValue<BigNumberish>,
      _rewardEndBlock: PromiseOrValue<BigNumberish>,
      _rewardPerBlock: PromiseOrValue<BigNumberish>,
      _lpTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    setStakersPoolSigner(
      signer: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    settlePendingRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setup(
      _securityMatrix: PromiseOrValue<string>,
      _insurTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    showHarvestRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    showPendingRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    signerFlagMap(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    stakedAmountPT(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    stkRewardsPerAPerLPT(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalPoolWeight(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    withdrawTokens(
      _to: PromiseOrValue<string>,
      _withdrawAmtAfterFee: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _feePool: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'ClaimPayoutEvent(address,address,uint256,uint256,uint256,uint256)'(
      _fromToken?: null,
      _paymentToken?: null,
      _settleAmtPT?: null,
      _claimId?: null,
      _fromRate?: null,
      _toRate?: null,
    ): ClaimPayoutEventEventFilter;
    ClaimPayoutEvent(
      _fromToken?: null,
      _paymentToken?: null,
      _settleAmtPT?: null,
      _claimId?: null,
      _fromRate?: null,
      _toRate?: null,
    ): ClaimPayoutEventEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'SetRewardInfo(uint256,uint256,uint256)'(
      _rewardStartBlock?: null,
      _rewardEndBlock?: null,
      _rewardPerBlock?: null,
    ): SetRewardInfoEventFilter;
    SetRewardInfo(_rewardStartBlock?: null, _rewardEndBlock?: null, _rewardPerBlock?: null): SetRewardInfoEventFilter;

    'SetStakersPoolSignerEvent(address,bool)'(
      signer?: PromiseOrValue<string> | null,
      enabled?: null,
    ): SetStakersPoolSignerEventEventFilter;
    SetStakersPoolSignerEvent(
      signer?: PromiseOrValue<string> | null,
      enabled?: null,
    ): SetStakersPoolSignerEventEventFilter;

    'StakedAmountPTEvent(address,uint256)'(
      _token?: PromiseOrValue<string> | null,
      _amount?: null,
    ): StakedAmountPTEventEventFilter;
    StakedAmountPTEvent(_token?: PromiseOrValue<string> | null, _amount?: null): StakedAmountPTEventEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    addStkAmount(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimPayout(
      _fromToken: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _settleAmtPT: PromiseOrValue<BigNumberish>,
      _claimToSettlementPool: PromiseOrValue<string>,
      _claimId: PromiseOrValue<BigNumberish>,
      _fromRate: PromiseOrValue<BigNumberish>,
      _toRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getPoolRewardPerLPToken(_lpToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRewardPerBlockPerPool(_lpToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getRewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    getStakedAmountPT(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    harvestRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    harvestedRewardsPerAPerLPT(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initializeStakersPoolV2(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    insurTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    nonceFlagMap(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    poolLastCalcBlock(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    poolRewardPerLPToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    poolWeightPT(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    reCalcPoolPT(
      _lpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    rebalancePools(
      _rewardPerBlock: PromiseOrValue<BigNumberish>,
      _lpTokens: PromiseOrValue<string>[],
      _weightList: PromiseOrValue<BigNumberish>[],
      _nounce: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>[],
      r: PromiseOrValue<BytesLike>[],
      s: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    rewardEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    rewardStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    securityMatrix(overrides?: CallOverrides): Promise<BigNumber>;

    setPoolWeight(
      _lpToken: PromiseOrValue<string>,
      _poolWeightPT: PromiseOrValue<BigNumberish>,
      _lpTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRewardInfo(
      _rewardStartBlock: PromiseOrValue<BigNumberish>,
      _rewardEndBlock: PromiseOrValue<BigNumberish>,
      _rewardPerBlock: PromiseOrValue<BigNumberish>,
      _lpTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setStakersPoolSigner(
      signer: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    settlePendingRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setup(
      _securityMatrix: PromiseOrValue<string>,
      _insurTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    showHarvestRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    showPendingRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    signerFlagMap(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    stakedAmountPT(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    stkRewardsPerAPerLPT(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalPoolWeight(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawTokens(
      _to: PromiseOrValue<string>,
      _withdrawAmtAfterFee: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _feePool: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addStkAmount(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimPayout(
      _fromToken: PromiseOrValue<string>,
      _paymentToken: PromiseOrValue<string>,
      _settleAmtPT: PromiseOrValue<BigNumberish>,
      _claimToSettlementPool: PromiseOrValue<string>,
      _claimId: PromiseOrValue<BigNumberish>,
      _fromRate: PromiseOrValue<BigNumberish>,
      _toRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getPoolRewardPerLPToken(_lpToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardPerBlockPerPool(
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakedAmountPT(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    harvestedRewardsPerAPerLPT(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initializeStakersPoolV2(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    insurTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonceFlagMap(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolLastCalcBlock(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolRewardPerLPToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolWeightPT(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reCalcPoolPT(
      _lpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    rebalancePools(
      _rewardPerBlock: PromiseOrValue<BigNumberish>,
      _lpTokens: PromiseOrValue<string>[],
      _weightList: PromiseOrValue<BigNumberish>[],
      _nounce: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>[],
      r: PromiseOrValue<BytesLike>[],
      s: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    rewardEndBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardStartBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    securityMatrix(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPoolWeight(
      _lpToken: PromiseOrValue<string>,
      _poolWeightPT: PromiseOrValue<BigNumberish>,
      _lpTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRewardInfo(
      _rewardStartBlock: PromiseOrValue<BigNumberish>,
      _rewardEndBlock: PromiseOrValue<BigNumberish>,
      _rewardPerBlock: PromiseOrValue<BigNumberish>,
      _lpTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setStakersPoolSigner(
      signer: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    settlePendingRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setup(
      _securityMatrix: PromiseOrValue<string>,
      _insurTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    showHarvestRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    showPendingRewards(
      _account: PromiseOrValue<string>,
      _lpToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    signerFlagMap(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakedAmountPT(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stkRewardsPerAPerLPT(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    totalPoolWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      _to: PromiseOrValue<string>,
      _withdrawAmtAfterFee: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      _feePool: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
