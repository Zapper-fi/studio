/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface GammaStrategiesHypervisorInterface extends utils.Interface {
  functions: {
    'PRECISION()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'appendList(address[])': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'baseLower()': FunctionFragment;
    'baseUpper()': FunctionFragment;
    'currentTick()': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'deposit(uint256,uint256,address)': FunctionFragment;
    'deposit0Max()': FunctionFragment;
    'deposit1Max()': FunctionFragment;
    'emergencyBurn(int24,int24,uint128)': FunctionFragment;
    'emergencyWithdraw(address,uint256)': FunctionFragment;
    'fee()': FunctionFragment;
    'getBasePosition()': FunctionFragment;
    'getLimitPosition()': FunctionFragment;
    'getTotalAmounts()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'limitLower()': FunctionFragment;
    'limitUpper()': FunctionFragment;
    'list(address)': FunctionFragment;
    'maxTotalSupply()': FunctionFragment;
    'name()': FunctionFragment;
    'owner()': FunctionFragment;
    'pool()': FunctionFragment;
    'rebalance(int24,int24,int24,int24,address,int256)': FunctionFragment;
    'setDepositMax(uint256,uint256)': FunctionFragment;
    'setMaxTotalSupply(uint256)': FunctionFragment;
    'symbol()': FunctionFragment;
    'tickSpacing()': FunctionFragment;
    'toggleWhitelist()': FunctionFragment;
    'token0()': FunctionFragment;
    'token1()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'uniswapV3MintCallback(uint256,uint256,bytes)': FunctionFragment;
    'uniswapV3SwapCallback(int256,int256,bytes)': FunctionFragment;
    'whitelisted()': FunctionFragment;
    'withdraw(uint256,address,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'PRECISION'
      | 'allowance'
      | 'appendList'
      | 'approve'
      | 'balanceOf'
      | 'baseLower'
      | 'baseUpper'
      | 'currentTick'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit'
      | 'deposit0Max'
      | 'deposit1Max'
      | 'emergencyBurn'
      | 'emergencyWithdraw'
      | 'fee'
      | 'getBasePosition'
      | 'getLimitPosition'
      | 'getTotalAmounts'
      | 'increaseAllowance'
      | 'limitLower'
      | 'limitUpper'
      | 'list'
      | 'maxTotalSupply'
      | 'name'
      | 'owner'
      | 'pool'
      | 'rebalance'
      | 'setDepositMax'
      | 'setMaxTotalSupply'
      | 'symbol'
      | 'tickSpacing'
      | 'toggleWhitelist'
      | 'token0'
      | 'token1'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'uniswapV3MintCallback'
      | 'uniswapV3SwapCallback'
      | 'whitelisted'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'appendList', values: [PromiseOrValue<string>[]]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'baseLower', values?: undefined): string;
  encodeFunctionData(functionFragment: 'baseUpper', values?: undefined): string;
  encodeFunctionData(functionFragment: 'currentTick', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'deposit0Max', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit1Max', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'emergencyBurn',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'emergencyWithdraw',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'fee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getBasePosition', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLimitPosition', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getTotalAmounts', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'limitLower', values?: undefined): string;
  encodeFunctionData(functionFragment: 'limitUpper', values?: undefined): string;
  encodeFunctionData(functionFragment: 'list', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maxTotalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pool', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'rebalance',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDepositMax',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setMaxTotalSupply', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tickSpacing', values?: undefined): string;
  encodeFunctionData(functionFragment: 'toggleWhitelist', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token0', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token1', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'uniswapV3MintCallback',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'uniswapV3SwapCallback',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'whitelisted', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(functionFragment: 'PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'appendList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'baseLower', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'baseUpper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentTick', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit0Max', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit1Max', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyBurn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBasePosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLimitPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalAmounts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'limitLower', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'limitUpper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'list', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxTotalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rebalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDepositMax', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxTotalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tickSpacing', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'toggleWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token0', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token1', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'uniswapV3MintCallback', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'uniswapV3SwapCallback', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelisted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Deposit(address,address,uint256,uint256,uint256)': EventFragment;
    'Rebalance(int24,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Withdraw(address,address,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Rebalance'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DepositEventObject {
  sender: string;
  to: string;
  shares: BigNumber;
  amount0: BigNumber;
  amount1: BigNumber;
}
export type DepositEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface RebalanceEventObject {
  tick: number;
  totalAmount0: BigNumber;
  totalAmount1: BigNumber;
  feeAmount0: BigNumber;
  feeAmount1: BigNumber;
  totalSupply: BigNumber;
}
export type RebalanceEvent = TypedEvent<
  [number, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  RebalanceEventObject
>;

export type RebalanceEventFilter = TypedEventFilter<RebalanceEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawEventObject {
  sender: string;
  to: string;
  shares: BigNumber;
  amount0: BigNumber;
  amount1: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface GammaStrategiesHypervisor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GammaStrategiesHypervisorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    appendList(
      listed: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseLower(overrides?: CallOverrides): Promise<[number]>;

    baseUpper(overrides?: CallOverrides): Promise<[number]>;

    currentTick(overrides?: CallOverrides): Promise<[number] & { tick: number }>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deposit(
      deposit0: PromiseOrValue<BigNumberish>,
      deposit1: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deposit0Max(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit1Max(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyBurn(
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[number]>;

    getBasePosition(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    getLimitPosition(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    getTotalAmounts(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { total0: BigNumber; total1: BigNumber }>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    limitLower(overrides?: CallOverrides): Promise<[number]>;

    limitUpper(overrides?: CallOverrides): Promise<[number]>;

    list(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    maxTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    rebalance(
      _baseLower: PromiseOrValue<BigNumberish>,
      _baseUpper: PromiseOrValue<BigNumberish>,
      _limitLower: PromiseOrValue<BigNumberish>,
      _limitUpper: PromiseOrValue<BigNumberish>,
      feeRecipient: PromiseOrValue<string>,
      swapQuantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDepositMax(
      _deposit0Max: PromiseOrValue<BigNumberish>,
      _deposit1Max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxTotalSupply(
      _maxTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tickSpacing(overrides?: CallOverrides): Promise<[number]>;

    toggleWhitelist(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    token0(overrides?: CallOverrides): Promise<[string]>;

    token1(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    uniswapV3MintCallback(
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: PromiseOrValue<BigNumberish>,
      amount1Delta: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    whitelisted(overrides?: CallOverrides): Promise<[boolean]>;

    withdraw(
      shares: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  appendList(
    listed: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  baseLower(overrides?: CallOverrides): Promise<number>;

  baseUpper(overrides?: CallOverrides): Promise<number>;

  currentTick(overrides?: CallOverrides): Promise<number>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deposit(
    deposit0: PromiseOrValue<BigNumberish>,
    deposit1: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deposit0Max(overrides?: CallOverrides): Promise<BigNumber>;

  deposit1Max(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyBurn(
    tickLower: PromiseOrValue<BigNumberish>,
    tickUpper: PromiseOrValue<BigNumberish>,
    liquidity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<number>;

  getBasePosition(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      liquidity: BigNumber;
      amount0: BigNumber;
      amount1: BigNumber;
    }
  >;

  getLimitPosition(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      liquidity: BigNumber;
      amount0: BigNumber;
      amount1: BigNumber;
    }
  >;

  getTotalAmounts(
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { total0: BigNumber; total1: BigNumber }>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  limitLower(overrides?: CallOverrides): Promise<number>;

  limitUpper(overrides?: CallOverrides): Promise<number>;

  list(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  maxTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pool(overrides?: CallOverrides): Promise<string>;

  rebalance(
    _baseLower: PromiseOrValue<BigNumberish>,
    _baseUpper: PromiseOrValue<BigNumberish>,
    _limitLower: PromiseOrValue<BigNumberish>,
    _limitUpper: PromiseOrValue<BigNumberish>,
    feeRecipient: PromiseOrValue<string>,
    swapQuantity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDepositMax(
    _deposit0Max: PromiseOrValue<BigNumberish>,
    _deposit1Max: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxTotalSupply(
    _maxTotalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tickSpacing(overrides?: CallOverrides): Promise<number>;

  toggleWhitelist(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  token0(overrides?: CallOverrides): Promise<string>;

  token1(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  uniswapV3MintCallback(
    amount0: PromiseOrValue<BigNumberish>,
    amount1: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  uniswapV3SwapCallback(
    amount0Delta: PromiseOrValue<BigNumberish>,
    amount1Delta: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  whitelisted(overrides?: CallOverrides): Promise<boolean>;

  withdraw(
    shares: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    appendList(listed: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    baseLower(overrides?: CallOverrides): Promise<number>;

    baseUpper(overrides?: CallOverrides): Promise<number>;

    currentTick(overrides?: CallOverrides): Promise<number>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    deposit(
      deposit0: PromiseOrValue<BigNumberish>,
      deposit1: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    deposit0Max(overrides?: CallOverrides): Promise<BigNumber>;

    deposit1Max(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyBurn(
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    fee(overrides?: CallOverrides): Promise<number>;

    getBasePosition(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    getLimitPosition(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    getTotalAmounts(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { total0: BigNumber; total1: BigNumber }>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    limitLower(overrides?: CallOverrides): Promise<number>;

    limitUpper(overrides?: CallOverrides): Promise<number>;

    list(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    maxTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pool(overrides?: CallOverrides): Promise<string>;

    rebalance(
      _baseLower: PromiseOrValue<BigNumberish>,
      _baseUpper: PromiseOrValue<BigNumberish>,
      _limitLower: PromiseOrValue<BigNumberish>,
      _limitUpper: PromiseOrValue<BigNumberish>,
      feeRecipient: PromiseOrValue<string>,
      swapQuantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDepositMax(
      _deposit0Max: PromiseOrValue<BigNumberish>,
      _deposit1Max: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMaxTotalSupply(_maxTotalSupply: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tickSpacing(overrides?: CallOverrides): Promise<number>;

    toggleWhitelist(overrides?: CallOverrides): Promise<void>;

    token0(overrides?: CallOverrides): Promise<string>;

    token1(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    uniswapV3MintCallback(
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    uniswapV3SwapCallback(
      amount0Delta: PromiseOrValue<BigNumberish>,
      amount1Delta: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    whitelisted(overrides?: CallOverrides): Promise<boolean>;

    withdraw(
      shares: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'Deposit(address,address,uint256,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      shares?: null,
      amount0?: null,
      amount1?: null,
    ): DepositEventFilter;
    Deposit(
      sender?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      shares?: null,
      amount0?: null,
      amount1?: null,
    ): DepositEventFilter;

    'Rebalance(int24,uint256,uint256,uint256,uint256,uint256)'(
      tick?: null,
      totalAmount0?: null,
      totalAmount1?: null,
      feeAmount0?: null,
      feeAmount1?: null,
      totalSupply?: null,
    ): RebalanceEventFilter;
    Rebalance(
      tick?: null,
      totalAmount0?: null,
      totalAmount1?: null,
      feeAmount0?: null,
      feeAmount1?: null,
      totalSupply?: null,
    ): RebalanceEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;

    'Withdraw(address,address,uint256,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      shares?: null,
      amount0?: null,
      amount1?: null,
    ): WithdrawEventFilter;
    Withdraw(
      sender?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      shares?: null,
      amount0?: null,
      amount1?: null,
    ): WithdrawEventFilter;
  };

  estimateGas: {
    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    appendList(
      listed: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    baseLower(overrides?: CallOverrides): Promise<BigNumber>;

    baseUpper(overrides?: CallOverrides): Promise<BigNumber>;

    currentTick(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deposit(
      deposit0: PromiseOrValue<BigNumberish>,
      deposit1: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deposit0Max(overrides?: CallOverrides): Promise<BigNumber>;

    deposit1Max(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyBurn(
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    getBasePosition(overrides?: CallOverrides): Promise<BigNumber>;

    getLimitPosition(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalAmounts(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    limitLower(overrides?: CallOverrides): Promise<BigNumber>;

    limitUpper(overrides?: CallOverrides): Promise<BigNumber>;

    list(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(
      _baseLower: PromiseOrValue<BigNumberish>,
      _baseUpper: PromiseOrValue<BigNumberish>,
      _limitLower: PromiseOrValue<BigNumberish>,
      _limitUpper: PromiseOrValue<BigNumberish>,
      feeRecipient: PromiseOrValue<string>,
      swapQuantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDepositMax(
      _deposit0Max: PromiseOrValue<BigNumberish>,
      _deposit1Max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxTotalSupply(
      _maxTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tickSpacing(overrides?: CallOverrides): Promise<BigNumber>;

    toggleWhitelist(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    uniswapV3MintCallback(
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    uniswapV3SwapCallback(
      amount0Delta: PromiseOrValue<BigNumberish>,
      amount1Delta: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    whitelisted(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      shares: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    appendList(
      listed: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseLower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseUpper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentTick(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      deposit0: PromiseOrValue<BigNumberish>,
      deposit1: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deposit0Max(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit1Max(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyBurn(
      tickLower: PromiseOrValue<BigNumberish>,
      tickUpper: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBasePosition(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLimitPosition(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalAmounts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    limitLower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    limitUpper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    list(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalance(
      _baseLower: PromiseOrValue<BigNumberish>,
      _baseUpper: PromiseOrValue<BigNumberish>,
      _limitLower: PromiseOrValue<BigNumberish>,
      _limitUpper: PromiseOrValue<BigNumberish>,
      feeRecipient: PromiseOrValue<string>,
      swapQuantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDepositMax(
      _deposit0Max: PromiseOrValue<BigNumberish>,
      _deposit1Max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxTotalSupply(
      _maxTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tickSpacing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleWhitelist(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    uniswapV3MintCallback(
      amount0: PromiseOrValue<BigNumberish>,
      amount1: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: PromiseOrValue<BigNumberish>,
      amount1Delta: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    whitelisted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      shares: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
