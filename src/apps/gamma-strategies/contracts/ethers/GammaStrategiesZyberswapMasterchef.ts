/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface GammaStrategiesZyberswapMasterchefInterface extends utils.Interface {
  functions: {
    'MAXIMUM_DEPOSIT_FEE_RATE()': FunctionFragment;
    'MAXIMUM_HARVEST_INTERVAL()': FunctionFragment;
    'add(uint256,address,uint16,uint256,address[])': FunctionFragment;
    'canHarvest(uint256,address)': FunctionFragment;
    'deposit(uint256,uint256)': FunctionFragment;
    'depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'emergencyWithdraw(uint256)': FunctionFragment;
    'feeAddress()': FunctionFragment;
    'getZyberPerSec()': FunctionFragment;
    'harvestMany(uint256[])': FunctionFragment;
    'marketingAddress()': FunctionFragment;
    'marketingPercent()': FunctionFragment;
    'massUpdatePools()': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingTokens(uint256,address)': FunctionFragment;
    'poolInfo(uint256)': FunctionFragment;
    'poolLength()': FunctionFragment;
    'poolRewarders(uint256)': FunctionFragment;
    'poolRewardsPerSec(uint256)': FunctionFragment;
    'poolTotalLp(uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'set(uint256,uint256,uint16,uint256,address[])': FunctionFragment;
    'setFeeAddress(address)': FunctionFragment;
    'setMarketingAddress(address)': FunctionFragment;
    'setMarketingPercent(uint256)': FunctionFragment;
    'setTeamAddress(address)': FunctionFragment;
    'setTeamPercent(uint256)': FunctionFragment;
    'startFarming()': FunctionFragment;
    'startTimestamp()': FunctionFragment;
    'teamAddress()': FunctionFragment;
    'teamPercent()': FunctionFragment;
    'totalAllocPoint()': FunctionFragment;
    'totalLockedUpRewards()': FunctionFragment;
    'totalZyberInPools()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateAllocPoint(uint256,uint256)': FunctionFragment;
    'updateEmissionRate(uint256)': FunctionFragment;
    'updatePool(uint256)': FunctionFragment;
    'userInfo(uint256,address)': FunctionFragment;
    'withdraw(uint256,uint256)': FunctionFragment;
    'zyber()': FunctionFragment;
    'zyberPerSec()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'MAXIMUM_DEPOSIT_FEE_RATE'
      | 'MAXIMUM_HARVEST_INTERVAL'
      | 'add'
      | 'canHarvest'
      | 'deposit'
      | 'depositWithPermit'
      | 'emergencyWithdraw'
      | 'feeAddress'
      | 'getZyberPerSec'
      | 'harvestMany'
      | 'marketingAddress'
      | 'marketingPercent'
      | 'massUpdatePools'
      | 'owner'
      | 'pendingTokens'
      | 'poolInfo'
      | 'poolLength'
      | 'poolRewarders'
      | 'poolRewardsPerSec'
      | 'poolTotalLp'
      | 'renounceOwnership'
      | 'set'
      | 'setFeeAddress'
      | 'setMarketingAddress'
      | 'setMarketingPercent'
      | 'setTeamAddress'
      | 'setTeamPercent'
      | 'startFarming'
      | 'startTimestamp'
      | 'teamAddress'
      | 'teamPercent'
      | 'totalAllocPoint'
      | 'totalLockedUpRewards'
      | 'totalZyberInPools'
      | 'transferOwnership'
      | 'updateAllocPoint'
      | 'updateEmissionRate'
      | 'updatePool'
      | 'userInfo'
      | 'withdraw'
      | 'zyber'
      | 'zyberPerSec',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'MAXIMUM_DEPOSIT_FEE_RATE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAXIMUM_HARVEST_INTERVAL', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'add',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'canHarvest',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositWithPermit',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'emergencyWithdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'feeAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getZyberPerSec', values?: undefined): string;
  encodeFunctionData(functionFragment: 'harvestMany', values: [PromiseOrValue<BigNumberish>[]]): string;
  encodeFunctionData(functionFragment: 'marketingAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'marketingPercent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'massUpdatePools', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'pendingTokens',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'poolInfo', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'poolLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolRewarders', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'poolRewardsPerSec', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'poolTotalLp', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'set',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
    ],
  ): string;
  encodeFunctionData(functionFragment: 'setFeeAddress', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setMarketingAddress', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setMarketingPercent', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setTeamAddress', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setTeamPercent', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'startFarming', values?: undefined): string;
  encodeFunctionData(functionFragment: 'startTimestamp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'teamAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'teamPercent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalAllocPoint', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalLockedUpRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalZyberInPools', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'updateAllocPoint',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'updateEmissionRate', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updatePool', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'userInfo',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'zyber', values?: undefined): string;
  encodeFunctionData(functionFragment: 'zyberPerSec', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'MAXIMUM_DEPOSIT_FEE_RATE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAXIMUM_HARVEST_INTERVAL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'add', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'canHarvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositWithPermit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getZyberPerSec', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvestMany', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketingAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'marketingPercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'massUpdatePools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolRewarders', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolRewardsPerSec', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolTotalLp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMarketingAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMarketingPercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTeamAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTeamPercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startFarming', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'teamAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'teamPercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAllocPoint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalLockedUpRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalZyberInPools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateAllocPoint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateEmissionRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'zyber', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'zyberPerSec', data: BytesLike): Result;

  events: {
    'Add(uint256,uint256,address,uint16,uint256,address[])': EventFragment;
    'AllocPointsUpdated(address,uint256,uint256)': EventFragment;
    'Deposit(address,uint256,uint256)': EventFragment;
    'EmergencyWithdraw(address,uint256,uint256)': EventFragment;
    'EmissionRateUpdated(address,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'RewardLockedUp(address,uint256,uint256)': EventFragment;
    'Set(uint256,uint256,uint16,uint256,address[])': EventFragment;
    'SetFeeAddress(address,address)': EventFragment;
    'SetInvestorAddress(address,address)': EventFragment;
    'SetTeamAddress(address,address)': EventFragment;
    'SetTeamPercent(uint256,uint256)': EventFragment;
    'SetmarketingAddress(address,address)': EventFragment;
    'SetmarketingPercent(uint256,uint256)': EventFragment;
    'UpdatePool(uint256,uint256,uint256,uint256)': EventFragment;
    'Withdraw(address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Add'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AllocPointsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmissionRateUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardLockedUp'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Set'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetFeeAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetInvestorAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetTeamAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetTeamPercent'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetmarketingAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetmarketingPercent'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatePool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface AddEventObject {
  pid: BigNumber;
  allocPoint: BigNumber;
  lpToken: string;
  depositFeeBP: number;
  harvestInterval: BigNumber;
  rewarders: string[];
}
export type AddEvent = TypedEvent<[BigNumber, BigNumber, string, number, BigNumber, string[]], AddEventObject>;

export type AddEventFilter = TypedEventFilter<AddEvent>;

export interface AllocPointsUpdatedEventObject {
  caller: string;
  previousAmount: BigNumber;
  newAmount: BigNumber;
}
export type AllocPointsUpdatedEvent = TypedEvent<[string, BigNumber, BigNumber], AllocPointsUpdatedEventObject>;

export type AllocPointsUpdatedEventFilter = TypedEventFilter<AllocPointsUpdatedEvent>;

export interface DepositEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EmergencyWithdrawEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], EmergencyWithdrawEventObject>;

export type EmergencyWithdrawEventFilter = TypedEventFilter<EmergencyWithdrawEvent>;

export interface EmissionRateUpdatedEventObject {
  caller: string;
  previousValue: BigNumber;
  newValue: BigNumber;
}
export type EmissionRateUpdatedEvent = TypedEvent<[string, BigNumber, BigNumber], EmissionRateUpdatedEventObject>;

export type EmissionRateUpdatedEventFilter = TypedEventFilter<EmissionRateUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RewardLockedUpEventObject {
  user: string;
  pid: BigNumber;
  amountLockedUp: BigNumber;
}
export type RewardLockedUpEvent = TypedEvent<[string, BigNumber, BigNumber], RewardLockedUpEventObject>;

export type RewardLockedUpEventFilter = TypedEventFilter<RewardLockedUpEvent>;

export interface SetEventObject {
  pid: BigNumber;
  allocPoint: BigNumber;
  depositFeeBP: number;
  harvestInterval: BigNumber;
  rewarders: string[];
}
export type SetEvent = TypedEvent<[BigNumber, BigNumber, number, BigNumber, string[]], SetEventObject>;

export type SetEventFilter = TypedEventFilter<SetEvent>;

export interface SetFeeAddressEventObject {
  oldAddress: string;
  newAddress: string;
}
export type SetFeeAddressEvent = TypedEvent<[string, string], SetFeeAddressEventObject>;

export type SetFeeAddressEventFilter = TypedEventFilter<SetFeeAddressEvent>;

export interface SetInvestorAddressEventObject {
  oldAddress: string;
  newAddress: string;
}
export type SetInvestorAddressEvent = TypedEvent<[string, string], SetInvestorAddressEventObject>;

export type SetInvestorAddressEventFilter = TypedEventFilter<SetInvestorAddressEvent>;

export interface SetTeamAddressEventObject {
  oldAddress: string;
  newAddress: string;
}
export type SetTeamAddressEvent = TypedEvent<[string, string], SetTeamAddressEventObject>;

export type SetTeamAddressEventFilter = TypedEventFilter<SetTeamAddressEvent>;

export interface SetTeamPercentEventObject {
  oldPercent: BigNumber;
  newPercent: BigNumber;
}
export type SetTeamPercentEvent = TypedEvent<[BigNumber, BigNumber], SetTeamPercentEventObject>;

export type SetTeamPercentEventFilter = TypedEventFilter<SetTeamPercentEvent>;

export interface SetmarketingAddressEventObject {
  oldAddress: string;
  newAddress: string;
}
export type SetmarketingAddressEvent = TypedEvent<[string, string], SetmarketingAddressEventObject>;

export type SetmarketingAddressEventFilter = TypedEventFilter<SetmarketingAddressEvent>;

export interface SetmarketingPercentEventObject {
  oldPercent: BigNumber;
  newPercent: BigNumber;
}
export type SetmarketingPercentEvent = TypedEvent<[BigNumber, BigNumber], SetmarketingPercentEventObject>;

export type SetmarketingPercentEventFilter = TypedEventFilter<SetmarketingPercentEvent>;

export interface UpdatePoolEventObject {
  pid: BigNumber;
  lastRewardTimestamp: BigNumber;
  lpSupply: BigNumber;
  accZyberPerShare: BigNumber;
}
export type UpdatePoolEvent = TypedEvent<[BigNumber, BigNumber, BigNumber, BigNumber], UpdatePoolEventObject>;

export type UpdatePoolEventFilter = TypedEventFilter<UpdatePoolEvent>;

export interface WithdrawEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface GammaStrategiesZyberswapMasterchef extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GammaStrategiesZyberswapMasterchefInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAXIMUM_DEPOSIT_FEE_RATE(overrides?: CallOverrides): Promise<[number]>;

    MAXIMUM_HARVEST_INTERVAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    add(
      _allocPoint: PromiseOrValue<BigNumberish>,
      _lpToken: PromiseOrValue<string>,
      _depositFeeBP: PromiseOrValue<BigNumberish>,
      _harvestInterval: PromiseOrValue<BigNumberish>,
      _rewarders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    canHarvest(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    deposit(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositWithPermit(
      pid: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    feeAddress(overrides?: CallOverrides): Promise<[string]>;

    getZyberPerSec(overrides?: CallOverrides): Promise<[BigNumber]>;

    harvestMany(
      _pids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    marketingAddress(overrides?: CallOverrides): Promise<[string]>;

    marketingPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    massUpdatePools(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingTokens(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], string[], BigNumber[], BigNumber[]] & {
        addresses: string[];
        symbols: string[];
        decimals: BigNumber[];
        amounts: BigNumber[];
      }
    >;

    poolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardTimestamp: BigNumber;
        accZyberPerShare: BigNumber;
        depositFeeBP: number;
        harvestInterval: BigNumber;
        totalLp: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolRewarders(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string[]] & { rewarders: string[] }>;

    poolRewardsPerSec(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], string[], BigNumber[], BigNumber[]] & {
        addresses: string[];
        symbols: string[];
        decimals: BigNumber[];
        rewardsPerSec: BigNumber[];
      }
    >;

    poolTotalLp(pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    set(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _depositFeeBP: PromiseOrValue<BigNumberish>,
      _harvestInterval: PromiseOrValue<BigNumberish>,
      _rewarders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFeeAddress(
      _feeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMarketingAddress(
      _marketingAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMarketingPercent(
      _newmarketingPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTeamAddress(
      _teamAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTeamPercent(
      _newTeamPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    startFarming(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    startTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    teamAddress(overrides?: CallOverrides): Promise<[string]>;

    teamPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLockedUpRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalZyberInPools(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateAllocPoint(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateEmissionRate(
      _zyberPerSec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updatePool(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardLockedUp: BigNumber;
        nextHarvestUntil: BigNumber;
      }
    >;

    withdraw(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    zyber(overrides?: CallOverrides): Promise<[string]>;

    zyberPerSec(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  MAXIMUM_DEPOSIT_FEE_RATE(overrides?: CallOverrides): Promise<number>;

  MAXIMUM_HARVEST_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

  add(
    _allocPoint: PromiseOrValue<BigNumberish>,
    _lpToken: PromiseOrValue<string>,
    _depositFeeBP: PromiseOrValue<BigNumberish>,
    _harvestInterval: PromiseOrValue<BigNumberish>,
    _rewarders: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  canHarvest(
    _pid: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  deposit(
    _pid: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositWithPermit(
    pid: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  feeAddress(overrides?: CallOverrides): Promise<string>;

  getZyberPerSec(overrides?: CallOverrides): Promise<BigNumber>;

  harvestMany(
    _pids: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  marketingAddress(overrides?: CallOverrides): Promise<string>;

  marketingPercent(overrides?: CallOverrides): Promise<BigNumber>;

  massUpdatePools(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingTokens(
    _pid: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [string[], string[], BigNumber[], BigNumber[]] & {
      addresses: string[];
      symbols: string[];
      decimals: BigNumber[];
      amounts: BigNumber[];
    }
  >;

  poolInfo(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
      lpToken: string;
      allocPoint: BigNumber;
      lastRewardTimestamp: BigNumber;
      accZyberPerShare: BigNumber;
      depositFeeBP: number;
      harvestInterval: BigNumber;
      totalLp: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  poolRewarders(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string[]>;

  poolRewardsPerSec(
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string[], string[], BigNumber[], BigNumber[]] & {
      addresses: string[];
      symbols: string[];
      decimals: BigNumber[];
      rewardsPerSec: BigNumber[];
    }
  >;

  poolTotalLp(pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  set(
    _pid: PromiseOrValue<BigNumberish>,
    _allocPoint: PromiseOrValue<BigNumberish>,
    _depositFeeBP: PromiseOrValue<BigNumberish>,
    _harvestInterval: PromiseOrValue<BigNumberish>,
    _rewarders: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFeeAddress(
    _feeAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMarketingAddress(
    _marketingAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMarketingPercent(
    _newmarketingPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTeamAddress(
    _teamAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTeamPercent(
    _newTeamPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  startFarming(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  teamAddress(overrides?: CallOverrides): Promise<string>;

  teamPercent(overrides?: CallOverrides): Promise<BigNumber>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  totalLockedUpRewards(overrides?: CallOverrides): Promise<BigNumber>;

  totalZyberInPools(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateAllocPoint(
    _pid: PromiseOrValue<BigNumberish>,
    _allocPoint: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateEmissionRate(
    _zyberPerSec: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updatePool(
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      rewardLockedUp: BigNumber;
      nextHarvestUntil: BigNumber;
    }
  >;

  withdraw(
    _pid: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  zyber(overrides?: CallOverrides): Promise<string>;

  zyberPerSec(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    MAXIMUM_DEPOSIT_FEE_RATE(overrides?: CallOverrides): Promise<number>;

    MAXIMUM_HARVEST_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _allocPoint: PromiseOrValue<BigNumberish>,
      _lpToken: PromiseOrValue<string>,
      _depositFeeBP: PromiseOrValue<BigNumberish>,
      _harvestInterval: PromiseOrValue<BigNumberish>,
      _rewarders: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    canHarvest(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    deposit(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositWithPermit(
      pid: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    emergencyWithdraw(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    feeAddress(overrides?: CallOverrides): Promise<string>;

    getZyberPerSec(overrides?: CallOverrides): Promise<BigNumber>;

    harvestMany(_pids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;

    marketingAddress(overrides?: CallOverrides): Promise<string>;

    marketingPercent(overrides?: CallOverrides): Promise<BigNumber>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingTokens(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], string[], BigNumber[], BigNumber[]] & {
        addresses: string[];
        symbols: string[];
        decimals: BigNumber[];
        amounts: BigNumber[];
      }
    >;

    poolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardTimestamp: BigNumber;
        accZyberPerShare: BigNumber;
        depositFeeBP: number;
        harvestInterval: BigNumber;
        totalLp: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    poolRewarders(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string[]>;

    poolRewardsPerSec(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], string[], BigNumber[], BigNumber[]] & {
        addresses: string[];
        symbols: string[];
        decimals: BigNumber[];
        rewardsPerSec: BigNumber[];
      }
    >;

    poolTotalLp(pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    set(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _depositFeeBP: PromiseOrValue<BigNumberish>,
      _harvestInterval: PromiseOrValue<BigNumberish>,
      _rewarders: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    setFeeAddress(_feeAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setMarketingAddress(_marketingAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setMarketingPercent(_newmarketingPercent: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setTeamAddress(_teamAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setTeamPercent(_newTeamPercent: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    startFarming(overrides?: CallOverrides): Promise<void>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    teamAddress(overrides?: CallOverrides): Promise<string>;

    teamPercent(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedUpRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalZyberInPools(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateAllocPoint(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateEmissionRate(_zyberPerSec: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updatePool(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardLockedUp: BigNumber;
        nextHarvestUntil: BigNumber;
      }
    >;

    withdraw(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    zyber(overrides?: CallOverrides): Promise<string>;

    zyberPerSec(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'Add(uint256,uint256,address,uint16,uint256,address[])'(
      pid?: PromiseOrValue<BigNumberish> | null,
      allocPoint?: null,
      lpToken?: PromiseOrValue<string> | null,
      depositFeeBP?: null,
      harvestInterval?: null,
      rewarders?: PromiseOrValue<string>[] | null,
    ): AddEventFilter;
    Add(
      pid?: PromiseOrValue<BigNumberish> | null,
      allocPoint?: null,
      lpToken?: PromiseOrValue<string> | null,
      depositFeeBP?: null,
      harvestInterval?: null,
      rewarders?: PromiseOrValue<string>[] | null,
    ): AddEventFilter;

    'AllocPointsUpdated(address,uint256,uint256)'(
      caller?: PromiseOrValue<string> | null,
      previousAmount?: null,
      newAmount?: null,
    ): AllocPointsUpdatedEventFilter;
    AllocPointsUpdated(
      caller?: PromiseOrValue<string> | null,
      previousAmount?: null,
      newAmount?: null,
    ): AllocPointsUpdatedEventFilter;

    'Deposit(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
    ): DepositEventFilter;
    Deposit(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
    ): DepositEventFilter;

    'EmergencyWithdraw(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
    ): EmergencyWithdrawEventFilter;

    'EmissionRateUpdated(address,uint256,uint256)'(
      caller?: PromiseOrValue<string> | null,
      previousValue?: null,
      newValue?: null,
    ): EmissionRateUpdatedEventFilter;
    EmissionRateUpdated(
      caller?: PromiseOrValue<string> | null,
      previousValue?: null,
      newValue?: null,
    ): EmissionRateUpdatedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'RewardLockedUp(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amountLockedUp?: null,
    ): RewardLockedUpEventFilter;
    RewardLockedUp(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amountLockedUp?: null,
    ): RewardLockedUpEventFilter;

    'Set(uint256,uint256,uint16,uint256,address[])'(
      pid?: PromiseOrValue<BigNumberish> | null,
      allocPoint?: null,
      depositFeeBP?: null,
      harvestInterval?: null,
      rewarders?: PromiseOrValue<string>[] | null,
    ): SetEventFilter;
    Set(
      pid?: PromiseOrValue<BigNumberish> | null,
      allocPoint?: null,
      depositFeeBP?: null,
      harvestInterval?: null,
      rewarders?: PromiseOrValue<string>[] | null,
    ): SetEventFilter;

    'SetFeeAddress(address,address)'(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null,
    ): SetFeeAddressEventFilter;
    SetFeeAddress(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null,
    ): SetFeeAddressEventFilter;

    'SetInvestorAddress(address,address)'(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null,
    ): SetInvestorAddressEventFilter;
    SetInvestorAddress(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null,
    ): SetInvestorAddressEventFilter;

    'SetTeamAddress(address,address)'(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null,
    ): SetTeamAddressEventFilter;
    SetTeamAddress(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null,
    ): SetTeamAddressEventFilter;

    'SetTeamPercent(uint256,uint256)'(oldPercent?: null, newPercent?: null): SetTeamPercentEventFilter;
    SetTeamPercent(oldPercent?: null, newPercent?: null): SetTeamPercentEventFilter;

    'SetmarketingAddress(address,address)'(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null,
    ): SetmarketingAddressEventFilter;
    SetmarketingAddress(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null,
    ): SetmarketingAddressEventFilter;

    'SetmarketingPercent(uint256,uint256)'(oldPercent?: null, newPercent?: null): SetmarketingPercentEventFilter;
    SetmarketingPercent(oldPercent?: null, newPercent?: null): SetmarketingPercentEventFilter;

    'UpdatePool(uint256,uint256,uint256,uint256)'(
      pid?: PromiseOrValue<BigNumberish> | null,
      lastRewardTimestamp?: null,
      lpSupply?: null,
      accZyberPerShare?: null,
    ): UpdatePoolEventFilter;
    UpdatePool(
      pid?: PromiseOrValue<BigNumberish> | null,
      lastRewardTimestamp?: null,
      lpSupply?: null,
      accZyberPerShare?: null,
    ): UpdatePoolEventFilter;

    'Withdraw(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
    ): WithdrawEventFilter;
  };

  estimateGas: {
    MAXIMUM_DEPOSIT_FEE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_HARVEST_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _allocPoint: PromiseOrValue<BigNumberish>,
      _lpToken: PromiseOrValue<string>,
      _depositFeeBP: PromiseOrValue<BigNumberish>,
      _harvestInterval: PromiseOrValue<BigNumberish>,
      _rewarders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    canHarvest(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    deposit(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositWithPermit(
      pid: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    feeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getZyberPerSec(overrides?: CallOverrides): Promise<BigNumber>;

    harvestMany(
      _pids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    marketingAddress(overrides?: CallOverrides): Promise<BigNumber>;

    marketingPercent(overrides?: CallOverrides): Promise<BigNumber>;

    massUpdatePools(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingTokens(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    poolInfo(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    poolRewarders(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    poolRewardsPerSec(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    poolTotalLp(pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    set(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _depositFeeBP: PromiseOrValue<BigNumberish>,
      _harvestInterval: PromiseOrValue<BigNumberish>,
      _rewarders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFeeAddress(
      _feeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMarketingAddress(
      _marketingAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMarketingPercent(
      _newmarketingPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTeamAddress(
      _teamAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTeamPercent(
      _newTeamPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    startFarming(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    teamAddress(overrides?: CallOverrides): Promise<BigNumber>;

    teamPercent(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedUpRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalZyberInPools(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateAllocPoint(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateEmissionRate(
      _zyberPerSec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updatePool(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    withdraw(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    zyber(overrides?: CallOverrides): Promise<BigNumber>;

    zyberPerSec(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAXIMUM_DEPOSIT_FEE_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAXIMUM_HARVEST_INTERVAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    add(
      _allocPoint: PromiseOrValue<BigNumberish>,
      _lpToken: PromiseOrValue<string>,
      _depositFeeBP: PromiseOrValue<BigNumberish>,
      _harvestInterval: PromiseOrValue<BigNumberish>,
      _rewarders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    canHarvest(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    deposit(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositWithPermit(
      pid: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    feeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getZyberPerSec(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestMany(
      _pids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    marketingAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketingPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    massUpdatePools(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingTokens(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    poolInfo(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolRewarders(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolRewardsPerSec(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolTotalLp(pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    set(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _depositFeeBP: PromiseOrValue<BigNumberish>,
      _harvestInterval: PromiseOrValue<BigNumberish>,
      _rewarders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFeeAddress(
      _feeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMarketingAddress(
      _marketingAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMarketingPercent(
      _newmarketingPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTeamAddress(
      _teamAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTeamPercent(
      _newTeamPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    startFarming(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    startTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLockedUpRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalZyberInPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateAllocPoint(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateEmissionRate(
      _zyberPerSec: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    withdraw(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    zyber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zyberPerSec(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
