/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace MultipleRewards {
  export type PoolInfoStruct = {
    accTokenPerShare: PromiseOrValue<BigNumberish>;
    startTimestamp: PromiseOrValue<BigNumberish>;
    lastRewardTimestamp: PromiseOrValue<BigNumberish>;
    allocPoint: PromiseOrValue<BigNumberish>;
    totalRewards: PromiseOrValue<BigNumberish>;
  };

  export type PoolInfoStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    accTokenPerShare: BigNumber;
    startTimestamp: BigNumber;
    lastRewardTimestamp: BigNumber;
    allocPoint: BigNumber;
    totalRewards: BigNumber;
  };
}

export interface GammaStrategiesZyberswapRewarderInterface extends utils.Interface {
  functions: {
    '_getTimeElapsed(uint256,uint256,uint256)': FunctionFragment;
    '_updatePool(uint256)': FunctionFragment;
    'add(uint256,uint256,uint256)': FunctionFragment;
    'addRewardInfo(uint256,uint256,uint256)': FunctionFragment;
    'cancelOperator(address)': FunctionFragment;
    'currentEndTimestamp(uint256)': FunctionFragment;
    'distributorV2()': FunctionFragment;
    'emergencyRewardWithdraw(uint256,uint256,address)': FunctionFragment;
    'isNative()': FunctionFragment;
    'massUpdatePools()': FunctionFragment;
    'onZyberReward(uint256,address,uint256)': FunctionFragment;
    'operators(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingTokens(uint256,address)': FunctionFragment;
    'poolIds(uint256)': FunctionFragment;
    'poolInfo(uint256)': FunctionFragment;
    'poolRewardInfo(uint256,uint256)': FunctionFragment;
    'poolRewardsPerSec(uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardInfoLimit()': FunctionFragment;
    'rewardToken()': FunctionFragment;
    'setOperator(address)': FunctionFragment;
    'totalAllocPoint()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updatePool(uint256)': FunctionFragment;
    'userInfo(uint256,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | '_getTimeElapsed'
      | '_updatePool'
      | 'add'
      | 'addRewardInfo'
      | 'cancelOperator'
      | 'currentEndTimestamp'
      | 'distributorV2'
      | 'emergencyRewardWithdraw'
      | 'isNative'
      | 'massUpdatePools'
      | 'onZyberReward'
      | 'operators'
      | 'owner'
      | 'pendingTokens'
      | 'poolIds'
      | 'poolInfo'
      | 'poolRewardInfo'
      | 'poolRewardsPerSec'
      | 'renounceOwnership'
      | 'rewardInfoLimit'
      | 'rewardToken'
      | 'setOperator'
      | 'totalAllocPoint'
      | 'transferOwnership'
      | 'updatePool'
      | 'userInfo',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: '_getTimeElapsed',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: '_updatePool', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'add',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'addRewardInfo',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'cancelOperator', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'currentEndTimestamp', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'distributorV2', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'emergencyRewardWithdraw',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'isNative', values?: undefined): string;
  encodeFunctionData(functionFragment: 'massUpdatePools', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'onZyberReward',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'operators', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'pendingTokens',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'poolIds', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'poolInfo', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'poolRewardInfo',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'poolRewardsPerSec', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardInfoLimit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setOperator', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'totalAllocPoint', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updatePool', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'userInfo',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(functionFragment: '_getTimeElapsed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_updatePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'add', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addRewardInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancelOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentEndTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distributorV2', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyRewardWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isNative', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'massUpdatePools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onZyberReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'operators', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolIds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolRewardInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolRewardsPerSec', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardInfoLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAllocPoint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result;

  events: {
    'AddPool(uint256,uint256)': EventFragment;
    'AddRewardInfo(uint256,uint256,uint256,uint256)': EventFragment;
    'OnReward(address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'RewardRateUpdated(uint256,uint256)': EventFragment;
    'SetPool(uint256,uint256)': EventFragment;
    'UpdatePool(uint256,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddPool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AddRewardInfo'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OnReward'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardRateUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetPool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatePool'): EventFragment;
}

export interface AddPoolEventObject {
  pid: BigNumber;
  allocPoint: BigNumber;
}
export type AddPoolEvent = TypedEvent<[BigNumber, BigNumber], AddPoolEventObject>;

export type AddPoolEventFilter = TypedEventFilter<AddPoolEvent>;

export interface AddRewardInfoEventObject {
  pid: BigNumber;
  phase: BigNumber;
  endTimestamp: BigNumber;
  rewardPerSec: BigNumber;
}
export type AddRewardInfoEvent = TypedEvent<[BigNumber, BigNumber, BigNumber, BigNumber], AddRewardInfoEventObject>;

export type AddRewardInfoEventFilter = TypedEventFilter<AddRewardInfoEvent>;

export interface OnRewardEventObject {
  user: string;
  amount: BigNumber;
}
export type OnRewardEvent = TypedEvent<[string, BigNumber], OnRewardEventObject>;

export type OnRewardEventFilter = TypedEventFilter<OnRewardEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RewardRateUpdatedEventObject {
  oldRate: BigNumber;
  newRate: BigNumber;
}
export type RewardRateUpdatedEvent = TypedEvent<[BigNumber, BigNumber], RewardRateUpdatedEventObject>;

export type RewardRateUpdatedEventFilter = TypedEventFilter<RewardRateUpdatedEvent>;

export interface SetPoolEventObject {
  pid: BigNumber;
  allocPoint: BigNumber;
}
export type SetPoolEvent = TypedEvent<[BigNumber, BigNumber], SetPoolEventObject>;

export type SetPoolEventFilter = TypedEventFilter<SetPoolEvent>;

export interface UpdatePoolEventObject {
  pid: BigNumber;
  lastRewardTimestamp: BigNumber;
  lpSupply: BigNumber;
  accTokenPerShare: BigNumber;
}
export type UpdatePoolEvent = TypedEvent<[BigNumber, BigNumber, BigNumber, BigNumber], UpdatePoolEventObject>;

export type UpdatePoolEventFilter = TypedEventFilter<UpdatePoolEvent>;

export interface GammaStrategiesZyberswapRewarder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GammaStrategiesZyberswapRewarderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _getTimeElapsed(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      _endTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    _updatePool(
      pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    add(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _startTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    addRewardInfo(
      _pid: PromiseOrValue<BigNumberish>,
      _endTimestamp: PromiseOrValue<BigNumberish>,
      _rewardPerSec: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    cancelOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    currentEndTimestamp(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    distributorV2(overrides?: CallOverrides): Promise<[string]>;

    emergencyRewardWithdraw(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isNative(overrides?: CallOverrides): Promise<[boolean]>;

    massUpdatePools(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    onZyberReward(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    operators(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingTokens(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    poolIds(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    poolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        accTokenPerShare: BigNumber;
        startTimestamp: BigNumber;
        lastRewardTimestamp: BigNumber;
        allocPoint: BigNumber;
        totalRewards: BigNumber;
      }
    >;

    poolRewardInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startTimestamp: BigNumber;
        endTimestamp: BigNumber;
        rewardPerSec: BigNumber;
      }
    >;

    poolRewardsPerSec(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    rewardInfoLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updatePool(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }>;
  };

  _getTimeElapsed(
    _from: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<BigNumberish>,
    _endTimestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  _updatePool(
    pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  add(
    _pid: PromiseOrValue<BigNumberish>,
    _allocPoint: PromiseOrValue<BigNumberish>,
    _startTimestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  addRewardInfo(
    _pid: PromiseOrValue<BigNumberish>,
    _endTimestamp: PromiseOrValue<BigNumberish>,
    _rewardPerSec: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  cancelOperator(
    _operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  currentEndTimestamp(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  distributorV2(overrides?: CallOverrides): Promise<string>;

  emergencyRewardWithdraw(
    _pid: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isNative(overrides?: CallOverrides): Promise<boolean>;

  massUpdatePools(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  onZyberReward(
    _pid: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  operators(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingTokens(
    _pid: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  poolIds(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  poolInfo(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      accTokenPerShare: BigNumber;
      startTimestamp: BigNumber;
      lastRewardTimestamp: BigNumber;
      allocPoint: BigNumber;
      totalRewards: BigNumber;
    }
  >;

  poolRewardInfo(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      startTimestamp: BigNumber;
      endTimestamp: BigNumber;
      rewardPerSec: BigNumber;
    }
  >;

  poolRewardsPerSec(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  rewardInfoLimit(overrides?: CallOverrides): Promise<BigNumber>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  setOperator(
    _operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updatePool(
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }>;

  callStatic: {
    _getTimeElapsed(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      _endTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    _updatePool(
      pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<MultipleRewards.PoolInfoStructOutput>;

    add(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _startTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    addRewardInfo(
      _pid: PromiseOrValue<BigNumberish>,
      _endTimestamp: PromiseOrValue<BigNumberish>,
      _rewardPerSec: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    cancelOperator(_operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    currentEndTimestamp(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    distributorV2(overrides?: CallOverrides): Promise<string>;

    emergencyRewardWithdraw(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    isNative(overrides?: CallOverrides): Promise<boolean>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    onZyberReward(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    operators(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingTokens(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    poolIds(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        accTokenPerShare: BigNumber;
        startTimestamp: BigNumber;
        lastRewardTimestamp: BigNumber;
        allocPoint: BigNumber;
        totalRewards: BigNumber;
      }
    >;

    poolRewardInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startTimestamp: BigNumber;
        endTimestamp: BigNumber;
        rewardPerSec: BigNumber;
      }
    >;

    poolRewardsPerSec(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardInfoLimit(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    setOperator(_operator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updatePool(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<MultipleRewards.PoolInfoStructOutput>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }>;
  };

  filters: {
    'AddPool(uint256,uint256)'(pid?: PromiseOrValue<BigNumberish> | null, allocPoint?: null): AddPoolEventFilter;
    AddPool(pid?: PromiseOrValue<BigNumberish> | null, allocPoint?: null): AddPoolEventFilter;

    'AddRewardInfo(uint256,uint256,uint256,uint256)'(
      pid?: PromiseOrValue<BigNumberish> | null,
      phase?: PromiseOrValue<BigNumberish> | null,
      endTimestamp?: null,
      rewardPerSec?: null,
    ): AddRewardInfoEventFilter;
    AddRewardInfo(
      pid?: PromiseOrValue<BigNumberish> | null,
      phase?: PromiseOrValue<BigNumberish> | null,
      endTimestamp?: null,
      rewardPerSec?: null,
    ): AddRewardInfoEventFilter;

    'OnReward(address,uint256)'(user?: PromiseOrValue<string> | null, amount?: null): OnRewardEventFilter;
    OnReward(user?: PromiseOrValue<string> | null, amount?: null): OnRewardEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'RewardRateUpdated(uint256,uint256)'(oldRate?: null, newRate?: null): RewardRateUpdatedEventFilter;
    RewardRateUpdated(oldRate?: null, newRate?: null): RewardRateUpdatedEventFilter;

    'SetPool(uint256,uint256)'(pid?: PromiseOrValue<BigNumberish> | null, allocPoint?: null): SetPoolEventFilter;
    SetPool(pid?: PromiseOrValue<BigNumberish> | null, allocPoint?: null): SetPoolEventFilter;

    'UpdatePool(uint256,uint256,uint256,uint256)'(
      pid?: PromiseOrValue<BigNumberish> | null,
      lastRewardTimestamp?: null,
      lpSupply?: null,
      accTokenPerShare?: null,
    ): UpdatePoolEventFilter;
    UpdatePool(
      pid?: PromiseOrValue<BigNumberish> | null,
      lastRewardTimestamp?: null,
      lpSupply?: null,
      accTokenPerShare?: null,
    ): UpdatePoolEventFilter;
  };

  estimateGas: {
    _getTimeElapsed(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      _endTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    _updatePool(
      pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    add(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _startTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    addRewardInfo(
      _pid: PromiseOrValue<BigNumberish>,
      _endTimestamp: PromiseOrValue<BigNumberish>,
      _rewardPerSec: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    cancelOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    currentEndTimestamp(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    distributorV2(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyRewardWithdraw(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isNative(overrides?: CallOverrides): Promise<BigNumber>;

    massUpdatePools(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    onZyberReward(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    operators(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingTokens(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    poolIds(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    poolRewardInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    poolRewardsPerSec(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    rewardInfoLimit(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updatePool(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _getTimeElapsed(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      _endTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    _updatePool(
      pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    add(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _startTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    addRewardInfo(
      _pid: PromiseOrValue<BigNumberish>,
      _endTimestamp: PromiseOrValue<BigNumberish>,
      _rewardPerSec: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    cancelOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    currentEndTimestamp(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributorV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyRewardWithdraw(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isNative(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    massUpdatePools(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    onZyberReward(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    operators(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingTokens(
      _pid: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    poolIds(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolInfo(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolRewardInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    poolRewardsPerSec(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    rewardInfoLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
