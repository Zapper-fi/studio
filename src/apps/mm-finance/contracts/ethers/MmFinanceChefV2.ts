/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace MasterChefV2 {
  export type PoolInfoStruct = {
    accMeerkatPerShare: BigNumberish;
    lastRewardBlock: BigNumberish;
    allocPoint: BigNumberish;
    totalBoostedShare: BigNumberish;
    isRegular: boolean;
  };

  export type PoolInfoStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
    accMeerkatPerShare: BigNumber;
    lastRewardBlock: BigNumber;
    allocPoint: BigNumber;
    totalBoostedShare: BigNumber;
    isRegular: boolean;
  };
}

export interface MmFinanceChefV2Interface extends utils.Interface {
  functions: {
    'ACC_MEERKAT_PRECISION()': FunctionFragment;
    'BOOST_PRECISION()': FunctionFragment;
    'MEERKAT()': FunctionFragment;
    'MEERKAT_RATE_TOTAL_PRECISION()': FunctionFragment;
    'MASTERCHEF_MEERKAT_PER_BLOCK()': FunctionFragment;
    'MASTER_CHEF()': FunctionFragment;
    'MASTER_PID()': FunctionFragment;
    'MAX_BOOST_PRECISION()': FunctionFragment;
    'add(uint256,address,bool,bool)': FunctionFragment;
    'boostContract()': FunctionFragment;
    'burnAdmin()': FunctionFragment;
    'burnMeerkat(bool)': FunctionFragment;
    'meerkatPerBlock(bool)': FunctionFragment;
    'meerkatPerBlockToBurn()': FunctionFragment;
    'meerkatRateToBurn()': FunctionFragment;
    'meerkatRateToRegularFarm()': FunctionFragment;
    'meerkatRateToSpecialFarm()': FunctionFragment;
    'deposit(uint256,uint256)': FunctionFragment;
    'emergencyWithdraw(uint256)': FunctionFragment;
    'getBoostMultiplier(address,uint256)': FunctionFragment;
    'harvestFromMasterChef()': FunctionFragment;
    'init(address)': FunctionFragment;
    'lastBurnedBlock()': FunctionFragment;
    'lpToken(uint256)': FunctionFragment;
    'massUpdatePools()': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingMeerkat(uint256,address)': FunctionFragment;
    'poolInfo(uint256)': FunctionFragment;
    'poolLength()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'set(uint256,uint256,bool)': FunctionFragment;
    'totalRegularAllocPoint()': FunctionFragment;
    'totalSpecialAllocPoint()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateBoostContract(address)': FunctionFragment;
    'updateBoostMultiplier(address,uint256,uint256)': FunctionFragment;
    'updateBurnAdmin(address)': FunctionFragment;
    'updateMeerkatRate(uint256,uint256,uint256,bool)': FunctionFragment;
    'updatePool(uint256)': FunctionFragment;
    'updateWhiteList(address,bool)': FunctionFragment;
    'userInfo(uint256,address)': FunctionFragment;
    'whiteList(address)': FunctionFragment;
    'withdraw(uint256,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'ACC_MEERKAT_PRECISION'
      | 'BOOST_PRECISION'
      | 'MEERKAT'
      | 'MEERKAT_RATE_TOTAL_PRECISION'
      | 'MASTERCHEF_MEERKAT_PER_BLOCK'
      | 'MASTER_CHEF'
      | 'MASTER_PID'
      | 'MAX_BOOST_PRECISION'
      | 'add'
      | 'boostContract'
      | 'burnAdmin'
      | 'burnMeerkat'
      | 'meerkatPerBlock'
      | 'meerkatPerBlockToBurn'
      | 'meerkatRateToBurn'
      | 'meerkatRateToRegularFarm'
      | 'meerkatRateToSpecialFarm'
      | 'deposit'
      | 'emergencyWithdraw'
      | 'getBoostMultiplier'
      | 'harvestFromMasterChef'
      | 'init'
      | 'lastBurnedBlock'
      | 'lpToken'
      | 'massUpdatePools'
      | 'owner'
      | 'pendingMeerkat'
      | 'poolInfo'
      | 'poolLength'
      | 'renounceOwnership'
      | 'set'
      | 'totalRegularAllocPoint'
      | 'totalSpecialAllocPoint'
      | 'transferOwnership'
      | 'updateBoostContract'
      | 'updateBoostMultiplier'
      | 'updateBurnAdmin'
      | 'updateMeerkatRate'
      | 'updatePool'
      | 'updateWhiteList'
      | 'userInfo'
      | 'whiteList'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'ACC_MEERKAT_PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'BOOST_PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MEERKAT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MEERKAT_RATE_TOTAL_PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MASTERCHEF_MEERKAT_PER_BLOCK', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MASTER_CHEF', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MASTER_PID', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_BOOST_PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'add', values: [BigNumberish, string, boolean, boolean]): string;
  encodeFunctionData(functionFragment: 'boostContract', values?: undefined): string;
  encodeFunctionData(functionFragment: 'burnAdmin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'burnMeerkat', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'meerkatPerBlock', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'meerkatPerBlockToBurn', values?: undefined): string;
  encodeFunctionData(functionFragment: 'meerkatRateToBurn', values?: undefined): string;
  encodeFunctionData(functionFragment: 'meerkatRateToRegularFarm', values?: undefined): string;
  encodeFunctionData(functionFragment: 'meerkatRateToSpecialFarm', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'emergencyWithdraw', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getBoostMultiplier', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'harvestFromMasterChef', values?: undefined): string;
  encodeFunctionData(functionFragment: 'init', values: [string]): string;
  encodeFunctionData(functionFragment: 'lastBurnedBlock', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lpToken', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'massUpdatePools', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingMeerkat', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'poolInfo', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'poolLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'set', values: [BigNumberish, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'totalRegularAllocPoint', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSpecialAllocPoint', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateBoostContract', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateBoostMultiplier', values: [string, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateBurnAdmin', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'updateMeerkatRate',
    values: [BigNumberish, BigNumberish, BigNumberish, boolean],
  ): string;
  encodeFunctionData(functionFragment: 'updatePool', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateWhiteList', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'userInfo', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'whiteList', values: [string]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'ACC_MEERKAT_PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'BOOST_PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MEERKAT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MEERKAT_RATE_TOTAL_PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MASTERCHEF_MEERKAT_PER_BLOCK', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MASTER_CHEF', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MASTER_PID', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_BOOST_PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'add', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'boostContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burnAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burnMeerkat', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'meerkatPerBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'meerkatPerBlockToBurn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'meerkatRateToBurn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'meerkatRateToRegularFarm', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'meerkatRateToSpecialFarm', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBoostMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvestFromMasterChef', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'init', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastBurnedBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lpToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'massUpdatePools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingMeerkat', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalRegularAllocPoint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSpecialAllocPoint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateBoostContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateBoostMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateBurnAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMeerkatRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateWhiteList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whiteList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'AddPool(uint256,uint256,address,bool)': EventFragment;
    'Deposit(address,uint256,uint256)': EventFragment;
    'EmergencyWithdraw(address,uint256,uint256)': EventFragment;
    'Init()': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'SetPool(uint256,uint256)': EventFragment;
    'UpdateBoostContract(address)': EventFragment;
    'UpdateBoostMultiplier(address,uint256,uint256,uint256)': EventFragment;
    'UpdateBurnAdmin(address,address)': EventFragment;
    'UpdateMeerkatRate(uint256,uint256,uint256)': EventFragment;
    'UpdatePool(uint256,uint256,uint256,uint256)': EventFragment;
    'UpdateWhiteList(address,bool)': EventFragment;
    'Withdraw(address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddPool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Init'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetPool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateBoostContract'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateBoostMultiplier'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateBurnAdmin'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateMeerkatRate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatePool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateWhiteList'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface AddPoolEventObject {
  pid: BigNumber;
  allocPoint: BigNumber;
  lpToken: string;
  isRegular: boolean;
}
export type AddPoolEvent = TypedEvent<[BigNumber, BigNumber, string, boolean], AddPoolEventObject>;

export type AddPoolEventFilter = TypedEventFilter<AddPoolEvent>;

export interface DepositEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EmergencyWithdrawEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], EmergencyWithdrawEventObject>;

export type EmergencyWithdrawEventFilter = TypedEventFilter<EmergencyWithdrawEvent>;

export interface InitEventObject {}
export type InitEvent = TypedEvent<[], InitEventObject>;

export type InitEventFilter = TypedEventFilter<InitEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface SetPoolEventObject {
  pid: BigNumber;
  allocPoint: BigNumber;
}
export type SetPoolEvent = TypedEvent<[BigNumber, BigNumber], SetPoolEventObject>;

export type SetPoolEventFilter = TypedEventFilter<SetPoolEvent>;

export interface UpdateBoostContractEventObject {
  boostContract: string;
}
export type UpdateBoostContractEvent = TypedEvent<[string], UpdateBoostContractEventObject>;

export type UpdateBoostContractEventFilter = TypedEventFilter<UpdateBoostContractEvent>;

export interface UpdateBoostMultiplierEventObject {
  user: string;
  pid: BigNumber;
  oldMultiplier: BigNumber;
  newMultiplier: BigNumber;
}
export type UpdateBoostMultiplierEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  UpdateBoostMultiplierEventObject
>;

export type UpdateBoostMultiplierEventFilter = TypedEventFilter<UpdateBoostMultiplierEvent>;

export interface UpdateBurnAdminEventObject {
  oldAdmin: string;
  newAdmin: string;
}
export type UpdateBurnAdminEvent = TypedEvent<[string, string], UpdateBurnAdminEventObject>;

export type UpdateBurnAdminEventFilter = TypedEventFilter<UpdateBurnAdminEvent>;

export interface UpdateMeerkatRateEventObject {
  burnRate: BigNumber;
  regularFarmRate: BigNumber;
  specialFarmRate: BigNumber;
}
export type UpdateMeerkatRateEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], UpdateMeerkatRateEventObject>;

export type UpdateMeerkatRateEventFilter = TypedEventFilter<UpdateMeerkatRateEvent>;

export interface UpdatePoolEventObject {
  pid: BigNumber;
  lastRewardBlock: BigNumber;
  lpSupply: BigNumber;
  accMeerkatPerShare: BigNumber;
}
export type UpdatePoolEvent = TypedEvent<[BigNumber, BigNumber, BigNumber, BigNumber], UpdatePoolEventObject>;

export type UpdatePoolEventFilter = TypedEventFilter<UpdatePoolEvent>;

export interface UpdateWhiteListEventObject {
  user: string;
  isValid: boolean;
}
export type UpdateWhiteListEvent = TypedEvent<[string, boolean], UpdateWhiteListEventObject>;

export type UpdateWhiteListEventFilter = TypedEventFilter<UpdateWhiteListEvent>;

export interface WithdrawEventObject {
  user: string;
  pid: BigNumber;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface MmFinanceChefV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MmFinanceChefV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ACC_MEERKAT_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    BOOST_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MEERKAT(overrides?: CallOverrides): Promise<[string]>;

    MEERKAT_RATE_TOTAL_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MASTERCHEF_MEERKAT_PER_BLOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    MASTER_CHEF(overrides?: CallOverrides): Promise<[string]>;

    MASTER_PID(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_BOOST_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _isRegular: boolean,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    boostContract(overrides?: CallOverrides): Promise<[string]>;

    burnAdmin(overrides?: CallOverrides): Promise<[string]>;

    burnMeerkat(
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    meerkatPerBlock(_isRegular: boolean, overrides?: CallOverrides): Promise<[BigNumber] & { amount: BigNumber }>;

    meerkatPerBlockToBurn(overrides?: CallOverrides): Promise<[BigNumber] & { amount: BigNumber }>;

    meerkatRateToBurn(overrides?: CallOverrides): Promise<[BigNumber]>;

    meerkatRateToRegularFarm(overrides?: CallOverrides): Promise<[BigNumber]>;

    meerkatRateToSpecialFarm(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getBoostMultiplier(_user: string, _pid: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    harvestFromMasterChef(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    init(dummyToken: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    lastBurnedBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    lpToken(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    massUpdatePools(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingMeerkat(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        accMeerkatPerShare: BigNumber;
        lastRewardBlock: BigNumber;
        allocPoint: BigNumber;
        totalBoostedShare: BigNumber;
        isRegular: boolean;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber] & { pools: BigNumber }>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    totalRegularAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSpecialAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateBoostContract(
      _newBoostContract: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateBoostMultiplier(
      _user: string,
      _pid: BigNumberish,
      _newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateBurnAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateMeerkatRate(
      _burnRate: BigNumberish,
      _regularFarmRate: BigNumberish,
      _specialFarmRate: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateWhiteList(
      _user: string,
      _isValid: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        boostMultiplier: BigNumber;
      }
    >;

    whiteList(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  ACC_MEERKAT_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  BOOST_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  MEERKAT(overrides?: CallOverrides): Promise<string>;

  MEERKAT_RATE_TOTAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  MASTERCHEF_MEERKAT_PER_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

  MASTER_CHEF(overrides?: CallOverrides): Promise<string>;

  MASTER_PID(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_BOOST_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  add(
    _allocPoint: BigNumberish,
    _lpToken: string,
    _isRegular: boolean,
    _withUpdate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  boostContract(overrides?: CallOverrides): Promise<string>;

  burnAdmin(overrides?: CallOverrides): Promise<string>;

  burnMeerkat(
    _withUpdate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  meerkatPerBlock(_isRegular: boolean, overrides?: CallOverrides): Promise<BigNumber>;

  meerkatPerBlockToBurn(overrides?: CallOverrides): Promise<BigNumber>;

  meerkatRateToBurn(overrides?: CallOverrides): Promise<BigNumber>;

  meerkatRateToRegularFarm(overrides?: CallOverrides): Promise<BigNumber>;

  meerkatRateToSpecialFarm(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getBoostMultiplier(_user: string, _pid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  harvestFromMasterChef(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  init(dummyToken: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  lastBurnedBlock(overrides?: CallOverrides): Promise<BigNumber>;

  lpToken(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  massUpdatePools(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingMeerkat(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<BigNumber>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      accMeerkatPerShare: BigNumber;
      lastRewardBlock: BigNumber;
      allocPoint: BigNumber;
      totalBoostedShare: BigNumber;
      isRegular: boolean;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  set(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  totalRegularAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  totalSpecialAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateBoostContract(
    _newBoostContract: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateBoostMultiplier(
    _user: string,
    _pid: BigNumberish,
    _newMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateBurnAdmin(
    _newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateMeerkatRate(
    _burnRate: BigNumberish,
    _regularFarmRate: BigNumberish,
    _specialFarmRate: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updatePool(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateWhiteList(
    _user: string,
    _isValid: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      boostMultiplier: BigNumber;
    }
  >;

  whiteList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  withdraw(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    ACC_MEERKAT_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    BOOST_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MEERKAT(overrides?: CallOverrides): Promise<string>;

    MEERKAT_RATE_TOTAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MASTERCHEF_MEERKAT_PER_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

    MASTER_CHEF(overrides?: CallOverrides): Promise<string>;

    MASTER_PID(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BOOST_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _isRegular: boolean,
      _withUpdate: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    boostContract(overrides?: CallOverrides): Promise<string>;

    burnAdmin(overrides?: CallOverrides): Promise<string>;

    burnMeerkat(_withUpdate: boolean, overrides?: CallOverrides): Promise<void>;

    meerkatPerBlock(_isRegular: boolean, overrides?: CallOverrides): Promise<BigNumber>;

    meerkatPerBlockToBurn(overrides?: CallOverrides): Promise<BigNumber>;

    meerkatRateToBurn(overrides?: CallOverrides): Promise<BigNumber>;

    meerkatRateToRegularFarm(overrides?: CallOverrides): Promise<BigNumber>;

    meerkatRateToSpecialFarm(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(_pid: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    emergencyWithdraw(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getBoostMultiplier(_user: string, _pid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    harvestFromMasterChef(overrides?: CallOverrides): Promise<void>;

    init(dummyToken: string, overrides?: CallOverrides): Promise<void>;

    lastBurnedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    lpToken(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingMeerkat(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        accMeerkatPerShare: BigNumber;
        lastRewardBlock: BigNumber;
        allocPoint: BigNumber;
        totalBoostedShare: BigNumber;
        isRegular: boolean;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    set(_pid: BigNumberish, _allocPoint: BigNumberish, _withUpdate: boolean, overrides?: CallOverrides): Promise<void>;

    totalRegularAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    totalSpecialAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    updateBoostContract(_newBoostContract: string, overrides?: CallOverrides): Promise<void>;

    updateBoostMultiplier(
      _user: string,
      _pid: BigNumberish,
      _newMultiplier: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateBurnAdmin(_newAdmin: string, overrides?: CallOverrides): Promise<void>;

    updateMeerkatRate(
      _burnRate: BigNumberish,
      _regularFarmRate: BigNumberish,
      _specialFarmRate: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    updatePool(_pid: BigNumberish, overrides?: CallOverrides): Promise<MasterChefV2.PoolInfoStructOutput>;

    updateWhiteList(_user: string, _isValid: boolean, overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        boostMultiplier: BigNumber;
      }
    >;

    whiteList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    withdraw(_pid: BigNumberish, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'AddPool(uint256,uint256,address,bool)'(
      pid?: BigNumberish | null,
      allocPoint?: null,
      lpToken?: string | null,
      isRegular?: null,
    ): AddPoolEventFilter;
    AddPool(
      pid?: BigNumberish | null,
      allocPoint?: null,
      lpToken?: string | null,
      isRegular?: null,
    ): AddPoolEventFilter;

    'Deposit(address,uint256,uint256)'(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
    ): DepositEventFilter;
    Deposit(user?: string | null, pid?: BigNumberish | null, amount?: null): DepositEventFilter;

    'EmergencyWithdraw(address,uint256,uint256)'(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(user?: string | null, pid?: BigNumberish | null, amount?: null): EmergencyWithdrawEventFilter;

    'Init()'(): InitEventFilter;
    Init(): InitEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    'SetPool(uint256,uint256)'(pid?: BigNumberish | null, allocPoint?: null): SetPoolEventFilter;
    SetPool(pid?: BigNumberish | null, allocPoint?: null): SetPoolEventFilter;

    'UpdateBoostContract(address)'(boostContract?: string | null): UpdateBoostContractEventFilter;
    UpdateBoostContract(boostContract?: string | null): UpdateBoostContractEventFilter;

    'UpdateBoostMultiplier(address,uint256,uint256,uint256)'(
      user?: string | null,
      pid?: null,
      oldMultiplier?: null,
      newMultiplier?: null,
    ): UpdateBoostMultiplierEventFilter;
    UpdateBoostMultiplier(
      user?: string | null,
      pid?: null,
      oldMultiplier?: null,
      newMultiplier?: null,
    ): UpdateBoostMultiplierEventFilter;

    'UpdateBurnAdmin(address,address)'(oldAdmin?: string | null, newAdmin?: string | null): UpdateBurnAdminEventFilter;
    UpdateBurnAdmin(oldAdmin?: string | null, newAdmin?: string | null): UpdateBurnAdminEventFilter;

    'UpdateMeerkatRate(uint256,uint256,uint256)'(
      burnRate?: null,
      regularFarmRate?: null,
      specialFarmRate?: null,
    ): UpdateMeerkatRateEventFilter;
    UpdateMeerkatRate(burnRate?: null, regularFarmRate?: null, specialFarmRate?: null): UpdateMeerkatRateEventFilter;

    'UpdatePool(uint256,uint256,uint256,uint256)'(
      pid?: BigNumberish | null,
      lastRewardBlock?: null,
      lpSupply?: null,
      accMeerkatPerShare?: null,
    ): UpdatePoolEventFilter;
    UpdatePool(
      pid?: BigNumberish | null,
      lastRewardBlock?: null,
      lpSupply?: null,
      accMeerkatPerShare?: null,
    ): UpdatePoolEventFilter;

    'UpdateWhiteList(address,bool)'(user?: string | null, isValid?: null): UpdateWhiteListEventFilter;
    UpdateWhiteList(user?: string | null, isValid?: null): UpdateWhiteListEventFilter;

    'Withdraw(address,uint256,uint256)'(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null,
    ): WithdrawEventFilter;
    Withdraw(user?: string | null, pid?: BigNumberish | null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    ACC_MEERKAT_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    BOOST_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MEERKAT(overrides?: CallOverrides): Promise<BigNumber>;

    MEERKAT_RATE_TOTAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MASTERCHEF_MEERKAT_PER_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

    MASTER_CHEF(overrides?: CallOverrides): Promise<BigNumber>;

    MASTER_PID(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BOOST_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _isRegular: boolean,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    boostContract(overrides?: CallOverrides): Promise<BigNumber>;

    burnAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    burnMeerkat(_withUpdate: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    meerkatPerBlock(_isRegular: boolean, overrides?: CallOverrides): Promise<BigNumber>;

    meerkatPerBlockToBurn(overrides?: CallOverrides): Promise<BigNumber>;

    meerkatRateToBurn(overrides?: CallOverrides): Promise<BigNumber>;

    meerkatRateToRegularFarm(overrides?: CallOverrides): Promise<BigNumber>;

    meerkatRateToSpecialFarm(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getBoostMultiplier(_user: string, _pid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    harvestFromMasterChef(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    init(dummyToken: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    lastBurnedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    lpToken(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    massUpdatePools(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingMeerkat(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    totalRegularAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    totalSpecialAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateBoostContract(
      _newBoostContract: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateBoostMultiplier(
      _user: string,
      _pid: BigNumberish,
      _newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateBurnAdmin(_newAdmin: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updateMeerkatRate(
      _burnRate: BigNumberish,
      _regularFarmRate: BigNumberish,
      _specialFarmRate: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updatePool(_pid: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updateWhiteList(
      _user: string,
      _isValid: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    userInfo(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    whiteList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ACC_MEERKAT_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BOOST_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MEERKAT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MEERKAT_RATE_TOTAL_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MASTERCHEF_MEERKAT_PER_BLOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MASTER_CHEF(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MASTER_PID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BOOST_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _isRegular: boolean,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    boostContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnMeerkat(
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    meerkatPerBlock(_isRegular: boolean, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    meerkatPerBlockToBurn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    meerkatRateToBurn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    meerkatRateToRegularFarm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    meerkatRateToSpecialFarm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getBoostMultiplier(_user: string, _pid: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestFromMasterChef(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    init(
      dummyToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    lastBurnedBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpToken(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    massUpdatePools(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingMeerkat(_pid: BigNumberish, _user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    totalRegularAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSpecialAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateBoostContract(
      _newBoostContract: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateBoostMultiplier(
      _user: string,
      _pid: BigNumberish,
      _newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateBurnAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateMeerkatRate(
      _burnRate: BigNumberish,
      _regularFarmRate: BigNumberish,
      _specialFarmRate: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateWhiteList(
      _user: string,
      _isValid: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    userInfo(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whiteList(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
