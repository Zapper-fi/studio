/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace ConvexRewardPool {
  export type EarnedDataStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type EarnedDataStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };
}

export interface ConvexRewardPoolInterface extends utils.Interface {
  functions: {
    'addExtraReward(address)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'claimable_reward(address,address)': FunctionFragment;
    'convexBooster()': FunctionFragment;
    'convexPoolId()': FunctionFragment;
    'convexStaker()': FunctionFragment;
    'crv()': FunctionFragment;
    'curveGauge()': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'earned(address)': FunctionFragment;
    'emergencyWithdraw(uint256)': FunctionFragment;
    'getReward(address,address)': FunctionFragment;
    'getReward(address)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initialize(address,address,address,address,address,uint256)': FunctionFragment;
    'invalidateReward(address)': FunctionFragment;
    'maxRewards()': FunctionFragment;
    'name()': FunctionFragment;
    'rewardHook()': FunctionFragment;
    'rewardLength()': FunctionFragment;
    'rewardMap(address)': FunctionFragment;
    'rewardRedirect(address)': FunctionFragment;
    'reward_integral_for(address,address)': FunctionFragment;
    'rewards(uint256)': FunctionFragment;
    'setRewardHook(address)': FunctionFragment;
    'setRewardRedirect(address)': FunctionFragment;
    'stakeFor(address,uint256)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'user_checkpoint(address)': FunctionFragment;
    'withdraw(uint256,bool)': FunctionFragment;
    'withdrawAll(bool)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addExtraReward'
      | 'allowance'
      | 'approve'
      | 'balanceOf'
      | 'claimable_reward'
      | 'convexBooster'
      | 'convexPoolId'
      | 'convexStaker'
      | 'crv'
      | 'curveGauge'
      | 'decimals'
      | 'decreaseAllowance'
      | 'earned'
      | 'emergencyWithdraw'
      | 'getReward(address,address)'
      | 'getReward(address)'
      | 'increaseAllowance'
      | 'initialize'
      | 'invalidateReward'
      | 'maxRewards'
      | 'name'
      | 'rewardHook'
      | 'rewardLength'
      | 'rewardMap'
      | 'rewardRedirect'
      | 'reward_integral_for'
      | 'rewards'
      | 'setRewardHook'
      | 'setRewardRedirect'
      | 'stakeFor'
      | 'symbol'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'user_checkpoint'
      | 'withdraw'
      | 'withdrawAll',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'addExtraReward', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'claimable_reward',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'convexBooster', values?: undefined): string;
  encodeFunctionData(functionFragment: 'convexPoolId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'convexStaker', values?: undefined): string;
  encodeFunctionData(functionFragment: 'crv', values?: undefined): string;
  encodeFunctionData(functionFragment: 'curveGauge', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'earned', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'emergencyWithdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getReward(address,address)',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getReward(address)', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'invalidateReward', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maxRewards', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardHook', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardMap', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'rewardRedirect', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'reward_integral_for',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'rewards', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setRewardHook', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setRewardRedirect', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'stakeFor',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'user_checkpoint', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'withdrawAll', values: [PromiseOrValue<boolean>]): string;

  decodeFunctionResult(functionFragment: 'addExtraReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimable_reward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convexBooster', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convexPoolId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convexStaker', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'crv', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'curveGauge', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'earned', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReward(address,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReward(address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'invalidateReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardHook', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardMap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardRedirect', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward_integral_for', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewardHook', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewardRedirect', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'user_checkpoint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAll', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'EmergencyWithdrawn(address,uint256)': EventFragment;
    'RewardAdded(address)': EventFragment;
    'RewardInvalidated(address)': EventFragment;
    'RewardPaid(address,address,address,uint256)': EventFragment;
    'RewardRedirected(address,address)': EventFragment;
    'Staked(address,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Withdrawn(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardInvalidated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardPaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardRedirected'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Staked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdrawn'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface EmergencyWithdrawnEventObject {
  _user: string;
  _amount: BigNumber;
}
export type EmergencyWithdrawnEvent = TypedEvent<[string, BigNumber], EmergencyWithdrawnEventObject>;

export type EmergencyWithdrawnEventFilter = TypedEventFilter<EmergencyWithdrawnEvent>;

export interface RewardAddedEventObject {
  _rewardToken: string;
}
export type RewardAddedEvent = TypedEvent<[string], RewardAddedEventObject>;

export type RewardAddedEventFilter = TypedEventFilter<RewardAddedEvent>;

export interface RewardInvalidatedEventObject {
  _rewardToken: string;
}
export type RewardInvalidatedEvent = TypedEvent<[string], RewardInvalidatedEventObject>;

export type RewardInvalidatedEventFilter = TypedEventFilter<RewardInvalidatedEvent>;

export interface RewardPaidEventObject {
  _user: string;
  _rewardToken: string;
  _receiver: string;
  _rewardAmount: BigNumber;
}
export type RewardPaidEvent = TypedEvent<[string, string, string, BigNumber], RewardPaidEventObject>;

export type RewardPaidEventFilter = TypedEventFilter<RewardPaidEvent>;

export interface RewardRedirectedEventObject {
  _account: string;
  _forward: string;
}
export type RewardRedirectedEvent = TypedEvent<[string, string], RewardRedirectedEventObject>;

export type RewardRedirectedEventFilter = TypedEventFilter<RewardRedirectedEvent>;

export interface StakedEventObject {
  _user: string;
  _amount: BigNumber;
}
export type StakedEvent = TypedEvent<[string, BigNumber], StakedEventObject>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawnEventObject {
  _user: string;
  _amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<[string, BigNumber], WithdrawnEventObject>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface ConvexRewardPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConvexRewardPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addExtraReward(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    claimable_reward(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    convexBooster(overrides?: CallOverrides): Promise<[string]>;

    convexPoolId(overrides?: CallOverrides): Promise<[BigNumber]>;

    convexStaker(overrides?: CallOverrides): Promise<[string]>;

    crv(overrides?: CallOverrides): Promise<[string]>;

    curveGauge(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    earned(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'getReward(address,address)'(
      _account: PromiseOrValue<string>,
      _forwardTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'getReward(address)'(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _crv: PromiseOrValue<string>,
      _curveGauge: PromiseOrValue<string>,
      _convexStaker: PromiseOrValue<string>,
      _convexBooster: PromiseOrValue<string>,
      _lptoken: PromiseOrValue<string>,
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    invalidateReward(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    maxRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    rewardHook(overrides?: CallOverrides): Promise<[string]>;

    rewardLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardMap(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardRedirect(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    reward_integral_for(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    rewards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber] & {
        reward_token: string;
        reward_integral: BigNumber;
        reward_remaining: BigNumber;
      }
    >;

    setRewardHook(
      _hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRewardRedirect(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stakeFor(
      _for: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    user_checkpoint(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      _claim: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawAll(
      claim: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  addExtraReward(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  claimable_reward(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  convexBooster(overrides?: CallOverrides): Promise<string>;

  convexPoolId(overrides?: CallOverrides): Promise<BigNumber>;

  convexStaker(overrides?: CallOverrides): Promise<string>;

  crv(overrides?: CallOverrides): Promise<string>;

  curveGauge(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  earned(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'getReward(address,address)'(
    _account: PromiseOrValue<string>,
    _forwardTo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'getReward(address)'(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _crv: PromiseOrValue<string>,
    _curveGauge: PromiseOrValue<string>,
    _convexStaker: PromiseOrValue<string>,
    _convexBooster: PromiseOrValue<string>,
    _lptoken: PromiseOrValue<string>,
    _poolId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  invalidateReward(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  maxRewards(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  rewardHook(overrides?: CallOverrides): Promise<string>;

  rewardLength(overrides?: CallOverrides): Promise<BigNumber>;

  rewardMap(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  rewardRedirect(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  reward_integral_for(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  rewards(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, BigNumber] & {
      reward_token: string;
      reward_integral: BigNumber;
      reward_remaining: BigNumber;
    }
  >;

  setRewardHook(
    _hook: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRewardRedirect(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stakeFor(
    _for: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  user_checkpoint(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    _amount: PromiseOrValue<BigNumberish>,
    _claim: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawAll(
    claim: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    addExtraReward(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    claimable_reward(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    convexBooster(overrides?: CallOverrides): Promise<string>;

    convexPoolId(overrides?: CallOverrides): Promise<BigNumber>;

    convexStaker(overrides?: CallOverrides): Promise<string>;

    crv(overrides?: CallOverrides): Promise<string>;

    curveGauge(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    earned(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<ConvexRewardPool.EarnedDataStructOutput[]>;

    emergencyWithdraw(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    'getReward(address,address)'(
      _account: PromiseOrValue<string>,
      _forwardTo: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    'getReward(address)'(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    initialize(
      _crv: PromiseOrValue<string>,
      _curveGauge: PromiseOrValue<string>,
      _convexStaker: PromiseOrValue<string>,
      _convexBooster: PromiseOrValue<string>,
      _lptoken: PromiseOrValue<string>,
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    invalidateReward(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    maxRewards(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    rewardHook(overrides?: CallOverrides): Promise<string>;

    rewardLength(overrides?: CallOverrides): Promise<BigNumber>;

    rewardMap(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    rewardRedirect(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    reward_integral_for(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    rewards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber] & {
        reward_token: string;
        reward_integral: BigNumber;
        reward_remaining: BigNumber;
      }
    >;

    setRewardHook(_hook: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setRewardRedirect(_to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    stakeFor(
      _for: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    user_checkpoint(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      _claim: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    withdrawAll(claim: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'EmergencyWithdrawn(address,uint256)'(
      _user?: PromiseOrValue<string> | null,
      _amount?: null,
    ): EmergencyWithdrawnEventFilter;
    EmergencyWithdrawn(_user?: PromiseOrValue<string> | null, _amount?: null): EmergencyWithdrawnEventFilter;

    'RewardAdded(address)'(_rewardToken?: PromiseOrValue<string> | null): RewardAddedEventFilter;
    RewardAdded(_rewardToken?: PromiseOrValue<string> | null): RewardAddedEventFilter;

    'RewardInvalidated(address)'(_rewardToken?: null): RewardInvalidatedEventFilter;
    RewardInvalidated(_rewardToken?: null): RewardInvalidatedEventFilter;

    'RewardPaid(address,address,address,uint256)'(
      _user?: PromiseOrValue<string> | null,
      _rewardToken?: PromiseOrValue<string> | null,
      _receiver?: PromiseOrValue<string> | null,
      _rewardAmount?: null,
    ): RewardPaidEventFilter;
    RewardPaid(
      _user?: PromiseOrValue<string> | null,
      _rewardToken?: PromiseOrValue<string> | null,
      _receiver?: PromiseOrValue<string> | null,
      _rewardAmount?: null,
    ): RewardPaidEventFilter;

    'RewardRedirected(address,address)'(
      _account?: PromiseOrValue<string> | null,
      _forward?: null,
    ): RewardRedirectedEventFilter;
    RewardRedirected(_account?: PromiseOrValue<string> | null, _forward?: null): RewardRedirectedEventFilter;

    'Staked(address,uint256)'(_user?: PromiseOrValue<string> | null, _amount?: null): StakedEventFilter;
    Staked(_user?: PromiseOrValue<string> | null, _amount?: null): StakedEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;

    'Withdrawn(address,uint256)'(_user?: PromiseOrValue<string> | null, _amount?: null): WithdrawnEventFilter;
    Withdrawn(_user?: PromiseOrValue<string> | null, _amount?: null): WithdrawnEventFilter;
  };

  estimateGas: {
    addExtraReward(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    claimable_reward(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    convexBooster(overrides?: CallOverrides): Promise<BigNumber>;

    convexPoolId(overrides?: CallOverrides): Promise<BigNumber>;

    convexStaker(overrides?: CallOverrides): Promise<BigNumber>;

    crv(overrides?: CallOverrides): Promise<BigNumber>;

    curveGauge(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    earned(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'getReward(address,address)'(
      _account: PromiseOrValue<string>,
      _forwardTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'getReward(address)'(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initialize(
      _crv: PromiseOrValue<string>,
      _curveGauge: PromiseOrValue<string>,
      _convexStaker: PromiseOrValue<string>,
      _convexBooster: PromiseOrValue<string>,
      _lptoken: PromiseOrValue<string>,
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    invalidateReward(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    maxRewards(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    rewardHook(overrides?: CallOverrides): Promise<BigNumber>;

    rewardLength(overrides?: CallOverrides): Promise<BigNumber>;

    rewardMap(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    rewardRedirect(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    reward_integral_for(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    rewards(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    setRewardHook(
      _hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRewardRedirect(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stakeFor(
      _for: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    user_checkpoint(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      _claim: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawAll(
      claim: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addExtraReward(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimable_reward(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    convexBooster(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convexPoolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convexStaker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    curveGauge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    earned(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'getReward(address,address)'(
      _account: PromiseOrValue<string>,
      _forwardTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'getReward(address)'(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _crv: PromiseOrValue<string>,
      _curveGauge: PromiseOrValue<string>,
      _convexStaker: PromiseOrValue<string>,
      _convexBooster: PromiseOrValue<string>,
      _lptoken: PromiseOrValue<string>,
      _poolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    invalidateReward(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    maxRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardHook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardMap(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardRedirect(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_integral_for(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    rewards(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRewardHook(
      _hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRewardRedirect(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stakeFor(
      _for: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    user_checkpoint(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      _claim: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      claim: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
