/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type {
  MeanFinanceTransformerRegistry,
  MeanFinanceTransformerRegistryInterface,
} from '../MeanFinanceTransformerRegistry';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'AddressIsNotTransformer',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidUnderlyingInput',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'needed',
        type: 'uint256',
      },
    ],
    name: 'NeededMoreThanExpected',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'dependent',
        type: 'address',
      },
    ],
    name: 'NoTransformerRegistered',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'received',
        type: 'uint256',
      },
    ],
    name: 'ReceivedLessThanExpected',
    type: 'error',
  },
  {
    inputs: [],
    name: 'TransactionExpired',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'transformer',
            type: 'address',
          },
          {
            internalType: 'address[]',
            name: 'dependents',
            type: 'address[]',
          },
        ],
        indexed: false,
        internalType: 'struct ITransformerRegistry.TransformerRegistration[]',
        name: 'registrations',
        type: 'tuple[]',
      },
    ],
    name: 'TransformersRegistered',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address[]',
        name: 'dependents',
        type: 'address[]',
      },
    ],
    name: 'TransformersRemoved',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'dependent',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'expectedDependent',
        type: 'uint256',
      },
    ],
    name: 'calculateNeededToTransformToDependent',
    outputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'underlying',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
        ],
        internalType: 'struct ITransformer.UnderlyingAmount[]',
        name: 'neededUnderlying',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'dependent',
        type: 'address',
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'underlying',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
        ],
        internalType: 'struct ITransformer.UnderlyingAmount[]',
        name: 'expectedUnderlying',
        type: 'tuple[]',
      },
    ],
    name: 'calculateNeededToTransformToUnderlying',
    outputs: [
      {
        internalType: 'uint256',
        name: 'neededDependent',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'dependent',
        type: 'address',
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'underlying',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
        ],
        internalType: 'struct ITransformer.UnderlyingAmount[]',
        name: 'underlying',
        type: 'tuple[]',
      },
    ],
    name: 'calculateTransformToDependent',
    outputs: [
      {
        internalType: 'uint256',
        name: 'amountDependent',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'dependent',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amountDependent',
        type: 'uint256',
      },
    ],
    name: 'calculateTransformToUnderlying',
    outputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'underlying',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
        ],
        internalType: 'struct ITransformer.UnderlyingAmount[]',
        name: '',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'dependent',
        type: 'address',
      },
    ],
    name: 'getUnderlying',
    outputs: [
      {
        internalType: 'address[]',
        name: '',
        type: 'address[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'transformer',
            type: 'address',
          },
          {
            internalType: 'address[]',
            name: 'dependents',
            type: 'address[]',
          },
        ],
        internalType: 'struct ITransformerRegistry.TransformerRegistration[]',
        name: 'registrations',
        type: 'tuple[]',
      },
    ],
    name: 'registerTransformers',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: 'dependents',
        type: 'address[]',
      },
    ],
    name: 'removeTransformers',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'dependent',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'minAmountOut',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'deadline',
        type: 'uint256',
      },
    ],
    name: 'transformAllToDependent',
    outputs: [
      {
        internalType: 'uint256',
        name: 'amountDependent',
        type: 'uint256',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'dependent',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'underlying',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
        ],
        internalType: 'struct ITransformer.UnderlyingAmount[]',
        name: 'minAmountOut',
        type: 'tuple[]',
      },
      {
        internalType: 'uint256',
        name: 'deadline',
        type: 'uint256',
      },
    ],
    name: 'transformAllToUnderlying',
    outputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'underlying',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
        ],
        internalType: 'struct ITransformer.UnderlyingAmount[]',
        name: '',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'dependent',
        type: 'address',
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'underlying',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
        ],
        internalType: 'struct ITransformer.UnderlyingAmount[]',
        name: 'underlying',
        type: 'tuple[]',
      },
      {
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'minAmountOut',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'deadline',
        type: 'uint256',
      },
    ],
    name: 'transformToDependent',
    outputs: [
      {
        internalType: 'uint256',
        name: 'amountDependent',
        type: 'uint256',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'dependent',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'expectedDependent',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'underlying',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
        ],
        internalType: 'struct ITransformer.UnderlyingAmount[]',
        name: 'maxAmountIn',
        type: 'tuple[]',
      },
      {
        internalType: 'uint256',
        name: 'deadline',
        type: 'uint256',
      },
    ],
    name: 'transformToExpectedDependent',
    outputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'underlying',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
        ],
        internalType: 'struct ITransformer.UnderlyingAmount[]',
        name: 'spentUnderlying',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'dependent',
        type: 'address',
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'underlying',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
        ],
        internalType: 'struct ITransformer.UnderlyingAmount[]',
        name: 'expectedUnderlying',
        type: 'tuple[]',
      },
      {
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'maxAmountIn',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'deadline',
        type: 'uint256',
      },
    ],
    name: 'transformToExpectedUnderlying',
    outputs: [
      {
        internalType: 'uint256',
        name: 'spentDependent',
        type: 'uint256',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'dependent',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amountDependent',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'underlying',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
        ],
        internalType: 'struct ITransformer.UnderlyingAmount[]',
        name: 'minAmountOut',
        type: 'tuple[]',
      },
      {
        internalType: 'uint256',
        name: 'deadline',
        type: 'uint256',
      },
    ],
    name: 'transformToUnderlying',
    outputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'underlying',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
        ],
        internalType: 'struct ITransformer.UnderlyingAmount[]',
        name: '',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: 'dependents',
        type: 'address[]',
      },
    ],
    name: 'transformers',
    outputs: [
      {
        internalType: 'contract ITransformer[]',
        name: '',
        type: 'address[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

export class MeanFinanceTransformerRegistry__factory {
  static readonly abi = _abi;
  static createInterface(): MeanFinanceTransformerRegistryInterface {
    return new utils.Interface(_abi) as MeanFinanceTransformerRegistryInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MeanFinanceTransformerRegistry {
    return new Contract(address, _abi, signerOrProvider) as MeanFinanceTransformerRegistry;
  }
}
