/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type { PikaProtocolVault, PikaProtocolVaultInterface } from '../PikaProtocolVault';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_token',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_tokenDecimal',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: '_oracle',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_minMargin',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'positionId',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'margin',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'newMargin',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'newLeverage',
        type: 'uint256',
      },
    ],
    name: 'AddMargin',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'positionId',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'uint256',
        name: 'productId',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'price',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'entryPrice',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'margin',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'leverage',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'fee',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'int256',
        name: 'pnl',
        type: 'int256',
      },
      {
        indexed: false,
        internalType: 'bool',
        name: 'wasLiquidated',
        type: 'bool',
      },
    ],
    name: 'ClosePosition',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'positionId',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'uint256',
        name: 'productId',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'bool',
        name: 'isLong',
        type: 'bool',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'price',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'oraclePrice',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'margin',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'leverage',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'fee',
        type: 'uint256',
      },
    ],
    name: 'NewPosition',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'newOracle',
        type: 'address',
      },
    ],
    name: 'OracleUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnerUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'PikaRewardDistributed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'positionId',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'liquidator',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'liquidatorReward',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'remainingReward',
        type: 'uint256',
      },
    ],
    name: 'PositionLiquidated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'productId',
        type: 'uint256',
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'feed',
            type: 'address',
          },
          {
            internalType: 'uint72',
            name: 'maxLeverage',
            type: 'uint72',
          },
          {
            internalType: 'uint16',
            name: 'fee',
            type: 'uint16',
          },
          {
            internalType: 'bool',
            name: 'isActive',
            type: 'bool',
          },
          {
            internalType: 'uint64',
            name: 'openInterestLong',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'openInterestShort',
            type: 'uint64',
          },
          {
            internalType: 'uint16',
            name: 'interest',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'liquidationThreshold',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'liquidationBounty',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'minPriceChange',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'weight',
            type: 'uint16',
          },
          {
            internalType: 'uint64',
            name: 'reserve',
            type: 'uint64',
          },
        ],
        indexed: false,
        internalType: 'struct PikaPerpV2.Product',
        name: 'product',
        type: 'tuple',
      },
    ],
    name: 'ProductAdded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'productId',
        type: 'uint256',
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'feed',
            type: 'address',
          },
          {
            internalType: 'uint72',
            name: 'maxLeverage',
            type: 'uint72',
          },
          {
            internalType: 'uint16',
            name: 'fee',
            type: 'uint16',
          },
          {
            internalType: 'bool',
            name: 'isActive',
            type: 'bool',
          },
          {
            internalType: 'uint64',
            name: 'openInterestLong',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'openInterestShort',
            type: 'uint64',
          },
          {
            internalType: 'uint16',
            name: 'interest',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'liquidationThreshold',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'liquidationBounty',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'minPriceChange',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'weight',
            type: 'uint16',
          },
          {
            internalType: 'uint64',
            name: 'reserve',
            type: 'uint64',
          },
        ],
        indexed: false,
        internalType: 'struct PikaPerpV2.Product',
        name: 'product',
        type: 'tuple',
      },
    ],
    name: 'ProductUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'ProtocolRewardDistributed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'shares',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'shareBalance',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'bool',
        name: 'isFullRedeem',
        type: 'bool',
      },
    ],
    name: 'Redeemed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'protocolRewardRatio',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'pikaRewardRatio',
        type: 'uint256',
      },
    ],
    name: 'RewardRatioUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'shares',
        type: 'uint256',
      },
    ],
    name: 'Staked',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'VaultRewardDistributed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: 'uint96',
            name: 'cap',
            type: 'uint96',
          },
          {
            internalType: 'uint96',
            name: 'balance',
            type: 'uint96',
          },
          {
            internalType: 'uint64',
            name: 'staked',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'shares',
            type: 'uint64',
          },
          {
            internalType: 'uint32',
            name: 'stakingPeriod',
            type: 'uint32',
          },
        ],
        indexed: false,
        internalType: 'struct PikaPerpV2.Vault',
        name: 'vault',
        type: 'tuple',
      },
    ],
    name: 'VaultUpdated',
    type: 'event',
  },
  {
    inputs: [],
    name: 'BASE',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'BASE_DECIMALS',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'positionId',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'margin',
        type: 'uint256',
      },
    ],
    name: 'addMargin',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'productId',
        type: 'uint256',
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'feed',
            type: 'address',
          },
          {
            internalType: 'uint72',
            name: 'maxLeverage',
            type: 'uint72',
          },
          {
            internalType: 'uint16',
            name: 'fee',
            type: 'uint16',
          },
          {
            internalType: 'bool',
            name: 'isActive',
            type: 'bool',
          },
          {
            internalType: 'uint64',
            name: 'openInterestLong',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'openInterestShort',
            type: 'uint64',
          },
          {
            internalType: 'uint16',
            name: 'interest',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'liquidationThreshold',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'liquidationBounty',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'minPriceChange',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'weight',
            type: 'uint16',
          },
          {
            internalType: 'uint64',
            name: 'reserve',
            type: 'uint64',
          },
        ],
        internalType: 'struct PikaPerpV2.Product',
        name: '_product',
        type: 'tuple',
      },
    ],
    name: 'addProduct',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'positionId',
        type: 'uint256',
      },
    ],
    name: 'canLiquidate',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'productId',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'margin',
        type: 'uint256',
      },
      {
        internalType: 'bool',
        name: 'isLong',
        type: 'bool',
      },
    ],
    name: 'closePosition',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'positionId',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'margin',
        type: 'uint256',
      },
    ],
    name: 'closePositionWithId',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'distributePikaReward',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'distributeProtocolReward',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'distributeVaultReward',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'exposureMultiplier',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getPendingPikaReward',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getPendingProtocolReward',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getPendingVaultReward',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'productId',
        type: 'uint256',
      },
      {
        internalType: 'bool',
        name: 'isLong',
        type: 'bool',
      },
    ],
    name: 'getPosition',
    outputs: [
      {
        components: [
          {
            internalType: 'uint64',
            name: 'productId',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'leverage',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'price',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'oraclePrice',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'margin',
            type: 'uint64',
          },
          {
            internalType: 'address',
            name: 'owner',
            type: 'address',
          },
          {
            internalType: 'uint80',
            name: 'timestamp',
            type: 'uint80',
          },
          {
            internalType: 'bool',
            name: 'isLong',
            type: 'bool',
          },
        ],
        internalType: 'struct PikaPerpV2.Position',
        name: 'position',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'productId',
        type: 'uint256',
      },
      {
        internalType: 'bool',
        name: 'isLong',
        type: 'bool',
      },
    ],
    name: 'getPositionId',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256[]',
        name: 'positionIds',
        type: 'uint256[]',
      },
    ],
    name: 'getPositions',
    outputs: [
      {
        components: [
          {
            internalType: 'uint64',
            name: 'productId',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'leverage',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'price',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'oraclePrice',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'margin',
            type: 'uint64',
          },
          {
            internalType: 'address',
            name: 'owner',
            type: 'address',
          },
          {
            internalType: 'uint80',
            name: 'timestamp',
            type: 'uint80',
          },
          {
            internalType: 'bool',
            name: 'isLong',
            type: 'bool',
          },
        ],
        internalType: 'struct PikaPerpV2.Position[]',
        name: '_positions',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'productId',
        type: 'uint256',
      },
    ],
    name: 'getProduct',
    outputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'feed',
            type: 'address',
          },
          {
            internalType: 'uint72',
            name: 'maxLeverage',
            type: 'uint72',
          },
          {
            internalType: 'uint16',
            name: 'fee',
            type: 'uint16',
          },
          {
            internalType: 'bool',
            name: 'isActive',
            type: 'bool',
          },
          {
            internalType: 'uint64',
            name: 'openInterestLong',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'openInterestShort',
            type: 'uint64',
          },
          {
            internalType: 'uint16',
            name: 'interest',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'liquidationThreshold',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'liquidationBounty',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'minPriceChange',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'weight',
            type: 'uint16',
          },
          {
            internalType: 'uint64',
            name: 'reserve',
            type: 'uint64',
          },
        ],
        internalType: 'struct PikaPerpV2.Product',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'stakeOwner',
        type: 'address',
      },
    ],
    name: 'getShare',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'stakeOwner',
        type: 'address',
      },
    ],
    name: 'getShareBalance',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'stakeOwner',
        type: 'address',
      },
    ],
    name: 'getStake',
    outputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'owner',
            type: 'address',
          },
          {
            internalType: 'uint64',
            name: 'amount',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'shares',
            type: 'uint64',
          },
          {
            internalType: 'uint32',
            name: 'timestamp',
            type: 'uint32',
          },
        ],
        internalType: 'struct PikaPerpV2.Stake',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getTotalShare',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getVault',
    outputs: [
      {
        components: [
          {
            internalType: 'uint96',
            name: 'cap',
            type: 'uint96',
          },
          {
            internalType: 'uint96',
            name: 'balance',
            type: 'uint96',
          },
          {
            internalType: 'uint64',
            name: 'staked',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'shares',
            type: 'uint64',
          },
          {
            internalType: 'uint32',
            name: 'stakingPeriod',
            type: 'uint32',
          },
        ],
        internalType: 'struct PikaPerpV2.Vault',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256[]',
        name: 'positionIds',
        type: 'uint256[]',
      },
    ],
    name: 'liquidatePositions',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'liquidator',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'maxPositionMargin',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'maxShift',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'minMargin',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'minProfitTime',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'productId',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'margin',
        type: 'uint256',
      },
      {
        internalType: 'bool',
        name: 'isLong',
        type: 'bool',
      },
      {
        internalType: 'uint256',
        name: 'leverage',
        type: 'uint256',
      },
    ],
    name: 'openPosition',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'productId',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'margin',
        type: 'uint256',
      },
      {
        internalType: 'bool',
        name: 'isLong',
        type: 'bool',
      },
      {
        internalType: 'uint256',
        name: 'leverage',
        type: 'uint256',
      },
    ],
    name: 'openPositionForUser',
    outputs: [
      {
        internalType: 'uint256',
        name: 'positionId',
        type: 'uint256',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'oracle',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pendingPikaReward',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pendingProtocolReward',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pendingVaultReward',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pikaRewardDistributor',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pikaRewardRatio',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'protocolRewardDistributor',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'protocolRewardRatio',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'shares',
        type: 'uint256',
      },
    ],
    name: 'redeem',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'positionId',
        type: 'uint256',
      },
    ],
    name: 'releaseMargin',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bool',
        name: '_canUserStake',
        type: 'bool',
      },
      {
        internalType: 'bool',
        name: '_allowPublicLiquidator',
        type: 'bool',
      },
    ],
    name: 'setCanUserStakeAndAllowPublicLiquidator',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_protocolRewardDistributor',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_pikaRewardDistributor',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_vaultRewardDistributor',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_vaultTokenReward',
        type: 'address',
      },
    ],
    name: 'setDistributors',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_exposureMultiplier',
        type: 'uint256',
      },
    ],
    name: 'setExposureMultiplier',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_liquidator',
        type: 'address',
      },
    ],
    name: 'setLiquidator',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_minMargin',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_maxPositionMargin',
        type: 'uint256',
      },
    ],
    name: 'setMargin',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_maxShift',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_minProfitTime',
        type: 'uint256',
      },
    ],
    name: 'setMaxShiftAndMinProfitTime',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_oracle',
        type: 'address',
      },
    ],
    name: 'setOracle',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_owner',
        type: 'address',
      },
    ],
    name: 'setOwner',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_protocolRewardRatio',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_pikaRewardRatio',
        type: 'uint256',
      },
    ],
    name: 'setRewardRatio',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'stake',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
    ],
    name: 'stakeForUser',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'token',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'tokenBase',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'tokenDecimal',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalOpenInterest',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalWeight',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'productId',
        type: 'uint256',
      },
      {
        components: [
          {
            internalType: 'address',
            name: 'feed',
            type: 'address',
          },
          {
            internalType: 'uint72',
            name: 'maxLeverage',
            type: 'uint72',
          },
          {
            internalType: 'uint16',
            name: 'fee',
            type: 'uint16',
          },
          {
            internalType: 'bool',
            name: 'isActive',
            type: 'bool',
          },
          {
            internalType: 'uint64',
            name: 'openInterestLong',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'openInterestShort',
            type: 'uint64',
          },
          {
            internalType: 'uint16',
            name: 'interest',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'liquidationThreshold',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'liquidationBounty',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'minPriceChange',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'weight',
            type: 'uint16',
          },
          {
            internalType: 'uint64',
            name: 'reserve',
            type: 'uint64',
          },
        ],
        internalType: 'struct PikaPerpV2.Product',
        name: '_product',
        type: 'tuple',
      },
    ],
    name: 'updateProduct',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint96',
            name: 'cap',
            type: 'uint96',
          },
          {
            internalType: 'uint96',
            name: 'balance',
            type: 'uint96',
          },
          {
            internalType: 'uint64',
            name: 'staked',
            type: 'uint64',
          },
          {
            internalType: 'uint64',
            name: 'shares',
            type: 'uint64',
          },
          {
            internalType: 'uint32',
            name: 'stakingPeriod',
            type: 'uint32',
          },
        ],
        internalType: 'struct PikaPerpV2.Vault',
        name: '_vault',
        type: 'tuple',
      },
    ],
    name: 'updateVault',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'utilizationMultiplier',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'vaultRewardDistributor',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'vaultTokenReward',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

export class PikaProtocolVault__factory {
  static readonly abi = _abi;
  static createInterface(): PikaProtocolVaultInterface {
    return new utils.Interface(_abi) as PikaProtocolVaultInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): PikaProtocolVault {
    return new Contract(address, _abi, signerOrProvider) as PikaProtocolVault;
  }
}
