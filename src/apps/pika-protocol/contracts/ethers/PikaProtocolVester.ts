/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace Vester {
  export type DepositVestingStatusStruct = {
    depositId: PromiseOrValue<BigNumberish>;
    initialDepositAmount: PromiseOrValue<BigNumberish>;
    depositAmount: PromiseOrValue<BigNumberish>;
    claimableAmount: PromiseOrValue<BigNumberish>;
    vestedUntil: PromiseOrValue<BigNumberish>;
    vestingStartTime: PromiseOrValue<BigNumberish>;
  };

  export type DepositVestingStatusStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    depositId: BigNumber;
    initialDepositAmount: BigNumber;
    depositAmount: BigNumber;
    claimableAmount: BigNumber;
    vestedUntil: BigNumber;
    vestingStartTime: BigNumber;
  };
}

export interface PikaProtocolVesterInterface extends utils.Interface {
  functions: {
    'FEE_BASE()': FunctionFragment;
    'claim(uint256)': FunctionFragment;
    'claimAll()': FunctionFragment;
    'claimable(address,uint256)': FunctionFragment;
    'claimableAll(address)': FunctionFragment;
    'currentId(address)': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'depositFor(uint256,address)': FunctionFragment;
    'deposited(address,uint256)': FunctionFragment;
    'depositedAll(address)': FunctionFragment;
    'esPika()': FunctionFragment;
    'getAllUserDepositIds(address)': FunctionFragment;
    'getVestingStatus(address,uint256)': FunctionFragment;
    'getVestingStatuses(address)': FunctionFragment;
    'initialClaimFee()': FunctionFragment;
    'initialDeposited(address,uint256)': FunctionFragment;
    'initialDepositedAll(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'pika()': FunctionFragment;
    'recoverToken(address,uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setTreasury(address)': FunctionFragment;
    'totalClaimFee()': FunctionFragment;
    'totalEsPikaDeposit()': FunctionFragment;
    'totalPikaClaimed()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'treasury()': FunctionFragment;
    'unvested(address,uint256)': FunctionFragment;
    'unvestedAll(address)': FunctionFragment;
    'userInfo(address,uint256)': FunctionFragment;
    'vestingPeriod()': FunctionFragment;
    'withdraw(uint256,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'FEE_BASE'
      | 'claim'
      | 'claimAll'
      | 'claimable'
      | 'claimableAll'
      | 'currentId'
      | 'deposit'
      | 'depositFor'
      | 'deposited'
      | 'depositedAll'
      | 'esPika'
      | 'getAllUserDepositIds'
      | 'getVestingStatus'
      | 'getVestingStatuses'
      | 'initialClaimFee'
      | 'initialDeposited'
      | 'initialDepositedAll'
      | 'owner'
      | 'pika'
      | 'recoverToken'
      | 'renounceOwnership'
      | 'setTreasury'
      | 'totalClaimFee'
      | 'totalEsPikaDeposit'
      | 'totalPikaClaimed'
      | 'transferOwnership'
      | 'treasury'
      | 'unvested'
      | 'unvestedAll'
      | 'userInfo'
      | 'vestingPeriod'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'FEE_BASE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claim', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'claimAll', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'claimable',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'claimableAll', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'currentId', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'deposit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'depositFor',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposited',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'depositedAll', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'esPika', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAllUserDepositIds', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getVestingStatus',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getVestingStatuses', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'initialClaimFee', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialDeposited',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'initialDepositedAll', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pika', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'recoverToken',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setTreasury', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'totalClaimFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalEsPikaDeposit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalPikaClaimed', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'treasury', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'unvested',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'unvestedAll', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'userInfo',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'vestingPeriod', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'FEE_BASE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimableAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposited', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositedAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'esPika', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllUserDepositIds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVestingStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVestingStatuses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialClaimFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialDeposited', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialDepositedAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pika', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recoverToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTreasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalClaimFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalEsPikaDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalPikaClaimed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unvested', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unvestedAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vestingPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Claim(address,uint256,uint256,uint256)': EventFragment;
    'Deposit(address,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'TreasurySet(address)': EventFragment;
    'Withdraw(address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Claim'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TreasurySet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface ClaimEventObject {
  user: string;
  depositId: BigNumber;
  amountClaimed: BigNumber;
  claimFee: BigNumber;
}
export type ClaimEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], ClaimEventObject>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface DepositEventObject {
  user: string;
  depositId: BigNumber;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface TreasurySetEventObject {
  treasury: string;
}
export type TreasurySetEvent = TypedEvent<[string], TreasurySetEventObject>;

export type TreasurySetEventFilter = TypedEventFilter<TreasurySetEvent>;

export interface WithdrawEventObject {
  user: string;
  depositId: BigNumber;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface PikaProtocolVester extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PikaProtocolVesterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    claimable(
      _account: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    claimableAll(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { claimableAmount: BigNumber }>;

    currentId(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositFor(
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deposited(
      _account: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    depositedAll(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { depositedAllAmount: BigNumber }>;

    esPika(overrides?: CallOverrides): Promise<[string]>;

    getAllUserDepositIds(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getVestingStatus(
      _user: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[Vester.DepositVestingStatusStructOutput]>;

    getVestingStatuses(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[Vester.DepositVestingStatusStructOutput[]]>;

    initialClaimFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialDeposited(
      _account: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    initialDepositedAll(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { initialDepositedAllAmount: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pika(overrides?: CallOverrides): Promise<[string]>;

    recoverToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    totalClaimFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalEsPikaDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPikaClaimed(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    unvested(
      _account: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    unvestedAll(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    userInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        initialDepositAmount: BigNumber;
        depositAmount: BigNumber;
        vestedUntil: BigNumber;
        vestingStartTime: BigNumber;
      }
    >;

    vestingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  FEE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    _depositId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  claimable(
    _account: PromiseOrValue<string>,
    _depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  claimableAll(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  currentId(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositFor(
    _amount: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deposited(
    _account: PromiseOrValue<string>,
    _depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  depositedAll(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  esPika(overrides?: CallOverrides): Promise<string>;

  getAllUserDepositIds(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;

  getVestingStatus(
    _user: PromiseOrValue<string>,
    _depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<Vester.DepositVestingStatusStructOutput>;

  getVestingStatuses(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<Vester.DepositVestingStatusStructOutput[]>;

  initialClaimFee(overrides?: CallOverrides): Promise<BigNumber>;

  initialDeposited(
    _account: PromiseOrValue<string>,
    _depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  initialDepositedAll(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pika(overrides?: CallOverrides): Promise<string>;

  recoverToken(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setTreasury(
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  totalClaimFee(overrides?: CallOverrides): Promise<BigNumber>;

  totalEsPikaDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  totalPikaClaimed(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  unvested(
    _account: PromiseOrValue<string>,
    _depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  unvestedAll(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  userInfo(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      initialDepositAmount: BigNumber;
      depositAmount: BigNumber;
      vestedUntil: BigNumber;
      vestingStartTime: BigNumber;
    }
  >;

  vestingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _amount: PromiseOrValue<BigNumberish>,
    _depositId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    FEE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    claim(_depositId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    claimAll(overrides?: CallOverrides): Promise<void>;

    claimable(
      _account: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    claimableAll(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    currentId(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    depositFor(
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    deposited(
      _account: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    depositedAll(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    esPika(overrides?: CallOverrides): Promise<string>;

    getAllUserDepositIds(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;

    getVestingStatus(
      _user: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<Vester.DepositVestingStatusStructOutput>;

    getVestingStatuses(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<Vester.DepositVestingStatusStructOutput[]>;

    initialClaimFee(overrides?: CallOverrides): Promise<BigNumber>;

    initialDeposited(
      _account: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialDepositedAll(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pika(overrides?: CallOverrides): Promise<string>;

    recoverToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    totalClaimFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalEsPikaDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    totalPikaClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    unvested(
      _account: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    unvestedAll(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        initialDepositAmount: BigNumber;
        depositAmount: BigNumber;
        vestedUntil: BigNumber;
        vestingStartTime: BigNumber;
      }
    >;

    vestingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'Claim(address,uint256,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      depositId?: null,
      amountClaimed?: null,
      claimFee?: null,
    ): ClaimEventFilter;
    Claim(
      user?: PromiseOrValue<string> | null,
      depositId?: null,
      amountClaimed?: null,
      claimFee?: null,
    ): ClaimEventFilter;

    'Deposit(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      depositId?: null,
      amount?: null,
    ): DepositEventFilter;
    Deposit(user?: PromiseOrValue<string> | null, depositId?: null, amount?: null): DepositEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'TreasurySet(address)'(treasury?: null): TreasurySetEventFilter;
    TreasurySet(treasury?: null): TreasurySetEventFilter;

    'Withdraw(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      depositId?: null,
      amount?: null,
    ): WithdrawEventFilter;
    Withdraw(user?: PromiseOrValue<string> | null, depositId?: null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    FEE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    claimable(
      _account: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    claimableAll(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    currentId(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositFor(
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deposited(
      _account: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    depositedAll(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    esPika(overrides?: CallOverrides): Promise<BigNumber>;

    getAllUserDepositIds(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getVestingStatus(
      _user: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getVestingStatuses(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    initialClaimFee(overrides?: CallOverrides): Promise<BigNumber>;

    initialDeposited(
      _account: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialDepositedAll(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pika(overrides?: CallOverrides): Promise<BigNumber>;

    recoverToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    totalClaimFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalEsPikaDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    totalPikaClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    unvested(
      _account: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    unvestedAll(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    vestingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimAll(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    claimable(
      _account: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    claimableAll(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentId(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositFor(
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deposited(
      _account: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    depositedAll(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    esPika(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllUserDepositIds(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVestingStatus(
      _user: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getVestingStatuses(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialClaimFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialDeposited(
      _account: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialDepositedAll(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pika(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    totalClaimFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalEsPikaDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPikaClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unvested(
      _account: PromiseOrValue<string>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    unvestedAll(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    vestingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      _depositId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
