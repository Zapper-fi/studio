/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace PikaPerpV2 {
  export type ProductStruct = {
    feed: string;
    maxLeverage: BigNumberish;
    fee: BigNumberish;
    isActive: boolean;
    openInterestLong: BigNumberish;
    openInterestShort: BigNumberish;
    interest: BigNumberish;
    liquidationThreshold: BigNumberish;
    liquidationBounty: BigNumberish;
    minPriceChange: BigNumberish;
    weight: BigNumberish;
    reserve: BigNumberish;
  };

  export type ProductStructOutput = [
    string,
    BigNumber,
    number,
    boolean,
    BigNumber,
    BigNumber,
    number,
    number,
    number,
    number,
    number,
    BigNumber,
  ] & {
    feed: string;
    maxLeverage: BigNumber;
    fee: number;
    isActive: boolean;
    openInterestLong: BigNumber;
    openInterestShort: BigNumber;
    interest: number;
    liquidationThreshold: number;
    liquidationBounty: number;
    minPriceChange: number;
    weight: number;
    reserve: BigNumber;
  };

  export type VaultStruct = {
    cap: BigNumberish;
    balance: BigNumberish;
    staked: BigNumberish;
    shares: BigNumberish;
    stakingPeriod: BigNumberish;
  };

  export type VaultStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
    cap: BigNumber;
    balance: BigNumber;
    staked: BigNumber;
    shares: BigNumber;
    stakingPeriod: number;
  };

  export type PositionStruct = {
    productId: BigNumberish;
    leverage: BigNumberish;
    price: BigNumberish;
    oraclePrice: BigNumberish;
    margin: BigNumberish;
    owner: string;
    timestamp: BigNumberish;
    isLong: boolean;
  };

  export type PositionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    boolean,
  ] & {
    productId: BigNumber;
    leverage: BigNumber;
    price: BigNumber;
    oraclePrice: BigNumber;
    margin: BigNumber;
    owner: string;
    timestamp: BigNumber;
    isLong: boolean;
  };

  export type StakeStruct = {
    owner: string;
    amount: BigNumberish;
    shares: BigNumberish;
    timestamp: BigNumberish;
  };

  export type StakeStructOutput = [string, BigNumber, BigNumber, number] & {
    owner: string;
    amount: BigNumber;
    shares: BigNumber;
    timestamp: number;
  };
}

export interface PikaProtocolVaultInterface extends utils.Interface {
  functions: {
    'BASE()': FunctionFragment;
    'BASE_DECIMALS()': FunctionFragment;
    'addMargin(uint256,uint256)': FunctionFragment;
    'addProduct(uint256,(address,uint72,uint16,bool,uint64,uint64,uint16,uint16,uint16,uint16,uint16,uint64))': FunctionFragment;
    'canLiquidate(uint256)': FunctionFragment;
    'closePosition(uint256,uint256,bool)': FunctionFragment;
    'closePositionWithId(uint256,uint256)': FunctionFragment;
    'distributePikaReward()': FunctionFragment;
    'distributeProtocolReward()': FunctionFragment;
    'distributeVaultReward()': FunctionFragment;
    'exposureMultiplier()': FunctionFragment;
    'getPendingPikaReward()': FunctionFragment;
    'getPendingProtocolReward()': FunctionFragment;
    'getPendingVaultReward()': FunctionFragment;
    'getPosition(address,uint256,bool)': FunctionFragment;
    'getPositionId(address,uint256,bool)': FunctionFragment;
    'getPositions(uint256[])': FunctionFragment;
    'getProduct(uint256)': FunctionFragment;
    'getShare(address)': FunctionFragment;
    'getShareBalance(address)': FunctionFragment;
    'getStake(address)': FunctionFragment;
    'getTotalShare()': FunctionFragment;
    'getVault()': FunctionFragment;
    'liquidatePositions(uint256[])': FunctionFragment;
    'liquidator()': FunctionFragment;
    'maxPositionMargin()': FunctionFragment;
    'maxShift()': FunctionFragment;
    'minMargin()': FunctionFragment;
    'minProfitTime()': FunctionFragment;
    'openPosition(uint256,uint256,bool,uint256)': FunctionFragment;
    'openPositionForUser(address,uint256,uint256,bool,uint256)': FunctionFragment;
    'oracle()': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingPikaReward()': FunctionFragment;
    'pendingProtocolReward()': FunctionFragment;
    'pendingVaultReward()': FunctionFragment;
    'pikaRewardDistributor()': FunctionFragment;
    'pikaRewardRatio()': FunctionFragment;
    'protocolRewardDistributor()': FunctionFragment;
    'protocolRewardRatio()': FunctionFragment;
    'redeem(uint256)': FunctionFragment;
    'releaseMargin(uint256)': FunctionFragment;
    'setCanUserStakeAndAllowPublicLiquidator(bool,bool)': FunctionFragment;
    'setDistributors(address,address,address,address)': FunctionFragment;
    'setExposureMultiplier(uint256)': FunctionFragment;
    'setLiquidator(address)': FunctionFragment;
    'setMargin(uint256,uint256)': FunctionFragment;
    'setMaxShiftAndMinProfitTime(uint256,uint256)': FunctionFragment;
    'setOracle(address)': FunctionFragment;
    'setOwner(address)': FunctionFragment;
    'setRewardRatio(uint256,uint256)': FunctionFragment;
    'stake(uint256)': FunctionFragment;
    'stakeForUser(uint256,address)': FunctionFragment;
    'token()': FunctionFragment;
    'tokenBase()': FunctionFragment;
    'tokenDecimal()': FunctionFragment;
    'totalOpenInterest()': FunctionFragment;
    'totalWeight()': FunctionFragment;
    'updateProduct(uint256,(address,uint72,uint16,bool,uint64,uint64,uint16,uint16,uint16,uint16,uint16,uint64))': FunctionFragment;
    'updateVault((uint96,uint96,uint64,uint64,uint32))': FunctionFragment;
    'utilizationMultiplier()': FunctionFragment;
    'vaultRewardDistributor()': FunctionFragment;
    'vaultTokenReward()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BASE'
      | 'BASE_DECIMALS'
      | 'addMargin'
      | 'addProduct'
      | 'canLiquidate'
      | 'closePosition'
      | 'closePositionWithId'
      | 'distributePikaReward'
      | 'distributeProtocolReward'
      | 'distributeVaultReward'
      | 'exposureMultiplier'
      | 'getPendingPikaReward'
      | 'getPendingProtocolReward'
      | 'getPendingVaultReward'
      | 'getPosition'
      | 'getPositionId'
      | 'getPositions'
      | 'getProduct'
      | 'getShare'
      | 'getShareBalance'
      | 'getStake'
      | 'getTotalShare'
      | 'getVault'
      | 'liquidatePositions'
      | 'liquidator'
      | 'maxPositionMargin'
      | 'maxShift'
      | 'minMargin'
      | 'minProfitTime'
      | 'openPosition'
      | 'openPositionForUser'
      | 'oracle'
      | 'owner'
      | 'pendingPikaReward'
      | 'pendingProtocolReward'
      | 'pendingVaultReward'
      | 'pikaRewardDistributor'
      | 'pikaRewardRatio'
      | 'protocolRewardDistributor'
      | 'protocolRewardRatio'
      | 'redeem'
      | 'releaseMargin'
      | 'setCanUserStakeAndAllowPublicLiquidator'
      | 'setDistributors'
      | 'setExposureMultiplier'
      | 'setLiquidator'
      | 'setMargin'
      | 'setMaxShiftAndMinProfitTime'
      | 'setOracle'
      | 'setOwner'
      | 'setRewardRatio'
      | 'stake'
      | 'stakeForUser'
      | 'token'
      | 'tokenBase'
      | 'tokenDecimal'
      | 'totalOpenInterest'
      | 'totalWeight'
      | 'updateProduct'
      | 'updateVault'
      | 'utilizationMultiplier'
      | 'vaultRewardDistributor'
      | 'vaultTokenReward',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BASE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'BASE_DECIMALS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addMargin', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'addProduct', values: [BigNumberish, PikaPerpV2.ProductStruct]): string;
  encodeFunctionData(functionFragment: 'canLiquidate', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'closePosition', values: [BigNumberish, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'closePositionWithId', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'distributePikaReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'distributeProtocolReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'distributeVaultReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'exposureMultiplier', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPendingPikaReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPendingProtocolReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPendingVaultReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPosition', values: [string, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'getPositionId', values: [string, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'getPositions', values: [BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'getProduct', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getShare', values: [string]): string;
  encodeFunctionData(functionFragment: 'getShareBalance', values: [string]): string;
  encodeFunctionData(functionFragment: 'getStake', values: [string]): string;
  encodeFunctionData(functionFragment: 'getTotalShare', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getVault', values?: undefined): string;
  encodeFunctionData(functionFragment: 'liquidatePositions', values: [BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'liquidator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxPositionMargin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxShift', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minMargin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minProfitTime', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'openPosition',
    values: [BigNumberish, BigNumberish, boolean, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'openPositionForUser',
    values: [string, BigNumberish, BigNumberish, boolean, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'oracle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingPikaReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingProtocolReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingVaultReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pikaRewardDistributor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pikaRewardRatio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'protocolRewardDistributor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'protocolRewardRatio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'redeem', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'releaseMargin', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setCanUserStakeAndAllowPublicLiquidator', values: [boolean, boolean]): string;
  encodeFunctionData(functionFragment: 'setDistributors', values: [string, string, string, string]): string;
  encodeFunctionData(functionFragment: 'setExposureMultiplier', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setLiquidator', values: [string]): string;
  encodeFunctionData(functionFragment: 'setMargin', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setMaxShiftAndMinProfitTime', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setOracle', values: [string]): string;
  encodeFunctionData(functionFragment: 'setOwner', values: [string]): string;
  encodeFunctionData(functionFragment: 'setRewardRatio', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'stake', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'stakeForUser', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenBase', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenDecimal', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalOpenInterest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalWeight', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateProduct', values: [BigNumberish, PikaPerpV2.ProductStruct]): string;
  encodeFunctionData(functionFragment: 'updateVault', values: [PikaPerpV2.VaultStruct]): string;
  encodeFunctionData(functionFragment: 'utilizationMultiplier', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vaultRewardDistributor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vaultTokenReward', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'BASE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'BASE_DECIMALS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addMargin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addProduct', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'canLiquidate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closePosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closePositionWithId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distributePikaReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distributeProtocolReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distributeVaultReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exposureMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPendingPikaReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPendingProtocolReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPendingVaultReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPositionId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPositions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProduct', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getShareBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidatePositions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxPositionMargin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxShift', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minMargin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minProfitTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'openPosition', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'openPositionForUser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'oracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingPikaReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingProtocolReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingVaultReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pikaRewardDistributor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pikaRewardRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protocolRewardDistributor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'protocolRewardRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'releaseMargin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCanUserStakeAndAllowPublicLiquidator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDistributors', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setExposureMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLiquidator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMargin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxShiftAndMinProfitTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewardRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeForUser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenDecimal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalOpenInterest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalWeight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateProduct', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateVault', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'utilizationMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaultRewardDistributor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaultTokenReward', data: BytesLike): Result;

  events: {
    'AddMargin(uint256,address,uint256,uint256,uint256)': EventFragment;
    'ClosePosition(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,int256,bool)': EventFragment;
    'NewPosition(uint256,address,uint256,bool,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'OracleUpdated(address)': EventFragment;
    'OwnerUpdated(address)': EventFragment;
    'PikaRewardDistributed(address,uint256)': EventFragment;
    'PositionLiquidated(uint256,address,uint256,uint256)': EventFragment;
    'ProductAdded(uint256,tuple)': EventFragment;
    'ProductUpdated(uint256,tuple)': EventFragment;
    'ProtocolRewardDistributed(address,uint256)': EventFragment;
    'Redeemed(address,uint256,uint256,uint256,bool)': EventFragment;
    'RewardRatioUpdated(uint256,uint256)': EventFragment;
    'Staked(address,uint256,uint256)': EventFragment;
    'VaultRewardDistributed(address,uint256)': EventFragment;
    'VaultUpdated(tuple)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddMargin'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ClosePosition'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewPosition'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OracleUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PikaRewardDistributed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PositionLiquidated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProductAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProductUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolRewardDistributed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Redeemed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardRatioUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Staked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VaultRewardDistributed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VaultUpdated'): EventFragment;
}

export interface AddMarginEventObject {
  positionId: BigNumber;
  user: string;
  margin: BigNumber;
  newMargin: BigNumber;
  newLeverage: BigNumber;
}
export type AddMarginEvent = TypedEvent<[BigNumber, string, BigNumber, BigNumber, BigNumber], AddMarginEventObject>;

export type AddMarginEventFilter = TypedEventFilter<AddMarginEvent>;

export interface ClosePositionEventObject {
  positionId: BigNumber;
  user: string;
  productId: BigNumber;
  price: BigNumber;
  entryPrice: BigNumber;
  margin: BigNumber;
  leverage: BigNumber;
  fee: BigNumber;
  pnl: BigNumber;
  wasLiquidated: boolean;
}
export type ClosePositionEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean],
  ClosePositionEventObject
>;

export type ClosePositionEventFilter = TypedEventFilter<ClosePositionEvent>;

export interface NewPositionEventObject {
  positionId: BigNumber;
  user: string;
  productId: BigNumber;
  isLong: boolean;
  price: BigNumber;
  oraclePrice: BigNumber;
  margin: BigNumber;
  leverage: BigNumber;
  fee: BigNumber;
}
export type NewPositionEvent = TypedEvent<
  [BigNumber, string, BigNumber, boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  NewPositionEventObject
>;

export type NewPositionEventFilter = TypedEventFilter<NewPositionEvent>;

export interface OracleUpdatedEventObject {
  newOracle: string;
}
export type OracleUpdatedEvent = TypedEvent<[string], OracleUpdatedEventObject>;

export type OracleUpdatedEventFilter = TypedEventFilter<OracleUpdatedEvent>;

export interface OwnerUpdatedEventObject {
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<[string], OwnerUpdatedEventObject>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface PikaRewardDistributedEventObject {
  to: string;
  amount: BigNumber;
}
export type PikaRewardDistributedEvent = TypedEvent<[string, BigNumber], PikaRewardDistributedEventObject>;

export type PikaRewardDistributedEventFilter = TypedEventFilter<PikaRewardDistributedEvent>;

export interface PositionLiquidatedEventObject {
  positionId: BigNumber;
  liquidator: string;
  liquidatorReward: BigNumber;
  remainingReward: BigNumber;
}
export type PositionLiquidatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  PositionLiquidatedEventObject
>;

export type PositionLiquidatedEventFilter = TypedEventFilter<PositionLiquidatedEvent>;

export interface ProductAddedEventObject {
  productId: BigNumber;
  product: PikaPerpV2.ProductStructOutput;
}
export type ProductAddedEvent = TypedEvent<[BigNumber, PikaPerpV2.ProductStructOutput], ProductAddedEventObject>;

export type ProductAddedEventFilter = TypedEventFilter<ProductAddedEvent>;

export interface ProductUpdatedEventObject {
  productId: BigNumber;
  product: PikaPerpV2.ProductStructOutput;
}
export type ProductUpdatedEvent = TypedEvent<[BigNumber, PikaPerpV2.ProductStructOutput], ProductUpdatedEventObject>;

export type ProductUpdatedEventFilter = TypedEventFilter<ProductUpdatedEvent>;

export interface ProtocolRewardDistributedEventObject {
  to: string;
  amount: BigNumber;
}
export type ProtocolRewardDistributedEvent = TypedEvent<[string, BigNumber], ProtocolRewardDistributedEventObject>;

export type ProtocolRewardDistributedEventFilter = TypedEventFilter<ProtocolRewardDistributedEvent>;

export interface RedeemedEventObject {
  user: string;
  amount: BigNumber;
  shares: BigNumber;
  shareBalance: BigNumber;
  isFullRedeem: boolean;
}
export type RedeemedEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber, boolean], RedeemedEventObject>;

export type RedeemedEventFilter = TypedEventFilter<RedeemedEvent>;

export interface RewardRatioUpdatedEventObject {
  protocolRewardRatio: BigNumber;
  pikaRewardRatio: BigNumber;
}
export type RewardRatioUpdatedEvent = TypedEvent<[BigNumber, BigNumber], RewardRatioUpdatedEventObject>;

export type RewardRatioUpdatedEventFilter = TypedEventFilter<RewardRatioUpdatedEvent>;

export interface StakedEventObject {
  user: string;
  amount: BigNumber;
  shares: BigNumber;
}
export type StakedEvent = TypedEvent<[string, BigNumber, BigNumber], StakedEventObject>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface VaultRewardDistributedEventObject {
  to: string;
  amount: BigNumber;
}
export type VaultRewardDistributedEvent = TypedEvent<[string, BigNumber], VaultRewardDistributedEventObject>;

export type VaultRewardDistributedEventFilter = TypedEventFilter<VaultRewardDistributedEvent>;

export interface VaultUpdatedEventObject {
  vault: PikaPerpV2.VaultStructOutput;
}
export type VaultUpdatedEvent = TypedEvent<[PikaPerpV2.VaultStructOutput], VaultUpdatedEventObject>;

export type VaultUpdatedEventFilter = TypedEventFilter<VaultUpdatedEvent>;

export interface PikaProtocolVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PikaProtocolVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    BASE_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addMargin(
      positionId: BigNumberish,
      margin: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addProduct(
      productId: BigNumberish,
      _product: PikaPerpV2.ProductStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    canLiquidate(positionId: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    closePosition(
      productId: BigNumberish,
      margin: BigNumberish,
      isLong: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    closePositionWithId(
      positionId: BigNumberish,
      margin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    distributePikaReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    distributeProtocolReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    distributeVaultReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    exposureMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPendingPikaReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPendingProtocolReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPendingVaultReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPosition(
      account: string,
      productId: BigNumberish,
      isLong: boolean,
      overrides?: CallOverrides,
    ): Promise<
      [PikaPerpV2.PositionStructOutput] & {
        position: PikaPerpV2.PositionStructOutput;
      }
    >;

    getPositionId(
      account: string,
      productId: BigNumberish,
      isLong: boolean,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getPositions(
      positionIds: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<
      [PikaPerpV2.PositionStructOutput[]] & {
        _positions: PikaPerpV2.PositionStructOutput[];
      }
    >;

    getProduct(productId: BigNumberish, overrides?: CallOverrides): Promise<[PikaPerpV2.ProductStructOutput]>;

    getShare(stakeOwner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getShareBalance(stakeOwner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getStake(stakeOwner: string, overrides?: CallOverrides): Promise<[PikaPerpV2.StakeStructOutput]>;

    getTotalShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVault(overrides?: CallOverrides): Promise<[PikaPerpV2.VaultStructOutput]>;

    liquidatePositions(
      positionIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    liquidator(overrides?: CallOverrides): Promise<[string]>;

    maxPositionMargin(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxShift(overrides?: CallOverrides): Promise<[BigNumber]>;

    minMargin(overrides?: CallOverrides): Promise<[BigNumber]>;

    minProfitTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    openPosition(
      productId: BigNumberish,
      margin: BigNumberish,
      isLong: boolean,
      leverage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    openPositionForUser(
      user: string,
      productId: BigNumberish,
      margin: BigNumberish,
      isLong: boolean,
      leverage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingPikaReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingProtocolReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingVaultReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    pikaRewardDistributor(overrides?: CallOverrides): Promise<[string]>;

    pikaRewardRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolRewardDistributor(overrides?: CallOverrides): Promise<[string]>;

    protocolRewardRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeem(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    releaseMargin(
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setCanUserStakeAndAllowPublicLiquidator(
      _canUserStake: boolean,
      _allowPublicLiquidator: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDistributors(
      _protocolRewardDistributor: string,
      _pikaRewardDistributor: string,
      _vaultRewardDistributor: string,
      _vaultTokenReward: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setExposureMultiplier(
      _exposureMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setLiquidator(
      _liquidator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMargin(
      _minMargin: BigNumberish,
      _maxPositionMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMaxShiftAndMinProfitTime(
      _maxShift: BigNumberish,
      _minProfitTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setOwner(_owner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setRewardRatio(
      _protocolRewardRatio: BigNumberish,
      _pikaRewardRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    stakeForUser(
      amount: BigNumberish,
      user: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenBase(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenDecimal(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalOpenInterest(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateProduct(
      productId: BigNumberish,
      _product: PikaPerpV2.ProductStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateVault(
      _vault: PikaPerpV2.VaultStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    utilizationMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    vaultRewardDistributor(overrides?: CallOverrides): Promise<[string]>;

    vaultTokenReward(overrides?: CallOverrides): Promise<[string]>;
  };

  BASE(overrides?: CallOverrides): Promise<BigNumber>;

  BASE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  addMargin(
    positionId: BigNumberish,
    margin: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  addProduct(
    productId: BigNumberish,
    _product: PikaPerpV2.ProductStruct,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  canLiquidate(positionId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  closePosition(
    productId: BigNumberish,
    margin: BigNumberish,
    isLong: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  closePositionWithId(
    positionId: BigNumberish,
    margin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  distributePikaReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  distributeProtocolReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  distributeVaultReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  exposureMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  getPendingPikaReward(overrides?: CallOverrides): Promise<BigNumber>;

  getPendingProtocolReward(overrides?: CallOverrides): Promise<BigNumber>;

  getPendingVaultReward(overrides?: CallOverrides): Promise<BigNumber>;

  getPosition(
    account: string,
    productId: BigNumberish,
    isLong: boolean,
    overrides?: CallOverrides,
  ): Promise<PikaPerpV2.PositionStructOutput>;

  getPositionId(
    account: string,
    productId: BigNumberish,
    isLong: boolean,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getPositions(positionIds: BigNumberish[], overrides?: CallOverrides): Promise<PikaPerpV2.PositionStructOutput[]>;

  getProduct(productId: BigNumberish, overrides?: CallOverrides): Promise<PikaPerpV2.ProductStructOutput>;

  getShare(stakeOwner: string, overrides?: CallOverrides): Promise<BigNumber>;

  getShareBalance(stakeOwner: string, overrides?: CallOverrides): Promise<BigNumber>;

  getStake(stakeOwner: string, overrides?: CallOverrides): Promise<PikaPerpV2.StakeStructOutput>;

  getTotalShare(overrides?: CallOverrides): Promise<BigNumber>;

  getVault(overrides?: CallOverrides): Promise<PikaPerpV2.VaultStructOutput>;

  liquidatePositions(
    positionIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  liquidator(overrides?: CallOverrides): Promise<string>;

  maxPositionMargin(overrides?: CallOverrides): Promise<BigNumber>;

  maxShift(overrides?: CallOverrides): Promise<BigNumber>;

  minMargin(overrides?: CallOverrides): Promise<BigNumber>;

  minProfitTime(overrides?: CallOverrides): Promise<BigNumber>;

  openPosition(
    productId: BigNumberish,
    margin: BigNumberish,
    isLong: boolean,
    leverage: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  openPositionForUser(
    user: string,
    productId: BigNumberish,
    margin: BigNumberish,
    isLong: boolean,
    leverage: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  oracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingPikaReward(overrides?: CallOverrides): Promise<BigNumber>;

  pendingProtocolReward(overrides?: CallOverrides): Promise<BigNumber>;

  pendingVaultReward(overrides?: CallOverrides): Promise<BigNumber>;

  pikaRewardDistributor(overrides?: CallOverrides): Promise<string>;

  pikaRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

  protocolRewardDistributor(overrides?: CallOverrides): Promise<string>;

  protocolRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  releaseMargin(
    positionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setCanUserStakeAndAllowPublicLiquidator(
    _canUserStake: boolean,
    _allowPublicLiquidator: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setDistributors(
    _protocolRewardDistributor: string,
    _pikaRewardDistributor: string,
    _vaultRewardDistributor: string,
    _vaultTokenReward: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setExposureMultiplier(
    _exposureMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setLiquidator(
    _liquidator: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMargin(
    _minMargin: BigNumberish,
    _maxPositionMargin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMaxShiftAndMinProfitTime(
    _maxShift: BigNumberish,
    _minProfitTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setOracle(_oracle: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setOwner(_owner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setRewardRatio(
    _protocolRewardRatio: BigNumberish,
    _pikaRewardRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  stakeForUser(
    amount: BigNumberish,
    user: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenBase(overrides?: CallOverrides): Promise<BigNumber>;

  tokenDecimal(overrides?: CallOverrides): Promise<BigNumber>;

  totalOpenInterest(overrides?: CallOverrides): Promise<BigNumber>;

  totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

  updateProduct(
    productId: BigNumberish,
    _product: PikaPerpV2.ProductStruct,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateVault(
    _vault: PikaPerpV2.VaultStruct,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  utilizationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  vaultRewardDistributor(overrides?: CallOverrides): Promise<string>;

  vaultTokenReward(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BASE(overrides?: CallOverrides): Promise<BigNumber>;

    BASE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    addMargin(positionId: BigNumberish, margin: BigNumberish, overrides?: CallOverrides): Promise<void>;

    addProduct(productId: BigNumberish, _product: PikaPerpV2.ProductStruct, overrides?: CallOverrides): Promise<void>;

    canLiquidate(positionId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    closePosition(
      productId: BigNumberish,
      margin: BigNumberish,
      isLong: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    closePositionWithId(positionId: BigNumberish, margin: BigNumberish, overrides?: CallOverrides): Promise<void>;

    distributePikaReward(overrides?: CallOverrides): Promise<BigNumber>;

    distributeProtocolReward(overrides?: CallOverrides): Promise<BigNumber>;

    distributeVaultReward(overrides?: CallOverrides): Promise<BigNumber>;

    exposureMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingPikaReward(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingProtocolReward(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingVaultReward(overrides?: CallOverrides): Promise<BigNumber>;

    getPosition(
      account: string,
      productId: BigNumberish,
      isLong: boolean,
      overrides?: CallOverrides,
    ): Promise<PikaPerpV2.PositionStructOutput>;

    getPositionId(
      account: string,
      productId: BigNumberish,
      isLong: boolean,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPositions(positionIds: BigNumberish[], overrides?: CallOverrides): Promise<PikaPerpV2.PositionStructOutput[]>;

    getProduct(productId: BigNumberish, overrides?: CallOverrides): Promise<PikaPerpV2.ProductStructOutput>;

    getShare(stakeOwner: string, overrides?: CallOverrides): Promise<BigNumber>;

    getShareBalance(stakeOwner: string, overrides?: CallOverrides): Promise<BigNumber>;

    getStake(stakeOwner: string, overrides?: CallOverrides): Promise<PikaPerpV2.StakeStructOutput>;

    getTotalShare(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<PikaPerpV2.VaultStructOutput>;

    liquidatePositions(positionIds: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    liquidator(overrides?: CallOverrides): Promise<string>;

    maxPositionMargin(overrides?: CallOverrides): Promise<BigNumber>;

    maxShift(overrides?: CallOverrides): Promise<BigNumber>;

    minMargin(overrides?: CallOverrides): Promise<BigNumber>;

    minProfitTime(overrides?: CallOverrides): Promise<BigNumber>;

    openPosition(
      productId: BigNumberish,
      margin: BigNumberish,
      isLong: boolean,
      leverage: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    openPositionForUser(
      user: string,
      productId: BigNumberish,
      margin: BigNumberish,
      isLong: boolean,
      leverage: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingPikaReward(overrides?: CallOverrides): Promise<BigNumber>;

    pendingProtocolReward(overrides?: CallOverrides): Promise<BigNumber>;

    pendingVaultReward(overrides?: CallOverrides): Promise<BigNumber>;

    pikaRewardDistributor(overrides?: CallOverrides): Promise<string>;

    pikaRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

    protocolRewardDistributor(overrides?: CallOverrides): Promise<string>;

    protocolRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(shares: BigNumberish, overrides?: CallOverrides): Promise<void>;

    releaseMargin(positionId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setCanUserStakeAndAllowPublicLiquidator(
      _canUserStake: boolean,
      _allowPublicLiquidator: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDistributors(
      _protocolRewardDistributor: string,
      _pikaRewardDistributor: string,
      _vaultRewardDistributor: string,
      _vaultTokenReward: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setExposureMultiplier(_exposureMultiplier: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setLiquidator(_liquidator: string, overrides?: CallOverrides): Promise<void>;

    setMargin(_minMargin: BigNumberish, _maxPositionMargin: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setMaxShiftAndMinProfitTime(
      _maxShift: BigNumberish,
      _minProfitTime: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setOracle(_oracle: string, overrides?: CallOverrides): Promise<void>;

    setOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    setRewardRatio(
      _protocolRewardRatio: BigNumberish,
      _pikaRewardRatio: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakeForUser(amount: BigNumberish, user: string, overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenBase(overrides?: CallOverrides): Promise<BigNumber>;

    tokenDecimal(overrides?: CallOverrides): Promise<BigNumber>;

    totalOpenInterest(overrides?: CallOverrides): Promise<BigNumber>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    updateProduct(
      productId: BigNumberish,
      _product: PikaPerpV2.ProductStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateVault(_vault: PikaPerpV2.VaultStruct, overrides?: CallOverrides): Promise<void>;

    utilizationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    vaultRewardDistributor(overrides?: CallOverrides): Promise<string>;

    vaultTokenReward(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'AddMargin(uint256,address,uint256,uint256,uint256)'(
      positionId?: BigNumberish | null,
      user?: string | null,
      margin?: null,
      newMargin?: null,
      newLeverage?: null,
    ): AddMarginEventFilter;
    AddMargin(
      positionId?: BigNumberish | null,
      user?: string | null,
      margin?: null,
      newMargin?: null,
      newLeverage?: null,
    ): AddMarginEventFilter;

    'ClosePosition(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,int256,bool)'(
      positionId?: BigNumberish | null,
      user?: string | null,
      productId?: BigNumberish | null,
      price?: null,
      entryPrice?: null,
      margin?: null,
      leverage?: null,
      fee?: null,
      pnl?: null,
      wasLiquidated?: null,
    ): ClosePositionEventFilter;
    ClosePosition(
      positionId?: BigNumberish | null,
      user?: string | null,
      productId?: BigNumberish | null,
      price?: null,
      entryPrice?: null,
      margin?: null,
      leverage?: null,
      fee?: null,
      pnl?: null,
      wasLiquidated?: null,
    ): ClosePositionEventFilter;

    'NewPosition(uint256,address,uint256,bool,uint256,uint256,uint256,uint256,uint256)'(
      positionId?: BigNumberish | null,
      user?: string | null,
      productId?: BigNumberish | null,
      isLong?: null,
      price?: null,
      oraclePrice?: null,
      margin?: null,
      leverage?: null,
      fee?: null,
    ): NewPositionEventFilter;
    NewPosition(
      positionId?: BigNumberish | null,
      user?: string | null,
      productId?: BigNumberish | null,
      isLong?: null,
      price?: null,
      oraclePrice?: null,
      margin?: null,
      leverage?: null,
      fee?: null,
    ): NewPositionEventFilter;

    'OracleUpdated(address)'(newOracle?: null): OracleUpdatedEventFilter;
    OracleUpdated(newOracle?: null): OracleUpdatedEventFilter;

    'OwnerUpdated(address)'(newOwner?: null): OwnerUpdatedEventFilter;
    OwnerUpdated(newOwner?: null): OwnerUpdatedEventFilter;

    'PikaRewardDistributed(address,uint256)'(to?: null, amount?: null): PikaRewardDistributedEventFilter;
    PikaRewardDistributed(to?: null, amount?: null): PikaRewardDistributedEventFilter;

    'PositionLiquidated(uint256,address,uint256,uint256)'(
      positionId?: BigNumberish | null,
      liquidator?: string | null,
      liquidatorReward?: null,
      remainingReward?: null,
    ): PositionLiquidatedEventFilter;
    PositionLiquidated(
      positionId?: BigNumberish | null,
      liquidator?: string | null,
      liquidatorReward?: null,
      remainingReward?: null,
    ): PositionLiquidatedEventFilter;

    'ProductAdded(uint256,tuple)'(productId?: null, product?: null): ProductAddedEventFilter;
    ProductAdded(productId?: null, product?: null): ProductAddedEventFilter;

    'ProductUpdated(uint256,tuple)'(productId?: null, product?: null): ProductUpdatedEventFilter;
    ProductUpdated(productId?: null, product?: null): ProductUpdatedEventFilter;

    'ProtocolRewardDistributed(address,uint256)'(to?: null, amount?: null): ProtocolRewardDistributedEventFilter;
    ProtocolRewardDistributed(to?: null, amount?: null): ProtocolRewardDistributedEventFilter;

    'Redeemed(address,uint256,uint256,uint256,bool)'(
      user?: string | null,
      amount?: null,
      shares?: null,
      shareBalance?: null,
      isFullRedeem?: null,
    ): RedeemedEventFilter;
    Redeemed(
      user?: string | null,
      amount?: null,
      shares?: null,
      shareBalance?: null,
      isFullRedeem?: null,
    ): RedeemedEventFilter;

    'RewardRatioUpdated(uint256,uint256)'(
      protocolRewardRatio?: null,
      pikaRewardRatio?: null,
    ): RewardRatioUpdatedEventFilter;
    RewardRatioUpdated(protocolRewardRatio?: null, pikaRewardRatio?: null): RewardRatioUpdatedEventFilter;

    'Staked(address,uint256,uint256)'(user?: string | null, amount?: null, shares?: null): StakedEventFilter;
    Staked(user?: string | null, amount?: null, shares?: null): StakedEventFilter;

    'VaultRewardDistributed(address,uint256)'(to?: null, amount?: null): VaultRewardDistributedEventFilter;
    VaultRewardDistributed(to?: null, amount?: null): VaultRewardDistributedEventFilter;

    'VaultUpdated(tuple)'(vault?: null): VaultUpdatedEventFilter;
    VaultUpdated(vault?: null): VaultUpdatedEventFilter;
  };

  estimateGas: {
    BASE(overrides?: CallOverrides): Promise<BigNumber>;

    BASE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    addMargin(
      positionId: BigNumberish,
      margin: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    addProduct(
      productId: BigNumberish,
      _product: PikaPerpV2.ProductStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    canLiquidate(positionId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    closePosition(
      productId: BigNumberish,
      margin: BigNumberish,
      isLong: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    closePositionWithId(
      positionId: BigNumberish,
      margin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    distributePikaReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    distributeProtocolReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    distributeVaultReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    exposureMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingPikaReward(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingProtocolReward(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingVaultReward(overrides?: CallOverrides): Promise<BigNumber>;

    getPosition(
      account: string,
      productId: BigNumberish,
      isLong: boolean,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPositionId(
      account: string,
      productId: BigNumberish,
      isLong: boolean,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPositions(positionIds: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber>;

    getProduct(productId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getShare(stakeOwner: string, overrides?: CallOverrides): Promise<BigNumber>;

    getShareBalance(stakeOwner: string, overrides?: CallOverrides): Promise<BigNumber>;

    getStake(stakeOwner: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalShare(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    liquidatePositions(
      positionIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    liquidator(overrides?: CallOverrides): Promise<BigNumber>;

    maxPositionMargin(overrides?: CallOverrides): Promise<BigNumber>;

    maxShift(overrides?: CallOverrides): Promise<BigNumber>;

    minMargin(overrides?: CallOverrides): Promise<BigNumber>;

    minProfitTime(overrides?: CallOverrides): Promise<BigNumber>;

    openPosition(
      productId: BigNumberish,
      margin: BigNumberish,
      isLong: boolean,
      leverage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    openPositionForUser(
      user: string,
      productId: BigNumberish,
      margin: BigNumberish,
      isLong: boolean,
      leverage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingPikaReward(overrides?: CallOverrides): Promise<BigNumber>;

    pendingProtocolReward(overrides?: CallOverrides): Promise<BigNumber>;

    pendingVaultReward(overrides?: CallOverrides): Promise<BigNumber>;

    pikaRewardDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    pikaRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

    protocolRewardDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    protocolRewardRatio(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(shares: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    releaseMargin(
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setCanUserStakeAndAllowPublicLiquidator(
      _canUserStake: boolean,
      _allowPublicLiquidator: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setDistributors(
      _protocolRewardDistributor: string,
      _pikaRewardDistributor: string,
      _vaultRewardDistributor: string,
      _vaultTokenReward: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setExposureMultiplier(
      _exposureMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setLiquidator(_liquidator: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setMargin(
      _minMargin: BigNumberish,
      _maxPositionMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMaxShiftAndMinProfitTime(
      _maxShift: BigNumberish,
      _minProfitTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setOracle(_oracle: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setOwner(_owner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setRewardRatio(
      _protocolRewardRatio: BigNumberish,
      _pikaRewardRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    stake(amount: BigNumberish, overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    stakeForUser(
      amount: BigNumberish,
      user: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBase(overrides?: CallOverrides): Promise<BigNumber>;

    tokenDecimal(overrides?: CallOverrides): Promise<BigNumber>;

    totalOpenInterest(overrides?: CallOverrides): Promise<BigNumber>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    updateProduct(
      productId: BigNumberish,
      _product: PikaPerpV2.ProductStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateVault(
      _vault: PikaPerpV2.VaultStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    utilizationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    vaultRewardDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    vaultTokenReward(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BASE_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addMargin(
      positionId: BigNumberish,
      margin: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    addProduct(
      productId: BigNumberish,
      _product: PikaPerpV2.ProductStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    canLiquidate(positionId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closePosition(
      productId: BigNumberish,
      margin: BigNumberish,
      isLong: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    closePositionWithId(
      positionId: BigNumberish,
      margin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    distributePikaReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    distributeProtocolReward(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    distributeVaultReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    exposureMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingPikaReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingProtocolReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingVaultReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPosition(
      account: string,
      productId: BigNumberish,
      isLong: boolean,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPositionId(
      account: string,
      productId: BigNumberish,
      isLong: boolean,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPositions(positionIds: BigNumberish[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProduct(productId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getShare(stakeOwner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getShareBalance(stakeOwner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStake(stakeOwner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidatePositions(
      positionIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    liquidator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxPositionMargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxShift(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minMargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minProfitTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openPosition(
      productId: BigNumberish,
      margin: BigNumberish,
      isLong: boolean,
      leverage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    openPositionForUser(
      user: string,
      productId: BigNumberish,
      margin: BigNumberish,
      isLong: boolean,
      leverage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingPikaReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingProtocolReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingVaultReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pikaRewardDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pikaRewardRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolRewardDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolRewardRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    releaseMargin(
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setCanUserStakeAndAllowPublicLiquidator(
      _canUserStake: boolean,
      _allowPublicLiquidator: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setDistributors(
      _protocolRewardDistributor: string,
      _pikaRewardDistributor: string,
      _vaultRewardDistributor: string,
      _vaultTokenReward: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setExposureMultiplier(
      _exposureMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setLiquidator(
      _liquidator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMargin(
      _minMargin: BigNumberish,
      _maxPositionMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMaxShiftAndMinProfitTime(
      _maxShift: BigNumberish,
      _minProfitTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRewardRatio(
      _protocolRewardRatio: BigNumberish,
      _pikaRewardRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    stakeForUser(
      amount: BigNumberish,
      user: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenDecimal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalOpenInterest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateProduct(
      productId: BigNumberish,
      _product: PikaPerpV2.ProductStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateVault(
      _vault: PikaPerpV2.VaultStruct,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    utilizationMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultRewardDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultTokenReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
