/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface ArborFinanceInterface extends utils.Interface {
  functions: {
    'allowance(address,address)': FunctionFragment;
    'amountUnpaid()': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'burn(uint256)': FunctionFragment;
    'burnFrom(address,uint256)': FunctionFragment;
    'collateralBalance()': FunctionFragment;
    'collateralRatio()': FunctionFragment;
    'collateralToken()': FunctionFragment;
    'convert(uint256)': FunctionFragment;
    'convertibleRatio()': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'gracePeriodEnd()': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initialize(string,string,address,uint256,address,address,uint256,uint256,uint256)': FunctionFragment;
    'isMature()': FunctionFragment;
    'maturity()': FunctionFragment;
    'name()': FunctionFragment;
    'owner()': FunctionFragment;
    'pay(uint256)': FunctionFragment;
    'paymentBalance()': FunctionFragment;
    'paymentToken()': FunctionFragment;
    'previewConvertBeforeMaturity(uint256)': FunctionFragment;
    'previewRedeemAtMaturity(uint256)': FunctionFragment;
    'previewWithdrawExcessCollateral()': FunctionFragment;
    'previewWithdrawExcessCollateralAfterPayment(uint256)': FunctionFragment;
    'previewWithdrawExcessPayment()': FunctionFragment;
    'redeem(uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'sweep(address,address)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'withdrawExcessCollateral(uint256,address)': FunctionFragment;
    'withdrawExcessPayment(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'allowance'
      | 'amountUnpaid'
      | 'approve'
      | 'balanceOf'
      | 'burn'
      | 'burnFrom'
      | 'collateralBalance'
      | 'collateralRatio'
      | 'collateralToken'
      | 'convert'
      | 'convertibleRatio'
      | 'decimals'
      | 'decreaseAllowance'
      | 'gracePeriodEnd'
      | 'increaseAllowance'
      | 'initialize'
      | 'isMature'
      | 'maturity'
      | 'name'
      | 'owner'
      | 'pay'
      | 'paymentBalance'
      | 'paymentToken'
      | 'previewConvertBeforeMaturity'
      | 'previewRedeemAtMaturity'
      | 'previewWithdrawExcessCollateral'
      | 'previewWithdrawExcessCollateralAfterPayment'
      | 'previewWithdrawExcessPayment'
      | 'redeem'
      | 'renounceOwnership'
      | 'sweep'
      | 'symbol'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'withdrawExcessCollateral'
      | 'withdrawExcessPayment',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'amountUnpaid', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'burn', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'burnFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'collateralBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'collateralRatio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'collateralToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'convert', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'convertibleRatio', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'gracePeriodEnd', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'isMature', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maturity', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pay', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'paymentBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paymentToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'previewConvertBeforeMaturity', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'previewRedeemAtMaturity', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'previewWithdrawExcessCollateral', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'previewWithdrawExcessCollateralAfterPayment',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'previewWithdrawExcessPayment', values?: undefined): string;
  encodeFunctionData(functionFragment: 'redeem', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'sweep', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'withdrawExcessCollateral',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'withdrawExcessPayment', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'amountUnpaid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burnFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateralBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateralRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateralToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convert', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertibleRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gracePeriodEnd', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isMature', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maturity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paymentBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paymentToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewConvertBeforeMaturity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewRedeemAtMaturity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewWithdrawExcessCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewWithdrawExcessCollateralAfterPayment', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewWithdrawExcessPayment', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sweep', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawExcessCollateral', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawExcessPayment', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'CollateralWithdraw(address,address,address,uint256)': EventFragment;
    'Convert(address,address,uint256,uint256)': EventFragment;
    'ExcessPaymentWithdraw(address,address,address,uint256)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Payment(address,uint256)': EventFragment;
    'Redeem(address,address,address,uint256,uint256,uint256)': EventFragment;
    'TokenSweep(address,address,address,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CollateralWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Convert'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExcessPaymentWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Payment'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Redeem'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenSweep'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface CollateralWithdrawEventObject {
  from: string;
  receiver: string;
  token: string;
  amount: BigNumber;
}
export type CollateralWithdrawEvent = TypedEvent<[string, string, string, BigNumber], CollateralWithdrawEventObject>;

export type CollateralWithdrawEventFilter = TypedEventFilter<CollateralWithdrawEvent>;

export interface ConvertEventObject {
  from: string;
  collateralToken: string;
  amountOfBondsConverted: BigNumber;
  amountOfCollateralTokens: BigNumber;
}
export type ConvertEvent = TypedEvent<[string, string, BigNumber, BigNumber], ConvertEventObject>;

export type ConvertEventFilter = TypedEventFilter<ConvertEvent>;

export interface ExcessPaymentWithdrawEventObject {
  from: string;
  receiver: string;
  token: string;
  amount: BigNumber;
}
export type ExcessPaymentWithdrawEvent = TypedEvent<
  [string, string, string, BigNumber],
  ExcessPaymentWithdrawEventObject
>;

export type ExcessPaymentWithdrawEventFilter = TypedEventFilter<ExcessPaymentWithdrawEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PaymentEventObject {
  from: string;
  amount: BigNumber;
}
export type PaymentEvent = TypedEvent<[string, BigNumber], PaymentEventObject>;

export type PaymentEventFilter = TypedEventFilter<PaymentEvent>;

export interface RedeemEventObject {
  from: string;
  paymentToken: string;
  collateralToken: string;
  amountOfBondsRedeemed: BigNumber;
  amountOfPaymentTokensReceived: BigNumber;
  amountOfCollateralTokens: BigNumber;
}
export type RedeemEvent = TypedEvent<[string, string, string, BigNumber, BigNumber, BigNumber], RedeemEventObject>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface TokenSweepEventObject {
  from: string;
  receiver: string;
  token: string;
  amount: BigNumber;
}
export type TokenSweepEvent = TypedEvent<[string, string, string, BigNumber], TokenSweepEventObject>;

export type TokenSweepEventFilter = TypedEventFilter<TokenSweepEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ArborFinance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ArborFinanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    amountUnpaid(overrides?: CallOverrides): Promise<[BigNumber] & { paymentTokens: BigNumber }>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    burnFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    collateralBalance(overrides?: CallOverrides): Promise<[BigNumber] & { collateralTokens: BigNumber }>;

    collateralRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateralToken(overrides?: CallOverrides): Promise<[string]>;

    convert(
      bonds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    convertibleRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    gracePeriodEnd(overrides?: CallOverrides): Promise<[BigNumber] & { gracePeriodEndTimestamp: BigNumber }>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    initialize(
      bondName: PromiseOrValue<string>,
      bondSymbol: PromiseOrValue<string>,
      bondOwner: PromiseOrValue<string>,
      _maturity: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _collateralRatio: PromiseOrValue<BigNumberish>,
      _convertibleRatio: PromiseOrValue<BigNumberish>,
      maxSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isMature(overrides?: CallOverrides): Promise<[boolean] & { isBondMature: boolean }>;

    maturity(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pay(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    paymentBalance(overrides?: CallOverrides): Promise<[BigNumber] & { paymentTokens: BigNumber }>;

    paymentToken(overrides?: CallOverrides): Promise<[string]>;

    previewConvertBeforeMaturity(
      bonds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { collateralTokens: BigNumber }>;

    previewRedeemAtMaturity(
      bonds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        paymentTokensToSend: BigNumber;
        collateralTokensToSend: BigNumber;
      }
    >;

    previewWithdrawExcessCollateral(overrides?: CallOverrides): Promise<[BigNumber] & { collateralTokens: BigNumber }>;

    previewWithdrawExcessCollateralAfterPayment(
      payment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { collateralTokens: BigNumber }>;

    previewWithdrawExcessPayment(overrides?: CallOverrides): Promise<[BigNumber] & { paymentTokens: BigNumber }>;

    redeem(
      bonds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    sweep(
      sweepingToken: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawExcessCollateral(
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawExcessPayment(
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  amountUnpaid(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  burnFrom(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  collateralBalance(overrides?: CallOverrides): Promise<BigNumber>;

  collateralRatio(overrides?: CallOverrides): Promise<BigNumber>;

  collateralToken(overrides?: CallOverrides): Promise<string>;

  convert(
    bonds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  convertibleRatio(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  gracePeriodEnd(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  initialize(
    bondName: PromiseOrValue<string>,
    bondSymbol: PromiseOrValue<string>,
    bondOwner: PromiseOrValue<string>,
    _maturity: PromiseOrValue<BigNumberish>,
    _paymentToken: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _collateralRatio: PromiseOrValue<BigNumberish>,
    _convertibleRatio: PromiseOrValue<BigNumberish>,
    maxSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isMature(overrides?: CallOverrides): Promise<boolean>;

  maturity(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pay(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  paymentBalance(overrides?: CallOverrides): Promise<BigNumber>;

  paymentToken(overrides?: CallOverrides): Promise<string>;

  previewConvertBeforeMaturity(bonds: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  previewRedeemAtMaturity(
    bonds: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      paymentTokensToSend: BigNumber;
      collateralTokensToSend: BigNumber;
    }
  >;

  previewWithdrawExcessCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  previewWithdrawExcessCollateralAfterPayment(
    payment: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  previewWithdrawExcessPayment(overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    bonds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  sweep(
    sweepingToken: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawExcessCollateral(
    amount: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawExcessPayment(
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    amountUnpaid(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    burn(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    burnFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    collateralBalance(overrides?: CallOverrides): Promise<BigNumber>;

    collateralRatio(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<string>;

    convert(bonds: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    convertibleRatio(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    gracePeriodEnd(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    initialize(
      bondName: PromiseOrValue<string>,
      bondSymbol: PromiseOrValue<string>,
      bondOwner: PromiseOrValue<string>,
      _maturity: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _collateralRatio: PromiseOrValue<BigNumberish>,
      _convertibleRatio: PromiseOrValue<BigNumberish>,
      maxSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    isMature(overrides?: CallOverrides): Promise<boolean>;

    maturity(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pay(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    paymentBalance(overrides?: CallOverrides): Promise<BigNumber>;

    paymentToken(overrides?: CallOverrides): Promise<string>;

    previewConvertBeforeMaturity(bonds: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewRedeemAtMaturity(
      bonds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        paymentTokensToSend: BigNumber;
        collateralTokensToSend: BigNumber;
      }
    >;

    previewWithdrawExcessCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    previewWithdrawExcessCollateralAfterPayment(
      payment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    previewWithdrawExcessPayment(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(bonds: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sweep(
      sweepingToken: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    withdrawExcessCollateral(
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawExcessPayment(receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'CollateralWithdraw(address,address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
    ): CollateralWithdrawEventFilter;
    CollateralWithdraw(
      from?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
    ): CollateralWithdrawEventFilter;

    'Convert(address,address,uint256,uint256)'(
      from?: PromiseOrValue<string> | null,
      collateralToken?: PromiseOrValue<string> | null,
      amountOfBondsConverted?: null,
      amountOfCollateralTokens?: null,
    ): ConvertEventFilter;
    Convert(
      from?: PromiseOrValue<string> | null,
      collateralToken?: PromiseOrValue<string> | null,
      amountOfBondsConverted?: null,
      amountOfCollateralTokens?: null,
    ): ConvertEventFilter;

    'ExcessPaymentWithdraw(address,address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
    ): ExcessPaymentWithdrawEventFilter;
    ExcessPaymentWithdraw(
      from?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
    ): ExcessPaymentWithdrawEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'Payment(address,uint256)'(from?: PromiseOrValue<string> | null, amount?: null): PaymentEventFilter;
    Payment(from?: PromiseOrValue<string> | null, amount?: null): PaymentEventFilter;

    'Redeem(address,address,address,uint256,uint256,uint256)'(
      from?: PromiseOrValue<string> | null,
      paymentToken?: PromiseOrValue<string> | null,
      collateralToken?: PromiseOrValue<string> | null,
      amountOfBondsRedeemed?: null,
      amountOfPaymentTokensReceived?: null,
      amountOfCollateralTokens?: null,
    ): RedeemEventFilter;
    Redeem(
      from?: PromiseOrValue<string> | null,
      paymentToken?: PromiseOrValue<string> | null,
      collateralToken?: PromiseOrValue<string> | null,
      amountOfBondsRedeemed?: null,
      amountOfPaymentTokensReceived?: null,
      amountOfCollateralTokens?: null,
    ): RedeemEventFilter;

    'TokenSweep(address,address,address,uint256)'(
      from?: null,
      receiver?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null,
    ): TokenSweepEventFilter;
    TokenSweep(
      from?: null,
      receiver?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null,
    ): TokenSweepEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
  };

  estimateGas: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    amountUnpaid(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    burnFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    collateralBalance(overrides?: CallOverrides): Promise<BigNumber>;

    collateralRatio(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    convert(
      bonds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    convertibleRatio(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    gracePeriodEnd(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    initialize(
      bondName: PromiseOrValue<string>,
      bondSymbol: PromiseOrValue<string>,
      bondOwner: PromiseOrValue<string>,
      _maturity: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _collateralRatio: PromiseOrValue<BigNumberish>,
      _convertibleRatio: PromiseOrValue<BigNumberish>,
      maxSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isMature(overrides?: CallOverrides): Promise<BigNumber>;

    maturity(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pay(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    paymentBalance(overrides?: CallOverrides): Promise<BigNumber>;

    paymentToken(overrides?: CallOverrides): Promise<BigNumber>;

    previewConvertBeforeMaturity(bonds: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewRedeemAtMaturity(bonds: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewWithdrawExcessCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    previewWithdrawExcessCollateralAfterPayment(
      payment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    previewWithdrawExcessPayment(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      bonds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    sweep(
      sweepingToken: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawExcessCollateral(
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawExcessPayment(
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    amountUnpaid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    burnFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    collateralBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convert(
      bonds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    convertibleRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    gracePeriodEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      bondName: PromiseOrValue<string>,
      bondSymbol: PromiseOrValue<string>,
      bondOwner: PromiseOrValue<string>,
      _maturity: PromiseOrValue<BigNumberish>,
      _paymentToken: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _collateralRatio: PromiseOrValue<BigNumberish>,
      _convertibleRatio: PromiseOrValue<BigNumberish>,
      maxSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isMature(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maturity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pay(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    paymentBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewConvertBeforeMaturity(
      bonds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    previewRedeemAtMaturity(
      bonds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    previewWithdrawExcessCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewWithdrawExcessCollateralAfterPayment(
      payment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    previewWithdrawExcessPayment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      bonds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    sweep(
      sweepingToken: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawExcessCollateral(
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawExcessPayment(
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
