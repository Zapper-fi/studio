/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IdleControllerInterface extends utils.Interface {
  functions: {
    "_addIdleMarkets(address[])": FunctionFragment;
    "_become(address)": FunctionFragment;
    "_dropIdleMarket(address)": FunctionFragment;
    "_resetMarkets()": FunctionFragment;
    "_setBonusDistribution(uint256)": FunctionFragment;
    "_setIdleAddress(address)": FunctionFragment;
    "_setIdleRate(uint256)": FunctionFragment;
    "_setPriceOracle(address)": FunctionFragment;
    "_supportMarkets(address[])": FunctionFragment;
    "admin()": FunctionFragment;
    "allMarkets(uint256)": FunctionFragment;
    "bonusEnd()": FunctionFragment;
    "bonusMultiplier()": FunctionFragment;
    "claimIdle(address[],address[])": FunctionFragment;
    "comptrollerImplementation()": FunctionFragment;
    "getAllMarkets()": FunctionFragment;
    "idleAccrued(address)": FunctionFragment;
    "idleAddress()": FunctionFragment;
    "idleClaimThreshold()": FunctionFragment;
    "idleInitialIndex()": FunctionFragment;
    "idleRate()": FunctionFragment;
    "idleSpeeds(address)": FunctionFragment;
    "idleSupplierIndex(address,address)": FunctionFragment;
    "idleSupplyState(address)": FunctionFragment;
    "markets(address)": FunctionFragment;
    "oracle()": FunctionFragment;
    "pendingAdmin()": FunctionFragment;
    "pendingComptrollerImplementation()": FunctionFragment;
    "refreshIdleSpeeds()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_addIdleMarkets"
      | "_become"
      | "_dropIdleMarket"
      | "_resetMarkets"
      | "_setBonusDistribution"
      | "_setIdleAddress"
      | "_setIdleRate"
      | "_setPriceOracle"
      | "_supportMarkets"
      | "admin"
      | "allMarkets"
      | "bonusEnd"
      | "bonusMultiplier"
      | "claimIdle"
      | "comptrollerImplementation"
      | "getAllMarkets"
      | "idleAccrued"
      | "idleAddress"
      | "idleClaimThreshold"
      | "idleInitialIndex"
      | "idleRate"
      | "idleSpeeds"
      | "idleSupplierIndex"
      | "idleSupplyState"
      | "markets"
      | "oracle"
      | "pendingAdmin"
      | "pendingComptrollerImplementation"
      | "refreshIdleSpeeds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_addIdleMarkets",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_become",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_dropIdleMarket",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_resetMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_setBonusDistribution",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setIdleAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setIdleRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_setPriceOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_supportMarkets",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allMarkets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "bonusEnd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bonusMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimIdle",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "comptrollerImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "idleAccrued",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "idleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "idleClaimThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "idleInitialIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "idleRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "idleSpeeds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "idleSupplierIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "idleSupplyState",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "markets",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingComptrollerImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refreshIdleSpeeds",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_addIdleMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_become", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_dropIdleMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_resetMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setBonusDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setIdleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setIdleRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_supportMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allMarkets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bonusEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bonusMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimIdle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "comptrollerImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "idleAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "idleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "idleClaimThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "idleInitialIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "idleRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "idleSpeeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "idleSupplierIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "idleSupplyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingComptrollerImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refreshIdleSpeeds",
    data: BytesLike
  ): Result;

  events: {
    "DistributedIdle(address,address,uint256,uint256)": EventFragment;
    "IdleSpeedUpdated(address,uint256)": EventFragment;
    "MarketIdled(address,bool)": EventFragment;
    "MarketListed(address)": EventFragment;
    "NewIdleOracle(address,address)": EventFragment;
    "NewIdleRate(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DistributedIdle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IdleSpeedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketIdled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewIdleOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewIdleRate"): EventFragment;
}

export interface DistributedIdleEventObject {
  idleToken: string;
  supplier: string;
  idleDelta: BigNumber;
  idleSupplyIndex: BigNumber;
}
export type DistributedIdleEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DistributedIdleEventObject
>;

export type DistributedIdleEventFilter = TypedEventFilter<DistributedIdleEvent>;

export interface IdleSpeedUpdatedEventObject {
  idleToken: string;
  newSpeed: BigNumber;
}
export type IdleSpeedUpdatedEvent = TypedEvent<
  [string, BigNumber],
  IdleSpeedUpdatedEventObject
>;

export type IdleSpeedUpdatedEventFilter =
  TypedEventFilter<IdleSpeedUpdatedEvent>;

export interface MarketIdledEventObject {
  idleToken: string;
  isIdled: boolean;
}
export type MarketIdledEvent = TypedEvent<
  [string, boolean],
  MarketIdledEventObject
>;

export type MarketIdledEventFilter = TypedEventFilter<MarketIdledEvent>;

export interface MarketListedEventObject {
  idleToken: string;
}
export type MarketListedEvent = TypedEvent<[string], MarketListedEventObject>;

export type MarketListedEventFilter = TypedEventFilter<MarketListedEvent>;

export interface NewIdleOracleEventObject {
  oldIdleOracle: string;
  newIdleOracle: string;
}
export type NewIdleOracleEvent = TypedEvent<
  [string, string],
  NewIdleOracleEventObject
>;

export type NewIdleOracleEventFilter = TypedEventFilter<NewIdleOracleEvent>;

export interface NewIdleRateEventObject {
  oldIdleRate: BigNumber;
  newIdleRate: BigNumber;
}
export type NewIdleRateEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewIdleRateEventObject
>;

export type NewIdleRateEventFilter = TypedEventFilter<NewIdleRateEvent>;

export interface IdleController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IdleControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _addIdleMarkets(
      idleTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _become(
      _unitroller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _dropIdleMarket(
      idleToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _resetMarkets(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setBonusDistribution(
      _bonusMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setIdleAddress(
      _idleAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setIdleRate(
      idleRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _setPriceOracle(
      priceOracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _supportMarkets(
      idleTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    allMarkets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    bonusEnd(overrides?: CallOverrides): Promise<[BigNumber]>;

    bonusMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimIdle(
      arg0: PromiseOrValue<string>[],
      idleTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<[string]>;

    getAllMarkets(overrides?: CallOverrides): Promise<[string[]]>;

    idleAccrued(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    idleAddress(overrides?: CallOverrides): Promise<[string]>;

    idleClaimThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    idleInitialIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    idleRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    idleSpeeds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    idleSupplierIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    idleSupplyState(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { index: BigNumber; block: BigNumber }>;

    markets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { isListed: boolean; isIdled: boolean }>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    pendingComptrollerImplementation(
      overrides?: CallOverrides
    ): Promise<[string]>;

    refreshIdleSpeeds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _addIdleMarkets(
    idleTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _become(
    _unitroller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _dropIdleMarket(
    idleToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _resetMarkets(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setBonusDistribution(
    _bonusMultiplier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setIdleAddress(
    _idleAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setIdleRate(
    idleRate_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _setPriceOracle(
    priceOracle_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _supportMarkets(
    idleTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  allMarkets(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  bonusEnd(overrides?: CallOverrides): Promise<BigNumber>;

  bonusMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  claimIdle(
    arg0: PromiseOrValue<string>[],
    idleTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  comptrollerImplementation(overrides?: CallOverrides): Promise<string>;

  getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

  idleAccrued(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  idleAddress(overrides?: CallOverrides): Promise<string>;

  idleClaimThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  idleInitialIndex(overrides?: CallOverrides): Promise<BigNumber>;

  idleRate(overrides?: CallOverrides): Promise<BigNumber>;

  idleSpeeds(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  idleSupplierIndex(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  idleSupplyState(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { index: BigNumber; block: BigNumber }>;

  markets(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean] & { isListed: boolean; isIdled: boolean }>;

  oracle(overrides?: CallOverrides): Promise<string>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  pendingComptrollerImplementation(overrides?: CallOverrides): Promise<string>;

  refreshIdleSpeeds(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _addIdleMarkets(
      idleTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    _become(
      _unitroller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    _dropIdleMarket(
      idleToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    _resetMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    _setBonusDistribution(
      _bonusMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _setIdleAddress(
      _idleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    _setIdleRate(
      idleRate_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _setPriceOracle(
      priceOracle_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    _supportMarkets(
      idleTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    allMarkets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    bonusEnd(overrides?: CallOverrides): Promise<BigNumber>;

    bonusMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    claimIdle(
      arg0: PromiseOrValue<string>[],
      idleTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<string>;

    getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

    idleAccrued(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    idleAddress(overrides?: CallOverrides): Promise<string>;

    idleClaimThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    idleInitialIndex(overrides?: CallOverrides): Promise<BigNumber>;

    idleRate(overrides?: CallOverrides): Promise<BigNumber>;

    idleSpeeds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    idleSupplierIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    idleSupplyState(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { index: BigNumber; block: BigNumber }>;

    markets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { isListed: boolean; isIdled: boolean }>;

    oracle(overrides?: CallOverrides): Promise<string>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    pendingComptrollerImplementation(
      overrides?: CallOverrides
    ): Promise<string>;

    refreshIdleSpeeds(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DistributedIdle(address,address,uint256,uint256)"(
      idleToken?: PromiseOrValue<string> | null,
      supplier?: PromiseOrValue<string> | null,
      idleDelta?: null,
      idleSupplyIndex?: null
    ): DistributedIdleEventFilter;
    DistributedIdle(
      idleToken?: PromiseOrValue<string> | null,
      supplier?: PromiseOrValue<string> | null,
      idleDelta?: null,
      idleSupplyIndex?: null
    ): DistributedIdleEventFilter;

    "IdleSpeedUpdated(address,uint256)"(
      idleToken?: PromiseOrValue<string> | null,
      newSpeed?: null
    ): IdleSpeedUpdatedEventFilter;
    IdleSpeedUpdated(
      idleToken?: PromiseOrValue<string> | null,
      newSpeed?: null
    ): IdleSpeedUpdatedEventFilter;

    "MarketIdled(address,bool)"(
      idleToken?: null,
      isIdled?: null
    ): MarketIdledEventFilter;
    MarketIdled(idleToken?: null, isIdled?: null): MarketIdledEventFilter;

    "MarketListed(address)"(idleToken?: null): MarketListedEventFilter;
    MarketListed(idleToken?: null): MarketListedEventFilter;

    "NewIdleOracle(address,address)"(
      oldIdleOracle?: null,
      newIdleOracle?: null
    ): NewIdleOracleEventFilter;
    NewIdleOracle(
      oldIdleOracle?: null,
      newIdleOracle?: null
    ): NewIdleOracleEventFilter;

    "NewIdleRate(uint256,uint256)"(
      oldIdleRate?: null,
      newIdleRate?: null
    ): NewIdleRateEventFilter;
    NewIdleRate(oldIdleRate?: null, newIdleRate?: null): NewIdleRateEventFilter;
  };

  estimateGas: {
    _addIdleMarkets(
      idleTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _become(
      _unitroller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _dropIdleMarket(
      idleToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _resetMarkets(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setBonusDistribution(
      _bonusMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setIdleAddress(
      _idleAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setIdleRate(
      idleRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _setPriceOracle(
      priceOracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _supportMarkets(
      idleTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    allMarkets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bonusEnd(overrides?: CallOverrides): Promise<BigNumber>;

    bonusMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    claimIdle(
      arg0: PromiseOrValue<string>[],
      idleTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    getAllMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    idleAccrued(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    idleAddress(overrides?: CallOverrides): Promise<BigNumber>;

    idleClaimThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    idleInitialIndex(overrides?: CallOverrides): Promise<BigNumber>;

    idleRate(overrides?: CallOverrides): Promise<BigNumber>;

    idleSpeeds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    idleSupplierIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    idleSupplyState(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    markets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    pendingComptrollerImplementation(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refreshIdleSpeeds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _addIdleMarkets(
      idleTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _become(
      _unitroller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _dropIdleMarket(
      idleToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _resetMarkets(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setBonusDistribution(
      _bonusMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setIdleAddress(
      _idleAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setIdleRate(
      idleRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _setPriceOracle(
      priceOracle_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _supportMarkets(
      idleTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allMarkets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bonusEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bonusMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimIdle(
      arg0: PromiseOrValue<string>[],
      idleTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    comptrollerImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    idleAccrued(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    idleAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    idleClaimThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    idleInitialIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    idleRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    idleSpeeds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    idleSupplierIndex(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    idleSupplyState(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    markets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingComptrollerImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refreshIdleSpeeds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
