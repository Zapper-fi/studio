/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface SablierSalaryInterface extends utils.Interface {
  functions: {
    'relayers(address,uint256)': FunctionFragment;
    'sablier()': FunctionFragment;
    'whitelistRelayer(address,uint256)': FunctionFragment;
    'discardRelayer(address,uint256)': FunctionFragment;
    'createCompoundingSalary(address,uint256,address,uint256,uint256,uint256,uint256)': FunctionFragment;
    'getHubAddr()': FunctionFragment;
    'preRelayedCall(bytes)': FunctionFragment;
    'getSalary(uint256)': FunctionFragment;
    'initialize()': FunctionFragment;
    'initialize(address,address,address)': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'isOwner()': FunctionFragment;
    'relayHubVersion()': FunctionFragment;
    'cancelSalary(uint256)': FunctionFragment;
    'createSalary(address,uint256,address,uint256,uint256)': FunctionFragment;
    'nextSalaryId()': FunctionFragment;
    'postRelayedCall(bytes,bool,uint256,bytes32)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'withdrawFromSalary(uint256,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'relayers'
      | 'sablier'
      | 'whitelistRelayer'
      | 'discardRelayer'
      | 'createCompoundingSalary'
      | 'getHubAddr'
      | 'preRelayedCall'
      | 'getSalary'
      | 'initialize()'
      | 'initialize(address,address,address)'
      | 'initialize(address)'
      | 'acceptRelayedCall'
      | 'owner'
      | 'isOwner'
      | 'relayHubVersion'
      | 'cancelSalary'
      | 'createSalary'
      | 'nextSalaryId'
      | 'postRelayedCall'
      | 'transferOwnership'
      | 'withdrawFromSalary',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'relayers',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'sablier', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'whitelistRelayer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'discardRelayer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'createCompoundingSalary',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'getHubAddr', values?: undefined): string;
  encodeFunctionData(functionFragment: 'preRelayedCall', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'getSalary', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'initialize()', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize(address,address,address)',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'initialize(address)', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'acceptRelayedCall',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'relayHubVersion', values?: undefined): string;
  encodeFunctionData(functionFragment: 'cancelSalary', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'createSalary',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'nextSalaryId', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'postRelayedCall',
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'withdrawFromSalary',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'relayers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sablier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'whitelistRelayer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'discardRelayer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createCompoundingSalary', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getHubAddr', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'preRelayedCall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSalary', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize()', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize(address,address,address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize(address)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptRelayedCall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'relayHubVersion', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancelSalary', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createSalary', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nextSalaryId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'postRelayedCall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawFromSalary', data: BytesLike): Result;

  events: {
    'CreateSalary(uint256,uint256,address)': EventFragment;
    'WithdrawFromSalary(uint256,uint256,address)': EventFragment;
    'CancelSalary(uint256,uint256,address)': EventFragment;
    'RelayHubChanged(address,address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CreateSalary'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawFromSalary'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CancelSalary'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RelayHubChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export interface CreateSalaryEventObject {
  salaryId: BigNumber;
  streamId: BigNumber;
  company: string;
}
export type CreateSalaryEvent = TypedEvent<[BigNumber, BigNumber, string], CreateSalaryEventObject>;

export type CreateSalaryEventFilter = TypedEventFilter<CreateSalaryEvent>;

export interface WithdrawFromSalaryEventObject {
  salaryId: BigNumber;
  streamId: BigNumber;
  company: string;
}
export type WithdrawFromSalaryEvent = TypedEvent<[BigNumber, BigNumber, string], WithdrawFromSalaryEventObject>;

export type WithdrawFromSalaryEventFilter = TypedEventFilter<WithdrawFromSalaryEvent>;

export interface CancelSalaryEventObject {
  salaryId: BigNumber;
  streamId: BigNumber;
  company: string;
}
export type CancelSalaryEvent = TypedEvent<[BigNumber, BigNumber, string], CancelSalaryEventObject>;

export type CancelSalaryEventFilter = TypedEventFilter<CancelSalaryEvent>;

export interface RelayHubChangedEventObject {
  oldRelayHub: string;
  newRelayHub: string;
}
export type RelayHubChangedEvent = TypedEvent<[string, string], RelayHubChangedEventObject>;

export type RelayHubChangedEventFilter = TypedEventFilter<RelayHubChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface SablierSalary extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SablierSalaryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    relayers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    sablier(overrides?: CallOverrides): Promise<[string]>;

    whitelistRelayer(
      relayer: PromiseOrValue<string>,
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    discardRelayer(
      relayer: PromiseOrValue<string>,
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createCompoundingSalary(
      employee: PromiseOrValue<string>,
      salary: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      stopTime: PromiseOrValue<BigNumberish>,
      senderSharePercentage: PromiseOrValue<BigNumberish>,
      recipientSharePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getHubAddr(overrides?: CallOverrides): Promise<[string]>;

    preRelayedCall(
      context: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getSalary(
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        company: string;
        employee: string;
        salary: BigNumber;
        tokenAddress: string;
        startTime: BigNumber;
        stopTime: BigNumber;
        remainingBalance: BigNumber;
        rate: BigNumber;
      }
    >;

    'initialize()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    'initialize(address,address,address)'(
      ownerAddress: PromiseOrValue<string>,
      signerAddress: PromiseOrValue<string>,
      sablierAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'initialize(address)'(
      trustedSigner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    acceptRelayedCall(
      relay: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      encodedFunction: PromiseOrValue<BytesLike>,
      transactionFee: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      approvalData: PromiseOrValue<BytesLike>,
      arg8: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    relayHubVersion(overrides?: CallOverrides): Promise<[string]>;

    cancelSalary(
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createSalary(
      employee: PromiseOrValue<string>,
      salary: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      stopTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    nextSalaryId(overrides?: CallOverrides): Promise<[BigNumber]>;

    postRelayedCall(
      context: PromiseOrValue<BytesLike>,
      success: PromiseOrValue<boolean>,
      actualCharge: PromiseOrValue<BigNumberish>,
      preRetVal: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawFromSalary(
      salaryId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  relayers(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  sablier(overrides?: CallOverrides): Promise<string>;

  whitelistRelayer(
    relayer: PromiseOrValue<string>,
    salaryId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  discardRelayer(
    relayer: PromiseOrValue<string>,
    salaryId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createCompoundingSalary(
    employee: PromiseOrValue<string>,
    salary: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    startTime: PromiseOrValue<BigNumberish>,
    stopTime: PromiseOrValue<BigNumberish>,
    senderSharePercentage: PromiseOrValue<BigNumberish>,
    recipientSharePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getHubAddr(overrides?: CallOverrides): Promise<string>;

  preRelayedCall(
    context: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getSalary(
    salaryId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      company: string;
      employee: string;
      salary: BigNumber;
      tokenAddress: string;
      startTime: BigNumber;
      stopTime: BigNumber;
      remainingBalance: BigNumber;
      rate: BigNumber;
    }
  >;

  'initialize()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  'initialize(address,address,address)'(
    ownerAddress: PromiseOrValue<string>,
    signerAddress: PromiseOrValue<string>,
    sablierAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'initialize(address)'(
    trustedSigner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  acceptRelayedCall(
    relay: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    encodedFunction: PromiseOrValue<BytesLike>,
    transactionFee: PromiseOrValue<BigNumberish>,
    gasPrice: PromiseOrValue<BigNumberish>,
    gasLimit: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    approvalData: PromiseOrValue<BytesLike>,
    arg8: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, string]>;

  owner(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  relayHubVersion(overrides?: CallOverrides): Promise<string>;

  cancelSalary(
    salaryId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createSalary(
    employee: PromiseOrValue<string>,
    salary: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    startTime: PromiseOrValue<BigNumberish>,
    stopTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  nextSalaryId(overrides?: CallOverrides): Promise<BigNumber>;

  postRelayedCall(
    context: PromiseOrValue<BytesLike>,
    success: PromiseOrValue<boolean>,
    actualCharge: PromiseOrValue<BigNumberish>,
    preRetVal: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawFromSalary(
    salaryId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    relayers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    sablier(overrides?: CallOverrides): Promise<string>;

    whitelistRelayer(
      relayer: PromiseOrValue<string>,
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    discardRelayer(
      relayer: PromiseOrValue<string>,
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    createCompoundingSalary(
      employee: PromiseOrValue<string>,
      salary: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      stopTime: PromiseOrValue<BigNumberish>,
      senderSharePercentage: PromiseOrValue<BigNumberish>,
      recipientSharePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getHubAddr(overrides?: CallOverrides): Promise<string>;

    preRelayedCall(context: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    getSalary(
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        company: string;
        employee: string;
        salary: BigNumber;
        tokenAddress: string;
        startTime: BigNumber;
        stopTime: BigNumber;
        remainingBalance: BigNumber;
        rate: BigNumber;
      }
    >;

    'initialize()'(overrides?: CallOverrides): Promise<void>;

    'initialize(address,address,address)'(
      ownerAddress: PromiseOrValue<string>,
      signerAddress: PromiseOrValue<string>,
      sablierAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    'initialize(address)'(trustedSigner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    acceptRelayedCall(
      relay: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      encodedFunction: PromiseOrValue<BytesLike>,
      transactionFee: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      approvalData: PromiseOrValue<BytesLike>,
      arg8: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, string]>;

    owner(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    relayHubVersion(overrides?: CallOverrides): Promise<string>;

    cancelSalary(salaryId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    createSalary(
      employee: PromiseOrValue<string>,
      salary: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      stopTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    nextSalaryId(overrides?: CallOverrides): Promise<BigNumber>;

    postRelayedCall(
      context: PromiseOrValue<BytesLike>,
      success: PromiseOrValue<boolean>,
      actualCharge: PromiseOrValue<BigNumberish>,
      preRetVal: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    withdrawFromSalary(
      salaryId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;
  };

  filters: {
    'CreateSalary(uint256,uint256,address)'(
      salaryId?: PromiseOrValue<BigNumberish> | null,
      streamId?: PromiseOrValue<BigNumberish> | null,
      company?: PromiseOrValue<string> | null,
    ): CreateSalaryEventFilter;
    CreateSalary(
      salaryId?: PromiseOrValue<BigNumberish> | null,
      streamId?: PromiseOrValue<BigNumberish> | null,
      company?: PromiseOrValue<string> | null,
    ): CreateSalaryEventFilter;

    'WithdrawFromSalary(uint256,uint256,address)'(
      salaryId?: PromiseOrValue<BigNumberish> | null,
      streamId?: PromiseOrValue<BigNumberish> | null,
      company?: PromiseOrValue<string> | null,
    ): WithdrawFromSalaryEventFilter;
    WithdrawFromSalary(
      salaryId?: PromiseOrValue<BigNumberish> | null,
      streamId?: PromiseOrValue<BigNumberish> | null,
      company?: PromiseOrValue<string> | null,
    ): WithdrawFromSalaryEventFilter;

    'CancelSalary(uint256,uint256,address)'(
      salaryId?: PromiseOrValue<BigNumberish> | null,
      streamId?: PromiseOrValue<BigNumberish> | null,
      company?: PromiseOrValue<string> | null,
    ): CancelSalaryEventFilter;
    CancelSalary(
      salaryId?: PromiseOrValue<BigNumberish> | null,
      streamId?: PromiseOrValue<BigNumberish> | null,
      company?: PromiseOrValue<string> | null,
    ): CancelSalaryEventFilter;

    'RelayHubChanged(address,address)'(
      oldRelayHub?: PromiseOrValue<string> | null,
      newRelayHub?: PromiseOrValue<string> | null,
    ): RelayHubChangedEventFilter;
    RelayHubChanged(
      oldRelayHub?: PromiseOrValue<string> | null,
      newRelayHub?: PromiseOrValue<string> | null,
    ): RelayHubChangedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    relayers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    sablier(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistRelayer(
      relayer: PromiseOrValue<string>,
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    discardRelayer(
      relayer: PromiseOrValue<string>,
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createCompoundingSalary(
      employee: PromiseOrValue<string>,
      salary: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      stopTime: PromiseOrValue<BigNumberish>,
      senderSharePercentage: PromiseOrValue<BigNumberish>,
      recipientSharePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getHubAddr(overrides?: CallOverrides): Promise<BigNumber>;

    preRelayedCall(
      context: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getSalary(salaryId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    'initialize()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    'initialize(address,address,address)'(
      ownerAddress: PromiseOrValue<string>,
      signerAddress: PromiseOrValue<string>,
      sablierAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'initialize(address)'(
      trustedSigner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    acceptRelayedCall(
      relay: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      encodedFunction: PromiseOrValue<BytesLike>,
      transactionFee: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      approvalData: PromiseOrValue<BytesLike>,
      arg8: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    relayHubVersion(overrides?: CallOverrides): Promise<BigNumber>;

    cancelSalary(
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createSalary(
      employee: PromiseOrValue<string>,
      salary: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      stopTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    nextSalaryId(overrides?: CallOverrides): Promise<BigNumber>;

    postRelayedCall(
      context: PromiseOrValue<BytesLike>,
      success: PromiseOrValue<boolean>,
      actualCharge: PromiseOrValue<BigNumberish>,
      preRetVal: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawFromSalary(
      salaryId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    relayers(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    sablier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistRelayer(
      relayer: PromiseOrValue<string>,
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    discardRelayer(
      relayer: PromiseOrValue<string>,
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createCompoundingSalary(
      employee: PromiseOrValue<string>,
      salary: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      stopTime: PromiseOrValue<BigNumberish>,
      senderSharePercentage: PromiseOrValue<BigNumberish>,
      recipientSharePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getHubAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preRelayedCall(
      context: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getSalary(salaryId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'initialize()'(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    'initialize(address,address,address)'(
      ownerAddress: PromiseOrValue<string>,
      signerAddress: PromiseOrValue<string>,
      sablierAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'initialize(address)'(
      trustedSigner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    acceptRelayedCall(
      relay: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      encodedFunction: PromiseOrValue<BytesLike>,
      transactionFee: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      approvalData: PromiseOrValue<BytesLike>,
      arg8: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relayHubVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelSalary(
      salaryId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createSalary(
      employee: PromiseOrValue<string>,
      salary: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      stopTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    nextSalaryId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postRelayedCall(
      context: PromiseOrValue<BytesLike>,
      success: PromiseOrValue<boolean>,
      actualCharge: PromiseOrValue<BigNumberish>,
      preRetVal: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawFromSalary(
      salaryId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
