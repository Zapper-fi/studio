/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface PancakeswapFactoryInterface extends utils.Interface {
  functions: {
    'collectProtocol(address,address,uint128,uint128)': FunctionFragment;
    'createPool(address,address,uint24)': FunctionFragment;
    'enableFeeAmount(uint24,int24)': FunctionFragment;
    'feeAmountTickSpacing(uint24)': FunctionFragment;
    'feeAmountTickSpacingExtraInfo(uint24)': FunctionFragment;
    'getPool(address,address,uint24)': FunctionFragment;
    'lmPoolDeployer()': FunctionFragment;
    'owner()': FunctionFragment;
    'poolDeployer()': FunctionFragment;
    'setFeeAmountExtraInfo(uint24,bool,bool)': FunctionFragment;
    'setFeeProtocol(address,uint32,uint32)': FunctionFragment;
    'setLmPool(address,address)': FunctionFragment;
    'setLmPoolDeployer(address)': FunctionFragment;
    'setOwner(address)': FunctionFragment;
    'setWhiteListAddress(address,bool)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'collectProtocol'
      | 'createPool'
      | 'enableFeeAmount'
      | 'feeAmountTickSpacing'
      | 'feeAmountTickSpacingExtraInfo'
      | 'getPool'
      | 'lmPoolDeployer'
      | 'owner'
      | 'poolDeployer'
      | 'setFeeAmountExtraInfo'
      | 'setFeeProtocol'
      | 'setLmPool'
      | 'setLmPoolDeployer'
      | 'setOwner'
      | 'setWhiteListAddress',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'collectProtocol',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'createPool',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'enableFeeAmount',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'feeAmountTickSpacing', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'feeAmountTickSpacingExtraInfo', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getPool',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'lmPoolDeployer', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolDeployer', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setFeeAmountExtraInfo',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setFeeProtocol',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setLmPool', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setLmPoolDeployer', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setOwner', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setWhiteListAddress',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;

  decodeFunctionResult(functionFragment: 'collectProtocol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableFeeAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeAmountTickSpacing', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeAmountTickSpacingExtraInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lmPoolDeployer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolDeployer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeAmountExtraInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeProtocol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLmPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLmPoolDeployer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setWhiteListAddress', data: BytesLike): Result;

  events: {
    'FeeAmountEnabled(uint24,int24)': EventFragment;
    'FeeAmountExtraInfoUpdated(uint24,bool,bool)': EventFragment;
    'OwnerChanged(address,address)': EventFragment;
    'PoolCreated(address,address,uint24,int24,address)': EventFragment;
    'SetLmPoolDeployer(address)': EventFragment;
    'WhiteListAdded(address,bool)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'FeeAmountEnabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeAmountExtraInfoUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetLmPoolDeployer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WhiteListAdded'): EventFragment;
}

export interface FeeAmountEnabledEventObject {
  fee: number;
  tickSpacing: number;
}
export type FeeAmountEnabledEvent = TypedEvent<[number, number], FeeAmountEnabledEventObject>;

export type FeeAmountEnabledEventFilter = TypedEventFilter<FeeAmountEnabledEvent>;

export interface FeeAmountExtraInfoUpdatedEventObject {
  fee: number;
  whitelistRequested: boolean;
  enabled: boolean;
}
export type FeeAmountExtraInfoUpdatedEvent = TypedEvent<
  [number, boolean, boolean],
  FeeAmountExtraInfoUpdatedEventObject
>;

export type FeeAmountExtraInfoUpdatedEventFilter = TypedEventFilter<FeeAmountExtraInfoUpdatedEvent>;

export interface OwnerChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<[string, string], OwnerChangedEventObject>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface PoolCreatedEventObject {
  token0: string;
  token1: string;
  fee: number;
  tickSpacing: number;
  pool: string;
}
export type PoolCreatedEvent = TypedEvent<[string, string, number, number, string], PoolCreatedEventObject>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export interface SetLmPoolDeployerEventObject {
  lmPoolDeployer: string;
}
export type SetLmPoolDeployerEvent = TypedEvent<[string], SetLmPoolDeployerEventObject>;

export type SetLmPoolDeployerEventFilter = TypedEventFilter<SetLmPoolDeployerEvent>;

export interface WhiteListAddedEventObject {
  user: string;
  verified: boolean;
}
export type WhiteListAddedEvent = TypedEvent<[string, boolean], WhiteListAddedEventObject>;

export type WhiteListAddedEventFilter = TypedEventFilter<WhiteListAddedEvent>;

export interface PancakeswapFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PancakeswapFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    collectProtocol(
      pool: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount0Requested: PromiseOrValue<BigNumberish>,
      amount1Requested: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createPool(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    enableFeeAmount(
      fee: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    feeAmountTickSpacing(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number]>;

    feeAmountTickSpacingExtraInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[boolean, boolean] & { whitelistRequested: boolean; enabled: boolean }>;

    getPool(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    lmPoolDeployer(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolDeployer(overrides?: CallOverrides): Promise<[string]>;

    setFeeAmountExtraInfo(
      fee: PromiseOrValue<BigNumberish>,
      whitelistRequested: PromiseOrValue<boolean>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFeeProtocol(
      pool: PromiseOrValue<string>,
      feeProtocol0: PromiseOrValue<BigNumberish>,
      feeProtocol1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLmPool(
      pool: PromiseOrValue<string>,
      lmPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLmPoolDeployer(
      _lmPoolDeployer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setWhiteListAddress(
      user: PromiseOrValue<string>,
      verified: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  collectProtocol(
    pool: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount0Requested: PromiseOrValue<BigNumberish>,
    amount1Requested: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createPool(
    tokenA: PromiseOrValue<string>,
    tokenB: PromiseOrValue<string>,
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  enableFeeAmount(
    fee: PromiseOrValue<BigNumberish>,
    tickSpacing: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  feeAmountTickSpacing(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;

  feeAmountTickSpacingExtraInfo(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[boolean, boolean] & { whitelistRequested: boolean; enabled: boolean }>;

  getPool(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  lmPoolDeployer(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolDeployer(overrides?: CallOverrides): Promise<string>;

  setFeeAmountExtraInfo(
    fee: PromiseOrValue<BigNumberish>,
    whitelistRequested: PromiseOrValue<boolean>,
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFeeProtocol(
    pool: PromiseOrValue<string>,
    feeProtocol0: PromiseOrValue<BigNumberish>,
    feeProtocol1: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLmPool(
    pool: PromiseOrValue<string>,
    lmPool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLmPoolDeployer(
    _lmPoolDeployer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setWhiteListAddress(
    user: PromiseOrValue<string>,
    verified: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    collectProtocol(
      pool: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount0Requested: PromiseOrValue<BigNumberish>,
      amount1Requested: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }>;

    createPool(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    enableFeeAmount(
      fee: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    feeAmountTickSpacing(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;

    feeAmountTickSpacingExtraInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[boolean, boolean] & { whitelistRequested: boolean; enabled: boolean }>;

    getPool(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    lmPoolDeployer(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolDeployer(overrides?: CallOverrides): Promise<string>;

    setFeeAmountExtraInfo(
      fee: PromiseOrValue<BigNumberish>,
      whitelistRequested: PromiseOrValue<boolean>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setFeeProtocol(
      pool: PromiseOrValue<string>,
      feeProtocol0: PromiseOrValue<BigNumberish>,
      feeProtocol1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setLmPool(pool: PromiseOrValue<string>, lmPool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setLmPoolDeployer(_lmPoolDeployer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setOwner(_owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setWhiteListAddress(
      user: PromiseOrValue<string>,
      verified: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'FeeAmountEnabled(uint24,int24)'(
      fee?: PromiseOrValue<BigNumberish> | null,
      tickSpacing?: PromiseOrValue<BigNumberish> | null,
    ): FeeAmountEnabledEventFilter;
    FeeAmountEnabled(
      fee?: PromiseOrValue<BigNumberish> | null,
      tickSpacing?: PromiseOrValue<BigNumberish> | null,
    ): FeeAmountEnabledEventFilter;

    'FeeAmountExtraInfoUpdated(uint24,bool,bool)'(
      fee?: PromiseOrValue<BigNumberish> | null,
      whitelistRequested?: null,
      enabled?: null,
    ): FeeAmountExtraInfoUpdatedEventFilter;
    FeeAmountExtraInfoUpdated(
      fee?: PromiseOrValue<BigNumberish> | null,
      whitelistRequested?: null,
      enabled?: null,
    ): FeeAmountExtraInfoUpdatedEventFilter;

    'OwnerChanged(address,address)'(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnerChangedEventFilter;
    OwnerChanged(
      oldOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnerChangedEventFilter;

    'PoolCreated(address,address,uint24,int24,address)'(
      token0?: PromiseOrValue<string> | null,
      token1?: PromiseOrValue<string> | null,
      fee?: PromiseOrValue<BigNumberish> | null,
      tickSpacing?: null,
      pool?: null,
    ): PoolCreatedEventFilter;
    PoolCreated(
      token0?: PromiseOrValue<string> | null,
      token1?: PromiseOrValue<string> | null,
      fee?: PromiseOrValue<BigNumberish> | null,
      tickSpacing?: null,
      pool?: null,
    ): PoolCreatedEventFilter;

    'SetLmPoolDeployer(address)'(lmPoolDeployer?: PromiseOrValue<string> | null): SetLmPoolDeployerEventFilter;
    SetLmPoolDeployer(lmPoolDeployer?: PromiseOrValue<string> | null): SetLmPoolDeployerEventFilter;

    'WhiteListAdded(address,bool)'(user?: PromiseOrValue<string> | null, verified?: null): WhiteListAddedEventFilter;
    WhiteListAdded(user?: PromiseOrValue<string> | null, verified?: null): WhiteListAddedEventFilter;
  };

  estimateGas: {
    collectProtocol(
      pool: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount0Requested: PromiseOrValue<BigNumberish>,
      amount1Requested: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createPool(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    enableFeeAmount(
      fee: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    feeAmountTickSpacing(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    feeAmountTickSpacingExtraInfo(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getPool(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lmPoolDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeAmountExtraInfo(
      fee: PromiseOrValue<BigNumberish>,
      whitelistRequested: PromiseOrValue<boolean>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFeeProtocol(
      pool: PromiseOrValue<string>,
      feeProtocol0: PromiseOrValue<BigNumberish>,
      feeProtocol1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLmPool(
      pool: PromiseOrValue<string>,
      lmPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLmPoolDeployer(
      _lmPoolDeployer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setWhiteListAddress(
      user: PromiseOrValue<string>,
      verified: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collectProtocol(
      pool: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount0Requested: PromiseOrValue<BigNumberish>,
      amount1Requested: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createPool(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    enableFeeAmount(
      fee: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    feeAmountTickSpacing(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeAmountTickSpacingExtraInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPool(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lmPoolDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFeeAmountExtraInfo(
      fee: PromiseOrValue<BigNumberish>,
      whitelistRequested: PromiseOrValue<boolean>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFeeProtocol(
      pool: PromiseOrValue<string>,
      feeProtocol0: PromiseOrValue<BigNumberish>,
      feeProtocol1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLmPool(
      pool: PromiseOrValue<string>,
      lmPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLmPoolDeployer(
      _lmPoolDeployer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setWhiteListAddress(
      user: PromiseOrValue<string>,
      verified: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
