/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface PancakeswapPoolDeployerInterface extends utils.Interface {
  functions: {
    'deploy(address,address,address,uint24,int24)': FunctionFragment;
    'factoryAddress()': FunctionFragment;
    'parameters()': FunctionFragment;
    'setFactoryAddress(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: 'deploy' | 'factoryAddress' | 'parameters' | 'setFactoryAddress',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'deploy',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'factoryAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'parameters', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setFactoryAddress', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'deploy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'factoryAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'parameters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFactoryAddress', data: BytesLike): Result;

  events: {
    'SetFactoryAddress(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'SetFactoryAddress'): EventFragment;
}

export interface SetFactoryAddressEventObject {
  factory: string;
}
export type SetFactoryAddressEvent = TypedEvent<[string], SetFactoryAddressEventObject>;

export type SetFactoryAddressEventFilter = TypedEventFilter<SetFactoryAddressEvent>;

export interface PancakeswapPoolDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PancakeswapPoolDeployerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deploy(
      factory: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    factoryAddress(overrides?: CallOverrides): Promise<[string]>;

    parameters(overrides?: CallOverrides): Promise<
      [string, string, string, number, number] & {
        factory: string;
        token0: string;
        token1: string;
        fee: number;
        tickSpacing: number;
      }
    >;

    setFactoryAddress(
      _factoryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  deploy(
    factory: PromiseOrValue<string>,
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    fee: PromiseOrValue<BigNumberish>,
    tickSpacing: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  factoryAddress(overrides?: CallOverrides): Promise<string>;

  parameters(overrides?: CallOverrides): Promise<
    [string, string, string, number, number] & {
      factory: string;
      token0: string;
      token1: string;
      fee: number;
      tickSpacing: number;
    }
  >;

  setFactoryAddress(
    _factoryAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    deploy(
      factory: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    factoryAddress(overrides?: CallOverrides): Promise<string>;

    parameters(overrides?: CallOverrides): Promise<
      [string, string, string, number, number] & {
        factory: string;
        token0: string;
        token1: string;
        fee: number;
        tickSpacing: number;
      }
    >;

    setFactoryAddress(_factoryAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'SetFactoryAddress(address)'(factory?: PromiseOrValue<string> | null): SetFactoryAddressEventFilter;
    SetFactoryAddress(factory?: PromiseOrValue<string> | null): SetFactoryAddressEventFilter;
  };

  estimateGas: {
    deploy(
      factory: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    factoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    parameters(overrides?: CallOverrides): Promise<BigNumber>;

    setFactoryAddress(
      _factoryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deploy(
      factory: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    factoryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parameters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFactoryAddress(
      _factoryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
