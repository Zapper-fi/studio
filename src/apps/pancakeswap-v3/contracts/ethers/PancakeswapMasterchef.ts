/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace INonfungiblePositionManagerStruct {
  export type CollectParamsStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
    amount0Max: PromiseOrValue<BigNumberish>;
    amount1Max: PromiseOrValue<BigNumberish>;
  };

  export type CollectParamsStructOutput = [BigNumber, string, BigNumber, BigNumber] & {
    tokenId: BigNumber;
    recipient: string;
    amount0Max: BigNumber;
    amount1Max: BigNumber;
  };

  export type DecreaseLiquidityParamsStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    liquidity: PromiseOrValue<BigNumberish>;
    amount0Min: PromiseOrValue<BigNumberish>;
    amount1Min: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type DecreaseLiquidityParamsStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    tokenId: BigNumber;
    liquidity: BigNumber;
    amount0Min: BigNumber;
    amount1Min: BigNumber;
    deadline: BigNumber;
  };

  export type IncreaseLiquidityParamsStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    amount0Desired: PromiseOrValue<BigNumberish>;
    amount1Desired: PromiseOrValue<BigNumberish>;
    amount0Min: PromiseOrValue<BigNumberish>;
    amount1Min: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type IncreaseLiquidityParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    tokenId: BigNumber;
    amount0Desired: BigNumber;
    amount1Desired: BigNumber;
    amount0Min: BigNumber;
    amount1Min: BigNumber;
    deadline: BigNumber;
  };
}

export interface PancakeswapMasterchefInterface extends utils.Interface {
  functions: {
    'BOOST_PRECISION()': FunctionFragment;
    'CAKE()': FunctionFragment;
    'FARM_BOOSTER()': FunctionFragment;
    'LMPoolDeployer()': FunctionFragment;
    'MAX_BOOST_PRECISION()': FunctionFragment;
    'MAX_DURATION()': FunctionFragment;
    'MIN_DURATION()': FunctionFragment;
    'PERIOD_DURATION()': FunctionFragment;
    'PRECISION()': FunctionFragment;
    'WETH()': FunctionFragment;
    'add(uint256,address,bool)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'burn(uint256)': FunctionFragment;
    'cakeAmountBelongToMC()': FunctionFragment;
    'collect((uint256,address,uint128,uint128))': FunctionFragment;
    'collectTo((uint256,address,uint128,uint128),address)': FunctionFragment;
    'decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))': FunctionFragment;
    'emergency()': FunctionFragment;
    'getLatestPeriodInfo(address)': FunctionFragment;
    'getLatestPeriodInfoByPid(uint256)': FunctionFragment;
    'harvest(uint256,address)': FunctionFragment;
    'increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))': FunctionFragment;
    'latestPeriodCakePerSecond()': FunctionFragment;
    'latestPeriodEndTime()': FunctionFragment;
    'latestPeriodNumber()': FunctionFragment;
    'latestPeriodStartTime()': FunctionFragment;
    'multicall(bytes[])': FunctionFragment;
    'nonfungiblePositionManager()': FunctionFragment;
    'onERC721Received(address,address,uint256,bytes)': FunctionFragment;
    'operatorAddress()': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingCake(uint256)': FunctionFragment;
    'poolInfo(uint256)': FunctionFragment;
    'poolLength()': FunctionFragment;
    'receiver()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'set(uint256,uint256,bool)': FunctionFragment;
    'setEmergency(bool)': FunctionFragment;
    'setLMPoolDeployer(address)': FunctionFragment;
    'setOperator(address)': FunctionFragment;
    'setPeriodDuration(uint256)': FunctionFragment;
    'setReceiver(address)': FunctionFragment;
    'sweepToken(address,uint256,address)': FunctionFragment;
    'tokenOfOwnerByIndex(address,uint256)': FunctionFragment;
    'totalAllocPoint()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unwrapWETH9(uint256,address)': FunctionFragment;
    'updateBoostMultiplier(uint256,uint256)': FunctionFragment;
    'updateFarmBoostContract(address)': FunctionFragment;
    'updateLiquidity(uint256)': FunctionFragment;
    'updatePools(uint256[])': FunctionFragment;
    'upkeep(uint256,uint256,bool)': FunctionFragment;
    'userPositionInfos(uint256)': FunctionFragment;
    'v3PoolAddressPid(address)': FunctionFragment;
    'withdraw(uint256,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BOOST_PRECISION'
      | 'CAKE'
      | 'FARM_BOOSTER'
      | 'LMPoolDeployer'
      | 'MAX_BOOST_PRECISION'
      | 'MAX_DURATION'
      | 'MIN_DURATION'
      | 'PERIOD_DURATION'
      | 'PRECISION'
      | 'WETH'
      | 'add'
      | 'balanceOf'
      | 'burn'
      | 'cakeAmountBelongToMC'
      | 'collect'
      | 'collectTo'
      | 'decreaseLiquidity'
      | 'emergency'
      | 'getLatestPeriodInfo'
      | 'getLatestPeriodInfoByPid'
      | 'harvest'
      | 'increaseLiquidity'
      | 'latestPeriodCakePerSecond'
      | 'latestPeriodEndTime'
      | 'latestPeriodNumber'
      | 'latestPeriodStartTime'
      | 'multicall'
      | 'nonfungiblePositionManager'
      | 'onERC721Received'
      | 'operatorAddress'
      | 'owner'
      | 'pendingCake'
      | 'poolInfo'
      | 'poolLength'
      | 'receiver'
      | 'renounceOwnership'
      | 'set'
      | 'setEmergency'
      | 'setLMPoolDeployer'
      | 'setOperator'
      | 'setPeriodDuration'
      | 'setReceiver'
      | 'sweepToken'
      | 'tokenOfOwnerByIndex'
      | 'totalAllocPoint'
      | 'transferOwnership'
      | 'unwrapWETH9'
      | 'updateBoostMultiplier'
      | 'updateFarmBoostContract'
      | 'updateLiquidity'
      | 'updatePools'
      | 'upkeep'
      | 'userPositionInfos'
      | 'v3PoolAddressPid'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BOOST_PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'CAKE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'FARM_BOOSTER', values?: undefined): string;
  encodeFunctionData(functionFragment: 'LMPoolDeployer', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_BOOST_PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_DURATION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MIN_DURATION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PERIOD_DURATION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'WETH', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'add',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'burn', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'cakeAmountBelongToMC', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'collect',
    values: [INonfungiblePositionManagerStruct.CollectParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'collectTo',
    values: [INonfungiblePositionManagerStruct.CollectParamsStruct, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'decreaseLiquidity',
    values: [INonfungiblePositionManagerStruct.DecreaseLiquidityParamsStruct],
  ): string;
  encodeFunctionData(functionFragment: 'emergency', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLatestPeriodInfo', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getLatestPeriodInfoByPid', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'harvest',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseLiquidity',
    values: [INonfungiblePositionManagerStruct.IncreaseLiquidityParamsStruct],
  ): string;
  encodeFunctionData(functionFragment: 'latestPeriodCakePerSecond', values?: undefined): string;
  encodeFunctionData(functionFragment: 'latestPeriodEndTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'latestPeriodNumber', values?: undefined): string;
  encodeFunctionData(functionFragment: 'latestPeriodStartTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'multicall', values: [PromiseOrValue<BytesLike>[]]): string;
  encodeFunctionData(functionFragment: 'nonfungiblePositionManager', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'onERC721Received',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'operatorAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingCake', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'poolInfo', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'poolLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'receiver', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'set',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setEmergency', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'setLMPoolDeployer', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setOperator', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setPeriodDuration', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setReceiver', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'sweepToken',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'tokenOfOwnerByIndex',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'totalAllocPoint', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'unwrapWETH9',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateBoostMultiplier',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'updateFarmBoostContract', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateLiquidity', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updatePools', values: [PromiseOrValue<BigNumberish>[]]): string;
  encodeFunctionData(
    functionFragment: 'upkeep',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'userPositionInfos', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'v3PoolAddressPid', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(functionFragment: 'BOOST_PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'CAKE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'FARM_BOOSTER', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'LMPoolDeployer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_BOOST_PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_DURATION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MIN_DURATION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PERIOD_DURATION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'WETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'add', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cakeAmountBelongToMC', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collect', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collectTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emergency', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLatestPeriodInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLatestPeriodInfoByPid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'latestPeriodCakePerSecond', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'latestPeriodEndTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'latestPeriodNumber', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'latestPeriodStartTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'multicall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonfungiblePositionManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onERC721Received', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'operatorAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingCake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'receiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'set', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEmergency', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLMPoolDeployer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPeriodDuration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setReceiver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sweepToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenOfOwnerByIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAllocPoint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unwrapWETH9', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateBoostMultiplier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateFarmBoostContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upkeep', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userPositionInfos', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'v3PoolAddressPid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'AddPool(uint256,uint256,address,address)': EventFragment;
    'Deposit(address,uint256,uint256,uint256,int24,int24)': EventFragment;
    'Harvest(address,address,uint256,uint256,uint256)': EventFragment;
    'NewLMPoolDeployerAddress(address)': EventFragment;
    'NewOperatorAddress(address)': EventFragment;
    'NewPeriodDuration(uint256)': EventFragment;
    'NewReceiver(address)': EventFragment;
    'NewUpkeepPeriod(uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'SetEmergency(bool)': EventFragment;
    'SetPool(uint256,uint256)': EventFragment;
    'UpdateFarmBoostContract(address)': EventFragment;
    'UpdateLiquidity(address,uint256,uint256,int128,int24,int24)': EventFragment;
    'UpdateUpkeepPeriod(uint256,uint256,uint256,uint256)': EventFragment;
    'Withdraw(address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddPool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Harvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewLMPoolDeployerAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewOperatorAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewPeriodDuration'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewReceiver'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewUpkeepPeriod'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetEmergency'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetPool'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateFarmBoostContract'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateLiquidity'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateUpkeepPeriod'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface AddPoolEventObject {
  pid: BigNumber;
  allocPoint: BigNumber;
  v3Pool: string;
  lmPool: string;
}
export type AddPoolEvent = TypedEvent<[BigNumber, BigNumber, string, string], AddPoolEventObject>;

export type AddPoolEventFilter = TypedEventFilter<AddPoolEvent>;

export interface DepositEventObject {
  from: string;
  pid: BigNumber;
  tokenId: BigNumber;
  liquidity: BigNumber;
  tickLower: number;
  tickUpper: number;
}
export type DepositEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber, number, number], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface HarvestEventObject {
  sender: string;
  to: string;
  pid: BigNumber;
  tokenId: BigNumber;
  reward: BigNumber;
}
export type HarvestEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber], HarvestEventObject>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export interface NewLMPoolDeployerAddressEventObject {
  deployer: string;
}
export type NewLMPoolDeployerAddressEvent = TypedEvent<[string], NewLMPoolDeployerAddressEventObject>;

export type NewLMPoolDeployerAddressEventFilter = TypedEventFilter<NewLMPoolDeployerAddressEvent>;

export interface NewOperatorAddressEventObject {
  operator: string;
}
export type NewOperatorAddressEvent = TypedEvent<[string], NewOperatorAddressEventObject>;

export type NewOperatorAddressEventFilter = TypedEventFilter<NewOperatorAddressEvent>;

export interface NewPeriodDurationEventObject {
  periodDuration: BigNumber;
}
export type NewPeriodDurationEvent = TypedEvent<[BigNumber], NewPeriodDurationEventObject>;

export type NewPeriodDurationEventFilter = TypedEventFilter<NewPeriodDurationEvent>;

export interface NewReceiverEventObject {
  receiver: string;
}
export type NewReceiverEvent = TypedEvent<[string], NewReceiverEventObject>;

export type NewReceiverEventFilter = TypedEventFilter<NewReceiverEvent>;

export interface NewUpkeepPeriodEventObject {
  periodNumber: BigNumber;
  startTime: BigNumber;
  endTime: BigNumber;
  cakePerSecond: BigNumber;
  cakeAmount: BigNumber;
}
export type NewUpkeepPeriodEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  NewUpkeepPeriodEventObject
>;

export type NewUpkeepPeriodEventFilter = TypedEventFilter<NewUpkeepPeriodEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface SetEmergencyEventObject {
  emergency: boolean;
}
export type SetEmergencyEvent = TypedEvent<[boolean], SetEmergencyEventObject>;

export type SetEmergencyEventFilter = TypedEventFilter<SetEmergencyEvent>;

export interface SetPoolEventObject {
  pid: BigNumber;
  allocPoint: BigNumber;
}
export type SetPoolEvent = TypedEvent<[BigNumber, BigNumber], SetPoolEventObject>;

export type SetPoolEventFilter = TypedEventFilter<SetPoolEvent>;

export interface UpdateFarmBoostContractEventObject {
  farmBoostContract: string;
}
export type UpdateFarmBoostContractEvent = TypedEvent<[string], UpdateFarmBoostContractEventObject>;

export type UpdateFarmBoostContractEventFilter = TypedEventFilter<UpdateFarmBoostContractEvent>;

export interface UpdateLiquidityEventObject {
  from: string;
  pid: BigNumber;
  tokenId: BigNumber;
  liquidity: BigNumber;
  tickLower: number;
  tickUpper: number;
}
export type UpdateLiquidityEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, number, number],
  UpdateLiquidityEventObject
>;

export type UpdateLiquidityEventFilter = TypedEventFilter<UpdateLiquidityEvent>;

export interface UpdateUpkeepPeriodEventObject {
  periodNumber: BigNumber;
  oldEndTime: BigNumber;
  newEndTime: BigNumber;
  remainingCake: BigNumber;
}
export type UpdateUpkeepPeriodEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  UpdateUpkeepPeriodEventObject
>;

export type UpdateUpkeepPeriodEventFilter = TypedEventFilter<UpdateUpkeepPeriodEvent>;

export interface WithdrawEventObject {
  from: string;
  to: string;
  pid: BigNumber;
  tokenId: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, string, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface PancakeswapMasterchef extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PancakeswapMasterchefInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BOOST_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    CAKE(overrides?: CallOverrides): Promise<[string]>;

    FARM_BOOSTER(overrides?: CallOverrides): Promise<[string]>;

    LMPoolDeployer(overrides?: CallOverrides): Promise<[string]>;

    MAX_BOOST_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERIOD_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    add(
      _allocPoint: PromiseOrValue<BigNumberish>,
      _v3Pool: PromiseOrValue<string>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    cakeAmountBelongToMC(overrides?: CallOverrides): Promise<[BigNumber]>;

    collect(
      params: INonfungiblePositionManagerStruct.CollectParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    collectTo(
      params: INonfungiblePositionManagerStruct.CollectParamsStruct,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    decreaseLiquidity(
      params: INonfungiblePositionManagerStruct.DecreaseLiquidityParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    emergency(overrides?: CallOverrides): Promise<[boolean]>;

    getLatestPeriodInfo(
      _v3Pool: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { cakePerSecond: BigNumber; endTime: BigNumber }>;

    getLatestPeriodInfoByPid(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { cakePerSecond: BigNumber; endTime: BigNumber }>;

    harvest(
      _tokenId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    increaseLiquidity(
      params: INonfungiblePositionManagerStruct.IncreaseLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    latestPeriodCakePerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestPeriodEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestPeriodNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestPeriodStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    operatorAddress(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingCake(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { reward: BigNumber }>;

    poolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, string, string, string, number, BigNumber, BigNumber] & {
        allocPoint: BigNumber;
        v3Pool: string;
        token0: string;
        token1: string;
        fee: number;
        totalLiquidity: BigNumber;
        totalBoostLiquidity: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    receiver(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    set(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setEmergency(
      _emergency: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLMPoolDeployer(
      _LMPoolDeployer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setOperator(
      _operatorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPeriodDuration(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setReceiver(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    sweepToken(
      token: PromiseOrValue<string>,
      amountMinimum: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unwrapWETH9(
      amountMinimum: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateBoostMultiplier(
      _tokenId: PromiseOrValue<BigNumberish>,
      _newMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateFarmBoostContract(
      _newFarmBoostContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateLiquidity(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updatePools(
      pids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    upkeep(
      _amount: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    userPositionInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, number, number, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        boostLiquidity: BigNumber;
        tickLower: number;
        tickUpper: number;
        rewardGrowthInside: BigNumber;
        reward: BigNumber;
        user: string;
        pid: BigNumber;
        boostMultiplier: BigNumber;
      }
    >;

    v3PoolAddressPid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _tokenId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  BOOST_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  CAKE(overrides?: CallOverrides): Promise<string>;

  FARM_BOOSTER(overrides?: CallOverrides): Promise<string>;

  LMPoolDeployer(overrides?: CallOverrides): Promise<string>;

  MAX_BOOST_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  PERIOD_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  WETH(overrides?: CallOverrides): Promise<string>;

  add(
    _allocPoint: PromiseOrValue<BigNumberish>,
    _v3Pool: PromiseOrValue<string>,
    _withUpdate: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  cakeAmountBelongToMC(overrides?: CallOverrides): Promise<BigNumber>;

  collect(
    params: INonfungiblePositionManagerStruct.CollectParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  collectTo(
    params: INonfungiblePositionManagerStruct.CollectParamsStruct,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  decreaseLiquidity(
    params: INonfungiblePositionManagerStruct.DecreaseLiquidityParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  emergency(overrides?: CallOverrides): Promise<boolean>;

  getLatestPeriodInfo(
    _v3Pool: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { cakePerSecond: BigNumber; endTime: BigNumber }>;

  getLatestPeriodInfoByPid(
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { cakePerSecond: BigNumber; endTime: BigNumber }>;

  harvest(
    _tokenId: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  increaseLiquidity(
    params: INonfungiblePositionManagerStruct.IncreaseLiquidityParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  latestPeriodCakePerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  latestPeriodEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  latestPeriodNumber(overrides?: CallOverrides): Promise<BigNumber>;

  latestPeriodStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    _from: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  operatorAddress(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingCake(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  poolInfo(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, string, string, string, number, BigNumber, BigNumber] & {
      allocPoint: BigNumber;
      v3Pool: string;
      token0: string;
      token1: string;
      fee: number;
      totalLiquidity: BigNumber;
      totalBoostLiquidity: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  receiver(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  set(
    _pid: PromiseOrValue<BigNumberish>,
    _allocPoint: PromiseOrValue<BigNumberish>,
    _withUpdate: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setEmergency(
    _emergency: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLMPoolDeployer(
    _LMPoolDeployer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setOperator(
    _operatorAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPeriodDuration(
    _periodDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setReceiver(
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  sweepToken(
    token: PromiseOrValue<string>,
    amountMinimum: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  tokenOfOwnerByIndex(
    owner: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unwrapWETH9(
    amountMinimum: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateBoostMultiplier(
    _tokenId: PromiseOrValue<BigNumberish>,
    _newMultiplier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateFarmBoostContract(
    _newFarmBoostContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateLiquidity(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updatePools(
    pids: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  upkeep(
    _amount: PromiseOrValue<BigNumberish>,
    _duration: PromiseOrValue<BigNumberish>,
    _withUpdate: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  userPositionInfos(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, number, number, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
      liquidity: BigNumber;
      boostLiquidity: BigNumber;
      tickLower: number;
      tickUpper: number;
      rewardGrowthInside: BigNumber;
      reward: BigNumber;
      user: string;
      pid: BigNumber;
      boostMultiplier: BigNumber;
    }
  >;

  v3PoolAddressPid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _tokenId: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    BOOST_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    CAKE(overrides?: CallOverrides): Promise<string>;

    FARM_BOOSTER(overrides?: CallOverrides): Promise<string>;

    LMPoolDeployer(overrides?: CallOverrides): Promise<string>;

    MAX_BOOST_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    PERIOD_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<string>;

    add(
      _allocPoint: PromiseOrValue<BigNumberish>,
      _v3Pool: PromiseOrValue<string>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    burn(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    cakeAmountBelongToMC(overrides?: CallOverrides): Promise<BigNumber>;

    collect(
      params: INonfungiblePositionManagerStruct.CollectParamsStruct,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }>;

    collectTo(
      params: INonfungiblePositionManagerStruct.CollectParamsStruct,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }>;

    decreaseLiquidity(
      params: INonfungiblePositionManagerStruct.DecreaseLiquidityParamsStruct,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }>;

    emergency(overrides?: CallOverrides): Promise<boolean>;

    getLatestPeriodInfo(
      _v3Pool: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { cakePerSecond: BigNumber; endTime: BigNumber }>;

    getLatestPeriodInfoByPid(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { cakePerSecond: BigNumber; endTime: BigNumber }>;

    harvest(
      _tokenId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    increaseLiquidity(
      params: INonfungiblePositionManagerStruct.IncreaseLiquidityParamsStruct,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    latestPeriodCakePerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    latestPeriodEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    latestPeriodNumber(overrides?: CallOverrides): Promise<BigNumber>;

    latestPeriodStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(data: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<string[]>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>;

    operatorAddress(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingCake(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, string, string, string, number, BigNumber, BigNumber] & {
        allocPoint: BigNumber;
        v3Pool: string;
        token0: string;
        token1: string;
        fee: number;
        totalLiquidity: BigNumber;
        totalBoostLiquidity: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    receiver(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    set(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setEmergency(_emergency: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setLMPoolDeployer(_LMPoolDeployer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setOperator(_operatorAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setPeriodDuration(_periodDuration: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setReceiver(_receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    sweepToken(
      token: PromiseOrValue<string>,
      amountMinimum: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    unwrapWETH9(
      amountMinimum: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateBoostMultiplier(
      _tokenId: PromiseOrValue<BigNumberish>,
      _newMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateFarmBoostContract(_newFarmBoostContract: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateLiquidity(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updatePools(pids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;

    upkeep(
      _amount: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    userPositionInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, number, number, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        boostLiquidity: BigNumber;
        tickLower: number;
        tickUpper: number;
        rewardGrowthInside: BigNumber;
        reward: BigNumber;
        user: string;
        pid: BigNumber;
        boostMultiplier: BigNumber;
      }
    >;

    v3PoolAddressPid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _tokenId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {
    'AddPool(uint256,uint256,address,address)'(
      pid?: PromiseOrValue<BigNumberish> | null,
      allocPoint?: null,
      v3Pool?: PromiseOrValue<string> | null,
      lmPool?: PromiseOrValue<string> | null,
    ): AddPoolEventFilter;
    AddPool(
      pid?: PromiseOrValue<BigNumberish> | null,
      allocPoint?: null,
      v3Pool?: PromiseOrValue<string> | null,
      lmPool?: PromiseOrValue<string> | null,
    ): AddPoolEventFilter;

    'Deposit(address,uint256,uint256,uint256,int24,int24)'(
      from?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      liquidity?: null,
      tickLower?: null,
      tickUpper?: null,
    ): DepositEventFilter;
    Deposit(
      from?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      liquidity?: null,
      tickLower?: null,
      tickUpper?: null,
    ): DepositEventFilter;

    'Harvest(address,address,uint256,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      to?: null,
      pid?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      reward?: null,
    ): HarvestEventFilter;
    Harvest(
      sender?: PromiseOrValue<string> | null,
      to?: null,
      pid?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      reward?: null,
    ): HarvestEventFilter;

    'NewLMPoolDeployerAddress(address)'(deployer?: null): NewLMPoolDeployerAddressEventFilter;
    NewLMPoolDeployerAddress(deployer?: null): NewLMPoolDeployerAddressEventFilter;

    'NewOperatorAddress(address)'(operator?: null): NewOperatorAddressEventFilter;
    NewOperatorAddress(operator?: null): NewOperatorAddressEventFilter;

    'NewPeriodDuration(uint256)'(periodDuration?: null): NewPeriodDurationEventFilter;
    NewPeriodDuration(periodDuration?: null): NewPeriodDurationEventFilter;

    'NewReceiver(address)'(receiver?: null): NewReceiverEventFilter;
    NewReceiver(receiver?: null): NewReceiverEventFilter;

    'NewUpkeepPeriod(uint256,uint256,uint256,uint256,uint256)'(
      periodNumber?: PromiseOrValue<BigNumberish> | null,
      startTime?: null,
      endTime?: null,
      cakePerSecond?: null,
      cakeAmount?: null,
    ): NewUpkeepPeriodEventFilter;
    NewUpkeepPeriod(
      periodNumber?: PromiseOrValue<BigNumberish> | null,
      startTime?: null,
      endTime?: null,
      cakePerSecond?: null,
      cakeAmount?: null,
    ): NewUpkeepPeriodEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'SetEmergency(bool)'(emergency?: null): SetEmergencyEventFilter;
    SetEmergency(emergency?: null): SetEmergencyEventFilter;

    'SetPool(uint256,uint256)'(pid?: PromiseOrValue<BigNumberish> | null, allocPoint?: null): SetPoolEventFilter;
    SetPool(pid?: PromiseOrValue<BigNumberish> | null, allocPoint?: null): SetPoolEventFilter;

    'UpdateFarmBoostContract(address)'(
      farmBoostContract?: PromiseOrValue<string> | null,
    ): UpdateFarmBoostContractEventFilter;
    UpdateFarmBoostContract(farmBoostContract?: PromiseOrValue<string> | null): UpdateFarmBoostContractEventFilter;

    'UpdateLiquidity(address,uint256,uint256,int128,int24,int24)'(
      from?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      liquidity?: null,
      tickLower?: null,
      tickUpper?: null,
    ): UpdateLiquidityEventFilter;
    UpdateLiquidity(
      from?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      liquidity?: null,
      tickLower?: null,
      tickUpper?: null,
    ): UpdateLiquidityEventFilter;

    'UpdateUpkeepPeriod(uint256,uint256,uint256,uint256)'(
      periodNumber?: PromiseOrValue<BigNumberish> | null,
      oldEndTime?: null,
      newEndTime?: null,
      remainingCake?: null,
    ): UpdateUpkeepPeriodEventFilter;
    UpdateUpkeepPeriod(
      periodNumber?: PromiseOrValue<BigNumberish> | null,
      oldEndTime?: null,
      newEndTime?: null,
      remainingCake?: null,
    ): UpdateUpkeepPeriodEventFilter;

    'Withdraw(address,address,uint256,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: null,
      pid?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
    ): WithdrawEventFilter;
    Withdraw(
      from?: PromiseOrValue<string> | null,
      to?: null,
      pid?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
    ): WithdrawEventFilter;
  };

  estimateGas: {
    BOOST_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    CAKE(overrides?: CallOverrides): Promise<BigNumber>;

    FARM_BOOSTER(overrides?: CallOverrides): Promise<BigNumber>;

    LMPoolDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BOOST_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    PERIOD_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _allocPoint: PromiseOrValue<BigNumberish>,
      _v3Pool: PromiseOrValue<string>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    cakeAmountBelongToMC(overrides?: CallOverrides): Promise<BigNumber>;

    collect(
      params: INonfungiblePositionManagerStruct.CollectParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    collectTo(
      params: INonfungiblePositionManagerStruct.CollectParamsStruct,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    decreaseLiquidity(
      params: INonfungiblePositionManagerStruct.DecreaseLiquidityParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    emergency(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestPeriodInfo(_v3Pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getLatestPeriodInfoByPid(_pid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      _tokenId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    increaseLiquidity(
      params: INonfungiblePositionManagerStruct.IncreaseLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    latestPeriodCakePerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    latestPeriodEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    latestPeriodNumber(overrides?: CallOverrides): Promise<BigNumber>;

    latestPeriodStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    operatorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingCake(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    receiver(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    set(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setEmergency(
      _emergency: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLMPoolDeployer(
      _LMPoolDeployer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setOperator(
      _operatorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPeriodDuration(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setReceiver(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    sweepToken(
      token: PromiseOrValue<string>,
      amountMinimum: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unwrapWETH9(
      amountMinimum: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateBoostMultiplier(
      _tokenId: PromiseOrValue<BigNumberish>,
      _newMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateFarmBoostContract(
      _newFarmBoostContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateLiquidity(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updatePools(
      pids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    upkeep(
      _amount: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    userPositionInfos(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    v3PoolAddressPid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _tokenId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BOOST_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CAKE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FARM_BOOSTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LMPoolDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BOOST_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERIOD_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    add(
      _allocPoint: PromiseOrValue<BigNumberish>,
      _v3Pool: PromiseOrValue<string>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    cakeAmountBelongToMC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collect(
      params: INonfungiblePositionManagerStruct.CollectParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    collectTo(
      params: INonfungiblePositionManagerStruct.CollectParamsStruct,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    decreaseLiquidity(
      params: INonfungiblePositionManagerStruct.DecreaseLiquidityParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    emergency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLatestPeriodInfo(_v3Pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLatestPeriodInfoByPid(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    harvest(
      _tokenId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    increaseLiquidity(
      params: INonfungiblePositionManagerStruct.IncreaseLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    latestPeriodCakePerSecond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestPeriodEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestPeriodNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestPeriodStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    operatorAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingCake(_tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolInfo(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    set(
      _pid: PromiseOrValue<BigNumberish>,
      _allocPoint: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setEmergency(
      _emergency: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLMPoolDeployer(
      _LMPoolDeployer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operatorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPeriodDuration(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setReceiver(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    sweepToken(
      token: PromiseOrValue<string>,
      amountMinimum: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unwrapWETH9(
      amountMinimum: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateBoostMultiplier(
      _tokenId: PromiseOrValue<BigNumberish>,
      _newMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateFarmBoostContract(
      _newFarmBoostContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateLiquidity(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updatePools(
      pids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    upkeep(
      _amount: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      _withUpdate: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    userPositionInfos(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    v3PoolAddressPid(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _tokenId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
