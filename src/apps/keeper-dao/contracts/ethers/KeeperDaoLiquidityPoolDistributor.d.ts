/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import { Contract, ContractTransaction, Overrides, CallOverrides } from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface KeeperDaoLiquidityPoolDistributorInterface extends ethers.utils.Interface {
  functions: {
    'blacklistRecoverableToken(address)': FunctionFragment;
    'claim(address,uint256,uint256,bytes)': FunctionFragment;
    'claimedAmount(address)': FunctionFragment;
    'hashForSignature(address,uint256,uint256)': FunctionFragment;
    'lastUsedNonce(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'recoverTokens(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateAccountManager(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'blacklistRecoverableToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'claim', values: [string, BigNumberish, BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'claimedAmount', values: [string]): string;
  encodeFunctionData(functionFragment: 'hashForSignature', values: [string, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'lastUsedNonce', values: [string]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'recoverTokens', values: [string]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateAccountManager', values: [string]): string;

  decodeFunctionResult(functionFragment: 'blacklistRecoverableToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimedAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hashForSignature', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastUsedNonce', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recoverTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateAccountManager', data: BytesLike): Result;

  events: {
    'AccountManagerChanged(address,address)': EventFragment;
    'Claimed(address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AccountManagerChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Claimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export class KeeperDaoLiquidityPoolDistributor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(eventFilter?: TypedEventFilter<T, G>): Array<TypedListener<T, G>>;
  off<T, G>(eventFilter: TypedEventFilter<T, G>, listener: TypedListener<T, G>): this;
  on<T, G>(eventFilter: TypedEventFilter<T, G>, listener: TypedListener<T, G>): this;
  once<T, G>(eventFilter: TypedEventFilter<T, G>, listener: TypedListener<T, G>): this;
  removeListener<T, G>(eventFilter: TypedEventFilter<T, G>, listener: TypedListener<T, G>): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: KeeperDaoLiquidityPoolDistributorInterface;

  functions: {
    blacklistRecoverableToken(_token: string, overrides?: Overrides): Promise<ContractTransaction>;

    'blacklistRecoverableToken(address)'(_token: string, overrides?: Overrides): Promise<ContractTransaction>;

    claim(
      _to: string,
      _earningsToDate: BigNumberish,
      _nonce: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'claim(address,uint256,uint256,bytes)'(
      _to: string,
      _earningsToDate: BigNumberish,
      _nonce: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    claimedAmount(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'claimedAmount(address)'(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    hashForSignature(
      _owner: string,
      _earningsToDate: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    'hashForSignature(address,uint256,uint256)'(
      _owner: string,
      _earningsToDate: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    lastUsedNonce(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'lastUsedNonce(address)'(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    recoverTokens(_token: string, overrides?: Overrides): Promise<ContractTransaction>;

    'recoverTokens(address)'(_token: string, overrides?: Overrides): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>;

    transferOwnership(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>;

    'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>;

    updateAccountManager(_newAccountManager: string, overrides?: Overrides): Promise<ContractTransaction>;

    'updateAccountManager(address)'(_newAccountManager: string, overrides?: Overrides): Promise<ContractTransaction>;
  };

  blacklistRecoverableToken(_token: string, overrides?: Overrides): Promise<ContractTransaction>;

  'blacklistRecoverableToken(address)'(_token: string, overrides?: Overrides): Promise<ContractTransaction>;

  claim(
    _to: string,
    _earningsToDate: BigNumberish,
    _nonce: BigNumberish,
    _signature: BytesLike,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'claim(address,uint256,uint256,bytes)'(
    _to: string,
    _earningsToDate: BigNumberish,
    _nonce: BigNumberish,
    _signature: BytesLike,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  claimedAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  'claimedAmount(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  hashForSignature(
    _owner: string,
    _earningsToDate: BigNumberish,
    _nonce: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  'hashForSignature(address,uint256,uint256)'(
    _owner: string,
    _earningsToDate: BigNumberish,
    _nonce: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  lastUsedNonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  'lastUsedNonce(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  recoverTokens(_token: string, overrides?: Overrides): Promise<ContractTransaction>;

  'recoverTokens(address)'(_token: string, overrides?: Overrides): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>;

  transferOwnership(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>;

  'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>;

  updateAccountManager(_newAccountManager: string, overrides?: Overrides): Promise<ContractTransaction>;

  'updateAccountManager(address)'(_newAccountManager: string, overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    blacklistRecoverableToken(_token: string, overrides?: CallOverrides): Promise<void>;

    'blacklistRecoverableToken(address)'(_token: string, overrides?: CallOverrides): Promise<void>;

    claim(
      _to: string,
      _earningsToDate: BigNumberish,
      _nonce: BigNumberish,
      _signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    'claim(address,uint256,uint256,bytes)'(
      _to: string,
      _earningsToDate: BigNumberish,
      _nonce: BigNumberish,
      _signature: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    claimedAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'claimedAmount(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    hashForSignature(
      _owner: string,
      _earningsToDate: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    'hashForSignature(address,uint256,uint256)'(
      _owner: string,
      _earningsToDate: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    lastUsedNonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'lastUsedNonce(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    recoverTokens(_token: string, overrides?: CallOverrides): Promise<void>;

    'recoverTokens(address)'(_token: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    'transferOwnership(address)'(newOwner: string, overrides?: CallOverrides): Promise<void>;

    updateAccountManager(_newAccountManager: string, overrides?: CallOverrides): Promise<void>;

    'updateAccountManager(address)'(_newAccountManager: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    AccountManagerChanged(
      _oldAccountManager: string | null,
      _newAccountManager: string | null,
    ): TypedEventFilter<[string, string], { _oldAccountManager: string; _newAccountManager: string }>;

    Claimed(
      _redeemer: string | null,
      _amount: null,
    ): TypedEventFilter<[string, BigNumber], { _redeemer: string; _amount: BigNumber }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null,
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;
  };

  estimateGas: {
    blacklistRecoverableToken(_token: string, overrides?: Overrides): Promise<BigNumber>;

    'blacklistRecoverableToken(address)'(_token: string, overrides?: Overrides): Promise<BigNumber>;

    claim(
      _to: string,
      _earningsToDate: BigNumberish,
      _nonce: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    'claim(address,uint256,uint256,bytes)'(
      _to: string,
      _earningsToDate: BigNumberish,
      _nonce: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    claimedAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'claimedAmount(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    hashForSignature(
      _owner: string,
      _earningsToDate: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'hashForSignature(address,uint256,uint256)'(
      _owner: string,
      _earningsToDate: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    lastUsedNonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'lastUsedNonce(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    recoverTokens(_token: string, overrides?: Overrides): Promise<BigNumber>;

    'recoverTokens(address)'(_token: string, overrides?: Overrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    updateAccountManager(_newAccountManager: string, overrides?: Overrides): Promise<BigNumber>;

    'updateAccountManager(address)'(_newAccountManager: string, overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    blacklistRecoverableToken(_token: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'blacklistRecoverableToken(address)'(_token: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    claim(
      _to: string,
      _earningsToDate: BigNumberish,
      _nonce: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'claim(address,uint256,uint256,bytes)'(
      _to: string,
      _earningsToDate: BigNumberish,
      _nonce: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    claimedAmount(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'claimedAmount(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hashForSignature(
      _owner: string,
      _earningsToDate: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'hashForSignature(address,uint256,uint256)'(
      _owner: string,
      _earningsToDate: BigNumberish,
      _nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    lastUsedNonce(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'lastUsedNonce(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverTokens(_token: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'recoverTokens(address)'(_token: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>;

    transferOwnership(newOwner: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    updateAccountManager(_newAccountManager: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'updateAccountManager(address)'(_newAccountManager: string, overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
