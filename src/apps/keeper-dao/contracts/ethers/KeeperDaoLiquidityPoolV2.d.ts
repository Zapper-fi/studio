/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import { Contract, ContractTransaction, Overrides, PayableOverrides, CallOverrides } from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface KeeperDaoLiquidityPoolV2Interface extends ethers.utils.Interface {
  functions: {
    'ETHEREUM()': FunctionFragment;
    'FEE_BASE()': FunctionFragment;
    'VERSION()': FunctionFragment;
    'addOperator(address)': FunctionFragment;
    'addPauser(address)': FunctionFragment;
    'blacklistRecoverableToken(address)': FunctionFragment;
    'borrow(address,uint256,bytes)': FunctionFragment;
    'borrowableBalance(address)': FunctionFragment;
    'deposit(address,uint256)': FunctionFragment;
    'depositFeeInBips()': FunctionFragment;
    'initialize(string,address)': FunctionFragment;
    'isOperator(address)': FunctionFragment;
    'isPauser(address)': FunctionFragment;
    'kToken(address)': FunctionFragment;
    'kTokens(address)': FunctionFragment;
    'migrate(address)': FunctionFragment;
    'operators(uint256)': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'poolFeeInBips()': FunctionFragment;
    'recoverTokens(address)': FunctionFragment;
    'register(address)': FunctionFragment;
    'registeredKTokens(address)': FunctionFragment;
    'registeredTokens(uint256)': FunctionFragment;
    'renounceOperator()': FunctionFragment;
    'renouncePauser()': FunctionFragment;
    'underlyingBalance(address,address)': FunctionFragment;
    'unpause()': FunctionFragment;
    'updateDepositFee(uint256)': FunctionFragment;
    'updateFeePool(address)': FunctionFragment;
    'updatePoolFee(uint256)': FunctionFragment;
    'withdraw(address,address,uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'ETHEREUM', values?: undefined): string;
  encodeFunctionData(functionFragment: 'FEE_BASE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'VERSION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addOperator', values: [string]): string;
  encodeFunctionData(functionFragment: 'addPauser', values: [string]): string;
  encodeFunctionData(functionFragment: 'blacklistRecoverableToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'borrow', values: [string, BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'borrowableBalance', values: [string]): string;
  encodeFunctionData(functionFragment: 'deposit', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'depositFeeInBips', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'isOperator', values: [string]): string;
  encodeFunctionData(functionFragment: 'isPauser', values: [string]): string;
  encodeFunctionData(functionFragment: 'kToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'kTokens', values: [string]): string;
  encodeFunctionData(functionFragment: 'migrate', values: [string]): string;
  encodeFunctionData(functionFragment: 'operators', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolFeeInBips', values?: undefined): string;
  encodeFunctionData(functionFragment: 'recoverTokens', values: [string]): string;
  encodeFunctionData(functionFragment: 'register', values: [string]): string;
  encodeFunctionData(functionFragment: 'registeredKTokens', values: [string]): string;
  encodeFunctionData(functionFragment: 'registeredTokens', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'renounceOperator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renouncePauser', values?: undefined): string;
  encodeFunctionData(functionFragment: 'underlyingBalance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateDepositFee', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateFeePool', values: [string]): string;
  encodeFunctionData(functionFragment: 'updatePoolFee', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [string, string, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'ETHEREUM', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'FEE_BASE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'VERSION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addPauser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'blacklistRecoverableToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowableBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositFeeInBips', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isPauser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'kToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'kTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'migrate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'operators', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolFeeInBips', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recoverTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'register', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registeredKTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registeredTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renouncePauser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'underlyingBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateDepositFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateFeePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePoolFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Borrowed(address,address,uint256,uint256)': EventFragment;
    'Deposited(address,address,uint256,uint256)': EventFragment;
    'EtherReceived(address,uint256)': EventFragment;
    'OperatorAdded(address)': EventFragment;
    'OperatorRemoved(address)': EventFragment;
    'Paused(address)': EventFragment;
    'PauserAdded(address)': EventFragment;
    'PauserRemoved(address)': EventFragment;
    'Unpaused(address)': EventFragment;
    'Withdrew(address,address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Borrowed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EtherReceived'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OperatorAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OperatorRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PauserAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PauserRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdrew'): EventFragment;
}

export class KeeperDaoLiquidityPoolV2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(eventFilter?: TypedEventFilter<T, G>): Array<TypedListener<T, G>>;
  off<T, G>(eventFilter: TypedEventFilter<T, G>, listener: TypedListener<T, G>): this;
  on<T, G>(eventFilter: TypedEventFilter<T, G>, listener: TypedListener<T, G>): this;
  once<T, G>(eventFilter: TypedEventFilter<T, G>, listener: TypedListener<T, G>): this;
  removeListener<T, G>(eventFilter: TypedEventFilter<T, G>, listener: TypedListener<T, G>): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: KeeperDaoLiquidityPoolV2Interface;

  functions: {
    ETHEREUM(overrides?: CallOverrides): Promise<[string]>;

    'ETHEREUM()'(overrides?: CallOverrides): Promise<[string]>;

    FEE_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    'FEE_BASE()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    'VERSION()'(overrides?: CallOverrides): Promise<[string]>;

    addOperator(account: string, overrides?: Overrides): Promise<ContractTransaction>;

    'addOperator(address)'(account: string, overrides?: Overrides): Promise<ContractTransaction>;

    addPauser(account: string, overrides?: Overrides): Promise<ContractTransaction>;

    'addPauser(address)'(account: string, overrides?: Overrides): Promise<ContractTransaction>;

    blacklistRecoverableToken(_token: string, overrides?: Overrides): Promise<ContractTransaction>;

    'blacklistRecoverableToken(address)'(_token: string, overrides?: Overrides): Promise<ContractTransaction>;

    borrow(
      _token: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'borrow(address,uint256,bytes)'(
      _token: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    borrowableBalance(_token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'borrowableBalance(address)'(_token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(_token: string, _amount: BigNumberish, overrides?: PayableOverrides): Promise<ContractTransaction>;

    'deposit(address,uint256)'(
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<ContractTransaction>;

    depositFeeInBips(overrides?: CallOverrides): Promise<[BigNumber]>;

    'depositFeeInBips()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    'initialize(string,address)'(
      _VERSION: string,
      _borrower: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'initialize()'(overrides?: Overrides): Promise<ContractTransaction>;

    'initialize(address)'(sender: string, overrides?: Overrides): Promise<ContractTransaction>;

    isOperator(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    'isOperator(address)'(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isPauser(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    'isPauser(address)'(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    kToken(_token: string, overrides?: CallOverrides): Promise<[string]>;

    'kToken(address)'(_token: string, overrides?: CallOverrides): Promise<[string]>;

    kTokens(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    'kTokens(address)'(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    migrate(_newLP: string, overrides?: Overrides): Promise<ContractTransaction>;

    'migrate(address)'(_newLP: string, overrides?: Overrides): Promise<ContractTransaction>;

    operators(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    'operators(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    'pause()'(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    'paused()'(overrides?: CallOverrides): Promise<[boolean]>;

    poolFeeInBips(overrides?: CallOverrides): Promise<[BigNumber]>;

    'poolFeeInBips()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    recoverTokens(_token: string, overrides?: Overrides): Promise<ContractTransaction>;

    'recoverTokens(address)'(_token: string, overrides?: Overrides): Promise<ContractTransaction>;

    register(_kToken: string, overrides?: Overrides): Promise<ContractTransaction>;

    'register(address)'(_kToken: string, overrides?: Overrides): Promise<ContractTransaction>;

    registeredKTokens(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    'registeredKTokens(address)'(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    registeredTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    'registeredTokens(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    renounceOperator(overrides?: Overrides): Promise<ContractTransaction>;

    'renounceOperator()'(overrides?: Overrides): Promise<ContractTransaction>;

    renouncePauser(overrides?: Overrides): Promise<ContractTransaction>;

    'renouncePauser()'(overrides?: Overrides): Promise<ContractTransaction>;

    underlyingBalance(_token: string, _owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'underlyingBalance(address,address)'(
      _token: string,
      _owner: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    'unpause()'(overrides?: Overrides): Promise<ContractTransaction>;

    updateDepositFee(_depositFeeInBips: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    'updateDepositFee(uint256)'(_depositFeeInBips: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    updateFeePool(_newFeePool: string, overrides?: Overrides): Promise<ContractTransaction>;

    'updateFeePool(address)'(_newFeePool: string, overrides?: Overrides): Promise<ContractTransaction>;

    updatePoolFee(_poolFeeInBips: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    'updatePoolFee(uint256)'(_poolFeeInBips: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    withdraw(
      _to: string,
      _kToken: string,
      _kTokenAmount: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'withdraw(address,address,uint256)'(
      _to: string,
      _kToken: string,
      _kTokenAmount: BigNumberish,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;
  };

  ETHEREUM(overrides?: CallOverrides): Promise<string>;

  'ETHEREUM()'(overrides?: CallOverrides): Promise<string>;

  FEE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  'FEE_BASE()'(overrides?: CallOverrides): Promise<BigNumber>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  'VERSION()'(overrides?: CallOverrides): Promise<string>;

  addOperator(account: string, overrides?: Overrides): Promise<ContractTransaction>;

  'addOperator(address)'(account: string, overrides?: Overrides): Promise<ContractTransaction>;

  addPauser(account: string, overrides?: Overrides): Promise<ContractTransaction>;

  'addPauser(address)'(account: string, overrides?: Overrides): Promise<ContractTransaction>;

  blacklistRecoverableToken(_token: string, overrides?: Overrides): Promise<ContractTransaction>;

  'blacklistRecoverableToken(address)'(_token: string, overrides?: Overrides): Promise<ContractTransaction>;

  borrow(_token: string, _amount: BigNumberish, _data: BytesLike, overrides?: Overrides): Promise<ContractTransaction>;

  'borrow(address,uint256,bytes)'(
    _token: string,
    _amount: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  borrowableBalance(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  'borrowableBalance(address)'(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  deposit(_token: string, _amount: BigNumberish, overrides?: PayableOverrides): Promise<ContractTransaction>;

  'deposit(address,uint256)'(
    _token: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides,
  ): Promise<ContractTransaction>;

  depositFeeInBips(overrides?: CallOverrides): Promise<BigNumber>;

  'depositFeeInBips()'(overrides?: CallOverrides): Promise<BigNumber>;

  'initialize(string,address)'(
    _VERSION: string,
    _borrower: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'initialize()'(overrides?: Overrides): Promise<ContractTransaction>;

  'initialize(address)'(sender: string, overrides?: Overrides): Promise<ContractTransaction>;

  isOperator(account: string, overrides?: CallOverrides): Promise<boolean>;

  'isOperator(address)'(account: string, overrides?: CallOverrides): Promise<boolean>;

  isPauser(account: string, overrides?: CallOverrides): Promise<boolean>;

  'isPauser(address)'(account: string, overrides?: CallOverrides): Promise<boolean>;

  kToken(_token: string, overrides?: CallOverrides): Promise<string>;

  'kToken(address)'(_token: string, overrides?: CallOverrides): Promise<string>;

  kTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

  'kTokens(address)'(arg0: string, overrides?: CallOverrides): Promise<string>;

  migrate(_newLP: string, overrides?: Overrides): Promise<ContractTransaction>;

  'migrate(address)'(_newLP: string, overrides?: Overrides): Promise<ContractTransaction>;

  operators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  'operators(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  'pause()'(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  'paused()'(overrides?: CallOverrides): Promise<boolean>;

  poolFeeInBips(overrides?: CallOverrides): Promise<BigNumber>;

  'poolFeeInBips()'(overrides?: CallOverrides): Promise<BigNumber>;

  recoverTokens(_token: string, overrides?: Overrides): Promise<ContractTransaction>;

  'recoverTokens(address)'(_token: string, overrides?: Overrides): Promise<ContractTransaction>;

  register(_kToken: string, overrides?: Overrides): Promise<ContractTransaction>;

  'register(address)'(_kToken: string, overrides?: Overrides): Promise<ContractTransaction>;

  registeredKTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  'registeredKTokens(address)'(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  registeredTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  'registeredTokens(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  renounceOperator(overrides?: Overrides): Promise<ContractTransaction>;

  'renounceOperator()'(overrides?: Overrides): Promise<ContractTransaction>;

  renouncePauser(overrides?: Overrides): Promise<ContractTransaction>;

  'renouncePauser()'(overrides?: Overrides): Promise<ContractTransaction>;

  underlyingBalance(_token: string, _owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  'underlyingBalance(address,address)'(_token: string, _owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  'unpause()'(overrides?: Overrides): Promise<ContractTransaction>;

  updateDepositFee(_depositFeeInBips: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  'updateDepositFee(uint256)'(_depositFeeInBips: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  updateFeePool(_newFeePool: string, overrides?: Overrides): Promise<ContractTransaction>;

  'updateFeePool(address)'(_newFeePool: string, overrides?: Overrides): Promise<ContractTransaction>;

  updatePoolFee(_poolFeeInBips: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  'updatePoolFee(uint256)'(_poolFeeInBips: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  withdraw(
    _to: string,
    _kToken: string,
    _kTokenAmount: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  'withdraw(address,address,uint256)'(
    _to: string,
    _kToken: string,
    _kTokenAmount: BigNumberish,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  callStatic: {
    ETHEREUM(overrides?: CallOverrides): Promise<string>;

    'ETHEREUM()'(overrides?: CallOverrides): Promise<string>;

    FEE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    'FEE_BASE()'(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    'VERSION()'(overrides?: CallOverrides): Promise<string>;

    addOperator(account: string, overrides?: CallOverrides): Promise<void>;

    'addOperator(address)'(account: string, overrides?: CallOverrides): Promise<void>;

    addPauser(account: string, overrides?: CallOverrides): Promise<void>;

    'addPauser(address)'(account: string, overrides?: CallOverrides): Promise<void>;

    blacklistRecoverableToken(_token: string, overrides?: CallOverrides): Promise<void>;

    'blacklistRecoverableToken(address)'(_token: string, overrides?: CallOverrides): Promise<void>;

    borrow(_token: string, _amount: BigNumberish, _data: BytesLike, overrides?: CallOverrides): Promise<void>;

    'borrow(address,uint256,bytes)'(
      _token: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    borrowableBalance(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    'borrowableBalance(address)'(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(_token: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'deposit(address,uint256)'(_token: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    depositFeeInBips(overrides?: CallOverrides): Promise<BigNumber>;

    'depositFeeInBips()'(overrides?: CallOverrides): Promise<BigNumber>;

    'initialize(string,address)'(_VERSION: string, _borrower: string, overrides?: CallOverrides): Promise<void>;

    'initialize()'(overrides?: CallOverrides): Promise<void>;

    'initialize(address)'(sender: string, overrides?: CallOverrides): Promise<void>;

    isOperator(account: string, overrides?: CallOverrides): Promise<boolean>;

    'isOperator(address)'(account: string, overrides?: CallOverrides): Promise<boolean>;

    isPauser(account: string, overrides?: CallOverrides): Promise<boolean>;

    'isPauser(address)'(account: string, overrides?: CallOverrides): Promise<boolean>;

    kToken(_token: string, overrides?: CallOverrides): Promise<string>;

    'kToken(address)'(_token: string, overrides?: CallOverrides): Promise<string>;

    kTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

    'kTokens(address)'(arg0: string, overrides?: CallOverrides): Promise<string>;

    migrate(_newLP: string, overrides?: CallOverrides): Promise<void>;

    'migrate(address)'(_newLP: string, overrides?: CallOverrides): Promise<void>;

    operators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    'operators(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    'pause()'(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    'paused()'(overrides?: CallOverrides): Promise<boolean>;

    poolFeeInBips(overrides?: CallOverrides): Promise<BigNumber>;

    'poolFeeInBips()'(overrides?: CallOverrides): Promise<BigNumber>;

    recoverTokens(_token: string, overrides?: CallOverrides): Promise<void>;

    'recoverTokens(address)'(_token: string, overrides?: CallOverrides): Promise<void>;

    register(_kToken: string, overrides?: CallOverrides): Promise<void>;

    'register(address)'(_kToken: string, overrides?: CallOverrides): Promise<void>;

    registeredKTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    'registeredKTokens(address)'(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    registeredTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    'registeredTokens(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    renounceOperator(overrides?: CallOverrides): Promise<void>;

    'renounceOperator()'(overrides?: CallOverrides): Promise<void>;

    renouncePauser(overrides?: CallOverrides): Promise<void>;

    'renouncePauser()'(overrides?: CallOverrides): Promise<void>;

    underlyingBalance(_token: string, _owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    'underlyingBalance(address,address)'(_token: string, _owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    'unpause()'(overrides?: CallOverrides): Promise<void>;

    updateDepositFee(_depositFeeInBips: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updateDepositFee(uint256)'(_depositFeeInBips: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateFeePool(_newFeePool: string, overrides?: CallOverrides): Promise<void>;

    'updateFeePool(address)'(_newFeePool: string, overrides?: CallOverrides): Promise<void>;

    updatePoolFee(_poolFeeInBips: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'updatePoolFee(uint256)'(_poolFeeInBips: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdraw(_to: string, _kToken: string, _kTokenAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'withdraw(address,address,uint256)'(
      _to: string,
      _kToken: string,
      _kTokenAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    Borrowed(
      _borrower: string | null,
      _token: string | null,
      _amount: null,
      _fee: null,
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { _borrower: string; _token: string; _amount: BigNumber; _fee: BigNumber }
    >;

    Deposited(
      _depositor: string | null,
      _token: string | null,
      _amount: null,
      _mintAmount: null,
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        _depositor: string;
        _token: string;
        _amount: BigNumber;
        _mintAmount: BigNumber;
      }
    >;

    EtherReceived(
      _from: string | null,
      _amount: null,
    ): TypedEventFilter<[string, BigNumber], { _from: string; _amount: BigNumber }>;

    OperatorAdded(account: string | null): TypedEventFilter<[string], { account: string }>;

    OperatorRemoved(account: string | null): TypedEventFilter<[string], { account: string }>;

    Paused(account: null): TypedEventFilter<[string], { account: string }>;

    PauserAdded(account: string | null): TypedEventFilter<[string], { account: string }>;

    PauserRemoved(account: string | null): TypedEventFilter<[string], { account: string }>;

    Unpaused(account: null): TypedEventFilter<[string], { account: string }>;

    Withdrew(
      _reciever: string | null,
      _withdrawer: string | null,
      _token: string | null,
      _amount: null,
      _burnAmount: null,
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        _reciever: string;
        _withdrawer: string;
        _token: string;
        _amount: BigNumber;
        _burnAmount: BigNumber;
      }
    >;
  };

  estimateGas: {
    ETHEREUM(overrides?: CallOverrides): Promise<BigNumber>;

    'ETHEREUM()'(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    'FEE_BASE()'(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    'VERSION()'(overrides?: CallOverrides): Promise<BigNumber>;

    addOperator(account: string, overrides?: Overrides): Promise<BigNumber>;

    'addOperator(address)'(account: string, overrides?: Overrides): Promise<BigNumber>;

    addPauser(account: string, overrides?: Overrides): Promise<BigNumber>;

    'addPauser(address)'(account: string, overrides?: Overrides): Promise<BigNumber>;

    blacklistRecoverableToken(_token: string, overrides?: Overrides): Promise<BigNumber>;

    'blacklistRecoverableToken(address)'(_token: string, overrides?: Overrides): Promise<BigNumber>;

    borrow(_token: string, _amount: BigNumberish, _data: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    'borrow(address,uint256,bytes)'(
      _token: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    borrowableBalance(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    'borrowableBalance(address)'(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(_token: string, _amount: BigNumberish, overrides?: PayableOverrides): Promise<BigNumber>;

    'deposit(address,uint256)'(_token: string, _amount: BigNumberish, overrides?: PayableOverrides): Promise<BigNumber>;

    depositFeeInBips(overrides?: CallOverrides): Promise<BigNumber>;

    'depositFeeInBips()'(overrides?: CallOverrides): Promise<BigNumber>;

    'initialize(string,address)'(_VERSION: string, _borrower: string, overrides?: Overrides): Promise<BigNumber>;

    'initialize()'(overrides?: Overrides): Promise<BigNumber>;

    'initialize(address)'(sender: string, overrides?: Overrides): Promise<BigNumber>;

    isOperator(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    'isOperator(address)'(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isPauser(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    'isPauser(address)'(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    kToken(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    'kToken(address)'(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    kTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'kTokens(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    migrate(_newLP: string, overrides?: Overrides): Promise<BigNumber>;

    'migrate(address)'(_newLP: string, overrides?: Overrides): Promise<BigNumber>;

    operators(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'operators(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    'pause()'(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    'paused()'(overrides?: CallOverrides): Promise<BigNumber>;

    poolFeeInBips(overrides?: CallOverrides): Promise<BigNumber>;

    'poolFeeInBips()'(overrides?: CallOverrides): Promise<BigNumber>;

    recoverTokens(_token: string, overrides?: Overrides): Promise<BigNumber>;

    'recoverTokens(address)'(_token: string, overrides?: Overrides): Promise<BigNumber>;

    register(_kToken: string, overrides?: Overrides): Promise<BigNumber>;

    'register(address)'(_kToken: string, overrides?: Overrides): Promise<BigNumber>;

    registeredKTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'registeredKTokens(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    registeredTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'registeredTokens(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOperator(overrides?: Overrides): Promise<BigNumber>;

    'renounceOperator()'(overrides?: Overrides): Promise<BigNumber>;

    renouncePauser(overrides?: Overrides): Promise<BigNumber>;

    'renouncePauser()'(overrides?: Overrides): Promise<BigNumber>;

    underlyingBalance(_token: string, _owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    'underlyingBalance(address,address)'(_token: string, _owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    'unpause()'(overrides?: Overrides): Promise<BigNumber>;

    updateDepositFee(_depositFeeInBips: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    'updateDepositFee(uint256)'(_depositFeeInBips: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    updateFeePool(_newFeePool: string, overrides?: Overrides): Promise<BigNumber>;

    'updateFeePool(address)'(_newFeePool: string, overrides?: Overrides): Promise<BigNumber>;

    updatePoolFee(_poolFeeInBips: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    'updatePoolFee(uint256)'(_poolFeeInBips: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    withdraw(_to: string, _kToken: string, _kTokenAmount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    'withdraw(address,address,uint256)'(
      _to: string,
      _kToken: string,
      _kTokenAmount: BigNumberish,
      overrides?: Overrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETHEREUM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'ETHEREUM()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEE_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'FEE_BASE()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'VERSION()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addOperator(account: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'addOperator(address)'(account: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    addPauser(account: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'addPauser(address)'(account: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    blacklistRecoverableToken(_token: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'blacklistRecoverableToken(address)'(_token: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    borrow(
      _token: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'borrow(address,uint256,bytes)'(
      _token: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    borrowableBalance(_token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'borrowableBalance(address)'(_token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(_token: string, _amount: BigNumberish, overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    'deposit(address,uint256)'(
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides,
    ): Promise<PopulatedTransaction>;

    depositFeeInBips(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'depositFeeInBips()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'initialize(string,address)'(
      _VERSION: string,
      _borrower: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'initialize()'(overrides?: Overrides): Promise<PopulatedTransaction>;

    'initialize(address)'(sender: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    isOperator(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'isOperator(address)'(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPauser(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'isPauser(address)'(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kToken(_token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'kToken(address)'(_token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kTokens(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'kTokens(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrate(_newLP: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'migrate(address)'(_newLP: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    operators(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'operators(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    'pause()'(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'paused()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolFeeInBips(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'poolFeeInBips()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverTokens(_token: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'recoverTokens(address)'(_token: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    register(_kToken: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'register(address)'(_kToken: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    registeredKTokens(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'registeredKTokens(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registeredTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'registeredTokens(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOperator(overrides?: Overrides): Promise<PopulatedTransaction>;

    'renounceOperator()'(overrides?: Overrides): Promise<PopulatedTransaction>;

    renouncePauser(overrides?: Overrides): Promise<PopulatedTransaction>;

    'renouncePauser()'(overrides?: Overrides): Promise<PopulatedTransaction>;

    underlyingBalance(_token: string, _owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'underlyingBalance(address,address)'(
      _token: string,
      _owner: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    'unpause()'(overrides?: Overrides): Promise<PopulatedTransaction>;

    updateDepositFee(_depositFeeInBips: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>;

    'updateDepositFee(uint256)'(_depositFeeInBips: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>;

    updateFeePool(_newFeePool: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    'updateFeePool(address)'(_newFeePool: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    updatePoolFee(_poolFeeInBips: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>;

    'updatePoolFee(uint256)'(_poolFeeInBips: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>;

    withdraw(
      _to: string,
      _kToken: string,
      _kTokenAmount: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    'withdraw(address,address,uint256)'(
      _to: string,
      _kToken: string,
      _kTokenAmount: BigNumberish,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;
  };
}
