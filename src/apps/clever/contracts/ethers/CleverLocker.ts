/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace CLeverCVXLocker {
  export type EpochUnlockInfoStruct = {
    pendingUnlock: BigNumberish;
    unlockEpoch: BigNumberish;
  };

  export type EpochUnlockInfoStructOutput = [BigNumber, BigNumber] & {
    pendingUnlock: BigNumber;
    unlockEpoch: BigNumber;
  };
}

export declare namespace IVotiumMultiMerkleStash {
  export type ClaimParamStruct = {
    token: string;
    index: BigNumberish;
    amount: BigNumberish;
    merkleProof: BytesLike[];
  };

  export type ClaimParamStructOutput = [string, BigNumber, BigNumber, string[]] & {
    token: string;
    index: BigNumber;
    amount: BigNumber;
    merkleProof: string[];
  };
}

export interface CleverLockerInterface extends utils.Interface {
  functions: {
    'accRewardPerShare()': FunctionFragment;
    'borrow(uint256,bool)': FunctionFragment;
    'clevCVX()': FunctionFragment;
    'delegate(address,bytes32,address)': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'donate(uint256)': FunctionFragment;
    'furnace()': FunctionFragment;
    'getUserInfo(address)': FunctionFragment;
    'getUserLocks(address)': FunctionFragment;
    'governor()': FunctionFragment;
    'harvest(address,uint256)': FunctionFragment;
    'harvestBountyPercentage()': FunctionFragment;
    'harvestVotium((address,uint256,uint256,bytes32[])[],uint256)': FunctionFragment;
    'initialize(address,address,address,address,address,uint256,uint256)': FunctionFragment;
    'isKeeper(address)': FunctionFragment;
    'manualSwapRewardToken(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingUnlocked(uint256)': FunctionFragment;
    'platform()': FunctionFragment;
    'platformFeePercentage()': FunctionFragment;
    'processUnlockableCVX()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'repay(uint256,uint256)': FunctionFragment;
    'repayFeePercentage()': FunctionFragment;
    'reserveRate()': FunctionFragment;
    'stakePercentage()': FunctionFragment;
    'stakeThreshold()': FunctionFragment;
    'totalCVXInPool()': FunctionFragment;
    'totalDebtGlobal()': FunctionFragment;
    'totalLockedGlobal()': FunctionFragment;
    'totalPendingUnlockGlobal()': FunctionFragment;
    'totalUnlockedGlobal()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unlock(uint256)': FunctionFragment;
    'updateGovernor(address)': FunctionFragment;
    'updateHarvestBountyPercentage(uint256)': FunctionFragment;
    'updateKeepers(address[],bool)': FunctionFragment;
    'updateManualSwapRewardToken(address[],bool)': FunctionFragment;
    'updatePlatform(address)': FunctionFragment;
    'updatePlatformFeePercentage(uint256)': FunctionFragment;
    'updateRepayFeePercentage(uint256)': FunctionFragment;
    'updateReserveRate(uint256)': FunctionFragment;
    'updateStakePercentage(uint256)': FunctionFragment;
    'updateStakeThreshold(uint256)': FunctionFragment;
    'updateZap(address)': FunctionFragment;
    'userInfo(address)': FunctionFragment;
    'withdrawManualSwapRewardTokens(address[],address)': FunctionFragment;
    'withdrawUnlocked()': FunctionFragment;
    'zap()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'accRewardPerShare'
      | 'borrow'
      | 'clevCVX'
      | 'delegate'
      | 'deposit'
      | 'donate'
      | 'furnace'
      | 'getUserInfo'
      | 'getUserLocks'
      | 'governor'
      | 'harvest'
      | 'harvestBountyPercentage'
      | 'harvestVotium'
      | 'initialize'
      | 'isKeeper'
      | 'manualSwapRewardToken'
      | 'owner'
      | 'pendingUnlocked'
      | 'platform'
      | 'platformFeePercentage'
      | 'processUnlockableCVX'
      | 'renounceOwnership'
      | 'repay'
      | 'repayFeePercentage'
      | 'reserveRate'
      | 'stakePercentage'
      | 'stakeThreshold'
      | 'totalCVXInPool'
      | 'totalDebtGlobal'
      | 'totalLockedGlobal'
      | 'totalPendingUnlockGlobal'
      | 'totalUnlockedGlobal'
      | 'transferOwnership'
      | 'unlock'
      | 'updateGovernor'
      | 'updateHarvestBountyPercentage'
      | 'updateKeepers'
      | 'updateManualSwapRewardToken'
      | 'updatePlatform'
      | 'updatePlatformFeePercentage'
      | 'updateRepayFeePercentage'
      | 'updateReserveRate'
      | 'updateStakePercentage'
      | 'updateStakeThreshold'
      | 'updateZap'
      | 'userInfo'
      | 'withdrawManualSwapRewardTokens'
      | 'withdrawUnlocked'
      | 'zap',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'accRewardPerShare', values?: undefined): string;
  encodeFunctionData(functionFragment: 'borrow', values: [BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: 'clevCVX', values?: undefined): string;
  encodeFunctionData(functionFragment: 'delegate', values: [string, BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'donate', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'furnace', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getUserInfo', values: [string]): string;
  encodeFunctionData(functionFragment: 'getUserLocks', values: [string]): string;
  encodeFunctionData(functionFragment: 'governor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'harvest', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'harvestBountyPercentage', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'harvestVotium',
    values: [IVotiumMultiMerkleStash.ClaimParamStruct[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, string, string, string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'isKeeper', values: [string]): string;
  encodeFunctionData(functionFragment: 'manualSwapRewardToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingUnlocked', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'platform', values?: undefined): string;
  encodeFunctionData(functionFragment: 'platformFeePercentage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'processUnlockableCVX', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'repay', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'repayFeePercentage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reserveRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stakePercentage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stakeThreshold', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalCVXInPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalDebtGlobal', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalLockedGlobal', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalPendingUnlockGlobal', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalUnlockedGlobal', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'unlock', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateGovernor', values: [string]): string;
  encodeFunctionData(functionFragment: 'updateHarvestBountyPercentage', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateKeepers', values: [string[], boolean]): string;
  encodeFunctionData(functionFragment: 'updateManualSwapRewardToken', values: [string[], boolean]): string;
  encodeFunctionData(functionFragment: 'updatePlatform', values: [string]): string;
  encodeFunctionData(functionFragment: 'updatePlatformFeePercentage', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateRepayFeePercentage', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateReserveRate', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateStakePercentage', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateStakeThreshold', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateZap', values: [string]): string;
  encodeFunctionData(functionFragment: 'userInfo', values: [string]): string;
  encodeFunctionData(functionFragment: 'withdrawManualSwapRewardTokens', values: [string[], string]): string;
  encodeFunctionData(functionFragment: 'withdrawUnlocked', values?: undefined): string;
  encodeFunctionData(functionFragment: 'zap', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'accRewardPerShare', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'clevCVX', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'donate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'furnace', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserLocks', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvestBountyPercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'harvestVotium', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isKeeper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'manualSwapRewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingUnlocked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'platform', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'platformFeePercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'processUnlockableCVX', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayFeePercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reserveRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakePercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalCVXInPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalDebtGlobal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalLockedGlobal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalPendingUnlockGlobal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalUnlockedGlobal', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateGovernor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateHarvestBountyPercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateKeepers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateManualSwapRewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePlatform', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePlatformFeePercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateRepayFeePercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateReserveRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateStakePercentage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateStakeThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateZap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userInfo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawManualSwapRewardTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawUnlocked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'zap', data: BytesLike): Result;

  events: {
    'Borrow(address,uint256)': EventFragment;
    'Claim(address,uint256)': EventFragment;
    'Deposit(address,uint256)': EventFragment;
    'Harvest(address,uint256,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Repay(address,uint256,uint256)': EventFragment;
    'Unlock(address,uint256)': EventFragment;
    'UpdateGovernor(address)': EventFragment;
    'UpdateHarvestBountyPercentage(uint256)': EventFragment;
    'UpdatePlatform(address)': EventFragment;
    'UpdatePlatformFeePercentage(uint256)': EventFragment;
    'UpdateRepayFeePercentage(uint256)': EventFragment;
    'UpdateStakePercentage(uint256)': EventFragment;
    'UpdateStakeThreshold(uint256)': EventFragment;
    'UpdateWhitelist(address,bool)': EventFragment;
    'UpdateZap(address)': EventFragment;
    'Withdraw(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Borrow'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Claim'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Harvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Repay'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unlock'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateGovernor'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateHarvestBountyPercentage'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatePlatform'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatePlatformFeePercentage'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateRepayFeePercentage'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateStakePercentage'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateStakeThreshold'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateWhitelist'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateZap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface BorrowEventObject {
  _account: string;
  _amount: BigNumber;
}
export type BorrowEvent = TypedEvent<[string, BigNumber], BorrowEventObject>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface ClaimEventObject {
  _account: string;
  _amount: BigNumber;
}
export type ClaimEvent = TypedEvent<[string, BigNumber], ClaimEventObject>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface DepositEventObject {
  _account: string;
  _amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface HarvestEventObject {
  _caller: string;
  _reward: BigNumber;
  _platformFee: BigNumber;
  _harvestBounty: BigNumber;
}
export type HarvestEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], HarvestEventObject>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RepayEventObject {
  _account: string;
  _cvxAmount: BigNumber;
  _clevCVXAmount: BigNumber;
}
export type RepayEvent = TypedEvent<[string, BigNumber, BigNumber], RepayEventObject>;

export type RepayEventFilter = TypedEventFilter<RepayEvent>;

export interface UnlockEventObject {
  _account: string;
  _amount: BigNumber;
}
export type UnlockEvent = TypedEvent<[string, BigNumber], UnlockEventObject>;

export type UnlockEventFilter = TypedEventFilter<UnlockEvent>;

export interface UpdateGovernorEventObject {
  _governor: string;
}
export type UpdateGovernorEvent = TypedEvent<[string], UpdateGovernorEventObject>;

export type UpdateGovernorEventFilter = TypedEventFilter<UpdateGovernorEvent>;

export interface UpdateHarvestBountyPercentageEventObject {
  _percentage: BigNumber;
}
export type UpdateHarvestBountyPercentageEvent = TypedEvent<[BigNumber], UpdateHarvestBountyPercentageEventObject>;

export type UpdateHarvestBountyPercentageEventFilter = TypedEventFilter<UpdateHarvestBountyPercentageEvent>;

export interface UpdatePlatformEventObject {
  _platform: string;
}
export type UpdatePlatformEvent = TypedEvent<[string], UpdatePlatformEventObject>;

export type UpdatePlatformEventFilter = TypedEventFilter<UpdatePlatformEvent>;

export interface UpdatePlatformFeePercentageEventObject {
  _feePercentage: BigNumber;
}
export type UpdatePlatformFeePercentageEvent = TypedEvent<[BigNumber], UpdatePlatformFeePercentageEventObject>;

export type UpdatePlatformFeePercentageEventFilter = TypedEventFilter<UpdatePlatformFeePercentageEvent>;

export interface UpdateRepayFeePercentageEventObject {
  _feePercentage: BigNumber;
}
export type UpdateRepayFeePercentageEvent = TypedEvent<[BigNumber], UpdateRepayFeePercentageEventObject>;

export type UpdateRepayFeePercentageEventFilter = TypedEventFilter<UpdateRepayFeePercentageEvent>;

export interface UpdateStakePercentageEventObject {
  _percentage: BigNumber;
}
export type UpdateStakePercentageEvent = TypedEvent<[BigNumber], UpdateStakePercentageEventObject>;

export type UpdateStakePercentageEventFilter = TypedEventFilter<UpdateStakePercentageEvent>;

export interface UpdateStakeThresholdEventObject {
  _threshold: BigNumber;
}
export type UpdateStakeThresholdEvent = TypedEvent<[BigNumber], UpdateStakeThresholdEventObject>;

export type UpdateStakeThresholdEventFilter = TypedEventFilter<UpdateStakeThresholdEvent>;

export interface UpdateWhitelistEventObject {
  _whitelist: string;
  _status: boolean;
}
export type UpdateWhitelistEvent = TypedEvent<[string, boolean], UpdateWhitelistEventObject>;

export type UpdateWhitelistEventFilter = TypedEventFilter<UpdateWhitelistEvent>;

export interface UpdateZapEventObject {
  _zap: string;
}
export type UpdateZapEvent = TypedEvent<[string], UpdateZapEventObject>;

export type UpdateZapEventFilter = TypedEventFilter<UpdateZapEvent>;

export interface WithdrawEventObject {
  _account: string;
  _amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface CleverLocker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CleverLockerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accRewardPerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrow(
      _amount: BigNumberish,
      _depositToFurnace: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    clevCVX(overrides?: CallOverrides): Promise<[string]>;

    delegate(
      _registry: string,
      _id: BytesLike,
      _delegate: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    donate(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    furnace(overrides?: CallOverrides): Promise<[string]>;

    getUserInfo(
      _account: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalDeposited: BigNumber;
        totalPendingUnlocked: BigNumber;
        totalUnlocked: BigNumber;
        totalBorrowed: BigNumber;
        totalReward: BigNumber;
      }
    >;

    getUserLocks(
      _account: string,
      overrides?: CallOverrides,
    ): Promise<
      [CLeverCVXLocker.EpochUnlockInfoStructOutput[], CLeverCVXLocker.EpochUnlockInfoStructOutput[]] & {
        locks: CLeverCVXLocker.EpochUnlockInfoStructOutput[];
        pendingUnlocks: CLeverCVXLocker.EpochUnlockInfoStructOutput[];
      }
    >;

    governor(overrides?: CallOverrides): Promise<[string]>;

    harvest(
      _recipient: string,
      _minimumOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    harvestBountyPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    harvestVotium(
      claims: IVotiumMultiMerkleStash.ClaimParamStruct[],
      _minimumOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _governor: string,
      _clevCVX: string,
      _zap: string,
      _furnace: string,
      _platform: string,
      _platformFeePercentage: BigNumberish,
      _harvestBountyPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isKeeper(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    manualSwapRewardToken(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingUnlocked(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    platform(overrides?: CallOverrides): Promise<[string]>;

    platformFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    processUnlockableCVX(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    repay(
      _cvxAmount: BigNumberish,
      _clevCVXAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    repayFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    reserveRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakeThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalCVXInPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDebtGlobal(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLockedGlobal(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPendingUnlockGlobal(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalUnlockedGlobal(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    unlock(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateGovernor(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateHarvestBountyPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateKeepers(
      _accounts: string[],
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateManualSwapRewardToken(
      _tokens: string[],
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updatePlatform(
      _platform: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updatePlatformFeePercentage(
      _feePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateRepayFeePercentage(
      _feePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateReserveRate(
      _reserveRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateStakePercentage(
      _percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateStakeThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateZap(_zap: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        totalDebt: BigNumber;
        rewards: BigNumber;
        rewardPerSharePaid: BigNumber;
        lastInteractedBlock: BigNumber;
        totalLocked: BigNumber;
        totalUnlocked: BigNumber;
        nextUnlockIndex: number;
      }
    >;

    withdrawManualSwapRewardTokens(
      _tokens: string[],
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawUnlocked(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    zap(overrides?: CallOverrides): Promise<[string]>;
  };

  accRewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  borrow(
    _amount: BigNumberish,
    _depositToFurnace: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  clevCVX(overrides?: CallOverrides): Promise<string>;

  delegate(
    _registry: string,
    _id: BytesLike,
    _delegate: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  donate(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  furnace(overrides?: CallOverrides): Promise<string>;

  getUserInfo(
    _account: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalDeposited: BigNumber;
      totalPendingUnlocked: BigNumber;
      totalUnlocked: BigNumber;
      totalBorrowed: BigNumber;
      totalReward: BigNumber;
    }
  >;

  getUserLocks(
    _account: string,
    overrides?: CallOverrides,
  ): Promise<
    [CLeverCVXLocker.EpochUnlockInfoStructOutput[], CLeverCVXLocker.EpochUnlockInfoStructOutput[]] & {
      locks: CLeverCVXLocker.EpochUnlockInfoStructOutput[];
      pendingUnlocks: CLeverCVXLocker.EpochUnlockInfoStructOutput[];
    }
  >;

  governor(overrides?: CallOverrides): Promise<string>;

  harvest(
    _recipient: string,
    _minimumOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  harvestBountyPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  harvestVotium(
    claims: IVotiumMultiMerkleStash.ClaimParamStruct[],
    _minimumOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _governor: string,
    _clevCVX: string,
    _zap: string,
    _furnace: string,
    _platform: string,
    _platformFeePercentage: BigNumberish,
    _harvestBountyPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isKeeper(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  manualSwapRewardToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingUnlocked(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  platform(overrides?: CallOverrides): Promise<string>;

  platformFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  processUnlockableCVX(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  repay(
    _cvxAmount: BigNumberish,
    _clevCVXAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  repayFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  reserveRate(overrides?: CallOverrides): Promise<BigNumber>;

  stakePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  stakeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  totalCVXInPool(overrides?: CallOverrides): Promise<BigNumber>;

  totalDebtGlobal(overrides?: CallOverrides): Promise<BigNumber>;

  totalLockedGlobal(overrides?: CallOverrides): Promise<BigNumber>;

  totalPendingUnlockGlobal(overrides?: CallOverrides): Promise<BigNumber>;

  totalUnlockedGlobal(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  unlock(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateGovernor(
    _governor: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateHarvestBountyPercentage(
    _percentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateKeepers(
    _accounts: string[],
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateManualSwapRewardToken(
    _tokens: string[],
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updatePlatform(
    _platform: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updatePlatformFeePercentage(
    _feePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateRepayFeePercentage(
    _feePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateReserveRate(
    _reserveRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateStakePercentage(
    _percentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateStakeThreshold(
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateZap(_zap: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  userInfo(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
      totalDebt: BigNumber;
      rewards: BigNumber;
      rewardPerSharePaid: BigNumber;
      lastInteractedBlock: BigNumber;
      totalLocked: BigNumber;
      totalUnlocked: BigNumber;
      nextUnlockIndex: number;
    }
  >;

  withdrawManualSwapRewardTokens(
    _tokens: string[],
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawUnlocked(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  zap(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    accRewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(_amount: BigNumberish, _depositToFurnace: boolean, overrides?: CallOverrides): Promise<void>;

    clevCVX(overrides?: CallOverrides): Promise<string>;

    delegate(_registry: string, _id: BytesLike, _delegate: string, overrides?: CallOverrides): Promise<void>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    donate(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    furnace(overrides?: CallOverrides): Promise<string>;

    getUserInfo(
      _account: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalDeposited: BigNumber;
        totalPendingUnlocked: BigNumber;
        totalUnlocked: BigNumber;
        totalBorrowed: BigNumber;
        totalReward: BigNumber;
      }
    >;

    getUserLocks(
      _account: string,
      overrides?: CallOverrides,
    ): Promise<
      [CLeverCVXLocker.EpochUnlockInfoStructOutput[], CLeverCVXLocker.EpochUnlockInfoStructOutput[]] & {
        locks: CLeverCVXLocker.EpochUnlockInfoStructOutput[];
        pendingUnlocks: CLeverCVXLocker.EpochUnlockInfoStructOutput[];
      }
    >;

    governor(overrides?: CallOverrides): Promise<string>;

    harvest(_recipient: string, _minimumOut: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    harvestBountyPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    harvestVotium(
      claims: IVotiumMultiMerkleStash.ClaimParamStruct[],
      _minimumOut: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(
      _governor: string,
      _clevCVX: string,
      _zap: string,
      _furnace: string,
      _platform: string,
      _platformFeePercentage: BigNumberish,
      _harvestBountyPercentage: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    isKeeper(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    manualSwapRewardToken(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingUnlocked(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    platform(overrides?: CallOverrides): Promise<string>;

    platformFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    processUnlockableCVX(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repay(_cvxAmount: BigNumberish, _clevCVXAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    repayFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    reserveRate(overrides?: CallOverrides): Promise<BigNumber>;

    stakePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    stakeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    totalCVXInPool(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebtGlobal(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedGlobal(overrides?: CallOverrides): Promise<BigNumber>;

    totalPendingUnlockGlobal(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnlockedGlobal(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    unlock(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateGovernor(_governor: string, overrides?: CallOverrides): Promise<void>;

    updateHarvestBountyPercentage(_percentage: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateKeepers(_accounts: string[], _status: boolean, overrides?: CallOverrides): Promise<void>;

    updateManualSwapRewardToken(_tokens: string[], _status: boolean, overrides?: CallOverrides): Promise<void>;

    updatePlatform(_platform: string, overrides?: CallOverrides): Promise<void>;

    updatePlatformFeePercentage(_feePercentage: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateRepayFeePercentage(_feePercentage: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateReserveRate(_reserveRate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateStakePercentage(_percentage: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateStakeThreshold(_threshold: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateZap(_zap: string, overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        totalDebt: BigNumber;
        rewards: BigNumber;
        rewardPerSharePaid: BigNumber;
        lastInteractedBlock: BigNumber;
        totalLocked: BigNumber;
        totalUnlocked: BigNumber;
        nextUnlockIndex: number;
      }
    >;

    withdrawManualSwapRewardTokens(_tokens: string[], _recipient: string, overrides?: CallOverrides): Promise<void>;

    withdrawUnlocked(overrides?: CallOverrides): Promise<void>;

    zap(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'Borrow(address,uint256)'(_account?: string | null, _amount?: null): BorrowEventFilter;
    Borrow(_account?: string | null, _amount?: null): BorrowEventFilter;

    'Claim(address,uint256)'(_account?: string | null, _amount?: null): ClaimEventFilter;
    Claim(_account?: string | null, _amount?: null): ClaimEventFilter;

    'Deposit(address,uint256)'(_account?: string | null, _amount?: null): DepositEventFilter;
    Deposit(_account?: string | null, _amount?: null): DepositEventFilter;

    'Harvest(address,uint256,uint256,uint256)'(
      _caller?: string | null,
      _reward?: null,
      _platformFee?: null,
      _harvestBounty?: null,
    ): HarvestEventFilter;
    Harvest(_caller?: string | null, _reward?: null, _platformFee?: null, _harvestBounty?: null): HarvestEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    'Repay(address,uint256,uint256)'(
      _account?: string | null,
      _cvxAmount?: null,
      _clevCVXAmount?: null,
    ): RepayEventFilter;
    Repay(_account?: string | null, _cvxAmount?: null, _clevCVXAmount?: null): RepayEventFilter;

    'Unlock(address,uint256)'(_account?: string | null, _amount?: null): UnlockEventFilter;
    Unlock(_account?: string | null, _amount?: null): UnlockEventFilter;

    'UpdateGovernor(address)'(_governor?: string | null): UpdateGovernorEventFilter;
    UpdateGovernor(_governor?: string | null): UpdateGovernorEventFilter;

    'UpdateHarvestBountyPercentage(uint256)'(_percentage?: null): UpdateHarvestBountyPercentageEventFilter;
    UpdateHarvestBountyPercentage(_percentage?: null): UpdateHarvestBountyPercentageEventFilter;

    'UpdatePlatform(address)'(_platform?: string | null): UpdatePlatformEventFilter;
    UpdatePlatform(_platform?: string | null): UpdatePlatformEventFilter;

    'UpdatePlatformFeePercentage(uint256)'(_feePercentage?: null): UpdatePlatformFeePercentageEventFilter;
    UpdatePlatformFeePercentage(_feePercentage?: null): UpdatePlatformFeePercentageEventFilter;

    'UpdateRepayFeePercentage(uint256)'(_feePercentage?: null): UpdateRepayFeePercentageEventFilter;
    UpdateRepayFeePercentage(_feePercentage?: null): UpdateRepayFeePercentageEventFilter;

    'UpdateStakePercentage(uint256)'(_percentage?: null): UpdateStakePercentageEventFilter;
    UpdateStakePercentage(_percentage?: null): UpdateStakePercentageEventFilter;

    'UpdateStakeThreshold(uint256)'(_threshold?: null): UpdateStakeThresholdEventFilter;
    UpdateStakeThreshold(_threshold?: null): UpdateStakeThresholdEventFilter;

    'UpdateWhitelist(address,bool)'(_whitelist?: string | null, _status?: null): UpdateWhitelistEventFilter;
    UpdateWhitelist(_whitelist?: string | null, _status?: null): UpdateWhitelistEventFilter;

    'UpdateZap(address)'(_zap?: string | null): UpdateZapEventFilter;
    UpdateZap(_zap?: string | null): UpdateZapEventFilter;

    'Withdraw(address,uint256)'(_account?: string | null, _amount?: null): WithdrawEventFilter;
    Withdraw(_account?: string | null, _amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    accRewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      _amount: BigNumberish,
      _depositToFurnace: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    clevCVX(overrides?: CallOverrides): Promise<BigNumber>;

    delegate(
      _registry: string,
      _id: BytesLike,
      _delegate: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    deposit(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    donate(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    furnace(overrides?: CallOverrides): Promise<BigNumber>;

    getUserInfo(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUserLocks(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      _recipient: string,
      _minimumOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    harvestBountyPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    harvestVotium(
      claims: IVotiumMultiMerkleStash.ClaimParamStruct[],
      _minimumOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initialize(
      _governor: string,
      _clevCVX: string,
      _zap: string,
      _furnace: string,
      _platform: string,
      _platformFeePercentage: BigNumberish,
      _harvestBountyPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isKeeper(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    manualSwapRewardToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingUnlocked(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    platform(overrides?: CallOverrides): Promise<BigNumber>;

    platformFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    processUnlockableCVX(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    repay(
      _cvxAmount: BigNumberish,
      _clevCVXAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    repayFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    reserveRate(overrides?: CallOverrides): Promise<BigNumber>;

    stakePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    stakeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    totalCVXInPool(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebtGlobal(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedGlobal(overrides?: CallOverrides): Promise<BigNumber>;

    totalPendingUnlockGlobal(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnlockedGlobal(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    unlock(_amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updateGovernor(_governor: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updateHarvestBountyPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateKeepers(
      _accounts: string[],
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateManualSwapRewardToken(
      _tokens: string[],
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updatePlatform(_platform: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updatePlatformFeePercentage(
      _feePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateRepayFeePercentage(
      _feePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateReserveRate(
      _reserveRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateStakePercentage(
      _percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateStakeThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateZap(_zap: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawManualSwapRewardTokens(
      _tokens: string[],
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawUnlocked(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    zap(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accRewardPerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      _amount: BigNumberish,
      _depositToFurnace: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    clevCVX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegate(
      _registry: string,
      _id: BytesLike,
      _delegate: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    donate(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    furnace(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserInfo(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserLocks(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvest(
      _recipient: string,
      _minimumOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    harvestBountyPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestVotium(
      claims: IVotiumMultiMerkleStash.ClaimParamStruct[],
      _minimumOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _governor: string,
      _clevCVX: string,
      _zap: string,
      _furnace: string,
      _platform: string,
      _platformFeePercentage: BigNumberish,
      _harvestBountyPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isKeeper(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manualSwapRewardToken(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingUnlocked(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platform(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platformFeePercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processUnlockableCVX(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    repay(
      _cvxAmount: BigNumberish,
      _clevCVXAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    repayFeePercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakePercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCVXInPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDebtGlobal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLockedGlobal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPendingUnlockGlobal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalUnlockedGlobal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    unlock(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateGovernor(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateHarvestBountyPercentage(
      _percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateKeepers(
      _accounts: string[],
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateManualSwapRewardToken(
      _tokens: string[],
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updatePlatform(
      _platform: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updatePlatformFeePercentage(
      _feePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateRepayFeePercentage(
      _feePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateReserveRate(
      _reserveRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateStakePercentage(
      _percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateStakeThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateZap(_zap: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawManualSwapRewardTokens(
      _tokens: string[],
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawUnlocked(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    zap(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
