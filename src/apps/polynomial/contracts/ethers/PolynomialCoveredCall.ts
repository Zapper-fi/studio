/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface PolynomialCoveredCallInterface extends utils.Interface {
  functions: {
    'LYRA_CLAIMER()': FunctionFragment;
    'LYRA_MARKET()': FunctionFragment;
    'LYRA_TOKEN()': FunctionFragment;
    'SYNTHETIX()': FunctionFragment;
    'SYNTH_KEY_PREMIUM()': FunctionFragment;
    'SYNTH_KEY_UNDERLYING()': FunctionFragment;
    'UNDERLYING()': FunctionFragment;
    'authority()': FunctionFragment;
    'cancelDeposit(uint256)': FunctionFragment;
    'cancelWithdraw(uint256)': FunctionFragment;
    'claimLyra(address)': FunctionFragment;
    'completeWithdraw()': FunctionFragment;
    'currentExpiry()': FunctionFragment;
    'currentListingId()': FunctionFragment;
    'currentRound()': FunctionFragment;
    'currentStrike()': FunctionFragment;
    'deposit(address,uint256)': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'feeReciepient()': FunctionFragment;
    'ivLimit()': FunctionFragment;
    'keeper()': FunctionFragment;
    'managementFee()': FunctionFragment;
    'name()': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'pendingDeposits()': FunctionFragment;
    'pendingWithdraws()': FunctionFragment;
    'performanceFee()': FunctionFragment;
    'performanceIndices(uint256)': FunctionFragment;
    'premiumCollected()': FunctionFragment;
    'requestWithdraw(uint256)': FunctionFragment;
    'sellOptions(uint256)': FunctionFragment;
    'setAuthority(address)': FunctionFragment;
    'setCap(uint256)': FunctionFragment;
    'setFeeReciepient(address)': FunctionFragment;
    'setFees(uint256,uint256)': FunctionFragment;
    'setIvLimit(uint256)': FunctionFragment;
    'setKeeper(address)': FunctionFragment;
    'setOwner(address)': FunctionFragment;
    'setUserDepositLimit(uint256)': FunctionFragment;
    'startNewRound(uint256)': FunctionFragment;
    'totalFunds()': FunctionFragment;
    'totalShares()': FunctionFragment;
    'unpause()': FunctionFragment;
    'usedFunds()': FunctionFragment;
    'userDepositLimit()': FunctionFragment;
    'userInfos(address)': FunctionFragment;
    'vaultCapacity()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'LYRA_CLAIMER'
      | 'LYRA_MARKET'
      | 'LYRA_TOKEN'
      | 'SYNTHETIX'
      | 'SYNTH_KEY_PREMIUM'
      | 'SYNTH_KEY_UNDERLYING'
      | 'UNDERLYING'
      | 'authority'
      | 'cancelDeposit'
      | 'cancelWithdraw'
      | 'claimLyra'
      | 'completeWithdraw'
      | 'currentExpiry'
      | 'currentListingId'
      | 'currentRound'
      | 'currentStrike'
      | 'deposit(address,uint256)'
      | 'deposit(uint256)'
      | 'feeReciepient'
      | 'ivLimit'
      | 'keeper'
      | 'managementFee'
      | 'name'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'pendingDeposits'
      | 'pendingWithdraws'
      | 'performanceFee'
      | 'performanceIndices'
      | 'premiumCollected'
      | 'requestWithdraw'
      | 'sellOptions'
      | 'setAuthority'
      | 'setCap'
      | 'setFeeReciepient'
      | 'setFees'
      | 'setIvLimit'
      | 'setKeeper'
      | 'setOwner'
      | 'setUserDepositLimit'
      | 'startNewRound'
      | 'totalFunds'
      | 'totalShares'
      | 'unpause'
      | 'usedFunds'
      | 'userDepositLimit'
      | 'userInfos'
      | 'vaultCapacity',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'LYRA_CLAIMER', values?: undefined): string;
  encodeFunctionData(functionFragment: 'LYRA_MARKET', values?: undefined): string;
  encodeFunctionData(functionFragment: 'LYRA_TOKEN', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SYNTHETIX', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SYNTH_KEY_PREMIUM', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SYNTH_KEY_UNDERLYING', values?: undefined): string;
  encodeFunctionData(functionFragment: 'UNDERLYING', values?: undefined): string;
  encodeFunctionData(functionFragment: 'authority', values?: undefined): string;
  encodeFunctionData(functionFragment: 'cancelDeposit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'cancelWithdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'claimLyra', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'completeWithdraw', values?: undefined): string;
  encodeFunctionData(functionFragment: 'currentExpiry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'currentListingId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'currentRound', values?: undefined): string;
  encodeFunctionData(functionFragment: 'currentStrike', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'deposit(address,uint256)',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'deposit(uint256)', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'feeReciepient', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ivLimit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'keeper', values?: undefined): string;
  encodeFunctionData(functionFragment: 'managementFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingDeposits', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingWithdraws', values?: undefined): string;
  encodeFunctionData(functionFragment: 'performanceFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'performanceIndices', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'premiumCollected', values?: undefined): string;
  encodeFunctionData(functionFragment: 'requestWithdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'sellOptions', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setAuthority', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setCap', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setFeeReciepient', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setFees',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setIvLimit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setKeeper', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setOwner', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setUserDepositLimit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'startNewRound', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'totalFunds', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalShares', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'usedFunds', values?: undefined): string;
  encodeFunctionData(functionFragment: 'userDepositLimit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'userInfos', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'vaultCapacity', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'LYRA_CLAIMER', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'LYRA_MARKET', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'LYRA_TOKEN', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SYNTHETIX', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SYNTH_KEY_PREMIUM', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SYNTH_KEY_UNDERLYING', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'UNDERLYING', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'authority', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancelDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancelWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimLyra', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'completeWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentExpiry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentListingId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentRound', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentStrike', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit(address,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit(uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeReciepient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ivLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'keeper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'managementFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingDeposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingWithdraws', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'performanceFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'performanceIndices', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'premiumCollected', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requestWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sellOptions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAuthority', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeReciepient', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setIvLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setKeeper', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUserDepositLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startNewRound', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalFunds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'usedFunds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userDepositLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userInfos', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaultCapacity', data: BytesLike): Result;

  events: {
    'AuthorityUpdated(address,address)': EventFragment;
    'CancelDeposit(address,uint256,uint256)': EventFragment;
    'CancelWithdraw(address,uint256,uint256)': EventFragment;
    'CompleteWithdraw(address,uint256,uint256,uint256)': EventFragment;
    'Deposit(address,uint256,uint256)': EventFragment;
    'OwnerUpdated(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'RequestWithdraw(address,uint256,uint256)': EventFragment;
    'SellOptions(uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'SetCap(address,uint256,uint256)': EventFragment;
    'SetFeeReciepient(address,address,address)': EventFragment;
    'SetFees(address,uint256,uint256,uint256,uint256)': EventFragment;
    'SetIvLimit(address,uint256,uint256)': EventFragment;
    'SetKeeper(address,address,address)': EventFragment;
    'SetUserDepositLimit(address,uint256,uint256)': EventFragment;
    'StartNewRound(uint256,uint256,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AuthorityUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CancelDeposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CancelWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CompleteWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RequestWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SellOptions'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetCap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetFeeReciepient'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetFees'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetIvLimit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetKeeper'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetUserDepositLimit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StartNewRound'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export interface AuthorityUpdatedEventObject {
  user: string;
  newAuthority: string;
}
export type AuthorityUpdatedEvent = TypedEvent<[string, string], AuthorityUpdatedEventObject>;

export type AuthorityUpdatedEventFilter = TypedEventFilter<AuthorityUpdatedEvent>;

export interface CancelDepositEventObject {
  user: string;
  depositRound: BigNumber;
  amt: BigNumber;
}
export type CancelDepositEvent = TypedEvent<[string, BigNumber, BigNumber], CancelDepositEventObject>;

export type CancelDepositEventFilter = TypedEventFilter<CancelDepositEvent>;

export interface CancelWithdrawEventObject {
  user: string;
  withdrawnRound: BigNumber;
  shares: BigNumber;
}
export type CancelWithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], CancelWithdrawEventObject>;

export type CancelWithdrawEventFilter = TypedEventFilter<CancelWithdrawEvent>;

export interface CompleteWithdrawEventObject {
  user: string;
  withdrawnRound: BigNumber;
  shares: BigNumber;
  funds: BigNumber;
}
export type CompleteWithdrawEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], CompleteWithdrawEventObject>;

export type CompleteWithdrawEventFilter = TypedEventFilter<CompleteWithdrawEvent>;

export interface DepositEventObject {
  user: string;
  depositRound: BigNumber;
  amt: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface OwnerUpdatedEventObject {
  user: string;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<[string, string], OwnerUpdatedEventObject>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RequestWithdrawEventObject {
  user: string;
  withdrawnRound: BigNumber;
  shares: BigNumber;
}
export type RequestWithdrawEvent = TypedEvent<[string, BigNumber, BigNumber], RequestWithdrawEventObject>;

export type RequestWithdrawEventFilter = TypedEventFilter<RequestWithdrawEvent>;

export interface SellOptionsEventObject {
  round: BigNumber;
  optionsSold: BigNumber;
  totalCost: BigNumber;
  expiry: BigNumber;
  strikePrice: BigNumber;
}
export type SellOptionsEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  SellOptionsEventObject
>;

export type SellOptionsEventFilter = TypedEventFilter<SellOptionsEvent>;

export interface SetCapEventObject {
  auth: string;
  oldCap: BigNumber;
  newCap: BigNumber;
}
export type SetCapEvent = TypedEvent<[string, BigNumber, BigNumber], SetCapEventObject>;

export type SetCapEventFilter = TypedEventFilter<SetCapEvent>;

export interface SetFeeReciepientEventObject {
  auth: string;
  oldReceipient: string;
  newReceipient: string;
}
export type SetFeeReciepientEvent = TypedEvent<[string, string, string], SetFeeReciepientEventObject>;

export type SetFeeReciepientEventFilter = TypedEventFilter<SetFeeReciepientEvent>;

export interface SetFeesEventObject {
  auth: string;
  oldManageFee: BigNumber;
  oldPerfFee: BigNumber;
  newManageFee: BigNumber;
  newPerfFee: BigNumber;
}
export type SetFeesEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber, BigNumber], SetFeesEventObject>;

export type SetFeesEventFilter = TypedEventFilter<SetFeesEvent>;

export interface SetIvLimitEventObject {
  auth: string;
  oldLimit: BigNumber;
  newLimit: BigNumber;
}
export type SetIvLimitEvent = TypedEvent<[string, BigNumber, BigNumber], SetIvLimitEventObject>;

export type SetIvLimitEventFilter = TypedEventFilter<SetIvLimitEvent>;

export interface SetKeeperEventObject {
  auth: string;
  oldKeeper: string;
  newKeeper: string;
}
export type SetKeeperEvent = TypedEvent<[string, string, string], SetKeeperEventObject>;

export type SetKeeperEventFilter = TypedEventFilter<SetKeeperEvent>;

export interface SetUserDepositLimitEventObject {
  auth: string;
  oldDepositLimit: BigNumber;
  newDepositLimit: BigNumber;
}
export type SetUserDepositLimitEvent = TypedEvent<[string, BigNumber, BigNumber], SetUserDepositLimitEventObject>;

export type SetUserDepositLimitEventFilter = TypedEventFilter<SetUserDepositLimitEvent>;

export interface StartNewRoundEventObject {
  round: BigNumber;
  listingId: BigNumber;
  newIndex: BigNumber;
  expiry: BigNumber;
  strikePrice: BigNumber;
  lostColl: BigNumber;
  qty: BigNumber;
}
export type StartNewRoundEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  StartNewRoundEventObject
>;

export type StartNewRoundEventFilter = TypedEventFilter<StartNewRoundEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface PolynomialCoveredCall extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PolynomialCoveredCallInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LYRA_CLAIMER(overrides?: CallOverrides): Promise<[string]>;

    LYRA_MARKET(overrides?: CallOverrides): Promise<[string]>;

    LYRA_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    SYNTHETIX(overrides?: CallOverrides): Promise<[string]>;

    SYNTH_KEY_PREMIUM(overrides?: CallOverrides): Promise<[string]>;

    SYNTH_KEY_UNDERLYING(overrides?: CallOverrides): Promise<[string]>;

    UNDERLYING(overrides?: CallOverrides): Promise<[string]>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    cancelDeposit(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    cancelWithdraw(
      _shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimLyra(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    completeWithdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    currentExpiry(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentListingId(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentStrike(overrides?: CallOverrides): Promise<[BigNumber]>;

    'deposit(address,uint256)'(
      _user: PromiseOrValue<string>,
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'deposit(uint256)'(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    feeReciepient(overrides?: CallOverrides): Promise<[string]>;

    ivLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    managementFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingWithdraws(overrides?: CallOverrides): Promise<[BigNumber]>;

    performanceFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    performanceIndices(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    premiumCollected(overrides?: CallOverrides): Promise<[BigNumber]>;

    requestWithdraw(
      _shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    sellOptions(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setCap(
      _newCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFeeReciepient(
      _feeReciepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setFees(
      _perfomanceFee: PromiseOrValue<BigNumberish>,
      _managementFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setIvLimit(
      _ivLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setUserDepositLimit(
      _depositLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    startNewRound(
      _listingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    totalFunds(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    usedFunds(overrides?: CallOverrides): Promise<[BigNumber]>;

    userDepositLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    userInfos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        depositRound: BigNumber;
        pendingDeposit: BigNumber;
        withdrawRound: BigNumber;
        withdrawnShares: BigNumber;
        totalShares: BigNumber;
      }
    >;

    vaultCapacity(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  LYRA_CLAIMER(overrides?: CallOverrides): Promise<string>;

  LYRA_MARKET(overrides?: CallOverrides): Promise<string>;

  LYRA_TOKEN(overrides?: CallOverrides): Promise<string>;

  SYNTHETIX(overrides?: CallOverrides): Promise<string>;

  SYNTH_KEY_PREMIUM(overrides?: CallOverrides): Promise<string>;

  SYNTH_KEY_UNDERLYING(overrides?: CallOverrides): Promise<string>;

  UNDERLYING(overrides?: CallOverrides): Promise<string>;

  authority(overrides?: CallOverrides): Promise<string>;

  cancelDeposit(
    _amt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  cancelWithdraw(
    _shares: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimLyra(
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  completeWithdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  currentExpiry(overrides?: CallOverrides): Promise<BigNumber>;

  currentListingId(overrides?: CallOverrides): Promise<BigNumber>;

  currentRound(overrides?: CallOverrides): Promise<BigNumber>;

  currentStrike(overrides?: CallOverrides): Promise<BigNumber>;

  'deposit(address,uint256)'(
    _user: PromiseOrValue<string>,
    _amt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'deposit(uint256)'(
    _amt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  feeReciepient(overrides?: CallOverrides): Promise<string>;

  ivLimit(overrides?: CallOverrides): Promise<BigNumber>;

  keeper(overrides?: CallOverrides): Promise<string>;

  managementFee(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  pendingWithdraws(overrides?: CallOverrides): Promise<BigNumber>;

  performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

  performanceIndices(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  premiumCollected(overrides?: CallOverrides): Promise<BigNumber>;

  requestWithdraw(
    _shares: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  sellOptions(
    _amt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setAuthority(
    newAuthority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setCap(
    _newCap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFeeReciepient(
    _feeReciepient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setFees(
    _perfomanceFee: PromiseOrValue<BigNumberish>,
    _managementFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setIvLimit(
    _ivLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setKeeper(
    _keeper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setUserDepositLimit(
    _depositLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  startNewRound(
    _listingId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  totalFunds(overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  usedFunds(overrides?: CallOverrides): Promise<BigNumber>;

  userDepositLimit(overrides?: CallOverrides): Promise<BigNumber>;

  userInfos(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      depositRound: BigNumber;
      pendingDeposit: BigNumber;
      withdrawRound: BigNumber;
      withdrawnShares: BigNumber;
      totalShares: BigNumber;
    }
  >;

  vaultCapacity(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    LYRA_CLAIMER(overrides?: CallOverrides): Promise<string>;

    LYRA_MARKET(overrides?: CallOverrides): Promise<string>;

    LYRA_TOKEN(overrides?: CallOverrides): Promise<string>;

    SYNTHETIX(overrides?: CallOverrides): Promise<string>;

    SYNTH_KEY_PREMIUM(overrides?: CallOverrides): Promise<string>;

    SYNTH_KEY_UNDERLYING(overrides?: CallOverrides): Promise<string>;

    UNDERLYING(overrides?: CallOverrides): Promise<string>;

    authority(overrides?: CallOverrides): Promise<string>;

    cancelDeposit(_amt: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    cancelWithdraw(_shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    claimLyra(_receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    completeWithdraw(overrides?: CallOverrides): Promise<void>;

    currentExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    currentListingId(overrides?: CallOverrides): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    currentStrike(overrides?: CallOverrides): Promise<BigNumber>;

    'deposit(address,uint256)'(
      _user: PromiseOrValue<string>,
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    'deposit(uint256)'(_amt: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    feeReciepient(overrides?: CallOverrides): Promise<string>;

    ivLimit(overrides?: CallOverrides): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<string>;

    managementFee(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    pendingWithdraws(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    performanceIndices(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    premiumCollected(overrides?: CallOverrides): Promise<BigNumber>;

    requestWithdraw(_shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    sellOptions(_amt: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setAuthority(newAuthority: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setCap(_newCap: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setFeeReciepient(_feeReciepient: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setFees(
      _perfomanceFee: PromiseOrValue<BigNumberish>,
      _managementFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setIvLimit(_ivLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setKeeper(_keeper: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setOwner(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setUserDepositLimit(_depositLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    startNewRound(_listingId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    totalFunds(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    usedFunds(overrides?: CallOverrides): Promise<BigNumber>;

    userDepositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    userInfos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        depositRound: BigNumber;
        pendingDeposit: BigNumber;
        withdrawRound: BigNumber;
        withdrawnShares: BigNumber;
        totalShares: BigNumber;
      }
    >;

    vaultCapacity(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'AuthorityUpdated(address,address)'(
      user?: PromiseOrValue<string> | null,
      newAuthority?: PromiseOrValue<string> | null,
    ): AuthorityUpdatedEventFilter;
    AuthorityUpdated(
      user?: PromiseOrValue<string> | null,
      newAuthority?: PromiseOrValue<string> | null,
    ): AuthorityUpdatedEventFilter;

    'CancelDeposit(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      depositRound?: PromiseOrValue<BigNumberish> | null,
      amt?: null,
    ): CancelDepositEventFilter;
    CancelDeposit(
      user?: PromiseOrValue<string> | null,
      depositRound?: PromiseOrValue<BigNumberish> | null,
      amt?: null,
    ): CancelDepositEventFilter;

    'CancelWithdraw(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      withdrawnRound?: PromiseOrValue<BigNumberish> | null,
      shares?: null,
    ): CancelWithdrawEventFilter;
    CancelWithdraw(
      user?: PromiseOrValue<string> | null,
      withdrawnRound?: PromiseOrValue<BigNumberish> | null,
      shares?: null,
    ): CancelWithdrawEventFilter;

    'CompleteWithdraw(address,uint256,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      withdrawnRound?: PromiseOrValue<BigNumberish> | null,
      shares?: null,
      funds?: null,
    ): CompleteWithdrawEventFilter;
    CompleteWithdraw(
      user?: PromiseOrValue<string> | null,
      withdrawnRound?: PromiseOrValue<BigNumberish> | null,
      shares?: null,
      funds?: null,
    ): CompleteWithdrawEventFilter;

    'Deposit(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      depositRound?: PromiseOrValue<BigNumberish> | null,
      amt?: null,
    ): DepositEventFilter;
    Deposit(
      user?: PromiseOrValue<string> | null,
      depositRound?: PromiseOrValue<BigNumberish> | null,
      amt?: null,
    ): DepositEventFilter;

    'OwnerUpdated(address,address)'(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnerUpdatedEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'RequestWithdraw(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      withdrawnRound?: PromiseOrValue<BigNumberish> | null,
      shares?: null,
    ): RequestWithdrawEventFilter;
    RequestWithdraw(
      user?: PromiseOrValue<string> | null,
      withdrawnRound?: PromiseOrValue<BigNumberish> | null,
      shares?: null,
    ): RequestWithdrawEventFilter;

    'SellOptions(uint256,uint256,uint256,uint256,uint256)'(
      round?: PromiseOrValue<BigNumberish> | null,
      optionsSold?: null,
      totalCost?: null,
      expiry?: null,
      strikePrice?: null,
    ): SellOptionsEventFilter;
    SellOptions(
      round?: PromiseOrValue<BigNumberish> | null,
      optionsSold?: null,
      totalCost?: null,
      expiry?: null,
      strikePrice?: null,
    ): SellOptionsEventFilter;

    'SetCap(address,uint256,uint256)'(
      auth?: PromiseOrValue<string> | null,
      oldCap?: null,
      newCap?: null,
    ): SetCapEventFilter;
    SetCap(auth?: PromiseOrValue<string> | null, oldCap?: null, newCap?: null): SetCapEventFilter;

    'SetFeeReciepient(address,address,address)'(
      auth?: PromiseOrValue<string> | null,
      oldReceipient?: null,
      newReceipient?: null,
    ): SetFeeReciepientEventFilter;
    SetFeeReciepient(
      auth?: PromiseOrValue<string> | null,
      oldReceipient?: null,
      newReceipient?: null,
    ): SetFeeReciepientEventFilter;

    'SetFees(address,uint256,uint256,uint256,uint256)'(
      auth?: PromiseOrValue<string> | null,
      oldManageFee?: null,
      oldPerfFee?: null,
      newManageFee?: null,
      newPerfFee?: null,
    ): SetFeesEventFilter;
    SetFees(
      auth?: PromiseOrValue<string> | null,
      oldManageFee?: null,
      oldPerfFee?: null,
      newManageFee?: null,
      newPerfFee?: null,
    ): SetFeesEventFilter;

    'SetIvLimit(address,uint256,uint256)'(
      auth?: PromiseOrValue<string> | null,
      oldLimit?: null,
      newLimit?: null,
    ): SetIvLimitEventFilter;
    SetIvLimit(auth?: PromiseOrValue<string> | null, oldLimit?: null, newLimit?: null): SetIvLimitEventFilter;

    'SetKeeper(address,address,address)'(
      auth?: PromiseOrValue<string> | null,
      oldKeeper?: null,
      newKeeper?: null,
    ): SetKeeperEventFilter;
    SetKeeper(auth?: PromiseOrValue<string> | null, oldKeeper?: null, newKeeper?: null): SetKeeperEventFilter;

    'SetUserDepositLimit(address,uint256,uint256)'(
      auth?: PromiseOrValue<string> | null,
      oldDepositLimit?: null,
      newDepositLimit?: null,
    ): SetUserDepositLimitEventFilter;
    SetUserDepositLimit(
      auth?: PromiseOrValue<string> | null,
      oldDepositLimit?: null,
      newDepositLimit?: null,
    ): SetUserDepositLimitEventFilter;

    'StartNewRound(uint256,uint256,uint256,uint256,uint256,uint256,uint256)'(
      round?: PromiseOrValue<BigNumberish> | null,
      listingId?: PromiseOrValue<BigNumberish> | null,
      newIndex?: null,
      expiry?: null,
      strikePrice?: null,
      lostColl?: null,
      qty?: null,
    ): StartNewRoundEventFilter;
    StartNewRound(
      round?: PromiseOrValue<BigNumberish> | null,
      listingId?: PromiseOrValue<BigNumberish> | null,
      newIndex?: null,
      expiry?: null,
      strikePrice?: null,
      lostColl?: null,
      qty?: null,
    ): StartNewRoundEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    LYRA_CLAIMER(overrides?: CallOverrides): Promise<BigNumber>;

    LYRA_MARKET(overrides?: CallOverrides): Promise<BigNumber>;

    LYRA_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    SYNTHETIX(overrides?: CallOverrides): Promise<BigNumber>;

    SYNTH_KEY_PREMIUM(overrides?: CallOverrides): Promise<BigNumber>;

    SYNTH_KEY_UNDERLYING(overrides?: CallOverrides): Promise<BigNumber>;

    UNDERLYING(overrides?: CallOverrides): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    cancelDeposit(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    cancelWithdraw(
      _shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimLyra(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    completeWithdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    currentExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    currentListingId(overrides?: CallOverrides): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    currentStrike(overrides?: CallOverrides): Promise<BigNumber>;

    'deposit(address,uint256)'(
      _user: PromiseOrValue<string>,
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'deposit(uint256)'(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    feeReciepient(overrides?: CallOverrides): Promise<BigNumber>;

    ivLimit(overrides?: CallOverrides): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    managementFee(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    pendingWithdraws(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    performanceIndices(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    premiumCollected(overrides?: CallOverrides): Promise<BigNumber>;

    requestWithdraw(
      _shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    sellOptions(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setCap(
      _newCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFeeReciepient(
      _feeReciepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setFees(
      _perfomanceFee: PromiseOrValue<BigNumberish>,
      _managementFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setIvLimit(
      _ivLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setUserDepositLimit(
      _depositLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    startNewRound(
      _listingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    totalFunds(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    usedFunds(overrides?: CallOverrides): Promise<BigNumber>;

    userDepositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    userInfos(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    vaultCapacity(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    LYRA_CLAIMER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LYRA_MARKET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LYRA_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SYNTHETIX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SYNTH_KEY_PREMIUM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SYNTH_KEY_UNDERLYING(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNDERLYING(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelDeposit(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    cancelWithdraw(
      _shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimLyra(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    completeWithdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    currentExpiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentListingId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentStrike(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'deposit(address,uint256)'(
      _user: PromiseOrValue<string>,
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'deposit(uint256)'(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    feeReciepient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ivLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managementFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingWithdraws(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performanceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performanceIndices(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    premiumCollected(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestWithdraw(
      _shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    sellOptions(
      _amt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setAuthority(
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setCap(
      _newCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFeeReciepient(
      _feeReciepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setFees(
      _perfomanceFee: PromiseOrValue<BigNumberish>,
      _managementFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setIvLimit(
      _ivLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setUserDepositLimit(
      _depositLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    startNewRound(
      _listingId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    totalFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    usedFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userDepositLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userInfos(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultCapacity(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
