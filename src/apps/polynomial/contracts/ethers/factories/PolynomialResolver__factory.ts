/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type { PolynomialResolver, PolynomialResolverInterface } from '../PolynomialResolver';

const _abi = [
  {
    inputs: [
      {
        internalType: 'contract IOptionMarket',
        name: 'market',
        type: 'address',
      },
      {
        internalType: 'contract IExchangeRates',
        name: 'rates',
        type: 'address',
      },
      {
        internalType: 'contract IOptionGreeksCache',
        name: 'greeks',
        type: 'address',
      },
      {
        internalType: 'contract IFuturesMarket',
        name: 'futuresMarket',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'contract Authority',
        name: 'newAuthority',
        type: 'address',
      },
    ],
    name: 'AuthorityUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnerUpdated',
    type: 'event',
  },
  {
    inputs: [],
    name: 'FUTURES_MARKET',
    outputs: [
      {
        internalType: 'contract IFuturesMarket',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'GREEKS',
    outputs: [
      {
        internalType: 'contract IOptionGreeksCache',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MARKET',
    outputs: [
      {
        internalType: 'contract IOptionMarket',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'RATES',
    outputs: [
      {
        internalType: 'contract IExchangeRates',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'vault',
        type: 'address',
      },
      {
        internalType: 'enum PolynomialEarnResolver.VaultType',
        name: 'vaultType',
        type: 'uint8',
      },
    ],
    name: 'addVault',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'authority',
    outputs: [
      {
        internalType: 'contract Authority',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'spotPrice',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'strikeId',
        type: 'uint256',
      },
    ],
    name: 'getDeltaWithSpotPrice',
    outputs: [
      {
        internalType: 'int256',
        name: 'callDelta',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: 'putDelta',
        type: 'int256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256[]',
        name: 'strikeIds',
        type: 'uint256[]',
      },
    ],
    name: 'getDeltas',
    outputs: [
      {
        internalType: 'int256[]',
        name: 'callDeltas',
        type: 'int256[]',
      },
      {
        internalType: 'int256[]',
        name: 'putDeltas',
        type: 'int256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256[]',
        name: 'strikeIds',
        type: 'uint256[]',
      },
    ],
    name: 'getStrikeDetails',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'strikeId',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'expiry',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'strikePrice',
            type: 'uint256',
          },
        ],
        internalType: 'struct PolynomialEarnResolver.MinimalStrike[]',
        name: 'strikes',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
      {
        internalType: 'address[]',
        name: 'vaults',
        type: 'address[]',
      },
    ],
    name: 'getUserPositions',
    outputs: [
      {
        internalType: 'uint256[]',
        name: 'balances',
        type: 'uint256[]',
      },
      {
        internalType: 'uint256[]',
        name: 'underlyings',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'vault',
        type: 'address',
      },
    ],
    name: 'getVaultPositions',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'spotPrice',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'shortPosition',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'margin',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'leverage',
            type: 'uint256',
          },
        ],
        internalType: 'struct PolynomialEarnResolver.FuturesData',
        name: 'futurePosition',
        type: 'tuple',
      },
      {
        components: [
          {
            internalType: 'uint256',
            name: 'strikeId',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'strikePrice',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'expiry',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'positionId',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'optionAmount',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'premiumPaid',
            type: 'uint256',
          },
          {
            internalType: 'int256',
            name: 'premiumCollected',
            type: 'int256',
          },
          {
            internalType: 'uint256',
            name: 'collateral',
            type: 'uint256',
          },
          {
            internalType: 'int256',
            name: 'currentOptionDelta',
            type: 'int256',
          },
        ],
        internalType: 'struct PolynomialEarnResolver.OptionData[]',
        name: 'optionData',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'isVault',
    outputs: [
      {
        internalType: 'enum PolynomialEarnResolver.VaultType',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract Authority',
        name: 'newAuthority',
        type: 'address',
      },
    ],
    name: 'setAuthority',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'setOwner',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

export class PolynomialResolver__factory {
  static readonly abi = _abi;
  static createInterface(): PolynomialResolverInterface {
    return new utils.Interface(_abi) as PolynomialResolverInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): PolynomialResolver {
    return new Contract(address, _abi, signerOrProvider) as PolynomialResolver;
  }
}
