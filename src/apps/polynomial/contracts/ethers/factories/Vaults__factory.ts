/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type { Vaults, VaultsInterface } from '../Vaults';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_user',
        type: 'address',
      },
      {
        internalType: 'contract IVault[]',
        name: '_vaults',
        type: 'address[]',
      },
      {
        internalType: 'contract ERC20[]',
        name: '_tokens',
        type: 'address[]',
      },
    ],
    name: 'getAllBalances',
    outputs: [
      {
        internalType: 'uint256[]',
        name: '_vaultBalances',
        type: 'uint256[]',
      },
      {
        internalType: 'uint256[]',
        name: '_vaultShares',
        type: 'uint256[]',
      },
      {
        internalType: 'uint256[]',
        name: '_vaultWithdrawsToComplete',
        type: 'uint256[]',
      },
      {
        internalType: 'uint256[]',
        name: '_vaultCancellableWithdraw',
        type: 'uint256[]',
      },
      {
        internalType: 'uint256[]',
        name: '_balances',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_rounds',
        type: 'uint256',
      },
      {
        internalType: 'contract IVault',
        name: '_vault',
        type: 'address',
      },
    ],
    name: 'getPerformance',
    outputs: [
      {
        internalType: 'uint256[]',
        name: '_indices',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_user',
        type: 'address',
      },
      {
        internalType: 'contract ERC20[]',
        name: '_tokens',
        type: 'address[]',
      },
    ],
    name: 'getTokenBalances',
    outputs: [
      {
        internalType: 'uint256[]',
        name: '_balances',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_user',
        type: 'address',
      },
      {
        internalType: 'contract IVault',
        name: '_vault',
        type: 'address',
      },
    ],
    name: 'getUserBalance',
    outputs: [
      {
        internalType: 'uint256',
        name: '_balance',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_shares',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_withdrawToComplete',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_cancellableWithdraw',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_user',
        type: 'address',
      },
      {
        internalType: 'contract IVault[]',
        name: '_vaults',
        type: 'address[]',
      },
    ],
    name: 'getUserBalances',
    outputs: [
      {
        internalType: 'uint256[]',
        name: '_balances',
        type: 'uint256[]',
      },
      {
        internalType: 'uint256[]',
        name: '_shares',
        type: 'uint256[]',
      },
      {
        internalType: 'uint256[]',
        name: '_withdrawToComplete',
        type: 'uint256[]',
      },
      {
        internalType: 'uint256[]',
        name: '_cancellableWithdraw',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

export class Vaults__factory {
  static readonly abi = _abi;
  static createInterface(): VaultsInterface {
    return new utils.Interface(_abi) as VaultsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Vaults {
    return new Contract(address, _abi, signerOrProvider) as Vaults;
  }
}
