/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Vesting {
  export type VestStateStruct = {
    vestingAmount: BigNumberish;
    claimedAmount: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    cancleTime: BigNumberish;
  };

  export type VestStateStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    vestingAmount: BigNumber;
    claimedAmount: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    cancleTime: BigNumber;
  };
}

export interface AladdinConcentratorVestInterface extends utils.Interface {
  functions: {
    "cancle(address,uint256)": FunctionFragment;
    "claim()": FunctionFragment;
    "getUserVest(address)": FunctionFragment;
    "isWhitelist(address)": FunctionFragment;
    "locked(address)": FunctionFragment;
    "newVesting(address,uint128,uint64,uint64)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateWhitelist(address[],bool)": FunctionFragment;
    "vested(address)": FunctionFragment;
    "vesting(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancle"
      | "claim"
      | "getUserVest"
      | "isWhitelist"
      | "locked"
      | "newVesting"
      | "owner"
      | "renounceOwnership"
      | "token"
      | "transferOwnership"
      | "updateWhitelist"
      | "vested"
      | "vesting"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancle",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(functionFragment: "getUserVest", values: [string]): string;
  encodeFunctionData(functionFragment: "isWhitelist", values: [string]): string;
  encodeFunctionData(functionFragment: "locked", values: [string]): string;
  encodeFunctionData(
    functionFragment: "newVesting",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWhitelist",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(functionFragment: "vested", values: [string]): string;
  encodeFunctionData(
    functionFragment: "vesting",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "cancle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserVest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newVesting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vested", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vesting", data: BytesLike): Result;

  events: {
    "Cancle(address,uint256,uint256,uint256)": EventFragment;
    "Claim(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Vest(address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cancle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Vest"): EventFragment;
}

export interface CancleEventObject {
  _recipient: string;
  _index: BigNumber;
  _unvested: BigNumber;
  _cancleTime: BigNumber;
}
export type CancleEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  CancleEventObject
>;

export type CancleEventFilter = TypedEventFilter<CancleEvent>;

export interface ClaimEventObject {
  _recipient: string;
  _amount: BigNumber;
}
export type ClaimEvent = TypedEvent<[string, BigNumber], ClaimEventObject>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface VestEventObject {
  _recipient: string;
  _index: BigNumber;
  _amount: BigNumber;
  _startTime: BigNumber;
  _endTime: BigNumber;
}
export type VestEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  VestEventObject
>;

export type VestEventFilter = TypedEventFilter<VestEvent>;

export interface AladdinConcentratorVest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AladdinConcentratorVestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancle(
      _user: string,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getUserVest(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<[Vesting.VestStateStructOutput[]]>;

    isWhitelist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    locked(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _unvested: BigNumber }>;

    newVesting(
      _recipient: string,
      _amount: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateWhitelist(
      _accounts: string[],
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vested(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _vested: BigNumber }>;

    vesting(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        vestingAmount: BigNumber;
        claimedAmount: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        cancleTime: BigNumber;
      }
    >;
  };

  cancle(
    _user: string,
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getUserVest(
    _recipient: string,
    overrides?: CallOverrides
  ): Promise<Vesting.VestStateStructOutput[]>;

  isWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  locked(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

  newVesting(
    _recipient: string,
    _amount: BigNumberish,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateWhitelist(
    _accounts: string[],
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vested(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

  vesting(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      vestingAmount: BigNumber;
      claimedAmount: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      cancleTime: BigNumber;
    }
  >;

  callStatic: {
    cancle(
      _user: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(overrides?: CallOverrides): Promise<BigNumber>;

    getUserVest(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<Vesting.VestStateStructOutput[]>;

    isWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    locked(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

    newVesting(
      _recipient: string,
      _amount: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWhitelist(
      _accounts: string[],
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    vested(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

    vesting(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        vestingAmount: BigNumber;
        claimedAmount: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        cancleTime: BigNumber;
      }
    >;
  };

  filters: {
    "Cancle(address,uint256,uint256,uint256)"(
      _recipient?: string | null,
      _index?: BigNumberish | null,
      _unvested?: null,
      _cancleTime?: null
    ): CancleEventFilter;
    Cancle(
      _recipient?: string | null,
      _index?: BigNumberish | null,
      _unvested?: null,
      _cancleTime?: null
    ): CancleEventFilter;

    "Claim(address,uint256)"(
      _recipient?: string | null,
      _amount?: null
    ): ClaimEventFilter;
    Claim(_recipient?: string | null, _amount?: null): ClaimEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Vest(address,uint256,uint256,uint256,uint256)"(
      _recipient?: string | null,
      _index?: BigNumberish | null,
      _amount?: null,
      _startTime?: null,
      _endTime?: null
    ): VestEventFilter;
    Vest(
      _recipient?: string | null,
      _index?: BigNumberish | null,
      _amount?: null,
      _startTime?: null,
      _endTime?: null
    ): VestEventFilter;
  };

  estimateGas: {
    cancle(
      _user: string,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getUserVest(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    locked(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

    newVesting(
      _recipient: string,
      _amount: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateWhitelist(
      _accounts: string[],
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vested(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

    vesting(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancle(
      _user: string,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getUserVest(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    locked(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newVesting(
      _recipient: string,
      _amount: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateWhitelist(
      _accounts: string[],
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vested(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vesting(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
