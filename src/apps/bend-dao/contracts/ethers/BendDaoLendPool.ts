/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace DataTypes {
  export type NftConfigurationMapStruct = {
    data: PromiseOrValue<BigNumberish>;
  };

  export type NftConfigurationMapStructOutput = [BigNumber] & {
    data: BigNumber;
  };

  export type NftDataStruct = {
    configuration: DataTypes.NftConfigurationMapStruct;
    bNftAddress: PromiseOrValue<string>;
    id: PromiseOrValue<BigNumberish>;
    maxSupply: PromiseOrValue<BigNumberish>;
    maxTokenId: PromiseOrValue<BigNumberish>;
  };

  export type NftDataStructOutput = [
    DataTypes.NftConfigurationMapStructOutput,
    string,
    number,
    BigNumber,
    BigNumber,
  ] & {
    configuration: DataTypes.NftConfigurationMapStructOutput;
    bNftAddress: string;
    id: number;
    maxSupply: BigNumber;
    maxTokenId: BigNumber;
  };

  export type ReserveConfigurationMapStruct = {
    data: PromiseOrValue<BigNumberish>;
  };

  export type ReserveConfigurationMapStructOutput = [BigNumber] & {
    data: BigNumber;
  };

  export type ReserveDataStruct = {
    configuration: DataTypes.ReserveConfigurationMapStruct;
    liquidityIndex: PromiseOrValue<BigNumberish>;
    variableBorrowIndex: PromiseOrValue<BigNumberish>;
    currentLiquidityRate: PromiseOrValue<BigNumberish>;
    currentVariableBorrowRate: PromiseOrValue<BigNumberish>;
    lastUpdateTimestamp: PromiseOrValue<BigNumberish>;
    bTokenAddress: PromiseOrValue<string>;
    debtTokenAddress: PromiseOrValue<string>;
    interestRateAddress: PromiseOrValue<string>;
    id: PromiseOrValue<BigNumberish>;
  };

  export type ReserveDataStructOutput = [
    DataTypes.ReserveConfigurationMapStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
    string,
    string,
    number,
  ] & {
    configuration: DataTypes.ReserveConfigurationMapStructOutput;
    liquidityIndex: BigNumber;
    variableBorrowIndex: BigNumber;
    currentLiquidityRate: BigNumber;
    currentVariableBorrowRate: BigNumber;
    lastUpdateTimestamp: number;
    bTokenAddress: string;
    debtTokenAddress: string;
    interestRateAddress: string;
    id: number;
  };
}

export interface BendDaoLendPoolInterface extends utils.Interface {
  functions: {
    'getAddressesProvider()': FunctionFragment;
    'getNftAuctionData(address,uint256)': FunctionFragment;
    'getNftAuctionEndTime(address,uint256)': FunctionFragment;
    'getNftCollateralData(address,address)': FunctionFragment;
    'getNftData(address)': FunctionFragment;
    'getNftDebtData(address,uint256)': FunctionFragment;
    'getNftLiquidatePrice(address,uint256)': FunctionFragment;
    'getNftsList()': FunctionFragment;
    'getReserveData(address)': FunctionFragment;
    'getReserveNormalizedIncome(address)': FunctionFragment;
    'getReserveNormalizedVariableDebt(address)': FunctionFragment;
    'getReservesList()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'getAddressesProvider'
      | 'getNftAuctionData'
      | 'getNftAuctionEndTime'
      | 'getNftCollateralData'
      | 'getNftData'
      | 'getNftDebtData'
      | 'getNftLiquidatePrice'
      | 'getNftsList'
      | 'getReserveData'
      | 'getReserveNormalizedIncome'
      | 'getReserveNormalizedVariableDebt'
      | 'getReservesList',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'getAddressesProvider', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getNftAuctionData',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getNftAuctionEndTime',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getNftCollateralData',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getNftData', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getNftDebtData',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getNftLiquidatePrice',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getNftsList', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getReserveData', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getReserveNormalizedIncome', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getReserveNormalizedVariableDebt', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getReservesList', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'getAddressesProvider', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNftAuctionData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNftAuctionEndTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNftCollateralData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNftData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNftDebtData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNftLiquidatePrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNftsList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReserveData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReserveNormalizedIncome', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReserveNormalizedVariableDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReservesList', data: BytesLike): Result;

  events: {};
}

export interface BendDaoLendPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BendDaoLendPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAddressesProvider(overrides?: CallOverrides): Promise<[string]>;

    getNftAuctionData(
      nftAsset: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        loanId: BigNumber;
        bidderAddress: string;
        bidPrice: BigNumber;
        bidBorrowAmount: BigNumber;
        bidFine: BigNumber;
      }
    >;

    getNftAuctionEndTime(
      nftAsset: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        loanId: BigNumber;
        bidStartTimestamp: BigNumber;
        bidEndTimestamp: BigNumber;
        redeemEndTimestamp: BigNumber;
      }
    >;

    getNftCollateralData(
      nftAsset: PromiseOrValue<string>,
      reserveAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalCollateralInETH: BigNumber;
        totalCollateralInReserve: BigNumber;
        availableBorrowsInETH: BigNumber;
        availableBorrowsInReserve: BigNumber;
        ltv: BigNumber;
        liquidationThreshold: BigNumber;
        liquidationBonus: BigNumber;
      }
    >;

    getNftData(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[DataTypes.NftDataStructOutput]>;

    getNftDebtData(
      nftAsset: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        loanId: BigNumber;
        reserveAsset: string;
        totalCollateral: BigNumber;
        totalDebt: BigNumber;
        availableBorrows: BigNumber;
        healthFactor: BigNumber;
      }
    >;

    getNftLiquidatePrice(
      nftAsset: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        liquidatePrice: BigNumber;
        paybackAmount: BigNumber;
      }
    >;

    getNftsList(overrides?: CallOverrides): Promise<[string[]]>;

    getReserveData(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[DataTypes.ReserveDataStructOutput]>;

    getReserveNormalizedIncome(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getReserveNormalizedVariableDebt(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getReservesList(overrides?: CallOverrides): Promise<[string[]]>;
  };

  getAddressesProvider(overrides?: CallOverrides): Promise<string>;

  getNftAuctionData(
    nftAsset: PromiseOrValue<string>,
    nftTokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
      loanId: BigNumber;
      bidderAddress: string;
      bidPrice: BigNumber;
      bidBorrowAmount: BigNumber;
      bidFine: BigNumber;
    }
  >;

  getNftAuctionEndTime(
    nftAsset: PromiseOrValue<string>,
    nftTokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      loanId: BigNumber;
      bidStartTimestamp: BigNumber;
      bidEndTimestamp: BigNumber;
      redeemEndTimestamp: BigNumber;
    }
  >;

  getNftCollateralData(
    nftAsset: PromiseOrValue<string>,
    reserveAsset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalCollateralInETH: BigNumber;
      totalCollateralInReserve: BigNumber;
      availableBorrowsInETH: BigNumber;
      availableBorrowsInReserve: BigNumber;
      ltv: BigNumber;
      liquidationThreshold: BigNumber;
      liquidationBonus: BigNumber;
    }
  >;

  getNftData(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<DataTypes.NftDataStructOutput>;

  getNftDebtData(
    nftAsset: PromiseOrValue<string>,
    nftTokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      loanId: BigNumber;
      reserveAsset: string;
      totalCollateral: BigNumber;
      totalDebt: BigNumber;
      availableBorrows: BigNumber;
      healthFactor: BigNumber;
    }
  >;

  getNftLiquidatePrice(
    nftAsset: PromiseOrValue<string>,
    nftTokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      liquidatePrice: BigNumber;
      paybackAmount: BigNumber;
    }
  >;

  getNftsList(overrides?: CallOverrides): Promise<string[]>;

  getReserveData(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<DataTypes.ReserveDataStructOutput>;

  getReserveNormalizedIncome(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getReserveNormalizedVariableDebt(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getReservesList(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    getAddressesProvider(overrides?: CallOverrides): Promise<string>;

    getNftAuctionData(
      nftAsset: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        loanId: BigNumber;
        bidderAddress: string;
        bidPrice: BigNumber;
        bidBorrowAmount: BigNumber;
        bidFine: BigNumber;
      }
    >;

    getNftAuctionEndTime(
      nftAsset: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        loanId: BigNumber;
        bidStartTimestamp: BigNumber;
        bidEndTimestamp: BigNumber;
        redeemEndTimestamp: BigNumber;
      }
    >;

    getNftCollateralData(
      nftAsset: PromiseOrValue<string>,
      reserveAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalCollateralInETH: BigNumber;
        totalCollateralInReserve: BigNumber;
        availableBorrowsInETH: BigNumber;
        availableBorrowsInReserve: BigNumber;
        ltv: BigNumber;
        liquidationThreshold: BigNumber;
        liquidationBonus: BigNumber;
      }
    >;

    getNftData(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<DataTypes.NftDataStructOutput>;

    getNftDebtData(
      nftAsset: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        loanId: BigNumber;
        reserveAsset: string;
        totalCollateral: BigNumber;
        totalDebt: BigNumber;
        availableBorrows: BigNumber;
        healthFactor: BigNumber;
      }
    >;

    getNftLiquidatePrice(
      nftAsset: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        liquidatePrice: BigNumber;
        paybackAmount: BigNumber;
      }
    >;

    getNftsList(overrides?: CallOverrides): Promise<string[]>;

    getReserveData(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<DataTypes.ReserveDataStructOutput>;

    getReserveNormalizedIncome(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getReserveNormalizedVariableDebt(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getReservesList(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {};

  estimateGas: {
    getAddressesProvider(overrides?: CallOverrides): Promise<BigNumber>;

    getNftAuctionData(
      nftAsset: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getNftAuctionEndTime(
      nftAsset: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getNftCollateralData(
      nftAsset: PromiseOrValue<string>,
      reserveAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getNftData(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getNftDebtData(
      nftAsset: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getNftLiquidatePrice(
      nftAsset: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getNftsList(overrides?: CallOverrides): Promise<BigNumber>;

    getReserveData(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getReserveNormalizedIncome(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getReserveNormalizedVariableDebt(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getReservesList(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getAddressesProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNftAuctionData(
      nftAsset: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getNftAuctionEndTime(
      nftAsset: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getNftCollateralData(
      nftAsset: PromiseOrValue<string>,
      reserveAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getNftData(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNftDebtData(
      nftAsset: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getNftLiquidatePrice(
      nftAsset: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getNftsList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserveData(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserveNormalizedIncome(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserveNormalizedVariableDebt(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getReservesList(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
