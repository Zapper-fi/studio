/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type { BendDaoLendPool, BendDaoLendPoolInterface } from '../BendDaoLendPool';

const _abi = [
  {
    inputs: [],
    name: 'getAddressesProvider',
    outputs: [
      {
        internalType: 'contract ILendPoolAddressesProvider',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'nftAsset',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'nftTokenId',
        type: 'uint256',
      },
    ],
    name: 'getNftAuctionData',
    outputs: [
      {
        internalType: 'uint256',
        name: 'loanId',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'bidderAddress',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'bidPrice',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'bidBorrowAmount',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'bidFine',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'nftAsset',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'nftTokenId',
        type: 'uint256',
      },
    ],
    name: 'getNftAuctionEndTime',
    outputs: [
      {
        internalType: 'uint256',
        name: 'loanId',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'bidStartTimestamp',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'bidEndTimestamp',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'redeemEndTimestamp',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'nftAsset',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'reserveAsset',
        type: 'address',
      },
    ],
    name: 'getNftCollateralData',
    outputs: [
      {
        internalType: 'uint256',
        name: 'totalCollateralInETH',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'totalCollateralInReserve',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'availableBorrowsInETH',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'availableBorrowsInReserve',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'ltv',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'liquidationThreshold',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'liquidationBonus',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'asset',
        type: 'address',
      },
    ],
    name: 'getNftData',
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'data',
                type: 'uint256',
              },
            ],
            internalType: 'struct DataTypes.NftConfigurationMap',
            name: 'configuration',
            type: 'tuple',
          },
          {
            internalType: 'address',
            name: 'bNftAddress',
            type: 'address',
          },
          {
            internalType: 'uint8',
            name: 'id',
            type: 'uint8',
          },
          {
            internalType: 'uint256',
            name: 'maxSupply',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'maxTokenId',
            type: 'uint256',
          },
        ],
        internalType: 'struct DataTypes.NftData',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'nftAsset',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'nftTokenId',
        type: 'uint256',
      },
    ],
    name: 'getNftDebtData',
    outputs: [
      {
        internalType: 'uint256',
        name: 'loanId',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'reserveAsset',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'totalCollateral',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'totalDebt',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'availableBorrows',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'healthFactor',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'nftAsset',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'nftTokenId',
        type: 'uint256',
      },
    ],
    name: 'getNftLiquidatePrice',
    outputs: [
      {
        internalType: 'uint256',
        name: 'liquidatePrice',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'paybackAmount',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getNftsList',
    outputs: [
      {
        internalType: 'address[]',
        name: '',
        type: 'address[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'asset',
        type: 'address',
      },
    ],
    name: 'getReserveData',
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'data',
                type: 'uint256',
              },
            ],
            internalType: 'struct DataTypes.ReserveConfigurationMap',
            name: 'configuration',
            type: 'tuple',
          },
          {
            internalType: 'uint128',
            name: 'liquidityIndex',
            type: 'uint128',
          },
          {
            internalType: 'uint128',
            name: 'variableBorrowIndex',
            type: 'uint128',
          },
          {
            internalType: 'uint128',
            name: 'currentLiquidityRate',
            type: 'uint128',
          },
          {
            internalType: 'uint128',
            name: 'currentVariableBorrowRate',
            type: 'uint128',
          },
          {
            internalType: 'uint40',
            name: 'lastUpdateTimestamp',
            type: 'uint40',
          },
          {
            internalType: 'address',
            name: 'bTokenAddress',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'debtTokenAddress',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'interestRateAddress',
            type: 'address',
          },
          {
            internalType: 'uint8',
            name: 'id',
            type: 'uint8',
          },
        ],
        internalType: 'struct DataTypes.ReserveData',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'asset',
        type: 'address',
      },
    ],
    name: 'getReserveNormalizedIncome',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'asset',
        type: 'address',
      },
    ],
    name: 'getReserveNormalizedVariableDebt',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getReservesList',
    outputs: [
      {
        internalType: 'address[]',
        name: '',
        type: 'address[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

export class BendDaoLendPool__factory {
  static readonly abi = _abi;
  static createInterface(): BendDaoLendPoolInterface {
    return new utils.Interface(_abi) as BendDaoLendPoolInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): BendDaoLendPool {
    return new Contract(address, _abi, signerOrProvider) as BendDaoLendPool;
  }
}
