/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface BendDaoLendPoolAddressesProviderInterface extends utils.Interface {
  functions: {
    'getBendDataProvider()': FunctionFragment;
    'getIncentivesController()': FunctionFragment;
    'getLendPool()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: 'getBendDataProvider' | 'getIncentivesController' | 'getLendPool',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'getBendDataProvider', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getIncentivesController', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getLendPool', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'getBendDataProvider', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getIncentivesController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLendPool', data: BytesLike): Result;

  events: {};
}

export interface BendDaoLendPoolAddressesProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BendDaoLendPoolAddressesProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBendDataProvider(overrides?: CallOverrides): Promise<[string]>;

    getIncentivesController(overrides?: CallOverrides): Promise<[string]>;

    getLendPool(overrides?: CallOverrides): Promise<[string]>;
  };

  getBendDataProvider(overrides?: CallOverrides): Promise<string>;

  getIncentivesController(overrides?: CallOverrides): Promise<string>;

  getLendPool(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getBendDataProvider(overrides?: CallOverrides): Promise<string>;

    getIncentivesController(overrides?: CallOverrides): Promise<string>;

    getLendPool(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getBendDataProvider(overrides?: CallOverrides): Promise<BigNumber>;

    getIncentivesController(overrides?: CallOverrides): Promise<BigNumber>;

    getLendPool(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getBendDataProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIncentivesController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLendPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
