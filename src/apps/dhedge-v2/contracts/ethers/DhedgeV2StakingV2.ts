/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace IDhedgeStakingV2Storage {
  export type RewardParamsStruct = {
    stakeDurationDelaySeconds: PromiseOrValue<BigNumberish>;
    maxDurationBoostSeconds: PromiseOrValue<BigNumberish>;
    maxPerformanceBoostNumerator: PromiseOrValue<BigNumberish>;
    maxPerformanceBoostDenominator: PromiseOrValue<BigNumberish>;
    stakingRatio: PromiseOrValue<BigNumberish>;
    emissionsRate: PromiseOrValue<BigNumberish>;
    emissionsRateDenominator: PromiseOrValue<BigNumberish>;
  };

  export type RewardParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    stakeDurationDelaySeconds: BigNumber;
    maxDurationBoostSeconds: BigNumber;
    maxPerformanceBoostNumerator: BigNumber;
    maxPerformanceBoostDenominator: BigNumber;
    stakingRatio: BigNumber;
    emissionsRate: BigNumber;
    emissionsRateDenominator: BigNumber;
  };

  export type PoolConfigurationStruct = {
    configured: PromiseOrValue<boolean>;
    stakeCap: PromiseOrValue<BigNumberish>;
    stakedSoFar: PromiseOrValue<BigNumberish>;
  };

  export type PoolConfigurationStructOutput = [boolean, BigNumber, BigNumber] & {
    configured: boolean;
    stakeCap: BigNumber;
    stakedSoFar: BigNumber;
  };

  export type StakeStruct = {
    dhtAmount: PromiseOrValue<BigNumberish>;
    dhtStakeStartTime: PromiseOrValue<BigNumberish>;
    dhedgePoolAddress: PromiseOrValue<string>;
    dhedgePoolAmount: PromiseOrValue<BigNumberish>;
    dhedgePoolStakeStartTime: PromiseOrValue<BigNumberish>;
    stakeStartTokenPrice: PromiseOrValue<BigNumberish>;
    unstaked: PromiseOrValue<boolean>;
    unstakeTime: PromiseOrValue<BigNumberish>;
    reward: PromiseOrValue<BigNumberish>;
    claimedReward: PromiseOrValue<BigNumberish>;
    rewardParamsEmissionsRate: PromiseOrValue<BigNumberish>;
    stakeFinishTokenPrice: PromiseOrValue<BigNumberish>;
    vdhtAccruedAtUnstake: PromiseOrValue<BigNumberish>;
    dhedgePoolRemainingExitCooldownAtStakeTime: PromiseOrValue<BigNumberish>;
  };

  export type StakeStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    dhtAmount: BigNumber;
    dhtStakeStartTime: BigNumber;
    dhedgePoolAddress: string;
    dhedgePoolAmount: BigNumber;
    dhedgePoolStakeStartTime: BigNumber;
    stakeStartTokenPrice: BigNumber;
    unstaked: boolean;
    unstakeTime: BigNumber;
    reward: BigNumber;
    claimedReward: BigNumber;
    rewardParamsEmissionsRate: BigNumber;
    stakeFinishTokenPrice: BigNumber;
    vdhtAccruedAtUnstake: BigNumber;
    dhedgePoolRemainingExitCooldownAtStakeTime: BigNumber;
  };
}

export interface DhedgeV2StakingV2Interface extends utils.Interface {
  functions: {
    'POOL_TOKEN_UNIT()': FunctionFragment;
    'UNIT()': FunctionFragment;
    'addDhtToStake(uint256,uint256)': FunctionFragment;
    'aggregateStakeStartTime()': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'baseURI()': FunctionFragment;
    'calculateDhtRewardAmount(uint256,uint256,uint256,uint256,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256,uint256))': FunctionFragment;
    'calculateMaxVDHTAllowed(uint256,uint256,uint256)': FunctionFragment;
    'calculatePerformanceFactor(uint256,uint256,uint256,uint256)': FunctionFragment;
    'calculateStakeDurationFactor(uint256,uint256,uint256)': FunctionFragment;
    'calculateVDHT(uint256,uint256,uint256,uint256)': FunctionFragment;
    'canClaimAmount(uint256)': FunctionFragment;
    'checkEnoughDht(uint256)': FunctionFragment;
    'claim(uint256)': FunctionFragment;
    'configurePool(address,uint256)': FunctionFragment;
    'currentRewardsForStake(uint256)': FunctionFragment;
    'dhtAddress()': FunctionFragment;
    'dhtBalanceOf(address)': FunctionFragment;
    'dhtCap()': FunctionFragment;
    'dhtRewarded()': FunctionFragment;
    'dhtStaked()': FunctionFragment;
    'getApproved(uint256)': FunctionFragment;
    'getPoolConfiguration(address)': FunctionFragment;
    'getStake(uint256)': FunctionFragment;
    'globalVDHT()': FunctionFragment;
    'implInitializer()': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'isApprovedForAll(address,address)': FunctionFragment;
    'maxStakingValue()': FunctionFragment;
    'maxVDurationTimeSeconds()': FunctionFragment;
    'name()': FunctionFragment;
    'newStake(uint256)': FunctionFragment;
    'numberOfPoolsConfigured()': FunctionFragment;
    'owner()': FunctionFragment;
    'ownerOf(uint256)': FunctionFragment;
    'paused()': FunctionFragment;
    'poolConfiguredByIndex(uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardParams()': FunctionFragment;
    'rewardStreamingTime()': FunctionFragment;
    'safeTransferFrom(address,address,uint256)': FunctionFragment;
    'safeTransferFrom(address,address,uint256,bytes)': FunctionFragment;
    'setApprovalForAll(address,bool)': FunctionFragment;
    'setDHTCap(uint256)': FunctionFragment;
    'setEmissionsRate(uint256)': FunctionFragment;
    'setMaxDurationBoostSeconds(uint256)': FunctionFragment;
    'setMaxPerformanceBoostNumerator(uint256)': FunctionFragment;
    'setMaxVDurationTimeSeconds(uint256)': FunctionFragment;
    'setRewardStreamingTime(uint256)': FunctionFragment;
    'setStakeDurationDelaySeconds(uint256)': FunctionFragment;
    'setStakingRatio(uint256)': FunctionFragment;
    'setTokenUriGenerator(address)': FunctionFragment;
    'stakePoolTokens(uint256,address,uint256)': FunctionFragment;
    'stakes(uint256)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'symbol()': FunctionFragment;
    'tokenByIndex(uint256)': FunctionFragment;
    'tokenOfOwnerByIndex(address,uint256)': FunctionFragment;
    'tokenURI(uint256)': FunctionFragment;
    'tokenUriGenerator()': FunctionFragment;
    'totalStakingValue()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unstakeDHT(uint256,uint256)': FunctionFragment;
    'unstakePoolTokens(uint256)': FunctionFragment;
    'vDHTBalanceOf(address)': FunctionFragment;
    'vDHTBalanceOfStake(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'POOL_TOKEN_UNIT'
      | 'UNIT'
      | 'addDhtToStake'
      | 'aggregateStakeStartTime'
      | 'approve'
      | 'balanceOf'
      | 'baseURI'
      | 'calculateDhtRewardAmount'
      | 'calculateMaxVDHTAllowed'
      | 'calculatePerformanceFactor'
      | 'calculateStakeDurationFactor'
      | 'calculateVDHT'
      | 'canClaimAmount'
      | 'checkEnoughDht'
      | 'claim'
      | 'configurePool'
      | 'currentRewardsForStake'
      | 'dhtAddress'
      | 'dhtBalanceOf'
      | 'dhtCap'
      | 'dhtRewarded'
      | 'dhtStaked'
      | 'getApproved'
      | 'getPoolConfiguration'
      | 'getStake'
      | 'globalVDHT'
      | 'implInitializer'
      | 'initialize'
      | 'isApprovedForAll'
      | 'maxStakingValue'
      | 'maxVDurationTimeSeconds'
      | 'name'
      | 'newStake'
      | 'numberOfPoolsConfigured'
      | 'owner'
      | 'ownerOf'
      | 'paused'
      | 'poolConfiguredByIndex'
      | 'renounceOwnership'
      | 'rewardParams'
      | 'rewardStreamingTime'
      | 'safeTransferFrom(address,address,uint256)'
      | 'safeTransferFrom(address,address,uint256,bytes)'
      | 'setApprovalForAll'
      | 'setDHTCap'
      | 'setEmissionsRate'
      | 'setMaxDurationBoostSeconds'
      | 'setMaxPerformanceBoostNumerator'
      | 'setMaxVDurationTimeSeconds'
      | 'setRewardStreamingTime'
      | 'setStakeDurationDelaySeconds'
      | 'setStakingRatio'
      | 'setTokenUriGenerator'
      | 'stakePoolTokens'
      | 'stakes'
      | 'supportsInterface'
      | 'symbol'
      | 'tokenByIndex'
      | 'tokenOfOwnerByIndex'
      | 'tokenURI'
      | 'tokenUriGenerator'
      | 'totalStakingValue'
      | 'totalSupply'
      | 'transferFrom'
      | 'transferOwnership'
      | 'unstakeDHT'
      | 'unstakePoolTokens'
      | 'vDHTBalanceOf'
      | 'vDHTBalanceOfStake',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'POOL_TOKEN_UNIT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'UNIT', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addDhtToStake',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'aggregateStakeStartTime', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'baseURI', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'calculateDhtRewardAmount',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IDhedgeStakingV2Storage.RewardParamsStruct,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateMaxVDHTAllowed',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'calculatePerformanceFactor',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateStakeDurationFactor',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateVDHT',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'canClaimAmount', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'checkEnoughDht', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'claim', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'configurePool',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'currentRewardsForStake', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'dhtAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'dhtBalanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'dhtCap', values?: undefined): string;
  encodeFunctionData(functionFragment: 'dhtRewarded', values?: undefined): string;
  encodeFunctionData(functionFragment: 'dhtStaked', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getApproved', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getPoolConfiguration', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getStake', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'globalVDHT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'implInitializer', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initialize', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'maxStakingValue', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxVDurationTimeSeconds', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'newStake', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'numberOfPoolsConfigured', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ownerOf', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolConfiguredByIndex', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardParams', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardStreamingTime', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setDHTCap', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setEmissionsRate', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setMaxDurationBoostSeconds', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setMaxPerformanceBoostNumerator',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setMaxVDurationTimeSeconds', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setRewardStreamingTime', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setStakeDurationDelaySeconds', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setStakingRatio', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setTokenUriGenerator', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'stakePoolTokens',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'stakes', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenByIndex', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'tokenOfOwnerByIndex',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'tokenURI', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'tokenUriGenerator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalStakingValue', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'unstakeDHT',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'unstakePoolTokens', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'vDHTBalanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'vDHTBalanceOfStake', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'POOL_TOKEN_UNIT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'UNIT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addDhtToStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'aggregateStakeStartTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'baseURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateDhtRewardAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateMaxVDHTAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculatePerformanceFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateStakeDurationFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calculateVDHT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'canClaimAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkEnoughDht', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'configurePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'currentRewardsForStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dhtAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dhtBalanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dhtCap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dhtRewarded', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dhtStaked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolConfiguration', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'globalVDHT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'implInitializer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxStakingValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxVDurationTimeSeconds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'newStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numberOfPoolsConfigured', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolConfiguredByIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardParams', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardStreamingTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDHTCap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEmissionsRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxDurationBoostSeconds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxPerformanceBoostNumerator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxVDurationTimeSeconds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewardStreamingTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setStakeDurationDelaySeconds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setStakingRatio', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTokenUriGenerator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakePoolTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenByIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenOfOwnerByIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenUriGenerator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalStakingValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstakeDHT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstakePoolTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vDHTBalanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vDHTBalanceOfStake', data: BytesLike): Result;

  events: {
    'AddDHTToStake(uint256,uint256)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'ApprovalForAll(address,address,bool)': EventFragment;
    'Claim(uint256,uint256)': EventFragment;
    'NewStake(uint256,uint256)': EventFragment;
    'OwnerOperation(string)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'StakePoolTokens(uint256,address,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
    'UnstakeDHT(uint256)': EventFragment;
    'UnstakePoolTokens(uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddDHTToStake'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Claim'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewStake'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerOperation'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StakePoolTokens'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UnstakeDHT'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UnstakePoolTokens'): EventFragment;
}

export interface AddDHTToStakeEventObject {
  tokenId: BigNumber;
  dhtAmount: BigNumber;
}
export type AddDHTToStakeEvent = TypedEvent<[BigNumber, BigNumber], AddDHTToStakeEventObject>;

export type AddDHTToStakeEventFilter = TypedEventFilter<AddDHTToStakeEvent>;

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<[string, string, boolean], ApprovalForAllEventObject>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface ClaimEventObject {
  tokenId: BigNumber;
  claimAmount: BigNumber;
}
export type ClaimEvent = TypedEvent<[BigNumber, BigNumber], ClaimEventObject>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface NewStakeEventObject {
  tokenId: BigNumber;
  dhtAmount: BigNumber;
}
export type NewStakeEvent = TypedEvent<[BigNumber, BigNumber], NewStakeEventObject>;

export type NewStakeEventFilter = TypedEventFilter<NewStakeEvent>;

export interface OwnerOperationEventObject {
  operation: string;
}
export type OwnerOperationEvent = TypedEvent<[string], OwnerOperationEventObject>;

export type OwnerOperationEventFilter = TypedEventFilter<OwnerOperationEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface StakePoolTokensEventObject {
  tokenId: BigNumber;
  dhedgePoolAddress: string;
  poolTokenAmount: BigNumber;
}
export type StakePoolTokensEvent = TypedEvent<[BigNumber, string, BigNumber], StakePoolTokensEventObject>;

export type StakePoolTokensEventFilter = TypedEventFilter<StakePoolTokensEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UnstakeDHTEventObject {
  tokenId: BigNumber;
}
export type UnstakeDHTEvent = TypedEvent<[BigNumber], UnstakeDHTEventObject>;

export type UnstakeDHTEventFilter = TypedEventFilter<UnstakeDHTEvent>;

export interface UnstakePoolTokensEventObject {
  tokenId: BigNumber;
  newTokedId: BigNumber;
}
export type UnstakePoolTokensEvent = TypedEvent<[BigNumber, BigNumber], UnstakePoolTokensEventObject>;

export type UnstakePoolTokensEventFilter = TypedEventFilter<UnstakePoolTokensEvent>;

export interface DhedgeV2StakingV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DhedgeV2StakingV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    POOL_TOKEN_UNIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    UNIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    addDhtToStake(
      tokenId: PromiseOrValue<BigNumberish>,
      dhtAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    aggregateStakeStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    calculateDhtRewardAmount(
      vDHTAmount: PromiseOrValue<BigNumberish>,
      poolTokensStaked: PromiseOrValue<BigNumberish>,
      tokenPriceStart: PromiseOrValue<BigNumberish>,
      tokenPriceFinish: PromiseOrValue<BigNumberish>,
      stakeStartTime: PromiseOrValue<BigNumberish>,
      stakeFinishTime: PromiseOrValue<BigNumberish>,
      stakeEmissionsRate: PromiseOrValue<BigNumberish>,
      rewardParams: IDhedgeStakingV2Storage.RewardParamsStruct,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    calculateMaxVDHTAllowed(
      vDHTAmount: PromiseOrValue<BigNumberish>,
      totalValue: PromiseOrValue<BigNumberish>,
      stakingRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    calculatePerformanceFactor(
      tokenPriceStart: PromiseOrValue<BigNumberish>,
      tokenPriceFinish: PromiseOrValue<BigNumberish>,
      maxPerformanceBoostNumerator: PromiseOrValue<BigNumberish>,
      maxPerformanceBoostDenominator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    calculateStakeDurationFactor(
      stakeStartTime: PromiseOrValue<BigNumberish>,
      stakeFinishTime: PromiseOrValue<BigNumberish>,
      maxDurationBoostSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    calculateVDHT(
      stakeStartTime: PromiseOrValue<BigNumberish>,
      dhtAmount: PromiseOrValue<BigNumberish>,
      stakeFinishTime: PromiseOrValue<BigNumberish>,
      maxVDurationTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { vDHT: BigNumber }>;

    canClaimAmount(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { claimAmount: BigNumber }>;

    checkEnoughDht(claimAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[void]>;

    claim(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    configurePool(
      pool: PromiseOrValue<string>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    currentRewardsForStake(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { rewardsDHT: BigNumber }>;

    dhtAddress(overrides?: CallOverrides): Promise<[string]>;

    dhtBalanceOf(staker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber] & { dht: BigNumber }>;

    dhtCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    dhtRewarded(overrides?: CallOverrides): Promise<[BigNumber]>;

    dhtStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    getPoolConfiguration(
      dhedgePoolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[IDhedgeStakingV2Storage.PoolConfigurationStructOutput]>;

    getStake(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[IDhedgeStakingV2Storage.StakeStructOutput]>;

    globalVDHT(overrides?: CallOverrides): Promise<[BigNumber]>;

    implInitializer(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    initialize(
      _dhtAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    maxStakingValue(overrides?: CallOverrides): Promise<[BigNumber] & { maximumStakingValue: BigNumber }>;

    maxVDurationTimeSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    newStake(
      dhtAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    numberOfPoolsConfigured(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    poolConfiguredByIndex(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    rewardParams(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        stakeDurationDelaySeconds: BigNumber;
        maxDurationBoostSeconds: BigNumber;
        maxPerformanceBoostNumerator: BigNumber;
        maxPerformanceBoostDenominator: BigNumber;
        stakingRatio: BigNumber;
        emissionsRate: BigNumber;
        emissionsRateDenominator: BigNumber;
      }
    >;

    rewardStreamingTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDHTCap(
      newDHTCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setEmissionsRate(
      newEmissionsRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxDurationBoostSeconds(
      newMaxDurationBoostSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxPerformanceBoostNumerator(
      newMaxPerformanceBoostNumerator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxVDurationTimeSeconds(
      newMaxVDurationTimeSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setRewardStreamingTime(
      newRewardStreamingTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setStakeDurationDelaySeconds(
      newStakeDurationDelaySeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setStakingRatio(
      newStakingRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTokenUriGenerator(
      newTokenUriGenerator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stakePoolTokens(
      tokenId: PromiseOrValue<BigNumberish>,
      dhedgePoolAddress: PromiseOrValue<string>,
      dhedgePoolAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stakes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        dhtAmount: BigNumber;
        dhtStakeStartTime: BigNumber;
        dhedgePoolAddress: string;
        dhedgePoolAmount: BigNumber;
        dhedgePoolStakeStartTime: BigNumber;
        stakeStartTokenPrice: BigNumber;
        unstaked: boolean;
        unstakeTime: BigNumber;
        reward: BigNumber;
        claimedReward: BigNumber;
        rewardParamsEmissionsRate: BigNumber;
        stakeFinishTokenPrice: BigNumber;
        vdhtAccruedAtUnstake: BigNumber;
        dhedgePoolRemainingExitCooldownAtStakeTime: BigNumber;
      }
    >;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    tokenUriGenerator(overrides?: CallOverrides): Promise<[string]>;

    totalStakingValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unstakeDHT(
      tokenId: PromiseOrValue<BigNumberish>,
      dhtAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unstakePoolTokens(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    vDHTBalanceOf(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { vDHT: BigNumber }>;

    vDHTBalanceOfStake(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { vDHT: BigNumber }>;
  };

  POOL_TOKEN_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

  UNIT(overrides?: CallOverrides): Promise<BigNumber>;

  addDhtToStake(
    tokenId: PromiseOrValue<BigNumberish>,
    dhtAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  aggregateStakeStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  calculateDhtRewardAmount(
    vDHTAmount: PromiseOrValue<BigNumberish>,
    poolTokensStaked: PromiseOrValue<BigNumberish>,
    tokenPriceStart: PromiseOrValue<BigNumberish>,
    tokenPriceFinish: PromiseOrValue<BigNumberish>,
    stakeStartTime: PromiseOrValue<BigNumberish>,
    stakeFinishTime: PromiseOrValue<BigNumberish>,
    stakeEmissionsRate: PromiseOrValue<BigNumberish>,
    rewardParams: IDhedgeStakingV2Storage.RewardParamsStruct,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  calculateMaxVDHTAllowed(
    vDHTAmount: PromiseOrValue<BigNumberish>,
    totalValue: PromiseOrValue<BigNumberish>,
    stakingRatio: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  calculatePerformanceFactor(
    tokenPriceStart: PromiseOrValue<BigNumberish>,
    tokenPriceFinish: PromiseOrValue<BigNumberish>,
    maxPerformanceBoostNumerator: PromiseOrValue<BigNumberish>,
    maxPerformanceBoostDenominator: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  calculateStakeDurationFactor(
    stakeStartTime: PromiseOrValue<BigNumberish>,
    stakeFinishTime: PromiseOrValue<BigNumberish>,
    maxDurationBoostSeconds: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  calculateVDHT(
    stakeStartTime: PromiseOrValue<BigNumberish>,
    dhtAmount: PromiseOrValue<BigNumberish>,
    stakeFinishTime: PromiseOrValue<BigNumberish>,
    maxVDurationTime: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  canClaimAmount(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  checkEnoughDht(claimAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

  claim(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  configurePool(
    pool: PromiseOrValue<string>,
    cap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  currentRewardsForStake(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  dhtAddress(overrides?: CallOverrides): Promise<string>;

  dhtBalanceOf(staker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  dhtCap(overrides?: CallOverrides): Promise<BigNumber>;

  dhtRewarded(overrides?: CallOverrides): Promise<BigNumber>;

  dhtStaked(overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  getPoolConfiguration(
    dhedgePoolAddress: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<IDhedgeStakingV2Storage.PoolConfigurationStructOutput>;

  getStake(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<IDhedgeStakingV2Storage.StakeStructOutput>;

  globalVDHT(overrides?: CallOverrides): Promise<BigNumber>;

  implInitializer(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  initialize(
    _dhtAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  maxStakingValue(overrides?: CallOverrides): Promise<BigNumber>;

  maxVDurationTimeSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  newStake(
    dhtAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  numberOfPoolsConfigured(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  poolConfiguredByIndex(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  rewardParams(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      stakeDurationDelaySeconds: BigNumber;
      maxDurationBoostSeconds: BigNumber;
      maxPerformanceBoostNumerator: BigNumber;
      maxPerformanceBoostDenominator: BigNumber;
      stakingRatio: BigNumber;
      emissionsRate: BigNumber;
      emissionsRateDenominator: BigNumber;
    }
  >;

  rewardStreamingTime(overrides?: CallOverrides): Promise<BigNumber>;

  'safeTransferFrom(address,address,uint256)'(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'safeTransferFrom(address,address,uint256,bytes)'(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDHTCap(
    newDHTCap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setEmissionsRate(
    newEmissionsRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxDurationBoostSeconds(
    newMaxDurationBoostSeconds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxPerformanceBoostNumerator(
    newMaxPerformanceBoostNumerator: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxVDurationTimeSeconds(
    newMaxVDurationTimeSeconds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setRewardStreamingTime(
    newRewardStreamingTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setStakeDurationDelaySeconds(
    newStakeDurationDelaySeconds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setStakingRatio(
    newStakingRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTokenUriGenerator(
    newTokenUriGenerator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stakePoolTokens(
    tokenId: PromiseOrValue<BigNumberish>,
    dhedgePoolAddress: PromiseOrValue<string>,
    dhedgePoolAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stakes(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
    ] & {
      dhtAmount: BigNumber;
      dhtStakeStartTime: BigNumber;
      dhedgePoolAddress: string;
      dhedgePoolAmount: BigNumber;
      dhedgePoolStakeStartTime: BigNumber;
      stakeStartTokenPrice: BigNumber;
      unstaked: boolean;
      unstakeTime: BigNumber;
      reward: BigNumber;
      claimedReward: BigNumber;
      rewardParamsEmissionsRate: BigNumber;
      stakeFinishTokenPrice: BigNumber;
      vdhtAccruedAtUnstake: BigNumber;
      dhedgePoolRemainingExitCooldownAtStakeTime: BigNumber;
    }
  >;

  supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  tokenUriGenerator(overrides?: CallOverrides): Promise<string>;

  totalStakingValue(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unstakeDHT(
    tokenId: PromiseOrValue<BigNumberish>,
    dhtAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unstakePoolTokens(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  vDHTBalanceOf(staker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  vDHTBalanceOfStake(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    POOL_TOKEN_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    addDhtToStake(
      tokenId: PromiseOrValue<BigNumberish>,
      dhtAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    aggregateStakeStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    calculateDhtRewardAmount(
      vDHTAmount: PromiseOrValue<BigNumberish>,
      poolTokensStaked: PromiseOrValue<BigNumberish>,
      tokenPriceStart: PromiseOrValue<BigNumberish>,
      tokenPriceFinish: PromiseOrValue<BigNumberish>,
      stakeStartTime: PromiseOrValue<BigNumberish>,
      stakeFinishTime: PromiseOrValue<BigNumberish>,
      stakeEmissionsRate: PromiseOrValue<BigNumberish>,
      rewardParams: IDhedgeStakingV2Storage.RewardParamsStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calculateMaxVDHTAllowed(
      vDHTAmount: PromiseOrValue<BigNumberish>,
      totalValue: PromiseOrValue<BigNumberish>,
      stakingRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calculatePerformanceFactor(
      tokenPriceStart: PromiseOrValue<BigNumberish>,
      tokenPriceFinish: PromiseOrValue<BigNumberish>,
      maxPerformanceBoostNumerator: PromiseOrValue<BigNumberish>,
      maxPerformanceBoostDenominator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calculateStakeDurationFactor(
      stakeStartTime: PromiseOrValue<BigNumberish>,
      stakeFinishTime: PromiseOrValue<BigNumberish>,
      maxDurationBoostSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calculateVDHT(
      stakeStartTime: PromiseOrValue<BigNumberish>,
      dhtAmount: PromiseOrValue<BigNumberish>,
      stakeFinishTime: PromiseOrValue<BigNumberish>,
      maxVDurationTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    canClaimAmount(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    checkEnoughDht(claimAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    claim(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    configurePool(
      pool: PromiseOrValue<string>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    currentRewardsForStake(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    dhtAddress(overrides?: CallOverrides): Promise<string>;

    dhtBalanceOf(staker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    dhtCap(overrides?: CallOverrides): Promise<BigNumber>;

    dhtRewarded(overrides?: CallOverrides): Promise<BigNumber>;

    dhtStaked(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    getPoolConfiguration(
      dhedgePoolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<IDhedgeStakingV2Storage.PoolConfigurationStructOutput>;

    getStake(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<IDhedgeStakingV2Storage.StakeStructOutput>;

    globalVDHT(overrides?: CallOverrides): Promise<BigNumber>;

    implInitializer(overrides?: CallOverrides): Promise<void>;

    initialize(_dhtAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    maxStakingValue(overrides?: CallOverrides): Promise<BigNumber>;

    maxVDurationTimeSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    newStake(dhtAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    numberOfPoolsConfigured(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    poolConfiguredByIndex(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardParams(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        stakeDurationDelaySeconds: BigNumber;
        maxDurationBoostSeconds: BigNumber;
        maxPerformanceBoostNumerator: BigNumber;
        maxPerformanceBoostDenominator: BigNumber;
        stakingRatio: BigNumber;
        emissionsRate: BigNumber;
        emissionsRateDenominator: BigNumber;
      }
    >;

    rewardStreamingTime(overrides?: CallOverrides): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDHTCap(newDHTCap: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setEmissionsRate(newEmissionsRate: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setMaxDurationBoostSeconds(
      newMaxDurationBoostSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMaxPerformanceBoostNumerator(
      newMaxPerformanceBoostNumerator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMaxVDurationTimeSeconds(
      newMaxVDurationTimeSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setRewardStreamingTime(
      newRewardStreamingTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setStakeDurationDelaySeconds(
      newStakeDurationDelaySeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setStakingRatio(newStakingRatio: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setTokenUriGenerator(newTokenUriGenerator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    stakePoolTokens(
      tokenId: PromiseOrValue<BigNumberish>,
      dhedgePoolAddress: PromiseOrValue<string>,
      dhedgePoolAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    stakes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        dhtAmount: BigNumber;
        dhtStakeStartTime: BigNumber;
        dhedgePoolAddress: string;
        dhedgePoolAmount: BigNumber;
        dhedgePoolStakeStartTime: BigNumber;
        stakeStartTokenPrice: BigNumber;
        unstaked: boolean;
        unstakeTime: BigNumber;
        reward: BigNumber;
        claimedReward: BigNumber;
        rewardParamsEmissionsRate: BigNumber;
        stakeFinishTokenPrice: BigNumber;
        vdhtAccruedAtUnstake: BigNumber;
        dhedgePoolRemainingExitCooldownAtStakeTime: BigNumber;
      }
    >;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    tokenUriGenerator(overrides?: CallOverrides): Promise<string>;

    totalStakingValue(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    unstakeDHT(
      tokenId: PromiseOrValue<BigNumberish>,
      dhtAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    unstakePoolTokens(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    vDHTBalanceOf(staker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    vDHTBalanceOfStake(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'AddDHTToStake(uint256,uint256)'(tokenId?: null, dhtAmount?: null): AddDHTToStakeEventFilter;
    AddDHTToStake(tokenId?: null, dhtAmount?: null): AddDHTToStakeEventFilter;

    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
    ): ApprovalEventFilter;

    'ApprovalForAll(address,address,bool)'(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null,
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null,
    ): ApprovalForAllEventFilter;

    'Claim(uint256,uint256)'(tokenId?: null, claimAmount?: null): ClaimEventFilter;
    Claim(tokenId?: null, claimAmount?: null): ClaimEventFilter;

    'NewStake(uint256,uint256)'(tokenId?: null, dhtAmount?: null): NewStakeEventFilter;
    NewStake(tokenId?: null, dhtAmount?: null): NewStakeEventFilter;

    'OwnerOperation(string)'(operation?: null): OwnerOperationEventFilter;
    OwnerOperation(operation?: null): OwnerOperationEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'StakePoolTokens(uint256,address,uint256)'(
      tokenId?: null,
      dhedgePoolAddress?: null,
      poolTokenAmount?: null,
    ): StakePoolTokensEventFilter;
    StakePoolTokens(tokenId?: null, dhedgePoolAddress?: null, poolTokenAmount?: null): StakePoolTokensEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
    ): TransferEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'UnstakeDHT(uint256)'(tokenId?: null): UnstakeDHTEventFilter;
    UnstakeDHT(tokenId?: null): UnstakeDHTEventFilter;

    'UnstakePoolTokens(uint256,uint256)'(tokenId?: null, newTokedId?: null): UnstakePoolTokensEventFilter;
    UnstakePoolTokens(tokenId?: null, newTokedId?: null): UnstakePoolTokensEventFilter;
  };

  estimateGas: {
    POOL_TOKEN_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    addDhtToStake(
      tokenId: PromiseOrValue<BigNumberish>,
      dhtAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    aggregateStakeStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    calculateDhtRewardAmount(
      vDHTAmount: PromiseOrValue<BigNumberish>,
      poolTokensStaked: PromiseOrValue<BigNumberish>,
      tokenPriceStart: PromiseOrValue<BigNumberish>,
      tokenPriceFinish: PromiseOrValue<BigNumberish>,
      stakeStartTime: PromiseOrValue<BigNumberish>,
      stakeFinishTime: PromiseOrValue<BigNumberish>,
      stakeEmissionsRate: PromiseOrValue<BigNumberish>,
      rewardParams: IDhedgeStakingV2Storage.RewardParamsStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calculateMaxVDHTAllowed(
      vDHTAmount: PromiseOrValue<BigNumberish>,
      totalValue: PromiseOrValue<BigNumberish>,
      stakingRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calculatePerformanceFactor(
      tokenPriceStart: PromiseOrValue<BigNumberish>,
      tokenPriceFinish: PromiseOrValue<BigNumberish>,
      maxPerformanceBoostNumerator: PromiseOrValue<BigNumberish>,
      maxPerformanceBoostDenominator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calculateStakeDurationFactor(
      stakeStartTime: PromiseOrValue<BigNumberish>,
      stakeFinishTime: PromiseOrValue<BigNumberish>,
      maxDurationBoostSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calculateVDHT(
      stakeStartTime: PromiseOrValue<BigNumberish>,
      dhtAmount: PromiseOrValue<BigNumberish>,
      stakeFinishTime: PromiseOrValue<BigNumberish>,
      maxVDurationTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    canClaimAmount(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    checkEnoughDht(claimAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    configurePool(
      pool: PromiseOrValue<string>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    currentRewardsForStake(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    dhtAddress(overrides?: CallOverrides): Promise<BigNumber>;

    dhtBalanceOf(staker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    dhtCap(overrides?: CallOverrides): Promise<BigNumber>;

    dhtRewarded(overrides?: CallOverrides): Promise<BigNumber>;

    dhtStaked(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getPoolConfiguration(dhedgePoolAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getStake(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    globalVDHT(overrides?: CallOverrides): Promise<BigNumber>;

    implInitializer(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    initialize(
      _dhtAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    maxStakingValue(overrides?: CallOverrides): Promise<BigNumber>;

    maxVDurationTimeSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    newStake(
      dhtAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    numberOfPoolsConfigured(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    poolConfiguredByIndex(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    rewardParams(overrides?: CallOverrides): Promise<BigNumber>;

    rewardStreamingTime(overrides?: CallOverrides): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDHTCap(
      newDHTCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setEmissionsRate(
      newEmissionsRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxDurationBoostSeconds(
      newMaxDurationBoostSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxPerformanceBoostNumerator(
      newMaxPerformanceBoostNumerator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxVDurationTimeSeconds(
      newMaxVDurationTimeSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setRewardStreamingTime(
      newRewardStreamingTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setStakeDurationDelaySeconds(
      newStakeDurationDelaySeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setStakingRatio(
      newStakingRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTokenUriGenerator(
      newTokenUriGenerator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stakePoolTokens(
      tokenId: PromiseOrValue<BigNumberish>,
      dhedgePoolAddress: PromiseOrValue<string>,
      dhedgePoolAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stakes(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    tokenUriGenerator(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakingValue(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unstakeDHT(
      tokenId: PromiseOrValue<BigNumberish>,
      dhtAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unstakePoolTokens(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    vDHTBalanceOf(staker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    vDHTBalanceOfStake(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    POOL_TOKEN_UNIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addDhtToStake(
      tokenId: PromiseOrValue<BigNumberish>,
      dhtAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    aggregateStakeStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateDhtRewardAmount(
      vDHTAmount: PromiseOrValue<BigNumberish>,
      poolTokensStaked: PromiseOrValue<BigNumberish>,
      tokenPriceStart: PromiseOrValue<BigNumberish>,
      tokenPriceFinish: PromiseOrValue<BigNumberish>,
      stakeStartTime: PromiseOrValue<BigNumberish>,
      stakeFinishTime: PromiseOrValue<BigNumberish>,
      stakeEmissionsRate: PromiseOrValue<BigNumberish>,
      rewardParams: IDhedgeStakingV2Storage.RewardParamsStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    calculateMaxVDHTAllowed(
      vDHTAmount: PromiseOrValue<BigNumberish>,
      totalValue: PromiseOrValue<BigNumberish>,
      stakingRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    calculatePerformanceFactor(
      tokenPriceStart: PromiseOrValue<BigNumberish>,
      tokenPriceFinish: PromiseOrValue<BigNumberish>,
      maxPerformanceBoostNumerator: PromiseOrValue<BigNumberish>,
      maxPerformanceBoostDenominator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    calculateStakeDurationFactor(
      stakeStartTime: PromiseOrValue<BigNumberish>,
      stakeFinishTime: PromiseOrValue<BigNumberish>,
      maxDurationBoostSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    calculateVDHT(
      stakeStartTime: PromiseOrValue<BigNumberish>,
      dhtAmount: PromiseOrValue<BigNumberish>,
      stakeFinishTime: PromiseOrValue<BigNumberish>,
      maxVDurationTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    canClaimAmount(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkEnoughDht(claimAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    configurePool(
      pool: PromiseOrValue<string>,
      cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    currentRewardsForStake(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    dhtAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dhtBalanceOf(staker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dhtCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dhtRewarded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dhtStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolConfiguration(
      dhedgePoolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getStake(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    globalVDHT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    implInitializer(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    initialize(
      _dhtAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    maxStakingValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxVDurationTimeSeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newStake(
      dhtAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    numberOfPoolsConfigured(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolConfiguredByIndex(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    rewardParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardStreamingTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDHTCap(
      newDHTCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setEmissionsRate(
      newEmissionsRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxDurationBoostSeconds(
      newMaxDurationBoostSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxPerformanceBoostNumerator(
      newMaxPerformanceBoostNumerator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxVDurationTimeSeconds(
      newMaxVDurationTimeSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setRewardStreamingTime(
      newRewardStreamingTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setStakeDurationDelaySeconds(
      newStakeDurationDelaySeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setStakingRatio(
      newStakingRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTokenUriGenerator(
      newTokenUriGenerator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stakePoolTokens(
      tokenId: PromiseOrValue<BigNumberish>,
      dhedgePoolAddress: PromiseOrValue<string>,
      dhedgePoolAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stakes(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenUriGenerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakingValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unstakeDHT(
      tokenId: PromiseOrValue<BigNumberish>,
      dhtAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unstakePoolTokens(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    vDHTBalanceOf(staker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vDHTBalanceOfStake(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
