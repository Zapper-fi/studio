/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace PoolLogic {
  export type WithdrawnAssetStruct = {
    asset: string;
    amount: BigNumberish;
    externalWithdrawProcessed: boolean;
  };

  export type WithdrawnAssetStructOutput = [string, BigNumber, boolean] & {
    asset: string;
    amount: BigNumber;
    externalWithdrawProcessed: boolean;
  };
}

export interface DhedgePoolInterface extends utils.Interface {
  functions: {
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'availableManagerFee()': FunctionFragment;
    'availableManagerFeeAndTotalFundValue()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'creationTime()': FunctionFragment;
    'creator()': FunctionFragment;
    'decimals()': FunctionFragment;
    'decreaseAllowance(address,uint256)': FunctionFragment;
    'deposit(address,uint256)': FunctionFragment;
    'execTransaction(address,bytes)': FunctionFragment;
    'executeOperation(address[],uint256[],uint256[],address,bytes)': FunctionFragment;
    'factory()': FunctionFragment;
    'getExitCooldown()': FunctionFragment;
    'getExitRemainingCooldown(address)': FunctionFragment;
    'getFundSummary()': FunctionFragment;
    'getWithdrawSingleMax(address)': FunctionFragment;
    'increaseAllowance(address,uint256)': FunctionFragment;
    'initialize(address,bool,string,string)': FunctionFragment;
    'isMemberAllowed(address)': FunctionFragment;
    'lastDeposit(address)': FunctionFragment;
    'lastWhitelistTransfer(address)': FunctionFragment;
    'managerName()': FunctionFragment;
    'mintManagerFee()': FunctionFragment;
    'name()': FunctionFragment;
    'poolManagerLogic()': FunctionFragment;
    'privatePool()': FunctionFragment;
    'setPoolManagerLogic(address)': FunctionFragment;
    'setPoolPrivate(bool)': FunctionFragment;
    'symbol()': FunctionFragment;
    'tokenPrice()': FunctionFragment;
    'tokenPriceAtLastFeeMint()': FunctionFragment;
    'tokenPriceWithoutManagerFee()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdrawSingle(uint256,address)': FunctionFragment;
    'withdrawTo(address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'allowance'
      | 'approve'
      | 'availableManagerFee'
      | 'availableManagerFeeAndTotalFundValue'
      | 'balanceOf'
      | 'creationTime'
      | 'creator'
      | 'decimals'
      | 'decreaseAllowance'
      | 'deposit'
      | 'execTransaction'
      | 'executeOperation'
      | 'factory'
      | 'getExitCooldown'
      | 'getExitRemainingCooldown'
      | 'getFundSummary'
      | 'getWithdrawSingleMax'
      | 'increaseAllowance'
      | 'initialize'
      | 'isMemberAllowed'
      | 'lastDeposit'
      | 'lastWhitelistTransfer'
      | 'managerName'
      | 'mintManagerFee'
      | 'name'
      | 'poolManagerLogic'
      | 'privatePool'
      | 'setPoolManagerLogic'
      | 'setPoolPrivate'
      | 'symbol'
      | 'tokenPrice'
      | 'tokenPriceAtLastFeeMint'
      | 'tokenPriceWithoutManagerFee'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'withdraw'
      | 'withdrawSingle'
      | 'withdrawTo',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'availableManagerFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'availableManagerFeeAndTotalFundValue', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'creationTime', values?: undefined): string;
  encodeFunctionData(functionFragment: 'creator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decreaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'deposit', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'execTransaction', values: [string, BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'executeOperation',
    values: [string[], BigNumberish[], BigNumberish[], string, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getExitCooldown', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getExitRemainingCooldown', values: [string]): string;
  encodeFunctionData(functionFragment: 'getFundSummary', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getWithdrawSingleMax', values: [string]): string;
  encodeFunctionData(functionFragment: 'increaseAllowance', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string, boolean, string, string]): string;
  encodeFunctionData(functionFragment: 'isMemberAllowed', values: [string]): string;
  encodeFunctionData(functionFragment: 'lastDeposit', values: [string]): string;
  encodeFunctionData(functionFragment: 'lastWhitelistTransfer', values: [string]): string;
  encodeFunctionData(functionFragment: 'managerName', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mintManagerFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolManagerLogic', values?: undefined): string;
  encodeFunctionData(functionFragment: 'privatePool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setPoolManagerLogic', values: [string]): string;
  encodeFunctionData(functionFragment: 'setPoolPrivate', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenPrice', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenPriceAtLastFeeMint', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenPriceWithoutManagerFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawSingle', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'withdrawTo', values: [string, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'availableManagerFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'availableManagerFeeAndTotalFundValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'creationTime', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'creator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'execTransaction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'executeOperation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getExitCooldown', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getExitRemainingCooldown', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFundSummary', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getWithdrawSingleMax', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isMemberAllowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastWhitelistTransfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'managerName', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintManagerFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolManagerLogic', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'privatePool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPoolManagerLogic', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPoolPrivate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenPriceAtLastFeeMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenPriceWithoutManagerFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawSingle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawTo', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Deposit(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'ManagerFeeMinted(address,address,uint256,uint256,uint256,uint256)': EventFragment;
    'PoolManagerLogicSet(address,address)': EventFragment;
    'PoolPrivacyUpdated(bool)': EventFragment;
    'TransactionExecuted(address,address,uint16,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Withdrawal(address,address,uint256,uint256,uint256,uint256,uint256,tuple[],uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ManagerFeeMinted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolManagerLogicSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolPrivacyUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransactionExecuted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdrawal'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DepositEventObject {
  fundAddress: string;
  investor: string;
  assetDeposited: string;
  amountDeposited: BigNumber;
  valueDeposited: BigNumber;
  fundTokensReceived: BigNumber;
  totalInvestorFundTokens: BigNumber;
  fundValue: BigNumber;
  totalSupply: BigNumber;
  time: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface ManagerFeeMintedEventObject {
  pool: string;
  manager: string;
  available: BigNumber;
  daoFee: BigNumber;
  managerFee: BigNumber;
  tokenPriceAtLastFeeMint: BigNumber;
}
export type ManagerFeeMintedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  ManagerFeeMintedEventObject
>;

export type ManagerFeeMintedEventFilter = TypedEventFilter<ManagerFeeMintedEvent>;

export interface PoolManagerLogicSetEventObject {
  poolManagerLogic: string;
  from: string;
}
export type PoolManagerLogicSetEvent = TypedEvent<[string, string], PoolManagerLogicSetEventObject>;

export type PoolManagerLogicSetEventFilter = TypedEventFilter<PoolManagerLogicSetEvent>;

export interface PoolPrivacyUpdatedEventObject {
  isPoolPrivate: boolean;
}
export type PoolPrivacyUpdatedEvent = TypedEvent<[boolean], PoolPrivacyUpdatedEventObject>;

export type PoolPrivacyUpdatedEventFilter = TypedEventFilter<PoolPrivacyUpdatedEvent>;

export interface TransactionExecutedEventObject {
  pool: string;
  manager: string;
  transactionType: number;
  time: BigNumber;
}
export type TransactionExecutedEvent = TypedEvent<[string, string, number, BigNumber], TransactionExecutedEventObject>;

export type TransactionExecutedEventFilter = TypedEventFilter<TransactionExecutedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawalEventObject {
  fundAddress: string;
  investor: string;
  valueWithdrawn: BigNumber;
  fundTokensWithdrawn: BigNumber;
  totalInvestorFundTokens: BigNumber;
  fundValue: BigNumber;
  totalSupply: BigNumber;
  withdrawnAssets: PoolLogic.WithdrawnAssetStructOutput[];
  time: BigNumber;
}
export type WithdrawalEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    PoolLogic.WithdrawnAssetStructOutput[],
    BigNumber,
  ],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface DhedgePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DhedgePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    availableManagerFee(overrides?: CallOverrides): Promise<[BigNumber] & { fee: BigNumber }>;

    availableManagerFeeAndTotalFundValue(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { fee: BigNumber; fundValue: BigNumber }>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    creationTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    creator(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deposit(
      _asset: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    execTransaction(
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      originator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getExitCooldown(overrides?: CallOverrides): Promise<[BigNumber] & { exitCooldown: BigNumber }>;

    getExitRemainingCooldown(
      sender: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { remaining: BigNumber }>;

    getFundSummary(
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, string, string, BigNumber, boolean, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    getWithdrawSingleMax(
      _asset: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { fundTokenAmount: BigNumber }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _factory: string,
      _privatePool: boolean,
      _fundName: string,
      _fundSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isMemberAllowed(member: string, overrides?: CallOverrides): Promise<[boolean]>;

    lastDeposit(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    lastWhitelistTransfer(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    managerName(overrides?: CallOverrides): Promise<[string] & { _managerName: string }>;

    mintManagerFee(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    poolManagerLogic(overrides?: CallOverrides): Promise<[string]>;

    privatePool(overrides?: CallOverrides): Promise<[boolean]>;

    setPoolManagerLogic(
      _poolManagerLogic: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPoolPrivate(
      _privatePool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenPrice(overrides?: CallOverrides): Promise<[BigNumber] & { price: BigNumber }>;

    tokenPriceAtLastFeeMint(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenPriceWithoutManagerFee(overrides?: CallOverrides): Promise<[BigNumber] & { price: BigNumber }>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      _fundTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawSingle(
      _fundTokenAmount: BigNumberish,
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdrawTo(
      _recipient: string,
      _fundTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  availableManagerFee(overrides?: CallOverrides): Promise<BigNumber>;

  availableManagerFeeAndTotalFundValue(
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { fee: BigNumber; fundValue: BigNumber }>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  creationTime(overrides?: CallOverrides): Promise<BigNumber>;

  creator(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  deposit(
    _asset: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  execTransaction(
    to: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  executeOperation(
    assets: string[],
    amounts: BigNumberish[],
    premiums: BigNumberish[],
    originator: string,
    params: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  getExitCooldown(overrides?: CallOverrides): Promise<BigNumber>;

  getExitRemainingCooldown(sender: string, overrides?: CallOverrides): Promise<BigNumber>;

  getFundSummary(
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, BigNumber, string, string, BigNumber, boolean, BigNumber, BigNumber, BigNumber, BigNumber]
  >;

  getWithdrawSingleMax(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _factory: string,
    _privatePool: boolean,
    _fundName: string,
    _fundSymbol: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isMemberAllowed(member: string, overrides?: CallOverrides): Promise<boolean>;

  lastDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  lastWhitelistTransfer(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  managerName(overrides?: CallOverrides): Promise<string>;

  mintManagerFee(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  poolManagerLogic(overrides?: CallOverrides): Promise<string>;

  privatePool(overrides?: CallOverrides): Promise<boolean>;

  setPoolManagerLogic(
    _poolManagerLogic: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPoolPrivate(
    _privatePool: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  tokenPriceAtLastFeeMint(overrides?: CallOverrides): Promise<BigNumber>;

  tokenPriceWithoutManagerFee(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    _fundTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawSingle(
    _fundTokenAmount: BigNumberish,
    _asset: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdrawTo(
    _recipient: string,
    _fundTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    availableManagerFee(overrides?: CallOverrides): Promise<BigNumber>;

    availableManagerFeeAndTotalFundValue(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { fee: BigNumber; fundValue: BigNumber }>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    creationTime(overrides?: CallOverrides): Promise<BigNumber>;

    creator(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    deposit(_asset: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    execTransaction(to: string, data: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      originator: string,
      params: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    factory(overrides?: CallOverrides): Promise<string>;

    getExitCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    getExitRemainingCooldown(sender: string, overrides?: CallOverrides): Promise<BigNumber>;

    getFundSummary(
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, BigNumber, string, string, BigNumber, boolean, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    getWithdrawSingleMax(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _factory: string,
      _privatePool: boolean,
      _fundName: string,
      _fundSymbol: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    isMemberAllowed(member: string, overrides?: CallOverrides): Promise<boolean>;

    lastDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastWhitelistTransfer(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    managerName(overrides?: CallOverrides): Promise<string>;

    mintManagerFee(overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    poolManagerLogic(overrides?: CallOverrides): Promise<string>;

    privatePool(overrides?: CallOverrides): Promise<boolean>;

    setPoolManagerLogic(_poolManagerLogic: string, overrides?: CallOverrides): Promise<boolean>;

    setPoolPrivate(_privatePool: boolean, overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPriceAtLastFeeMint(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPriceWithoutManagerFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(sender: string, recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    withdraw(_fundTokenAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawSingle(_fundTokenAmount: BigNumberish, _asset: string, overrides?: CallOverrides): Promise<void>;

    withdrawTo(_recipient: string, _fundTokenAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      spender?: string | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;

    'Deposit(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)'(
      fundAddress?: null,
      investor?: null,
      assetDeposited?: null,
      amountDeposited?: null,
      valueDeposited?: null,
      fundTokensReceived?: null,
      totalInvestorFundTokens?: null,
      fundValue?: null,
      totalSupply?: null,
      time?: null,
    ): DepositEventFilter;
    Deposit(
      fundAddress?: null,
      investor?: null,
      assetDeposited?: null,
      amountDeposited?: null,
      valueDeposited?: null,
      fundTokensReceived?: null,
      totalInvestorFundTokens?: null,
      fundValue?: null,
      totalSupply?: null,
      time?: null,
    ): DepositEventFilter;

    'ManagerFeeMinted(address,address,uint256,uint256,uint256,uint256)'(
      pool?: null,
      manager?: null,
      available?: null,
      daoFee?: null,
      managerFee?: null,
      tokenPriceAtLastFeeMint?: null,
    ): ManagerFeeMintedEventFilter;
    ManagerFeeMinted(
      pool?: null,
      manager?: null,
      available?: null,
      daoFee?: null,
      managerFee?: null,
      tokenPriceAtLastFeeMint?: null,
    ): ManagerFeeMintedEventFilter;

    'PoolManagerLogicSet(address,address)'(poolManagerLogic?: null, from?: null): PoolManagerLogicSetEventFilter;
    PoolManagerLogicSet(poolManagerLogic?: null, from?: null): PoolManagerLogicSetEventFilter;

    'PoolPrivacyUpdated(bool)'(isPoolPrivate?: null): PoolPrivacyUpdatedEventFilter;
    PoolPrivacyUpdated(isPoolPrivate?: null): PoolPrivacyUpdatedEventFilter;

    'TransactionExecuted(address,address,uint16,uint256)'(
      pool?: null,
      manager?: null,
      transactionType?: null,
      time?: null,
    ): TransactionExecutedEventFilter;
    TransactionExecuted(
      pool?: null,
      manager?: null,
      transactionType?: null,
      time?: null,
    ): TransactionExecutedEventFilter;

    'Transfer(address,address,uint256)'(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;

    'Withdrawal(address,address,uint256,uint256,uint256,uint256,uint256,tuple[],uint256)'(
      fundAddress?: null,
      investor?: null,
      valueWithdrawn?: null,
      fundTokensWithdrawn?: null,
      totalInvestorFundTokens?: null,
      fundValue?: null,
      totalSupply?: null,
      withdrawnAssets?: null,
      time?: null,
    ): WithdrawalEventFilter;
    Withdrawal(
      fundAddress?: null,
      investor?: null,
      valueWithdrawn?: null,
      fundTokensWithdrawn?: null,
      totalInvestorFundTokens?: null,
      fundValue?: null,
      totalSupply?: null,
      withdrawnAssets?: null,
      time?: null,
    ): WithdrawalEventFilter;
  };

  estimateGas: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    availableManagerFee(overrides?: CallOverrides): Promise<BigNumber>;

    availableManagerFeeAndTotalFundValue(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    creationTime(overrides?: CallOverrides): Promise<BigNumber>;

    creator(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    deposit(
      _asset: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    execTransaction(
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      originator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getExitCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    getExitRemainingCooldown(sender: string, overrides?: CallOverrides): Promise<BigNumber>;

    getFundSummary(overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawSingleMax(_asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initialize(
      _factory: string,
      _privatePool: boolean,
      _fundName: string,
      _fundSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isMemberAllowed(member: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastWhitelistTransfer(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    managerName(overrides?: CallOverrides): Promise<BigNumber>;

    mintManagerFee(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    poolManagerLogic(overrides?: CallOverrides): Promise<BigNumber>;

    privatePool(overrides?: CallOverrides): Promise<BigNumber>;

    setPoolManagerLogic(
      _poolManagerLogic: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setPoolPrivate(
      _privatePool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPriceAtLastFeeMint(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPriceWithoutManagerFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdraw(
      _fundTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawSingle(
      _fundTokenAmount: BigNumberish,
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdrawTo(
      _recipient: string,
      _fundTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    availableManagerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    availableManagerFeeAndTotalFundValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creationTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      _asset: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    execTransaction(
      to: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    executeOperation(
      assets: string[],
      amounts: BigNumberish[],
      premiums: BigNumberish[],
      originator: string,
      params: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExitCooldown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExitRemainingCooldown(sender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFundSummary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWithdrawSingleMax(_asset: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _factory: string,
      _privatePool: boolean,
      _fundName: string,
      _fundSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isMemberAllowed(member: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastDeposit(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastWhitelistTransfer(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managerName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintManagerFee(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolManagerLogic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    privatePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPoolManagerLogic(
      _poolManagerLogic: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPoolPrivate(
      _privatePool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenPriceAtLastFeeMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenPriceWithoutManagerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      _fundTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawSingle(
      _fundTokenAmount: BigNumberish,
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdrawTo(
      _recipient: string,
      _fundTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
