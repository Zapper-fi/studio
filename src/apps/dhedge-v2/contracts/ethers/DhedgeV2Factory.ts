/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace IHasSupportedAsset {
  export type AssetStruct = {
    asset: PromiseOrValue<string>;
    isDeposit: PromiseOrValue<boolean>;
  };

  export type AssetStructOutput = [string, boolean] & {
    asset: string;
    isDeposit: boolean;
  };
}

export interface DhedgeV2FactoryInterface extends utils.Interface {
  functions: {
    'addCustomCooldownWhitelist(address)': FunctionFragment;
    'createFund(bool,address,string,string,string,uint256,uint256,(address,bool)[])': FunctionFragment;
    'customCooldownWhitelist(address)': FunctionFragment;
    'daoAddress()': FunctionFragment;
    'deploy(bytes,uint8)': FunctionFragment;
    'deployedFunds(uint256)': FunctionFragment;
    'emitPoolEvent()': FunctionFragment;
    'emitPoolManagerEvent()': FunctionFragment;
    'getAddress(bytes32)': FunctionFragment;
    'getAssetGuard(address)': FunctionFragment;
    'getAssetHandler()': FunctionFragment;
    'getAssetPrice(address)': FunctionFragment;
    'getAssetType(address)': FunctionFragment;
    'getContractGuard(address)': FunctionFragment;
    'getDaoFee()': FunctionFragment;
    'getDeployedFunds()': FunctionFragment;
    'getExitCooldown()': FunctionFragment;
    'getExitFee()': FunctionFragment;
    'getInvestedPools(address)': FunctionFragment;
    'getLogic(uint8)': FunctionFragment;
    'getManagedPools(address)': FunctionFragment;
    'getMaximumFee()': FunctionFragment;
    'getMaximumSupportedAssetCount()': FunctionFragment;
    'governanceAddress()': FunctionFragment;
    'implInitializer()': FunctionFragment;
    'initialize(address,address,address,address,address)': FunctionFragment;
    'isPaused()': FunctionFragment;
    'isPool(address)': FunctionFragment;
    'isValidAsset(address)': FunctionFragment;
    'maximumPerformanceFeeNumeratorChange()': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'performanceFeeNumeratorChangeDelay()': FunctionFragment;
    'poolPerformanceAddress()': FunctionFragment;
    'poolStorageVersion()': FunctionFragment;
    'poolVersion(address)': FunctionFragment;
    'removeCustomCooldownWhitelist(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setAssetHandler(address)': FunctionFragment;
    'setDAOAddress(address)': FunctionFragment;
    'setDaoFee(uint256,uint256)': FunctionFragment;
    'setExitCooldown(uint256)': FunctionFragment;
    'setExitFee(uint256,uint256)': FunctionFragment;
    'setGovernanceAddress(address)': FunctionFragment;
    'setLogic(address,address)': FunctionFragment;
    'setMaximumFee(uint256,uint256)': FunctionFragment;
    'setMaximumPerformanceFeeNumeratorChange(uint256)': FunctionFragment;
    'setMaximumSupportedAssetCount(uint256)': FunctionFragment;
    'setPerformanceFeeNumeratorChangeDelay(uint256)': FunctionFragment;
    'setPoolPerformanceAddress(address)': FunctionFragment;
    'setPoolStorageVersion(uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unpause()': FunctionFragment;
    'upgradePoolBatch(uint256,uint256,uint256,bytes[])': FunctionFragment;
    'upgradePoolBatch(uint256,uint256,uint256,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addCustomCooldownWhitelist'
      | 'createFund'
      | 'customCooldownWhitelist'
      | 'daoAddress'
      | 'deploy'
      | 'deployedFunds'
      | 'emitPoolEvent'
      | 'emitPoolManagerEvent'
      | 'getAddress'
      | 'getAssetGuard'
      | 'getAssetHandler'
      | 'getAssetPrice'
      | 'getAssetType'
      | 'getContractGuard'
      | 'getDaoFee'
      | 'getDeployedFunds'
      | 'getExitCooldown'
      | 'getExitFee'
      | 'getInvestedPools'
      | 'getLogic'
      | 'getManagedPools'
      | 'getMaximumFee'
      | 'getMaximumSupportedAssetCount'
      | 'governanceAddress'
      | 'implInitializer'
      | 'initialize'
      | 'isPaused'
      | 'isPool'
      | 'isValidAsset'
      | 'maximumPerformanceFeeNumeratorChange'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'performanceFeeNumeratorChangeDelay'
      | 'poolPerformanceAddress'
      | 'poolStorageVersion'
      | 'poolVersion'
      | 'removeCustomCooldownWhitelist'
      | 'renounceOwnership'
      | 'setAssetHandler'
      | 'setDAOAddress'
      | 'setDaoFee'
      | 'setExitCooldown'
      | 'setExitFee'
      | 'setGovernanceAddress'
      | 'setLogic'
      | 'setMaximumFee'
      | 'setMaximumPerformanceFeeNumeratorChange'
      | 'setMaximumSupportedAssetCount'
      | 'setPerformanceFeeNumeratorChangeDelay'
      | 'setPoolPerformanceAddress'
      | 'setPoolStorageVersion'
      | 'transferOwnership'
      | 'unpause'
      | 'upgradePoolBatch(uint256,uint256,uint256,bytes[])'
      | 'upgradePoolBatch(uint256,uint256,uint256,bytes)',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'addCustomCooldownWhitelist', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'createFund',
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IHasSupportedAsset.AssetStruct[],
    ],
  ): string;
  encodeFunctionData(functionFragment: 'customCooldownWhitelist', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'daoAddress', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'deploy',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'deployedFunds', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'emitPoolEvent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'emitPoolManagerEvent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAddress', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'getAssetGuard', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAssetHandler', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAssetPrice', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAssetType', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getContractGuard', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getDaoFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getDeployedFunds', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getExitCooldown', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getExitFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getInvestedPools', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getLogic', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getManagedPools', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getMaximumFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getMaximumSupportedAssetCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'governanceAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'implInitializer', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'isPaused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isPool', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isValidAsset', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maximumPerformanceFeeNumeratorChange', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'performanceFeeNumeratorChangeDelay', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolPerformanceAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolStorageVersion', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolVersion', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'removeCustomCooldownWhitelist', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setAssetHandler', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setDAOAddress', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setDaoFee',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setExitCooldown', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setExitFee',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setGovernanceAddress', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setLogic', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'setMaximumFee',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setMaximumPerformanceFeeNumeratorChange',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setMaximumSupportedAssetCount', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setPerformanceFeeNumeratorChangeDelay',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setPoolPerformanceAddress', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setPoolStorageVersion', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'upgradePoolBatch(uint256,uint256,uint256,bytes[])',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'upgradePoolBatch(uint256,uint256,uint256,bytes)',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;

  decodeFunctionResult(functionFragment: 'addCustomCooldownWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createFund', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'customCooldownWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'daoAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deploy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deployedFunds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emitPoolEvent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'emitPoolManagerEvent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAssetGuard', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAssetHandler', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAssetPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAssetType', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getContractGuard', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDaoFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDeployedFunds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getExitCooldown', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getExitFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getInvestedPools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLogic', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getManagedPools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMaximumFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMaximumSupportedAssetCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governanceAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'implInitializer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isPaused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isValidAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maximumPerformanceFeeNumeratorChange', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'performanceFeeNumeratorChangeDelay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolPerformanceAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolStorageVersion', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolVersion', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeCustomCooldownWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAssetHandler', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDAOAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDaoFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setExitCooldown', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setExitFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGovernanceAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLogic', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaximumFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaximumPerformanceFeeNumeratorChange', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaximumSupportedAssetCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPerformanceFeeNumeratorChangeDelay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPoolPerformanceAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPoolStorageVersion', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradePoolBatch(uint256,uint256,uint256,bytes[])', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'upgradePoolBatch(uint256,uint256,uint256,bytes)', data: BytesLike): Result;

  events: {
    'DAOAddressSet(address)': EventFragment;
    'DaoFeeSet(uint256,uint256)': EventFragment;
    'ExitCooldownSet(uint256)': EventFragment;
    'ExitFeeSet(uint256,uint256)': EventFragment;
    'FundCreated(address,bool,string,string,address,uint256,uint256,uint256,uint256)': EventFragment;
    'GovernanceAddressSet(address)': EventFragment;
    'LogUpgrade(address,address)': EventFragment;
    'MaximumSupportedAssetCountSet(uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'PoolEvent(address)': EventFragment;
    'PoolManagerEvent(address)': EventFragment;
    'PoolPerformanceAddressSet(address)': EventFragment;
    'ProxyCreated(address)': EventFragment;
    'SetAssetHandler(address)': EventFragment;
    'SetMaximumFee(uint256,uint256,uint256)': EventFragment;
    'SetMaximumPerformanceFeeNumeratorChange(uint256)': EventFragment;
    'SetPerformanceFeeNumeratorChangeDelay(uint256)': EventFragment;
    'SetPoolManagerFee(uint256,uint256)': EventFragment;
    'SetPoolStorageVersion(uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'DAOAddressSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DaoFeeSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExitCooldownSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExitFeeSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FundCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GovernanceAddressSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LogUpgrade'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaximumSupportedAssetCountSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolEvent'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolManagerEvent'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolPerformanceAddressSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProxyCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetAssetHandler'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetMaximumFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetMaximumPerformanceFeeNumeratorChange'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetPerformanceFeeNumeratorChangeDelay'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetPoolManagerFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetPoolStorageVersion'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export interface DAOAddressSetEventObject {
  daoAddress: string;
}
export type DAOAddressSetEvent = TypedEvent<[string], DAOAddressSetEventObject>;

export type DAOAddressSetEventFilter = TypedEventFilter<DAOAddressSetEvent>;

export interface DaoFeeSetEventObject {
  numerator: BigNumber;
  denominator: BigNumber;
}
export type DaoFeeSetEvent = TypedEvent<[BigNumber, BigNumber], DaoFeeSetEventObject>;

export type DaoFeeSetEventFilter = TypedEventFilter<DaoFeeSetEvent>;

export interface ExitCooldownSetEventObject {
  cooldown: BigNumber;
}
export type ExitCooldownSetEvent = TypedEvent<[BigNumber], ExitCooldownSetEventObject>;

export type ExitCooldownSetEventFilter = TypedEventFilter<ExitCooldownSetEvent>;

export interface ExitFeeSetEventObject {
  numerator: BigNumber;
  denominator: BigNumber;
}
export type ExitFeeSetEvent = TypedEvent<[BigNumber, BigNumber], ExitFeeSetEventObject>;

export type ExitFeeSetEventFilter = TypedEventFilter<ExitFeeSetEvent>;

export interface FundCreatedEventObject {
  fundAddress: string;
  isPoolPrivate: boolean;
  fundName: string;
  managerName: string;
  manager: string;
  time: BigNumber;
  performanceFeeNumerator: BigNumber;
  managerFeeNumerator: BigNumber;
  managerFeeDenominator: BigNumber;
}
export type FundCreatedEvent = TypedEvent<
  [string, boolean, string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  FundCreatedEventObject
>;

export type FundCreatedEventFilter = TypedEventFilter<FundCreatedEvent>;

export interface GovernanceAddressSetEventObject {
  governanceAddress: string;
}
export type GovernanceAddressSetEvent = TypedEvent<[string], GovernanceAddressSetEventObject>;

export type GovernanceAddressSetEventFilter = TypedEventFilter<GovernanceAddressSetEvent>;

export interface LogUpgradeEventObject {
  manager: string;
  pool: string;
}
export type LogUpgradeEvent = TypedEvent<[string, string], LogUpgradeEventObject>;

export type LogUpgradeEventFilter = TypedEventFilter<LogUpgradeEvent>;

export interface MaximumSupportedAssetCountSetEventObject {
  count: BigNumber;
}
export type MaximumSupportedAssetCountSetEvent = TypedEvent<[BigNumber], MaximumSupportedAssetCountSetEventObject>;

export type MaximumSupportedAssetCountSetEventFilter = TypedEventFilter<MaximumSupportedAssetCountSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PoolEventEventObject {
  poolAddress: string;
}
export type PoolEventEvent = TypedEvent<[string], PoolEventEventObject>;

export type PoolEventEventFilter = TypedEventFilter<PoolEventEvent>;

export interface PoolManagerEventEventObject {
  poolManagerAddress: string;
}
export type PoolManagerEventEvent = TypedEvent<[string], PoolManagerEventEventObject>;

export type PoolManagerEventEventFilter = TypedEventFilter<PoolManagerEventEvent>;

export interface PoolPerformanceAddressSetEventObject {
  poolPerformanceAddress: string;
}
export type PoolPerformanceAddressSetEvent = TypedEvent<[string], PoolPerformanceAddressSetEventObject>;

export type PoolPerformanceAddressSetEventFilter = TypedEventFilter<PoolPerformanceAddressSetEvent>;

export interface ProxyCreatedEventObject {
  proxy: string;
}
export type ProxyCreatedEvent = TypedEvent<[string], ProxyCreatedEventObject>;

export type ProxyCreatedEventFilter = TypedEventFilter<ProxyCreatedEvent>;

export interface SetAssetHandlerEventObject {
  assetHandler: string;
}
export type SetAssetHandlerEvent = TypedEvent<[string], SetAssetHandlerEventObject>;

export type SetAssetHandlerEventFilter = TypedEventFilter<SetAssetHandlerEvent>;

export interface SetMaximumFeeEventObject {
  performanceFeeNumerator: BigNumber;
  managerFeeNumerator: BigNumber;
  denominator: BigNumber;
}
export type SetMaximumFeeEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], SetMaximumFeeEventObject>;

export type SetMaximumFeeEventFilter = TypedEventFilter<SetMaximumFeeEvent>;

export interface SetMaximumPerformanceFeeNumeratorChangeEventObject {
  amount: BigNumber;
}
export type SetMaximumPerformanceFeeNumeratorChangeEvent = TypedEvent<
  [BigNumber],
  SetMaximumPerformanceFeeNumeratorChangeEventObject
>;

export type SetMaximumPerformanceFeeNumeratorChangeEventFilter =
  TypedEventFilter<SetMaximumPerformanceFeeNumeratorChangeEvent>;

export interface SetPerformanceFeeNumeratorChangeDelayEventObject {
  delay: BigNumber;
}
export type SetPerformanceFeeNumeratorChangeDelayEvent = TypedEvent<
  [BigNumber],
  SetPerformanceFeeNumeratorChangeDelayEventObject
>;

export type SetPerformanceFeeNumeratorChangeDelayEventFilter =
  TypedEventFilter<SetPerformanceFeeNumeratorChangeDelayEvent>;

export interface SetPoolManagerFeeEventObject {
  numerator: BigNumber;
  denominator: BigNumber;
}
export type SetPoolManagerFeeEvent = TypedEvent<[BigNumber, BigNumber], SetPoolManagerFeeEventObject>;

export type SetPoolManagerFeeEventFilter = TypedEventFilter<SetPoolManagerFeeEvent>;

export interface SetPoolStorageVersionEventObject {
  poolStorageVersion: BigNumber;
}
export type SetPoolStorageVersionEvent = TypedEvent<[BigNumber], SetPoolStorageVersionEventObject>;

export type SetPoolStorageVersionEventFilter = TypedEventFilter<SetPoolStorageVersionEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface DhedgeV2Factory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DhedgeV2FactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCustomCooldownWhitelist(
      _extAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    createFund(
      _privatePool: PromiseOrValue<boolean>,
      _manager: PromiseOrValue<string>,
      _managerName: PromiseOrValue<string>,
      _fundName: PromiseOrValue<string>,
      _fundSymbol: PromiseOrValue<string>,
      _performanceFeeNumerator: PromiseOrValue<BigNumberish>,
      _managerFeeNumerator: PromiseOrValue<BigNumberish>,
      _supportedAssets: IHasSupportedAsset.AssetStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    customCooldownWhitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    daoAddress(overrides?: CallOverrides): Promise<[string]>;

    deploy(
      _data: PromiseOrValue<BytesLike>,
      _proxyType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deployedFunds(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    emitPoolEvent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    emitPoolManagerEvent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    getAddress(name: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string] & { destination: string }>;

    getAssetGuard(extAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string] & { guard: string }>;

    getAssetHandler(overrides?: CallOverrides): Promise<[string]>;

    getAssetPrice(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { price: BigNumber }>;

    getAssetType(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[number] & { assetType: number }>;

    getContractGuard(
      extContract: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string] & { guard: string }>;

    getDaoFee(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getDeployedFunds(overrides?: CallOverrides): Promise<[string[]]>;

    getExitCooldown(overrides?: CallOverrides): Promise<[BigNumber]>;

    getExitFee(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getInvestedPools(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string[]] & { investedPools: string[] }>;

    getLogic(_proxyType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;

    getManagedPools(
      manager: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string[]] & { managedPools: string[] }>;

    getMaximumFee(overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber]>;

    getMaximumSupportedAssetCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    governanceAddress(overrides?: CallOverrides): Promise<[string]>;

    implInitializer(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    initialize(
      _poolLogic: PromiseOrValue<string>,
      _managerLogic: PromiseOrValue<string>,
      assetHandler: PromiseOrValue<string>,
      _daoAddress: PromiseOrValue<string>,
      _governanceAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isPaused(overrides?: CallOverrides): Promise<[boolean]>;

    isPool(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isValidAsset(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    maximumPerformanceFeeNumeratorChange(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    performanceFeeNumeratorChangeDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolPerformanceAddress(overrides?: CallOverrides): Promise<[string]>;

    poolStorageVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolVersion(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    removeCustomCooldownWhitelist(
      _extAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    setAssetHandler(
      assetHandler: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDAOAddress(
      _daoAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDaoFee(
      numerator: PromiseOrValue<BigNumberish>,
      denominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setExitCooldown(
      cooldown: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setExitFee(
      numerator: PromiseOrValue<BigNumberish>,
      denominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setGovernanceAddress(
      _governanceAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setLogic(
      _poolLogic: PromiseOrValue<string>,
      _poolManagerLogic: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaximumFee(
      performanceFeeNumerator: PromiseOrValue<BigNumberish>,
      managerFeeNumerator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaximumPerformanceFeeNumeratorChange(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaximumSupportedAssetCount(
      count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPerformanceFeeNumeratorChangeDelay(
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPoolPerformanceAddress(
      _poolPerformanceAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPoolStorageVersion(
      _poolStorageVersion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    'upgradePoolBatch(uint256,uint256,uint256,bytes[])'(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      targetVersion: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'upgradePoolBatch(uint256,uint256,uint256,bytes)'(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      targetVersion: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  addCustomCooldownWhitelist(
    _extAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  createFund(
    _privatePool: PromiseOrValue<boolean>,
    _manager: PromiseOrValue<string>,
    _managerName: PromiseOrValue<string>,
    _fundName: PromiseOrValue<string>,
    _fundSymbol: PromiseOrValue<string>,
    _performanceFeeNumerator: PromiseOrValue<BigNumberish>,
    _managerFeeNumerator: PromiseOrValue<BigNumberish>,
    _supportedAssets: IHasSupportedAsset.AssetStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  customCooldownWhitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  daoAddress(overrides?: CallOverrides): Promise<string>;

  deploy(
    _data: PromiseOrValue<BytesLike>,
    _proxyType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deployedFunds(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  emitPoolEvent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  emitPoolManagerEvent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  getAddress(name: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  getAssetGuard(extAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  getAssetHandler(overrides?: CallOverrides): Promise<string>;

  getAssetPrice(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getAssetType(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>;

  getContractGuard(extContract: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  getDaoFee(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  getDeployedFunds(overrides?: CallOverrides): Promise<string[]>;

  getExitCooldown(overrides?: CallOverrides): Promise<BigNumber>;

  getExitFee(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  getInvestedPools(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

  getLogic(_proxyType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  getManagedPools(manager: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

  getMaximumFee(overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber]>;

  getMaximumSupportedAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

  governanceAddress(overrides?: CallOverrides): Promise<string>;

  implInitializer(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  initialize(
    _poolLogic: PromiseOrValue<string>,
    _managerLogic: PromiseOrValue<string>,
    assetHandler: PromiseOrValue<string>,
    _daoAddress: PromiseOrValue<string>,
    _governanceAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isPaused(overrides?: CallOverrides): Promise<boolean>;

  isPool(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isValidAsset(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  maximumPerformanceFeeNumeratorChange(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  performanceFeeNumeratorChangeDelay(overrides?: CallOverrides): Promise<BigNumber>;

  poolPerformanceAddress(overrides?: CallOverrides): Promise<string>;

  poolStorageVersion(overrides?: CallOverrides): Promise<BigNumber>;

  poolVersion(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  removeCustomCooldownWhitelist(
    _extAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  setAssetHandler(
    assetHandler: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDAOAddress(
    _daoAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDaoFee(
    numerator: PromiseOrValue<BigNumberish>,
    denominator: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setExitCooldown(
    cooldown: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setExitFee(
    numerator: PromiseOrValue<BigNumberish>,
    denominator: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setGovernanceAddress(
    _governanceAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setLogic(
    _poolLogic: PromiseOrValue<string>,
    _poolManagerLogic: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaximumFee(
    performanceFeeNumerator: PromiseOrValue<BigNumberish>,
    managerFeeNumerator: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaximumPerformanceFeeNumeratorChange(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaximumSupportedAssetCount(
    count: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPerformanceFeeNumeratorChangeDelay(
    delay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPoolPerformanceAddress(
    _poolPerformanceAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPoolStorageVersion(
    _poolStorageVersion: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  'upgradePoolBatch(uint256,uint256,uint256,bytes[])'(
    startIndex: PromiseOrValue<BigNumberish>,
    endIndex: PromiseOrValue<BigNumberish>,
    targetVersion: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'upgradePoolBatch(uint256,uint256,uint256,bytes)'(
    startIndex: PromiseOrValue<BigNumberish>,
    endIndex: PromiseOrValue<BigNumberish>,
    targetVersion: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    addCustomCooldownWhitelist(_extAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    createFund(
      _privatePool: PromiseOrValue<boolean>,
      _manager: PromiseOrValue<string>,
      _managerName: PromiseOrValue<string>,
      _fundName: PromiseOrValue<string>,
      _fundSymbol: PromiseOrValue<string>,
      _performanceFeeNumerator: PromiseOrValue<BigNumberish>,
      _managerFeeNumerator: PromiseOrValue<BigNumberish>,
      _supportedAssets: IHasSupportedAsset.AssetStruct[],
      overrides?: CallOverrides,
    ): Promise<string>;

    customCooldownWhitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    daoAddress(overrides?: CallOverrides): Promise<string>;

    deploy(
      _data: PromiseOrValue<BytesLike>,
      _proxyType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    deployedFunds(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    emitPoolEvent(overrides?: CallOverrides): Promise<void>;

    emitPoolManagerEvent(overrides?: CallOverrides): Promise<void>;

    getAddress(name: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    getAssetGuard(extAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    getAssetHandler(overrides?: CallOverrides): Promise<string>;

    getAssetPrice(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAssetType(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>;

    getContractGuard(extContract: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    getDaoFee(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getDeployedFunds(overrides?: CallOverrides): Promise<string[]>;

    getExitCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    getExitFee(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getInvestedPools(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

    getLogic(_proxyType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    getManagedPools(manager: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string[]>;

    getMaximumFee(overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber]>;

    getMaximumSupportedAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    governanceAddress(overrides?: CallOverrides): Promise<string>;

    implInitializer(overrides?: CallOverrides): Promise<void>;

    initialize(
      _poolLogic: PromiseOrValue<string>,
      _managerLogic: PromiseOrValue<string>,
      assetHandler: PromiseOrValue<string>,
      _daoAddress: PromiseOrValue<string>,
      _governanceAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    isPaused(overrides?: CallOverrides): Promise<boolean>;

    isPool(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isValidAsset(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    maximumPerformanceFeeNumeratorChange(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    performanceFeeNumeratorChangeDelay(overrides?: CallOverrides): Promise<BigNumber>;

    poolPerformanceAddress(overrides?: CallOverrides): Promise<string>;

    poolStorageVersion(overrides?: CallOverrides): Promise<BigNumber>;

    poolVersion(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    removeCustomCooldownWhitelist(_extAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAssetHandler(assetHandler: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setDAOAddress(_daoAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setDaoFee(
      numerator: PromiseOrValue<BigNumberish>,
      denominator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setExitCooldown(cooldown: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setExitFee(
      numerator: PromiseOrValue<BigNumberish>,
      denominator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setGovernanceAddress(_governanceAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setLogic(
      _poolLogic: PromiseOrValue<string>,
      _poolManagerLogic: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMaximumFee(
      performanceFeeNumerator: PromiseOrValue<BigNumberish>,
      managerFeeNumerator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMaximumPerformanceFeeNumeratorChange(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMaximumSupportedAssetCount(count: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setPerformanceFeeNumeratorChangeDelay(
      delay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setPoolPerformanceAddress(
      _poolPerformanceAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setPoolStorageVersion(_poolStorageVersion: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    'upgradePoolBatch(uint256,uint256,uint256,bytes[])'(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      targetVersion: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    'upgradePoolBatch(uint256,uint256,uint256,bytes)'(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      targetVersion: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'DAOAddressSet(address)'(daoAddress?: null): DAOAddressSetEventFilter;
    DAOAddressSet(daoAddress?: null): DAOAddressSetEventFilter;

    'DaoFeeSet(uint256,uint256)'(numerator?: null, denominator?: null): DaoFeeSetEventFilter;
    DaoFeeSet(numerator?: null, denominator?: null): DaoFeeSetEventFilter;

    'ExitCooldownSet(uint256)'(cooldown?: null): ExitCooldownSetEventFilter;
    ExitCooldownSet(cooldown?: null): ExitCooldownSetEventFilter;

    'ExitFeeSet(uint256,uint256)'(numerator?: null, denominator?: null): ExitFeeSetEventFilter;
    ExitFeeSet(numerator?: null, denominator?: null): ExitFeeSetEventFilter;

    'FundCreated(address,bool,string,string,address,uint256,uint256,uint256,uint256)'(
      fundAddress?: null,
      isPoolPrivate?: null,
      fundName?: null,
      managerName?: null,
      manager?: null,
      time?: null,
      performanceFeeNumerator?: null,
      managerFeeNumerator?: null,
      managerFeeDenominator?: null,
    ): FundCreatedEventFilter;
    FundCreated(
      fundAddress?: null,
      isPoolPrivate?: null,
      fundName?: null,
      managerName?: null,
      manager?: null,
      time?: null,
      performanceFeeNumerator?: null,
      managerFeeNumerator?: null,
      managerFeeDenominator?: null,
    ): FundCreatedEventFilter;

    'GovernanceAddressSet(address)'(governanceAddress?: null): GovernanceAddressSetEventFilter;
    GovernanceAddressSet(governanceAddress?: null): GovernanceAddressSetEventFilter;

    'LogUpgrade(address,address)'(
      manager?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
    ): LogUpgradeEventFilter;
    LogUpgrade(manager?: PromiseOrValue<string> | null, pool?: PromiseOrValue<string> | null): LogUpgradeEventFilter;

    'MaximumSupportedAssetCountSet(uint256)'(count?: null): MaximumSupportedAssetCountSetEventFilter;
    MaximumSupportedAssetCountSet(count?: null): MaximumSupportedAssetCountSetEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'PoolEvent(address)'(poolAddress?: null): PoolEventEventFilter;
    PoolEvent(poolAddress?: null): PoolEventEventFilter;

    'PoolManagerEvent(address)'(poolManagerAddress?: null): PoolManagerEventEventFilter;
    PoolManagerEvent(poolManagerAddress?: null): PoolManagerEventEventFilter;

    'PoolPerformanceAddressSet(address)'(poolPerformanceAddress?: null): PoolPerformanceAddressSetEventFilter;
    PoolPerformanceAddressSet(poolPerformanceAddress?: null): PoolPerformanceAddressSetEventFilter;

    'ProxyCreated(address)'(proxy?: null): ProxyCreatedEventFilter;
    ProxyCreated(proxy?: null): ProxyCreatedEventFilter;

    'SetAssetHandler(address)'(assetHandler?: null): SetAssetHandlerEventFilter;
    SetAssetHandler(assetHandler?: null): SetAssetHandlerEventFilter;

    'SetMaximumFee(uint256,uint256,uint256)'(
      performanceFeeNumerator?: null,
      managerFeeNumerator?: null,
      denominator?: null,
    ): SetMaximumFeeEventFilter;
    SetMaximumFee(
      performanceFeeNumerator?: null,
      managerFeeNumerator?: null,
      denominator?: null,
    ): SetMaximumFeeEventFilter;

    'SetMaximumPerformanceFeeNumeratorChange(uint256)'(
      amount?: null,
    ): SetMaximumPerformanceFeeNumeratorChangeEventFilter;
    SetMaximumPerformanceFeeNumeratorChange(amount?: null): SetMaximumPerformanceFeeNumeratorChangeEventFilter;

    'SetPerformanceFeeNumeratorChangeDelay(uint256)'(delay?: null): SetPerformanceFeeNumeratorChangeDelayEventFilter;
    SetPerformanceFeeNumeratorChangeDelay(delay?: null): SetPerformanceFeeNumeratorChangeDelayEventFilter;

    'SetPoolManagerFee(uint256,uint256)'(numerator?: null, denominator?: null): SetPoolManagerFeeEventFilter;
    SetPoolManagerFee(numerator?: null, denominator?: null): SetPoolManagerFeeEventFilter;

    'SetPoolStorageVersion(uint256)'(poolStorageVersion?: null): SetPoolStorageVersionEventFilter;
    SetPoolStorageVersion(poolStorageVersion?: null): SetPoolStorageVersionEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    addCustomCooldownWhitelist(
      _extAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    createFund(
      _privatePool: PromiseOrValue<boolean>,
      _manager: PromiseOrValue<string>,
      _managerName: PromiseOrValue<string>,
      _fundName: PromiseOrValue<string>,
      _fundSymbol: PromiseOrValue<string>,
      _performanceFeeNumerator: PromiseOrValue<BigNumberish>,
      _managerFeeNumerator: PromiseOrValue<BigNumberish>,
      _supportedAssets: IHasSupportedAsset.AssetStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    customCooldownWhitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    daoAddress(overrides?: CallOverrides): Promise<BigNumber>;

    deploy(
      _data: PromiseOrValue<BytesLike>,
      _proxyType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deployedFunds(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    emitPoolEvent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    emitPoolManagerEvent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    getAddress(name: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    getAssetGuard(extAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAssetHandler(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetPrice(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAssetType(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getContractGuard(extContract: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getDaoFee(overrides?: CallOverrides): Promise<BigNumber>;

    getDeployedFunds(overrides?: CallOverrides): Promise<BigNumber>;

    getExitCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    getExitFee(overrides?: CallOverrides): Promise<BigNumber>;

    getInvestedPools(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getLogic(_proxyType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getManagedPools(manager: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getMaximumFee(overrides?: CallOverrides): Promise<BigNumber>;

    getMaximumSupportedAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    governanceAddress(overrides?: CallOverrides): Promise<BigNumber>;

    implInitializer(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    initialize(
      _poolLogic: PromiseOrValue<string>,
      _managerLogic: PromiseOrValue<string>,
      assetHandler: PromiseOrValue<string>,
      _daoAddress: PromiseOrValue<string>,
      _governanceAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isPaused(overrides?: CallOverrides): Promise<BigNumber>;

    isPool(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isValidAsset(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maximumPerformanceFeeNumeratorChange(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFeeNumeratorChangeDelay(overrides?: CallOverrides): Promise<BigNumber>;

    poolPerformanceAddress(overrides?: CallOverrides): Promise<BigNumber>;

    poolStorageVersion(overrides?: CallOverrides): Promise<BigNumber>;

    poolVersion(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    removeCustomCooldownWhitelist(
      _extAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setAssetHandler(
      assetHandler: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDAOAddress(
      _daoAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDaoFee(
      numerator: PromiseOrValue<BigNumberish>,
      denominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setExitCooldown(
      cooldown: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setExitFee(
      numerator: PromiseOrValue<BigNumberish>,
      denominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setGovernanceAddress(
      _governanceAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setLogic(
      _poolLogic: PromiseOrValue<string>,
      _poolManagerLogic: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaximumFee(
      performanceFeeNumerator: PromiseOrValue<BigNumberish>,
      managerFeeNumerator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaximumPerformanceFeeNumeratorChange(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaximumSupportedAssetCount(
      count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPerformanceFeeNumeratorChangeDelay(
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPoolPerformanceAddress(
      _poolPerformanceAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPoolStorageVersion(
      _poolStorageVersion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    'upgradePoolBatch(uint256,uint256,uint256,bytes[])'(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      targetVersion: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'upgradePoolBatch(uint256,uint256,uint256,bytes)'(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      targetVersion: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCustomCooldownWhitelist(
      _extAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    createFund(
      _privatePool: PromiseOrValue<boolean>,
      _manager: PromiseOrValue<string>,
      _managerName: PromiseOrValue<string>,
      _fundName: PromiseOrValue<string>,
      _fundSymbol: PromiseOrValue<string>,
      _performanceFeeNumerator: PromiseOrValue<BigNumberish>,
      _managerFeeNumerator: PromiseOrValue<BigNumberish>,
      _supportedAssets: IHasSupportedAsset.AssetStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    customCooldownWhitelist(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daoAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deploy(
      _data: PromiseOrValue<BytesLike>,
      _proxyType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deployedFunds(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emitPoolEvent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    emitPoolManagerEvent(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    getAddress(name: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetGuard(extAsset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetPrice(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetType(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContractGuard(extContract: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDaoFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDeployedFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExitCooldown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExitFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInvestedPools(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLogic(_proxyType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getManagedPools(manager: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaximumFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaximumSupportedAssetCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    implInitializer(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    initialize(
      _poolLogic: PromiseOrValue<string>,
      _managerLogic: PromiseOrValue<string>,
      assetHandler: PromiseOrValue<string>,
      _daoAddress: PromiseOrValue<string>,
      _governanceAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPool(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidAsset(asset: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maximumPerformanceFeeNumeratorChange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performanceFeeNumeratorChangeDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolPerformanceAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolStorageVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolVersion(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeCustomCooldownWhitelist(
      _extAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    setAssetHandler(
      assetHandler: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDAOAddress(
      _daoAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDaoFee(
      numerator: PromiseOrValue<BigNumberish>,
      denominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setExitCooldown(
      cooldown: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setExitFee(
      numerator: PromiseOrValue<BigNumberish>,
      denominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setGovernanceAddress(
      _governanceAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setLogic(
      _poolLogic: PromiseOrValue<string>,
      _poolManagerLogic: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaximumFee(
      performanceFeeNumerator: PromiseOrValue<BigNumberish>,
      managerFeeNumerator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaximumPerformanceFeeNumeratorChange(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaximumSupportedAssetCount(
      count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPerformanceFeeNumeratorChangeDelay(
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPoolPerformanceAddress(
      _poolPerformanceAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPoolStorageVersion(
      _poolStorageVersion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    'upgradePoolBatch(uint256,uint256,uint256,bytes[])'(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      targetVersion: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'upgradePoolBatch(uint256,uint256,uint256,bytes)'(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      targetVersion: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
