/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface MarketInterface extends utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'DOMAIN_SEPARATOR()': FunctionFragment;
    'PAUSER_ROLE()': FunctionFragment;
    'accountSnapshot(address)': FunctionFragment;
    'accounts(address)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'asset()': FunctionFragment;
    'auditor()': FunctionFragment;
    'backupFeeRate()': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'borrow(uint256,address,address)': FunctionFragment;
    'borrowAtMaturity(uint256,uint256,uint256,address,address)': FunctionFragment;
    'clearBadDebt(address)': FunctionFragment;
    'convertToAssets(uint256)': FunctionFragment;
    'convertToShares(uint256)': FunctionFragment;
    'dampSpeedDown()': FunctionFragment;
    'dampSpeedUp()': FunctionFragment;
    'decimals()': FunctionFragment;
    'deposit(uint256,address)': FunctionFragment;
    'depositAtMaturity(uint256,uint256,uint256,address)': FunctionFragment;
    'earningsAccumulator()': FunctionFragment;
    'earningsAccumulatorSmoothFactor()': FunctionFragment;
    'fixedBorrowPositions(uint256,address)': FunctionFragment;
    'fixedDepositPositions(uint256,address)': FunctionFragment;
    'fixedPools(uint256)': FunctionFragment;
    'floatingAssets()': FunctionFragment;
    'floatingAssetsAverage()': FunctionFragment;
    'floatingBackupBorrowed()': FunctionFragment;
    'floatingDebt()': FunctionFragment;
    'floatingUtilization()': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'initialize(uint8,uint128,address,uint256,uint256,uint128,uint256,uint256)': FunctionFragment;
    'interestRateModel()': FunctionFragment;
    'lastAccumulatorAccrual()': FunctionFragment;
    'lastAverageUpdate()': FunctionFragment;
    'lastFloatingDebtUpdate()': FunctionFragment;
    'liquidate(address,uint256,address)': FunctionFragment;
    'maxDeposit(address)': FunctionFragment;
    'maxFuturePools()': FunctionFragment;
    'maxMint(address)': FunctionFragment;
    'maxRedeem(address)': FunctionFragment;
    'maxWithdraw(address)': FunctionFragment;
    'mint(uint256,address)': FunctionFragment;
    'name()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'penaltyRate()': FunctionFragment;
    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'previewBorrow(uint256)': FunctionFragment;
    'previewDebt(address)': FunctionFragment;
    'previewDeposit(uint256)': FunctionFragment;
    'previewFloatingAssetsAverage()': FunctionFragment;
    'previewMint(uint256)': FunctionFragment;
    'previewRedeem(uint256)': FunctionFragment;
    'previewRefund(uint256)': FunctionFragment;
    'previewRepay(uint256)': FunctionFragment;
    'previewWithdraw(uint256)': FunctionFragment;
    'redeem(uint256,address,address)': FunctionFragment;
    'refund(uint256,address)': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'repay(uint256,address)': FunctionFragment;
    'repayAtMaturity(uint256,uint256,uint256,address)': FunctionFragment;
    'reserveFactor()': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'seize(address,address,uint256)': FunctionFragment;
    'setBackupFeeRate(uint256)': FunctionFragment;
    'setDampSpeed(uint256,uint256)': FunctionFragment;
    'setEarningsAccumulatorSmoothFactor(uint128)': FunctionFragment;
    'setInterestRateModel(address)': FunctionFragment;
    'setMaxFuturePools(uint8)': FunctionFragment;
    'setPenaltyRate(uint256)': FunctionFragment;
    'setReserveFactor(uint128)': FunctionFragment;
    'setTreasury(address,uint256)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalAssets()': FunctionFragment;
    'totalFloatingBorrowAssets()': FunctionFragment;
    'totalFloatingBorrowShares()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'treasury()': FunctionFragment;
    'treasuryFeeRate()': FunctionFragment;
    'unpause()': FunctionFragment;
    'withdraw(uint256,address,address)': FunctionFragment;
    'withdrawAtMaturity(uint256,uint256,uint256,address,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'DEFAULT_ADMIN_ROLE'
      | 'DOMAIN_SEPARATOR'
      | 'PAUSER_ROLE'
      | 'accountSnapshot'
      | 'accounts'
      | 'allowance'
      | 'approve'
      | 'asset'
      | 'auditor'
      | 'backupFeeRate'
      | 'balanceOf'
      | 'borrow'
      | 'borrowAtMaturity'
      | 'clearBadDebt'
      | 'convertToAssets'
      | 'convertToShares'
      | 'dampSpeedDown'
      | 'dampSpeedUp'
      | 'decimals'
      | 'deposit'
      | 'depositAtMaturity'
      | 'earningsAccumulator'
      | 'earningsAccumulatorSmoothFactor'
      | 'fixedBorrowPositions'
      | 'fixedDepositPositions'
      | 'fixedPools'
      | 'floatingAssets'
      | 'floatingAssetsAverage'
      | 'floatingBackupBorrowed'
      | 'floatingDebt'
      | 'floatingUtilization'
      | 'getRoleAdmin'
      | 'grantRole'
      | 'hasRole'
      | 'initialize'
      | 'interestRateModel'
      | 'lastAccumulatorAccrual'
      | 'lastAverageUpdate'
      | 'lastFloatingDebtUpdate'
      | 'liquidate'
      | 'maxDeposit'
      | 'maxFuturePools'
      | 'maxMint'
      | 'maxRedeem'
      | 'maxWithdraw'
      | 'mint'
      | 'name'
      | 'nonces'
      | 'pause'
      | 'paused'
      | 'penaltyRate'
      | 'permit'
      | 'previewBorrow'
      | 'previewDebt'
      | 'previewDeposit'
      | 'previewFloatingAssetsAverage'
      | 'previewMint'
      | 'previewRedeem'
      | 'previewRefund'
      | 'previewRepay'
      | 'previewWithdraw'
      | 'redeem'
      | 'refund'
      | 'renounceRole'
      | 'repay'
      | 'repayAtMaturity'
      | 'reserveFactor'
      | 'revokeRole'
      | 'seize'
      | 'setBackupFeeRate'
      | 'setDampSpeed'
      | 'setEarningsAccumulatorSmoothFactor'
      | 'setInterestRateModel'
      | 'setMaxFuturePools'
      | 'setPenaltyRate'
      | 'setReserveFactor'
      | 'setTreasury'
      | 'supportsInterface'
      | 'symbol'
      | 'totalAssets'
      | 'totalFloatingBorrowAssets'
      | 'totalFloatingBorrowShares'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'treasury'
      | 'treasuryFeeRate'
      | 'unpause'
      | 'withdraw'
      | 'withdrawAtMaturity',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PAUSER_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accountSnapshot', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'accounts', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'asset', values?: undefined): string;
  encodeFunctionData(functionFragment: 'auditor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'backupFeeRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'borrow',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'borrowAtMaturity',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'clearBadDebt', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'convertToAssets', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'convertToShares', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'dampSpeedDown', values?: undefined): string;
  encodeFunctionData(functionFragment: 'dampSpeedUp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositAtMaturity',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'earningsAccumulator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'earningsAccumulatorSmoothFactor', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'fixedBorrowPositions',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'fixedDepositPositions',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'fixedPools', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'floatingAssets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'floatingAssetsAverage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'floatingBackupBorrowed', values?: undefined): string;
  encodeFunctionData(functionFragment: 'floatingDebt', values?: undefined): string;
  encodeFunctionData(functionFragment: 'floatingUtilization', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: 'grantRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'interestRateModel', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastAccumulatorAccrual', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastAverageUpdate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastFloatingDebtUpdate', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'liquidate',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'maxDeposit', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maxFuturePools', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxMint', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maxRedeem', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'maxWithdraw', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'mint', values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'penaltyRate', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'permit',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'previewBorrow', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'previewDebt', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'previewDeposit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'previewFloatingAssetsAverage', values?: undefined): string;
  encodeFunctionData(functionFragment: 'previewMint', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'previewRedeem', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'previewRefund', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'previewRepay', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'previewWithdraw', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'redeem',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'refund',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'repay', values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'repayAtMaturity',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'reserveFactor', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'revokeRole',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'seize',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setBackupFeeRate', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setDampSpeed',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setEarningsAccumulatorSmoothFactor',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setInterestRateModel', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setMaxFuturePools', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setPenaltyRate', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setReserveFactor', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setTreasury',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalAssets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalFloatingBorrowAssets', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalFloatingBorrowShares', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'treasury', values?: undefined): string;
  encodeFunctionData(functionFragment: 'treasuryFeeRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawAtMaturity',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string;

  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PAUSER_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accountSnapshot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accounts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'auditor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'backupFeeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrowAtMaturity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'clearBadDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertToAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'convertToShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dampSpeedDown', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dampSpeedUp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositAtMaturity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'earningsAccumulator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'earningsAccumulatorSmoothFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fixedBorrowPositions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fixedDepositPositions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fixedPools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'floatingAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'floatingAssetsAverage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'floatingBackupBorrowed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'floatingDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'floatingUtilization', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'interestRateModel', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastAccumulatorAccrual', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastAverageUpdate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastFloatingDebtUpdate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'liquidate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxFuturePools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRedeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'penaltyRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewBorrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewDebt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewDeposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewFloatingAssetsAverage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewMint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewRedeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewRefund', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewRepay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previewWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'refund', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repayAtMaturity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reserveFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'seize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setBackupFeeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDampSpeed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEarningsAccumulatorSmoothFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setInterestRateModel', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxFuturePools', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPenaltyRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setReserveFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTreasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalFloatingBorrowAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalFloatingBorrowShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'treasuryFeeRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAtMaturity', data: BytesLike): Result;

  events: {
    'AccumulatorAccrual(uint256)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'BackupFeeRateSet(uint256)': EventFragment;
    'Borrow(address,address,address,uint256,uint256)': EventFragment;
    'BorrowAtMaturity(uint256,address,address,address,uint256,uint256)': EventFragment;
    'DampSpeedSet(uint256,uint256)': EventFragment;
    'Deposit(address,address,uint256,uint256)': EventFragment;
    'DepositAtMaturity(uint256,address,address,uint256,uint256)': EventFragment;
    'EarningsAccumulatorSmoothFactorSet(uint256)': EventFragment;
    'FixedEarningsUpdate(uint256,uint256,uint256)': EventFragment;
    'FloatingDebtUpdate(uint256,uint256)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'InterestRateModelSet(address)': EventFragment;
    'Liquidate(address,address,uint256,uint256,address,uint256)': EventFragment;
    'MarketUpdate(uint256,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'MaxFuturePoolsSet(uint256)': EventFragment;
    'Paused(address)': EventFragment;
    'PenaltyRateSet(uint256)': EventFragment;
    'Repay(address,address,uint256,uint256)': EventFragment;
    'RepayAtMaturity(uint256,address,address,uint256,uint256)': EventFragment;
    'ReserveFactorSet(uint256)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'Seize(address,address,uint256)': EventFragment;
    'SpreadBadDebt(address,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'TreasurySet(address,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
    'Withdraw(address,address,address,uint256,uint256)': EventFragment;
    'WithdrawAtMaturity(uint256,address,address,address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AccumulatorAccrual'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BackupFeeRateSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Borrow'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BorrowAtMaturity'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DampSpeedSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositAtMaturity'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EarningsAccumulatorSmoothFactorSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FixedEarningsUpdate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FloatingDebtUpdate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InterestRateModelSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Liquidate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MarketUpdate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxFuturePoolsSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PenaltyRateSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Repay'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RepayAtMaturity'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReserveFactorSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Seize'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SpreadBadDebt'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TreasurySet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawAtMaturity'): EventFragment;
}

export interface AccumulatorAccrualEventObject {
  timestamp: BigNumber;
}
export type AccumulatorAccrualEvent = TypedEvent<[BigNumber], AccumulatorAccrualEventObject>;

export type AccumulatorAccrualEventFilter = TypedEventFilter<AccumulatorAccrualEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  amount: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BackupFeeRateSetEventObject {
  backupFeeRate: BigNumber;
}
export type BackupFeeRateSetEvent = TypedEvent<[BigNumber], BackupFeeRateSetEventObject>;

export type BackupFeeRateSetEventFilter = TypedEventFilter<BackupFeeRateSetEvent>;

export interface BorrowEventObject {
  caller: string;
  receiver: string;
  borrower: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type BorrowEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], BorrowEventObject>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface BorrowAtMaturityEventObject {
  maturity: BigNumber;
  caller: string;
  receiver: string;
  borrower: string;
  assets: BigNumber;
  fee: BigNumber;
}
export type BorrowAtMaturityEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, BigNumber],
  BorrowAtMaturityEventObject
>;

export type BorrowAtMaturityEventFilter = TypedEventFilter<BorrowAtMaturityEvent>;

export interface DampSpeedSetEventObject {
  dampSpeedUp: BigNumber;
  dampSpeedDown: BigNumber;
}
export type DampSpeedSetEvent = TypedEvent<[BigNumber, BigNumber], DampSpeedSetEventObject>;

export type DampSpeedSetEventFilter = TypedEventFilter<DampSpeedSetEvent>;

export interface DepositEventObject {
  caller: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type DepositEvent = TypedEvent<[string, string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DepositAtMaturityEventObject {
  maturity: BigNumber;
  caller: string;
  owner: string;
  assets: BigNumber;
  fee: BigNumber;
}
export type DepositAtMaturityEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  DepositAtMaturityEventObject
>;

export type DepositAtMaturityEventFilter = TypedEventFilter<DepositAtMaturityEvent>;

export interface EarningsAccumulatorSmoothFactorSetEventObject {
  earningsAccumulatorSmoothFactor: BigNumber;
}
export type EarningsAccumulatorSmoothFactorSetEvent = TypedEvent<
  [BigNumber],
  EarningsAccumulatorSmoothFactorSetEventObject
>;

export type EarningsAccumulatorSmoothFactorSetEventFilter = TypedEventFilter<EarningsAccumulatorSmoothFactorSetEvent>;

export interface FixedEarningsUpdateEventObject {
  timestamp: BigNumber;
  maturity: BigNumber;
  unassignedEarnings: BigNumber;
}
export type FixedEarningsUpdateEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], FixedEarningsUpdateEventObject>;

export type FixedEarningsUpdateEventFilter = TypedEventFilter<FixedEarningsUpdateEvent>;

export interface FloatingDebtUpdateEventObject {
  timestamp: BigNumber;
  utilization: BigNumber;
}
export type FloatingDebtUpdateEvent = TypedEvent<[BigNumber, BigNumber], FloatingDebtUpdateEventObject>;

export type FloatingDebtUpdateEventFilter = TypedEventFilter<FloatingDebtUpdateEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface InterestRateModelSetEventObject {
  interestRateModel: string;
}
export type InterestRateModelSetEvent = TypedEvent<[string], InterestRateModelSetEventObject>;

export type InterestRateModelSetEventFilter = TypedEventFilter<InterestRateModelSetEvent>;

export interface LiquidateEventObject {
  receiver: string;
  borrower: string;
  assets: BigNumber;
  lendersAssets: BigNumber;
  seizeMarket: string;
  seizedAssets: BigNumber;
}
export type LiquidateEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, BigNumber],
  LiquidateEventObject
>;

export type LiquidateEventFilter = TypedEventFilter<LiquidateEvent>;

export interface MarketUpdateEventObject {
  timestamp: BigNumber;
  floatingDepositShares: BigNumber;
  floatingAssets: BigNumber;
  floatingBorrowShares: BigNumber;
  floatingDebt: BigNumber;
  earningsAccumulator: BigNumber;
}
export type MarketUpdateEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  MarketUpdateEventObject
>;

export type MarketUpdateEventFilter = TypedEventFilter<MarketUpdateEvent>;

export interface MaxFuturePoolsSetEventObject {
  maxFuturePools: BigNumber;
}
export type MaxFuturePoolsSetEvent = TypedEvent<[BigNumber], MaxFuturePoolsSetEventObject>;

export type MaxFuturePoolsSetEventFilter = TypedEventFilter<MaxFuturePoolsSetEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PenaltyRateSetEventObject {
  penaltyRate: BigNumber;
}
export type PenaltyRateSetEvent = TypedEvent<[BigNumber], PenaltyRateSetEventObject>;

export type PenaltyRateSetEventFilter = TypedEventFilter<PenaltyRateSetEvent>;

export interface RepayEventObject {
  caller: string;
  borrower: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type RepayEvent = TypedEvent<[string, string, BigNumber, BigNumber], RepayEventObject>;

export type RepayEventFilter = TypedEventFilter<RepayEvent>;

export interface RepayAtMaturityEventObject {
  maturity: BigNumber;
  caller: string;
  borrower: string;
  assets: BigNumber;
  positionAssets: BigNumber;
}
export type RepayAtMaturityEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  RepayAtMaturityEventObject
>;

export type RepayAtMaturityEventFilter = TypedEventFilter<RepayAtMaturityEvent>;

export interface ReserveFactorSetEventObject {
  reserveFactor: BigNumber;
}
export type ReserveFactorSetEvent = TypedEvent<[BigNumber], ReserveFactorSetEventObject>;

export type ReserveFactorSetEventFilter = TypedEventFilter<ReserveFactorSetEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SeizeEventObject {
  liquidator: string;
  borrower: string;
  assets: BigNumber;
}
export type SeizeEvent = TypedEvent<[string, string, BigNumber], SeizeEventObject>;

export type SeizeEventFilter = TypedEventFilter<SeizeEvent>;

export interface SpreadBadDebtEventObject {
  borrower: string;
  assets: BigNumber;
}
export type SpreadBadDebtEvent = TypedEvent<[string, BigNumber], SpreadBadDebtEventObject>;

export type SpreadBadDebtEventFilter = TypedEventFilter<SpreadBadDebtEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TreasurySetEventObject {
  treasury: string;
  treasuryFeeRate: BigNumber;
}
export type TreasurySetEvent = TypedEvent<[string, BigNumber], TreasurySetEventObject>;

export type TreasurySetEventFilter = TypedEventFilter<TreasurySetEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawEventObject {
  caller: string;
  receiver: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawAtMaturityEventObject {
  maturity: BigNumber;
  caller: string;
  receiver: string;
  owner: string;
  positionAssets: BigNumber;
  assets: BigNumber;
}
export type WithdrawAtMaturityEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, BigNumber],
  WithdrawAtMaturityEventObject
>;

export type WithdrawAtMaturityEventFilter = TypedEventFilter<WithdrawAtMaturityEvent>;

export interface Market extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    accountSnapshot(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    accounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        fixedDeposits: BigNumber;
        fixedBorrows: BigNumber;
        floatingBorrowShares: BigNumber;
      }
    >;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    auditor(overrides?: CallOverrides): Promise<[string]>;

    backupFeeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrow(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    borrowAtMaturity(
      maturity: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>,
      maxAssets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    clearBadDebt(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    convertToAssets(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    convertToShares(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    dampSpeedDown(overrides?: CallOverrides): Promise<[BigNumber]>;

    dampSpeedUp(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    deposit(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositAtMaturity(
      maturity: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>,
      minAssetsRequired: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    earningsAccumulator(overrides?: CallOverrides): Promise<[BigNumber]>;

    earningsAccumulatorSmoothFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    fixedBorrowPositions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { principal: BigNumber; fee: BigNumber }>;

    fixedDepositPositions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { principal: BigNumber; fee: BigNumber }>;

    fixedPools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        borrowed: BigNumber;
        supplied: BigNumber;
        unassignedEarnings: BigNumber;
        lastAccrual: BigNumber;
      }
    >;

    floatingAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    floatingAssetsAverage(overrides?: CallOverrides): Promise<[BigNumber]>;

    floatingBackupBorrowed(overrides?: CallOverrides): Promise<[BigNumber]>;

    floatingDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    floatingUtilization(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    initialize(
      maxFuturePools_: PromiseOrValue<BigNumberish>,
      earningsAccumulatorSmoothFactor_: PromiseOrValue<BigNumberish>,
      interestRateModel_: PromiseOrValue<string>,
      penaltyRate_: PromiseOrValue<BigNumberish>,
      backupFeeRate_: PromiseOrValue<BigNumberish>,
      reserveFactor_: PromiseOrValue<BigNumberish>,
      dampSpeedUp_: PromiseOrValue<BigNumberish>,
      dampSpeedDown_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    interestRateModel(overrides?: CallOverrides): Promise<[string]>;

    lastAccumulatorAccrual(overrides?: CallOverrides): Promise<[number]>;

    lastAverageUpdate(overrides?: CallOverrides): Promise<[number]>;

    lastFloatingDebtUpdate(overrides?: CallOverrides): Promise<[number]>;

    liquidate(
      borrower: PromiseOrValue<string>,
      maxAssets: PromiseOrValue<BigNumberish>,
      seizeMarket: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    maxDeposit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxFuturePools(overrides?: CallOverrides): Promise<[number]>;

    maxMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxRedeem(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxWithdraw(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    penaltyRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    previewBorrow(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    previewDebt(
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { debt: BigNumber }>;

    previewDeposit(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    previewFloatingAssetsAverage(overrides?: CallOverrides): Promise<[BigNumber]>;

    previewMint(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    previewRedeem(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    previewRefund(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    previewRepay(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    previewWithdraw(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    refund(
      borrowShares: PromiseOrValue<BigNumberish>,
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    repay(
      assets: PromiseOrValue<BigNumberish>,
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    repayAtMaturity(
      maturity: PromiseOrValue<BigNumberish>,
      positionAssets: PromiseOrValue<BigNumberish>,
      maxAssets: PromiseOrValue<BigNumberish>,
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    reserveFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    seize(
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setBackupFeeRate(
      backupFeeRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDampSpeed(
      up: PromiseOrValue<BigNumberish>,
      down: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setEarningsAccumulatorSmoothFactor(
      earningsAccumulatorSmoothFactor_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setInterestRateModel(
      interestRateModel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxFuturePools(
      futurePools: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setPenaltyRate(
      penaltyRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setReserveFactor(
      reserveFactor_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTreasury(
      treasury_: PromiseOrValue<string>,
      treasuryFeeRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalFloatingBorrowAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalFloatingBorrowShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    treasuryFeeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawAtMaturity(
      maturity: PromiseOrValue<BigNumberish>,
      positionAssets: PromiseOrValue<BigNumberish>,
      minAssetsRequired: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  accountSnapshot(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  accounts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      fixedDeposits: BigNumber;
      fixedBorrows: BigNumber;
      floatingBorrowShares: BigNumber;
    }
  >;

  allowance(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  auditor(overrides?: CallOverrides): Promise<string>;

  backupFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  borrow(
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  borrowAtMaturity(
    maturity: PromiseOrValue<BigNumberish>,
    assets: PromiseOrValue<BigNumberish>,
    maxAssets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  clearBadDebt(
    borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  convertToAssets(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  convertToShares(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  dampSpeedDown(overrides?: CallOverrides): Promise<BigNumber>;

  dampSpeedUp(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  deposit(
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositAtMaturity(
    maturity: PromiseOrValue<BigNumberish>,
    assets: PromiseOrValue<BigNumberish>,
    minAssetsRequired: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  earningsAccumulator(overrides?: CallOverrides): Promise<BigNumber>;

  earningsAccumulatorSmoothFactor(overrides?: CallOverrides): Promise<BigNumber>;

  fixedBorrowPositions(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { principal: BigNumber; fee: BigNumber }>;

  fixedDepositPositions(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { principal: BigNumber; fee: BigNumber }>;

  fixedPools(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      borrowed: BigNumber;
      supplied: BigNumber;
      unassignedEarnings: BigNumber;
      lastAccrual: BigNumber;
    }
  >;

  floatingAssets(overrides?: CallOverrides): Promise<BigNumber>;

  floatingAssetsAverage(overrides?: CallOverrides): Promise<BigNumber>;

  floatingBackupBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

  floatingDebt(overrides?: CallOverrides): Promise<BigNumber>;

  floatingUtilization(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  initialize(
    maxFuturePools_: PromiseOrValue<BigNumberish>,
    earningsAccumulatorSmoothFactor_: PromiseOrValue<BigNumberish>,
    interestRateModel_: PromiseOrValue<string>,
    penaltyRate_: PromiseOrValue<BigNumberish>,
    backupFeeRate_: PromiseOrValue<BigNumberish>,
    reserveFactor_: PromiseOrValue<BigNumberish>,
    dampSpeedUp_: PromiseOrValue<BigNumberish>,
    dampSpeedDown_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  interestRateModel(overrides?: CallOverrides): Promise<string>;

  lastAccumulatorAccrual(overrides?: CallOverrides): Promise<number>;

  lastAverageUpdate(overrides?: CallOverrides): Promise<number>;

  lastFloatingDebtUpdate(overrides?: CallOverrides): Promise<number>;

  liquidate(
    borrower: PromiseOrValue<string>,
    maxAssets: PromiseOrValue<BigNumberish>,
    seizeMarket: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  maxDeposit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  maxFuturePools(overrides?: CallOverrides): Promise<number>;

  maxMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  maxRedeem(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  maxWithdraw(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    shares: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  penaltyRate(overrides?: CallOverrides): Promise<BigNumber>;

  permit(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  previewBorrow(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  previewDebt(borrower: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  previewDeposit(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  previewFloatingAssetsAverage(overrides?: CallOverrides): Promise<BigNumber>;

  previewMint(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  previewRedeem(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  previewRefund(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  previewRepay(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  previewWithdraw(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    shares: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  refund(
    borrowShares: PromiseOrValue<BigNumberish>,
    borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  repay(
    assets: PromiseOrValue<BigNumberish>,
    borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  repayAtMaturity(
    maturity: PromiseOrValue<BigNumberish>,
    positionAssets: PromiseOrValue<BigNumberish>,
    maxAssets: PromiseOrValue<BigNumberish>,
    borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  reserveFactor(overrides?: CallOverrides): Promise<BigNumber>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  seize(
    liquidator: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    assets: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setBackupFeeRate(
    backupFeeRate_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDampSpeed(
    up: PromiseOrValue<BigNumberish>,
    down: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setEarningsAccumulatorSmoothFactor(
    earningsAccumulatorSmoothFactor_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setInterestRateModel(
    interestRateModel_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxFuturePools(
    futurePools: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setPenaltyRate(
    penaltyRate_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setReserveFactor(
    reserveFactor_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTreasury(
    treasury_: PromiseOrValue<string>,
    treasuryFeeRate_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalFloatingBorrowAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalFloatingBorrowShares(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    shares: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    shares: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  treasuryFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  withdraw(
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawAtMaturity(
    maturity: PromiseOrValue<BigNumberish>,
    positionAssets: PromiseOrValue<BigNumberish>,
    minAssetsRequired: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    accountSnapshot(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    accounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        fixedDeposits: BigNumber;
        fixedBorrows: BigNumber;
        floatingBorrowShares: BigNumber;
      }
    >;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    auditor(overrides?: CallOverrides): Promise<string>;

    backupFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    borrowAtMaturity(
      maturity: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>,
      maxAssets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    clearBadDebt(borrower: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    convertToAssets(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    convertToShares(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    dampSpeedDown(overrides?: CallOverrides): Promise<BigNumber>;

    dampSpeedUp(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    deposit(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    depositAtMaturity(
      maturity: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>,
      minAssetsRequired: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    earningsAccumulator(overrides?: CallOverrides): Promise<BigNumber>;

    earningsAccumulatorSmoothFactor(overrides?: CallOverrides): Promise<BigNumber>;

    fixedBorrowPositions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { principal: BigNumber; fee: BigNumber }>;

    fixedDepositPositions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { principal: BigNumber; fee: BigNumber }>;

    fixedPools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        borrowed: BigNumber;
        supplied: BigNumber;
        unassignedEarnings: BigNumber;
        lastAccrual: BigNumber;
      }
    >;

    floatingAssets(overrides?: CallOverrides): Promise<BigNumber>;

    floatingAssetsAverage(overrides?: CallOverrides): Promise<BigNumber>;

    floatingBackupBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

    floatingDebt(overrides?: CallOverrides): Promise<BigNumber>;

    floatingUtilization(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    initialize(
      maxFuturePools_: PromiseOrValue<BigNumberish>,
      earningsAccumulatorSmoothFactor_: PromiseOrValue<BigNumberish>,
      interestRateModel_: PromiseOrValue<string>,
      penaltyRate_: PromiseOrValue<BigNumberish>,
      backupFeeRate_: PromiseOrValue<BigNumberish>,
      reserveFactor_: PromiseOrValue<BigNumberish>,
      dampSpeedUp_: PromiseOrValue<BigNumberish>,
      dampSpeedDown_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    interestRateModel(overrides?: CallOverrides): Promise<string>;

    lastAccumulatorAccrual(overrides?: CallOverrides): Promise<number>;

    lastAverageUpdate(overrides?: CallOverrides): Promise<number>;

    lastFloatingDebtUpdate(overrides?: CallOverrides): Promise<number>;

    liquidate(
      borrower: PromiseOrValue<string>,
      maxAssets: PromiseOrValue<BigNumberish>,
      seizeMarket: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    maxDeposit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxFuturePools(overrides?: CallOverrides): Promise<number>;

    maxMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    penaltyRate(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    previewBorrow(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewDebt(borrower: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    previewDeposit(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewFloatingAssetsAverage(overrides?: CallOverrides): Promise<BigNumber>;

    previewMint(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewRedeem(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewRefund(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewRepay(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewWithdraw(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    refund(
      borrowShares: PromiseOrValue<BigNumberish>,
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { assets: BigNumber; actualShares: BigNumber }>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    repay(
      assets: PromiseOrValue<BigNumberish>,
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        actualRepay: BigNumber;
        borrowShares: BigNumber;
      }
    >;

    repayAtMaturity(
      maturity: PromiseOrValue<BigNumberish>,
      positionAssets: PromiseOrValue<BigNumberish>,
      maxAssets: PromiseOrValue<BigNumberish>,
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    reserveFactor(overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    seize(
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setBackupFeeRate(backupFeeRate_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setDampSpeed(
      up: PromiseOrValue<BigNumberish>,
      down: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setEarningsAccumulatorSmoothFactor(
      earningsAccumulatorSmoothFactor_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setInterestRateModel(interestRateModel_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setMaxFuturePools(futurePools: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setPenaltyRate(penaltyRate_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setReserveFactor(reserveFactor_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setTreasury(
      treasury_: PromiseOrValue<string>,
      treasuryFeeRate_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalFloatingBorrowAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalFloatingBorrowShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    treasury(overrides?: CallOverrides): Promise<string>;

    treasuryFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    withdrawAtMaturity(
      maturity: PromiseOrValue<BigNumberish>,
      positionAssets: PromiseOrValue<BigNumberish>,
      minAssetsRequired: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {
    'AccumulatorAccrual(uint256)'(timestamp?: null): AccumulatorAccrualEventFilter;
    AccumulatorAccrual(timestamp?: null): AccumulatorAccrualEventFilter;

    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      amount?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      amount?: null,
    ): ApprovalEventFilter;

    'BackupFeeRateSet(uint256)'(backupFeeRate?: null): BackupFeeRateSetEventFilter;
    BackupFeeRateSet(backupFeeRate?: null): BackupFeeRateSetEventFilter;

    'Borrow(address,address,address,uint256,uint256)'(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null,
    ): BorrowEventFilter;
    Borrow(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null,
    ): BorrowEventFilter;

    'BorrowAtMaturity(uint256,address,address,address,uint256,uint256)'(
      maturity?: PromiseOrValue<BigNumberish> | null,
      caller?: null,
      receiver?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      assets?: null,
      fee?: null,
    ): BorrowAtMaturityEventFilter;
    BorrowAtMaturity(
      maturity?: PromiseOrValue<BigNumberish> | null,
      caller?: null,
      receiver?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      assets?: null,
      fee?: null,
    ): BorrowAtMaturityEventFilter;

    'DampSpeedSet(uint256,uint256)'(dampSpeedUp?: null, dampSpeedDown?: null): DampSpeedSetEventFilter;
    DampSpeedSet(dampSpeedUp?: null, dampSpeedDown?: null): DampSpeedSetEventFilter;

    'Deposit(address,address,uint256,uint256)'(
      caller?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null,
    ): DepositEventFilter;
    Deposit(
      caller?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null,
    ): DepositEventFilter;

    'DepositAtMaturity(uint256,address,address,uint256,uint256)'(
      maturity?: PromiseOrValue<BigNumberish> | null,
      caller?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      fee?: null,
    ): DepositAtMaturityEventFilter;
    DepositAtMaturity(
      maturity?: PromiseOrValue<BigNumberish> | null,
      caller?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      fee?: null,
    ): DepositAtMaturityEventFilter;

    'EarningsAccumulatorSmoothFactorSet(uint256)'(
      earningsAccumulatorSmoothFactor?: null,
    ): EarningsAccumulatorSmoothFactorSetEventFilter;
    EarningsAccumulatorSmoothFactorSet(
      earningsAccumulatorSmoothFactor?: null,
    ): EarningsAccumulatorSmoothFactorSetEventFilter;

    'FixedEarningsUpdate(uint256,uint256,uint256)'(
      timestamp?: null,
      maturity?: PromiseOrValue<BigNumberish> | null,
      unassignedEarnings?: null,
    ): FixedEarningsUpdateEventFilter;
    FixedEarningsUpdate(
      timestamp?: null,
      maturity?: PromiseOrValue<BigNumberish> | null,
      unassignedEarnings?: null,
    ): FixedEarningsUpdateEventFilter;

    'FloatingDebtUpdate(uint256,uint256)'(timestamp?: null, utilization?: null): FloatingDebtUpdateEventFilter;
    FloatingDebtUpdate(timestamp?: null, utilization?: null): FloatingDebtUpdateEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'InterestRateModelSet(address)'(interestRateModel?: PromiseOrValue<string> | null): InterestRateModelSetEventFilter;
    InterestRateModelSet(interestRateModel?: PromiseOrValue<string> | null): InterestRateModelSetEventFilter;

    'Liquidate(address,address,uint256,uint256,address,uint256)'(
      receiver?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      assets?: null,
      lendersAssets?: null,
      seizeMarket?: PromiseOrValue<string> | null,
      seizedAssets?: null,
    ): LiquidateEventFilter;
    Liquidate(
      receiver?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      assets?: null,
      lendersAssets?: null,
      seizeMarket?: PromiseOrValue<string> | null,
      seizedAssets?: null,
    ): LiquidateEventFilter;

    'MarketUpdate(uint256,uint256,uint256,uint256,uint256,uint256)'(
      timestamp?: null,
      floatingDepositShares?: null,
      floatingAssets?: null,
      floatingBorrowShares?: null,
      floatingDebt?: null,
      earningsAccumulator?: null,
    ): MarketUpdateEventFilter;
    MarketUpdate(
      timestamp?: null,
      floatingDepositShares?: null,
      floatingAssets?: null,
      floatingBorrowShares?: null,
      floatingDebt?: null,
      earningsAccumulator?: null,
    ): MarketUpdateEventFilter;

    'MaxFuturePoolsSet(uint256)'(maxFuturePools?: null): MaxFuturePoolsSetEventFilter;
    MaxFuturePoolsSet(maxFuturePools?: null): MaxFuturePoolsSetEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'PenaltyRateSet(uint256)'(penaltyRate?: null): PenaltyRateSetEventFilter;
    PenaltyRateSet(penaltyRate?: null): PenaltyRateSetEventFilter;

    'Repay(address,address,uint256,uint256)'(
      caller?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null,
    ): RepayEventFilter;
    Repay(
      caller?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null,
    ): RepayEventFilter;

    'RepayAtMaturity(uint256,address,address,uint256,uint256)'(
      maturity?: PromiseOrValue<BigNumberish> | null,
      caller?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      assets?: null,
      positionAssets?: null,
    ): RepayAtMaturityEventFilter;
    RepayAtMaturity(
      maturity?: PromiseOrValue<BigNumberish> | null,
      caller?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      assets?: null,
      positionAssets?: null,
    ): RepayAtMaturityEventFilter;

    'ReserveFactorSet(uint256)'(reserveFactor?: null): ReserveFactorSetEventFilter;
    ReserveFactorSet(reserveFactor?: null): ReserveFactorSetEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null,
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
    ): RoleRevokedEventFilter;

    'Seize(address,address,uint256)'(
      liquidator?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      assets?: null,
    ): SeizeEventFilter;
    Seize(
      liquidator?: PromiseOrValue<string> | null,
      borrower?: PromiseOrValue<string> | null,
      assets?: null,
    ): SeizeEventFilter;

    'SpreadBadDebt(address,uint256)'(borrower?: PromiseOrValue<string> | null, assets?: null): SpreadBadDebtEventFilter;
    SpreadBadDebt(borrower?: PromiseOrValue<string> | null, assets?: null): SpreadBadDebtEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
    ): TransferEventFilter;

    'TreasurySet(address,uint256)'(
      treasury?: PromiseOrValue<string> | null,
      treasuryFeeRate?: null,
    ): TreasurySetEventFilter;
    TreasurySet(treasury?: PromiseOrValue<string> | null, treasuryFeeRate?: null): TreasurySetEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'Withdraw(address,address,address,uint256,uint256)'(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null,
    ): WithdrawEventFilter;
    Withdraw(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null,
    ): WithdrawEventFilter;

    'WithdrawAtMaturity(uint256,address,address,address,uint256,uint256)'(
      maturity?: PromiseOrValue<BigNumberish> | null,
      caller?: null,
      receiver?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      positionAssets?: null,
      assets?: null,
    ): WithdrawAtMaturityEventFilter;
    WithdrawAtMaturity(
      maturity?: PromiseOrValue<BigNumberish> | null,
      caller?: null,
      receiver?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      positionAssets?: null,
      assets?: null,
    ): WithdrawAtMaturityEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    accountSnapshot(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    accounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    auditor(overrides?: CallOverrides): Promise<BigNumber>;

    backupFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    borrowAtMaturity(
      maturity: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>,
      maxAssets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    clearBadDebt(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    convertToAssets(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    convertToShares(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    dampSpeedDown(overrides?: CallOverrides): Promise<BigNumber>;

    dampSpeedUp(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositAtMaturity(
      maturity: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>,
      minAssetsRequired: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    earningsAccumulator(overrides?: CallOverrides): Promise<BigNumber>;

    earningsAccumulatorSmoothFactor(overrides?: CallOverrides): Promise<BigNumber>;

    fixedBorrowPositions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    fixedDepositPositions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    fixedPools(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    floatingAssets(overrides?: CallOverrides): Promise<BigNumber>;

    floatingAssetsAverage(overrides?: CallOverrides): Promise<BigNumber>;

    floatingBackupBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

    floatingDebt(overrides?: CallOverrides): Promise<BigNumber>;

    floatingUtilization(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(
      maxFuturePools_: PromiseOrValue<BigNumberish>,
      earningsAccumulatorSmoothFactor_: PromiseOrValue<BigNumberish>,
      interestRateModel_: PromiseOrValue<string>,
      penaltyRate_: PromiseOrValue<BigNumberish>,
      backupFeeRate_: PromiseOrValue<BigNumberish>,
      reserveFactor_: PromiseOrValue<BigNumberish>,
      dampSpeedUp_: PromiseOrValue<BigNumberish>,
      dampSpeedDown_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    interestRateModel(overrides?: CallOverrides): Promise<BigNumber>;

    lastAccumulatorAccrual(overrides?: CallOverrides): Promise<BigNumber>;

    lastAverageUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    lastFloatingDebtUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      borrower: PromiseOrValue<string>,
      maxAssets: PromiseOrValue<BigNumberish>,
      seizeMarket: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    maxDeposit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxFuturePools(overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    penaltyRate(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    previewBorrow(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewDebt(borrower: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    previewDeposit(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewFloatingAssetsAverage(overrides?: CallOverrides): Promise<BigNumber>;

    previewMint(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewRedeem(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewRefund(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewRepay(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    previewWithdraw(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    refund(
      borrowShares: PromiseOrValue<BigNumberish>,
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    repay(
      assets: PromiseOrValue<BigNumberish>,
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    repayAtMaturity(
      maturity: PromiseOrValue<BigNumberish>,
      positionAssets: PromiseOrValue<BigNumberish>,
      maxAssets: PromiseOrValue<BigNumberish>,
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    reserveFactor(overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    seize(
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setBackupFeeRate(
      backupFeeRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDampSpeed(
      up: PromiseOrValue<BigNumberish>,
      down: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setEarningsAccumulatorSmoothFactor(
      earningsAccumulatorSmoothFactor_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setInterestRateModel(
      interestRateModel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxFuturePools(
      futurePools: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setPenaltyRate(
      penaltyRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setReserveFactor(
      reserveFactor_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTreasury(
      treasury_: PromiseOrValue<string>,
      treasuryFeeRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalFloatingBorrowAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalFloatingBorrowShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawAtMaturity(
      maturity: PromiseOrValue<BigNumberish>,
      positionAssets: PromiseOrValue<BigNumberish>,
      minAssetsRequired: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountSnapshot(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auditor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    backupFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    borrowAtMaturity(
      maturity: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>,
      maxAssets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    clearBadDebt(
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    convertToAssets(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertToShares(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dampSpeedDown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dampSpeedUp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositAtMaturity(
      maturity: PromiseOrValue<BigNumberish>,
      assets: PromiseOrValue<BigNumberish>,
      minAssetsRequired: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    earningsAccumulator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earningsAccumulatorSmoothFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fixedBorrowPositions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    fixedDepositPositions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    fixedPools(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    floatingAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    floatingAssetsAverage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    floatingBackupBorrowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    floatingDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    floatingUtilization(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      maxFuturePools_: PromiseOrValue<BigNumberish>,
      earningsAccumulatorSmoothFactor_: PromiseOrValue<BigNumberish>,
      interestRateModel_: PromiseOrValue<string>,
      penaltyRate_: PromiseOrValue<BigNumberish>,
      backupFeeRate_: PromiseOrValue<BigNumberish>,
      reserveFactor_: PromiseOrValue<BigNumberish>,
      dampSpeedUp_: PromiseOrValue<BigNumberish>,
      dampSpeedDown_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    interestRateModel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastAccumulatorAccrual(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastAverageUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastFloatingDebtUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidate(
      borrower: PromiseOrValue<string>,
      maxAssets: PromiseOrValue<BigNumberish>,
      seizeMarket: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    maxDeposit(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxFuturePools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxMint(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRedeem(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxWithdraw(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    penaltyRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    previewBorrow(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewDebt(borrower: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewDeposit(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewFloatingAssetsAverage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewMint(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewRedeem(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewRefund(shares: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewRepay(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewWithdraw(assets: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    refund(
      borrowShares: PromiseOrValue<BigNumberish>,
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    repay(
      assets: PromiseOrValue<BigNumberish>,
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    repayAtMaturity(
      maturity: PromiseOrValue<BigNumberish>,
      positionAssets: PromiseOrValue<BigNumberish>,
      maxAssets: PromiseOrValue<BigNumberish>,
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    reserveFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    seize(
      liquidator: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      assets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setBackupFeeRate(
      backupFeeRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDampSpeed(
      up: PromiseOrValue<BigNumberish>,
      down: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setEarningsAccumulatorSmoothFactor(
      earningsAccumulatorSmoothFactor_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setInterestRateModel(
      interestRateModel_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxFuturePools(
      futurePools: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setPenaltyRate(
      penaltyRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setReserveFactor(
      reserveFactor_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTreasury(
      treasury_: PromiseOrValue<string>,
      treasuryFeeRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalFloatingBorrowAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalFloatingBorrowShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      shares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawAtMaturity(
      maturity: PromiseOrValue<BigNumberish>,
      positionAssets: PromiseOrValue<BigNumberish>,
      minAssetsRequired: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
