/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface MyceliumRewardTrackerInterface extends utils.Interface {
  functions: {
    'BASIS_POINTS_DIVISOR()': FunctionFragment;
    'PRECISION()': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'allowances(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'averageStakedAmounts(address)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'balances(address)': FunctionFragment;
    'claim(address)': FunctionFragment;
    'claimForAccount(address,address)': FunctionFragment;
    'claimable(address)': FunctionFragment;
    'claimableReward(address)': FunctionFragment;
    'cumulativeRewardPerToken()': FunctionFragment;
    'cumulativeRewards(address)': FunctionFragment;
    'decimals()': FunctionFragment;
    'depositBalances(address,address)': FunctionFragment;
    'distributor()': FunctionFragment;
    'gov()': FunctionFragment;
    'inPrivateClaimingMode()': FunctionFragment;
    'inPrivateStakingMode()': FunctionFragment;
    'inPrivateTransferMode()': FunctionFragment;
    'initialize(address[],address)': FunctionFragment;
    'isDepositToken(address)': FunctionFragment;
    'isHandler(address)': FunctionFragment;
    'isInitialized()': FunctionFragment;
    'name()': FunctionFragment;
    'previousCumulatedRewardPerToken(address)': FunctionFragment;
    'rewardToken()': FunctionFragment;
    'setDepositToken(address,bool)': FunctionFragment;
    'setGov(address)': FunctionFragment;
    'setHandler(address,bool)': FunctionFragment;
    'setInPrivateClaimingMode(bool)': FunctionFragment;
    'setInPrivateStakingMode(bool)': FunctionFragment;
    'setInPrivateTransferMode(bool)': FunctionFragment;
    'stake(address,uint256)': FunctionFragment;
    'stakeForAccount(address,address,address,uint256)': FunctionFragment;
    'stakedAmounts(address)': FunctionFragment;
    'symbol()': FunctionFragment;
    'tokensPerInterval()': FunctionFragment;
    'totalDepositSupply(address)': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'unstake(address,uint256)': FunctionFragment;
    'unstakeForAccount(address,address,uint256,address)': FunctionFragment;
    'updateRewards()': FunctionFragment;
    'withdrawToken(address,address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BASIS_POINTS_DIVISOR'
      | 'PRECISION'
      | 'allowance'
      | 'allowances'
      | 'approve'
      | 'averageStakedAmounts'
      | 'balanceOf'
      | 'balances'
      | 'claim'
      | 'claimForAccount'
      | 'claimable'
      | 'claimableReward'
      | 'cumulativeRewardPerToken'
      | 'cumulativeRewards'
      | 'decimals'
      | 'depositBalances'
      | 'distributor'
      | 'gov'
      | 'inPrivateClaimingMode'
      | 'inPrivateStakingMode'
      | 'inPrivateTransferMode'
      | 'initialize'
      | 'isDepositToken'
      | 'isHandler'
      | 'isInitialized'
      | 'name'
      | 'previousCumulatedRewardPerToken'
      | 'rewardToken'
      | 'setDepositToken'
      | 'setGov'
      | 'setHandler'
      | 'setInPrivateClaimingMode'
      | 'setInPrivateStakingMode'
      | 'setInPrivateTransferMode'
      | 'stake'
      | 'stakeForAccount'
      | 'stakedAmounts'
      | 'symbol'
      | 'tokensPerInterval'
      | 'totalDepositSupply'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'unstake'
      | 'unstakeForAccount'
      | 'updateRewards'
      | 'withdrawToken',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BASIS_POINTS_DIVISOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'allowances', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'averageStakedAmounts', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'balances', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'claim', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'claimForAccount',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'claimable', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'claimableReward', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'cumulativeRewardPerToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'cumulativeRewards', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'depositBalances',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'distributor', values?: undefined): string;
  encodeFunctionData(functionFragment: 'gov', values?: undefined): string;
  encodeFunctionData(functionFragment: 'inPrivateClaimingMode', values?: undefined): string;
  encodeFunctionData(functionFragment: 'inPrivateStakingMode', values?: undefined): string;
  encodeFunctionData(functionFragment: 'inPrivateTransferMode', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<string>[], PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'isDepositToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isHandler', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isInitialized', values?: undefined): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'previousCumulatedRewardPerToken', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'rewardToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setDepositToken',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(functionFragment: 'setGov', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'setHandler', values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'setInPrivateClaimingMode', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'setInPrivateStakingMode', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'setInPrivateTransferMode', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'stake', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'stakeForAccount',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'stakedAmounts', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokensPerInterval', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalDepositSupply', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'unstake',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'unstakeForAccount',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'updateRewards', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdrawToken',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  decodeFunctionResult(functionFragment: 'BASIS_POINTS_DIVISOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'averageStakedAmounts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimForAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimableReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cumulativeRewardPerToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cumulativeRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositBalances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distributor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gov', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'inPrivateClaimingMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'inPrivateStakingMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'inPrivateTransferMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isDepositToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isHandler', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isInitialized', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'previousCumulatedRewardPerToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDepositToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setGov', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setHandler', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setInPrivateClaimingMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setInPrivateStakingMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setInPrivateTransferMode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeForAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakedAmounts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokensPerInterval', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalDepositSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstakeForAccount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawToken', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Claim(address,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Claim'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ClaimEventObject {
  receiver: string;
  amount: BigNumber;
}
export type ClaimEvent = TypedEvent<[string, BigNumber], ClaimEventObject>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface MyceliumRewardTracker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MyceliumRewardTrackerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      _owner: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    allowances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    approve(
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    averageStakedAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    balances(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimForAccount(
      _account: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimable(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    claimableReward(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    cumulativeRewardPerToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    cumulativeRewards(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    depositBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    distributor(overrides?: CallOverrides): Promise<[string]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    inPrivateClaimingMode(overrides?: CallOverrides): Promise<[boolean]>;

    inPrivateStakingMode(overrides?: CallOverrides): Promise<[boolean]>;

    inPrivateTransferMode(overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      _depositTokens: PromiseOrValue<string>[],
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isDepositToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isHandler(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    previousCumulatedRewardPerToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    setDepositToken(
      _depositToken: PromiseOrValue<string>,
      _isDepositToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setHandler(
      _handler: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setInPrivateClaimingMode(
      _inPrivateClaimingMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setInPrivateStakingMode(
      _inPrivateStakingMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setInPrivateTransferMode(
      _inPrivateTransferMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stake(
      _depositToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stakeForAccount(
      _fundingAccount: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _depositToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stakedAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokensPerInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDepositSupply(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      _sender: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unstake(
      _depositToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unstakeForAccount(
      _account: PromiseOrValue<string>,
      _depositToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateRewards(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    withdrawToken(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    _owner: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  allowances(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    _spender: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  averageStakedAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  balances(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimForAccount(
    _account: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimable(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  claimableReward(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  cumulativeRewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

  cumulativeRewards(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  depositBalances(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  distributor(overrides?: CallOverrides): Promise<string>;

  gov(overrides?: CallOverrides): Promise<string>;

  inPrivateClaimingMode(overrides?: CallOverrides): Promise<boolean>;

  inPrivateStakingMode(overrides?: CallOverrides): Promise<boolean>;

  inPrivateTransferMode(overrides?: CallOverrides): Promise<boolean>;

  initialize(
    _depositTokens: PromiseOrValue<string>[],
    _distributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isDepositToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isHandler(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  previousCumulatedRewardPerToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  setDepositToken(
    _depositToken: PromiseOrValue<string>,
    _isDepositToken: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setGov(
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setHandler(
    _handler: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setInPrivateClaimingMode(
    _inPrivateClaimingMode: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setInPrivateStakingMode(
    _inPrivateStakingMode: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setInPrivateTransferMode(
    _inPrivateTransferMode: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stake(
    _depositToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stakeForAccount(
    _fundingAccount: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    _depositToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stakedAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokensPerInterval(overrides?: CallOverrides): Promise<BigNumber>;

  totalDepositSupply(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _recipient: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    _sender: PromiseOrValue<string>,
    _recipient: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unstake(
    _depositToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unstakeForAccount(
    _account: PromiseOrValue<string>,
    _depositToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateRewards(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  withdrawToken(
    _token: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      _owner: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    allowances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    averageStakedAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    balances(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    claim(_receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    claimForAccount(
      _account: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    claimable(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    claimableReward(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    cumulativeRewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    cumulativeRewards(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    depositBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    distributor(overrides?: CallOverrides): Promise<string>;

    gov(overrides?: CallOverrides): Promise<string>;

    inPrivateClaimingMode(overrides?: CallOverrides): Promise<boolean>;

    inPrivateStakingMode(overrides?: CallOverrides): Promise<boolean>;

    inPrivateTransferMode(overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _depositTokens: PromiseOrValue<string>[],
      _distributor: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    isDepositToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isHandler(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    previousCumulatedRewardPerToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    setDepositToken(
      _depositToken: PromiseOrValue<string>,
      _isDepositToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setGov(_gov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    setHandler(
      _handler: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setInPrivateClaimingMode(_inPrivateClaimingMode: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setInPrivateStakingMode(_inPrivateStakingMode: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    setInPrivateTransferMode(_inPrivateTransferMode: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    stake(
      _depositToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    stakeForAccount(
      _fundingAccount: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _depositToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    stakedAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokensPerInterval(overrides?: CallOverrides): Promise<BigNumber>;

    totalDepositSupply(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      _sender: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    unstake(
      _depositToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    unstakeForAccount(
      _account: PromiseOrValue<string>,
      _depositToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateRewards(overrides?: CallOverrides): Promise<void>;

    withdrawToken(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'Claim(address,uint256)'(receiver?: null, amount?: null): ClaimEventFilter;
    Claim(receiver?: null, amount?: null): ClaimEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
  };

  estimateGas: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      _owner: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    allowances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    approve(
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    averageStakedAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    balances(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimForAccount(
      _account: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimable(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    claimableReward(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    cumulativeRewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    cumulativeRewards(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    depositBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    distributor(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    inPrivateClaimingMode(overrides?: CallOverrides): Promise<BigNumber>;

    inPrivateStakingMode(overrides?: CallOverrides): Promise<BigNumber>;

    inPrivateTransferMode(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _depositTokens: PromiseOrValue<string>[],
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isDepositToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isHandler(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    previousCumulatedRewardPerToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    setDepositToken(
      _depositToken: PromiseOrValue<string>,
      _isDepositToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setGov(_gov: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    setHandler(
      _handler: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setInPrivateClaimingMode(
      _inPrivateClaimingMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setInPrivateStakingMode(
      _inPrivateStakingMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setInPrivateTransferMode(
      _inPrivateTransferMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stake(
      _depositToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stakeForAccount(
      _fundingAccount: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _depositToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stakedAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokensPerInterval(overrides?: CallOverrides): Promise<BigNumber>;

    totalDepositSupply(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      _sender: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unstake(
      _depositToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unstakeForAccount(
      _account: PromiseOrValue<string>,
      _depositToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateRewards(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    withdrawToken(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      _owner: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    allowances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    averageStakedAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balances(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimForAccount(
      _account: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimable(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimableReward(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cumulativeRewardPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cumulativeRewards(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    distributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inPrivateClaimingMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inPrivateStakingMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inPrivateTransferMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _depositTokens: PromiseOrValue<string>[],
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isDepositToken(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isHandler(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previousCumulatedRewardPerToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDepositToken(
      _depositToken: PromiseOrValue<string>,
      _isDepositToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setHandler(
      _handler: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setInPrivateClaimingMode(
      _inPrivateClaimingMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setInPrivateStakingMode(
      _inPrivateStakingMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setInPrivateTransferMode(
      _inPrivateTransferMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stake(
      _depositToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stakeForAccount(
      _fundingAccount: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _depositToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stakedAmounts(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensPerInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDepositSupply(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _sender: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unstake(
      _depositToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unstakeForAccount(
      _account: PromiseOrValue<string>,
      _depositToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateRewards(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    withdrawToken(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
