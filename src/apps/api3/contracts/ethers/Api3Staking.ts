/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface Api3StakingInterface extends utils.Interface {
  functions: {
    'EPOCH_LENGTH()': FunctionFragment;
    'REWARD_VESTING_PERIOD()': FunctionFragment;
    'agentAppPrimary()': FunctionFragment;
    'agentAppSecondary()': FunctionFragment;
    'api3Token()': FunctionFragment;
    'apr()': FunctionFragment;
    'aprUpdateStep()': FunctionFragment;
    'claimsManagerStatus(address)': FunctionFragment;
    'delegateVotingPower(address)': FunctionFragment;
    'delegatedToUser(address)': FunctionFragment;
    'delegatedToUserAt(address,uint256)': FunctionFragment;
    'deposit(address,uint256,address)': FunctionFragment;
    'depositAndStake(uint256)': FunctionFragment;
    'depositRegular(uint256)': FunctionFragment;
    'depositWithVesting(address,uint256,address,uint256,uint256)': FunctionFragment;
    'epochIndexOfLastReward()': FunctionFragment;
    'epochIndexToReward(uint256)': FunctionFragment;
    'genesisEpoch()': FunctionFragment;
    'getUser(address)': FunctionFragment;
    'isGenesisEpoch()': FunctionFragment;
    'maxApr()': FunctionFragment;
    'minApr()': FunctionFragment;
    'mintReward()': FunctionFragment;
    'payOutClaim(address,uint256)': FunctionFragment;
    'poolShares(uint256)': FunctionFragment;
    'precalculateUserLocked(address,uint256)': FunctionFragment;
    'proposalVotingPowerThreshold()': FunctionFragment;
    'scheduleUnstake(uint256)': FunctionFragment;
    'setAprUpdateStep(uint256)': FunctionFragment;
    'setClaimsManagerStatus(address,bool)': FunctionFragment;
    'setDaoApps(address,address,address,address)': FunctionFragment;
    'setMaxApr(uint256)': FunctionFragment;
    'setMinApr(uint256)': FunctionFragment;
    'setProposalVotingPowerThreshold(uint256)': FunctionFragment;
    'setStakeTarget(uint256)': FunctionFragment;
    'setUnstakeWaitPeriod(uint256)': FunctionFragment;
    'stake(uint256)': FunctionFragment;
    'stakeTarget()': FunctionFragment;
    'timelockManager()': FunctionFragment;
    'totalShares()': FunctionFragment;
    'totalSharesAt(uint256)': FunctionFragment;
    'totalStake()': FunctionFragment;
    'undelegateVotingPower()': FunctionFragment;
    'unstake(address)': FunctionFragment;
    'unstakeAndWithdraw()': FunctionFragment;
    'unstakeWaitPeriod()': FunctionFragment;
    'updateLastProposalTimestamp(address)': FunctionFragment;
    'updateTimelockStatus(address)': FunctionFragment;
    'userDelegate(address)': FunctionFragment;
    'userDelegateAt(address,uint256)': FunctionFragment;
    'userLocked(address)': FunctionFragment;
    'userShares(address)': FunctionFragment;
    'userSharesAt(address,uint256)': FunctionFragment;
    'userStake(address)': FunctionFragment;
    'userToLockedCalculation(address)': FunctionFragment;
    'userToTimelock(address)': FunctionFragment;
    'userVotingPower(address)': FunctionFragment;
    'userVotingPowerAt(address,uint256)': FunctionFragment;
    'users(address)': FunctionFragment;
    'votingAppPrimary()': FunctionFragment;
    'votingAppSecondary()': FunctionFragment;
    'withdrawPrecalculated(uint256)': FunctionFragment;
    'withdrawRegular(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'EPOCH_LENGTH'
      | 'REWARD_VESTING_PERIOD'
      | 'agentAppPrimary'
      | 'agentAppSecondary'
      | 'api3Token'
      | 'apr'
      | 'aprUpdateStep'
      | 'claimsManagerStatus'
      | 'delegateVotingPower'
      | 'delegatedToUser'
      | 'delegatedToUserAt'
      | 'deposit'
      | 'depositAndStake'
      | 'depositRegular'
      | 'depositWithVesting'
      | 'epochIndexOfLastReward'
      | 'epochIndexToReward'
      | 'genesisEpoch'
      | 'getUser'
      | 'isGenesisEpoch'
      | 'maxApr'
      | 'minApr'
      | 'mintReward'
      | 'payOutClaim'
      | 'poolShares'
      | 'precalculateUserLocked'
      | 'proposalVotingPowerThreshold'
      | 'scheduleUnstake'
      | 'setAprUpdateStep'
      | 'setClaimsManagerStatus'
      | 'setDaoApps'
      | 'setMaxApr'
      | 'setMinApr'
      | 'setProposalVotingPowerThreshold'
      | 'setStakeTarget'
      | 'setUnstakeWaitPeriod'
      | 'stake'
      | 'stakeTarget'
      | 'timelockManager'
      | 'totalShares'
      | 'totalSharesAt'
      | 'totalStake'
      | 'undelegateVotingPower'
      | 'unstake'
      | 'unstakeAndWithdraw'
      | 'unstakeWaitPeriod'
      | 'updateLastProposalTimestamp'
      | 'updateTimelockStatus'
      | 'userDelegate'
      | 'userDelegateAt'
      | 'userLocked'
      | 'userShares'
      | 'userSharesAt'
      | 'userStake'
      | 'userToLockedCalculation'
      | 'userToTimelock'
      | 'userVotingPower'
      | 'userVotingPowerAt'
      | 'users'
      | 'votingAppPrimary'
      | 'votingAppSecondary'
      | 'withdrawPrecalculated'
      | 'withdrawRegular',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'EPOCH_LENGTH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'REWARD_VESTING_PERIOD', values?: undefined): string;
  encodeFunctionData(functionFragment: 'agentAppPrimary', values?: undefined): string;
  encodeFunctionData(functionFragment: 'agentAppSecondary', values?: undefined): string;
  encodeFunctionData(functionFragment: 'api3Token', values?: undefined): string;
  encodeFunctionData(functionFragment: 'apr', values?: undefined): string;
  encodeFunctionData(functionFragment: 'aprUpdateStep', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimsManagerStatus', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'delegateVotingPower', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'delegatedToUser', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'delegatedToUserAt',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'depositAndStake', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'depositRegular', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'depositWithVesting',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'epochIndexOfLastReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'epochIndexToReward', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'genesisEpoch', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getUser', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'isGenesisEpoch', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxApr', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minApr', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mintReward', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'payOutClaim',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'poolShares', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'precalculateUserLocked',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'proposalVotingPowerThreshold', values?: undefined): string;
  encodeFunctionData(functionFragment: 'scheduleUnstake', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setAprUpdateStep', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setClaimsManagerStatus',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setDaoApps',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'setMaxApr', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setMinApr', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setProposalVotingPowerThreshold',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setStakeTarget', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'setUnstakeWaitPeriod', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'stake', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'stakeTarget', values?: undefined): string;
  encodeFunctionData(functionFragment: 'timelockManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalShares', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSharesAt', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'totalStake', values?: undefined): string;
  encodeFunctionData(functionFragment: 'undelegateVotingPower', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unstake', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'unstakeAndWithdraw', values?: undefined): string;
  encodeFunctionData(functionFragment: 'unstakeWaitPeriod', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateLastProposalTimestamp', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateTimelockStatus', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'userDelegate', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'userDelegateAt',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'userLocked', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'userShares', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'userSharesAt',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'userStake', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'userToLockedCalculation', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'userToTimelock', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'userVotingPower', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'userVotingPowerAt',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'users', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'votingAppPrimary', values?: undefined): string;
  encodeFunctionData(functionFragment: 'votingAppSecondary', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawPrecalculated', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'withdrawRegular', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'EPOCH_LENGTH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'REWARD_VESTING_PERIOD', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'agentAppPrimary', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'agentAppSecondary', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'api3Token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'apr', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'aprUpdateStep', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimsManagerStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegateVotingPower', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegatedToUser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'delegatedToUserAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositAndStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositRegular', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositWithVesting', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'epochIndexOfLastReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'epochIndexToReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'genesisEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isGenesisEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxApr', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minApr', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'payOutClaim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'precalculateUserLocked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'proposalVotingPowerThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'scheduleUnstake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAprUpdateStep', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setClaimsManagerStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDaoApps', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxApr', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMinApr', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setProposalVotingPowerThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setStakeTarget', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setUnstakeWaitPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeTarget', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timelockManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSharesAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'undelegateVotingPower', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstakeAndWithdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unstakeWaitPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateLastProposalTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateTimelockStatus', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userDelegate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userDelegateAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userLocked', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userSharesAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userToLockedCalculation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userToTimelock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userVotingPower', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userVotingPowerAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'users', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'votingAppPrimary', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'votingAppSecondary', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawPrecalculated', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawRegular', data: BytesLike): Result;

  events: {
    'CalculatedUserLocked(address,uint256)': EventFragment;
    'CalculatingUserLocked(address,uint256,uint256)': EventFragment;
    'Delegated(address,address,uint256,uint256)': EventFragment;
    'Deposited(address,uint256,uint256)': EventFragment;
    'DepositedByTimelockManager(address,uint256,uint256)': EventFragment;
    'DepositedVesting(address,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'MintedReward(uint256,uint256,uint256,uint256)': EventFragment;
    'PaidOutClaim(address,uint256,uint256)': EventFragment;
    'ScheduledUnstake(address,uint256,uint256,uint256,uint256)': EventFragment;
    'SetAprUpdateStep(uint256)': EventFragment;
    'SetClaimsManagerStatus(address,bool)': EventFragment;
    'SetDaoApps(address,address,address,address)': EventFragment;
    'SetMaxApr(uint256)': EventFragment;
    'SetMinApr(uint256)': EventFragment;
    'SetProposalVotingPowerThreshold(uint256)': EventFragment;
    'SetStakeTarget(uint256)': EventFragment;
    'SetUnstakeWaitPeriod(uint256)': EventFragment;
    'Staked(address,uint256,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'Undelegated(address,address,uint256,uint256)': EventFragment;
    'Unstaked(address,uint256,uint256,uint256,uint256)': EventFragment;
    'UpdatedDelegation(address,address,bool,uint256,uint256)': EventFragment;
    'UpdatedLastProposalTimestamp(address,uint256,address)': EventFragment;
    'VestedTimelock(address,uint256,uint256)': EventFragment;
    'Withdrawn(address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CalculatedUserLocked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CalculatingUserLocked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Delegated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositedByTimelockManager'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositedVesting'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MintedReward'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PaidOutClaim'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ScheduledUnstake'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetAprUpdateStep'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetClaimsManagerStatus'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetDaoApps'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetMaxApr'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetMinApr'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetProposalVotingPowerThreshold'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetStakeTarget'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetUnstakeWaitPeriod'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Staked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Undelegated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unstaked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatedDelegation'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdatedLastProposalTimestamp'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VestedTimelock'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdrawn'): EventFragment;
}

export interface CalculatedUserLockedEventObject {
  user: string;
  amount: BigNumber;
}
export type CalculatedUserLockedEvent = TypedEvent<[string, BigNumber], CalculatedUserLockedEventObject>;

export type CalculatedUserLockedEventFilter = TypedEventFilter<CalculatedUserLockedEvent>;

export interface CalculatingUserLockedEventObject {
  user: string;
  nextIndEpoch: BigNumber;
  oldestLockedEpoch: BigNumber;
}
export type CalculatingUserLockedEvent = TypedEvent<[string, BigNumber, BigNumber], CalculatingUserLockedEventObject>;

export type CalculatingUserLockedEventFilter = TypedEventFilter<CalculatingUserLockedEvent>;

export interface DelegatedEventObject {
  user: string;
  delegate: string;
  shares: BigNumber;
  totalDelegatedTo: BigNumber;
}
export type DelegatedEvent = TypedEvent<[string, string, BigNumber, BigNumber], DelegatedEventObject>;

export type DelegatedEventFilter = TypedEventFilter<DelegatedEvent>;

export interface DepositedEventObject {
  user: string;
  amount: BigNumber;
  userUnstaked: BigNumber;
}
export type DepositedEvent = TypedEvent<[string, BigNumber, BigNumber], DepositedEventObject>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface DepositedByTimelockManagerEventObject {
  user: string;
  amount: BigNumber;
  userUnstaked: BigNumber;
}
export type DepositedByTimelockManagerEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DepositedByTimelockManagerEventObject
>;

export type DepositedByTimelockManagerEventFilter = TypedEventFilter<DepositedByTimelockManagerEvent>;

export interface DepositedVestingEventObject {
  user: string;
  amount: BigNumber;
  start: BigNumber;
  end: BigNumber;
  userUnstaked: BigNumber;
  userVesting: BigNumber;
}
export type DepositedVestingEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  DepositedVestingEventObject
>;

export type DepositedVestingEventFilter = TypedEventFilter<DepositedVestingEvent>;

export interface MintedRewardEventObject {
  epochIndex: BigNumber;
  amount: BigNumber;
  newApr: BigNumber;
  totalStake: BigNumber;
}
export type MintedRewardEvent = TypedEvent<[BigNumber, BigNumber, BigNumber, BigNumber], MintedRewardEventObject>;

export type MintedRewardEventFilter = TypedEventFilter<MintedRewardEvent>;

export interface PaidOutClaimEventObject {
  recipient: string;
  amount: BigNumber;
  totalStake: BigNumber;
}
export type PaidOutClaimEvent = TypedEvent<[string, BigNumber, BigNumber], PaidOutClaimEventObject>;

export type PaidOutClaimEventFilter = TypedEventFilter<PaidOutClaimEvent>;

export interface ScheduledUnstakeEventObject {
  user: string;
  amount: BigNumber;
  shares: BigNumber;
  scheduledFor: BigNumber;
  userShares: BigNumber;
}
export type ScheduledUnstakeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  ScheduledUnstakeEventObject
>;

export type ScheduledUnstakeEventFilter = TypedEventFilter<ScheduledUnstakeEvent>;

export interface SetAprUpdateStepEventObject {
  aprUpdateStep: BigNumber;
}
export type SetAprUpdateStepEvent = TypedEvent<[BigNumber], SetAprUpdateStepEventObject>;

export type SetAprUpdateStepEventFilter = TypedEventFilter<SetAprUpdateStepEvent>;

export interface SetClaimsManagerStatusEventObject {
  claimsManager: string;
  status: boolean;
}
export type SetClaimsManagerStatusEvent = TypedEvent<[string, boolean], SetClaimsManagerStatusEventObject>;

export type SetClaimsManagerStatusEventFilter = TypedEventFilter<SetClaimsManagerStatusEvent>;

export interface SetDaoAppsEventObject {
  agentAppPrimary: string;
  agentAppSecondary: string;
  votingAppPrimary: string;
  votingAppSecondary: string;
}
export type SetDaoAppsEvent = TypedEvent<[string, string, string, string], SetDaoAppsEventObject>;

export type SetDaoAppsEventFilter = TypedEventFilter<SetDaoAppsEvent>;

export interface SetMaxAprEventObject {
  maxApr: BigNumber;
}
export type SetMaxAprEvent = TypedEvent<[BigNumber], SetMaxAprEventObject>;

export type SetMaxAprEventFilter = TypedEventFilter<SetMaxAprEvent>;

export interface SetMinAprEventObject {
  minApr: BigNumber;
}
export type SetMinAprEvent = TypedEvent<[BigNumber], SetMinAprEventObject>;

export type SetMinAprEventFilter = TypedEventFilter<SetMinAprEvent>;

export interface SetProposalVotingPowerThresholdEventObject {
  proposalVotingPowerThreshold: BigNumber;
}
export type SetProposalVotingPowerThresholdEvent = TypedEvent<[BigNumber], SetProposalVotingPowerThresholdEventObject>;

export type SetProposalVotingPowerThresholdEventFilter = TypedEventFilter<SetProposalVotingPowerThresholdEvent>;

export interface SetStakeTargetEventObject {
  stakeTarget: BigNumber;
}
export type SetStakeTargetEvent = TypedEvent<[BigNumber], SetStakeTargetEventObject>;

export type SetStakeTargetEventFilter = TypedEventFilter<SetStakeTargetEvent>;

export interface SetUnstakeWaitPeriodEventObject {
  unstakeWaitPeriod: BigNumber;
}
export type SetUnstakeWaitPeriodEvent = TypedEvent<[BigNumber], SetUnstakeWaitPeriodEventObject>;

export type SetUnstakeWaitPeriodEventFilter = TypedEventFilter<SetUnstakeWaitPeriodEvent>;

export interface StakedEventObject {
  user: string;
  amount: BigNumber;
  mintedShares: BigNumber;
  userUnstaked: BigNumber;
  userShares: BigNumber;
  totalShares: BigNumber;
  totalStake: BigNumber;
}
export type StakedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  StakedEventObject
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface UndelegatedEventObject {
  user: string;
  delegate: string;
  shares: BigNumber;
  totalDelegatedTo: BigNumber;
}
export type UndelegatedEvent = TypedEvent<[string, string, BigNumber, BigNumber], UndelegatedEventObject>;

export type UndelegatedEventFilter = TypedEventFilter<UndelegatedEvent>;

export interface UnstakedEventObject {
  user: string;
  amount: BigNumber;
  userUnstaked: BigNumber;
  totalShares: BigNumber;
  totalStake: BigNumber;
}
export type UnstakedEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber, BigNumber], UnstakedEventObject>;

export type UnstakedEventFilter = TypedEventFilter<UnstakedEvent>;

export interface UpdatedDelegationEventObject {
  user: string;
  delegate: string;
  delta: boolean;
  shares: BigNumber;
  totalDelegatedTo: BigNumber;
}
export type UpdatedDelegationEvent = TypedEvent<
  [string, string, boolean, BigNumber, BigNumber],
  UpdatedDelegationEventObject
>;

export type UpdatedDelegationEventFilter = TypedEventFilter<UpdatedDelegationEvent>;

export interface UpdatedLastProposalTimestampEventObject {
  user: string;
  lastProposalTimestamp: BigNumber;
  votingApp: string;
}
export type UpdatedLastProposalTimestampEvent = TypedEvent<
  [string, BigNumber, string],
  UpdatedLastProposalTimestampEventObject
>;

export type UpdatedLastProposalTimestampEventFilter = TypedEventFilter<UpdatedLastProposalTimestampEvent>;

export interface VestedTimelockEventObject {
  user: string;
  amount: BigNumber;
  userVesting: BigNumber;
}
export type VestedTimelockEvent = TypedEvent<[string, BigNumber, BigNumber], VestedTimelockEventObject>;

export type VestedTimelockEventFilter = TypedEventFilter<VestedTimelockEvent>;

export interface WithdrawnEventObject {
  user: string;
  amount: BigNumber;
  userUnstaked: BigNumber;
}
export type WithdrawnEvent = TypedEvent<[string, BigNumber, BigNumber], WithdrawnEventObject>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface Api3Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Api3StakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EPOCH_LENGTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    REWARD_VESTING_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    agentAppPrimary(overrides?: CallOverrides): Promise<[string]>;

    agentAppSecondary(overrides?: CallOverrides): Promise<[string]>;

    api3Token(overrides?: CallOverrides): Promise<[string]>;

    apr(overrides?: CallOverrides): Promise<[BigNumber]>;

    aprUpdateStep(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimsManagerStatus(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    delegateVotingPower(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    delegatedToUser(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    delegatedToUserAt(
      userAddress: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    deposit(
      source: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositAndStake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositRegular(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositWithVesting(
      source: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      releaseStart: PromiseOrValue<BigNumberish>,
      releaseEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    epochIndexOfLastReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochIndexToReward(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber] & {
        atBlock: number;
        amount: BigNumber;
        totalSharesThen: BigNumber;
        totalStakeThen: BigNumber;
      }
    >;

    genesisEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUser(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        unstaked: BigNumber;
        vesting: BigNumber;
        unstakeAmount: BigNumber;
        unstakeShares: BigNumber;
        unstakeScheduledFor: BigNumber;
        lastDelegationUpdateTimestamp: BigNumber;
        lastProposalTimestamp: BigNumber;
      }
    >;

    isGenesisEpoch(overrides?: CallOverrides): Promise<[boolean]>;

    maxApr(overrides?: CallOverrides): Promise<[BigNumber]>;

    minApr(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    payOutClaim(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    poolShares(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[number, BigNumber] & { fromBlock: number; value: BigNumber }>;

    precalculateUserLocked(
      userAddress: PromiseOrValue<string>,
      noEpochsPerIteration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    proposalVotingPowerThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    scheduleUnstake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setAprUpdateStep(
      _aprUpdateStep: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setClaimsManagerStatus(
      claimsManager: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setDaoApps(
      _agentAppPrimary: PromiseOrValue<string>,
      _agentAppSecondary: PromiseOrValue<string>,
      _votingAppPrimary: PromiseOrValue<string>,
      _votingAppSecondary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMaxApr(
      _maxApr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setMinApr(
      _minApr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setProposalVotingPowerThreshold(
      _proposalVotingPowerThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setStakeTarget(
      _stakeTarget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setUnstakeWaitPeriod(
      _unstakeWaitPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    stakeTarget(overrides?: CallOverrides): Promise<[BigNumber]>;

    timelockManager(overrides?: CallOverrides): Promise<[string]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSharesAt(_block: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    undelegateVotingPower(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    unstake(
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unstakeAndWithdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    unstakeWaitPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateLastProposalTimestamp(
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateTimelockStatus(
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    userDelegate(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    userDelegateAt(
      userAddress: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    userLocked(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { locked: BigNumber }>;

    userShares(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    userSharesAt(
      userAddress: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    userStake(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    userToLockedCalculation(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        initialIndEpoch: BigNumber;
        nextIndEpoch: BigNumber;
        locked: BigNumber;
      }
    >;

    userToTimelock(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        remainingAmount: BigNumber;
        releaseStart: BigNumber;
        releaseEnd: BigNumber;
      }
    >;

    userVotingPower(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    userVotingPowerAt(
      userAddress: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        unstaked: BigNumber;
        vesting: BigNumber;
        unstakeAmount: BigNumber;
        unstakeShares: BigNumber;
        unstakeScheduledFor: BigNumber;
        lastDelegationUpdateTimestamp: BigNumber;
        lastProposalTimestamp: BigNumber;
      }
    >;

    votingAppPrimary(overrides?: CallOverrides): Promise<[string]>;

    votingAppSecondary(overrides?: CallOverrides): Promise<[string]>;

    withdrawPrecalculated(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawRegular(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  EPOCH_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

  REWARD_VESTING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  agentAppPrimary(overrides?: CallOverrides): Promise<string>;

  agentAppSecondary(overrides?: CallOverrides): Promise<string>;

  api3Token(overrides?: CallOverrides): Promise<string>;

  apr(overrides?: CallOverrides): Promise<BigNumber>;

  aprUpdateStep(overrides?: CallOverrides): Promise<BigNumber>;

  claimsManagerStatus(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  delegateVotingPower(
    delegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  delegatedToUser(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  delegatedToUserAt(
    userAddress: PromiseOrValue<string>,
    _block: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  deposit(
    source: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    userAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositAndStake(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositRegular(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositWithVesting(
    source: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    userAddress: PromiseOrValue<string>,
    releaseStart: PromiseOrValue<BigNumberish>,
    releaseEnd: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  epochIndexOfLastReward(overrides?: CallOverrides): Promise<BigNumber>;

  epochIndexToReward(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber] & {
      atBlock: number;
      amount: BigNumber;
      totalSharesThen: BigNumber;
      totalStakeThen: BigNumber;
    }
  >;

  genesisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  getUser(
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      unstaked: BigNumber;
      vesting: BigNumber;
      unstakeAmount: BigNumber;
      unstakeShares: BigNumber;
      unstakeScheduledFor: BigNumber;
      lastDelegationUpdateTimestamp: BigNumber;
      lastProposalTimestamp: BigNumber;
    }
  >;

  isGenesisEpoch(overrides?: CallOverrides): Promise<boolean>;

  maxApr(overrides?: CallOverrides): Promise<BigNumber>;

  minApr(overrides?: CallOverrides): Promise<BigNumber>;

  mintReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  payOutClaim(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  poolShares(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[number, BigNumber] & { fromBlock: number; value: BigNumber }>;

  precalculateUserLocked(
    userAddress: PromiseOrValue<string>,
    noEpochsPerIteration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  proposalVotingPowerThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  scheduleUnstake(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setAprUpdateStep(
    _aprUpdateStep: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setClaimsManagerStatus(
    claimsManager: PromiseOrValue<string>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setDaoApps(
    _agentAppPrimary: PromiseOrValue<string>,
    _agentAppSecondary: PromiseOrValue<string>,
    _votingAppPrimary: PromiseOrValue<string>,
    _votingAppSecondary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMaxApr(
    _maxApr: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setMinApr(
    _minApr: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setProposalVotingPowerThreshold(
    _proposalVotingPowerThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setStakeTarget(
    _stakeTarget: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setUnstakeWaitPeriod(
    _unstakeWaitPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stake(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  stakeTarget(overrides?: CallOverrides): Promise<BigNumber>;

  timelockManager(overrides?: CallOverrides): Promise<string>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  totalSharesAt(_block: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  totalStake(overrides?: CallOverrides): Promise<BigNumber>;

  undelegateVotingPower(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  unstake(
    userAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unstakeAndWithdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  unstakeWaitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  updateLastProposalTimestamp(
    userAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateTimelockStatus(
    userAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  userDelegate(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  userDelegateAt(
    userAddress: PromiseOrValue<string>,
    _block: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  userLocked(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  userShares(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  userSharesAt(
    userAddress: PromiseOrValue<string>,
    _block: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  userStake(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  userToLockedCalculation(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      initialIndEpoch: BigNumber;
      nextIndEpoch: BigNumber;
      locked: BigNumber;
    }
  >;

  userToTimelock(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalAmount: BigNumber;
      remainingAmount: BigNumber;
      releaseStart: BigNumber;
      releaseEnd: BigNumber;
    }
  >;

  userVotingPower(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  userVotingPowerAt(
    userAddress: PromiseOrValue<string>,
    _block: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  users(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      unstaked: BigNumber;
      vesting: BigNumber;
      unstakeAmount: BigNumber;
      unstakeShares: BigNumber;
      unstakeScheduledFor: BigNumber;
      lastDelegationUpdateTimestamp: BigNumber;
      lastProposalTimestamp: BigNumber;
    }
  >;

  votingAppPrimary(overrides?: CallOverrides): Promise<string>;

  votingAppSecondary(overrides?: CallOverrides): Promise<string>;

  withdrawPrecalculated(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawRegular(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    EPOCH_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_VESTING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    agentAppPrimary(overrides?: CallOverrides): Promise<string>;

    agentAppSecondary(overrides?: CallOverrides): Promise<string>;

    api3Token(overrides?: CallOverrides): Promise<string>;

    apr(overrides?: CallOverrides): Promise<BigNumber>;

    aprUpdateStep(overrides?: CallOverrides): Promise<BigNumber>;

    claimsManagerStatus(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    delegateVotingPower(delegate: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    delegatedToUser(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    delegatedToUserAt(
      userAddress: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    deposit(
      source: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositAndStake(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    depositRegular(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    depositWithVesting(
      source: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      releaseStart: PromiseOrValue<BigNumberish>,
      releaseEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    epochIndexOfLastReward(overrides?: CallOverrides): Promise<BigNumber>;

    epochIndexToReward(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber] & {
        atBlock: number;
        amount: BigNumber;
        totalSharesThen: BigNumber;
        totalStakeThen: BigNumber;
      }
    >;

    genesisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getUser(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        unstaked: BigNumber;
        vesting: BigNumber;
        unstakeAmount: BigNumber;
        unstakeShares: BigNumber;
        unstakeScheduledFor: BigNumber;
        lastDelegationUpdateTimestamp: BigNumber;
        lastProposalTimestamp: BigNumber;
      }
    >;

    isGenesisEpoch(overrides?: CallOverrides): Promise<boolean>;

    maxApr(overrides?: CallOverrides): Promise<BigNumber>;

    minApr(overrides?: CallOverrides): Promise<BigNumber>;

    mintReward(overrides?: CallOverrides): Promise<void>;

    payOutClaim(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    poolShares(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[number, BigNumber] & { fromBlock: number; value: BigNumber }>;

    precalculateUserLocked(
      userAddress: PromiseOrValue<string>,
      noEpochsPerIteration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    proposalVotingPowerThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    scheduleUnstake(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setAprUpdateStep(_aprUpdateStep: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setClaimsManagerStatus(
      claimsManager: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDaoApps(
      _agentAppPrimary: PromiseOrValue<string>,
      _agentAppSecondary: PromiseOrValue<string>,
      _votingAppPrimary: PromiseOrValue<string>,
      _votingAppSecondary: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMaxApr(_maxApr: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setMinApr(_minApr: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setProposalVotingPowerThreshold(
      _proposalVotingPowerThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setStakeTarget(_stakeTarget: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    setUnstakeWaitPeriod(_unstakeWaitPeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    stake(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    stakeTarget(overrides?: CallOverrides): Promise<BigNumber>;

    timelockManager(overrides?: CallOverrides): Promise<string>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalSharesAt(_block: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    totalStake(overrides?: CallOverrides): Promise<BigNumber>;

    undelegateVotingPower(overrides?: CallOverrides): Promise<void>;

    unstake(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    unstakeAndWithdraw(overrides?: CallOverrides): Promise<void>;

    unstakeWaitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    updateLastProposalTimestamp(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateTimelockStatus(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    userDelegate(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    userDelegateAt(
      userAddress: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    userLocked(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userShares(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userSharesAt(
      userAddress: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    userStake(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userToLockedCalculation(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        initialIndEpoch: BigNumber;
        nextIndEpoch: BigNumber;
        locked: BigNumber;
      }
    >;

    userToTimelock(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        remainingAmount: BigNumber;
        releaseStart: BigNumber;
        releaseEnd: BigNumber;
      }
    >;

    userVotingPower(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userVotingPowerAt(
      userAddress: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        unstaked: BigNumber;
        vesting: BigNumber;
        unstakeAmount: BigNumber;
        unstakeShares: BigNumber;
        unstakeScheduledFor: BigNumber;
        lastDelegationUpdateTimestamp: BigNumber;
        lastProposalTimestamp: BigNumber;
      }
    >;

    votingAppPrimary(overrides?: CallOverrides): Promise<string>;

    votingAppSecondary(overrides?: CallOverrides): Promise<string>;

    withdrawPrecalculated(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    withdrawRegular(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'CalculatedUserLocked(address,uint256)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
    ): CalculatedUserLockedEventFilter;
    CalculatedUserLocked(user?: PromiseOrValue<string> | null, amount?: null): CalculatedUserLockedEventFilter;

    'CalculatingUserLocked(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      nextIndEpoch?: null,
      oldestLockedEpoch?: null,
    ): CalculatingUserLockedEventFilter;
    CalculatingUserLocked(
      user?: PromiseOrValue<string> | null,
      nextIndEpoch?: null,
      oldestLockedEpoch?: null,
    ): CalculatingUserLockedEventFilter;

    'Delegated(address,address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      delegate?: PromiseOrValue<string> | null,
      shares?: null,
      totalDelegatedTo?: null,
    ): DelegatedEventFilter;
    Delegated(
      user?: PromiseOrValue<string> | null,
      delegate?: PromiseOrValue<string> | null,
      shares?: null,
      totalDelegatedTo?: null,
    ): DelegatedEventFilter;

    'Deposited(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      userUnstaked?: null,
    ): DepositedEventFilter;
    Deposited(user?: PromiseOrValue<string> | null, amount?: null, userUnstaked?: null): DepositedEventFilter;

    'DepositedByTimelockManager(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      userUnstaked?: null,
    ): DepositedByTimelockManagerEventFilter;
    DepositedByTimelockManager(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      userUnstaked?: null,
    ): DepositedByTimelockManagerEventFilter;

    'DepositedVesting(address,uint256,uint256,uint256,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      start?: null,
      end?: null,
      userUnstaked?: null,
      userVesting?: null,
    ): DepositedVestingEventFilter;
    DepositedVesting(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      start?: null,
      end?: null,
      userUnstaked?: null,
      userVesting?: null,
    ): DepositedVestingEventFilter;

    'MintedReward(uint256,uint256,uint256,uint256)'(
      epochIndex?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      newApr?: null,
      totalStake?: null,
    ): MintedRewardEventFilter;
    MintedReward(
      epochIndex?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      newApr?: null,
      totalStake?: null,
    ): MintedRewardEventFilter;

    'PaidOutClaim(address,uint256,uint256)'(
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
      totalStake?: null,
    ): PaidOutClaimEventFilter;
    PaidOutClaim(recipient?: PromiseOrValue<string> | null, amount?: null, totalStake?: null): PaidOutClaimEventFilter;

    'ScheduledUnstake(address,uint256,uint256,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      shares?: null,
      scheduledFor?: null,
      userShares?: null,
    ): ScheduledUnstakeEventFilter;
    ScheduledUnstake(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      shares?: null,
      scheduledFor?: null,
      userShares?: null,
    ): ScheduledUnstakeEventFilter;

    'SetAprUpdateStep(uint256)'(aprUpdateStep?: null): SetAprUpdateStepEventFilter;
    SetAprUpdateStep(aprUpdateStep?: null): SetAprUpdateStepEventFilter;

    'SetClaimsManagerStatus(address,bool)'(
      claimsManager?: PromiseOrValue<string> | null,
      status?: PromiseOrValue<boolean> | null,
    ): SetClaimsManagerStatusEventFilter;
    SetClaimsManagerStatus(
      claimsManager?: PromiseOrValue<string> | null,
      status?: PromiseOrValue<boolean> | null,
    ): SetClaimsManagerStatusEventFilter;

    'SetDaoApps(address,address,address,address)'(
      agentAppPrimary?: null,
      agentAppSecondary?: null,
      votingAppPrimary?: null,
      votingAppSecondary?: null,
    ): SetDaoAppsEventFilter;
    SetDaoApps(
      agentAppPrimary?: null,
      agentAppSecondary?: null,
      votingAppPrimary?: null,
      votingAppSecondary?: null,
    ): SetDaoAppsEventFilter;

    'SetMaxApr(uint256)'(maxApr?: null): SetMaxAprEventFilter;
    SetMaxApr(maxApr?: null): SetMaxAprEventFilter;

    'SetMinApr(uint256)'(minApr?: null): SetMinAprEventFilter;
    SetMinApr(minApr?: null): SetMinAprEventFilter;

    'SetProposalVotingPowerThreshold(uint256)'(
      proposalVotingPowerThreshold?: null,
    ): SetProposalVotingPowerThresholdEventFilter;
    SetProposalVotingPowerThreshold(proposalVotingPowerThreshold?: null): SetProposalVotingPowerThresholdEventFilter;

    'SetStakeTarget(uint256)'(stakeTarget?: null): SetStakeTargetEventFilter;
    SetStakeTarget(stakeTarget?: null): SetStakeTargetEventFilter;

    'SetUnstakeWaitPeriod(uint256)'(unstakeWaitPeriod?: null): SetUnstakeWaitPeriodEventFilter;
    SetUnstakeWaitPeriod(unstakeWaitPeriod?: null): SetUnstakeWaitPeriodEventFilter;

    'Staked(address,uint256,uint256,uint256,uint256,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      mintedShares?: null,
      userUnstaked?: null,
      userShares?: null,
      totalShares?: null,
      totalStake?: null,
    ): StakedEventFilter;
    Staked(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      mintedShares?: null,
      userUnstaked?: null,
      userShares?: null,
      totalShares?: null,
      totalStake?: null,
    ): StakedEventFilter;

    'Undelegated(address,address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      delegate?: PromiseOrValue<string> | null,
      shares?: null,
      totalDelegatedTo?: null,
    ): UndelegatedEventFilter;
    Undelegated(
      user?: PromiseOrValue<string> | null,
      delegate?: PromiseOrValue<string> | null,
      shares?: null,
      totalDelegatedTo?: null,
    ): UndelegatedEventFilter;

    'Unstaked(address,uint256,uint256,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      userUnstaked?: null,
      totalShares?: null,
      totalStake?: null,
    ): UnstakedEventFilter;
    Unstaked(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      userUnstaked?: null,
      totalShares?: null,
      totalStake?: null,
    ): UnstakedEventFilter;

    'UpdatedDelegation(address,address,bool,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      delegate?: PromiseOrValue<string> | null,
      delta?: null,
      shares?: null,
      totalDelegatedTo?: null,
    ): UpdatedDelegationEventFilter;
    UpdatedDelegation(
      user?: PromiseOrValue<string> | null,
      delegate?: PromiseOrValue<string> | null,
      delta?: null,
      shares?: null,
      totalDelegatedTo?: null,
    ): UpdatedDelegationEventFilter;

    'UpdatedLastProposalTimestamp(address,uint256,address)'(
      user?: PromiseOrValue<string> | null,
      lastProposalTimestamp?: null,
      votingApp?: null,
    ): UpdatedLastProposalTimestampEventFilter;
    UpdatedLastProposalTimestamp(
      user?: PromiseOrValue<string> | null,
      lastProposalTimestamp?: null,
      votingApp?: null,
    ): UpdatedLastProposalTimestampEventFilter;

    'VestedTimelock(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      userVesting?: null,
    ): VestedTimelockEventFilter;
    VestedTimelock(user?: PromiseOrValue<string> | null, amount?: null, userVesting?: null): VestedTimelockEventFilter;

    'Withdrawn(address,uint256,uint256)'(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      userUnstaked?: null,
    ): WithdrawnEventFilter;
    Withdrawn(user?: PromiseOrValue<string> | null, amount?: null, userUnstaked?: null): WithdrawnEventFilter;
  };

  estimateGas: {
    EPOCH_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_VESTING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    agentAppPrimary(overrides?: CallOverrides): Promise<BigNumber>;

    agentAppSecondary(overrides?: CallOverrides): Promise<BigNumber>;

    api3Token(overrides?: CallOverrides): Promise<BigNumber>;

    apr(overrides?: CallOverrides): Promise<BigNumber>;

    aprUpdateStep(overrides?: CallOverrides): Promise<BigNumber>;

    claimsManagerStatus(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    delegateVotingPower(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    delegatedToUser(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    delegatedToUserAt(
      userAddress: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    deposit(
      source: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositAndStake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositRegular(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositWithVesting(
      source: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      releaseStart: PromiseOrValue<BigNumberish>,
      releaseEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    epochIndexOfLastReward(overrides?: CallOverrides): Promise<BigNumber>;

    epochIndexToReward(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    genesisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getUser(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    isGenesisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    maxApr(overrides?: CallOverrides): Promise<BigNumber>;

    minApr(overrides?: CallOverrides): Promise<BigNumber>;

    mintReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    payOutClaim(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    poolShares(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    precalculateUserLocked(
      userAddress: PromiseOrValue<string>,
      noEpochsPerIteration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    proposalVotingPowerThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    scheduleUnstake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setAprUpdateStep(
      _aprUpdateStep: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setClaimsManagerStatus(
      claimsManager: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setDaoApps(
      _agentAppPrimary: PromiseOrValue<string>,
      _agentAppSecondary: PromiseOrValue<string>,
      _votingAppPrimary: PromiseOrValue<string>,
      _votingAppSecondary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMaxApr(
      _maxApr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setMinApr(
      _minApr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setProposalVotingPowerThreshold(
      _proposalVotingPowerThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setStakeTarget(
      _stakeTarget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setUnstakeWaitPeriod(
      _unstakeWaitPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    stakeTarget(overrides?: CallOverrides): Promise<BigNumber>;

    timelockManager(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalSharesAt(_block: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    totalStake(overrides?: CallOverrides): Promise<BigNumber>;

    undelegateVotingPower(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    unstake(
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unstakeAndWithdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    unstakeWaitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    updateLastProposalTimestamp(
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateTimelockStatus(
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    userDelegate(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userDelegateAt(
      userAddress: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    userLocked(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userShares(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userSharesAt(
      userAddress: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    userStake(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userToLockedCalculation(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userToTimelock(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userVotingPower(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    userVotingPowerAt(
      userAddress: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    users(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    votingAppPrimary(overrides?: CallOverrides): Promise<BigNumber>;

    votingAppSecondary(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawPrecalculated(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawRegular(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EPOCH_LENGTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REWARD_VESTING_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    agentAppPrimary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    agentAppSecondary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    api3Token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    apr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aprUpdateStep(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimsManagerStatus(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegateVotingPower(
      delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    delegatedToUser(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegatedToUserAt(
      userAddress: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    deposit(
      source: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositAndStake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositRegular(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositWithVesting(
      source: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      userAddress: PromiseOrValue<string>,
      releaseStart: PromiseOrValue<BigNumberish>,
      releaseEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    epochIndexOfLastReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochIndexToReward(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    genesisEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUser(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isGenesisEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxApr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minApr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    payOutClaim(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    poolShares(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    precalculateUserLocked(
      userAddress: PromiseOrValue<string>,
      noEpochsPerIteration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    proposalVotingPowerThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scheduleUnstake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setAprUpdateStep(
      _aprUpdateStep: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setClaimsManagerStatus(
      claimsManager: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setDaoApps(
      _agentAppPrimary: PromiseOrValue<string>,
      _agentAppSecondary: PromiseOrValue<string>,
      _votingAppPrimary: PromiseOrValue<string>,
      _votingAppSecondary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMaxApr(
      _maxApr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setMinApr(
      _minApr: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setProposalVotingPowerThreshold(
      _proposalVotingPowerThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setStakeTarget(
      _stakeTarget: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setUnstakeWaitPeriod(
      _unstakeWaitPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    stakeTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelockManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSharesAt(_block: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    undelegateVotingPower(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    unstake(
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unstakeAndWithdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    unstakeWaitPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateLastProposalTimestamp(
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateTimelockStatus(
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    userDelegate(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userDelegateAt(
      userAddress: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    userLocked(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userShares(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userSharesAt(
      userAddress: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    userStake(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userToLockedCalculation(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userToTimelock(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userVotingPower(userAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userVotingPowerAt(
      userAddress: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    users(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingAppPrimary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingAppSecondary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawPrecalculated(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawRegular(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
