/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import type { Provider } from '@ethersproject/providers';
import type { YieldYakChef, YieldYakChefInterface } from '../YieldYakChef';

const _abi = [
  {
    type: 'constructor',
    stateMutability: 'nonpayable',
    inputs: [
      {
        type: 'address',
        name: '_owner',
        internalType: 'address',
      },
      {
        type: 'address',
        name: '_lockManager',
        internalType: 'address',
      },
      {
        type: 'uint256',
        name: '_startTimestamp',
        internalType: 'uint256',
      },
      {
        type: 'uint256',
        name: '_rewardsPerSecond',
        internalType: 'uint256',
      },
    ],
  },
  {
    type: 'event',
    name: 'ChangedAddress',
    inputs: [
      {
        type: 'string',
        name: 'addressType',
        internalType: 'string',
        indexed: true,
      },
      {
        type: 'address',
        name: 'oldAddress',
        internalType: 'address',
        indexed: true,
      },
      {
        type: 'address',
        name: 'newAddress',
        internalType: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'ChangedOwner',
    inputs: [
      {
        type: 'address',
        name: 'oldOwner',
        internalType: 'address',
        indexed: true,
      },
      {
        type: 'address',
        name: 'newOwner',
        internalType: 'address',
        indexed: true,
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'ChangedRewardsEndTimestamp',
    inputs: [
      {
        type: 'uint256',
        name: 'oldEndTimestamp',
        internalType: 'uint256',
        indexed: true,
      },
      {
        type: 'uint256',
        name: 'newEndTimestamp',
        internalType: 'uint256',
        indexed: true,
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'ChangedRewardsPerSecond',
    inputs: [
      {
        type: 'uint256',
        name: 'oldRewardsPerSecond',
        internalType: 'uint256',
        indexed: true,
      },
      {
        type: 'uint256',
        name: 'newRewardsPerSecond',
        internalType: 'uint256',
        indexed: true,
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'Deposit',
    inputs: [
      {
        type: 'address',
        name: 'user',
        internalType: 'address',
        indexed: true,
      },
      {
        type: 'uint256',
        name: 'pid',
        internalType: 'uint256',
        indexed: true,
      },
      {
        type: 'uint256',
        name: 'amount',
        internalType: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'EmergencyWithdraw',
    inputs: [
      {
        type: 'address',
        name: 'user',
        internalType: 'address',
        indexed: true,
      },
      {
        type: 'uint256',
        name: 'pid',
        internalType: 'uint256',
        indexed: true,
      },
      {
        type: 'uint256',
        name: 'amount',
        internalType: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'PoolAdded',
    inputs: [
      {
        type: 'uint256',
        name: 'pid',
        internalType: 'uint256',
        indexed: true,
      },
      {
        type: 'address',
        name: 'token',
        internalType: 'address',
        indexed: true,
      },
      {
        type: 'uint256',
        name: 'allocPoints',
        internalType: 'uint256',
        indexed: false,
      },
      {
        type: 'uint256',
        name: 'totalAllocPoints',
        internalType: 'uint256',
        indexed: false,
      },
      {
        type: 'uint256',
        name: 'rewardStartTimestamp',
        internalType: 'uint256',
        indexed: false,
      },
      {
        type: 'bool',
        name: 'vpForDeposit',
        internalType: 'bool',
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'PoolUpdated',
    inputs: [
      {
        type: 'uint256',
        name: 'pid',
        internalType: 'uint256',
        indexed: true,
      },
      {
        type: 'uint256',
        name: 'oldAllocPoints',
        internalType: 'uint256',
        indexed: false,
      },
      {
        type: 'uint256',
        name: 'newAllocPoints',
        internalType: 'uint256',
        indexed: false,
      },
      {
        type: 'uint256',
        name: 'newTotalAllocPoints',
        internalType: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'SetRewardsStartTimestamp',
    inputs: [
      {
        type: 'uint256',
        name: 'startTimestamp',
        internalType: 'uint256',
        indexed: true,
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'Withdraw',
    inputs: [
      {
        type: 'address',
        name: 'user',
        internalType: 'address',
        indexed: true,
      },
      {
        type: 'uint256',
        name: 'pid',
        internalType: 'uint256',
        indexed: true,
      },
      {
        type: 'uint256',
        name: 'amount',
        internalType: 'uint256',
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: 'function',
    stateMutability: 'nonpayable',
    outputs: [],
    name: 'add',
    inputs: [
      {
        type: 'uint256',
        name: 'allocPoint',
        internalType: 'uint256',
      },
      {
        type: 'address',
        name: 'token',
        internalType: 'address',
      },
      {
        type: 'bool',
        name: 'withUpdate',
        internalType: 'bool',
      },
      {
        type: 'bool',
        name: 'vpForDeposit',
        internalType: 'bool',
      },
    ],
  },
  {
    type: 'function',
    stateMutability: 'payable',
    outputs: [],
    name: 'addRewardsBalance',
    inputs: [],
  },
  {
    type: 'function',
    stateMutability: 'nonpayable',
    outputs: [],
    name: 'changeOwner',
    inputs: [
      {
        type: 'address',
        name: 'newOwner',
        internalType: 'address',
      },
    ],
  },
  {
    type: 'function',
    stateMutability: 'nonpayable',
    outputs: [],
    name: 'deposit',
    inputs: [
      {
        type: 'uint256',
        name: 'pid',
        internalType: 'uint256',
      },
      {
        type: 'uint256',
        name: 'amount',
        internalType: 'uint256',
      },
    ],
  },
  {
    type: 'function',
    stateMutability: 'nonpayable',
    outputs: [],
    name: 'depositWithPermit',
    inputs: [
      {
        type: 'uint256',
        name: 'pid',
        internalType: 'uint256',
      },
      {
        type: 'uint256',
        name: 'amount',
        internalType: 'uint256',
      },
      {
        type: 'uint256',
        name: 'deadline',
        internalType: 'uint256',
      },
      {
        type: 'uint8',
        name: 'v',
        internalType: 'uint8',
      },
      {
        type: 'bytes32',
        name: 'r',
        internalType: 'bytes32',
      },
      {
        type: 'bytes32',
        name: 's',
        internalType: 'bytes32',
      },
    ],
  },
  {
    type: 'function',
    stateMutability: 'nonpayable',
    outputs: [],
    name: 'emergencyWithdraw',
    inputs: [
      {
        type: 'uint256',
        name: 'pid',
        internalType: 'uint256',
      },
    ],
  },
  {
    type: 'function',
    stateMutability: 'view',
    outputs: [
      {
        type: 'uint256',
        name: '',
        internalType: 'uint256',
      },
    ],
    name: 'endTimestamp',
    inputs: [],
  },
  {
    type: 'function',
    stateMutability: 'view',
    outputs: [
      {
        type: 'uint256',
        name: '',
        internalType: 'uint256',
      },
    ],
    name: 'getMultiplier',
    inputs: [
      {
        type: 'uint256',
        name: 'from',
        internalType: 'uint256',
      },
      {
        type: 'uint256',
        name: 'to',
        internalType: 'uint256',
      },
    ],
  },
  {
    type: 'function',
    stateMutability: 'view',
    outputs: [
      {
        type: 'address',
        name: '',
        internalType: 'contract ILockManager',
      },
    ],
    name: 'lockManager',
    inputs: [],
  },
  {
    type: 'function',
    stateMutability: 'nonpayable',
    outputs: [],
    name: 'massUpdatePools',
    inputs: [],
  },
  {
    type: 'function',
    stateMutability: 'view',
    outputs: [
      {
        type: 'address',
        name: '',
        internalType: 'address',
      },
    ],
    name: 'owner',
    inputs: [],
  },
  {
    type: 'function',
    stateMutability: 'view',
    outputs: [
      {
        type: 'uint256',
        name: '',
        internalType: 'uint256',
      },
    ],
    name: 'pendingRewards',
    inputs: [
      {
        type: 'uint256',
        name: 'pid',
        internalType: 'uint256',
      },
      {
        type: 'address',
        name: 'account',
        internalType: 'address',
      },
    ],
  },
  {
    type: 'function',
    stateMutability: 'view',
    outputs: [
      {
        type: 'address',
        name: 'token',
        internalType: 'contract IERC20',
      },
      {
        type: 'uint256',
        name: 'allocPoint',
        internalType: 'uint256',
      },
      {
        type: 'uint256',
        name: 'lastRewardTimestamp',
        internalType: 'uint256',
      },
      {
        type: 'uint256',
        name: 'accRewardsPerShare',
        internalType: 'uint256',
      },
      {
        type: 'uint256',
        name: 'totalStaked',
        internalType: 'uint256',
      },
      {
        type: 'bool',
        name: 'vpForDeposit',
        internalType: 'bool',
      },
    ],
    name: 'poolInfo',
    inputs: [
      {
        type: 'uint256',
        name: '',
        internalType: 'uint256',
      },
    ],
  },
  {
    type: 'function',
    stateMutability: 'view',
    outputs: [
      {
        type: 'uint256',
        name: '',
        internalType: 'uint256',
      },
    ],
    name: 'poolLength',
    inputs: [],
  },
  {
    type: 'function',
    stateMutability: 'view',
    outputs: [
      {
        type: 'bool',
        name: '',
        internalType: 'bool',
      },
    ],
    name: 'rewardsActive',
    inputs: [],
  },
  {
    type: 'function',
    stateMutability: 'view',
    outputs: [
      {
        type: 'uint256',
        name: '',
        internalType: 'uint256',
      },
    ],
    name: 'rewardsPerSecond',
    inputs: [],
  },
  {
    type: 'function',
    stateMutability: 'nonpayable',
    outputs: [],
    name: 'set',
    inputs: [
      {
        type: 'uint256',
        name: 'pid',
        internalType: 'uint256',
      },
      {
        type: 'uint256',
        name: 'allocPoint',
        internalType: 'uint256',
      },
      {
        type: 'bool',
        name: 'withUpdate',
        internalType: 'bool',
      },
    ],
  },
  {
    type: 'function',
    stateMutability: 'nonpayable',
    outputs: [],
    name: 'setLockManager',
    inputs: [
      {
        type: 'address',
        name: 'newAddress',
        internalType: 'address',
      },
    ],
  },
  {
    type: 'function',
    stateMutability: 'nonpayable',
    outputs: [],
    name: 'setRewardsPerSecond',
    inputs: [
      {
        type: 'uint256',
        name: 'newRewardsPerSecond',
        internalType: 'uint256',
      },
    ],
  },
  {
    type: 'function',
    stateMutability: 'view',
    outputs: [
      {
        type: 'uint256',
        name: '',
        internalType: 'uint256',
      },
    ],
    name: 'startTimestamp',
    inputs: [],
  },
  {
    type: 'function',
    stateMutability: 'view',
    outputs: [
      {
        type: 'uint256',
        name: '',
        internalType: 'uint256',
      },
    ],
    name: 'totalAllocPoint',
    inputs: [],
  },
  {
    type: 'function',
    stateMutability: 'nonpayable',
    outputs: [],
    name: 'updatePool',
    inputs: [
      {
        type: 'uint256',
        name: 'pid',
        internalType: 'uint256',
      },
    ],
  },
  {
    type: 'function',
    stateMutability: 'view',
    outputs: [
      {
        type: 'uint256',
        name: 'amount',
        internalType: 'uint256',
      },
      {
        type: 'uint256',
        name: 'rewardTokenDebt',
        internalType: 'uint256',
      },
    ],
    name: 'userInfo',
    inputs: [
      {
        type: 'uint256',
        name: '',
        internalType: 'uint256',
      },
      {
        type: 'address',
        name: '',
        internalType: 'address',
      },
    ],
  },
  {
    type: 'function',
    stateMutability: 'nonpayable',
    outputs: [],
    name: 'withdraw',
    inputs: [
      {
        type: 'uint256',
        name: 'pid',
        internalType: 'uint256',
      },
      {
        type: 'uint256',
        name: 'amount',
        internalType: 'uint256',
      },
    ],
  },
  {
    type: 'receive',
    stateMutability: 'payable',
  },
];

export class YieldYakChef__factory {
  static readonly abi = _abi;
  static createInterface(): YieldYakChefInterface {
    return new utils.Interface(_abi) as YieldYakChefInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): YieldYakChef {
    return new Contract(address, _abi, signerOrProvider) as YieldYakChef;
  }
}
