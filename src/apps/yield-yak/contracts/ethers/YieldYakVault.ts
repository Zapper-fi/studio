/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface YieldYakVaultInterface extends utils.Interface {
  functions: {
    'ADMIN_FEE_BIPS()': FunctionFragment;
    'DEPOSITS_ENABLED()': FunctionFragment;
    'DEV_FEE_BIPS()': FunctionFragment;
    'DOMAIN_TYPEHASH()': FunctionFragment;
    'MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST()': FunctionFragment;
    'MIN_TOKENS_TO_REINVEST()': FunctionFragment;
    'PERMIT_TYPEHASH()': FunctionFragment;
    'REINVEST_REWARD_BIPS()': FunctionFragment;
    'VERSION_HASH()': FunctionFragment;
    'allowDepositor(address)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'allowedDepositors(address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'checkReward()': FunctionFragment;
    'decimals()': FunctionFragment;
    'deposit(uint256)': FunctionFragment;
    'depositFor(address,uint256)': FunctionFragment;
    'depositToken()': FunctionFragment;
    'depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'devAddr()': FunctionFragment;
    'estimateDeployedBalance()': FunctionFragment;
    'estimateReinvestReward()': FunctionFragment;
    'getDepositTokensForShares(uint256)': FunctionFragment;
    'getDomainSeparator()': FunctionFragment;
    'getSharesForDepositTokens(uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'numberOfAllowedDepositors()': FunctionFragment;
    'owner()': FunctionFragment;
    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'recoverAVAX(uint256)': FunctionFragment;
    'recoverERC20(address,uint256)': FunctionFragment;
    'reinvest()': FunctionFragment;
    'removeDepositor(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rescueDeployedFunds(uint256,bool)': FunctionFragment;
    'revokeAllowance(address,address)': FunctionFragment;
    'rewardToken()': FunctionFragment;
    'setAllowances()': FunctionFragment;
    'stakingContract()': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalDeposits()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateAdminFee(uint256)': FunctionFragment;
    'updateDepositsEnabled(bool)': FunctionFragment;
    'updateDevAddr(address)': FunctionFragment;
    'updateDevFee(uint256)': FunctionFragment;
    'updateMaxTokensToDepositWithoutReinvest(uint256)': FunctionFragment;
    'updateMinTokensToReinvest(uint256)': FunctionFragment;
    'updateReinvestReward(uint256)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'ADMIN_FEE_BIPS'
      | 'DEPOSITS_ENABLED'
      | 'DEV_FEE_BIPS'
      | 'DOMAIN_TYPEHASH'
      | 'MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST'
      | 'MIN_TOKENS_TO_REINVEST'
      | 'PERMIT_TYPEHASH'
      | 'REINVEST_REWARD_BIPS'
      | 'VERSION_HASH'
      | 'allowDepositor'
      | 'allowance'
      | 'allowedDepositors'
      | 'approve'
      | 'balanceOf'
      | 'checkReward'
      | 'decimals'
      | 'deposit'
      | 'depositFor'
      | 'depositToken'
      | 'depositWithPermit'
      | 'devAddr'
      | 'estimateDeployedBalance'
      | 'estimateReinvestReward'
      | 'getDepositTokensForShares'
      | 'getDomainSeparator'
      | 'getSharesForDepositTokens'
      | 'name'
      | 'nonces'
      | 'numberOfAllowedDepositors'
      | 'owner'
      | 'permit'
      | 'recoverAVAX'
      | 'recoverERC20'
      | 'reinvest'
      | 'removeDepositor'
      | 'renounceOwnership'
      | 'rescueDeployedFunds'
      | 'revokeAllowance'
      | 'rewardToken'
      | 'setAllowances'
      | 'stakingContract'
      | 'symbol'
      | 'totalDeposits'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'updateAdminFee'
      | 'updateDepositsEnabled'
      | 'updateDevAddr'
      | 'updateDevFee'
      | 'updateMaxTokensToDepositWithoutReinvest'
      | 'updateMinTokensToReinvest'
      | 'updateReinvestReward'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'ADMIN_FEE_BIPS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DEPOSITS_ENABLED', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DEV_FEE_BIPS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DOMAIN_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MIN_TOKENS_TO_REINVEST', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PERMIT_TYPEHASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'REINVEST_REWARD_BIPS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'VERSION_HASH', values?: undefined): string;
  encodeFunctionData(functionFragment: 'allowDepositor', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'allowedDepositors', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'checkReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'depositFor',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'depositToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'depositWithPermit',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'devAddr', values?: undefined): string;
  encodeFunctionData(functionFragment: 'estimateDeployedBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'estimateReinvestReward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getDepositTokensForShares', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getDomainSeparator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getSharesForDepositTokens', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nonces', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'numberOfAllowedDepositors', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'permit',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'recoverAVAX', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'recoverERC20',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'reinvest', values?: undefined): string;
  encodeFunctionData(functionFragment: 'removeDepositor', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'rescueDeployedFunds',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'revokeAllowance',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'rewardToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setAllowances', values?: undefined): string;
  encodeFunctionData(functionFragment: 'stakingContract', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalDeposits', values?: undefined): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateAdminFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateDepositsEnabled', values: [PromiseOrValue<boolean>]): string;
  encodeFunctionData(functionFragment: 'updateDevAddr', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateDevFee', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'updateMaxTokensToDepositWithoutReinvest',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'updateMinTokensToReinvest', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'updateReinvestReward', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'ADMIN_FEE_BIPS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEPOSITS_ENABLED', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEV_FEE_BIPS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DOMAIN_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MIN_TOKENS_TO_REINVEST', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PERMIT_TYPEHASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'REINVEST_REWARD_BIPS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'VERSION_HASH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowDepositor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allowedDepositors', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositFor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositWithPermit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'devAddr', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'estimateDeployedBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'estimateReinvestReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDepositTokensForShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getDomainSeparator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSharesForDepositTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numberOfAllowedDepositors', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recoverAVAX', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'recoverERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reinvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeDepositor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rescueDeployedFunds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeAllowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAllowances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakingContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalDeposits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateAdminFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateDepositsEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateDevAddr', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateDevFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMaxTokensToDepositWithoutReinvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMinTokensToReinvest', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateReinvestReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'AllowDepositor(address)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'Deposit(address,uint256)': EventFragment;
    'DepositsEnabled(bool)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Recovered(address,uint256)': EventFragment;
    'Reinvest(uint256,uint256)': EventFragment;
    'RemoveDepositor(address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'UpdateAdminFee(uint256,uint256)': EventFragment;
    'UpdateDevAddr(address,address)': EventFragment;
    'UpdateDevFee(uint256,uint256)': EventFragment;
    'UpdateMaxTokensToDepositWithoutReinvest(uint256,uint256)': EventFragment;
    'UpdateMinTokensToReinvest(uint256,uint256)': EventFragment;
    'UpdateReinvestReward(uint256,uint256)': EventFragment;
    'Withdraw(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AllowDepositor'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositsEnabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Recovered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Reinvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RemoveDepositor'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateAdminFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateDevAddr'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateDevFee'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateMaxTokensToDepositWithoutReinvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateMinTokensToReinvest'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UpdateReinvestReward'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface AllowDepositorEventObject {
  account: string;
}
export type AllowDepositorEvent = TypedEvent<[string], AllowDepositorEventObject>;

export type AllowDepositorEventFilter = TypedEventFilter<AllowDepositorEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DepositEventObject {
  account: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DepositsEnabledEventObject {
  newValue: boolean;
}
export type DepositsEnabledEvent = TypedEvent<[boolean], DepositsEnabledEventObject>;

export type DepositsEnabledEventFilter = TypedEventFilter<DepositsEnabledEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RecoveredEventObject {
  token: string;
  amount: BigNumber;
}
export type RecoveredEvent = TypedEvent<[string, BigNumber], RecoveredEventObject>;

export type RecoveredEventFilter = TypedEventFilter<RecoveredEvent>;

export interface ReinvestEventObject {
  newTotalDeposits: BigNumber;
  newTotalSupply: BigNumber;
}
export type ReinvestEvent = TypedEvent<[BigNumber, BigNumber], ReinvestEventObject>;

export type ReinvestEventFilter = TypedEventFilter<ReinvestEvent>;

export interface RemoveDepositorEventObject {
  account: string;
}
export type RemoveDepositorEvent = TypedEvent<[string], RemoveDepositorEventObject>;

export type RemoveDepositorEventFilter = TypedEventFilter<RemoveDepositorEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UpdateAdminFeeEventObject {
  oldValue: BigNumber;
  newValue: BigNumber;
}
export type UpdateAdminFeeEvent = TypedEvent<[BigNumber, BigNumber], UpdateAdminFeeEventObject>;

export type UpdateAdminFeeEventFilter = TypedEventFilter<UpdateAdminFeeEvent>;

export interface UpdateDevAddrEventObject {
  oldValue: string;
  newValue: string;
}
export type UpdateDevAddrEvent = TypedEvent<[string, string], UpdateDevAddrEventObject>;

export type UpdateDevAddrEventFilter = TypedEventFilter<UpdateDevAddrEvent>;

export interface UpdateDevFeeEventObject {
  oldValue: BigNumber;
  newValue: BigNumber;
}
export type UpdateDevFeeEvent = TypedEvent<[BigNumber, BigNumber], UpdateDevFeeEventObject>;

export type UpdateDevFeeEventFilter = TypedEventFilter<UpdateDevFeeEvent>;

export interface UpdateMaxTokensToDepositWithoutReinvestEventObject {
  oldValue: BigNumber;
  newValue: BigNumber;
}
export type UpdateMaxTokensToDepositWithoutReinvestEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdateMaxTokensToDepositWithoutReinvestEventObject
>;

export type UpdateMaxTokensToDepositWithoutReinvestEventFilter =
  TypedEventFilter<UpdateMaxTokensToDepositWithoutReinvestEvent>;

export interface UpdateMinTokensToReinvestEventObject {
  oldValue: BigNumber;
  newValue: BigNumber;
}
export type UpdateMinTokensToReinvestEvent = TypedEvent<[BigNumber, BigNumber], UpdateMinTokensToReinvestEventObject>;

export type UpdateMinTokensToReinvestEventFilter = TypedEventFilter<UpdateMinTokensToReinvestEvent>;

export interface UpdateReinvestRewardEventObject {
  oldValue: BigNumber;
  newValue: BigNumber;
}
export type UpdateReinvestRewardEvent = TypedEvent<[BigNumber, BigNumber], UpdateReinvestRewardEventObject>;

export type UpdateReinvestRewardEventFilter = TypedEventFilter<UpdateReinvestRewardEvent>;

export interface WithdrawEventObject {
  account: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface YieldYakVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: YieldYakVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_FEE_BIPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEPOSITS_ENABLED(overrides?: CallOverrides): Promise<[boolean]>;

    DEV_FEE_BIPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_TOKENS_TO_REINVEST(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    REINVEST_REWARD_BIPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    VERSION_HASH(overrides?: CallOverrides): Promise<[string]>;

    allowDepositor(
      depositor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    allowance(
      account: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    allowedDepositors(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    checkReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositFor(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    depositToken(overrides?: CallOverrides): Promise<[string]>;

    depositWithPermit(
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    devAddr(overrides?: CallOverrides): Promise<[string]>;

    estimateDeployedBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    estimateReinvestReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDepositTokensForShares(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getDomainSeparator(overrides?: CallOverrides): Promise<[string]>;

    getSharesForDepositTokens(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    numberOfAllowedDepositors(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    recoverAVAX(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    reinvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    removeDepositor(
      depositor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    rescueDeployedFunds(
      minReturnAmountAccepted: PromiseOrValue<BigNumberish>,
      disableDeposits: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    revokeAllowance(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    setAllowances(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    stakingContract(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateAdminFee(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateDepositsEnabled(
      newValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateDevAddr(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateDevFee(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateMaxTokensToDepositWithoutReinvest(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateMinTokensToReinvest(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateReinvestReward(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  ADMIN_FEE_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

  DEPOSITS_ENABLED(overrides?: CallOverrides): Promise<boolean>;

  DEV_FEE_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

  DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_TOKENS_TO_REINVEST(overrides?: CallOverrides): Promise<BigNumber>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  REINVEST_REWARD_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

  VERSION_HASH(overrides?: CallOverrides): Promise<string>;

  allowDepositor(
    depositor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  allowance(
    account: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  allowedDepositors(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  checkReward(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositFor(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  depositToken(overrides?: CallOverrides): Promise<string>;

  depositWithPermit(
    amount: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  devAddr(overrides?: CallOverrides): Promise<string>;

  estimateDeployedBalance(overrides?: CallOverrides): Promise<BigNumber>;

  estimateReinvestReward(overrides?: CallOverrides): Promise<BigNumber>;

  getDepositTokensForShares(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getDomainSeparator(overrides?: CallOverrides): Promise<string>;

  getSharesForDepositTokens(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  numberOfAllowedDepositors(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  permit(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  recoverAVAX(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  recoverERC20(
    tokenAddress: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  reinvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  removeDepositor(
    depositor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  rescueDeployedFunds(
    minReturnAmountAccepted: PromiseOrValue<BigNumberish>,
    disableDeposits: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  revokeAllowance(
    token: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  setAllowances(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  stakingContract(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    dst: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    src: PromiseOrValue<string>,
    dst: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateAdminFee(
    newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateDepositsEnabled(
    newValue: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateDevAddr(
    newValue: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateDevFee(
    newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateMaxTokensToDepositWithoutReinvest(
    newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateMinTokensToReinvest(
    newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateReinvestReward(
    newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN_FEE_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

    DEPOSITS_ENABLED(overrides?: CallOverrides): Promise<boolean>;

    DEV_FEE_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_TOKENS_TO_REINVEST(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    REINVEST_REWARD_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION_HASH(overrides?: CallOverrides): Promise<string>;

    allowDepositor(depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    allowance(
      account: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    allowedDepositors(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    checkReward(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    deposit(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    depositFor(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositToken(overrides?: CallOverrides): Promise<string>;

    depositWithPermit(
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    devAddr(overrides?: CallOverrides): Promise<string>;

    estimateDeployedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    estimateReinvestReward(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositTokensForShares(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getDomainSeparator(overrides?: CallOverrides): Promise<string>;

    getSharesForDepositTokens(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    numberOfAllowedDepositors(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    recoverAVAX(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    reinvest(overrides?: CallOverrides): Promise<void>;

    removeDepositor(depositor: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescueDeployedFunds(
      minReturnAmountAccepted: PromiseOrValue<BigNumberish>,
      disableDeposits: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    revokeAllowance(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    setAllowances(overrides?: CallOverrides): Promise<void>;

    stakingContract(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferFrom(
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateAdminFee(newValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateDepositsEnabled(newValue: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

    updateDevAddr(newValue: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateDevFee(newValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateMaxTokensToDepositWithoutReinvest(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateMinTokensToReinvest(newValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    updateReinvestReward(newValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    withdraw(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'AllowDepositor(address)'(account?: PromiseOrValue<string> | null): AllowDepositorEventFilter;
    AllowDepositor(account?: PromiseOrValue<string> | null): AllowDepositorEventFilter;

    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'Deposit(address,uint256)'(account?: PromiseOrValue<string> | null, amount?: null): DepositEventFilter;
    Deposit(account?: PromiseOrValue<string> | null, amount?: null): DepositEventFilter;

    'DepositsEnabled(bool)'(newValue?: null): DepositsEnabledEventFilter;
    DepositsEnabled(newValue?: null): DepositsEnabledEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'Recovered(address,uint256)'(token?: null, amount?: null): RecoveredEventFilter;
    Recovered(token?: null, amount?: null): RecoveredEventFilter;

    'Reinvest(uint256,uint256)'(newTotalDeposits?: null, newTotalSupply?: null): ReinvestEventFilter;
    Reinvest(newTotalDeposits?: null, newTotalSupply?: null): ReinvestEventFilter;

    'RemoveDepositor(address)'(account?: PromiseOrValue<string> | null): RemoveDepositorEventFilter;
    RemoveDepositor(account?: PromiseOrValue<string> | null): RemoveDepositorEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;

    'UpdateAdminFee(uint256,uint256)'(oldValue?: null, newValue?: null): UpdateAdminFeeEventFilter;
    UpdateAdminFee(oldValue?: null, newValue?: null): UpdateAdminFeeEventFilter;

    'UpdateDevAddr(address,address)'(oldValue?: null, newValue?: null): UpdateDevAddrEventFilter;
    UpdateDevAddr(oldValue?: null, newValue?: null): UpdateDevAddrEventFilter;

    'UpdateDevFee(uint256,uint256)'(oldValue?: null, newValue?: null): UpdateDevFeeEventFilter;
    UpdateDevFee(oldValue?: null, newValue?: null): UpdateDevFeeEventFilter;

    'UpdateMaxTokensToDepositWithoutReinvest(uint256,uint256)'(
      oldValue?: null,
      newValue?: null,
    ): UpdateMaxTokensToDepositWithoutReinvestEventFilter;
    UpdateMaxTokensToDepositWithoutReinvest(
      oldValue?: null,
      newValue?: null,
    ): UpdateMaxTokensToDepositWithoutReinvestEventFilter;

    'UpdateMinTokensToReinvest(uint256,uint256)'(
      oldValue?: null,
      newValue?: null,
    ): UpdateMinTokensToReinvestEventFilter;
    UpdateMinTokensToReinvest(oldValue?: null, newValue?: null): UpdateMinTokensToReinvestEventFilter;

    'UpdateReinvestReward(uint256,uint256)'(oldValue?: null, newValue?: null): UpdateReinvestRewardEventFilter;
    UpdateReinvestReward(oldValue?: null, newValue?: null): UpdateReinvestRewardEventFilter;

    'Withdraw(address,uint256)'(account?: PromiseOrValue<string> | null, amount?: null): WithdrawEventFilter;
    Withdraw(account?: PromiseOrValue<string> | null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    ADMIN_FEE_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

    DEPOSITS_ENABLED(overrides?: CallOverrides): Promise<BigNumber>;

    DEV_FEE_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_TOKENS_TO_REINVEST(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    REINVEST_REWARD_BIPS(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    allowDepositor(
      depositor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    allowance(
      account: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    allowedDepositors(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    checkReward(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositFor(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    depositToken(overrides?: CallOverrides): Promise<BigNumber>;

    depositWithPermit(
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    devAddr(overrides?: CallOverrides): Promise<BigNumber>;

    estimateDeployedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    estimateReinvestReward(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositTokensForShares(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getDomainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    getSharesForDepositTokens(amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    numberOfAllowedDepositors(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    recoverAVAX(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    reinvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    removeDepositor(
      depositor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    rescueDeployedFunds(
      minReturnAmountAccepted: PromiseOrValue<BigNumberish>,
      disableDeposits: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    revokeAllowance(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    setAllowances(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    stakingContract(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferFrom(
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateAdminFee(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateDepositsEnabled(
      newValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateDevAddr(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateDevFee(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateMaxTokensToDepositWithoutReinvest(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateMinTokensToReinvest(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateReinvestReward(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_FEE_BIPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEPOSITS_ENABLED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEV_FEE_BIPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_TOKENS_TO_REINVEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REINVEST_REWARD_BIPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowDepositor(
      depositor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    allowance(
      account: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    allowedDepositors(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositFor(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    depositToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositWithPermit(
      amount: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    devAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    estimateDeployedBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    estimateReinvestReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepositTokensForShares(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDomainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSharesForDepositTokens(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfAllowedDepositors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    recoverAVAX(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    reinvest(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    removeDepositor(
      depositor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    rescueDeployedFunds(
      minReturnAmountAccepted: PromiseOrValue<BigNumberish>,
      disableDeposits: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    revokeAllowance(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAllowances(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    stakingContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      src: PromiseOrValue<string>,
      dst: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateAdminFee(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateDepositsEnabled(
      newValue: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateDevAddr(
      newValue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateDevFee(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateMaxTokensToDepositWithoutReinvest(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateMinTokensToReinvest(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateReinvestReward(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
